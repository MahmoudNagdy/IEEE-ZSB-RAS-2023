
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f1e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001158  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000af7  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 84 07 	call	0xf08	; 0xf08 <main>
  64:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
  7a:	e7 e3       	ldi	r30, 0x37	; 55
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
  80:	e4 e3       	ldi	r30, 0x34	; 52
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
  8c:	eb e3       	ldi	r30, 0x3B	; 59
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
  92:	e8 e3       	ldi	r30, 0x38	; 56
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
  98:	e5 e3       	ldi	r30, 0x35	; 53
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1

}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	08 95       	ret

000000aa <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	2e 97       	sbiw	r28, 0x0e	; 14
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	8a 83       	std	Y+2, r24	; 0x02
  c0:	6b 83       	std	Y+3, r22	; 0x03
  c2:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	08 f0       	brcs	.+2      	; 0xd0 <DIO_u8SetPinDirection+0x26>
  ce:	0c c1       	rjmp	.+536    	; 0x2e8 <DIO_u8SetPinDirection+0x23e>
  d0:	8b 81       	ldd	r24, Y+3	; 0x03
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	08 f0       	brcs	.+2      	; 0xd8 <DIO_u8SetPinDirection+0x2e>
  d6:	08 c1       	rjmp	.+528    	; 0x2e8 <DIO_u8SetPinDirection+0x23e>
  d8:	8c 81       	ldd	r24, Y+4	; 0x04
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	21 f0       	breq	.+8      	; 0xe6 <DIO_u8SetPinDirection+0x3c>
  de:	8c 81       	ldd	r24, Y+4	; 0x04
  e0:	88 23       	and	r24, r24
  e2:	09 f0       	breq	.+2      	; 0xe6 <DIO_u8SetPinDirection+0x3c>
  e4:	01 c1       	rjmp	.+514    	; 0x2e8 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	3e 87       	std	Y+14, r19	; 0x0e
  ee:	2d 87       	std	Y+13, r18	; 0x0d
  f0:	8d 85       	ldd	r24, Y+13	; 0x0d
  f2:	9e 85       	ldd	r25, Y+14	; 0x0e
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_u8SetPinDirection+0x52>
  fa:	4f c0       	rjmp	.+158    	; 0x19a <DIO_u8SetPinDirection+0xf0>
  fc:	2d 85       	ldd	r18, Y+13	; 0x0d
  fe:	3e 85       	ldd	r19, Y+14	; 0x0e
 100:	22 30       	cpi	r18, 0x02	; 2
 102:	31 05       	cpc	r19, r1
 104:	2c f4       	brge	.+10     	; 0x110 <DIO_u8SetPinDirection+0x66>
 106:	8d 85       	ldd	r24, Y+13	; 0x0d
 108:	9e 85       	ldd	r25, Y+14	; 0x0e
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	71 f0       	breq	.+28     	; 0x12a <DIO_u8SetPinDirection+0x80>
 10e:	ed c0       	rjmp	.+474    	; 0x2ea <DIO_u8SetPinDirection+0x240>
 110:	2d 85       	ldd	r18, Y+13	; 0x0d
 112:	3e 85       	ldd	r19, Y+14	; 0x0e
 114:	22 30       	cpi	r18, 0x02	; 2
 116:	31 05       	cpc	r19, r1
 118:	09 f4       	brne	.+2      	; 0x11c <DIO_u8SetPinDirection+0x72>
 11a:	77 c0       	rjmp	.+238    	; 0x20a <DIO_u8SetPinDirection+0x160>
 11c:	8d 85       	ldd	r24, Y+13	; 0x0d
 11e:	9e 85       	ldd	r25, Y+14	; 0x0e
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	91 05       	cpc	r25, r1
 124:	09 f4       	brne	.+2      	; 0x128 <DIO_u8SetPinDirection+0x7e>
 126:	a9 c0       	rjmp	.+338    	; 0x27a <DIO_u8SetPinDirection+0x1d0>
 128:	e0 c0       	rjmp	.+448    	; 0x2ea <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
 12a:	8c 81       	ldd	r24, Y+4	; 0x04
 12c:	28 2f       	mov	r18, r24
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	3c 87       	std	Y+12, r19	; 0x0c
 132:	2b 87       	std	Y+11, r18	; 0x0b
 134:	8b 85       	ldd	r24, Y+11	; 0x0b
 136:	9c 85       	ldd	r25, Y+12	; 0x0c
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	d1 f0       	breq	.+52     	; 0x170 <DIO_u8SetPinDirection+0xc6>
 13c:	2b 85       	ldd	r18, Y+11	; 0x0b
 13e:	3c 85       	ldd	r19, Y+12	; 0x0c
 140:	21 30       	cpi	r18, 0x01	; 1
 142:	31 05       	cpc	r19, r1
 144:	09 f0       	breq	.+2      	; 0x148 <DIO_u8SetPinDirection+0x9e>
 146:	d1 c0       	rjmp	.+418    	; 0x2ea <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
 148:	aa e3       	ldi	r26, 0x3A	; 58
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ea e3       	ldi	r30, 0x3A	; 58
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 2e       	mov	r0, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_u8SetPinDirection+0xbc>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_u8SetPinDirection+0xb8>
 16a:	84 2b       	or	r24, r20
 16c:	8c 93       	st	X, r24
 16e:	bd c0       	rjmp	.+378    	; 0x2ea <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
 170:	aa e3       	ldi	r26, 0x3A	; 58
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	ea e3       	ldi	r30, 0x3A	; 58
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	48 2f       	mov	r20, r24
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	28 2f       	mov	r18, r24
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 2e       	mov	r0, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_u8SetPinDirection+0xe4>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_u8SetPinDirection+0xe0>
 192:	80 95       	com	r24
 194:	84 23       	and	r24, r20
 196:	8c 93       	st	X, r24
 198:	a8 c0       	rjmp	.+336    	; 0x2ea <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	3a 87       	std	Y+10, r19	; 0x0a
 1a2:	29 87       	std	Y+9, r18	; 0x09
 1a4:	89 85       	ldd	r24, Y+9	; 0x09
 1a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	d1 f0       	breq	.+52     	; 0x1e0 <DIO_u8SetPinDirection+0x136>
 1ac:	29 85       	ldd	r18, Y+9	; 0x09
 1ae:	3a 85       	ldd	r19, Y+10	; 0x0a
 1b0:	21 30       	cpi	r18, 0x01	; 1
 1b2:	31 05       	cpc	r19, r1
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <DIO_u8SetPinDirection+0x10e>
 1b6:	99 c0       	rjmp	.+306    	; 0x2ea <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
 1b8:	a7 e3       	ldi	r26, 0x37	; 55
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	e7 e3       	ldi	r30, 0x37	; 55
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 2e       	mov	r0, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_u8SetPinDirection+0x12c>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_u8SetPinDirection+0x128>
 1da:	84 2b       	or	r24, r20
 1dc:	8c 93       	st	X, r24
 1de:	85 c0       	rjmp	.+266    	; 0x2ea <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
 1e0:	a7 e3       	ldi	r26, 0x37	; 55
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e7 e3       	ldi	r30, 0x37	; 55
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	48 2f       	mov	r20, r24
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_u8SetPinDirection+0x154>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_u8SetPinDirection+0x150>
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	8c 93       	st	X, r24
 208:	70 c0       	rjmp	.+224    	; 0x2ea <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
 20a:	8c 81       	ldd	r24, Y+4	; 0x04
 20c:	28 2f       	mov	r18, r24
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	38 87       	std	Y+8, r19	; 0x08
 212:	2f 83       	std	Y+7, r18	; 0x07
 214:	8f 81       	ldd	r24, Y+7	; 0x07
 216:	98 85       	ldd	r25, Y+8	; 0x08
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	d1 f0       	breq	.+52     	; 0x250 <DIO_u8SetPinDirection+0x1a6>
 21c:	2f 81       	ldd	r18, Y+7	; 0x07
 21e:	38 85       	ldd	r19, Y+8	; 0x08
 220:	21 30       	cpi	r18, 0x01	; 1
 222:	31 05       	cpc	r19, r1
 224:	09 f0       	breq	.+2      	; 0x228 <DIO_u8SetPinDirection+0x17e>
 226:	61 c0       	rjmp	.+194    	; 0x2ea <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
 228:	a4 e3       	ldi	r26, 0x34	; 52
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e4 e3       	ldi	r30, 0x34	; 52
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	8b 81       	ldd	r24, Y+3	; 0x03
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_u8SetPinDirection+0x19c>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_u8SetPinDirection+0x198>
 24a:	84 2b       	or	r24, r20
 24c:	8c 93       	st	X, r24
 24e:	4d c0       	rjmp	.+154    	; 0x2ea <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
 250:	a4 e3       	ldi	r26, 0x34	; 52
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e4 e3       	ldi	r30, 0x34	; 52
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	48 2f       	mov	r20, r24
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 2e       	mov	r0, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_u8SetPinDirection+0x1c4>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_u8SetPinDirection+0x1c0>
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	8c 93       	st	X, r24
 278:	38 c0       	rjmp	.+112    	; 0x2ea <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	3e 83       	std	Y+6, r19	; 0x06
 282:	2d 83       	std	Y+5, r18	; 0x05
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	c9 f0       	breq	.+50     	; 0x2be <DIO_u8SetPinDirection+0x214>
 28c:	2d 81       	ldd	r18, Y+5	; 0x05
 28e:	3e 81       	ldd	r19, Y+6	; 0x06
 290:	21 30       	cpi	r18, 0x01	; 1
 292:	31 05       	cpc	r19, r1
 294:	51 f5       	brne	.+84     	; 0x2ea <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
 296:	a1 e3       	ldi	r26, 0x31	; 49
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e1 e3       	ldi	r30, 0x31	; 49
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 2e       	mov	r0, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_u8SetPinDirection+0x20a>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_u8SetPinDirection+0x206>
 2b8:	84 2b       	or	r24, r20
 2ba:	8c 93       	st	X, r24
 2bc:	16 c0       	rjmp	.+44     	; 0x2ea <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
 2be:	a1 e3       	ldi	r26, 0x31	; 49
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e1 e3       	ldi	r30, 0x31	; 49
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8b 81       	ldd	r24, Y+3	; 0x03
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_u8SetPinDirection+0x232>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_u8SetPinDirection+0x22e>
 2e0:	80 95       	com	r24
 2e2:	84 23       	and	r24, r20
 2e4:	8c 93       	st	X, r24
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 2e8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ec:	2e 96       	adiw	r28, 0x0e	; 14
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	cf 91       	pop	r28
 2fa:	df 91       	pop	r29
 2fc:	08 95       	ret

000002fe <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
 2fe:	df 93       	push	r29
 300:	cf 93       	push	r28
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	2f 97       	sbiw	r28, 0x0f	; 15
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
 312:	8b 83       	std	Y+3, r24	; 0x03
 314:	6c 83       	std	Y+4, r22	; 0x04
 316:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	08 f0       	brcs	.+2      	; 0x324 <DIO_u8SetPinValue+0x26>
 322:	13 c1       	rjmp	.+550    	; 0x54a <DIO_u8SetPinValue+0x24c>
 324:	8c 81       	ldd	r24, Y+4	; 0x04
 326:	88 30       	cpi	r24, 0x08	; 8
 328:	08 f0       	brcs	.+2      	; 0x32c <DIO_u8SetPinValue+0x2e>
 32a:	0f c1       	rjmp	.+542    	; 0x54a <DIO_u8SetPinValue+0x24c>
 32c:	8d 81       	ldd	r24, Y+5	; 0x05
 32e:	88 23       	and	r24, r24
 330:	21 f0       	breq	.+8      	; 0x33a <DIO_u8SetPinValue+0x3c>
 332:	8d 81       	ldd	r24, Y+5	; 0x05
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	09 f0       	breq	.+2      	; 0x33a <DIO_u8SetPinValue+0x3c>
 338:	08 c1       	rjmp	.+528    	; 0x54a <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	3f 87       	std	Y+15, r19	; 0x0f
 342:	2e 87       	std	Y+14, r18	; 0x0e
 344:	8e 85       	ldd	r24, Y+14	; 0x0e
 346:	9f 85       	ldd	r25, Y+15	; 0x0f
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	91 05       	cpc	r25, r1
 34c:	09 f4       	brne	.+2      	; 0x350 <DIO_u8SetPinValue+0x52>
 34e:	50 c0       	rjmp	.+160    	; 0x3f0 <DIO_u8SetPinValue+0xf2>
 350:	2e 85       	ldd	r18, Y+14	; 0x0e
 352:	3f 85       	ldd	r19, Y+15	; 0x0f
 354:	22 30       	cpi	r18, 0x02	; 2
 356:	31 05       	cpc	r19, r1
 358:	2c f4       	brge	.+10     	; 0x364 <DIO_u8SetPinValue+0x66>
 35a:	8e 85       	ldd	r24, Y+14	; 0x0e
 35c:	9f 85       	ldd	r25, Y+15	; 0x0f
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	71 f0       	breq	.+28     	; 0x37e <DIO_u8SetPinValue+0x80>
 362:	f4 c0       	rjmp	.+488    	; 0x54c <DIO_u8SetPinValue+0x24e>
 364:	2e 85       	ldd	r18, Y+14	; 0x0e
 366:	3f 85       	ldd	r19, Y+15	; 0x0f
 368:	22 30       	cpi	r18, 0x02	; 2
 36a:	31 05       	cpc	r19, r1
 36c:	09 f4       	brne	.+2      	; 0x370 <DIO_u8SetPinValue+0x72>
 36e:	79 c0       	rjmp	.+242    	; 0x462 <DIO_u8SetPinValue+0x164>
 370:	8e 85       	ldd	r24, Y+14	; 0x0e
 372:	9f 85       	ldd	r25, Y+15	; 0x0f
 374:	83 30       	cpi	r24, 0x03	; 3
 376:	91 05       	cpc	r25, r1
 378:	09 f4       	brne	.+2      	; 0x37c <DIO_u8SetPinValue+0x7e>
 37a:	ad c0       	rjmp	.+346    	; 0x4d6 <DIO_u8SetPinValue+0x1d8>
 37c:	e7 c0       	rjmp	.+462    	; 0x54c <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
 37e:	8d 81       	ldd	r24, Y+5	; 0x05
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	3d 87       	std	Y+13, r19	; 0x0d
 386:	2c 87       	std	Y+12, r18	; 0x0c
 388:	8c 85       	ldd	r24, Y+12	; 0x0c
 38a:	9d 85       	ldd	r25, Y+13	; 0x0d
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	c9 f0       	breq	.+50     	; 0x3c2 <DIO_u8SetPinValue+0xc4>
 390:	2c 85       	ldd	r18, Y+12	; 0x0c
 392:	3d 85       	ldd	r19, Y+13	; 0x0d
 394:	21 30       	cpi	r18, 0x01	; 1
 396:	31 05       	cpc	r19, r1
 398:	49 f5       	brne	.+82     	; 0x3ec <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
 39a:	ab e3       	ldi	r26, 0x3B	; 59
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	eb e3       	ldi	r30, 0x3B	; 59
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	48 2f       	mov	r20, r24
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 2e       	mov	r0, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8SetPinValue+0xba>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8SetPinValue+0xb6>
 3bc:	84 2b       	or	r24, r20
 3be:	8c 93       	st	X, r24
 3c0:	c5 c0       	rjmp	.+394    	; 0x54c <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
 3c2:	ab e3       	ldi	r26, 0x3B	; 59
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	eb e3       	ldi	r30, 0x3B	; 59
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	8c 81       	ldd	r24, Y+4	; 0x04
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 2e       	mov	r0, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_u8SetPinValue+0xe2>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_u8SetPinValue+0xde>
 3e4:	80 95       	com	r24
 3e6:	84 23       	and	r24, r20
 3e8:	8c 93       	st	X, r24
 3ea:	b0 c0       	rjmp	.+352    	; 0x54c <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 3ec:	1a 82       	std	Y+2, r1	; 0x02
 3ee:	ae c0       	rjmp	.+348    	; 0x54c <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
 3f0:	8d 81       	ldd	r24, Y+5	; 0x05
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	3b 87       	std	Y+11, r19	; 0x0b
 3f8:	2a 87       	std	Y+10, r18	; 0x0a
 3fa:	8a 85       	ldd	r24, Y+10	; 0x0a
 3fc:	9b 85       	ldd	r25, Y+11	; 0x0b
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	c9 f0       	breq	.+50     	; 0x434 <DIO_u8SetPinValue+0x136>
 402:	2a 85       	ldd	r18, Y+10	; 0x0a
 404:	3b 85       	ldd	r19, Y+11	; 0x0b
 406:	21 30       	cpi	r18, 0x01	; 1
 408:	31 05       	cpc	r19, r1
 40a:	49 f5       	brne	.+82     	; 0x45e <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
 40c:	a8 e3       	ldi	r26, 0x38	; 56
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e8 e3       	ldi	r30, 0x38	; 56
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8c 81       	ldd	r24, Y+4	; 0x04
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_u8SetPinValue+0x12c>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_u8SetPinValue+0x128>
 42e:	84 2b       	or	r24, r20
 430:	8c 93       	st	X, r24
 432:	8c c0       	rjmp	.+280    	; 0x54c <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
 434:	a8 e3       	ldi	r26, 0x38	; 56
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	e8 e3       	ldi	r30, 0x38	; 56
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	48 2f       	mov	r20, r24
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	28 2f       	mov	r18, r24
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 2e       	mov	r0, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_u8SetPinValue+0x154>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_u8SetPinValue+0x150>
 456:	80 95       	com	r24
 458:	84 23       	and	r24, r20
 45a:	8c 93       	st	X, r24
 45c:	77 c0       	rjmp	.+238    	; 0x54c <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 45e:	1a 82       	std	Y+2, r1	; 0x02
 460:	75 c0       	rjmp	.+234    	; 0x54c <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
 462:	8d 81       	ldd	r24, Y+5	; 0x05
 464:	28 2f       	mov	r18, r24
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	39 87       	std	Y+9, r19	; 0x09
 46a:	28 87       	std	Y+8, r18	; 0x08
 46c:	88 85       	ldd	r24, Y+8	; 0x08
 46e:	99 85       	ldd	r25, Y+9	; 0x09
 470:	00 97       	sbiw	r24, 0x00	; 0
 472:	31 f0       	breq	.+12     	; 0x480 <DIO_u8SetPinValue+0x182>
 474:	28 85       	ldd	r18, Y+8	; 0x08
 476:	39 85       	ldd	r19, Y+9	; 0x09
 478:	21 30       	cpi	r18, 0x01	; 1
 47a:	31 05       	cpc	r19, r1
 47c:	b1 f0       	breq	.+44     	; 0x4aa <DIO_u8SetPinValue+0x1ac>
 47e:	29 c0       	rjmp	.+82     	; 0x4d2 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
 480:	a5 e3       	ldi	r26, 0x35	; 53
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	e5 e3       	ldi	r30, 0x35	; 53
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8c 81       	ldd	r24, Y+4	; 0x04
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 2e       	mov	r0, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_u8SetPinValue+0x1a0>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_u8SetPinValue+0x19c>
 4a2:	80 95       	com	r24
 4a4:	84 23       	and	r24, r20
 4a6:	8c 93       	st	X, r24
 4a8:	51 c0       	rjmp	.+162    	; 0x54c <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
 4aa:	a5 e3       	ldi	r26, 0x35	; 53
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	e5 e3       	ldi	r30, 0x35	; 53
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	48 2f       	mov	r20, r24
 4b6:	8c 81       	ldd	r24, Y+4	; 0x04
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 2e       	mov	r0, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_u8SetPinValue+0x1ca>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_u8SetPinValue+0x1c6>
 4cc:	84 2b       	or	r24, r20
 4ce:	8c 93       	st	X, r24
 4d0:	3d c0       	rjmp	.+122    	; 0x54c <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 4d2:	1a 82       	std	Y+2, r1	; 0x02
 4d4:	3b c0       	rjmp	.+118    	; 0x54c <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
 4d6:	8d 81       	ldd	r24, Y+5	; 0x05
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	3f 83       	std	Y+7, r19	; 0x07
 4de:	2e 83       	std	Y+6, r18	; 0x06
 4e0:	8e 81       	ldd	r24, Y+6	; 0x06
 4e2:	9f 81       	ldd	r25, Y+7	; 0x07
 4e4:	00 97       	sbiw	r24, 0x00	; 0
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <DIO_u8SetPinValue+0x1f6>
 4e8:	2e 81       	ldd	r18, Y+6	; 0x06
 4ea:	3f 81       	ldd	r19, Y+7	; 0x07
 4ec:	21 30       	cpi	r18, 0x01	; 1
 4ee:	31 05       	cpc	r19, r1
 4f0:	b1 f0       	breq	.+44     	; 0x51e <DIO_u8SetPinValue+0x220>
 4f2:	29 c0       	rjmp	.+82     	; 0x546 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
 4f4:	a5 e3       	ldi	r26, 0x35	; 53
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	e5 e3       	ldi	r30, 0x35	; 53
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	48 2f       	mov	r20, r24
 500:	8c 81       	ldd	r24, Y+4	; 0x04
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 2e       	mov	r0, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_u8SetPinValue+0x214>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_u8SetPinValue+0x210>
 516:	80 95       	com	r24
 518:	84 23       	and	r24, r20
 51a:	8c 93       	st	X, r24
 51c:	17 c0       	rjmp	.+46     	; 0x54c <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
 51e:	a2 e3       	ldi	r26, 0x32	; 50
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e2 e3       	ldi	r30, 0x32	; 50
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	48 2f       	mov	r20, r24
 52a:	8c 81       	ldd	r24, Y+4	; 0x04
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 2e       	mov	r0, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_u8SetPinValue+0x23e>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_u8SetPinValue+0x23a>
 540:	84 2b       	or	r24, r20
 542:	8c 93       	st	X, r24
 544:	03 c0       	rjmp	.+6      	; 0x54c <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 546:	1a 82       	std	Y+2, r1	; 0x02
 548:	01 c0       	rjmp	.+2      	; 0x54c <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
 54a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
}
 54e:	2f 96       	adiw	r28, 0x0f	; 15
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	08 95       	ret

00000560 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	28 97       	sbiw	r28, 0x08	; 8
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	8b 83       	std	Y+3, r24	; 0x03
 576:	6c 83       	std	Y+4, r22	; 0x04
 578:	5e 83       	std	Y+6, r21	; 0x06
 57a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
 580:	8b 81       	ldd	r24, Y+3	; 0x03
 582:	84 30       	cpi	r24, 0x04	; 4
 584:	08 f0       	brcs	.+2      	; 0x588 <DIO_u8GetPinValue+0x28>
 586:	9f c0       	rjmp	.+318    	; 0x6c6 <DIO_u8GetPinValue+0x166>
 588:	8c 81       	ldd	r24, Y+4	; 0x04
 58a:	88 30       	cpi	r24, 0x08	; 8
 58c:	08 f0       	brcs	.+2      	; 0x590 <DIO_u8GetPinValue+0x30>
 58e:	9b c0       	rjmp	.+310    	; 0x6c6 <DIO_u8GetPinValue+0x166>
 590:	8d 81       	ldd	r24, Y+5	; 0x05
 592:	9e 81       	ldd	r25, Y+6	; 0x06
 594:	00 97       	sbiw	r24, 0x00	; 0
 596:	09 f4       	brne	.+2      	; 0x59a <DIO_u8GetPinValue+0x3a>
 598:	96 c0       	rjmp	.+300    	; 0x6c6 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	28 2f       	mov	r18, r24
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	38 87       	std	Y+8, r19	; 0x08
 5a2:	2f 83       	std	Y+7, r18	; 0x07
 5a4:	4f 81       	ldd	r20, Y+7	; 0x07
 5a6:	58 85       	ldd	r21, Y+8	; 0x08
 5a8:	41 30       	cpi	r20, 0x01	; 1
 5aa:	51 05       	cpc	r21, r1
 5ac:	a9 f1       	breq	.+106    	; 0x618 <DIO_u8GetPinValue+0xb8>
 5ae:	8f 81       	ldd	r24, Y+7	; 0x07
 5b0:	98 85       	ldd	r25, Y+8	; 0x08
 5b2:	82 30       	cpi	r24, 0x02	; 2
 5b4:	91 05       	cpc	r25, r1
 5b6:	34 f4       	brge	.+12     	; 0x5c4 <DIO_u8GetPinValue+0x64>
 5b8:	2f 81       	ldd	r18, Y+7	; 0x07
 5ba:	38 85       	ldd	r19, Y+8	; 0x08
 5bc:	21 15       	cp	r18, r1
 5be:	31 05       	cpc	r19, r1
 5c0:	71 f0       	breq	.+28     	; 0x5de <DIO_u8GetPinValue+0x7e>
 5c2:	82 c0       	rjmp	.+260    	; 0x6c8 <DIO_u8GetPinValue+0x168>
 5c4:	4f 81       	ldd	r20, Y+7	; 0x07
 5c6:	58 85       	ldd	r21, Y+8	; 0x08
 5c8:	42 30       	cpi	r20, 0x02	; 2
 5ca:	51 05       	cpc	r21, r1
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <DIO_u8GetPinValue+0x70>
 5ce:	41 c0       	rjmp	.+130    	; 0x652 <DIO_u8GetPinValue+0xf2>
 5d0:	8f 81       	ldd	r24, Y+7	; 0x07
 5d2:	98 85       	ldd	r25, Y+8	; 0x08
 5d4:	83 30       	cpi	r24, 0x03	; 3
 5d6:	91 05       	cpc	r25, r1
 5d8:	09 f4       	brne	.+2      	; 0x5dc <DIO_u8GetPinValue+0x7c>
 5da:	58 c0       	rjmp	.+176    	; 0x68c <DIO_u8GetPinValue+0x12c>
 5dc:	75 c0       	rjmp	.+234    	; 0x6c8 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
 5de:	e9 e3       	ldi	r30, 0x39	; 57
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	28 2f       	mov	r18, r24
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ea:	88 2f       	mov	r24, r24
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	a9 01       	movw	r20, r18
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_u8GetPinValue+0x96>
 5f2:	55 95       	asr	r21
 5f4:	47 95       	ror	r20
 5f6:	8a 95       	dec	r24
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_u8GetPinValue+0x92>
 5fa:	ca 01       	movw	r24, r20
 5fc:	81 70       	andi	r24, 0x01	; 1
 5fe:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	88 23       	and	r24, r24
 604:	21 f4       	brne	.+8      	; 0x60e <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 606:	ed 81       	ldd	r30, Y+5	; 0x05
 608:	fe 81       	ldd	r31, Y+6	; 0x06
 60a:	10 82       	st	Z, r1
 60c:	5d c0       	rjmp	.+186    	; 0x6c8 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 60e:	ed 81       	ldd	r30, Y+5	; 0x05
 610:	fe 81       	ldd	r31, Y+6	; 0x06
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 83       	st	Z, r24
 616:	58 c0       	rjmp	.+176    	; 0x6c8 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
 618:	e6 e3       	ldi	r30, 0x36	; 54
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	28 2f       	mov	r18, r24
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	8c 81       	ldd	r24, Y+4	; 0x04
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	a9 01       	movw	r20, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_u8GetPinValue+0xd0>
 62c:	55 95       	asr	r21
 62e:	47 95       	ror	r20
 630:	8a 95       	dec	r24
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_u8GetPinValue+0xcc>
 634:	ca 01       	movw	r24, r20
 636:	81 70       	andi	r24, 0x01	; 1
 638:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
 63a:	89 81       	ldd	r24, Y+1	; 0x01
 63c:	88 23       	and	r24, r24
 63e:	21 f4       	brne	.+8      	; 0x648 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 640:	ed 81       	ldd	r30, Y+5	; 0x05
 642:	fe 81       	ldd	r31, Y+6	; 0x06
 644:	10 82       	st	Z, r1
 646:	40 c0       	rjmp	.+128    	; 0x6c8 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 648:	ed 81       	ldd	r30, Y+5	; 0x05
 64a:	fe 81       	ldd	r31, Y+6	; 0x06
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	80 83       	st	Z, r24
 650:	3b c0       	rjmp	.+118    	; 0x6c8 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
 652:	e3 e3       	ldi	r30, 0x33	; 51
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	28 2f       	mov	r18, r24
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	8c 81       	ldd	r24, Y+4	; 0x04
 65e:	88 2f       	mov	r24, r24
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	a9 01       	movw	r20, r18
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_u8GetPinValue+0x10a>
 666:	55 95       	asr	r21
 668:	47 95       	ror	r20
 66a:	8a 95       	dec	r24
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_u8GetPinValue+0x106>
 66e:	ca 01       	movw	r24, r20
 670:	81 70       	andi	r24, 0x01	; 1
 672:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
 674:	89 81       	ldd	r24, Y+1	; 0x01
 676:	88 23       	and	r24, r24
 678:	21 f4       	brne	.+8      	; 0x682 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 67a:	ed 81       	ldd	r30, Y+5	; 0x05
 67c:	fe 81       	ldd	r31, Y+6	; 0x06
 67e:	10 82       	st	Z, r1
 680:	23 c0       	rjmp	.+70     	; 0x6c8 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 682:	ed 81       	ldd	r30, Y+5	; 0x05
 684:	fe 81       	ldd	r31, Y+6	; 0x06
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	80 83       	st	Z, r24
 68a:	1e c0       	rjmp	.+60     	; 0x6c8 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
 68c:	e0 e3       	ldi	r30, 0x30	; 48
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	8c 81       	ldd	r24, Y+4	; 0x04
 698:	88 2f       	mov	r24, r24
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	a9 01       	movw	r20, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_u8GetPinValue+0x144>
 6a0:	55 95       	asr	r21
 6a2:	47 95       	ror	r20
 6a4:	8a 95       	dec	r24
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_u8GetPinValue+0x140>
 6a8:	ca 01       	movw	r24, r20
 6aa:	81 70       	andi	r24, 0x01	; 1
 6ac:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	88 23       	and	r24, r24
 6b2:	21 f4       	brne	.+8      	; 0x6bc <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 6b4:	ed 81       	ldd	r30, Y+5	; 0x05
 6b6:	fe 81       	ldd	r31, Y+6	; 0x06
 6b8:	10 82       	st	Z, r1
 6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 6bc:	ed 81       	ldd	r30, Y+5	; 0x05
 6be:	fe 81       	ldd	r31, Y+6	; 0x06
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	80 83       	st	Z, r24
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 6c6:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
}
 6ca:	28 96       	adiw	r28, 0x08	; 8
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	f8 94       	cli
 6d0:	de bf       	out	0x3e, r29	; 62
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	cd bf       	out	0x3d, r28	; 61
 6d6:	cf 91       	pop	r28
 6d8:	df 91       	pop	r29
 6da:	08 95       	ret

000006dc <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 6dc:	df 93       	push	r29
 6de:	cf 93       	push	r28
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
 6e4:	2d 97       	sbiw	r28, 0x0d	; 13
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	de bf       	out	0x3e, r29	; 62
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	cd bf       	out	0x3d, r28	; 61
 6f0:	89 83       	std	Y+1, r24	; 0x01
 6f2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
 6f4:	89 81       	ldd	r24, Y+1	; 0x01
 6f6:	28 2f       	mov	r18, r24
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	3c 87       	std	Y+12, r19	; 0x0c
 6fc:	2b 87       	std	Y+11, r18	; 0x0b
 6fe:	8b 85       	ldd	r24, Y+11	; 0x0b
 700:	9c 85       	ldd	r25, Y+12	; 0x0c
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	91 05       	cpc	r25, r1
 706:	71 f1       	breq	.+92     	; 0x764 <DIO_u8SetPortDirection+0x88>
 708:	2b 85       	ldd	r18, Y+11	; 0x0b
 70a:	3c 85       	ldd	r19, Y+12	; 0x0c
 70c:	22 30       	cpi	r18, 0x02	; 2
 70e:	31 05       	cpc	r19, r1
 710:	2c f4       	brge	.+10     	; 0x71c <DIO_u8SetPortDirection+0x40>
 712:	8b 85       	ldd	r24, Y+11	; 0x0b
 714:	9c 85       	ldd	r25, Y+12	; 0x0c
 716:	00 97       	sbiw	r24, 0x00	; 0
 718:	69 f0       	breq	.+26     	; 0x734 <DIO_u8SetPortDirection+0x58>
 71a:	6b c0       	rjmp	.+214    	; 0x7f2 <DIO_u8SetPortDirection+0x116>
 71c:	2b 85       	ldd	r18, Y+11	; 0x0b
 71e:	3c 85       	ldd	r19, Y+12	; 0x0c
 720:	22 30       	cpi	r18, 0x02	; 2
 722:	31 05       	cpc	r19, r1
 724:	b9 f1       	breq	.+110    	; 0x794 <DIO_u8SetPortDirection+0xb8>
 726:	8b 85       	ldd	r24, Y+11	; 0x0b
 728:	9c 85       	ldd	r25, Y+12	; 0x0c
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	91 05       	cpc	r25, r1
 72e:	09 f4       	brne	.+2      	; 0x732 <DIO_u8SetPortDirection+0x56>
 730:	49 c0       	rjmp	.+146    	; 0x7c4 <DIO_u8SetPortDirection+0xe8>
 732:	5f c0       	rjmp	.+190    	; 0x7f2 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
 734:	8a 81       	ldd	r24, Y+2	; 0x02
 736:	28 2f       	mov	r18, r24
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	3a 87       	std	Y+10, r19	; 0x0a
 73c:	29 87       	std	Y+9, r18	; 0x09
 73e:	89 85       	ldd	r24, Y+9	; 0x09
 740:	9a 85       	ldd	r25, Y+10	; 0x0a
 742:	00 97       	sbiw	r24, 0x00	; 0
 744:	31 f0       	breq	.+12     	; 0x752 <DIO_u8SetPortDirection+0x76>
 746:	29 85       	ldd	r18, Y+9	; 0x09
 748:	3a 85       	ldd	r19, Y+10	; 0x0a
 74a:	21 30       	cpi	r18, 0x01	; 1
 74c:	31 05       	cpc	r19, r1
 74e:	29 f0       	breq	.+10     	; 0x75a <DIO_u8SetPortDirection+0x7e>
 750:	50 c0       	rjmp	.+160    	; 0x7f2 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
 752:	ea e3       	ldi	r30, 0x3A	; 58
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	10 82       	st	Z, r1
 758:	4c c0       	rjmp	.+152    	; 0x7f2 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
 75a:	ea e3       	ldi	r30, 0x3A	; 58
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	8f ef       	ldi	r24, 0xFF	; 255
 760:	80 83       	st	Z, r24
 762:	47 c0       	rjmp	.+142    	; 0x7f2 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
 764:	8a 81       	ldd	r24, Y+2	; 0x02
 766:	28 2f       	mov	r18, r24
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	38 87       	std	Y+8, r19	; 0x08
 76c:	2f 83       	std	Y+7, r18	; 0x07
 76e:	8f 81       	ldd	r24, Y+7	; 0x07
 770:	98 85       	ldd	r25, Y+8	; 0x08
 772:	00 97       	sbiw	r24, 0x00	; 0
 774:	31 f0       	breq	.+12     	; 0x782 <DIO_u8SetPortDirection+0xa6>
 776:	2f 81       	ldd	r18, Y+7	; 0x07
 778:	38 85       	ldd	r19, Y+8	; 0x08
 77a:	21 30       	cpi	r18, 0x01	; 1
 77c:	31 05       	cpc	r19, r1
 77e:	29 f0       	breq	.+10     	; 0x78a <DIO_u8SetPortDirection+0xae>
 780:	38 c0       	rjmp	.+112    	; 0x7f2 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
 782:	e7 e3       	ldi	r30, 0x37	; 55
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	10 82       	st	Z, r1
 788:	34 c0       	rjmp	.+104    	; 0x7f2 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
 78a:	e7 e3       	ldi	r30, 0x37	; 55
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	8f ef       	ldi	r24, 0xFF	; 255
 790:	80 83       	st	Z, r24
 792:	2f c0       	rjmp	.+94     	; 0x7f2 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
 794:	8a 81       	ldd	r24, Y+2	; 0x02
 796:	28 2f       	mov	r18, r24
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	3e 83       	std	Y+6, r19	; 0x06
 79c:	2d 83       	std	Y+5, r18	; 0x05
 79e:	8d 81       	ldd	r24, Y+5	; 0x05
 7a0:	9e 81       	ldd	r25, Y+6	; 0x06
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	31 f0       	breq	.+12     	; 0x7b2 <DIO_u8SetPortDirection+0xd6>
 7a6:	2d 81       	ldd	r18, Y+5	; 0x05
 7a8:	3e 81       	ldd	r19, Y+6	; 0x06
 7aa:	21 30       	cpi	r18, 0x01	; 1
 7ac:	31 05       	cpc	r19, r1
 7ae:	29 f0       	breq	.+10     	; 0x7ba <DIO_u8SetPortDirection+0xde>
 7b0:	20 c0       	rjmp	.+64     	; 0x7f2 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
 7b2:	e4 e3       	ldi	r30, 0x34	; 52
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	10 82       	st	Z, r1
 7b8:	1c c0       	rjmp	.+56     	; 0x7f2 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
 7ba:	e4 e3       	ldi	r30, 0x34	; 52
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	80 83       	st	Z, r24
 7c2:	17 c0       	rjmp	.+46     	; 0x7f2 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
 7c4:	8a 81       	ldd	r24, Y+2	; 0x02
 7c6:	28 2f       	mov	r18, r24
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	3c 83       	std	Y+4, r19	; 0x04
 7cc:	2b 83       	std	Y+3, r18	; 0x03
 7ce:	8b 81       	ldd	r24, Y+3	; 0x03
 7d0:	9c 81       	ldd	r25, Y+4	; 0x04
 7d2:	00 97       	sbiw	r24, 0x00	; 0
 7d4:	31 f0       	breq	.+12     	; 0x7e2 <DIO_u8SetPortDirection+0x106>
 7d6:	2b 81       	ldd	r18, Y+3	; 0x03
 7d8:	3c 81       	ldd	r19, Y+4	; 0x04
 7da:	21 30       	cpi	r18, 0x01	; 1
 7dc:	31 05       	cpc	r19, r1
 7de:	29 f0       	breq	.+10     	; 0x7ea <DIO_u8SetPortDirection+0x10e>
 7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
 7e2:	e1 e3       	ldi	r30, 0x31	; 49
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	10 82       	st	Z, r1
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
 7ea:	e1 e3       	ldi	r30, 0x31	; 49
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	8f ef       	ldi	r24, 0xFF	; 255
 7f0:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
 7f2:	2d 96       	adiw	r28, 0x0d	; 13
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	f8 94       	cli
 7f8:	de bf       	out	0x3e, r29	; 62
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	cd bf       	out	0x3d, r28	; 61
 7fe:	cf 91       	pop	r28
 800:	df 91       	pop	r29
 802:	08 95       	ret

00000804 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 804:	df 93       	push	r29
 806:	cf 93       	push	r28
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
 80c:	2d 97       	sbiw	r28, 0x0d	; 13
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	f8 94       	cli
 812:	de bf       	out	0x3e, r29	; 62
 814:	0f be       	out	0x3f, r0	; 63
 816:	cd bf       	out	0x3d, r28	; 61
 818:	8a 83       	std	Y+2, r24	; 0x02
 81a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
 820:	8a 81       	ldd	r24, Y+2	; 0x02
 822:	84 30       	cpi	r24, 0x04	; 4
 824:	08 f0       	brcs	.+2      	; 0x828 <DIO_u8SetPortValue+0x24>
 826:	80 c0       	rjmp	.+256    	; 0x928 <__stack+0xc9>
	{
		switch (Copy_u8PortId)
 828:	8a 81       	ldd	r24, Y+2	; 0x02
 82a:	28 2f       	mov	r18, r24
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	3d 87       	std	Y+13, r19	; 0x0d
 830:	2c 87       	std	Y+12, r18	; 0x0c
 832:	8c 85       	ldd	r24, Y+12	; 0x0c
 834:	9d 85       	ldd	r25, Y+13	; 0x0d
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	91 05       	cpc	r25, r1
 83a:	71 f1       	breq	.+92     	; 0x898 <__stack+0x39>
 83c:	2c 85       	ldd	r18, Y+12	; 0x0c
 83e:	3d 85       	ldd	r19, Y+13	; 0x0d
 840:	22 30       	cpi	r18, 0x02	; 2
 842:	31 05       	cpc	r19, r1
 844:	2c f4       	brge	.+10     	; 0x850 <DIO_u8SetPortValue+0x4c>
 846:	8c 85       	ldd	r24, Y+12	; 0x0c
 848:	9d 85       	ldd	r25, Y+13	; 0x0d
 84a:	00 97       	sbiw	r24, 0x00	; 0
 84c:	69 f0       	breq	.+26     	; 0x868 <__stack+0x9>
 84e:	6d c0       	rjmp	.+218    	; 0x92a <__stack+0xcb>
 850:	2c 85       	ldd	r18, Y+12	; 0x0c
 852:	3d 85       	ldd	r19, Y+13	; 0x0d
 854:	22 30       	cpi	r18, 0x02	; 2
 856:	31 05       	cpc	r19, r1
 858:	b9 f1       	breq	.+110    	; 0x8c8 <__stack+0x69>
 85a:	8c 85       	ldd	r24, Y+12	; 0x0c
 85c:	9d 85       	ldd	r25, Y+13	; 0x0d
 85e:	83 30       	cpi	r24, 0x03	; 3
 860:	91 05       	cpc	r25, r1
 862:	09 f4       	brne	.+2      	; 0x866 <__stack+0x7>
 864:	49 c0       	rjmp	.+146    	; 0x8f8 <__stack+0x99>
 866:	61 c0       	rjmp	.+194    	; 0x92a <__stack+0xcb>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
 868:	8b 81       	ldd	r24, Y+3	; 0x03
 86a:	28 2f       	mov	r18, r24
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	3b 87       	std	Y+11, r19	; 0x0b
 870:	2a 87       	std	Y+10, r18	; 0x0a
 872:	8a 85       	ldd	r24, Y+10	; 0x0a
 874:	9b 85       	ldd	r25, Y+11	; 0x0b
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	31 f0       	breq	.+12     	; 0x886 <__stack+0x27>
 87a:	2a 85       	ldd	r18, Y+10	; 0x0a
 87c:	3b 85       	ldd	r19, Y+11	; 0x0b
 87e:	21 30       	cpi	r18, 0x01	; 1
 880:	31 05       	cpc	r19, r1
 882:	29 f0       	breq	.+10     	; 0x88e <__stack+0x2f>
 884:	52 c0       	rjmp	.+164    	; 0x92a <__stack+0xcb>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
 886:	eb e3       	ldi	r30, 0x3B	; 59
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	10 82       	st	Z, r1
 88c:	4e c0       	rjmp	.+156    	; 0x92a <__stack+0xcb>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
 88e:	eb e3       	ldi	r30, 0x3B	; 59
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	80 83       	st	Z, r24
 896:	49 c0       	rjmp	.+146    	; 0x92a <__stack+0xcb>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
 898:	8b 81       	ldd	r24, Y+3	; 0x03
 89a:	28 2f       	mov	r18, r24
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	39 87       	std	Y+9, r19	; 0x09
 8a0:	28 87       	std	Y+8, r18	; 0x08
 8a2:	88 85       	ldd	r24, Y+8	; 0x08
 8a4:	99 85       	ldd	r25, Y+9	; 0x09
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	31 f0       	breq	.+12     	; 0x8b6 <__stack+0x57>
 8aa:	28 85       	ldd	r18, Y+8	; 0x08
 8ac:	39 85       	ldd	r19, Y+9	; 0x09
 8ae:	21 30       	cpi	r18, 0x01	; 1
 8b0:	31 05       	cpc	r19, r1
 8b2:	29 f0       	breq	.+10     	; 0x8be <__stack+0x5f>
 8b4:	3a c0       	rjmp	.+116    	; 0x92a <__stack+0xcb>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
 8b6:	e8 e3       	ldi	r30, 0x38	; 56
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	10 82       	st	Z, r1
 8bc:	36 c0       	rjmp	.+108    	; 0x92a <__stack+0xcb>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
 8be:	e8 e3       	ldi	r30, 0x38	; 56
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	8f ef       	ldi	r24, 0xFF	; 255
 8c4:	80 83       	st	Z, r24
 8c6:	31 c0       	rjmp	.+98     	; 0x92a <__stack+0xcb>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
 8c8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ca:	28 2f       	mov	r18, r24
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	3f 83       	std	Y+7, r19	; 0x07
 8d0:	2e 83       	std	Y+6, r18	; 0x06
 8d2:	8e 81       	ldd	r24, Y+6	; 0x06
 8d4:	9f 81       	ldd	r25, Y+7	; 0x07
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	31 f0       	breq	.+12     	; 0x8e6 <__stack+0x87>
 8da:	2e 81       	ldd	r18, Y+6	; 0x06
 8dc:	3f 81       	ldd	r19, Y+7	; 0x07
 8de:	21 30       	cpi	r18, 0x01	; 1
 8e0:	31 05       	cpc	r19, r1
 8e2:	29 f0       	breq	.+10     	; 0x8ee <__stack+0x8f>
 8e4:	22 c0       	rjmp	.+68     	; 0x92a <__stack+0xcb>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
 8e6:	e5 e3       	ldi	r30, 0x35	; 53
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	10 82       	st	Z, r1
 8ec:	1e c0       	rjmp	.+60     	; 0x92a <__stack+0xcb>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
 8ee:	e5 e3       	ldi	r30, 0x35	; 53
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	80 83       	st	Z, r24
 8f6:	19 c0       	rjmp	.+50     	; 0x92a <__stack+0xcb>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
 8f8:	8b 81       	ldd	r24, Y+3	; 0x03
 8fa:	28 2f       	mov	r18, r24
 8fc:	30 e0       	ldi	r19, 0x00	; 0
 8fe:	3d 83       	std	Y+5, r19	; 0x05
 900:	2c 83       	std	Y+4, r18	; 0x04
 902:	8c 81       	ldd	r24, Y+4	; 0x04
 904:	9d 81       	ldd	r25, Y+5	; 0x05
 906:	00 97       	sbiw	r24, 0x00	; 0
 908:	31 f0       	breq	.+12     	; 0x916 <__stack+0xb7>
 90a:	2c 81       	ldd	r18, Y+4	; 0x04
 90c:	3d 81       	ldd	r19, Y+5	; 0x05
 90e:	21 30       	cpi	r18, 0x01	; 1
 910:	31 05       	cpc	r19, r1
 912:	29 f0       	breq	.+10     	; 0x91e <__stack+0xbf>
 914:	0a c0       	rjmp	.+20     	; 0x92a <__stack+0xcb>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
 916:	e2 e3       	ldi	r30, 0x32	; 50
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	10 82       	st	Z, r1
 91c:	06 c0       	rjmp	.+12     	; 0x92a <__stack+0xcb>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
 91e:	e2 e3       	ldi	r30, 0x32	; 50
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	80 83       	st	Z, r24
 926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0xcb>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 928:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
 92a:	89 81       	ldd	r24, Y+1	; 0x01
}
 92c:	2d 96       	adiw	r28, 0x0d	; 13
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	f8 94       	cli
 932:	de bf       	out	0x3e, r29	; 62
 934:	0f be       	out	0x3f, r0	; 63
 936:	cd bf       	out	0x3d, r28	; 61
 938:	cf 91       	pop	r28
 93a:	df 91       	pop	r29
 93c:	08 95       	ret

0000093e <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
 93e:	df 93       	push	r29
 940:	cf 93       	push	r28
 942:	00 d0       	rcall	.+0      	; 0x944 <DIO_u8GetPortValue+0x6>
 944:	00 d0       	rcall	.+0      	; 0x946 <DIO_u8GetPortValue+0x8>
 946:	00 d0       	rcall	.+0      	; 0x948 <DIO_u8GetPortValue+0xa>
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	8a 83       	std	Y+2, r24	; 0x02
 94e:	7c 83       	std	Y+4, r23	; 0x04
 950:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
 956:	8a 81       	ldd	r24, Y+2	; 0x02
 958:	84 30       	cpi	r24, 0x04	; 4
 95a:	08 f0       	brcs	.+2      	; 0x95e <DIO_u8GetPortValue+0x20>
 95c:	3f c0       	rjmp	.+126    	; 0x9dc <DIO_u8GetPortValue+0x9e>
 95e:	8b 81       	ldd	r24, Y+3	; 0x03
 960:	9c 81       	ldd	r25, Y+4	; 0x04
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	d9 f1       	breq	.+118    	; 0x9dc <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
 966:	8a 81       	ldd	r24, Y+2	; 0x02
 968:	28 2f       	mov	r18, r24
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	3e 83       	std	Y+6, r19	; 0x06
 96e:	2d 83       	std	Y+5, r18	; 0x05
 970:	8d 81       	ldd	r24, Y+5	; 0x05
 972:	9e 81       	ldd	r25, Y+6	; 0x06
 974:	81 30       	cpi	r24, 0x01	; 1
 976:	91 05       	cpc	r25, r1
 978:	e1 f0       	breq	.+56     	; 0x9b2 <DIO_u8GetPortValue+0x74>
 97a:	2d 81       	ldd	r18, Y+5	; 0x05
 97c:	3e 81       	ldd	r19, Y+6	; 0x06
 97e:	22 30       	cpi	r18, 0x02	; 2
 980:	31 05       	cpc	r19, r1
 982:	2c f4       	brge	.+10     	; 0x98e <DIO_u8GetPortValue+0x50>
 984:	8d 81       	ldd	r24, Y+5	; 0x05
 986:	9e 81       	ldd	r25, Y+6	; 0x06
 988:	00 97       	sbiw	r24, 0x00	; 0
 98a:	61 f0       	breq	.+24     	; 0x9a4 <DIO_u8GetPortValue+0x66>
 98c:	28 c0       	rjmp	.+80     	; 0x9de <DIO_u8GetPortValue+0xa0>
 98e:	2d 81       	ldd	r18, Y+5	; 0x05
 990:	3e 81       	ldd	r19, Y+6	; 0x06
 992:	22 30       	cpi	r18, 0x02	; 2
 994:	31 05       	cpc	r19, r1
 996:	a1 f0       	breq	.+40     	; 0x9c0 <DIO_u8GetPortValue+0x82>
 998:	8d 81       	ldd	r24, Y+5	; 0x05
 99a:	9e 81       	ldd	r25, Y+6	; 0x06
 99c:	83 30       	cpi	r24, 0x03	; 3
 99e:	91 05       	cpc	r25, r1
 9a0:	b1 f0       	breq	.+44     	; 0x9ce <DIO_u8GetPortValue+0x90>
 9a2:	1d c0       	rjmp	.+58     	; 0x9de <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
 9a4:	e9 e3       	ldi	r30, 0x39	; 57
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	eb 81       	ldd	r30, Y+3	; 0x03
 9ac:	fc 81       	ldd	r31, Y+4	; 0x04
 9ae:	80 83       	st	Z, r24
 9b0:	16 c0       	rjmp	.+44     	; 0x9de <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
 9b2:	e6 e3       	ldi	r30, 0x36	; 54
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	80 81       	ld	r24, Z
 9b8:	eb 81       	ldd	r30, Y+3	; 0x03
 9ba:	fc 81       	ldd	r31, Y+4	; 0x04
 9bc:	80 83       	st	Z, r24
 9be:	0f c0       	rjmp	.+30     	; 0x9de <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
 9c0:	e3 e3       	ldi	r30, 0x33	; 51
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	eb 81       	ldd	r30, Y+3	; 0x03
 9c8:	fc 81       	ldd	r31, Y+4	; 0x04
 9ca:	80 83       	st	Z, r24
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
 9ce:	e0 e3       	ldi	r30, 0x30	; 48
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	eb 81       	ldd	r30, Y+3	; 0x03
 9d6:	fc 81       	ldd	r31, Y+4	; 0x04
 9d8:	80 83       	st	Z, r24
 9da:	01 c0       	rjmp	.+2      	; 0x9de <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 9dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 9de:	89 81       	ldd	r24, Y+1	; 0x01
}
 9e0:	26 96       	adiw	r28, 0x06	; 6
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	f8 94       	cli
 9e6:	de bf       	out	0x3e, r29	; 62
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	cd bf       	out	0x3d, r28	; 61
 9ec:	cf 91       	pop	r28
 9ee:	df 91       	pop	r29
 9f0:	08 95       	ret

000009f2 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
 9f2:	8f 92       	push	r8
 9f4:	af 92       	push	r10
 9f6:	cf 92       	push	r12
 9f8:	ef 92       	push	r14
 9fa:	0f 93       	push	r16
 9fc:	df 93       	push	r29
 9fe:	cf 93       	push	r28
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
 a04:	2c 97       	sbiw	r28, 0x0c	; 12
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	f8 94       	cli
 a0a:	de bf       	out	0x3e, r29	; 62
 a0c:	0f be       	out	0x3f, r0	; 63
 a0e:	cd bf       	out	0x3d, r28	; 61
 a10:	89 83       	std	Y+1, r24	; 0x01
 a12:	6a 83       	std	Y+2, r22	; 0x02
 a14:	4b 83       	std	Y+3, r20	; 0x03
 a16:	2c 83       	std	Y+4, r18	; 0x04
 a18:	0d 83       	std	Y+5, r16	; 0x05
 a1a:	ee 82       	std	Y+6, r14	; 0x06
 a1c:	cf 82       	std	Y+7, r12	; 0x07
 a1e:	a8 86       	std	Y+8, r10	; 0x08
 a20:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	28 2f       	mov	r18, r24
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	3b 87       	std	Y+11, r19	; 0x0b
 a2a:	2a 87       	std	Y+10, r18	; 0x0a
 a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
 a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
 a30:	81 30       	cpi	r24, 0x01	; 1
 a32:	91 05       	cpc	r25, r1
 a34:	09 f4       	brne	.+2      	; 0xa38 <DIO_u8SetValueToAllPins+0x46>
 a36:	a8 c0       	rjmp	.+336    	; 0xb88 <DIO_u8SetValueToAllPins+0x196>
 a38:	2a 85       	ldd	r18, Y+10	; 0x0a
 a3a:	3b 85       	ldd	r19, Y+11	; 0x0b
 a3c:	22 30       	cpi	r18, 0x02	; 2
 a3e:	31 05       	cpc	r19, r1
 a40:	2c f4       	brge	.+10     	; 0xa4c <DIO_u8SetValueToAllPins+0x5a>
 a42:	8a 85       	ldd	r24, Y+10	; 0x0a
 a44:	9b 85       	ldd	r25, Y+11	; 0x0b
 a46:	00 97       	sbiw	r24, 0x00	; 0
 a48:	71 f0       	breq	.+28     	; 0xa66 <DIO_u8SetValueToAllPins+0x74>
 a4a:	50 c2       	rjmp	.+1184   	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
 a4c:	2a 85       	ldd	r18, Y+10	; 0x0a
 a4e:	3b 85       	ldd	r19, Y+11	; 0x0b
 a50:	22 30       	cpi	r18, 0x02	; 2
 a52:	31 05       	cpc	r19, r1
 a54:	09 f4       	brne	.+2      	; 0xa58 <DIO_u8SetValueToAllPins+0x66>
 a56:	29 c1       	rjmp	.+594    	; 0xcaa <DIO_u8SetValueToAllPins+0x2b8>
 a58:	8a 85       	ldd	r24, Y+10	; 0x0a
 a5a:	9b 85       	ldd	r25, Y+11	; 0x0b
 a5c:	83 30       	cpi	r24, 0x03	; 3
 a5e:	91 05       	cpc	r25, r1
 a60:	09 f4       	brne	.+2      	; 0xa64 <DIO_u8SetValueToAllPins+0x72>
 a62:	b4 c1       	rjmp	.+872    	; 0xdcc <DIO_u8SetValueToAllPins+0x3da>
 a64:	43 c2       	rjmp	.+1158   	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
 a66:	8a 81       	ldd	r24, Y+2	; 0x02
 a68:	81 30       	cpi	r24, 0x01	; 1
 a6a:	41 f4       	brne	.+16     	; 0xa7c <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
 a6c:	ab e3       	ldi	r26, 0x3B	; 59
 a6e:	b0 e0       	ldi	r27, 0x00	; 0
 a70:	eb e3       	ldi	r30, 0x3B	; 59
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 81       	ld	r24, Z
 a76:	81 60       	ori	r24, 0x01	; 1
 a78:	8c 93       	st	X, r24
 a7a:	07 c0       	rjmp	.+14     	; 0xa8a <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
 a7c:	ab e3       	ldi	r26, 0x3B	; 59
 a7e:	b0 e0       	ldi	r27, 0x00	; 0
 a80:	eb e3       	ldi	r30, 0x3B	; 59
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	80 81       	ld	r24, Z
 a86:	8e 7f       	andi	r24, 0xFE	; 254
 a88:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
 a8a:	8b 81       	ldd	r24, Y+3	; 0x03
 a8c:	81 30       	cpi	r24, 0x01	; 1
 a8e:	41 f4       	brne	.+16     	; 0xaa0 <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
 a90:	ab e3       	ldi	r26, 0x3B	; 59
 a92:	b0 e0       	ldi	r27, 0x00	; 0
 a94:	eb e3       	ldi	r30, 0x3B	; 59
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	80 81       	ld	r24, Z
 a9a:	82 60       	ori	r24, 0x02	; 2
 a9c:	8c 93       	st	X, r24
 a9e:	07 c0       	rjmp	.+14     	; 0xaae <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
 aa0:	ab e3       	ldi	r26, 0x3B	; 59
 aa2:	b0 e0       	ldi	r27, 0x00	; 0
 aa4:	eb e3       	ldi	r30, 0x3B	; 59
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	80 81       	ld	r24, Z
 aaa:	8d 7f       	andi	r24, 0xFD	; 253
 aac:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
 aae:	8c 81       	ldd	r24, Y+4	; 0x04
 ab0:	81 30       	cpi	r24, 0x01	; 1
 ab2:	41 f4       	brne	.+16     	; 0xac4 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
 ab4:	ab e3       	ldi	r26, 0x3B	; 59
 ab6:	b0 e0       	ldi	r27, 0x00	; 0
 ab8:	eb e3       	ldi	r30, 0x3B	; 59
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	80 81       	ld	r24, Z
 abe:	84 60       	ori	r24, 0x04	; 4
 ac0:	8c 93       	st	X, r24
 ac2:	07 c0       	rjmp	.+14     	; 0xad2 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
 ac4:	ab e3       	ldi	r26, 0x3B	; 59
 ac6:	b0 e0       	ldi	r27, 0x00	; 0
 ac8:	eb e3       	ldi	r30, 0x3B	; 59
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	80 81       	ld	r24, Z
 ace:	8b 7f       	andi	r24, 0xFB	; 251
 ad0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
 ad2:	8d 81       	ldd	r24, Y+5	; 0x05
 ad4:	81 30       	cpi	r24, 0x01	; 1
 ad6:	41 f4       	brne	.+16     	; 0xae8 <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
 ad8:	ab e3       	ldi	r26, 0x3B	; 59
 ada:	b0 e0       	ldi	r27, 0x00	; 0
 adc:	eb e3       	ldi	r30, 0x3B	; 59
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	80 81       	ld	r24, Z
 ae2:	88 60       	ori	r24, 0x08	; 8
 ae4:	8c 93       	st	X, r24
 ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
 ae8:	ab e3       	ldi	r26, 0x3B	; 59
 aea:	b0 e0       	ldi	r27, 0x00	; 0
 aec:	eb e3       	ldi	r30, 0x3B	; 59
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	80 81       	ld	r24, Z
 af2:	87 7f       	andi	r24, 0xF7	; 247
 af4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
 af6:	8e 81       	ldd	r24, Y+6	; 0x06
 af8:	81 30       	cpi	r24, 0x01	; 1
 afa:	41 f4       	brne	.+16     	; 0xb0c <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
 afc:	ab e3       	ldi	r26, 0x3B	; 59
 afe:	b0 e0       	ldi	r27, 0x00	; 0
 b00:	eb e3       	ldi	r30, 0x3B	; 59
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	80 81       	ld	r24, Z
 b06:	80 61       	ori	r24, 0x10	; 16
 b08:	8c 93       	st	X, r24
 b0a:	07 c0       	rjmp	.+14     	; 0xb1a <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
 b0c:	ab e3       	ldi	r26, 0x3B	; 59
 b0e:	b0 e0       	ldi	r27, 0x00	; 0
 b10:	eb e3       	ldi	r30, 0x3B	; 59
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	80 81       	ld	r24, Z
 b16:	8f 7e       	andi	r24, 0xEF	; 239
 b18:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
 b1a:	8f 81       	ldd	r24, Y+7	; 0x07
 b1c:	81 30       	cpi	r24, 0x01	; 1
 b1e:	41 f4       	brne	.+16     	; 0xb30 <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
 b20:	ab e3       	ldi	r26, 0x3B	; 59
 b22:	b0 e0       	ldi	r27, 0x00	; 0
 b24:	eb e3       	ldi	r30, 0x3B	; 59
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	80 62       	ori	r24, 0x20	; 32
 b2c:	8c 93       	st	X, r24
 b2e:	07 c0       	rjmp	.+14     	; 0xb3e <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
 b30:	ab e3       	ldi	r26, 0x3B	; 59
 b32:	b0 e0       	ldi	r27, 0x00	; 0
 b34:	eb e3       	ldi	r30, 0x3B	; 59
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	8f 7d       	andi	r24, 0xDF	; 223
 b3c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
 b3e:	88 85       	ldd	r24, Y+8	; 0x08
 b40:	81 30       	cpi	r24, 0x01	; 1
 b42:	41 f4       	brne	.+16     	; 0xb54 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
 b44:	ab e3       	ldi	r26, 0x3B	; 59
 b46:	b0 e0       	ldi	r27, 0x00	; 0
 b48:	eb e3       	ldi	r30, 0x3B	; 59
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	80 81       	ld	r24, Z
 b4e:	80 64       	ori	r24, 0x40	; 64
 b50:	8c 93       	st	X, r24
 b52:	07 c0       	rjmp	.+14     	; 0xb62 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
 b54:	ab e3       	ldi	r26, 0x3B	; 59
 b56:	b0 e0       	ldi	r27, 0x00	; 0
 b58:	eb e3       	ldi	r30, 0x3B	; 59
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	80 81       	ld	r24, Z
 b5e:	8f 7b       	andi	r24, 0xBF	; 191
 b60:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
 b62:	89 85       	ldd	r24, Y+9	; 0x09
 b64:	81 30       	cpi	r24, 0x01	; 1
 b66:	41 f4       	brne	.+16     	; 0xb78 <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
 b68:	ab e3       	ldi	r26, 0x3B	; 59
 b6a:	b0 e0       	ldi	r27, 0x00	; 0
 b6c:	eb e3       	ldi	r30, 0x3B	; 59
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	80 81       	ld	r24, Z
 b72:	80 68       	ori	r24, 0x80	; 128
 b74:	8c 93       	st	X, r24
 b76:	ba c1       	rjmp	.+884    	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
 b78:	ab e3       	ldi	r26, 0x3B	; 59
 b7a:	b0 e0       	ldi	r27, 0x00	; 0
 b7c:	eb e3       	ldi	r30, 0x3B	; 59
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	80 81       	ld	r24, Z
 b82:	8f 77       	andi	r24, 0x7F	; 127
 b84:	8c 93       	st	X, r24
 b86:	b2 c1       	rjmp	.+868    	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
 b88:	8a 81       	ldd	r24, Y+2	; 0x02
 b8a:	81 30       	cpi	r24, 0x01	; 1
 b8c:	41 f4       	brne	.+16     	; 0xb9e <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
 b8e:	a8 e3       	ldi	r26, 0x38	; 56
 b90:	b0 e0       	ldi	r27, 0x00	; 0
 b92:	e8 e3       	ldi	r30, 0x38	; 56
 b94:	f0 e0       	ldi	r31, 0x00	; 0
 b96:	80 81       	ld	r24, Z
 b98:	81 60       	ori	r24, 0x01	; 1
 b9a:	8c 93       	st	X, r24
 b9c:	07 c0       	rjmp	.+14     	; 0xbac <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
 b9e:	a8 e3       	ldi	r26, 0x38	; 56
 ba0:	b0 e0       	ldi	r27, 0x00	; 0
 ba2:	e8 e3       	ldi	r30, 0x38	; 56
 ba4:	f0 e0       	ldi	r31, 0x00	; 0
 ba6:	80 81       	ld	r24, Z
 ba8:	8e 7f       	andi	r24, 0xFE	; 254
 baa:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
 bac:	8b 81       	ldd	r24, Y+3	; 0x03
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	41 f4       	brne	.+16     	; 0xbc2 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
 bb2:	a8 e3       	ldi	r26, 0x38	; 56
 bb4:	b0 e0       	ldi	r27, 0x00	; 0
 bb6:	e8 e3       	ldi	r30, 0x38	; 56
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	80 81       	ld	r24, Z
 bbc:	82 60       	ori	r24, 0x02	; 2
 bbe:	8c 93       	st	X, r24
 bc0:	07 c0       	rjmp	.+14     	; 0xbd0 <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
 bc2:	a8 e3       	ldi	r26, 0x38	; 56
 bc4:	b0 e0       	ldi	r27, 0x00	; 0
 bc6:	e8 e3       	ldi	r30, 0x38	; 56
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	80 81       	ld	r24, Z
 bcc:	8d 7f       	andi	r24, 0xFD	; 253
 bce:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
 bd0:	8c 81       	ldd	r24, Y+4	; 0x04
 bd2:	81 30       	cpi	r24, 0x01	; 1
 bd4:	41 f4       	brne	.+16     	; 0xbe6 <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
 bd6:	a8 e3       	ldi	r26, 0x38	; 56
 bd8:	b0 e0       	ldi	r27, 0x00	; 0
 bda:	e8 e3       	ldi	r30, 0x38	; 56
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	84 60       	ori	r24, 0x04	; 4
 be2:	8c 93       	st	X, r24
 be4:	07 c0       	rjmp	.+14     	; 0xbf4 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
 be6:	a8 e3       	ldi	r26, 0x38	; 56
 be8:	b0 e0       	ldi	r27, 0x00	; 0
 bea:	e8 e3       	ldi	r30, 0x38	; 56
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	80 81       	ld	r24, Z
 bf0:	8b 7f       	andi	r24, 0xFB	; 251
 bf2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
 bf4:	8d 81       	ldd	r24, Y+5	; 0x05
 bf6:	81 30       	cpi	r24, 0x01	; 1
 bf8:	41 f4       	brne	.+16     	; 0xc0a <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
 bfa:	a8 e3       	ldi	r26, 0x38	; 56
 bfc:	b0 e0       	ldi	r27, 0x00	; 0
 bfe:	e8 e3       	ldi	r30, 0x38	; 56
 c00:	f0 e0       	ldi	r31, 0x00	; 0
 c02:	80 81       	ld	r24, Z
 c04:	88 60       	ori	r24, 0x08	; 8
 c06:	8c 93       	st	X, r24
 c08:	07 c0       	rjmp	.+14     	; 0xc18 <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
 c0a:	a8 e3       	ldi	r26, 0x38	; 56
 c0c:	b0 e0       	ldi	r27, 0x00	; 0
 c0e:	e8 e3       	ldi	r30, 0x38	; 56
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	80 81       	ld	r24, Z
 c14:	87 7f       	andi	r24, 0xF7	; 247
 c16:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
 c18:	8e 81       	ldd	r24, Y+6	; 0x06
 c1a:	81 30       	cpi	r24, 0x01	; 1
 c1c:	41 f4       	brne	.+16     	; 0xc2e <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
 c1e:	a8 e3       	ldi	r26, 0x38	; 56
 c20:	b0 e0       	ldi	r27, 0x00	; 0
 c22:	e8 e3       	ldi	r30, 0x38	; 56
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	80 81       	ld	r24, Z
 c28:	80 61       	ori	r24, 0x10	; 16
 c2a:	8c 93       	st	X, r24
 c2c:	07 c0       	rjmp	.+14     	; 0xc3c <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
 c2e:	a8 e3       	ldi	r26, 0x38	; 56
 c30:	b0 e0       	ldi	r27, 0x00	; 0
 c32:	e8 e3       	ldi	r30, 0x38	; 56
 c34:	f0 e0       	ldi	r31, 0x00	; 0
 c36:	80 81       	ld	r24, Z
 c38:	8f 7e       	andi	r24, 0xEF	; 239
 c3a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
 c3c:	8f 81       	ldd	r24, Y+7	; 0x07
 c3e:	81 30       	cpi	r24, 0x01	; 1
 c40:	41 f4       	brne	.+16     	; 0xc52 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
 c42:	a8 e3       	ldi	r26, 0x38	; 56
 c44:	b0 e0       	ldi	r27, 0x00	; 0
 c46:	e8 e3       	ldi	r30, 0x38	; 56
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	80 81       	ld	r24, Z
 c4c:	80 62       	ori	r24, 0x20	; 32
 c4e:	8c 93       	st	X, r24
 c50:	07 c0       	rjmp	.+14     	; 0xc60 <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
 c52:	a8 e3       	ldi	r26, 0x38	; 56
 c54:	b0 e0       	ldi	r27, 0x00	; 0
 c56:	e8 e3       	ldi	r30, 0x38	; 56
 c58:	f0 e0       	ldi	r31, 0x00	; 0
 c5a:	80 81       	ld	r24, Z
 c5c:	8f 7d       	andi	r24, 0xDF	; 223
 c5e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
 c60:	88 85       	ldd	r24, Y+8	; 0x08
 c62:	81 30       	cpi	r24, 0x01	; 1
 c64:	41 f4       	brne	.+16     	; 0xc76 <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
 c66:	a8 e3       	ldi	r26, 0x38	; 56
 c68:	b0 e0       	ldi	r27, 0x00	; 0
 c6a:	e8 e3       	ldi	r30, 0x38	; 56
 c6c:	f0 e0       	ldi	r31, 0x00	; 0
 c6e:	80 81       	ld	r24, Z
 c70:	80 64       	ori	r24, 0x40	; 64
 c72:	8c 93       	st	X, r24
 c74:	07 c0       	rjmp	.+14     	; 0xc84 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
 c76:	a8 e3       	ldi	r26, 0x38	; 56
 c78:	b0 e0       	ldi	r27, 0x00	; 0
 c7a:	e8 e3       	ldi	r30, 0x38	; 56
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	80 81       	ld	r24, Z
 c80:	8f 7b       	andi	r24, 0xBF	; 191
 c82:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
 c84:	89 85       	ldd	r24, Y+9	; 0x09
 c86:	81 30       	cpi	r24, 0x01	; 1
 c88:	41 f4       	brne	.+16     	; 0xc9a <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
 c8a:	a8 e3       	ldi	r26, 0x38	; 56
 c8c:	b0 e0       	ldi	r27, 0x00	; 0
 c8e:	e8 e3       	ldi	r30, 0x38	; 56
 c90:	f0 e0       	ldi	r31, 0x00	; 0
 c92:	80 81       	ld	r24, Z
 c94:	80 68       	ori	r24, 0x80	; 128
 c96:	8c 93       	st	X, r24
 c98:	29 c1       	rjmp	.+594    	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
 c9a:	a8 e3       	ldi	r26, 0x38	; 56
 c9c:	b0 e0       	ldi	r27, 0x00	; 0
 c9e:	e8 e3       	ldi	r30, 0x38	; 56
 ca0:	f0 e0       	ldi	r31, 0x00	; 0
 ca2:	80 81       	ld	r24, Z
 ca4:	8f 77       	andi	r24, 0x7F	; 127
 ca6:	8c 93       	st	X, r24
 ca8:	21 c1       	rjmp	.+578    	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
 caa:	8a 81       	ldd	r24, Y+2	; 0x02
 cac:	81 30       	cpi	r24, 0x01	; 1
 cae:	41 f4       	brne	.+16     	; 0xcc0 <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
 cb0:	a5 e3       	ldi	r26, 0x35	; 53
 cb2:	b0 e0       	ldi	r27, 0x00	; 0
 cb4:	e5 e3       	ldi	r30, 0x35	; 53
 cb6:	f0 e0       	ldi	r31, 0x00	; 0
 cb8:	80 81       	ld	r24, Z
 cba:	81 60       	ori	r24, 0x01	; 1
 cbc:	8c 93       	st	X, r24
 cbe:	07 c0       	rjmp	.+14     	; 0xcce <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
 cc0:	a5 e3       	ldi	r26, 0x35	; 53
 cc2:	b0 e0       	ldi	r27, 0x00	; 0
 cc4:	e5 e3       	ldi	r30, 0x35	; 53
 cc6:	f0 e0       	ldi	r31, 0x00	; 0
 cc8:	80 81       	ld	r24, Z
 cca:	8e 7f       	andi	r24, 0xFE	; 254
 ccc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
 cce:	8b 81       	ldd	r24, Y+3	; 0x03
 cd0:	81 30       	cpi	r24, 0x01	; 1
 cd2:	41 f4       	brne	.+16     	; 0xce4 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
 cd4:	a5 e3       	ldi	r26, 0x35	; 53
 cd6:	b0 e0       	ldi	r27, 0x00	; 0
 cd8:	e5 e3       	ldi	r30, 0x35	; 53
 cda:	f0 e0       	ldi	r31, 0x00	; 0
 cdc:	80 81       	ld	r24, Z
 cde:	82 60       	ori	r24, 0x02	; 2
 ce0:	8c 93       	st	X, r24
 ce2:	07 c0       	rjmp	.+14     	; 0xcf2 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
 ce4:	a5 e3       	ldi	r26, 0x35	; 53
 ce6:	b0 e0       	ldi	r27, 0x00	; 0
 ce8:	e5 e3       	ldi	r30, 0x35	; 53
 cea:	f0 e0       	ldi	r31, 0x00	; 0
 cec:	80 81       	ld	r24, Z
 cee:	8d 7f       	andi	r24, 0xFD	; 253
 cf0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
 cf2:	8c 81       	ldd	r24, Y+4	; 0x04
 cf4:	81 30       	cpi	r24, 0x01	; 1
 cf6:	41 f4       	brne	.+16     	; 0xd08 <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
 cf8:	a5 e3       	ldi	r26, 0x35	; 53
 cfa:	b0 e0       	ldi	r27, 0x00	; 0
 cfc:	e5 e3       	ldi	r30, 0x35	; 53
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	80 81       	ld	r24, Z
 d02:	84 60       	ori	r24, 0x04	; 4
 d04:	8c 93       	st	X, r24
 d06:	07 c0       	rjmp	.+14     	; 0xd16 <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
 d08:	a5 e3       	ldi	r26, 0x35	; 53
 d0a:	b0 e0       	ldi	r27, 0x00	; 0
 d0c:	e5 e3       	ldi	r30, 0x35	; 53
 d0e:	f0 e0       	ldi	r31, 0x00	; 0
 d10:	80 81       	ld	r24, Z
 d12:	8b 7f       	andi	r24, 0xFB	; 251
 d14:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
 d16:	8d 81       	ldd	r24, Y+5	; 0x05
 d18:	81 30       	cpi	r24, 0x01	; 1
 d1a:	41 f4       	brne	.+16     	; 0xd2c <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
 d1c:	a5 e3       	ldi	r26, 0x35	; 53
 d1e:	b0 e0       	ldi	r27, 0x00	; 0
 d20:	e5 e3       	ldi	r30, 0x35	; 53
 d22:	f0 e0       	ldi	r31, 0x00	; 0
 d24:	80 81       	ld	r24, Z
 d26:	88 60       	ori	r24, 0x08	; 8
 d28:	8c 93       	st	X, r24
 d2a:	07 c0       	rjmp	.+14     	; 0xd3a <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
 d2c:	a5 e3       	ldi	r26, 0x35	; 53
 d2e:	b0 e0       	ldi	r27, 0x00	; 0
 d30:	e5 e3       	ldi	r30, 0x35	; 53
 d32:	f0 e0       	ldi	r31, 0x00	; 0
 d34:	80 81       	ld	r24, Z
 d36:	87 7f       	andi	r24, 0xF7	; 247
 d38:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
 d3a:	8e 81       	ldd	r24, Y+6	; 0x06
 d3c:	81 30       	cpi	r24, 0x01	; 1
 d3e:	41 f4       	brne	.+16     	; 0xd50 <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
 d40:	a5 e3       	ldi	r26, 0x35	; 53
 d42:	b0 e0       	ldi	r27, 0x00	; 0
 d44:	e5 e3       	ldi	r30, 0x35	; 53
 d46:	f0 e0       	ldi	r31, 0x00	; 0
 d48:	80 81       	ld	r24, Z
 d4a:	80 61       	ori	r24, 0x10	; 16
 d4c:	8c 93       	st	X, r24
 d4e:	07 c0       	rjmp	.+14     	; 0xd5e <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
 d50:	a5 e3       	ldi	r26, 0x35	; 53
 d52:	b0 e0       	ldi	r27, 0x00	; 0
 d54:	e5 e3       	ldi	r30, 0x35	; 53
 d56:	f0 e0       	ldi	r31, 0x00	; 0
 d58:	80 81       	ld	r24, Z
 d5a:	8f 7e       	andi	r24, 0xEF	; 239
 d5c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
 d5e:	8f 81       	ldd	r24, Y+7	; 0x07
 d60:	81 30       	cpi	r24, 0x01	; 1
 d62:	41 f4       	brne	.+16     	; 0xd74 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
 d64:	a5 e3       	ldi	r26, 0x35	; 53
 d66:	b0 e0       	ldi	r27, 0x00	; 0
 d68:	e5 e3       	ldi	r30, 0x35	; 53
 d6a:	f0 e0       	ldi	r31, 0x00	; 0
 d6c:	80 81       	ld	r24, Z
 d6e:	80 62       	ori	r24, 0x20	; 32
 d70:	8c 93       	st	X, r24
 d72:	07 c0       	rjmp	.+14     	; 0xd82 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
 d74:	a5 e3       	ldi	r26, 0x35	; 53
 d76:	b0 e0       	ldi	r27, 0x00	; 0
 d78:	e5 e3       	ldi	r30, 0x35	; 53
 d7a:	f0 e0       	ldi	r31, 0x00	; 0
 d7c:	80 81       	ld	r24, Z
 d7e:	8f 7d       	andi	r24, 0xDF	; 223
 d80:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
 d82:	88 85       	ldd	r24, Y+8	; 0x08
 d84:	81 30       	cpi	r24, 0x01	; 1
 d86:	41 f4       	brne	.+16     	; 0xd98 <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
 d88:	a5 e3       	ldi	r26, 0x35	; 53
 d8a:	b0 e0       	ldi	r27, 0x00	; 0
 d8c:	e5 e3       	ldi	r30, 0x35	; 53
 d8e:	f0 e0       	ldi	r31, 0x00	; 0
 d90:	80 81       	ld	r24, Z
 d92:	80 64       	ori	r24, 0x40	; 64
 d94:	8c 93       	st	X, r24
 d96:	07 c0       	rjmp	.+14     	; 0xda6 <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
 d98:	a5 e3       	ldi	r26, 0x35	; 53
 d9a:	b0 e0       	ldi	r27, 0x00	; 0
 d9c:	e5 e3       	ldi	r30, 0x35	; 53
 d9e:	f0 e0       	ldi	r31, 0x00	; 0
 da0:	80 81       	ld	r24, Z
 da2:	8f 7b       	andi	r24, 0xBF	; 191
 da4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
 da6:	89 85       	ldd	r24, Y+9	; 0x09
 da8:	81 30       	cpi	r24, 0x01	; 1
 daa:	41 f4       	brne	.+16     	; 0xdbc <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
 dac:	a5 e3       	ldi	r26, 0x35	; 53
 dae:	b0 e0       	ldi	r27, 0x00	; 0
 db0:	e5 e3       	ldi	r30, 0x35	; 53
 db2:	f0 e0       	ldi	r31, 0x00	; 0
 db4:	80 81       	ld	r24, Z
 db6:	80 68       	ori	r24, 0x80	; 128
 db8:	8c 93       	st	X, r24
 dba:	98 c0       	rjmp	.+304    	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
 dbc:	a5 e3       	ldi	r26, 0x35	; 53
 dbe:	b0 e0       	ldi	r27, 0x00	; 0
 dc0:	e5 e3       	ldi	r30, 0x35	; 53
 dc2:	f0 e0       	ldi	r31, 0x00	; 0
 dc4:	80 81       	ld	r24, Z
 dc6:	8f 77       	andi	r24, 0x7F	; 127
 dc8:	8c 93       	st	X, r24
 dca:	90 c0       	rjmp	.+288    	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
 dcc:	8a 81       	ldd	r24, Y+2	; 0x02
 dce:	81 30       	cpi	r24, 0x01	; 1
 dd0:	41 f4       	brne	.+16     	; 0xde2 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
 dd2:	a2 e3       	ldi	r26, 0x32	; 50
 dd4:	b0 e0       	ldi	r27, 0x00	; 0
 dd6:	e2 e3       	ldi	r30, 0x32	; 50
 dd8:	f0 e0       	ldi	r31, 0x00	; 0
 dda:	80 81       	ld	r24, Z
 ddc:	81 60       	ori	r24, 0x01	; 1
 dde:	8c 93       	st	X, r24
 de0:	07 c0       	rjmp	.+14     	; 0xdf0 <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
 de2:	a2 e3       	ldi	r26, 0x32	; 50
 de4:	b0 e0       	ldi	r27, 0x00	; 0
 de6:	e2 e3       	ldi	r30, 0x32	; 50
 de8:	f0 e0       	ldi	r31, 0x00	; 0
 dea:	80 81       	ld	r24, Z
 dec:	8e 7f       	andi	r24, 0xFE	; 254
 dee:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
 df0:	8b 81       	ldd	r24, Y+3	; 0x03
 df2:	81 30       	cpi	r24, 0x01	; 1
 df4:	41 f4       	brne	.+16     	; 0xe06 <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
 df6:	a2 e3       	ldi	r26, 0x32	; 50
 df8:	b0 e0       	ldi	r27, 0x00	; 0
 dfa:	e2 e3       	ldi	r30, 0x32	; 50
 dfc:	f0 e0       	ldi	r31, 0x00	; 0
 dfe:	80 81       	ld	r24, Z
 e00:	82 60       	ori	r24, 0x02	; 2
 e02:	8c 93       	st	X, r24
 e04:	07 c0       	rjmp	.+14     	; 0xe14 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
 e06:	a2 e3       	ldi	r26, 0x32	; 50
 e08:	b0 e0       	ldi	r27, 0x00	; 0
 e0a:	e2 e3       	ldi	r30, 0x32	; 50
 e0c:	f0 e0       	ldi	r31, 0x00	; 0
 e0e:	80 81       	ld	r24, Z
 e10:	8d 7f       	andi	r24, 0xFD	; 253
 e12:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
 e14:	8c 81       	ldd	r24, Y+4	; 0x04
 e16:	81 30       	cpi	r24, 0x01	; 1
 e18:	41 f4       	brne	.+16     	; 0xe2a <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
 e1a:	a2 e3       	ldi	r26, 0x32	; 50
 e1c:	b0 e0       	ldi	r27, 0x00	; 0
 e1e:	e2 e3       	ldi	r30, 0x32	; 50
 e20:	f0 e0       	ldi	r31, 0x00	; 0
 e22:	80 81       	ld	r24, Z
 e24:	84 60       	ori	r24, 0x04	; 4
 e26:	8c 93       	st	X, r24
 e28:	07 c0       	rjmp	.+14     	; 0xe38 <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
 e2a:	a2 e3       	ldi	r26, 0x32	; 50
 e2c:	b0 e0       	ldi	r27, 0x00	; 0
 e2e:	e2 e3       	ldi	r30, 0x32	; 50
 e30:	f0 e0       	ldi	r31, 0x00	; 0
 e32:	80 81       	ld	r24, Z
 e34:	8b 7f       	andi	r24, 0xFB	; 251
 e36:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
 e38:	8d 81       	ldd	r24, Y+5	; 0x05
 e3a:	81 30       	cpi	r24, 0x01	; 1
 e3c:	41 f4       	brne	.+16     	; 0xe4e <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
 e3e:	a2 e3       	ldi	r26, 0x32	; 50
 e40:	b0 e0       	ldi	r27, 0x00	; 0
 e42:	e2 e3       	ldi	r30, 0x32	; 50
 e44:	f0 e0       	ldi	r31, 0x00	; 0
 e46:	80 81       	ld	r24, Z
 e48:	88 60       	ori	r24, 0x08	; 8
 e4a:	8c 93       	st	X, r24
 e4c:	07 c0       	rjmp	.+14     	; 0xe5c <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
 e4e:	a2 e3       	ldi	r26, 0x32	; 50
 e50:	b0 e0       	ldi	r27, 0x00	; 0
 e52:	e2 e3       	ldi	r30, 0x32	; 50
 e54:	f0 e0       	ldi	r31, 0x00	; 0
 e56:	80 81       	ld	r24, Z
 e58:	87 7f       	andi	r24, 0xF7	; 247
 e5a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
 e5c:	8e 81       	ldd	r24, Y+6	; 0x06
 e5e:	81 30       	cpi	r24, 0x01	; 1
 e60:	41 f4       	brne	.+16     	; 0xe72 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
 e62:	a2 e3       	ldi	r26, 0x32	; 50
 e64:	b0 e0       	ldi	r27, 0x00	; 0
 e66:	e2 e3       	ldi	r30, 0x32	; 50
 e68:	f0 e0       	ldi	r31, 0x00	; 0
 e6a:	80 81       	ld	r24, Z
 e6c:	80 61       	ori	r24, 0x10	; 16
 e6e:	8c 93       	st	X, r24
 e70:	07 c0       	rjmp	.+14     	; 0xe80 <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
 e72:	a2 e3       	ldi	r26, 0x32	; 50
 e74:	b0 e0       	ldi	r27, 0x00	; 0
 e76:	e2 e3       	ldi	r30, 0x32	; 50
 e78:	f0 e0       	ldi	r31, 0x00	; 0
 e7a:	80 81       	ld	r24, Z
 e7c:	8f 7e       	andi	r24, 0xEF	; 239
 e7e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
 e80:	8f 81       	ldd	r24, Y+7	; 0x07
 e82:	81 30       	cpi	r24, 0x01	; 1
 e84:	41 f4       	brne	.+16     	; 0xe96 <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
 e86:	a2 e3       	ldi	r26, 0x32	; 50
 e88:	b0 e0       	ldi	r27, 0x00	; 0
 e8a:	e2 e3       	ldi	r30, 0x32	; 50
 e8c:	f0 e0       	ldi	r31, 0x00	; 0
 e8e:	80 81       	ld	r24, Z
 e90:	80 62       	ori	r24, 0x20	; 32
 e92:	8c 93       	st	X, r24
 e94:	07 c0       	rjmp	.+14     	; 0xea4 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
 e96:	a2 e3       	ldi	r26, 0x32	; 50
 e98:	b0 e0       	ldi	r27, 0x00	; 0
 e9a:	e2 e3       	ldi	r30, 0x32	; 50
 e9c:	f0 e0       	ldi	r31, 0x00	; 0
 e9e:	80 81       	ld	r24, Z
 ea0:	8f 7d       	andi	r24, 0xDF	; 223
 ea2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
 ea4:	88 85       	ldd	r24, Y+8	; 0x08
 ea6:	81 30       	cpi	r24, 0x01	; 1
 ea8:	41 f4       	brne	.+16     	; 0xeba <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
 eaa:	a2 e3       	ldi	r26, 0x32	; 50
 eac:	b0 e0       	ldi	r27, 0x00	; 0
 eae:	e2 e3       	ldi	r30, 0x32	; 50
 eb0:	f0 e0       	ldi	r31, 0x00	; 0
 eb2:	80 81       	ld	r24, Z
 eb4:	80 64       	ori	r24, 0x40	; 64
 eb6:	8c 93       	st	X, r24
 eb8:	07 c0       	rjmp	.+14     	; 0xec8 <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
 eba:	a2 e3       	ldi	r26, 0x32	; 50
 ebc:	b0 e0       	ldi	r27, 0x00	; 0
 ebe:	e2 e3       	ldi	r30, 0x32	; 50
 ec0:	f0 e0       	ldi	r31, 0x00	; 0
 ec2:	80 81       	ld	r24, Z
 ec4:	8f 7b       	andi	r24, 0xBF	; 191
 ec6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
 ec8:	89 85       	ldd	r24, Y+9	; 0x09
 eca:	81 30       	cpi	r24, 0x01	; 1
 ecc:	41 f4       	brne	.+16     	; 0xede <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
 ece:	a2 e3       	ldi	r26, 0x32	; 50
 ed0:	b0 e0       	ldi	r27, 0x00	; 0
 ed2:	e2 e3       	ldi	r30, 0x32	; 50
 ed4:	f0 e0       	ldi	r31, 0x00	; 0
 ed6:	80 81       	ld	r24, Z
 ed8:	80 68       	ori	r24, 0x80	; 128
 eda:	8c 93       	st	X, r24
 edc:	07 c0       	rjmp	.+14     	; 0xeec <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
 ede:	a2 e3       	ldi	r26, 0x32	; 50
 ee0:	b0 e0       	ldi	r27, 0x00	; 0
 ee2:	e2 e3       	ldi	r30, 0x32	; 50
 ee4:	f0 e0       	ldi	r31, 0x00	; 0
 ee6:	80 81       	ld	r24, Z
 ee8:	8f 77       	andi	r24, 0x7F	; 127
 eea:	8c 93       	st	X, r24
		}
		break;
	}
}
 eec:	2c 96       	adiw	r28, 0x0c	; 12
 eee:	0f b6       	in	r0, 0x3f	; 63
 ef0:	f8 94       	cli
 ef2:	de bf       	out	0x3e, r29	; 62
 ef4:	0f be       	out	0x3f, r0	; 63
 ef6:	cd bf       	out	0x3d, r28	; 61
 ef8:	cf 91       	pop	r28
 efa:	df 91       	pop	r29
 efc:	0f 91       	pop	r16
 efe:	ef 90       	pop	r14
 f00:	cf 90       	pop	r12
 f02:	af 90       	pop	r10
 f04:	8f 90       	pop	r8
 f06:	08 95       	ret

00000f08 <main>:


#include "../MCAL/DIO/DIO_Interface.h"
#include "../MCAL/DIO/DIO_Config.h"

int main(void){
 f08:	df 93       	push	r29
 f0a:	cf 93       	push	r28
 f0c:	cd b7       	in	r28, 0x3d	; 61
 f0e:	de b7       	in	r29, 0x3e	; 62
    return 0;
 f10:	80 e0       	ldi	r24, 0x00	; 0
 f12:	90 e0       	ldi	r25, 0x00	; 0
}
 f14:	cf 91       	pop	r28
 f16:	df 91       	pop	r29
 f18:	08 95       	ret

00000f1a <_exit>:
 f1a:	f8 94       	cli

00000f1c <__stop_program>:
 f1c:	ff cf       	rjmp	.-2      	; 0xf1c <__stop_program>
