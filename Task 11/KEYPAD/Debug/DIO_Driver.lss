
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000462e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  0000462e  000046a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000037ec  00000000  00000000  000046e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001555  00000000  00000000  00007ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00009429  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00009569  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000096d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000b322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000c20d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000cfbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000d11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000d3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000db77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 73 18 	call	0x30e6	; 0x30e6 <main>
      7a:	0c 94 15 23 	jmp	0x462a	; 0x462a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e9       	ldi	r26, 0x9E	; 158
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fa 22 	jmp	0x45f4	; 0x45f4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 06 23 	jmp	0x460c	; 0x460c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 06 23 	jmp	0x460c	; 0x460c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e9       	ldi	r24, 0x9E	; 158
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fa 22 	jmp	0x45f4	; 0x45f4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 06 23 	jmp	0x460c	; 0x460c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 06 23 	jmp	0x460c	; 0x460c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ea 22 	jmp	0x45d4	; 0x45d4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 06 23 	jmp	0x460c	; 0x460c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <LCD_setPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <LCD_setPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <LCD_setPinDirection+0x1c>
     b50:	d5 c0       	rjmp	.+426    	; 0xcfc <LCD_setPinDirection+0x1c6>
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	08 f0       	brcs	.+2      	; 0xb5a <LCD_setPinDirection+0x24>
     b58:	d1 c0       	rjmp	.+418    	; 0xcfc <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <LCD_setPinDirection+0x3a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <LCD_setPinDirection+0xc0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <LCD_setPinDirection+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <LCD_setPinDirection+0x68>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <LCD_setPinDirection+0x1c6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <LCD_setPinDirection+0x5a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <LCD_setPinDirection+0x118>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <LCD_setPinDirection+0x66>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <LCD_setPinDirection+0x170>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <LCD_setPinDirection+0x8c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <LCD_setPinDirection+0x88>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <LCD_setPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <LCD_setPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <LCD_setPinDirection+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <LCD_setPinDirection+0xe0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <LCD_setPinDirection+0x10c>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <LCD_setPinDirection+0x108>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <LCD_setPinDirection+0x13c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <LCD_setPinDirection+0x138>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <LCD_setPinDirection+0x164>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <LCD_setPinDirection+0x160>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <LCD_setPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <LCD_setPinDirection+0x190>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <LCD_setPinDirection+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <LCD_setPinDirection+0x1b8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <LCD_setPinValue+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <LCD_setPinValue+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	08 f0       	brcs	.+2      	; 0xd28 <LCD_setPinValue+0x1c>
     d26:	d5 c0       	rjmp	.+426    	; 0xed2 <LCD_setPinValue+0x1c6>
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <LCD_setPinValue+0x24>
     d2e:	d1 c0       	rjmp	.+418    	; 0xed2 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <LCD_setPinValue+0x3a>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <LCD_setPinValue+0xc0>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <LCD_setPinValue+0x4e>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	71 f0       	breq	.+28     	; 0xd74 <LCD_setPinValue+0x68>
     d58:	bc c0       	rjmp	.+376    	; 0xed2 <LCD_setPinValue+0x1c6>
     d5a:	2c 81       	ldd	r18, Y+4	; 0x04
     d5c:	3d 81       	ldd	r19, Y+5	; 0x05
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <LCD_setPinValue+0x5a>
     d64:	5f c0       	rjmp	.+190    	; 0xe24 <LCD_setPinValue+0x118>
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <LCD_setPinValue+0x66>
     d70:	85 c0       	rjmp	.+266    	; 0xe7c <LCD_setPinValue+0x170>
     d72:	af c0       	rjmp	.+350    	; 0xed2 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d7a:	ab e3       	ldi	r26, 0x3B	; 59
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e3       	ldi	r30, 0x3B	; 59
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <LCD_setPinValue+0x8c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <LCD_setPinValue+0x88>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	98 c0       	rjmp	.+304    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <LCD_setPinValue+0xb4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <LCD_setPinValue+0xb0>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	83 c0       	rjmp	.+262    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <LCD_setPinValue+0xe4>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <LCD_setPinValue+0xe0>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	6c c0       	rjmp	.+216    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <LCD_setPinValue+0x10c>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <LCD_setPinValue+0x108>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	57 c0       	rjmp	.+174    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <LCD_setPinValue+0x13c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <LCD_setPinValue+0x138>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	40 c0       	rjmp	.+128    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <LCD_setPinValue+0x164>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <LCD_setPinValue+0x160>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	2b c0       	rjmp	.+86     	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e82:	a2 e3       	ldi	r26, 0x32	; 50
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e2 e3       	ldi	r30, 0x32	; 50
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <LCD_setPinValue+0x194>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <LCD_setPinValue+0x190>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <LCD_setPinValue+0x1bc>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <LCD_setPinValue+0x1b8>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <LCD_getPinValue+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <LCD_getPinValue+0x8>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
     ef4:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <LCD_getPinValue+0x1c>
     efc:	84 c0       	rjmp	.+264    	; 0x1006 <LCD_getPinValue+0x124>
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	08 f0       	brcs	.+2      	; 0xf06 <LCD_getPinValue+0x24>
     f04:	80 c0       	rjmp	.+256    	; 0x1006 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	2c 83       	std	Y+4, r18	; 0x04
     f10:	4c 81       	ldd	r20, Y+4	; 0x04
     f12:	5d 81       	ldd	r21, Y+5	; 0x05
     f14:	41 30       	cpi	r20, 0x01	; 1
     f16:	51 05       	cpc	r21, r1
     f18:	79 f1       	breq	.+94     	; 0xf78 <LCD_getPinValue+0x96>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	91 05       	cpc	r25, r1
     f22:	34 f4       	brge	.+12     	; 0xf30 <LCD_getPinValue+0x4e>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	69 f0       	breq	.+26     	; 0xf48 <LCD_getPinValue+0x66>
     f2e:	6b c0       	rjmp	.+214    	; 0x1006 <LCD_getPinValue+0x124>
     f30:	4c 81       	ldd	r20, Y+4	; 0x04
     f32:	5d 81       	ldd	r21, Y+5	; 0x05
     f34:	42 30       	cpi	r20, 0x02	; 2
     f36:	51 05       	cpc	r21, r1
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <LCD_getPinValue+0xc6>
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <LCD_getPinValue+0x64>
     f44:	49 c0       	rjmp	.+146    	; 0xfd8 <LCD_getPinValue+0xf6>
     f46:	5f c0       	rjmp	.+190    	; 0x1006 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f48:	e9 e3       	ldi	r30, 0x39	; 57
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <LCD_getPinValue+0x7e>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <LCD_getPinValue+0x7a>
     f64:	ca 01       	movw	r24, r20
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	88 23       	and	r24, r24
     f6c:	19 f0       	breq	.+6      	; 0xf74 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	49 c0       	rjmp	.+146    	; 0x1006 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	47 c0       	rjmp	.+142    	; 0x1006 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f78:	e6 e3       	ldi	r30, 0x36	; 54
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <LCD_getPinValue+0xae>
     f8c:	55 95       	asr	r21
     f8e:	47 95       	ror	r20
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <LCD_getPinValue+0xaa>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	88 23       	and	r24, r24
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	31 c0       	rjmp	.+98     	; 0x1006 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	2f c0       	rjmp	.+94     	; 0x1006 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fa8:	e3 e3       	ldi	r30, 0x33	; 51
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <LCD_getPinValue+0xde>
     fbc:	55 95       	asr	r21
     fbe:	47 95       	ror	r20
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <LCD_getPinValue+0xda>
     fc4:	ca 01       	movw	r24, r20
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 23       	and	r24, r24
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	19 c0       	rjmp	.+50     	; 0x1006 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fd8:	e0 e3       	ldi	r30, 0x30	; 48
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <LCD_getPinValue+0x10e>
     fec:	55 95       	asr	r21
     fee:	47 95       	ror	r20
     ff0:	8a 95       	dec	r24
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <LCD_getPinValue+0x10a>
     ff4:	ca 01       	movw	r24, r20
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	88 23       	and	r24, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1004:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <LCD_setPortDirection+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <LCD_setPortDirection+0x8>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	90 f5       	brcc	.+100    	; 0x1092 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 83       	std	Y+4, r19	; 0x04
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	d1 f0       	breq	.+52     	; 0x1076 <LCD_setPortDirection+0x5e>
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	3c 81       	ldd	r19, Y+4	; 0x04
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <LCD_setPortDirection+0x3e>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	61 f0       	breq	.+24     	; 0x106c <LCD_setPortDirection+0x54>
    1054:	1e c0       	rjmp	.+60     	; 0x1092 <LCD_setPortDirection+0x7a>
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	81 f0       	breq	.+32     	; 0x1080 <LCD_setPortDirection+0x68>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	81 f0       	breq	.+32     	; 0x108a <LCD_setPortDirection+0x72>
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	80 83       	st	Z, r24
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1076:	e7 e3       	ldi	r30, 0x37	; 55
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 83       	st	Z, r24
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    108a:	e1 e3       	ldi	r30, 0x31	; 49
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
			break;
		}
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <LCD_setPortValue+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <LCD_setPortValue+0x8>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	90 f5       	brcc	.+100    	; 0x111a <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3c 83       	std	Y+4, r19	; 0x04
    10be:	2b 83       	std	Y+3, r18	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <LCD_setPortValue+0x5e>
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <LCD_setPortValue+0x3e>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <LCD_setPortValue+0x54>
    10dc:	1e c0       	rjmp	.+60     	; 0x111a <LCD_setPortValue+0x7a>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <LCD_setPortValue+0x68>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <LCD_setPortValue+0x72>
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    10f4:	eb e3       	ldi	r30, 0x3B	; 59
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	80 83       	st	Z, r24
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	80 83       	st	Z, r24
    1106:	09 c0       	rjmp	.+18     	; 0x111a <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1108:	e5 e3       	ldi	r30, 0x35	; 53
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	04 c0       	rjmp	.+8      	; 0x111a <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
			break;
		}
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <LCD_getPortValue+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <LCD_getPortValue+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1136:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	90 f5       	brcc	.+100    	; 0x11a2 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3c 83       	std	Y+4, r19	; 0x04
    1146:	2b 83       	std	Y+3, r18	; 0x03
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	d1 f0       	breq	.+52     	; 0x1186 <LCD_getPortValue+0x5e>
    1152:	2b 81       	ldd	r18, Y+3	; 0x03
    1154:	3c 81       	ldd	r19, Y+4	; 0x04
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <LCD_getPortValue+0x3e>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 f0       	breq	.+24     	; 0x117c <LCD_getPortValue+0x54>
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <LCD_getPortValue+0x7a>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <LCD_getPortValue+0x68>
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	81 f0       	breq	.+32     	; 0x119a <LCD_getPortValue+0x72>
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    117c:	e9 e3       	ldi	r30, 0x39	; 57
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1186:	e6 e3       	ldi	r30, 0x36	; 54
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    119a:	e0 e3       	ldi	r30, 0x30	; 48
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    11ba:	ea e3       	ldi	r30, 0x3A	; 58
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    11c0:	e7 e3       	ldi	r30, 0x37	; 55
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    11c6:	e4 e3       	ldi	r30, 0x34	; 52
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    11ce:	e1 e3       	ldi	r30, 0x31	; 49
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 e3       	ldi	r24, 0x30	; 48
    11d4:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    11d6:	eb e3       	ldi	r30, 0x3B	; 59
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    11e8:	e2 e3       	ldi	r30, 0x32	; 50
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	10 82       	st	Z, r1

}
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	2e 97       	sbiw	r28, 0x0e	; 14
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	8a 83       	std	Y+2, r24	; 0x02
    120a:	6b 83       	std	Y+3, r22	; 0x03
    120c:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	84 30       	cpi	r24, 0x04	; 4
    1216:	08 f0       	brcs	.+2      	; 0x121a <DIO_u8SetPinDirection+0x26>
    1218:	0c c1       	rjmp	.+536    	; 0x1432 <DIO_u8SetPinDirection+0x23e>
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	88 30       	cpi	r24, 0x08	; 8
    121e:	08 f0       	brcs	.+2      	; 0x1222 <DIO_u8SetPinDirection+0x2e>
    1220:	08 c1       	rjmp	.+528    	; 0x1432 <DIO_u8SetPinDirection+0x23e>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	21 f0       	breq	.+8      	; 0x1230 <DIO_u8SetPinDirection+0x3c>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	88 23       	and	r24, r24
    122c:	09 f0       	breq	.+2      	; 0x1230 <DIO_u8SetPinDirection+0x3c>
    122e:	01 c1       	rjmp	.+514    	; 0x1432 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3e 87       	std	Y+14, r19	; 0x0e
    1238:	2d 87       	std	Y+13, r18	; 0x0d
    123a:	8d 85       	ldd	r24, Y+13	; 0x0d
    123c:	9e 85       	ldd	r25, Y+14	; 0x0e
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	91 05       	cpc	r25, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <DIO_u8SetPinDirection+0x52>
    1244:	4f c0       	rjmp	.+158    	; 0x12e4 <DIO_u8SetPinDirection+0xf0>
    1246:	2d 85       	ldd	r18, Y+13	; 0x0d
    1248:	3e 85       	ldd	r19, Y+14	; 0x0e
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <DIO_u8SetPinDirection+0x66>
    1250:	8d 85       	ldd	r24, Y+13	; 0x0d
    1252:	9e 85       	ldd	r25, Y+14	; 0x0e
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	71 f0       	breq	.+28     	; 0x1274 <DIO_u8SetPinDirection+0x80>
    1258:	ed c0       	rjmp	.+474    	; 0x1434 <DIO_u8SetPinDirection+0x240>
    125a:	2d 85       	ldd	r18, Y+13	; 0x0d
    125c:	3e 85       	ldd	r19, Y+14	; 0x0e
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <DIO_u8SetPinDirection+0x72>
    1264:	77 c0       	rjmp	.+238    	; 0x1354 <DIO_u8SetPinDirection+0x160>
    1266:	8d 85       	ldd	r24, Y+13	; 0x0d
    1268:	9e 85       	ldd	r25, Y+14	; 0x0e
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <DIO_u8SetPinDirection+0x7e>
    1270:	a9 c0       	rjmp	.+338    	; 0x13c4 <DIO_u8SetPinDirection+0x1d0>
    1272:	e0 c0       	rjmp	.+448    	; 0x1434 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3c 87       	std	Y+12, r19	; 0x0c
    127c:	2b 87       	std	Y+11, r18	; 0x0b
    127e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1280:	9c 85       	ldd	r25, Y+12	; 0x0c
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	d1 f0       	breq	.+52     	; 0x12ba <DIO_u8SetPinDirection+0xc6>
    1286:	2b 85       	ldd	r18, Y+11	; 0x0b
    1288:	3c 85       	ldd	r19, Y+12	; 0x0c
    128a:	21 30       	cpi	r18, 0x01	; 1
    128c:	31 05       	cpc	r19, r1
    128e:	09 f0       	breq	.+2      	; 0x1292 <DIO_u8SetPinDirection+0x9e>
    1290:	d1 c0       	rjmp	.+418    	; 0x1434 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1292:	aa e3       	ldi	r26, 0x3A	; 58
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_u8SetPinDirection+0xbc>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_u8SetPinDirection+0xb8>
    12b4:	84 2b       	or	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	bd c0       	rjmp	.+378    	; 0x1434 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    12ba:	aa e3       	ldi	r26, 0x3A	; 58
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ea e3       	ldi	r30, 0x3A	; 58
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_u8SetPinDirection+0xe4>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_u8SetPinDirection+0xe0>
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	a8 c0       	rjmp	.+336    	; 0x1434 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3a 87       	std	Y+10, r19	; 0x0a
    12ec:	29 87       	std	Y+9, r18	; 0x09
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	d1 f0       	breq	.+52     	; 0x132a <DIO_u8SetPinDirection+0x136>
    12f6:	29 85       	ldd	r18, Y+9	; 0x09
    12f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12fa:	21 30       	cpi	r18, 0x01	; 1
    12fc:	31 05       	cpc	r19, r1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <DIO_u8SetPinDirection+0x10e>
    1300:	99 c0       	rjmp	.+306    	; 0x1434 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1302:	a7 e3       	ldi	r26, 0x37	; 55
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e3       	ldi	r30, 0x37	; 55
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_u8SetPinDirection+0x12c>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_u8SetPinDirection+0x128>
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	85 c0       	rjmp	.+266    	; 0x1434 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    132a:	a7 e3       	ldi	r26, 0x37	; 55
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e7 e3       	ldi	r30, 0x37	; 55
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_u8SetPinDirection+0x154>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_u8SetPinDirection+0x150>
    134c:	80 95       	com	r24
    134e:	84 23       	and	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	70 c0       	rjmp	.+224    	; 0x1434 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	38 87       	std	Y+8, r19	; 0x08
    135c:	2f 83       	std	Y+7, r18	; 0x07
    135e:	8f 81       	ldd	r24, Y+7	; 0x07
    1360:	98 85       	ldd	r25, Y+8	; 0x08
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	d1 f0       	breq	.+52     	; 0x139a <DIO_u8SetPinDirection+0x1a6>
    1366:	2f 81       	ldd	r18, Y+7	; 0x07
    1368:	38 85       	ldd	r19, Y+8	; 0x08
    136a:	21 30       	cpi	r18, 0x01	; 1
    136c:	31 05       	cpc	r19, r1
    136e:	09 f0       	breq	.+2      	; 0x1372 <DIO_u8SetPinDirection+0x17e>
    1370:	61 c0       	rjmp	.+194    	; 0x1434 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1372:	a4 e3       	ldi	r26, 0x34	; 52
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e4 e3       	ldi	r30, 0x34	; 52
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_u8SetPinDirection+0x19c>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_u8SetPinDirection+0x198>
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	4d c0       	rjmp	.+154    	; 0x1434 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    139a:	a4 e3       	ldi	r26, 0x34	; 52
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e4 e3       	ldi	r30, 0x34	; 52
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_u8SetPinDirection+0x1c4>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_u8SetPinDirection+0x1c0>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	38 c0       	rjmp	.+112    	; 0x1434 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3e 83       	std	Y+6, r19	; 0x06
    13cc:	2d 83       	std	Y+5, r18	; 0x05
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	c9 f0       	breq	.+50     	; 0x1408 <DIO_u8SetPinDirection+0x214>
    13d6:	2d 81       	ldd	r18, Y+5	; 0x05
    13d8:	3e 81       	ldd	r19, Y+6	; 0x06
    13da:	21 30       	cpi	r18, 0x01	; 1
    13dc:	31 05       	cpc	r19, r1
    13de:	51 f5       	brne	.+84     	; 0x1434 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    13e0:	a1 e3       	ldi	r26, 0x31	; 49
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e1 e3       	ldi	r30, 0x31	; 49
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_u8SetPinDirection+0x20a>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_u8SetPinDirection+0x206>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	16 c0       	rjmp	.+44     	; 0x1434 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1408:	a1 e3       	ldi	r26, 0x31	; 49
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e1 e3       	ldi	r30, 0x31	; 49
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_u8SetPinDirection+0x232>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_u8SetPinDirection+0x22e>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1432:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1434:	89 81       	ldd	r24, Y+1	; 0x01
}
    1436:	2e 96       	adiw	r28, 0x0e	; 14
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	2f 97       	sbiw	r28, 0x0f	; 15
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	6c 83       	std	Y+4, r22	; 0x04
    1460:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	08 f0       	brcs	.+2      	; 0x146e <DIO_u8SetPinValue+0x26>
    146c:	13 c1       	rjmp	.+550    	; 0x1694 <DIO_u8SetPinValue+0x24c>
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	08 f0       	brcs	.+2      	; 0x1476 <DIO_u8SetPinValue+0x2e>
    1474:	0f c1       	rjmp	.+542    	; 0x1694 <DIO_u8SetPinValue+0x24c>
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	88 23       	and	r24, r24
    147a:	21 f0       	breq	.+8      	; 0x1484 <DIO_u8SetPinValue+0x3c>
    147c:	8d 81       	ldd	r24, Y+5	; 0x05
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	09 f0       	breq	.+2      	; 0x1484 <DIO_u8SetPinValue+0x3c>
    1482:	08 c1       	rjmp	.+528    	; 0x1694 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3f 87       	std	Y+15, r19	; 0x0f
    148c:	2e 87       	std	Y+14, r18	; 0x0e
    148e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1490:	9f 85       	ldd	r25, Y+15	; 0x0f
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <DIO_u8SetPinValue+0x52>
    1498:	50 c0       	rjmp	.+160    	; 0x153a <DIO_u8SetPinValue+0xf2>
    149a:	2e 85       	ldd	r18, Y+14	; 0x0e
    149c:	3f 85       	ldd	r19, Y+15	; 0x0f
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <DIO_u8SetPinValue+0x66>
    14a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	71 f0       	breq	.+28     	; 0x14c8 <DIO_u8SetPinValue+0x80>
    14ac:	f4 c0       	rjmp	.+488    	; 0x1696 <DIO_u8SetPinValue+0x24e>
    14ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    14b0:	3f 85       	ldd	r19, Y+15	; 0x0f
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <DIO_u8SetPinValue+0x72>
    14b8:	79 c0       	rjmp	.+242    	; 0x15ac <DIO_u8SetPinValue+0x164>
    14ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    14bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <DIO_u8SetPinValue+0x7e>
    14c4:	ad c0       	rjmp	.+346    	; 0x1620 <DIO_u8SetPinValue+0x1d8>
    14c6:	e7 c0       	rjmp	.+462    	; 0x1696 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3d 87       	std	Y+13, r19	; 0x0d
    14d0:	2c 87       	std	Y+12, r18	; 0x0c
    14d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	c9 f0       	breq	.+50     	; 0x150c <DIO_u8SetPinValue+0xc4>
    14da:	2c 85       	ldd	r18, Y+12	; 0x0c
    14dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    14de:	21 30       	cpi	r18, 0x01	; 1
    14e0:	31 05       	cpc	r19, r1
    14e2:	49 f5       	brne	.+82     	; 0x1536 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    14e4:	ab e3       	ldi	r26, 0x3B	; 59
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_u8SetPinValue+0xba>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_u8SetPinValue+0xb6>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	c5 c0       	rjmp	.+394    	; 0x1696 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    150c:	ab e3       	ldi	r26, 0x3B	; 59
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	eb e3       	ldi	r30, 0x3B	; 59
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_u8SetPinValue+0xe2>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_u8SetPinValue+0xde>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	b0 c0       	rjmp	.+352    	; 0x1696 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1536:	1a 82       	std	Y+2, r1	; 0x02
    1538:	ae c0       	rjmp	.+348    	; 0x1696 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3b 87       	std	Y+11, r19	; 0x0b
    1542:	2a 87       	std	Y+10, r18	; 0x0a
    1544:	8a 85       	ldd	r24, Y+10	; 0x0a
    1546:	9b 85       	ldd	r25, Y+11	; 0x0b
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	c9 f0       	breq	.+50     	; 0x157e <DIO_u8SetPinValue+0x136>
    154c:	2a 85       	ldd	r18, Y+10	; 0x0a
    154e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1550:	21 30       	cpi	r18, 0x01	; 1
    1552:	31 05       	cpc	r19, r1
    1554:	49 f5       	brne	.+82     	; 0x15a8 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1556:	a8 e3       	ldi	r26, 0x38	; 56
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e8 e3       	ldi	r30, 0x38	; 56
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_u8SetPinValue+0x12c>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_u8SetPinValue+0x128>
    1578:	84 2b       	or	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	8c c0       	rjmp	.+280    	; 0x1696 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    157e:	a8 e3       	ldi	r26, 0x38	; 56
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e8 e3       	ldi	r30, 0x38	; 56
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_u8SetPinValue+0x154>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_u8SetPinValue+0x150>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	77 c0       	rjmp	.+238    	; 0x1696 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    15a8:	1a 82       	std	Y+2, r1	; 0x02
    15aa:	75 c0       	rjmp	.+234    	; 0x1696 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	39 87       	std	Y+9, r19	; 0x09
    15b4:	28 87       	std	Y+8, r18	; 0x08
    15b6:	88 85       	ldd	r24, Y+8	; 0x08
    15b8:	99 85       	ldd	r25, Y+9	; 0x09
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	31 f0       	breq	.+12     	; 0x15ca <DIO_u8SetPinValue+0x182>
    15be:	28 85       	ldd	r18, Y+8	; 0x08
    15c0:	39 85       	ldd	r19, Y+9	; 0x09
    15c2:	21 30       	cpi	r18, 0x01	; 1
    15c4:	31 05       	cpc	r19, r1
    15c6:	b1 f0       	breq	.+44     	; 0x15f4 <DIO_u8SetPinValue+0x1ac>
    15c8:	29 c0       	rjmp	.+82     	; 0x161c <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    15ca:	a5 e3       	ldi	r26, 0x35	; 53
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e3       	ldi	r30, 0x35	; 53
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_u8SetPinValue+0x1a0>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_u8SetPinValue+0x19c>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	51 c0       	rjmp	.+162    	; 0x1696 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    15f4:	a5 e3       	ldi	r26, 0x35	; 53
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e5 e3       	ldi	r30, 0x35	; 53
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_u8SetPinValue+0x1ca>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_u8SetPinValue+0x1c6>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	3d c0       	rjmp	.+122    	; 0x1696 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    161c:	1a 82       	std	Y+2, r1	; 0x02
    161e:	3b c0       	rjmp	.+118    	; 0x1696 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3f 83       	std	Y+7, r19	; 0x07
    1628:	2e 83       	std	Y+6, r18	; 0x06
    162a:	8e 81       	ldd	r24, Y+6	; 0x06
    162c:	9f 81       	ldd	r25, Y+7	; 0x07
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	31 f0       	breq	.+12     	; 0x163e <DIO_u8SetPinValue+0x1f6>
    1632:	2e 81       	ldd	r18, Y+6	; 0x06
    1634:	3f 81       	ldd	r19, Y+7	; 0x07
    1636:	21 30       	cpi	r18, 0x01	; 1
    1638:	31 05       	cpc	r19, r1
    163a:	b1 f0       	breq	.+44     	; 0x1668 <DIO_u8SetPinValue+0x220>
    163c:	29 c0       	rjmp	.+82     	; 0x1690 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    163e:	a5 e3       	ldi	r26, 0x35	; 53
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e3       	ldi	r30, 0x35	; 53
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_u8SetPinValue+0x214>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_u8SetPinValue+0x210>
    1660:	80 95       	com	r24
    1662:	84 23       	and	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	17 c0       	rjmp	.+46     	; 0x1696 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1668:	a2 e3       	ldi	r26, 0x32	; 50
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e2 e3       	ldi	r30, 0x32	; 50
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_u8SetPinValue+0x23e>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_u8SetPinValue+0x23a>
    168a:	84 2b       	or	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1690:	1a 82       	std	Y+2, r1	; 0x02
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    1694:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1698:	2f 96       	adiw	r28, 0x0f	; 15
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	28 97       	sbiw	r28, 0x08	; 8
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	8b 83       	std	Y+3, r24	; 0x03
    16c0:	6c 83       	std	Y+4, r22	; 0x04
    16c2:	5e 83       	std	Y+6, r21	; 0x06
    16c4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	84 30       	cpi	r24, 0x04	; 4
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <DIO_u8GetPinValue+0x28>
    16d0:	9f c0       	rjmp	.+318    	; 0x1810 <DIO_u8GetPinValue+0x166>
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	88 30       	cpi	r24, 0x08	; 8
    16d6:	08 f0       	brcs	.+2      	; 0x16da <DIO_u8GetPinValue+0x30>
    16d8:	9b c0       	rjmp	.+310    	; 0x1810 <DIO_u8GetPinValue+0x166>
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <DIO_u8GetPinValue+0x3a>
    16e2:	96 c0       	rjmp	.+300    	; 0x1810 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	38 87       	std	Y+8, r19	; 0x08
    16ec:	2f 83       	std	Y+7, r18	; 0x07
    16ee:	4f 81       	ldd	r20, Y+7	; 0x07
    16f0:	58 85       	ldd	r21, Y+8	; 0x08
    16f2:	41 30       	cpi	r20, 0x01	; 1
    16f4:	51 05       	cpc	r21, r1
    16f6:	a9 f1       	breq	.+106    	; 0x1762 <DIO_u8GetPinValue+0xb8>
    16f8:	8f 81       	ldd	r24, Y+7	; 0x07
    16fa:	98 85       	ldd	r25, Y+8	; 0x08
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	91 05       	cpc	r25, r1
    1700:	34 f4       	brge	.+12     	; 0x170e <DIO_u8GetPinValue+0x64>
    1702:	2f 81       	ldd	r18, Y+7	; 0x07
    1704:	38 85       	ldd	r19, Y+8	; 0x08
    1706:	21 15       	cp	r18, r1
    1708:	31 05       	cpc	r19, r1
    170a:	71 f0       	breq	.+28     	; 0x1728 <DIO_u8GetPinValue+0x7e>
    170c:	82 c0       	rjmp	.+260    	; 0x1812 <DIO_u8GetPinValue+0x168>
    170e:	4f 81       	ldd	r20, Y+7	; 0x07
    1710:	58 85       	ldd	r21, Y+8	; 0x08
    1712:	42 30       	cpi	r20, 0x02	; 2
    1714:	51 05       	cpc	r21, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <DIO_u8GetPinValue+0x70>
    1718:	41 c0       	rjmp	.+130    	; 0x179c <DIO_u8GetPinValue+0xf2>
    171a:	8f 81       	ldd	r24, Y+7	; 0x07
    171c:	98 85       	ldd	r25, Y+8	; 0x08
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <DIO_u8GetPinValue+0x7c>
    1724:	58 c0       	rjmp	.+176    	; 0x17d6 <DIO_u8GetPinValue+0x12c>
    1726:	75 c0       	rjmp	.+234    	; 0x1812 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1728:	e9 e3       	ldi	r30, 0x39	; 57
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_u8GetPinValue+0x96>
    173c:	55 95       	asr	r21
    173e:	47 95       	ror	r20
    1740:	8a 95       	dec	r24
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_u8GetPinValue+0x92>
    1744:	ca 01       	movw	r24, r20
    1746:	81 70       	andi	r24, 0x01	; 1
    1748:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	88 23       	and	r24, r24
    174e:	21 f4       	brne	.+8      	; 0x1758 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1750:	ed 81       	ldd	r30, Y+5	; 0x05
    1752:	fe 81       	ldd	r31, Y+6	; 0x06
    1754:	10 82       	st	Z, r1
    1756:	5d c0       	rjmp	.+186    	; 0x1812 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1758:	ed 81       	ldd	r30, Y+5	; 0x05
    175a:	fe 81       	ldd	r31, Y+6	; 0x06
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	80 83       	st	Z, r24
    1760:	58 c0       	rjmp	.+176    	; 0x1812 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1762:	e6 e3       	ldi	r30, 0x36	; 54
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a9 01       	movw	r20, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_u8GetPinValue+0xd0>
    1776:	55 95       	asr	r21
    1778:	47 95       	ror	r20
    177a:	8a 95       	dec	r24
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_u8GetPinValue+0xcc>
    177e:	ca 01       	movw	r24, r20
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	88 23       	and	r24, r24
    1788:	21 f4       	brne	.+8      	; 0x1792 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    178a:	ed 81       	ldd	r30, Y+5	; 0x05
    178c:	fe 81       	ldd	r31, Y+6	; 0x06
    178e:	10 82       	st	Z, r1
    1790:	40 c0       	rjmp	.+128    	; 0x1812 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1792:	ed 81       	ldd	r30, Y+5	; 0x05
    1794:	fe 81       	ldd	r31, Y+6	; 0x06
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 83       	st	Z, r24
    179a:	3b c0       	rjmp	.+118    	; 0x1812 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    179c:	e3 e3       	ldi	r30, 0x33	; 51
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a9 01       	movw	r20, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_u8GetPinValue+0x10a>
    17b0:	55 95       	asr	r21
    17b2:	47 95       	ror	r20
    17b4:	8a 95       	dec	r24
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_u8GetPinValue+0x106>
    17b8:	ca 01       	movw	r24, r20
    17ba:	81 70       	andi	r24, 0x01	; 1
    17bc:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	88 23       	and	r24, r24
    17c2:	21 f4       	brne	.+8      	; 0x17cc <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    17c4:	ed 81       	ldd	r30, Y+5	; 0x05
    17c6:	fe 81       	ldd	r31, Y+6	; 0x06
    17c8:	10 82       	st	Z, r1
    17ca:	23 c0       	rjmp	.+70     	; 0x1812 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    17cc:	ed 81       	ldd	r30, Y+5	; 0x05
    17ce:	fe 81       	ldd	r31, Y+6	; 0x06
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	80 83       	st	Z, r24
    17d4:	1e c0       	rjmp	.+60     	; 0x1812 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    17d6:	e0 e3       	ldi	r30, 0x30	; 48
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_u8GetPinValue+0x144>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_u8GetPinValue+0x140>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	88 23       	and	r24, r24
    17fc:	21 f4       	brne	.+8      	; 0x1806 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    17fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1800:	fe 81       	ldd	r31, Y+6	; 0x06
    1802:	10 82       	st	Z, r1
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1806:	ed 81       	ldd	r30, Y+5	; 0x05
    1808:	fe 81       	ldd	r31, Y+6	; 0x06
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 83       	st	Z, r24
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1810:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1814:	28 96       	adiw	r28, 0x08	; 8
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <DIO_getPinValueWithoutPointer+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <DIO_getPinValueWithoutPointer+0x8>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    1838:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 30       	cpi	r24, 0x08	; 8
    183e:	08 f0       	brcs	.+2      	; 0x1842 <DIO_getPinValueWithoutPointer+0x1c>
    1840:	6b c0       	rjmp	.+214    	; 0x1918 <DIO_getPinValueWithoutPointer+0xf2>
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	08 f0       	brcs	.+2      	; 0x184a <DIO_getPinValueWithoutPointer+0x24>
    1848:	67 c0       	rjmp	.+206    	; 0x1918 <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3d 83       	std	Y+5, r19	; 0x05
    1852:	2c 83       	std	Y+4, r18	; 0x04
    1854:	4c 81       	ldd	r20, Y+4	; 0x04
    1856:	5d 81       	ldd	r21, Y+5	; 0x05
    1858:	41 30       	cpi	r20, 0x01	; 1
    185a:	51 05       	cpc	r21, r1
    185c:	41 f1       	breq	.+80     	; 0x18ae <DIO_getPinValueWithoutPointer+0x88>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	91 05       	cpc	r25, r1
    1866:	34 f4       	brge	.+12     	; 0x1874 <DIO_getPinValueWithoutPointer+0x4e>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	21 15       	cp	r18, r1
    186e:	31 05       	cpc	r19, r1
    1870:	61 f0       	breq	.+24     	; 0x188a <DIO_getPinValueWithoutPointer+0x64>
    1872:	52 c0       	rjmp	.+164    	; 0x1918 <DIO_getPinValueWithoutPointer+0xf2>
    1874:	4c 81       	ldd	r20, Y+4	; 0x04
    1876:	5d 81       	ldd	r21, Y+5	; 0x05
    1878:	42 30       	cpi	r20, 0x02	; 2
    187a:	51 05       	cpc	r21, r1
    187c:	51 f1       	breq	.+84     	; 0x18d2 <DIO_getPinValueWithoutPointer+0xac>
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	91 05       	cpc	r25, r1
    1886:	b9 f1       	breq	.+110    	; 0x18f6 <DIO_getPinValueWithoutPointer+0xd0>
    1888:	47 c0       	rjmp	.+142    	; 0x1918 <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    188a:	e9 e3       	ldi	r30, 0x39	; 57
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a9 01       	movw	r20, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_getPinValueWithoutPointer+0x7c>
    189e:	55 95       	asr	r21
    18a0:	47 95       	ror	r20
    18a2:	8a 95       	dec	r24
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_getPinValueWithoutPointer+0x78>
    18a6:	ca 01       	movw	r24, r20
    18a8:	81 70       	andi	r24, 0x01	; 1
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	35 c0       	rjmp	.+106    	; 0x1918 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    18ae:	e6 e3       	ldi	r30, 0x36	; 54
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a9 01       	movw	r20, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_getPinValueWithoutPointer+0xa0>
    18c2:	55 95       	asr	r21
    18c4:	47 95       	ror	r20
    18c6:	8a 95       	dec	r24
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <DIO_getPinValueWithoutPointer+0x9c>
    18ca:	ca 01       	movw	r24, r20
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	23 c0       	rjmp	.+70     	; 0x1918 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    18d2:	e3 e3       	ldi	r30, 0x33	; 51
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_getPinValueWithoutPointer+0xc4>
    18e6:	55 95       	asr	r21
    18e8:	47 95       	ror	r20
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_getPinValueWithoutPointer+0xc0>
    18ee:	ca 01       	movw	r24, r20
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	11 c0       	rjmp	.+34     	; 0x1918 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    18f6:	e0 e3       	ldi	r30, 0x30	; 48
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	8b 81       	ldd	r24, Y+3	; 0x03
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a9 01       	movw	r20, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_getPinValueWithoutPointer+0xe8>
    190a:	55 95       	asr	r21
    190c:	47 95       	ror	r20
    190e:	8a 95       	dec	r24
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_getPinValueWithoutPointer+0xe4>
    1912:	ca 01       	movw	r24, r20
    1914:	81 70       	andi	r24, 0x01	; 1
    1916:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	2d 97       	sbiw	r28, 0x0d	; 13
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3c 87       	std	Y+12, r19	; 0x0c
    194a:	2b 87       	std	Y+11, r18	; 0x0b
    194c:	8b 85       	ldd	r24, Y+11	; 0x0b
    194e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	71 f1       	breq	.+92     	; 0x19b2 <DIO_u8SetPortDirection+0x88>
    1956:	2b 85       	ldd	r18, Y+11	; 0x0b
    1958:	3c 85       	ldd	r19, Y+12	; 0x0c
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	2c f4       	brge	.+10     	; 0x196a <DIO_u8SetPortDirection+0x40>
    1960:	8b 85       	ldd	r24, Y+11	; 0x0b
    1962:	9c 85       	ldd	r25, Y+12	; 0x0c
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f0       	breq	.+26     	; 0x1982 <DIO_u8SetPortDirection+0x58>
    1968:	6b c0       	rjmp	.+214    	; 0x1a40 <DIO_u8SetPortDirection+0x116>
    196a:	2b 85       	ldd	r18, Y+11	; 0x0b
    196c:	3c 85       	ldd	r19, Y+12	; 0x0c
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	b9 f1       	breq	.+110    	; 0x19e2 <DIO_u8SetPortDirection+0xb8>
    1974:	8b 85       	ldd	r24, Y+11	; 0x0b
    1976:	9c 85       	ldd	r25, Y+12	; 0x0c
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <DIO_u8SetPortDirection+0x56>
    197e:	49 c0       	rjmp	.+146    	; 0x1a12 <DIO_u8SetPortDirection+0xe8>
    1980:	5f c0       	rjmp	.+190    	; 0x1a40 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3a 87       	std	Y+10, r19	; 0x0a
    198a:	29 87       	std	Y+9, r18	; 0x09
    198c:	89 85       	ldd	r24, Y+9	; 0x09
    198e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	31 f0       	breq	.+12     	; 0x19a0 <DIO_u8SetPortDirection+0x76>
    1994:	29 85       	ldd	r18, Y+9	; 0x09
    1996:	3a 85       	ldd	r19, Y+10	; 0x0a
    1998:	21 30       	cpi	r18, 0x01	; 1
    199a:	31 05       	cpc	r19, r1
    199c:	29 f0       	breq	.+10     	; 0x19a8 <DIO_u8SetPortDirection+0x7e>
    199e:	50 c0       	rjmp	.+160    	; 0x1a40 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    19a0:	ea e3       	ldi	r30, 0x3A	; 58
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	10 82       	st	Z, r1
    19a6:	4c c0       	rjmp	.+152    	; 0x1a40 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    19a8:	ea e3       	ldi	r30, 0x3A	; 58
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	80 83       	st	Z, r24
    19b0:	47 c0       	rjmp	.+142    	; 0x1a40 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	38 87       	std	Y+8, r19	; 0x08
    19ba:	2f 83       	std	Y+7, r18	; 0x07
    19bc:	8f 81       	ldd	r24, Y+7	; 0x07
    19be:	98 85       	ldd	r25, Y+8	; 0x08
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	31 f0       	breq	.+12     	; 0x19d0 <DIO_u8SetPortDirection+0xa6>
    19c4:	2f 81       	ldd	r18, Y+7	; 0x07
    19c6:	38 85       	ldd	r19, Y+8	; 0x08
    19c8:	21 30       	cpi	r18, 0x01	; 1
    19ca:	31 05       	cpc	r19, r1
    19cc:	29 f0       	breq	.+10     	; 0x19d8 <DIO_u8SetPortDirection+0xae>
    19ce:	38 c0       	rjmp	.+112    	; 0x1a40 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    19d0:	e7 e3       	ldi	r30, 0x37	; 55
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	10 82       	st	Z, r1
    19d6:	34 c0       	rjmp	.+104    	; 0x1a40 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    19d8:	e7 e3       	ldi	r30, 0x37	; 55
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	80 83       	st	Z, r24
    19e0:	2f c0       	rjmp	.+94     	; 0x1a40 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3e 83       	std	Y+6, r19	; 0x06
    19ea:	2d 83       	std	Y+5, r18	; 0x05
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	9e 81       	ldd	r25, Y+6	; 0x06
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	31 f0       	breq	.+12     	; 0x1a00 <DIO_u8SetPortDirection+0xd6>
    19f4:	2d 81       	ldd	r18, Y+5	; 0x05
    19f6:	3e 81       	ldd	r19, Y+6	; 0x06
    19f8:	21 30       	cpi	r18, 0x01	; 1
    19fa:	31 05       	cpc	r19, r1
    19fc:	29 f0       	breq	.+10     	; 0x1a08 <DIO_u8SetPortDirection+0xde>
    19fe:	20 c0       	rjmp	.+64     	; 0x1a40 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1a00:	e4 e3       	ldi	r30, 0x34	; 52
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	10 82       	st	Z, r1
    1a06:	1c c0       	rjmp	.+56     	; 0x1a40 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    1a08:	e4 e3       	ldi	r30, 0x34	; 52
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	80 83       	st	Z, r24
    1a10:	17 c0       	rjmp	.+46     	; 0x1a40 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	3c 83       	std	Y+4, r19	; 0x04
    1a1a:	2b 83       	std	Y+3, r18	; 0x03
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	31 f0       	breq	.+12     	; 0x1a30 <DIO_u8SetPortDirection+0x106>
    1a24:	2b 81       	ldd	r18, Y+3	; 0x03
    1a26:	3c 81       	ldd	r19, Y+4	; 0x04
    1a28:	21 30       	cpi	r18, 0x01	; 1
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	29 f0       	breq	.+10     	; 0x1a38 <DIO_u8SetPortDirection+0x10e>
    1a2e:	08 c0       	rjmp	.+16     	; 0x1a40 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    1a30:	e1 e3       	ldi	r30, 0x31	; 49
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	10 82       	st	Z, r1
    1a36:	04 c0       	rjmp	.+8      	; 0x1a40 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1a38:	e1 e3       	ldi	r30, 0x31	; 49
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    1a40:	2d 96       	adiw	r28, 0x0d	; 13
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	2d 97       	sbiw	r28, 0x0d	; 13
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    1a68:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <DIO_u8SetPortValue+0x24>
    1a74:	80 c0       	rjmp	.+256    	; 0x1b76 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	3d 87       	std	Y+13, r19	; 0x0d
    1a7e:	2c 87       	std	Y+12, r18	; 0x0c
    1a80:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a82:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	91 05       	cpc	r25, r1
    1a88:	71 f1       	breq	.+92     	; 0x1ae6 <DIO_u8SetPortValue+0x94>
    1a8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a8c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <DIO_u8SetPortValue+0x4c>
    1a94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a96:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f0       	breq	.+26     	; 0x1ab6 <DIO_u8SetPortValue+0x64>
    1a9c:	6d c0       	rjmp	.+218    	; 0x1b78 <DIO_u8SetPortValue+0x126>
    1a9e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aa0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1aa2:	22 30       	cpi	r18, 0x02	; 2
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	b9 f1       	breq	.+110    	; 0x1b16 <DIO_u8SetPortValue+0xc4>
    1aa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aaa:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aac:	83 30       	cpi	r24, 0x03	; 3
    1aae:	91 05       	cpc	r25, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <DIO_u8SetPortValue+0x62>
    1ab2:	49 c0       	rjmp	.+146    	; 0x1b46 <DIO_u8SetPortValue+0xf4>
    1ab4:	61 c0       	rjmp	.+194    	; 0x1b78 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	3b 87       	std	Y+11, r19	; 0x0b
    1abe:	2a 87       	std	Y+10, r18	; 0x0a
    1ac0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ac2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	31 f0       	breq	.+12     	; 0x1ad4 <DIO_u8SetPortValue+0x82>
    1ac8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1aca:	3b 85       	ldd	r19, Y+11	; 0x0b
    1acc:	21 30       	cpi	r18, 0x01	; 1
    1ace:	31 05       	cpc	r19, r1
    1ad0:	29 f0       	breq	.+10     	; 0x1adc <DIO_u8SetPortValue+0x8a>
    1ad2:	52 c0       	rjmp	.+164    	; 0x1b78 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    1ad4:	eb e3       	ldi	r30, 0x3B	; 59
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	10 82       	st	Z, r1
    1ada:	4e c0       	rjmp	.+156    	; 0x1b78 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    1adc:	eb e3       	ldi	r30, 0x3B	; 59
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	80 83       	st	Z, r24
    1ae4:	49 c0       	rjmp	.+146    	; 0x1b78 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	39 87       	std	Y+9, r19	; 0x09
    1aee:	28 87       	std	Y+8, r18	; 0x08
    1af0:	88 85       	ldd	r24, Y+8	; 0x08
    1af2:	99 85       	ldd	r25, Y+9	; 0x09
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	31 f0       	breq	.+12     	; 0x1b04 <DIO_u8SetPortValue+0xb2>
    1af8:	28 85       	ldd	r18, Y+8	; 0x08
    1afa:	39 85       	ldd	r19, Y+9	; 0x09
    1afc:	21 30       	cpi	r18, 0x01	; 1
    1afe:	31 05       	cpc	r19, r1
    1b00:	29 f0       	breq	.+10     	; 0x1b0c <DIO_u8SetPortValue+0xba>
    1b02:	3a c0       	rjmp	.+116    	; 0x1b78 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    1b04:	e8 e3       	ldi	r30, 0x38	; 56
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	10 82       	st	Z, r1
    1b0a:	36 c0       	rjmp	.+108    	; 0x1b78 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    1b0c:	e8 e3       	ldi	r30, 0x38	; 56
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	8f ef       	ldi	r24, 0xFF	; 255
    1b12:	80 83       	st	Z, r24
    1b14:	31 c0       	rjmp	.+98     	; 0x1b78 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3f 83       	std	Y+7, r19	; 0x07
    1b1e:	2e 83       	std	Y+6, r18	; 0x06
    1b20:	8e 81       	ldd	r24, Y+6	; 0x06
    1b22:	9f 81       	ldd	r25, Y+7	; 0x07
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	31 f0       	breq	.+12     	; 0x1b34 <DIO_u8SetPortValue+0xe2>
    1b28:	2e 81       	ldd	r18, Y+6	; 0x06
    1b2a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b2c:	21 30       	cpi	r18, 0x01	; 1
    1b2e:	31 05       	cpc	r19, r1
    1b30:	29 f0       	breq	.+10     	; 0x1b3c <DIO_u8SetPortValue+0xea>
    1b32:	22 c0       	rjmp	.+68     	; 0x1b78 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    1b34:	e5 e3       	ldi	r30, 0x35	; 53
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	10 82       	st	Z, r1
    1b3a:	1e c0       	rjmp	.+60     	; 0x1b78 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    1b3c:	e5 e3       	ldi	r30, 0x35	; 53
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	80 83       	st	Z, r24
    1b44:	19 c0       	rjmp	.+50     	; 0x1b78 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	3d 83       	std	Y+5, r19	; 0x05
    1b4e:	2c 83       	std	Y+4, r18	; 0x04
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	9d 81       	ldd	r25, Y+5	; 0x05
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	31 f0       	breq	.+12     	; 0x1b64 <DIO_u8SetPortValue+0x112>
    1b58:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5c:	21 30       	cpi	r18, 0x01	; 1
    1b5e:	31 05       	cpc	r19, r1
    1b60:	29 f0       	breq	.+10     	; 0x1b6c <DIO_u8SetPortValue+0x11a>
    1b62:	0a c0       	rjmp	.+20     	; 0x1b78 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    1b64:	e2 e3       	ldi	r30, 0x32	; 50
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	10 82       	st	Z, r1
    1b6a:	06 c0       	rjmp	.+12     	; 0x1b78 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    1b6c:	e2 e3       	ldi	r30, 0x32	; 50
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	80 83       	st	Z, r24
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1b76:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b7a:	2d 96       	adiw	r28, 0x0d	; 13
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <DIO_u8GetPortValue+0x6>
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <DIO_u8GetPortValue+0x8>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <DIO_u8GetPortValue+0xa>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	8a 83       	std	Y+2, r24	; 0x02
    1b9c:	7c 83       	std	Y+4, r23	; 0x04
    1b9e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	08 f0       	brcs	.+2      	; 0x1bac <DIO_u8GetPortValue+0x20>
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <DIO_u8GetPortValue+0x9e>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	d9 f1       	breq	.+118    	; 0x1c2a <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	3e 83       	std	Y+6, r19	; 0x06
    1bbc:	2d 83       	std	Y+5, r18	; 0x05
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	e1 f0       	breq	.+56     	; 0x1c00 <DIO_u8GetPortValue+0x74>
    1bc8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bca:	3e 81       	ldd	r19, Y+6	; 0x06
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <DIO_u8GetPortValue+0x50>
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <DIO_u8GetPortValue+0x66>
    1bda:	28 c0       	rjmp	.+80     	; 0x1c2c <DIO_u8GetPortValue+0xa0>
    1bdc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bde:	3e 81       	ldd	r19, Y+6	; 0x06
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	a1 f0       	breq	.+40     	; 0x1c0e <DIO_u8GetPortValue+0x82>
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	91 05       	cpc	r25, r1
    1bee:	b1 f0       	breq	.+44     	; 0x1c1c <DIO_u8GetPortValue+0x90>
    1bf0:	1d c0       	rjmp	.+58     	; 0x1c2c <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1bf2:	e9 e3       	ldi	r30, 0x39	; 57
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfc:	80 83       	st	Z, r24
    1bfe:	16 c0       	rjmp	.+44     	; 0x1c2c <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1c00:	e6 e3       	ldi	r30, 0x36	; 54
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	eb 81       	ldd	r30, Y+3	; 0x03
    1c08:	fc 81       	ldd	r31, Y+4	; 0x04
    1c0a:	80 83       	st	Z, r24
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1c0e:	e3 e3       	ldi	r30, 0x33	; 51
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	eb 81       	ldd	r30, Y+3	; 0x03
    1c16:	fc 81       	ldd	r31, Y+4	; 0x04
    1c18:	80 83       	st	Z, r24
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1c1c:	e0 e3       	ldi	r30, 0x30	; 48
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	eb 81       	ldd	r30, Y+3	; 0x03
    1c24:	fc 81       	ldd	r31, Y+4	; 0x04
    1c26:	80 83       	st	Z, r24
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1c2a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2e:	26 96       	adiw	r28, 0x06	; 6
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    1c40:	8f 92       	push	r8
    1c42:	af 92       	push	r10
    1c44:	cf 92       	push	r12
    1c46:	ef 92       	push	r14
    1c48:	0f 93       	push	r16
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	2c 97       	sbiw	r28, 0x0c	; 12
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	6a 83       	std	Y+2, r22	; 0x02
    1c62:	4b 83       	std	Y+3, r20	; 0x03
    1c64:	2c 83       	std	Y+4, r18	; 0x04
    1c66:	0d 83       	std	Y+5, r16	; 0x05
    1c68:	ee 82       	std	Y+6, r14	; 0x06
    1c6a:	cf 82       	std	Y+7, r12	; 0x07
    1c6c:	a8 86       	std	Y+8, r10	; 0x08
    1c6e:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3b 87       	std	Y+11, r19	; 0x0b
    1c78:	2a 87       	std	Y+10, r18	; 0x0a
    1c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <DIO_u8SetValueToAllPins+0x46>
    1c84:	a8 c0       	rjmp	.+336    	; 0x1dd6 <DIO_u8SetValueToAllPins+0x196>
    1c86:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c88:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	2c f4       	brge	.+10     	; 0x1c9a <DIO_u8SetValueToAllPins+0x5a>
    1c90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c92:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	71 f0       	breq	.+28     	; 0x1cb4 <DIO_u8SetValueToAllPins+0x74>
    1c98:	50 c2       	rjmp	.+1184   	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
    1c9a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c9c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c9e:	22 30       	cpi	r18, 0x02	; 2
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <DIO_u8SetValueToAllPins+0x66>
    1ca4:	29 c1       	rjmp	.+594    	; 0x1ef8 <DIO_u8SetValueToAllPins+0x2b8>
    1ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ca8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1caa:	83 30       	cpi	r24, 0x03	; 3
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_u8SetValueToAllPins+0x72>
    1cb0:	b4 c1       	rjmp	.+872    	; 0x201a <DIO_u8SetValueToAllPins+0x3da>
    1cb2:	43 c2       	rjmp	.+1158   	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	41 f4       	brne	.+16     	; 0x1cca <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    1cba:	ab e3       	ldi	r26, 0x3B	; 59
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	eb e3       	ldi	r30, 0x3B	; 59
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 60       	ori	r24, 0x01	; 1
    1cc6:	8c 93       	st	X, r24
    1cc8:	07 c0       	rjmp	.+14     	; 0x1cd8 <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    1cca:	ab e3       	ldi	r26, 0x3B	; 59
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	eb e3       	ldi	r30, 0x3B	; 59
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	8e 7f       	andi	r24, 0xFE	; 254
    1cd6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	41 f4       	brne	.+16     	; 0x1cee <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    1cde:	ab e3       	ldi	r26, 0x3B	; 59
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	eb e3       	ldi	r30, 0x3B	; 59
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	82 60       	ori	r24, 0x02	; 2
    1cea:	8c 93       	st	X, r24
    1cec:	07 c0       	rjmp	.+14     	; 0x1cfc <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    1cee:	ab e3       	ldi	r26, 0x3B	; 59
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	eb e3       	ldi	r30, 0x3B	; 59
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	8d 7f       	andi	r24, 0xFD	; 253
    1cfa:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	41 f4       	brne	.+16     	; 0x1d12 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1d02:	ab e3       	ldi	r26, 0x3B	; 59
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	eb e3       	ldi	r30, 0x3B	; 59
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	84 60       	ori	r24, 0x04	; 4
    1d0e:	8c 93       	st	X, r24
    1d10:	07 c0       	rjmp	.+14     	; 0x1d20 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1d12:	ab e3       	ldi	r26, 0x3B	; 59
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	eb e3       	ldi	r30, 0x3B	; 59
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8b 7f       	andi	r24, 0xFB	; 251
    1d1e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	41 f4       	brne	.+16     	; 0x1d36 <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    1d26:	ab e3       	ldi	r26, 0x3B	; 59
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	eb e3       	ldi	r30, 0x3B	; 59
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 60       	ori	r24, 0x08	; 8
    1d32:	8c 93       	st	X, r24
    1d34:	07 c0       	rjmp	.+14     	; 0x1d44 <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    1d36:	ab e3       	ldi	r26, 0x3B	; 59
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	eb e3       	ldi	r30, 0x3B	; 59
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	87 7f       	andi	r24, 0xF7	; 247
    1d42:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1d44:	8e 81       	ldd	r24, Y+6	; 0x06
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	41 f4       	brne	.+16     	; 0x1d5a <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    1d4a:	ab e3       	ldi	r26, 0x3B	; 59
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	eb e3       	ldi	r30, 0x3B	; 59
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	80 61       	ori	r24, 0x10	; 16
    1d56:	8c 93       	st	X, r24
    1d58:	07 c0       	rjmp	.+14     	; 0x1d68 <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    1d5a:	ab e3       	ldi	r26, 0x3B	; 59
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	eb e3       	ldi	r30, 0x3B	; 59
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8f 7e       	andi	r24, 0xEF	; 239
    1d66:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1d68:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	41 f4       	brne	.+16     	; 0x1d7e <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1d6e:	ab e3       	ldi	r26, 0x3B	; 59
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	eb e3       	ldi	r30, 0x3B	; 59
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 62       	ori	r24, 0x20	; 32
    1d7a:	8c 93       	st	X, r24
    1d7c:	07 c0       	rjmp	.+14     	; 0x1d8c <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1d7e:	ab e3       	ldi	r26, 0x3B	; 59
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	eb e3       	ldi	r30, 0x3B	; 59
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8f 7d       	andi	r24, 0xDF	; 223
    1d8a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1d8c:	88 85       	ldd	r24, Y+8	; 0x08
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	41 f4       	brne	.+16     	; 0x1da2 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    1d92:	ab e3       	ldi	r26, 0x3B	; 59
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	eb e3       	ldi	r30, 0x3B	; 59
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 64       	ori	r24, 0x40	; 64
    1d9e:	8c 93       	st	X, r24
    1da0:	07 c0       	rjmp	.+14     	; 0x1db0 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    1da2:	ab e3       	ldi	r26, 0x3B	; 59
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	eb e3       	ldi	r30, 0x3B	; 59
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 7b       	andi	r24, 0xBF	; 191
    1dae:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1db0:	89 85       	ldd	r24, Y+9	; 0x09
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	41 f4       	brne	.+16     	; 0x1dc6 <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    1db6:	ab e3       	ldi	r26, 0x3B	; 59
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	eb e3       	ldi	r30, 0x3B	; 59
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 68       	ori	r24, 0x80	; 128
    1dc2:	8c 93       	st	X, r24
    1dc4:	ba c1       	rjmp	.+884    	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    1dc6:	ab e3       	ldi	r26, 0x3B	; 59
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	eb e3       	ldi	r30, 0x3B	; 59
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8f 77       	andi	r24, 0x7F	; 127
    1dd2:	8c 93       	st	X, r24
    1dd4:	b2 c1       	rjmp	.+868    	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	41 f4       	brne	.+16     	; 0x1dec <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    1ddc:	a8 e3       	ldi	r26, 0x38	; 56
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e8 e3       	ldi	r30, 0x38	; 56
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	81 60       	ori	r24, 0x01	; 1
    1de8:	8c 93       	st	X, r24
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    1dec:	a8 e3       	ldi	r26, 0x38	; 56
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e8 e3       	ldi	r30, 0x38	; 56
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8e 7f       	andi	r24, 0xFE	; 254
    1df8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	41 f4       	brne	.+16     	; 0x1e10 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1e00:	a8 e3       	ldi	r26, 0x38	; 56
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e8 e3       	ldi	r30, 0x38	; 56
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 60       	ori	r24, 0x02	; 2
    1e0c:	8c 93       	st	X, r24
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1e10:	a8 e3       	ldi	r26, 0x38	; 56
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e8 e3       	ldi	r30, 0x38	; 56
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8d 7f       	andi	r24, 0xFD	; 253
    1e1c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	41 f4       	brne	.+16     	; 0x1e34 <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    1e24:	a8 e3       	ldi	r26, 0x38	; 56
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e8 e3       	ldi	r30, 0x38	; 56
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	84 60       	ori	r24, 0x04	; 4
    1e30:	8c 93       	st	X, r24
    1e32:	07 c0       	rjmp	.+14     	; 0x1e42 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    1e34:	a8 e3       	ldi	r26, 0x38	; 56
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8b 7f       	andi	r24, 0xFB	; 251
    1e40:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	41 f4       	brne	.+16     	; 0x1e58 <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    1e48:	a8 e3       	ldi	r26, 0x38	; 56
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e8 e3       	ldi	r30, 0x38	; 56
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	88 60       	ori	r24, 0x08	; 8
    1e54:	8c 93       	st	X, r24
    1e56:	07 c0       	rjmp	.+14     	; 0x1e66 <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    1e58:	a8 e3       	ldi	r26, 0x38	; 56
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e8 e3       	ldi	r30, 0x38	; 56
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	87 7f       	andi	r24, 0xF7	; 247
    1e64:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1e66:	8e 81       	ldd	r24, Y+6	; 0x06
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	41 f4       	brne	.+16     	; 0x1e7c <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    1e6c:	a8 e3       	ldi	r26, 0x38	; 56
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e8 e3       	ldi	r30, 0x38	; 56
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	80 61       	ori	r24, 0x10	; 16
    1e78:	8c 93       	st	X, r24
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    1e7c:	a8 e3       	ldi	r26, 0x38	; 56
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e8 e3       	ldi	r30, 0x38	; 56
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	8f 7e       	andi	r24, 0xEF	; 239
    1e88:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1e8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	41 f4       	brne	.+16     	; 0x1ea0 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    1e90:	a8 e3       	ldi	r26, 0x38	; 56
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e8 e3       	ldi	r30, 0x38	; 56
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 62       	ori	r24, 0x20	; 32
    1e9c:	8c 93       	st	X, r24
    1e9e:	07 c0       	rjmp	.+14     	; 0x1eae <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    1ea0:	a8 e3       	ldi	r26, 0x38	; 56
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e8 e3       	ldi	r30, 0x38	; 56
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8f 7d       	andi	r24, 0xDF	; 223
    1eac:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1eae:	88 85       	ldd	r24, Y+8	; 0x08
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	41 f4       	brne	.+16     	; 0x1ec4 <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    1eb4:	a8 e3       	ldi	r26, 0x38	; 56
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e8 e3       	ldi	r30, 0x38	; 56
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	80 64       	ori	r24, 0x40	; 64
    1ec0:	8c 93       	st	X, r24
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    1ec4:	a8 e3       	ldi	r26, 0x38	; 56
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e8 e3       	ldi	r30, 0x38	; 56
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 7b       	andi	r24, 0xBF	; 191
    1ed0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	41 f4       	brne	.+16     	; 0x1ee8 <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    1ed8:	a8 e3       	ldi	r26, 0x38	; 56
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e8 e3       	ldi	r30, 0x38	; 56
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	80 68       	ori	r24, 0x80	; 128
    1ee4:	8c 93       	st	X, r24
    1ee6:	29 c1       	rjmp	.+594    	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    1ee8:	a8 e3       	ldi	r26, 0x38	; 56
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e8 e3       	ldi	r30, 0x38	; 56
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8f 77       	andi	r24, 0x7F	; 127
    1ef4:	8c 93       	st	X, r24
    1ef6:	21 c1       	rjmp	.+578    	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	41 f4       	brne	.+16     	; 0x1f0e <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    1efe:	a5 e3       	ldi	r26, 0x35	; 53
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e3       	ldi	r30, 0x35	; 53
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	81 60       	ori	r24, 0x01	; 1
    1f0a:	8c 93       	st	X, r24
    1f0c:	07 c0       	rjmp	.+14     	; 0x1f1c <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    1f0e:	a5 e3       	ldi	r26, 0x35	; 53
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e5 e3       	ldi	r30, 0x35	; 53
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	8e 7f       	andi	r24, 0xFE	; 254
    1f1a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	41 f4       	brne	.+16     	; 0x1f32 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    1f22:	a5 e3       	ldi	r26, 0x35	; 53
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e5 e3       	ldi	r30, 0x35	; 53
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	82 60       	ori	r24, 0x02	; 2
    1f2e:	8c 93       	st	X, r24
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    1f32:	a5 e3       	ldi	r26, 0x35	; 53
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e5 e3       	ldi	r30, 0x35	; 53
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	8d 7f       	andi	r24, 0xFD	; 253
    1f3e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	41 f4       	brne	.+16     	; 0x1f56 <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    1f46:	a5 e3       	ldi	r26, 0x35	; 53
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e5 e3       	ldi	r30, 0x35	; 53
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	84 60       	ori	r24, 0x04	; 4
    1f52:	8c 93       	st	X, r24
    1f54:	07 c0       	rjmp	.+14     	; 0x1f64 <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    1f56:	a5 e3       	ldi	r26, 0x35	; 53
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e5 e3       	ldi	r30, 0x35	; 53
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	8b 7f       	andi	r24, 0xFB	; 251
    1f62:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	41 f4       	brne	.+16     	; 0x1f7a <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    1f6a:	a5 e3       	ldi	r26, 0x35	; 53
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e5 e3       	ldi	r30, 0x35	; 53
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	88 60       	ori	r24, 0x08	; 8
    1f76:	8c 93       	st	X, r24
    1f78:	07 c0       	rjmp	.+14     	; 0x1f88 <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    1f7a:	a5 e3       	ldi	r26, 0x35	; 53
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e5 e3       	ldi	r30, 0x35	; 53
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	87 7f       	andi	r24, 0xF7	; 247
    1f86:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1f88:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	41 f4       	brne	.+16     	; 0x1f9e <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    1f8e:	a5 e3       	ldi	r26, 0x35	; 53
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e5 e3       	ldi	r30, 0x35	; 53
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	80 61       	ori	r24, 0x10	; 16
    1f9a:	8c 93       	st	X, r24
    1f9c:	07 c0       	rjmp	.+14     	; 0x1fac <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    1f9e:	a5 e3       	ldi	r26, 0x35	; 53
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e5 e3       	ldi	r30, 0x35	; 53
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8f 7e       	andi	r24, 0xEF	; 239
    1faa:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1fac:	8f 81       	ldd	r24, Y+7	; 0x07
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	41 f4       	brne	.+16     	; 0x1fc2 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    1fb2:	a5 e3       	ldi	r26, 0x35	; 53
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e5 e3       	ldi	r30, 0x35	; 53
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 62       	ori	r24, 0x20	; 32
    1fbe:	8c 93       	st	X, r24
    1fc0:	07 c0       	rjmp	.+14     	; 0x1fd0 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    1fc2:	a5 e3       	ldi	r26, 0x35	; 53
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e5 e3       	ldi	r30, 0x35	; 53
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8f 7d       	andi	r24, 0xDF	; 223
    1fce:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1fd0:	88 85       	ldd	r24, Y+8	; 0x08
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	41 f4       	brne	.+16     	; 0x1fe6 <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    1fd6:	a5 e3       	ldi	r26, 0x35	; 53
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e5 e3       	ldi	r30, 0x35	; 53
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 64       	ori	r24, 0x40	; 64
    1fe2:	8c 93       	st	X, r24
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    1fe6:	a5 e3       	ldi	r26, 0x35	; 53
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e5 e3       	ldi	r30, 0x35	; 53
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	8f 7b       	andi	r24, 0xBF	; 191
    1ff2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1ff4:	89 85       	ldd	r24, Y+9	; 0x09
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	41 f4       	brne	.+16     	; 0x200a <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    1ffa:	a5 e3       	ldi	r26, 0x35	; 53
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e5 e3       	ldi	r30, 0x35	; 53
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	80 68       	ori	r24, 0x80	; 128
    2006:	8c 93       	st	X, r24
    2008:	98 c0       	rjmp	.+304    	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    200a:	a5 e3       	ldi	r26, 0x35	; 53
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e5 e3       	ldi	r30, 0x35	; 53
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8f 77       	andi	r24, 0x7F	; 127
    2016:	8c 93       	st	X, r24
    2018:	90 c0       	rjmp	.+288    	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	81 30       	cpi	r24, 0x01	; 1
    201e:	41 f4       	brne	.+16     	; 0x2030 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2020:	a2 e3       	ldi	r26, 0x32	; 50
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e2 e3       	ldi	r30, 0x32	; 50
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	81 60       	ori	r24, 0x01	; 1
    202c:	8c 93       	st	X, r24
    202e:	07 c0       	rjmp	.+14     	; 0x203e <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2030:	a2 e3       	ldi	r26, 0x32	; 50
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e2 e3       	ldi	r30, 0x32	; 50
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8e 7f       	andi	r24, 0xFE	; 254
    203c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	41 f4       	brne	.+16     	; 0x2054 <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    2044:	a2 e3       	ldi	r26, 0x32	; 50
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e2 e3       	ldi	r30, 0x32	; 50
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	82 60       	ori	r24, 0x02	; 2
    2050:	8c 93       	st	X, r24
    2052:	07 c0       	rjmp	.+14     	; 0x2062 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    2054:	a2 e3       	ldi	r26, 0x32	; 50
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e2 e3       	ldi	r30, 0x32	; 50
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8d 7f       	andi	r24, 0xFD	; 253
    2060:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2062:	8c 81       	ldd	r24, Y+4	; 0x04
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	41 f4       	brne	.+16     	; 0x2078 <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    2068:	a2 e3       	ldi	r26, 0x32	; 50
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e2 e3       	ldi	r30, 0x32	; 50
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	84 60       	ori	r24, 0x04	; 4
    2074:	8c 93       	st	X, r24
    2076:	07 c0       	rjmp	.+14     	; 0x2086 <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    2078:	a2 e3       	ldi	r26, 0x32	; 50
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e2 e3       	ldi	r30, 0x32	; 50
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	8b 7f       	andi	r24, 0xFB	; 251
    2084:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	41 f4       	brne	.+16     	; 0x209c <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    208c:	a2 e3       	ldi	r26, 0x32	; 50
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e2 e3       	ldi	r30, 0x32	; 50
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	88 60       	ori	r24, 0x08	; 8
    2098:	8c 93       	st	X, r24
    209a:	07 c0       	rjmp	.+14     	; 0x20aa <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    209c:	a2 e3       	ldi	r26, 0x32	; 50
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e2 e3       	ldi	r30, 0x32	; 50
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	87 7f       	andi	r24, 0xF7	; 247
    20a8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    20aa:	8e 81       	ldd	r24, Y+6	; 0x06
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    20b0:	a2 e3       	ldi	r26, 0x32	; 50
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e2 e3       	ldi	r30, 0x32	; 50
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 61       	ori	r24, 0x10	; 16
    20bc:	8c 93       	st	X, r24
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    20c0:	a2 e3       	ldi	r26, 0x32	; 50
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e2 e3       	ldi	r30, 0x32	; 50
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8f 7e       	andi	r24, 0xEF	; 239
    20cc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    20ce:	8f 81       	ldd	r24, Y+7	; 0x07
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	41 f4       	brne	.+16     	; 0x20e4 <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    20d4:	a2 e3       	ldi	r26, 0x32	; 50
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e2 e3       	ldi	r30, 0x32	; 50
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	80 62       	ori	r24, 0x20	; 32
    20e0:	8c 93       	st	X, r24
    20e2:	07 c0       	rjmp	.+14     	; 0x20f2 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    20e4:	a2 e3       	ldi	r26, 0x32	; 50
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e2 e3       	ldi	r30, 0x32	; 50
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8f 7d       	andi	r24, 0xDF	; 223
    20f0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    20f2:	88 85       	ldd	r24, Y+8	; 0x08
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	41 f4       	brne	.+16     	; 0x2108 <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    20f8:	a2 e3       	ldi	r26, 0x32	; 50
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e2 e3       	ldi	r30, 0x32	; 50
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	80 64       	ori	r24, 0x40	; 64
    2104:	8c 93       	st	X, r24
    2106:	07 c0       	rjmp	.+14     	; 0x2116 <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2108:	a2 e3       	ldi	r26, 0x32	; 50
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e2 e3       	ldi	r30, 0x32	; 50
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8f 7b       	andi	r24, 0xBF	; 191
    2114:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	81 30       	cpi	r24, 0x01	; 1
    211a:	41 f4       	brne	.+16     	; 0x212c <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    211c:	a2 e3       	ldi	r26, 0x32	; 50
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e2 e3       	ldi	r30, 0x32	; 50
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	8c 93       	st	X, r24
    212a:	07 c0       	rjmp	.+14     	; 0x213a <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    212c:	a2 e3       	ldi	r26, 0x32	; 50
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e2 e3       	ldi	r30, 0x32	; 50
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8f 77       	andi	r24, 0x7F	; 127
    2138:	8c 93       	st	X, r24
		}
		break;
	}
}
    213a:	2c 96       	adiw	r28, 0x0c	; 12
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	0f 91       	pop	r16
    214c:	ef 90       	pop	r14
    214e:	cf 90       	pop	r12
    2150:	af 90       	pop	r10
    2152:	8f 90       	pop	r8
    2154:	08 95       	ret

00002156 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	e9 97       	sbiw	r28, 0x39	; 57
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    216c:	83 e0       	ldi	r24, 0x03	; 3
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	64 e0       	ldi	r22, 0x04	; 4
    2172:	70 e0       	ldi	r23, 0x00	; 0
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 e8       	ldi	r26, 0x80	; 128
    2182:	bf e3       	ldi	r27, 0x3F	; 63
    2184:	8d ab       	std	Y+53, r24	; 0x35
    2186:	9e ab       	std	Y+54, r25	; 0x36
    2188:	af ab       	std	Y+55, r26	; 0x37
    218a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	6d a9       	ldd	r22, Y+53	; 0x35
    218e:	7e a9       	ldd	r23, Y+54	; 0x36
    2190:	8f a9       	ldd	r24, Y+55	; 0x37
    2192:	98 ad       	ldd	r25, Y+56	; 0x38
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a e7       	ldi	r20, 0x7A	; 122
    219a:	55 e4       	ldi	r21, 0x45	; 69
    219c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	89 ab       	std	Y+49, r24	; 0x31
    21a6:	9a ab       	std	Y+50, r25	; 0x32
    21a8:	ab ab       	std	Y+51, r26	; 0x33
    21aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ac:	69 a9       	ldd	r22, Y+49	; 0x31
    21ae:	7a a9       	ldd	r23, Y+50	; 0x32
    21b0:	8b a9       	ldd	r24, Y+51	; 0x33
    21b2:	9c a9       	ldd	r25, Y+52	; 0x34
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <LCD_sendCommand+0x78>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	98 ab       	std	Y+48, r25	; 0x30
    21ca:	8f a7       	std	Y+47, r24	; 0x2f
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    21ce:	69 a9       	ldd	r22, Y+49	; 0x31
    21d0:	7a a9       	ldd	r23, Y+50	; 0x32
    21d2:	8b a9       	ldd	r24, Y+51	; 0x33
    21d4:	9c a9       	ldd	r25, Y+52	; 0x34
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	6d a9       	ldd	r22, Y+53	; 0x35
    21e8:	7e a9       	ldd	r23, Y+54	; 0x36
    21ea:	8f a9       	ldd	r24, Y+55	; 0x37
    21ec:	98 ad       	ldd	r25, Y+56	; 0x38
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	98 ab       	std	Y+48, r25	; 0x30
    220c:	8f a7       	std	Y+47, r24	; 0x2f
    220e:	0f c0       	rjmp	.+30     	; 0x222e <LCD_sendCommand+0xd8>
    2210:	80 e9       	ldi	r24, 0x90	; 144
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	9e a7       	std	Y+46, r25	; 0x2e
    2216:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2218:	8d a5       	ldd	r24, Y+45	; 0x2d
    221a:	9e a5       	ldd	r25, Y+46	; 0x2e
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <LCD_sendCommand+0xc6>
    2220:	9e a7       	std	Y+46, r25	; 0x2e
    2222:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8f a5       	ldd	r24, Y+47	; 0x2f
    2226:	98 a9       	ldd	r25, Y+48	; 0x30
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	98 ab       	std	Y+48, r25	; 0x30
    222c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2230:	98 a9       	ldd	r25, Y+48	; 0x30
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <LCD_sendCommand+0xba>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	69 a9       	ldd	r22, Y+49	; 0x31
    223a:	7a a9       	ldd	r23, Y+50	; 0x32
    223c:	8b a9       	ldd	r24, Y+51	; 0x33
    223e:	9c a9       	ldd	r25, Y+52	; 0x34
    2240:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	98 ab       	std	Y+48, r25	; 0x30
    224a:	8f a7       	std	Y+47, r24	; 0x2f
    224c:	8f a5       	ldd	r24, Y+47	; 0x2f
    224e:	98 a9       	ldd	r25, Y+48	; 0x30
    2250:	9c a7       	std	Y+44, r25	; 0x2c
    2252:	8b a7       	std	Y+43, r24	; 0x2b
    2254:	8b a5       	ldd	r24, Y+43	; 0x2b
    2256:	9c a5       	ldd	r25, Y+44	; 0x2c
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_sendCommand+0x102>
    225c:	9c a7       	std	Y+44, r25	; 0x2c
    225e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	65 e0       	ldi	r22, 0x05	; 5
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e8       	ldi	r26, 0x80	; 128
    2276:	bf e3       	ldi	r27, 0x3F	; 63
    2278:	8f a3       	std	Y+39, r24	; 0x27
    227a:	98 a7       	std	Y+40, r25	; 0x28
    227c:	a9 a7       	std	Y+41, r26	; 0x29
    227e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6f a1       	ldd	r22, Y+39	; 0x27
    2282:	78 a5       	ldd	r23, Y+40	; 0x28
    2284:	89 a5       	ldd	r24, Y+41	; 0x29
    2286:	9a a5       	ldd	r25, Y+42	; 0x2a
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a e7       	ldi	r20, 0x7A	; 122
    228e:	55 e4       	ldi	r21, 0x45	; 69
    2290:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8b a3       	std	Y+35, r24	; 0x23
    229a:	9c a3       	std	Y+36, r25	; 0x24
    229c:	ad a3       	std	Y+37, r26	; 0x25
    229e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a0:	6b a1       	ldd	r22, Y+35	; 0x23
    22a2:	7c a1       	ldd	r23, Y+36	; 0x24
    22a4:	8d a1       	ldd	r24, Y+37	; 0x25
    22a6:	9e a1       	ldd	r25, Y+38	; 0x26
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <LCD_sendCommand+0x16c>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    22c2:	6b a1       	ldd	r22, Y+35	; 0x23
    22c4:	7c a1       	ldd	r23, Y+36	; 0x24
    22c6:	8d a1       	ldd	r24, Y+37	; 0x25
    22c8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6f a1       	ldd	r22, Y+39	; 0x27
    22dc:	78 a5       	ldd	r23, Y+40	; 0x28
    22de:	89 a5       	ldd	r24, Y+41	; 0x29
    22e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9a a3       	std	Y+34, r25	; 0x22
    2300:	89 a3       	std	Y+33, r24	; 0x21
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_sendCommand+0x1cc>
    2304:	80 e9       	ldi	r24, 0x90	; 144
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	98 a3       	std	Y+32, r25	; 0x20
    230a:	8f 8f       	std	Y+31, r24	; 0x1f
    230c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    230e:	98 a1       	ldd	r25, Y+32	; 0x20
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_sendCommand+0x1ba>
    2314:	98 a3       	std	Y+32, r25	; 0x20
    2316:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	89 a1       	ldd	r24, Y+33	; 0x21
    231a:	9a a1       	ldd	r25, Y+34	; 0x22
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9a a3       	std	Y+34, r25	; 0x22
    2320:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	89 a1       	ldd	r24, Y+33	; 0x21
    2324:	9a a1       	ldd	r25, Y+34	; 0x22
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <LCD_sendCommand+0x1ae>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6b a1       	ldd	r22, Y+35	; 0x23
    232e:	7c a1       	ldd	r23, Y+36	; 0x24
    2330:	8d a1       	ldd	r24, Y+37	; 0x25
    2332:	9e a1       	ldd	r25, Y+38	; 0x26
    2334:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9a a3       	std	Y+34, r25	; 0x22
    233e:	89 a3       	std	Y+33, r24	; 0x21
    2340:	89 a1       	ldd	r24, Y+33	; 0x21
    2342:	9a a1       	ldd	r25, Y+34	; 0x22
    2344:	9e 8f       	std	Y+30, r25	; 0x1e
    2346:	8d 8f       	std	Y+29, r24	; 0x1d
    2348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_sendCommand+0x1f6>
    2350:	9e 8f       	std	Y+30, r25	; 0x1e
    2352:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2354:	89 ad       	ldd	r24, Y+57	; 0x39
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	b9 01       	movw	r22, r18
    2360:	0e 94 50 08 	call	0x10a0	; 0x10a0 <LCD_setPortValue>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a0 e8       	ldi	r26, 0x80	; 128
    236a:	bf e3       	ldi	r27, 0x3F	; 63
    236c:	89 8f       	std	Y+25, r24	; 0x19
    236e:	9a 8f       	std	Y+26, r25	; 0x1a
    2370:	ab 8f       	std	Y+27, r26	; 0x1b
    2372:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	69 8d       	ldd	r22, Y+25	; 0x19
    2376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    237a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a e7       	ldi	r20, 0x7A	; 122
    2382:	55 e4       	ldi	r21, 0x45	; 69
    2384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8d 8b       	std	Y+21, r24	; 0x15
    238e:	9e 8b       	std	Y+22, r25	; 0x16
    2390:	af 8b       	std	Y+23, r26	; 0x17
    2392:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2394:	6d 89       	ldd	r22, Y+21	; 0x15
    2396:	7e 89       	ldd	r23, Y+22	; 0x16
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	98 8d       	ldd	r25, Y+24	; 0x18
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <LCD_sendCommand+0x260>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9c 8b       	std	Y+20, r25	; 0x14
    23b2:	8b 8b       	std	Y+19, r24	; 0x13
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	69 8d       	ldd	r22, Y+25	; 0x19
    23d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9c 8b       	std	Y+20, r25	; 0x14
    23f4:	8b 8b       	std	Y+19, r24	; 0x13
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <LCD_sendCommand+0x2c0>
    23f8:	80 e9       	ldi	r24, 0x90	; 144
    23fa:	91 e0       	ldi	r25, 0x01	; 1
    23fc:	9a 8b       	std	Y+18, r25	; 0x12
    23fe:	89 8b       	std	Y+17, r24	; 0x11
    2400:	89 89       	ldd	r24, Y+17	; 0x11
    2402:	9a 89       	ldd	r25, Y+18	; 0x12
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_sendCommand+0x2ae>
    2408:	9a 8b       	std	Y+18, r25	; 0x12
    240a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9c 8b       	std	Y+20, r25	; 0x14
    2414:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8b 89       	ldd	r24, Y+19	; 0x13
    2418:	9c 89       	ldd	r25, Y+20	; 0x14
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <LCD_sendCommand+0x2a2>
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	6d 89       	ldd	r22, Y+21	; 0x15
    2422:	7e 89       	ldd	r23, Y+22	; 0x16
    2424:	8f 89       	ldd	r24, Y+23	; 0x17
    2426:	98 8d       	ldd	r25, Y+24	; 0x18
    2428:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9c 8b       	std	Y+20, r25	; 0x14
    2432:	8b 8b       	std	Y+19, r24	; 0x13
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	98 8b       	std	Y+16, r25	; 0x10
    243a:	8f 87       	std	Y+15, r24	; 0x0f
    243c:	8f 85       	ldd	r24, Y+15	; 0x0f
    243e:	98 89       	ldd	r25, Y+16	; 0x10
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_sendCommand+0x2ea>
    2444:	98 8b       	std	Y+16, r25	; 0x10
    2446:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	65 e0       	ldi	r22, 0x05	; 5
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	a0 e8       	ldi	r26, 0x80	; 128
    245e:	bf e3       	ldi	r27, 0x3F	; 63
    2460:	8b 87       	std	Y+11, r24	; 0x0b
    2462:	9c 87       	std	Y+12, r25	; 0x0c
    2464:	ad 87       	std	Y+13, r26	; 0x0d
    2466:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2468:	6b 85       	ldd	r22, Y+11	; 0x0b
    246a:	7c 85       	ldd	r23, Y+12	; 0x0c
    246c:	8d 85       	ldd	r24, Y+13	; 0x0d
    246e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a e7       	ldi	r20, 0x7A	; 122
    2476:	55 e4       	ldi	r21, 0x45	; 69
    2478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	8f 83       	std	Y+7, r24	; 0x07
    2482:	98 87       	std	Y+8, r25	; 0x08
    2484:	a9 87       	std	Y+9, r26	; 0x09
    2486:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2488:	6f 81       	ldd	r22, Y+7	; 0x07
    248a:	78 85       	ldd	r23, Y+8	; 0x08
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	5f e3       	ldi	r21, 0x3F	; 63
    2498:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    249c:	88 23       	and	r24, r24
    249e:	2c f4       	brge	.+10     	; 0x24aa <LCD_sendCommand+0x354>
		__ticks = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	3f c0       	rjmp	.+126    	; 0x2528 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    24aa:	6f 81       	ldd	r22, Y+7	; 0x07
    24ac:	78 85       	ldd	r23, Y+8	; 0x08
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	3f ef       	ldi	r19, 0xFF	; 255
    24b6:	4f e7       	ldi	r20, 0x7F	; 127
    24b8:	57 e4       	ldi	r21, 0x47	; 71
    24ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	4c f5       	brge	.+82     	; 0x2514 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e2       	ldi	r20, 0x20	; 32
    24d0:	51 e4       	ldi	r21, 0x41	; 65
    24d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	bc 01       	movw	r22, r24
    24dc:	cd 01       	movw	r24, r26
    24de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <LCD_sendCommand+0x3b4>
    24ec:	80 e9       	ldi	r24, 0x90	; 144
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	9c 83       	std	Y+4, r25	; 0x04
    24f2:	8b 83       	std	Y+3, r24	; 0x03
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_sendCommand+0x3a2>
    24fc:	9c 83       	std	Y+4, r25	; 0x04
    24fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	69 f7       	brne	.-38     	; 0x24ec <LCD_sendCommand+0x396>
    2512:	14 c0       	rjmp	.+40     	; 0x253c <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2514:	6f 81       	ldd	r22, Y+7	; 0x07
    2516:	78 85       	ldd	r23, Y+8	; 0x08
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9e 83       	std	Y+6, r25	; 0x06
    2526:	8d 83       	std	Y+5, r24	; 0x05
    2528:	8d 81       	ldd	r24, Y+5	; 0x05
    252a:	9e 81       	ldd	r25, Y+6	; 0x06
    252c:	9a 83       	std	Y+2, r25	; 0x02
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	9a 81       	ldd	r25, Y+2	; 0x02
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_sendCommand+0x3de>
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    253c:	e9 96       	adiw	r28, 0x39	; 57
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	e9 97       	sbiw	r28, 0x39	; 57
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	64 e0       	ldi	r22, 0x04	; 4
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 e8       	ldi	r26, 0x80	; 128
    257a:	bf e3       	ldi	r27, 0x3F	; 63
    257c:	8d ab       	std	Y+53, r24	; 0x35
    257e:	9e ab       	std	Y+54, r25	; 0x36
    2580:	af ab       	std	Y+55, r26	; 0x37
    2582:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2584:	6d a9       	ldd	r22, Y+53	; 0x35
    2586:	7e a9       	ldd	r23, Y+54	; 0x36
    2588:	8f a9       	ldd	r24, Y+55	; 0x37
    258a:	98 ad       	ldd	r25, Y+56	; 0x38
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	4a e7       	ldi	r20, 0x7A	; 122
    2592:	55 e4       	ldi	r21, 0x45	; 69
    2594:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	89 ab       	std	Y+49, r24	; 0x31
    259e:	9a ab       	std	Y+50, r25	; 0x32
    25a0:	ab ab       	std	Y+51, r26	; 0x33
    25a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25a4:	69 a9       	ldd	r22, Y+49	; 0x31
    25a6:	7a a9       	ldd	r23, Y+50	; 0x32
    25a8:	8b a9       	ldd	r24, Y+51	; 0x33
    25aa:	9c a9       	ldd	r25, Y+52	; 0x34
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e8       	ldi	r20, 0x80	; 128
    25b2:	5f e3       	ldi	r21, 0x3F	; 63
    25b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25b8:	88 23       	and	r24, r24
    25ba:	2c f4       	brge	.+10     	; 0x25c6 <LCD_displayCharacter+0x78>
		__ticks = 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	98 ab       	std	Y+48, r25	; 0x30
    25c2:	8f a7       	std	Y+47, r24	; 0x2f
    25c4:	3f c0       	rjmp	.+126    	; 0x2644 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    25c6:	69 a9       	ldd	r22, Y+49	; 0x31
    25c8:	7a a9       	ldd	r23, Y+50	; 0x32
    25ca:	8b a9       	ldd	r24, Y+51	; 0x33
    25cc:	9c a9       	ldd	r25, Y+52	; 0x34
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	3f ef       	ldi	r19, 0xFF	; 255
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	57 e4       	ldi	r21, 0x47	; 71
    25d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	4c f5       	brge	.+82     	; 0x2630 <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25de:	6d a9       	ldd	r22, Y+53	; 0x35
    25e0:	7e a9       	ldd	r23, Y+54	; 0x36
    25e2:	8f a9       	ldd	r24, Y+55	; 0x37
    25e4:	98 ad       	ldd	r25, Y+56	; 0x38
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e2       	ldi	r20, 0x20	; 32
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	98 ab       	std	Y+48, r25	; 0x30
    2604:	8f a7       	std	Y+47, r24	; 0x2f
    2606:	0f c0       	rjmp	.+30     	; 0x2626 <LCD_displayCharacter+0xd8>
    2608:	80 e9       	ldi	r24, 0x90	; 144
    260a:	91 e0       	ldi	r25, 0x01	; 1
    260c:	9e a7       	std	Y+46, r25	; 0x2e
    260e:	8d a7       	std	Y+45, r24	; 0x2d
    2610:	8d a5       	ldd	r24, Y+45	; 0x2d
    2612:	9e a5       	ldd	r25, Y+46	; 0x2e
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <LCD_displayCharacter+0xc6>
    2618:	9e a7       	std	Y+46, r25	; 0x2e
    261a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261c:	8f a5       	ldd	r24, Y+47	; 0x2f
    261e:	98 a9       	ldd	r25, Y+48	; 0x30
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	98 ab       	std	Y+48, r25	; 0x30
    2624:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2626:	8f a5       	ldd	r24, Y+47	; 0x2f
    2628:	98 a9       	ldd	r25, Y+48	; 0x30
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	69 f7       	brne	.-38     	; 0x2608 <LCD_displayCharacter+0xba>
    262e:	14 c0       	rjmp	.+40     	; 0x2658 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2630:	69 a9       	ldd	r22, Y+49	; 0x31
    2632:	7a a9       	ldd	r23, Y+50	; 0x32
    2634:	8b a9       	ldd	r24, Y+51	; 0x33
    2636:	9c a9       	ldd	r25, Y+52	; 0x34
    2638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	98 ab       	std	Y+48, r25	; 0x30
    2642:	8f a7       	std	Y+47, r24	; 0x2f
    2644:	8f a5       	ldd	r24, Y+47	; 0x2f
    2646:	98 a9       	ldd	r25, Y+48	; 0x30
    2648:	9c a7       	std	Y+44, r25	; 0x2c
    264a:	8b a7       	std	Y+43, r24	; 0x2b
    264c:	8b a5       	ldd	r24, Y+43	; 0x2b
    264e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <LCD_displayCharacter+0x102>
    2654:	9c a7       	std	Y+44, r25	; 0x2c
    2656:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2658:	83 e0       	ldi	r24, 0x03	; 3
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	65 e0       	ldi	r22, 0x05	; 5
    265e:	70 e0       	ldi	r23, 0x00	; 0
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a0 e8       	ldi	r26, 0x80	; 128
    266e:	bf e3       	ldi	r27, 0x3F	; 63
    2670:	8f a3       	std	Y+39, r24	; 0x27
    2672:	98 a7       	std	Y+40, r25	; 0x28
    2674:	a9 a7       	std	Y+41, r26	; 0x29
    2676:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2678:	6f a1       	ldd	r22, Y+39	; 0x27
    267a:	78 a5       	ldd	r23, Y+40	; 0x28
    267c:	89 a5       	ldd	r24, Y+41	; 0x29
    267e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a e7       	ldi	r20, 0x7A	; 122
    2686:	55 e4       	ldi	r21, 0x45	; 69
    2688:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	8b a3       	std	Y+35, r24	; 0x23
    2692:	9c a3       	std	Y+36, r25	; 0x24
    2694:	ad a3       	std	Y+37, r26	; 0x25
    2696:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2698:	6b a1       	ldd	r22, Y+35	; 0x23
    269a:	7c a1       	ldd	r23, Y+36	; 0x24
    269c:	8d a1       	ldd	r24, Y+37	; 0x25
    269e:	9e a1       	ldd	r25, Y+38	; 0x26
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e8       	ldi	r20, 0x80	; 128
    26a6:	5f e3       	ldi	r21, 0x3F	; 63
    26a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26ac:	88 23       	and	r24, r24
    26ae:	2c f4       	brge	.+10     	; 0x26ba <LCD_displayCharacter+0x16c>
		__ticks = 1;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9a a3       	std	Y+34, r25	; 0x22
    26b6:	89 a3       	std	Y+33, r24	; 0x21
    26b8:	3f c0       	rjmp	.+126    	; 0x2738 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    26ba:	6b a1       	ldd	r22, Y+35	; 0x23
    26bc:	7c a1       	ldd	r23, Y+36	; 0x24
    26be:	8d a1       	ldd	r24, Y+37	; 0x25
    26c0:	9e a1       	ldd	r25, Y+38	; 0x26
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	3f ef       	ldi	r19, 0xFF	; 255
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	57 e4       	ldi	r21, 0x47	; 71
    26ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	4c f5       	brge	.+82     	; 0x2724 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d2:	6f a1       	ldd	r22, Y+39	; 0x27
    26d4:	78 a5       	ldd	r23, Y+40	; 0x28
    26d6:	89 a5       	ldd	r24, Y+41	; 0x29
    26d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9a a3       	std	Y+34, r25	; 0x22
    26f8:	89 a3       	std	Y+33, r24	; 0x21
    26fa:	0f c0       	rjmp	.+30     	; 0x271a <LCD_displayCharacter+0x1cc>
    26fc:	80 e9       	ldi	r24, 0x90	; 144
    26fe:	91 e0       	ldi	r25, 0x01	; 1
    2700:	98 a3       	std	Y+32, r25	; 0x20
    2702:	8f 8f       	std	Y+31, r24	; 0x1f
    2704:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2706:	98 a1       	ldd	r25, Y+32	; 0x20
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_displayCharacter+0x1ba>
    270c:	98 a3       	std	Y+32, r25	; 0x20
    270e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2710:	89 a1       	ldd	r24, Y+33	; 0x21
    2712:	9a a1       	ldd	r25, Y+34	; 0x22
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	9a a3       	std	Y+34, r25	; 0x22
    2718:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271a:	89 a1       	ldd	r24, Y+33	; 0x21
    271c:	9a a1       	ldd	r25, Y+34	; 0x22
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	69 f7       	brne	.-38     	; 0x26fc <LCD_displayCharacter+0x1ae>
    2722:	14 c0       	rjmp	.+40     	; 0x274c <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2724:	6b a1       	ldd	r22, Y+35	; 0x23
    2726:	7c a1       	ldd	r23, Y+36	; 0x24
    2728:	8d a1       	ldd	r24, Y+37	; 0x25
    272a:	9e a1       	ldd	r25, Y+38	; 0x26
    272c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9a a3       	std	Y+34, r25	; 0x22
    2736:	89 a3       	std	Y+33, r24	; 0x21
    2738:	89 a1       	ldd	r24, Y+33	; 0x21
    273a:	9a a1       	ldd	r25, Y+34	; 0x22
    273c:	9e 8f       	std	Y+30, r25	; 0x1e
    273e:	8d 8f       	std	Y+29, r24	; 0x1d
    2740:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2742:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <LCD_displayCharacter+0x1f6>
    2748:	9e 8f       	std	Y+30, r25	; 0x1e
    274a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    274c:	89 ad       	ldd	r24, Y+57	; 0x39
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	b9 01       	movw	r22, r18
    2758:	0e 94 50 08 	call	0x10a0	; 0x10a0 <LCD_setPortValue>
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 e8       	ldi	r26, 0x80	; 128
    2762:	bf e3       	ldi	r27, 0x3F	; 63
    2764:	89 8f       	std	Y+25, r24	; 0x19
    2766:	9a 8f       	std	Y+26, r25	; 0x1a
    2768:	ab 8f       	std	Y+27, r26	; 0x1b
    276a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	69 8d       	ldd	r22, Y+25	; 0x19
    276e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2772:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a e7       	ldi	r20, 0x7A	; 122
    277a:	55 e4       	ldi	r21, 0x45	; 69
    277c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8d 8b       	std	Y+21, r24	; 0x15
    2786:	9e 8b       	std	Y+22, r25	; 0x16
    2788:	af 8b       	std	Y+23, r26	; 0x17
    278a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    278c:	6d 89       	ldd	r22, Y+21	; 0x15
    278e:	7e 89       	ldd	r23, Y+22	; 0x16
    2790:	8f 89       	ldd	r24, Y+23	; 0x17
    2792:	98 8d       	ldd	r25, Y+24	; 0x18
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_displayCharacter+0x260>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9c 8b       	std	Y+20, r25	; 0x14
    27aa:	8b 8b       	std	Y+19, r24	; 0x13
    27ac:	3f c0       	rjmp	.+126    	; 0x282c <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    27ae:	6d 89       	ldd	r22, Y+21	; 0x15
    27b0:	7e 89       	ldd	r23, Y+22	; 0x16
    27b2:	8f 89       	ldd	r24, Y+23	; 0x17
    27b4:	98 8d       	ldd	r25, Y+24	; 0x18
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	4c f5       	brge	.+82     	; 0x2818 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	69 8d       	ldd	r22, Y+25	; 0x19
    27c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9c 8b       	std	Y+20, r25	; 0x14
    27ec:	8b 8b       	std	Y+19, r24	; 0x13
    27ee:	0f c0       	rjmp	.+30     	; 0x280e <LCD_displayCharacter+0x2c0>
    27f0:	80 e9       	ldi	r24, 0x90	; 144
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	9a 8b       	std	Y+18, r25	; 0x12
    27f6:	89 8b       	std	Y+17, r24	; 0x11
    27f8:	89 89       	ldd	r24, Y+17	; 0x11
    27fa:	9a 89       	ldd	r25, Y+18	; 0x12
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <LCD_displayCharacter+0x2ae>
    2800:	9a 8b       	std	Y+18, r25	; 0x12
    2802:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	8b 89       	ldd	r24, Y+19	; 0x13
    2806:	9c 89       	ldd	r25, Y+20	; 0x14
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	9c 8b       	std	Y+20, r25	; 0x14
    280c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	9c 89       	ldd	r25, Y+20	; 0x14
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	69 f7       	brne	.-38     	; 0x27f0 <LCD_displayCharacter+0x2a2>
    2816:	14 c0       	rjmp	.+40     	; 0x2840 <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2818:	6d 89       	ldd	r22, Y+21	; 0x15
    281a:	7e 89       	ldd	r23, Y+22	; 0x16
    281c:	8f 89       	ldd	r24, Y+23	; 0x17
    281e:	98 8d       	ldd	r25, Y+24	; 0x18
    2820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9c 8b       	std	Y+20, r25	; 0x14
    282a:	8b 8b       	std	Y+19, r24	; 0x13
    282c:	8b 89       	ldd	r24, Y+19	; 0x13
    282e:	9c 89       	ldd	r25, Y+20	; 0x14
    2830:	98 8b       	std	Y+16, r25	; 0x10
    2832:	8f 87       	std	Y+15, r24	; 0x0f
    2834:	8f 85       	ldd	r24, Y+15	; 0x0f
    2836:	98 89       	ldd	r25, Y+16	; 0x10
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_displayCharacter+0x2ea>
    283c:	98 8b       	std	Y+16, r25	; 0x10
    283e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	65 e0       	ldi	r22, 0x05	; 5
    2846:	70 e0       	ldi	r23, 0x00	; 0
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	a0 e8       	ldi	r26, 0x80	; 128
    2856:	bf e3       	ldi	r27, 0x3F	; 63
    2858:	8b 87       	std	Y+11, r24	; 0x0b
    285a:	9c 87       	std	Y+12, r25	; 0x0c
    285c:	ad 87       	std	Y+13, r26	; 0x0d
    285e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2860:	6b 85       	ldd	r22, Y+11	; 0x0b
    2862:	7c 85       	ldd	r23, Y+12	; 0x0c
    2864:	8d 85       	ldd	r24, Y+13	; 0x0d
    2866:	9e 85       	ldd	r25, Y+14	; 0x0e
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	4a e7       	ldi	r20, 0x7A	; 122
    286e:	55 e4       	ldi	r21, 0x45	; 69
    2870:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	8f 83       	std	Y+7, r24	; 0x07
    287a:	98 87       	std	Y+8, r25	; 0x08
    287c:	a9 87       	std	Y+9, r26	; 0x09
    287e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2880:	6f 81       	ldd	r22, Y+7	; 0x07
    2882:	78 85       	ldd	r23, Y+8	; 0x08
    2884:	89 85       	ldd	r24, Y+9	; 0x09
    2886:	9a 85       	ldd	r25, Y+10	; 0x0a
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2894:	88 23       	and	r24, r24
    2896:	2c f4       	brge	.+10     	; 0x28a2 <LCD_displayCharacter+0x354>
		__ticks = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	3f c0       	rjmp	.+126    	; 0x2920 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    28a2:	6f 81       	ldd	r22, Y+7	; 0x07
    28a4:	78 85       	ldd	r23, Y+8	; 0x08
    28a6:	89 85       	ldd	r24, Y+9	; 0x09
    28a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	3f ef       	ldi	r19, 0xFF	; 255
    28ae:	4f e7       	ldi	r20, 0x7F	; 127
    28b0:	57 e4       	ldi	r21, 0x47	; 71
    28b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28b6:	18 16       	cp	r1, r24
    28b8:	4c f5       	brge	.+82     	; 0x290c <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    28bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28be:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e2       	ldi	r20, 0x20	; 32
    28c8:	51 e4       	ldi	r21, 0x41	; 65
    28ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9e 83       	std	Y+6, r25	; 0x06
    28e0:	8d 83       	std	Y+5, r24	; 0x05
    28e2:	0f c0       	rjmp	.+30     	; 0x2902 <LCD_displayCharacter+0x3b4>
    28e4:	80 e9       	ldi	r24, 0x90	; 144
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	9c 83       	std	Y+4, r25	; 0x04
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LCD_displayCharacter+0x3a2>
    28f4:	9c 83       	std	Y+4, r25	; 0x04
    28f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	69 f7       	brne	.-38     	; 0x28e4 <LCD_displayCharacter+0x396>
    290a:	14 c0       	rjmp	.+40     	; 0x2934 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290c:	6f 81       	ldd	r22, Y+7	; 0x07
    290e:	78 85       	ldd	r23, Y+8	; 0x08
    2910:	89 85       	ldd	r24, Y+9	; 0x09
    2912:	9a 85       	ldd	r25, Y+10	; 0x0a
    2914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9e 83       	std	Y+6, r25	; 0x06
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	9a 83       	std	Y+2, r25	; 0x02
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	9a 81       	ldd	r25, Y+2	; 0x02
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_displayCharacter+0x3de>
    2930:	9a 83       	std	Y+2, r25	; 0x02
    2932:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2934:	e9 96       	adiw	r28, 0x39	; 57
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <LCD_init>:
void LCD_init(void)
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	2e 97       	sbiw	r28, 0x0e	; 14
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	64 e0       	ldi	r22, 0x04	; 4
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	50 e0       	ldi	r21, 0x00	; 0
    2966:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	65 e0       	ldi	r22, 0x05	; 5
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	6f ef       	ldi	r22, 0xFF	; 255
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	a0 ea       	ldi	r26, 0xA0	; 160
    298c:	b1 e4       	ldi	r27, 0x41	; 65
    298e:	8b 87       	std	Y+11, r24	; 0x0b
    2990:	9c 87       	std	Y+12, r25	; 0x0c
    2992:	ad 87       	std	Y+13, r26	; 0x0d
    2994:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2996:	6b 85       	ldd	r22, Y+11	; 0x0b
    2998:	7c 85       	ldd	r23, Y+12	; 0x0c
    299a:	8d 85       	ldd	r24, Y+13	; 0x0d
    299c:	9e 85       	ldd	r25, Y+14	; 0x0e
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	4a e7       	ldi	r20, 0x7A	; 122
    29a4:	55 e4       	ldi	r21, 0x45	; 69
    29a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	8f 83       	std	Y+7, r24	; 0x07
    29b0:	98 87       	std	Y+8, r25	; 0x08
    29b2:	a9 87       	std	Y+9, r26	; 0x09
    29b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	40 e8       	ldi	r20, 0x80	; 128
    29c4:	5f e3       	ldi	r21, 0x3F	; 63
    29c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29ca:	88 23       	and	r24, r24
    29cc:	2c f4       	brge	.+10     	; 0x29d8 <LCD_init+0x92>
		__ticks = 1;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	3f c0       	rjmp	.+126    	; 0x2a56 <LCD_init+0x110>
	else if (__tmp > 65535)
    29d8:	6f 81       	ldd	r22, Y+7	; 0x07
    29da:	78 85       	ldd	r23, Y+8	; 0x08
    29dc:	89 85       	ldd	r24, Y+9	; 0x09
    29de:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	3f ef       	ldi	r19, 0xFF	; 255
    29e4:	4f e7       	ldi	r20, 0x7F	; 127
    29e6:	57 e4       	ldi	r21, 0x47	; 71
    29e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29ec:	18 16       	cp	r1, r24
    29ee:	4c f5       	brge	.+82     	; 0x2a42 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e2       	ldi	r20, 0x20	; 32
    29fe:	51 e4       	ldi	r21, 0x41	; 65
    2a00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
    2a18:	0f c0       	rjmp	.+30     	; 0x2a38 <LCD_init+0xf2>
    2a1a:	80 e9       	ldi	r24, 0x90	; 144
    2a1c:	91 e0       	ldi	r25, 0x01	; 1
    2a1e:	9c 83       	std	Y+4, r25	; 0x04
    2a20:	8b 83       	std	Y+3, r24	; 0x03
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_init+0xe0>
    2a2a:	9c 83       	std	Y+4, r25	; 0x04
    2a2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	69 f7       	brne	.-38     	; 0x2a1a <LCD_init+0xd4>
    2a40:	14 c0       	rjmp	.+40     	; 0x2a6a <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	6f 81       	ldd	r22, Y+7	; 0x07
    2a44:	78 85       	ldd	r23, Y+8	; 0x08
    2a46:	89 85       	ldd	r24, Y+9	; 0x09
    2a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	9a 83       	std	Y+2, r25	; 0x02
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <LCD_init+0x11c>
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2a6a:	88 e3       	ldi	r24, 0x38	; 56
    2a6c:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    2a70:	8c e0       	ldi	r24, 0x0C	; 12
    2a72:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
}
    2a7c:	2e 96       	adiw	r28, 0x0e	; 14
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <LCD_GoToXY+0x6>
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <LCD_GoToXY+0x8>
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	88 32       	cpi	r24, 0x28	; 40
    2aa2:	c0 f4       	brcc	.+48     	; 0x2ad4 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	28 2f       	mov	r18, r24
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	3c 83       	std	Y+4, r19	; 0x04
    2aac:	2b 83       	std	Y+3, r18	; 0x03
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	31 f0       	breq	.+12     	; 0x2ac2 <LCD_GoToXY+0x34>
    2ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    2aba:	21 30       	cpi	r18, 0x01	; 1
    2abc:	31 05       	cpc	r19, r1
    2abe:	31 f0       	breq	.+12     	; 0x2acc <LCD_GoToXY+0x3e>
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	80 58       	subi	r24, 0x80	; 128
    2ac6:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
    2aca:	04 c0       	rjmp	.+8      	; 0x2ad4 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	80 54       	subi	r24, 0x40	; 64
    2ad0:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
			break;
		}
	}
}
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	00 d0       	rcall	.+0      	; 0x2ae8 <LCD_displayString+0x6>
    2ae8:	0f 92       	push	r0
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	9b 83       	std	Y+3, r25	; 0x03
    2af0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2af2:	19 82       	std	Y+1, r1	; 0x01
    2af4:	0e c0       	rjmp	.+28     	; 0x2b12 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	28 2f       	mov	r18, r24
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	9b 81       	ldd	r25, Y+3	; 0x03
    2b00:	fc 01       	movw	r30, r24
    2b02:	e2 0f       	add	r30, r18
    2b04:	f3 1f       	adc	r31, r19
    2b06:	80 81       	ld	r24, Z
    2b08:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
		i++;
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	8f 5f       	subi	r24, 0xFF	; 255
    2b10:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	e2 0f       	add	r30, r18
    2b20:	f3 1f       	adc	r31, r19
    2b22:	80 81       	ld	r24, Z
    2b24:	88 23       	and	r24, r24
    2b26:	39 f7       	brne	.-50     	; 0x2af6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	28 97       	sbiw	r28, 0x08	; 8
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	8b 83       	std	Y+3, r24	; 0x03
    2b4a:	6c 83       	std	Y+4, r22	; 0x04
    2b4c:	5e 83       	std	Y+6, r21	; 0x06
    2b4e:	4d 83       	std	Y+5, r20	; 0x05
    2b50:	38 87       	std	Y+8, r19	; 0x08
    2b52:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    2b54:	1a 82       	std	Y+2, r1	; 0x02
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	88 23       	and	r24, r24
    2b5e:	49 f4       	brne	.+18     	; 0x2b72 <LCD_String_xy+0x3e>
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	80 31       	cpi	r24, 0x10	; 16
    2b64:	30 f4       	brcc	.+12     	; 0x2b72 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    2b66:	8c 81       	ldd	r24, Y+4	; 0x04
    2b68:	8f 70       	andi	r24, 0x0F	; 15
    2b6a:	80 68       	ori	r24, 0x80	; 128
    2b6c:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
    2b70:	3a c0       	rjmp	.+116    	; 0x2be6 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	b9 f5       	brne	.+110    	; 0x2be6 <LCD_String_xy+0xb2>
    2b78:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7a:	80 31       	cpi	r24, 0x10	; 16
    2b7c:	a0 f5       	brcc	.+104    	; 0x2be6 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	8f 70       	andi	r24, 0x0F	; 15
    2b82:	80 6c       	ori	r24, 0xC0	; 192
    2b84:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
    2b88:	2e c0       	rjmp	.+92     	; 0x2be6 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	fc 01       	movw	r30, r24
    2b96:	e2 0f       	add	r30, r18
    2b98:	f3 1f       	adc	r31, r19
    2b9a:	80 81       	ld	r24, Z
    2b9c:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
		i++;
    2ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba2:	8f 5f       	subi	r24, 0xFF	; 255
    2ba4:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    2ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba8:	88 23       	and	r24, r24
    2baa:	71 f4       	brne	.+28     	; 0x2bc8 <LCD_String_xy+0x94>
    2bac:	8c 81       	ldd	r24, Y+4	; 0x04
    2bae:	83 30       	cpi	r24, 0x03	; 3
    2bb0:	58 f0       	brcs	.+22     	; 0x2bc8 <LCD_String_xy+0x94>
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	8b 30       	cpi	r24, 0x0B	; 11
    2bb6:	41 f4       	brne	.+16     	; 0x2bc8 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_GoToXY>
			c++;
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	0b c0       	rjmp	.+22     	; 0x2bde <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	81 30       	cpi	r24, 0x01	; 1
    2bcc:	41 f4       	brne	.+16     	; 0x2bde <LCD_String_xy+0xaa>
    2bce:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd0:	83 30       	cpi	r24, 0x03	; 3
    2bd2:	28 f0       	brcs	.+10     	; 0x2bde <LCD_String_xy+0xaa>
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	8b 30       	cpi	r24, 0x0B	; 11
    2bd8:	11 f4       	brne	.+4      	; 0x2bde <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    2bda:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <LCD_ClearScreen>
		}

		*count = c;
    2bde:	ef 81       	ldd	r30, Y+7	; 0x07
    2be0:	f8 85       	ldd	r31, Y+8	; 0x08
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	e2 0f       	add	r30, r18
    2bf4:	f3 1f       	adc	r31, r19
    2bf6:	80 81       	ld	r24, Z
    2bf8:	88 23       	and	r24, r24
    2bfa:	39 f6       	brne	.-114    	; 0x2b8a <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    2bfc:	28 96       	adiw	r28, 0x08	; 8
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	2e 97       	sbiw	r28, 0x0e	; 14
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e4       	ldi	r27, 0x40	; 64
    2c30:	8b 87       	std	Y+11, r24	; 0x0b
    2c32:	9c 87       	std	Y+12, r25	; 0x0c
    2c34:	ad 87       	std	Y+13, r26	; 0x0d
    2c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a e7       	ldi	r20, 0x7A	; 122
    2c46:	55 e4       	ldi	r21, 0x45	; 69
    2c48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8f 83       	std	Y+7, r24	; 0x07
    2c52:	98 87       	std	Y+8, r25	; 0x08
    2c54:	a9 87       	std	Y+9, r26	; 0x09
    2c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c58:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5a:	78 85       	ldd	r23, Y+8	; 0x08
    2c5c:	89 85       	ldd	r24, Y+9	; 0x09
    2c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_ClearScreen+0x6c>
		__ticks = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
    2c78:	3f c0       	rjmp	.+126    	; 0x2cf8 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	4c f5       	brge	.+82     	; 0x2ce4 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	0f c0       	rjmp	.+30     	; 0x2cda <LCD_ClearScreen+0xcc>
    2cbc:	80 e9       	ldi	r24, 0x90	; 144
    2cbe:	91 e0       	ldi	r25, 0x01	; 1
    2cc0:	9c 83       	std	Y+4, r25	; 0x04
    2cc2:	8b 83       	std	Y+3, r24	; 0x03
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_ClearScreen+0xba>
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	9e 83       	std	Y+6, r25	; 0x06
    2cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	69 f7       	brne	.-38     	; 0x2cbc <LCD_ClearScreen+0xae>
    2ce2:	14 c0       	rjmp	.+40     	; 0x2d0c <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfc:	9a 83       	std	Y+2, r25	; 0x02
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	9a 81       	ldd	r25, Y+2	; 0x02
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_ClearScreen+0xf6>
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2d0c:	2e 96       	adiw	r28, 0x0e	; 14
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	2e 97       	sbiw	r28, 0x0e	; 14
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    2d32:	88 e1       	ldi	r24, 0x18	; 24
    2d34:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	a0 ea       	ldi	r26, 0xA0	; 160
    2d3e:	b1 e4       	ldi	r27, 0x41	; 65
    2d40:	8b 87       	std	Y+11, r24	; 0x0b
    2d42:	9c 87       	std	Y+12, r25	; 0x0c
    2d44:	ad 87       	std	Y+13, r26	; 0x0d
    2d46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	4a e7       	ldi	r20, 0x7A	; 122
    2d56:	55 e4       	ldi	r21, 0x45	; 69
    2d58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	8f 83       	std	Y+7, r24	; 0x07
    2d62:	98 87       	std	Y+8, r25	; 0x08
    2d64:	a9 87       	std	Y+9, r26	; 0x09
    2d66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d68:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6a:	78 85       	ldd	r23, Y+8	; 0x08
    2d6c:	89 85       	ldd	r24, Y+9	; 0x09
    2d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e8       	ldi	r20, 0x80	; 128
    2d76:	5f e3       	ldi	r21, 0x3F	; 63
    2d78:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d7c:	88 23       	and	r24, r24
    2d7e:	2c f4       	brge	.+10     	; 0x2d8a <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	9e 83       	std	Y+6, r25	; 0x06
    2d86:	8d 83       	std	Y+5, r24	; 0x05
    2d88:	3f c0       	rjmp	.+126    	; 0x2e08 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    2d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8c:	78 85       	ldd	r23, Y+8	; 0x08
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	3f ef       	ldi	r19, 0xFF	; 255
    2d96:	4f e7       	ldi	r20, 0x7F	; 127
    2d98:	57 e4       	ldi	r21, 0x47	; 71
    2d9a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d9e:	18 16       	cp	r1, r24
    2da0:	4c f5       	brge	.+82     	; 0x2df4 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e2       	ldi	r20, 0x20	; 32
    2db0:	51 e4       	ldi	r21, 0x41	; 65
    2db2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	bc 01       	movw	r22, r24
    2dbc:	cd 01       	movw	r24, r26
    2dbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	0f c0       	rjmp	.+30     	; 0x2dea <LCD_ShiftingLeft+0xcc>
    2dcc:	80 e9       	ldi	r24, 0x90	; 144
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	9c 83       	std	Y+4, r25	; 0x04
    2dd2:	8b 83       	std	Y+3, r24	; 0x03
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <LCD_ShiftingLeft+0xba>
    2ddc:	9c 83       	std	Y+4, r25	; 0x04
    2dde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	9e 83       	std	Y+6, r25	; 0x06
    2de8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dea:	8d 81       	ldd	r24, Y+5	; 0x05
    2dec:	9e 81       	ldd	r25, Y+6	; 0x06
    2dee:	00 97       	sbiw	r24, 0x00	; 0
    2df0:	69 f7       	brne	.-38     	; 0x2dcc <LCD_ShiftingLeft+0xae>
    2df2:	14 c0       	rjmp	.+40     	; 0x2e1c <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df4:	6f 81       	ldd	r22, Y+7	; 0x07
    2df6:	78 85       	ldd	r23, Y+8	; 0x08
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	9a 81       	ldd	r25, Y+2	; 0x02
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <LCD_ShiftingLeft+0xf6>
    2e18:	9a 83       	std	Y+2, r25	; 0x02
    2e1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2e1c:	2e 96       	adiw	r28, 0x0e	; 14
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	2e 97       	sbiw	r28, 0x0e	; 14
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    2e42:	8c e1       	ldi	r24, 0x1C	; 28
    2e44:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	a0 ea       	ldi	r26, 0xA0	; 160
    2e4e:	b1 e4       	ldi	r27, 0x41	; 65
    2e50:	8b 87       	std	Y+11, r24	; 0x0b
    2e52:	9c 87       	std	Y+12, r25	; 0x0c
    2e54:	ad 87       	std	Y+13, r26	; 0x0d
    2e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a e7       	ldi	r20, 0x7A	; 122
    2e66:	55 e4       	ldi	r21, 0x45	; 69
    2e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	8f 83       	std	Y+7, r24	; 0x07
    2e72:	98 87       	std	Y+8, r25	; 0x08
    2e74:	a9 87       	std	Y+9, r26	; 0x09
    2e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e78:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7a:	78 85       	ldd	r23, Y+8	; 0x08
    2e7c:	89 85       	ldd	r24, Y+9	; 0x09
    2e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e8       	ldi	r20, 0x80	; 128
    2e86:	5f e3       	ldi	r21, 0x3F	; 63
    2e88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	2c f4       	brge	.+10     	; 0x2e9a <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	3f c0       	rjmp	.+126    	; 0x2f18 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    2e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9c:	78 85       	ldd	r23, Y+8	; 0x08
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	4c f5       	brge	.+82     	; 0x2f04 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <LCD_ShiftingRight+0xcc>
    2edc:	80 e9       	ldi	r24, 0x90	; 144
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <LCD_ShiftingRight+0xba>
    2eec:	9c 83       	std	Y+4, r25	; 0x04
    2eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	69 f7       	brne	.-38     	; 0x2edc <LCD_ShiftingRight+0xae>
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <LCD_ShiftingRight+0xf6>
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2f2c:	2e 96       	adiw	r28, 0x0e	; 14
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    2f3e:	0f 93       	push	r16
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	28 97       	sbiw	r28, 0x08	; 8
    2f4a:	0f b6       	in	r0, 0x3f	; 63
    2f4c:	f8 94       	cli
    2f4e:	de bf       	out	0x3e, r29	; 62
    2f50:	0f be       	out	0x3f, r0	; 63
    2f52:	cd bf       	out	0x3d, r28	; 61
    2f54:	8b 83       	std	Y+3, r24	; 0x03
    2f56:	7d 83       	std	Y+5, r23	; 0x05
    2f58:	6c 83       	std	Y+4, r22	; 0x04
    2f5a:	4e 83       	std	Y+6, r20	; 0x06
    2f5c:	2f 83       	std	Y+7, r18	; 0x07
    2f5e:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    2f60:	88 85       	ldd	r24, Y+8	; 0x08
    2f62:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    2f66:	1a 82       	std	Y+2, r1	; 0x02
    2f68:	19 82       	std	Y+1, r1	; 0x01
    2f6a:	0f c0       	rjmp	.+30     	; 0x2f8a <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    2f6c:	29 81       	ldd	r18, Y+1	; 0x01
    2f6e:	3a 81       	ldd	r19, Y+2	; 0x02
    2f70:	8c 81       	ldd	r24, Y+4	; 0x04
    2f72:	9d 81       	ldd	r25, Y+5	; 0x05
    2f74:	fc 01       	movw	r30, r24
    2f76:	e2 0f       	add	r30, r18
    2f78:	f3 1f       	adc	r31, r19
    2f7a:	80 81       	ld	r24, Z
    2f7c:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	01 96       	adiw	r24, 0x01	; 1
    2f86:	9a 83       	std	Y+2, r25	; 0x02
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8e:	88 30       	cpi	r24, 0x08	; 8
    2f90:	91 05       	cpc	r25, r1
    2f92:	64 f3       	brlt	.-40     	; 0x2f6c <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    2f94:	8e 81       	ldd	r24, Y+6	; 0x06
    2f96:	6f 81       	ldd	r22, Y+7	; 0x07
    2f98:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    2fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa4:	80 31       	cpi	r24, 0x10	; 16
    2fa6:	48 f0       	brcs	.+18     	; 0x2fba <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    2fa8:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	60 e0       	ldi	r22, 0x00	; 0
    2fb0:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    2fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb6:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
	}
}
    2fba:	28 96       	adiw	r28, 0x08	; 8
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	0f 91       	pop	r16
    2fcc:	08 95       	ret

00002fce <Keypad_GetPressedKey>:
#include "Keypad.h";

u8 Keypad_GetPressedKey(){
    2fce:	df 93       	push	r29
    2fd0:	cf 93       	push	r28
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <Keypad_GetPressedKey+0x6>
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    2fd8:	1a 82       	std	Y+2, r1	; 0x02
    2fda:	4d c0       	rjmp	.+154    	; 0x3076 <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    2fdc:	ea e3       	ldi	r30, 0x3A	; 58
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	80 e1       	ldi	r24, 0x10	; 16
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <Keypad_GetPressedKey+0x22>
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	2a 95       	dec	r18
    2ff2:	e2 f7       	brpl	.-8      	; 0x2fec <Keypad_GetPressedKey+0x1e>
    2ff4:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    2ff6:	eb e3       	ldi	r30, 0x3B	; 59
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	80 e1       	ldi	r24, 0x10	; 16
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	02 2e       	mov	r0, r18
    3006:	02 c0       	rjmp	.+4      	; 0x300c <Keypad_GetPressedKey+0x3e>
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	0a 94       	dec	r0
    300e:	e2 f7       	brpl	.-8      	; 0x3008 <Keypad_GetPressedKey+0x3a>
    3010:	80 95       	com	r24
    3012:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    3014:	19 82       	std	Y+1, r1	; 0x01
    3016:	29 c0       	rjmp	.+82     	; 0x306a <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    3018:	e9 e3       	ldi	r30, 0x39	; 57
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	a9 01       	movw	r20, r18
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <Keypad_GetPressedKey+0x62>
    302c:	55 95       	asr	r21
    302e:	47 95       	ror	r20
    3030:	8a 95       	dec	r24
    3032:	e2 f7       	brpl	.-8      	; 0x302c <Keypad_GetPressedKey+0x5e>
    3034:	ca 01       	movw	r24, r20
    3036:	81 70       	andi	r24, 0x01	; 1
    3038:	90 70       	andi	r25, 0x00	; 0
    303a:	00 97       	sbiw	r24, 0x00	; 0
    303c:	99 f4       	brne	.+38     	; 0x3064 <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	28 2f       	mov	r18, r24
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	c9 01       	movw	r24, r18
    3046:	88 0f       	add	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	82 0f       	add	r24, r18
    304c:	93 1f       	adc	r25, r19
    304e:	98 2f       	mov	r25, r24
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	89 0f       	add	r24, r25
    3054:	8f 5f       	subi	r24, 0xFF	; 255
    3056:	0e 94 40 18 	call	0x3080	; 0x3080 <Keypad_4x3>
				}
			}
		}
	}
}
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	8f 5f       	subi	r24, 0xFF	; 255
    3068:	89 83       	std	Y+1, r24	; 0x01
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	84 30       	cpi	r24, 0x04	; 4
    306e:	a0 f2       	brcs	.-88     	; 0x3018 <Keypad_GetPressedKey+0x4a>

u8 Keypad_GetPressedKey(){
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	8f 5f       	subi	r24, 0xFF	; 255
    3074:	8a 83       	std	Y+2, r24	; 0x02
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	83 30       	cpi	r24, 0x03	; 3
    307a:	08 f4       	brcc	.+2      	; 0x307e <Keypad_GetPressedKey+0xb0>
    307c:	af cf       	rjmp	.-162    	; 0x2fdc <Keypad_GetPressedKey+0xe>
    307e:	ac cf       	rjmp	.-168    	; 0x2fd8 <Keypad_GetPressedKey+0xa>

00003080 <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	00 d0       	rcall	.+0      	; 0x3086 <Keypad_4x3+0x6>
    3086:	00 d0       	rcall	.+0      	; 0x3088 <Keypad_4x3+0x8>
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	28 2f       	mov	r18, r24
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	3c 83       	std	Y+4, r19	; 0x04
    3096:	2b 83       	std	Y+3, r18	; 0x03
    3098:	8b 81       	ldd	r24, Y+3	; 0x03
    309a:	9c 81       	ldd	r25, Y+4	; 0x04
    309c:	8a 30       	cpi	r24, 0x0A	; 10
    309e:	91 05       	cpc	r25, r1
    30a0:	81 f0       	breq	.+32     	; 0x30c2 <Keypad_4x3+0x42>
    30a2:	2b 81       	ldd	r18, Y+3	; 0x03
    30a4:	3c 81       	ldd	r19, Y+4	; 0x04
    30a6:	2a 30       	cpi	r18, 0x0A	; 10
    30a8:	31 05       	cpc	r19, r1
    30aa:	9c f0       	brlt	.+38     	; 0x30d2 <Keypad_4x3+0x52>
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	8b 30       	cpi	r24, 0x0B	; 11
    30b2:	91 05       	cpc	r25, r1
    30b4:	49 f0       	breq	.+18     	; 0x30c8 <Keypad_4x3+0x48>
    30b6:	2b 81       	ldd	r18, Y+3	; 0x03
    30b8:	3c 81       	ldd	r19, Y+4	; 0x04
    30ba:	2c 30       	cpi	r18, 0x0C	; 12
    30bc:	31 05       	cpc	r19, r1
    30be:	31 f0       	breq	.+12     	; 0x30cc <Keypad_4x3+0x4c>
    30c0:	08 c0       	rjmp	.+16     	; 0x30d2 <Keypad_4x3+0x52>
	case 10:
		return '*';
    30c2:	3a e2       	ldi	r19, 0x2A	; 42
    30c4:	3a 83       	std	Y+2, r19	; 0x02
    30c6:	07 c0       	rjmp	.+14     	; 0x30d6 <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    30c8:	1a 82       	std	Y+2, r1	; 0x02
    30ca:	05 c0       	rjmp	.+10     	; 0x30d6 <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    30cc:	83 e2       	ldi	r24, 0x23	; 35
    30ce:	8a 83       	std	Y+2, r24	; 0x02
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <Keypad_4x3+0x56>
	default:
		return Num;
    30d2:	99 81       	ldd	r25, Y+1	; 0x01
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	cf 91       	pop	r28
    30e2:	df 91       	pop	r29
    30e4:	08 95       	ret

000030e6 <main>:
#include <util/delay.h>


#define Password_Length	6

int main(void){
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	c6 5d       	subi	r28, 0xD6	; 214
    30f4:	d0 40       	sbci	r29, 0x00	; 0
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
	u8 count;
	u8 c = 0;
    3100:	fe 01       	movw	r30, r28
    3102:	e6 54       	subi	r30, 0x46	; 70
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	10 82       	st	Z, r1
	LCD_setPortDirection(0, 0);
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	70 e0       	ldi	r23, 0x00	; 0
    3110:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
	LCD_setPortDirection(1, 1);
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	61 e0       	ldi	r22, 0x01	; 1
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
	LCD_setPortDirection(2, 1);
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	61 e0       	ldi	r22, 0x01	; 1
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
	LCD_setPortDirection(3, 1);
    312c:	83 e0       	ldi	r24, 0x03	; 3
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	61 e0       	ldi	r22, 0x01	; 1
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
	LCD_init();
    3138:	0e 94 a3 14 	call	0x2946	; 0x2946 <LCD_init>

	u8 pressed_Keys[10];
	u8 password[10] = "#2020#";
    313c:	ce 01       	movw	r24, r28
    313e:	8a 53       	subi	r24, 0x3A	; 58
    3140:	9f 4f       	sbci	r25, 0xFF	; 255
    3142:	c0 53       	subi	r28, 0x30	; 48
    3144:	df 4f       	sbci	r29, 0xFF	; 255
    3146:	99 83       	std	Y+1, r25	; 0x01
    3148:	88 83       	st	Y, r24
    314a:	c0 5d       	subi	r28, 0xD0	; 208
    314c:	d0 40       	sbci	r29, 0x00	; 0
    314e:	c0 53       	subi	r28, 0x30	; 48
    3150:	df 4f       	sbci	r29, 0xFF	; 255
    3152:	a8 81       	ld	r26, Y
    3154:	b9 81       	ldd	r27, Y+1	; 0x01
    3156:	c0 5d       	subi	r28, 0xD0	; 208
    3158:	d0 40       	sbci	r29, 0x00	; 0
    315a:	ce 52       	subi	r28, 0x2E	; 46
    315c:	df 4f       	sbci	r29, 0xFF	; 255
    315e:	b9 83       	std	Y+1, r27	; 0x01
    3160:	a8 83       	st	Y, r26
    3162:	c2 5d       	subi	r28, 0xD2	; 210
    3164:	d0 40       	sbci	r29, 0x00	; 0
    3166:	e4 e9       	ldi	r30, 0x94	; 148
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	cc 52       	subi	r28, 0x2C	; 44
    316c:	df 4f       	sbci	r29, 0xFF	; 255
    316e:	f9 83       	std	Y+1, r31	; 0x01
    3170:	e8 83       	st	Y, r30
    3172:	c4 5d       	subi	r28, 0xD4	; 212
    3174:	d0 40       	sbci	r29, 0x00	; 0
    3176:	f7 e0       	ldi	r31, 0x07	; 7
    3178:	ca 52       	subi	r28, 0x2A	; 42
    317a:	df 4f       	sbci	r29, 0xFF	; 255
    317c:	f8 83       	st	Y, r31
    317e:	c6 5d       	subi	r28, 0xD6	; 214
    3180:	d0 40       	sbci	r29, 0x00	; 0
    3182:	cc 52       	subi	r28, 0x2C	; 44
    3184:	df 4f       	sbci	r29, 0xFF	; 255
    3186:	a8 81       	ld	r26, Y
    3188:	b9 81       	ldd	r27, Y+1	; 0x01
    318a:	c4 5d       	subi	r28, 0xD4	; 212
    318c:	d0 40       	sbci	r29, 0x00	; 0
    318e:	0c 90       	ld	r0, X
    3190:	cc 52       	subi	r28, 0x2C	; 44
    3192:	df 4f       	sbci	r29, 0xFF	; 255
    3194:	e8 81       	ld	r30, Y
    3196:	f9 81       	ldd	r31, Y+1	; 0x01
    3198:	c4 5d       	subi	r28, 0xD4	; 212
    319a:	d0 40       	sbci	r29, 0x00	; 0
    319c:	31 96       	adiw	r30, 0x01	; 1
    319e:	cc 52       	subi	r28, 0x2C	; 44
    31a0:	df 4f       	sbci	r29, 0xFF	; 255
    31a2:	f9 83       	std	Y+1, r31	; 0x01
    31a4:	e8 83       	st	Y, r30
    31a6:	c4 5d       	subi	r28, 0xD4	; 212
    31a8:	d0 40       	sbci	r29, 0x00	; 0
    31aa:	ce 52       	subi	r28, 0x2E	; 46
    31ac:	df 4f       	sbci	r29, 0xFF	; 255
    31ae:	a8 81       	ld	r26, Y
    31b0:	b9 81       	ldd	r27, Y+1	; 0x01
    31b2:	c2 5d       	subi	r28, 0xD2	; 210
    31b4:	d0 40       	sbci	r29, 0x00	; 0
    31b6:	0c 92       	st	X, r0
    31b8:	ce 52       	subi	r28, 0x2E	; 46
    31ba:	df 4f       	sbci	r29, 0xFF	; 255
    31bc:	e8 81       	ld	r30, Y
    31be:	f9 81       	ldd	r31, Y+1	; 0x01
    31c0:	c2 5d       	subi	r28, 0xD2	; 210
    31c2:	d0 40       	sbci	r29, 0x00	; 0
    31c4:	31 96       	adiw	r30, 0x01	; 1
    31c6:	ce 52       	subi	r28, 0x2E	; 46
    31c8:	df 4f       	sbci	r29, 0xFF	; 255
    31ca:	f9 83       	std	Y+1, r31	; 0x01
    31cc:	e8 83       	st	Y, r30
    31ce:	c2 5d       	subi	r28, 0xD2	; 210
    31d0:	d0 40       	sbci	r29, 0x00	; 0
    31d2:	ca 52       	subi	r28, 0x2A	; 42
    31d4:	df 4f       	sbci	r29, 0xFF	; 255
    31d6:	f8 81       	ld	r31, Y
    31d8:	c6 5d       	subi	r28, 0xD6	; 214
    31da:	d0 40       	sbci	r29, 0x00	; 0
    31dc:	f1 50       	subi	r31, 0x01	; 1
    31de:	ca 52       	subi	r28, 0x2A	; 42
    31e0:	df 4f       	sbci	r29, 0xFF	; 255
    31e2:	f8 83       	st	Y, r31
    31e4:	c6 5d       	subi	r28, 0xD6	; 214
    31e6:	d0 40       	sbci	r29, 0x00	; 0
    31e8:	ca 52       	subi	r28, 0x2A	; 42
    31ea:	df 4f       	sbci	r29, 0xFF	; 255
    31ec:	88 81       	ld	r24, Y
    31ee:	c6 5d       	subi	r28, 0xD6	; 214
    31f0:	d0 40       	sbci	r29, 0x00	; 0
    31f2:	88 23       	and	r24, r24
    31f4:	31 f6       	brne	.-116    	; 0x3182 <main+0x9c>
    31f6:	83 e0       	ldi	r24, 0x03	; 3
    31f8:	c0 53       	subi	r28, 0x30	; 48
    31fa:	df 4f       	sbci	r29, 0xFF	; 255
    31fc:	e8 81       	ld	r30, Y
    31fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3200:	c0 5d       	subi	r28, 0xD0	; 208
    3202:	d0 40       	sbci	r29, 0x00	; 0
    3204:	37 96       	adiw	r30, 0x07	; 7
    3206:	df 01       	movw	r26, r30
    3208:	98 2f       	mov	r25, r24
    320a:	1d 92       	st	X+, r1
    320c:	9a 95       	dec	r25
    320e:	e9 f7       	brne	.-6      	; 0x320a <main+0x124>

	LCD_String_xy(0, 0, "Enter Password", &count);
    3210:	20 e6       	ldi	r18, 0x60	; 96
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	fe 01       	movw	r30, r28
    3216:	e5 54       	subi	r30, 0x45	; 69
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	a9 01       	movw	r20, r18
    3220:	9f 01       	movw	r18, r30
    3222:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <LCD_String_xy>
	LCD_GoToXY(1, 0);
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	60 e0       	ldi	r22, 0x00	; 0
    322a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <LCD_GoToXY>


	while(1){
		u8 key_Pressed = Keypad_GetPressedKey();
    322e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <Keypad_GetPressedKey>
    3232:	fe 01       	movw	r30, r28
    3234:	e7 54       	subi	r30, 0x47	; 71
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 83       	st	Z, r24

		if(key_Pressed == 1){
    323a:	fe 01       	movw	r30, r28
    323c:	e7 54       	subi	r30, 0x47	; 71
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	81 30       	cpi	r24, 0x01	; 1
    3244:	09 f0       	breq	.+2      	; 0x3248 <main+0x162>
    3246:	ce c0       	rjmp	.+412    	; 0x33e4 <main+0x2fe>
			LCD_displayCharacter('*');
    3248:	8a e2       	ldi	r24, 0x2A	; 42
    324a:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '1';
    324e:	fe 01       	movw	r30, r28
    3250:	e6 54       	subi	r30, 0x46	; 70
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	ce 01       	movw	r24, r28
    325c:	84 54       	subi	r24, 0x44	; 68
    325e:	9f 4f       	sbci	r25, 0xFF	; 255
    3260:	fc 01       	movw	r30, r24
    3262:	e2 0f       	add	r30, r18
    3264:	f3 1f       	adc	r31, r19
    3266:	81 e3       	ldi	r24, 0x31	; 49
    3268:	80 83       	st	Z, r24
			c++;
    326a:	de 01       	movw	r26, r28
    326c:	a6 54       	subi	r26, 0x46	; 70
    326e:	bf 4f       	sbci	r27, 0xFF	; 255
    3270:	fe 01       	movw	r30, r28
    3272:	e6 54       	subi	r30, 0x46	; 70
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	80 81       	ld	r24, Z
    3278:	8f 5f       	subi	r24, 0xFF	; 255
    327a:	8c 93       	st	X, r24
    327c:	fe 01       	movw	r30, r28
    327e:	ed 54       	subi	r30, 0x4D	; 77
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	ac e0       	ldi	r26, 0x0C	; 12
    3288:	b2 e4       	ldi	r27, 0x42	; 66
    328a:	80 83       	st	Z, r24
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	a2 83       	std	Z+2, r26	; 0x02
    3290:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3292:	8e 01       	movw	r16, r28
    3294:	01 55       	subi	r16, 0x51	; 81
    3296:	1f 4f       	sbci	r17, 0xFF	; 255
    3298:	fe 01       	movw	r30, r28
    329a:	ed 54       	subi	r30, 0x4D	; 77
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	60 81       	ld	r22, Z
    32a0:	71 81       	ldd	r23, Z+1	; 0x01
    32a2:	82 81       	ldd	r24, Z+2	; 0x02
    32a4:	93 81       	ldd	r25, Z+3	; 0x03
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	4a e7       	ldi	r20, 0x7A	; 122
    32ac:	55 e4       	ldi	r21, 0x45	; 69
    32ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	f8 01       	movw	r30, r16
    32b8:	80 83       	st	Z, r24
    32ba:	91 83       	std	Z+1, r25	; 0x01
    32bc:	a2 83       	std	Z+2, r26	; 0x02
    32be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32c0:	fe 01       	movw	r30, r28
    32c2:	e1 55       	subi	r30, 0x51	; 81
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	60 81       	ld	r22, Z
    32c8:	71 81       	ldd	r23, Z+1	; 0x01
    32ca:	82 81       	ldd	r24, Z+2	; 0x02
    32cc:	93 81       	ldd	r25, Z+3	; 0x03
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e8       	ldi	r20, 0x80	; 128
    32d4:	5f e3       	ldi	r21, 0x3F	; 63
    32d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32da:	88 23       	and	r24, r24
    32dc:	44 f4       	brge	.+16     	; 0x32ee <main+0x208>
		__ticks = 1;
    32de:	fe 01       	movw	r30, r28
    32e0:	e3 55       	subi	r30, 0x53	; 83
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	80 83       	st	Z, r24
    32ec:	64 c0       	rjmp	.+200    	; 0x33b6 <main+0x2d0>
	else if (__tmp > 65535)
    32ee:	fe 01       	movw	r30, r28
    32f0:	e1 55       	subi	r30, 0x51	; 81
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	60 81       	ld	r22, Z
    32f6:	71 81       	ldd	r23, Z+1	; 0x01
    32f8:	82 81       	ldd	r24, Z+2	; 0x02
    32fa:	93 81       	ldd	r25, Z+3	; 0x03
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	3f ef       	ldi	r19, 0xFF	; 255
    3300:	4f e7       	ldi	r20, 0x7F	; 127
    3302:	57 e4       	ldi	r21, 0x47	; 71
    3304:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3308:	18 16       	cp	r1, r24
    330a:	0c f0       	brlt	.+2      	; 0x330e <main+0x228>
    330c:	43 c0       	rjmp	.+134    	; 0x3394 <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	fe 01       	movw	r30, r28
    3310:	ed 54       	subi	r30, 0x4D	; 77
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	82 81       	ldd	r24, Z+2	; 0x02
    331a:	93 81       	ldd	r25, Z+3	; 0x03
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e2       	ldi	r20, 0x20	; 32
    3322:	51 e4       	ldi	r21, 0x41	; 65
    3324:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	8e 01       	movw	r16, r28
    332e:	03 55       	subi	r16, 0x53	; 83
    3330:	1f 4f       	sbci	r17, 0xFF	; 255
    3332:	bc 01       	movw	r22, r24
    3334:	cd 01       	movw	r24, r26
    3336:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	f8 01       	movw	r30, r16
    3340:	91 83       	std	Z+1, r25	; 0x01
    3342:	80 83       	st	Z, r24
    3344:	1f c0       	rjmp	.+62     	; 0x3384 <main+0x29e>
    3346:	fe 01       	movw	r30, r28
    3348:	e5 55       	subi	r30, 0x55	; 85
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	80 e9       	ldi	r24, 0x90	; 144
    334e:	91 e0       	ldi	r25, 0x01	; 1
    3350:	91 83       	std	Z+1, r25	; 0x01
    3352:	80 83       	st	Z, r24
    3354:	fe 01       	movw	r30, r28
    3356:	e5 55       	subi	r30, 0x55	; 85
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <main+0x278>
    3362:	fe 01       	movw	r30, r28
    3364:	e5 55       	subi	r30, 0x55	; 85
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336c:	de 01       	movw	r26, r28
    336e:	a3 55       	subi	r26, 0x53	; 83
    3370:	bf 4f       	sbci	r27, 0xFF	; 255
    3372:	fe 01       	movw	r30, r28
    3374:	e3 55       	subi	r30, 0x53	; 83
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	11 96       	adiw	r26, 0x01	; 1
    3380:	9c 93       	st	X, r25
    3382:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	fe 01       	movw	r30, r28
    3386:	e3 55       	subi	r30, 0x53	; 83
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	80 81       	ld	r24, Z
    338c:	91 81       	ldd	r25, Z+1	; 0x01
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	d1 f6       	brne	.-76     	; 0x3346 <main+0x260>
    3392:	28 c0       	rjmp	.+80     	; 0x33e4 <main+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3394:	8e 01       	movw	r16, r28
    3396:	03 55       	subi	r16, 0x53	; 83
    3398:	1f 4f       	sbci	r17, 0xFF	; 255
    339a:	fe 01       	movw	r30, r28
    339c:	e1 55       	subi	r30, 0x51	; 81
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	f8 01       	movw	r30, r16
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	80 83       	st	Z, r24
    33b6:	de 01       	movw	r26, r28
    33b8:	a7 55       	subi	r26, 0x57	; 87
    33ba:	bf 4f       	sbci	r27, 0xFF	; 255
    33bc:	fe 01       	movw	r30, r28
    33be:	e3 55       	subi	r30, 0x53	; 83
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	80 81       	ld	r24, Z
    33c4:	91 81       	ldd	r25, Z+1	; 0x01
    33c6:	11 96       	adiw	r26, 0x01	; 1
    33c8:	9c 93       	st	X, r25
    33ca:	8e 93       	st	-X, r24
    33cc:	fe 01       	movw	r30, r28
    33ce:	e7 55       	subi	r30, 0x57	; 87
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	80 81       	ld	r24, Z
    33d4:	91 81       	ldd	r25, Z+1	; 0x01
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <main+0x2f0>
    33da:	fe 01       	movw	r30, r28
    33dc:	e7 55       	subi	r30, 0x57	; 87
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 2){
    33e4:	fe 01       	movw	r30, r28
    33e6:	e7 54       	subi	r30, 0x47	; 71
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	80 81       	ld	r24, Z
    33ec:	82 30       	cpi	r24, 0x02	; 2
    33ee:	09 f0       	breq	.+2      	; 0x33f2 <main+0x30c>
    33f0:	ce c0       	rjmp	.+412    	; 0x358e <main+0x4a8>
			LCD_displayCharacter('*');
    33f2:	8a e2       	ldi	r24, 0x2A	; 42
    33f4:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '2';
    33f8:	fe 01       	movw	r30, r28
    33fa:	e6 54       	subi	r30, 0x46	; 70
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	80 81       	ld	r24, Z
    3400:	28 2f       	mov	r18, r24
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	ce 01       	movw	r24, r28
    3406:	84 54       	subi	r24, 0x44	; 68
    3408:	9f 4f       	sbci	r25, 0xFF	; 255
    340a:	fc 01       	movw	r30, r24
    340c:	e2 0f       	add	r30, r18
    340e:	f3 1f       	adc	r31, r19
    3410:	82 e3       	ldi	r24, 0x32	; 50
    3412:	80 83       	st	Z, r24
			c++;
    3414:	de 01       	movw	r26, r28
    3416:	a6 54       	subi	r26, 0x46	; 70
    3418:	bf 4f       	sbci	r27, 0xFF	; 255
    341a:	fe 01       	movw	r30, r28
    341c:	e6 54       	subi	r30, 0x46	; 70
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	80 81       	ld	r24, Z
    3422:	8f 5f       	subi	r24, 0xFF	; 255
    3424:	8c 93       	st	X, r24
    3426:	fe 01       	movw	r30, r28
    3428:	eb 55       	subi	r30, 0x5B	; 91
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	ac e0       	ldi	r26, 0x0C	; 12
    3432:	b2 e4       	ldi	r27, 0x42	; 66
    3434:	80 83       	st	Z, r24
    3436:	91 83       	std	Z+1, r25	; 0x01
    3438:	a2 83       	std	Z+2, r26	; 0x02
    343a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343c:	8e 01       	movw	r16, r28
    343e:	0f 55       	subi	r16, 0x5F	; 95
    3440:	1f 4f       	sbci	r17, 0xFF	; 255
    3442:	fe 01       	movw	r30, r28
    3444:	eb 55       	subi	r30, 0x5B	; 91
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	60 81       	ld	r22, Z
    344a:	71 81       	ldd	r23, Z+1	; 0x01
    344c:	82 81       	ldd	r24, Z+2	; 0x02
    344e:	93 81       	ldd	r25, Z+3	; 0x03
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	4a e7       	ldi	r20, 0x7A	; 122
    3456:	55 e4       	ldi	r21, 0x45	; 69
    3458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	f8 01       	movw	r30, r16
    3462:	80 83       	st	Z, r24
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	a2 83       	std	Z+2, r26	; 0x02
    3468:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    346a:	fe 01       	movw	r30, r28
    346c:	ef 55       	subi	r30, 0x5F	; 95
    346e:	ff 4f       	sbci	r31, 0xFF	; 255
    3470:	60 81       	ld	r22, Z
    3472:	71 81       	ldd	r23, Z+1	; 0x01
    3474:	82 81       	ldd	r24, Z+2	; 0x02
    3476:	93 81       	ldd	r25, Z+3	; 0x03
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e8       	ldi	r20, 0x80	; 128
    347e:	5f e3       	ldi	r21, 0x3F	; 63
    3480:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3484:	88 23       	and	r24, r24
    3486:	44 f4       	brge	.+16     	; 0x3498 <main+0x3b2>
		__ticks = 1;
    3488:	fe 01       	movw	r30, r28
    348a:	e1 56       	subi	r30, 0x61	; 97
    348c:	ff 4f       	sbci	r31, 0xFF	; 255
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	80 83       	st	Z, r24
    3496:	64 c0       	rjmp	.+200    	; 0x3560 <main+0x47a>
	else if (__tmp > 65535)
    3498:	fe 01       	movw	r30, r28
    349a:	ef 55       	subi	r30, 0x5F	; 95
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	60 81       	ld	r22, Z
    34a0:	71 81       	ldd	r23, Z+1	; 0x01
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	93 81       	ldd	r25, Z+3	; 0x03
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	3f ef       	ldi	r19, 0xFF	; 255
    34aa:	4f e7       	ldi	r20, 0x7F	; 127
    34ac:	57 e4       	ldi	r21, 0x47	; 71
    34ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34b2:	18 16       	cp	r1, r24
    34b4:	0c f0       	brlt	.+2      	; 0x34b8 <main+0x3d2>
    34b6:	43 c0       	rjmp	.+134    	; 0x353e <main+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b8:	fe 01       	movw	r30, r28
    34ba:	eb 55       	subi	r30, 0x5B	; 91
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	60 81       	ld	r22, Z
    34c0:	71 81       	ldd	r23, Z+1	; 0x01
    34c2:	82 81       	ldd	r24, Z+2	; 0x02
    34c4:	93 81       	ldd	r25, Z+3	; 0x03
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e2       	ldi	r20, 0x20	; 32
    34cc:	51 e4       	ldi	r21, 0x41	; 65
    34ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	8e 01       	movw	r16, r28
    34d8:	01 56       	subi	r16, 0x61	; 97
    34da:	1f 4f       	sbci	r17, 0xFF	; 255
    34dc:	bc 01       	movw	r22, r24
    34de:	cd 01       	movw	r24, r26
    34e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	f8 01       	movw	r30, r16
    34ea:	91 83       	std	Z+1, r25	; 0x01
    34ec:	80 83       	st	Z, r24
    34ee:	1f c0       	rjmp	.+62     	; 0x352e <main+0x448>
    34f0:	fe 01       	movw	r30, r28
    34f2:	e3 56       	subi	r30, 0x63	; 99
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	80 e9       	ldi	r24, 0x90	; 144
    34f8:	91 e0       	ldi	r25, 0x01	; 1
    34fa:	91 83       	std	Z+1, r25	; 0x01
    34fc:	80 83       	st	Z, r24
    34fe:	fe 01       	movw	r30, r28
    3500:	e3 56       	subi	r30, 0x63	; 99
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	80 81       	ld	r24, Z
    3506:	91 81       	ldd	r25, Z+1	; 0x01
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	f1 f7       	brne	.-4      	; 0x3508 <main+0x422>
    350c:	fe 01       	movw	r30, r28
    350e:	e3 56       	subi	r30, 0x63	; 99
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	91 83       	std	Z+1, r25	; 0x01
    3514:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3516:	de 01       	movw	r26, r28
    3518:	a1 56       	subi	r26, 0x61	; 97
    351a:	bf 4f       	sbci	r27, 0xFF	; 255
    351c:	fe 01       	movw	r30, r28
    351e:	e1 56       	subi	r30, 0x61	; 97
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	11 96       	adiw	r26, 0x01	; 1
    352a:	9c 93       	st	X, r25
    352c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	fe 01       	movw	r30, r28
    3530:	e1 56       	subi	r30, 0x61	; 97
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	80 81       	ld	r24, Z
    3536:	91 81       	ldd	r25, Z+1	; 0x01
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	d1 f6       	brne	.-76     	; 0x34f0 <main+0x40a>
    353c:	28 c0       	rjmp	.+80     	; 0x358e <main+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353e:	8e 01       	movw	r16, r28
    3540:	01 56       	subi	r16, 0x61	; 97
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	fe 01       	movw	r30, r28
    3546:	ef 55       	subi	r30, 0x5F	; 95
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	f8 01       	movw	r30, r16
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	80 83       	st	Z, r24
    3560:	de 01       	movw	r26, r28
    3562:	a5 56       	subi	r26, 0x65	; 101
    3564:	bf 4f       	sbci	r27, 0xFF	; 255
    3566:	fe 01       	movw	r30, r28
    3568:	e1 56       	subi	r30, 0x61	; 97
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	80 81       	ld	r24, Z
    356e:	91 81       	ldd	r25, Z+1	; 0x01
    3570:	11 96       	adiw	r26, 0x01	; 1
    3572:	9c 93       	st	X, r25
    3574:	8e 93       	st	-X, r24
    3576:	fe 01       	movw	r30, r28
    3578:	e5 56       	subi	r30, 0x65	; 101
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <main+0x49a>
    3584:	fe 01       	movw	r30, r28
    3586:	e5 56       	subi	r30, 0x65	; 101
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 3){
    358e:	fe 01       	movw	r30, r28
    3590:	e7 54       	subi	r30, 0x47	; 71
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	80 81       	ld	r24, Z
    3596:	83 30       	cpi	r24, 0x03	; 3
    3598:	09 f0       	breq	.+2      	; 0x359c <main+0x4b6>
    359a:	ce c0       	rjmp	.+412    	; 0x3738 <main+0x652>
			LCD_displayCharacter('*');
    359c:	8a e2       	ldi	r24, 0x2A	; 42
    359e:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '3';
    35a2:	fe 01       	movw	r30, r28
    35a4:	e6 54       	subi	r30, 0x46	; 70
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	80 81       	ld	r24, Z
    35aa:	28 2f       	mov	r18, r24
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	ce 01       	movw	r24, r28
    35b0:	84 54       	subi	r24, 0x44	; 68
    35b2:	9f 4f       	sbci	r25, 0xFF	; 255
    35b4:	fc 01       	movw	r30, r24
    35b6:	e2 0f       	add	r30, r18
    35b8:	f3 1f       	adc	r31, r19
    35ba:	83 e3       	ldi	r24, 0x33	; 51
    35bc:	80 83       	st	Z, r24
			c++;
    35be:	de 01       	movw	r26, r28
    35c0:	a6 54       	subi	r26, 0x46	; 70
    35c2:	bf 4f       	sbci	r27, 0xFF	; 255
    35c4:	fe 01       	movw	r30, r28
    35c6:	e6 54       	subi	r30, 0x46	; 70
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 81       	ld	r24, Z
    35cc:	8f 5f       	subi	r24, 0xFF	; 255
    35ce:	8c 93       	st	X, r24
    35d0:	fe 01       	movw	r30, r28
    35d2:	e9 56       	subi	r30, 0x69	; 105
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	ac e0       	ldi	r26, 0x0C	; 12
    35dc:	b2 e4       	ldi	r27, 0x42	; 66
    35de:	80 83       	st	Z, r24
    35e0:	91 83       	std	Z+1, r25	; 0x01
    35e2:	a2 83       	std	Z+2, r26	; 0x02
    35e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e6:	8e 01       	movw	r16, r28
    35e8:	0d 56       	subi	r16, 0x6D	; 109
    35ea:	1f 4f       	sbci	r17, 0xFF	; 255
    35ec:	fe 01       	movw	r30, r28
    35ee:	e9 56       	subi	r30, 0x69	; 105
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	60 81       	ld	r22, Z
    35f4:	71 81       	ldd	r23, Z+1	; 0x01
    35f6:	82 81       	ldd	r24, Z+2	; 0x02
    35f8:	93 81       	ldd	r25, Z+3	; 0x03
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	4a e7       	ldi	r20, 0x7A	; 122
    3600:	55 e4       	ldi	r21, 0x45	; 69
    3602:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	f8 01       	movw	r30, r16
    360c:	80 83       	st	Z, r24
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	a2 83       	std	Z+2, r26	; 0x02
    3612:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3614:	fe 01       	movw	r30, r28
    3616:	ed 56       	subi	r30, 0x6D	; 109
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	60 81       	ld	r22, Z
    361c:	71 81       	ldd	r23, Z+1	; 0x01
    361e:	82 81       	ldd	r24, Z+2	; 0x02
    3620:	93 81       	ldd	r25, Z+3	; 0x03
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	40 e8       	ldi	r20, 0x80	; 128
    3628:	5f e3       	ldi	r21, 0x3F	; 63
    362a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    362e:	88 23       	and	r24, r24
    3630:	44 f4       	brge	.+16     	; 0x3642 <main+0x55c>
		__ticks = 1;
    3632:	fe 01       	movw	r30, r28
    3634:	ef 56       	subi	r30, 0x6F	; 111
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	91 83       	std	Z+1, r25	; 0x01
    363e:	80 83       	st	Z, r24
    3640:	64 c0       	rjmp	.+200    	; 0x370a <main+0x624>
	else if (__tmp > 65535)
    3642:	fe 01       	movw	r30, r28
    3644:	ed 56       	subi	r30, 0x6D	; 109
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	60 81       	ld	r22, Z
    364a:	71 81       	ldd	r23, Z+1	; 0x01
    364c:	82 81       	ldd	r24, Z+2	; 0x02
    364e:	93 81       	ldd	r25, Z+3	; 0x03
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	3f ef       	ldi	r19, 0xFF	; 255
    3654:	4f e7       	ldi	r20, 0x7F	; 127
    3656:	57 e4       	ldi	r21, 0x47	; 71
    3658:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    365c:	18 16       	cp	r1, r24
    365e:	0c f0       	brlt	.+2      	; 0x3662 <main+0x57c>
    3660:	43 c0       	rjmp	.+134    	; 0x36e8 <main+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3662:	fe 01       	movw	r30, r28
    3664:	e9 56       	subi	r30, 0x69	; 105
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	60 81       	ld	r22, Z
    366a:	71 81       	ldd	r23, Z+1	; 0x01
    366c:	82 81       	ldd	r24, Z+2	; 0x02
    366e:	93 81       	ldd	r25, Z+3	; 0x03
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	8e 01       	movw	r16, r28
    3682:	0f 56       	subi	r16, 0x6F	; 111
    3684:	1f 4f       	sbci	r17, 0xFF	; 255
    3686:	bc 01       	movw	r22, r24
    3688:	cd 01       	movw	r24, r26
    368a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	f8 01       	movw	r30, r16
    3694:	91 83       	std	Z+1, r25	; 0x01
    3696:	80 83       	st	Z, r24
    3698:	1f c0       	rjmp	.+62     	; 0x36d8 <main+0x5f2>
    369a:	fe 01       	movw	r30, r28
    369c:	e1 57       	subi	r30, 0x71	; 113
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 e9       	ldi	r24, 0x90	; 144
    36a2:	91 e0       	ldi	r25, 0x01	; 1
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	80 83       	st	Z, r24
    36a8:	fe 01       	movw	r30, r28
    36aa:	e1 57       	subi	r30, 0x71	; 113
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 81       	ld	r24, Z
    36b0:	91 81       	ldd	r25, Z+1	; 0x01
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	f1 f7       	brne	.-4      	; 0x36b2 <main+0x5cc>
    36b6:	fe 01       	movw	r30, r28
    36b8:	e1 57       	subi	r30, 0x71	; 113
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c0:	de 01       	movw	r26, r28
    36c2:	af 56       	subi	r26, 0x6F	; 111
    36c4:	bf 4f       	sbci	r27, 0xFF	; 255
    36c6:	fe 01       	movw	r30, r28
    36c8:	ef 56       	subi	r30, 0x6F	; 111
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	80 81       	ld	r24, Z
    36ce:	91 81       	ldd	r25, Z+1	; 0x01
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	11 96       	adiw	r26, 0x01	; 1
    36d4:	9c 93       	st	X, r25
    36d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d8:	fe 01       	movw	r30, r28
    36da:	ef 56       	subi	r30, 0x6F	; 111
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 81       	ld	r24, Z
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	00 97       	sbiw	r24, 0x00	; 0
    36e4:	d1 f6       	brne	.-76     	; 0x369a <main+0x5b4>
    36e6:	28 c0       	rjmp	.+80     	; 0x3738 <main+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e8:	8e 01       	movw	r16, r28
    36ea:	0f 56       	subi	r16, 0x6F	; 111
    36ec:	1f 4f       	sbci	r17, 0xFF	; 255
    36ee:	fe 01       	movw	r30, r28
    36f0:	ed 56       	subi	r30, 0x6D	; 109
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	60 81       	ld	r22, Z
    36f6:	71 81       	ldd	r23, Z+1	; 0x01
    36f8:	82 81       	ldd	r24, Z+2	; 0x02
    36fa:	93 81       	ldd	r25, Z+3	; 0x03
    36fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	f8 01       	movw	r30, r16
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	80 83       	st	Z, r24
    370a:	de 01       	movw	r26, r28
    370c:	a3 57       	subi	r26, 0x73	; 115
    370e:	bf 4f       	sbci	r27, 0xFF	; 255
    3710:	fe 01       	movw	r30, r28
    3712:	ef 56       	subi	r30, 0x6F	; 111
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	11 96       	adiw	r26, 0x01	; 1
    371c:	9c 93       	st	X, r25
    371e:	8e 93       	st	-X, r24
    3720:	fe 01       	movw	r30, r28
    3722:	e3 57       	subi	r30, 0x73	; 115
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	80 81       	ld	r24, Z
    3728:	91 81       	ldd	r25, Z+1	; 0x01
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <main+0x644>
    372e:	fe 01       	movw	r30, r28
    3730:	e3 57       	subi	r30, 0x73	; 115
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 4){
    3738:	fe 01       	movw	r30, r28
    373a:	e7 54       	subi	r30, 0x47	; 71
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	80 81       	ld	r24, Z
    3740:	84 30       	cpi	r24, 0x04	; 4
    3742:	09 f0       	breq	.+2      	; 0x3746 <main+0x660>
    3744:	ce c0       	rjmp	.+412    	; 0x38e2 <main+0x7fc>
			LCD_displayCharacter('*');
    3746:	8a e2       	ldi	r24, 0x2A	; 42
    3748:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '4';
    374c:	fe 01       	movw	r30, r28
    374e:	e6 54       	subi	r30, 0x46	; 70
    3750:	ff 4f       	sbci	r31, 0xFF	; 255
    3752:	80 81       	ld	r24, Z
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	ce 01       	movw	r24, r28
    375a:	84 54       	subi	r24, 0x44	; 68
    375c:	9f 4f       	sbci	r25, 0xFF	; 255
    375e:	fc 01       	movw	r30, r24
    3760:	e2 0f       	add	r30, r18
    3762:	f3 1f       	adc	r31, r19
    3764:	84 e3       	ldi	r24, 0x34	; 52
    3766:	80 83       	st	Z, r24
			c++;
    3768:	de 01       	movw	r26, r28
    376a:	a6 54       	subi	r26, 0x46	; 70
    376c:	bf 4f       	sbci	r27, 0xFF	; 255
    376e:	fe 01       	movw	r30, r28
    3770:	e6 54       	subi	r30, 0x46	; 70
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	80 81       	ld	r24, Z
    3776:	8f 5f       	subi	r24, 0xFF	; 255
    3778:	8c 93       	st	X, r24
    377a:	fe 01       	movw	r30, r28
    377c:	e7 57       	subi	r30, 0x77	; 119
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	ac e0       	ldi	r26, 0x0C	; 12
    3786:	b2 e4       	ldi	r27, 0x42	; 66
    3788:	80 83       	st	Z, r24
    378a:	91 83       	std	Z+1, r25	; 0x01
    378c:	a2 83       	std	Z+2, r26	; 0x02
    378e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3790:	8e 01       	movw	r16, r28
    3792:	0b 57       	subi	r16, 0x7B	; 123
    3794:	1f 4f       	sbci	r17, 0xFF	; 255
    3796:	fe 01       	movw	r30, r28
    3798:	e7 57       	subi	r30, 0x77	; 119
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	4a e7       	ldi	r20, 0x7A	; 122
    37aa:	55 e4       	ldi	r21, 0x45	; 69
    37ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	f8 01       	movw	r30, r16
    37b6:	80 83       	st	Z, r24
    37b8:	91 83       	std	Z+1, r25	; 0x01
    37ba:	a2 83       	std	Z+2, r26	; 0x02
    37bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37be:	fe 01       	movw	r30, r28
    37c0:	eb 57       	subi	r30, 0x7B	; 123
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	60 81       	ld	r22, Z
    37c6:	71 81       	ldd	r23, Z+1	; 0x01
    37c8:	82 81       	ldd	r24, Z+2	; 0x02
    37ca:	93 81       	ldd	r25, Z+3	; 0x03
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e8       	ldi	r20, 0x80	; 128
    37d2:	5f e3       	ldi	r21, 0x3F	; 63
    37d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    37d8:	88 23       	and	r24, r24
    37da:	44 f4       	brge	.+16     	; 0x37ec <main+0x706>
		__ticks = 1;
    37dc:	fe 01       	movw	r30, r28
    37de:	ed 57       	subi	r30, 0x7D	; 125
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	91 83       	std	Z+1, r25	; 0x01
    37e8:	80 83       	st	Z, r24
    37ea:	64 c0       	rjmp	.+200    	; 0x38b4 <main+0x7ce>
	else if (__tmp > 65535)
    37ec:	fe 01       	movw	r30, r28
    37ee:	eb 57       	subi	r30, 0x7B	; 123
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	60 81       	ld	r22, Z
    37f4:	71 81       	ldd	r23, Z+1	; 0x01
    37f6:	82 81       	ldd	r24, Z+2	; 0x02
    37f8:	93 81       	ldd	r25, Z+3	; 0x03
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	3f ef       	ldi	r19, 0xFF	; 255
    37fe:	4f e7       	ldi	r20, 0x7F	; 127
    3800:	57 e4       	ldi	r21, 0x47	; 71
    3802:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3806:	18 16       	cp	r1, r24
    3808:	0c f0       	brlt	.+2      	; 0x380c <main+0x726>
    380a:	43 c0       	rjmp	.+134    	; 0x3892 <main+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    380c:	fe 01       	movw	r30, r28
    380e:	e7 57       	subi	r30, 0x77	; 119
    3810:	ff 4f       	sbci	r31, 0xFF	; 255
    3812:	60 81       	ld	r22, Z
    3814:	71 81       	ldd	r23, Z+1	; 0x01
    3816:	82 81       	ldd	r24, Z+2	; 0x02
    3818:	93 81       	ldd	r25, Z+3	; 0x03
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 e2       	ldi	r20, 0x20	; 32
    3820:	51 e4       	ldi	r21, 0x41	; 65
    3822:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	8e 01       	movw	r16, r28
    382c:	0d 57       	subi	r16, 0x7D	; 125
    382e:	1f 4f       	sbci	r17, 0xFF	; 255
    3830:	bc 01       	movw	r22, r24
    3832:	cd 01       	movw	r24, r26
    3834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	f8 01       	movw	r30, r16
    383e:	91 83       	std	Z+1, r25	; 0x01
    3840:	80 83       	st	Z, r24
    3842:	1f c0       	rjmp	.+62     	; 0x3882 <main+0x79c>
    3844:	fe 01       	movw	r30, r28
    3846:	ef 57       	subi	r30, 0x7F	; 127
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 e9       	ldi	r24, 0x90	; 144
    384c:	91 e0       	ldi	r25, 0x01	; 1
    384e:	91 83       	std	Z+1, r25	; 0x01
    3850:	80 83       	st	Z, r24
    3852:	fe 01       	movw	r30, r28
    3854:	ef 57       	subi	r30, 0x7F	; 127
    3856:	ff 4f       	sbci	r31, 0xFF	; 255
    3858:	80 81       	ld	r24, Z
    385a:	91 81       	ldd	r25, Z+1	; 0x01
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	f1 f7       	brne	.-4      	; 0x385c <main+0x776>
    3860:	fe 01       	movw	r30, r28
    3862:	ef 57       	subi	r30, 0x7F	; 127
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	91 83       	std	Z+1, r25	; 0x01
    3868:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386a:	de 01       	movw	r26, r28
    386c:	ad 57       	subi	r26, 0x7D	; 125
    386e:	bf 4f       	sbci	r27, 0xFF	; 255
    3870:	fe 01       	movw	r30, r28
    3872:	ed 57       	subi	r30, 0x7D	; 125
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	80 81       	ld	r24, Z
    3878:	91 81       	ldd	r25, Z+1	; 0x01
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	11 96       	adiw	r26, 0x01	; 1
    387e:	9c 93       	st	X, r25
    3880:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3882:	fe 01       	movw	r30, r28
    3884:	ed 57       	subi	r30, 0x7D	; 125
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	80 81       	ld	r24, Z
    388a:	91 81       	ldd	r25, Z+1	; 0x01
    388c:	00 97       	sbiw	r24, 0x00	; 0
    388e:	d1 f6       	brne	.-76     	; 0x3844 <main+0x75e>
    3890:	28 c0       	rjmp	.+80     	; 0x38e2 <main+0x7fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3892:	8e 01       	movw	r16, r28
    3894:	0d 57       	subi	r16, 0x7D	; 125
    3896:	1f 4f       	sbci	r17, 0xFF	; 255
    3898:	fe 01       	movw	r30, r28
    389a:	eb 57       	subi	r30, 0x7B	; 123
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	60 81       	ld	r22, Z
    38a0:	71 81       	ldd	r23, Z+1	; 0x01
    38a2:	82 81       	ldd	r24, Z+2	; 0x02
    38a4:	93 81       	ldd	r25, Z+3	; 0x03
    38a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	f8 01       	movw	r30, r16
    38b0:	91 83       	std	Z+1, r25	; 0x01
    38b2:	80 83       	st	Z, r24
    38b4:	de 01       	movw	r26, r28
    38b6:	a1 58       	subi	r26, 0x81	; 129
    38b8:	bf 4f       	sbci	r27, 0xFF	; 255
    38ba:	fe 01       	movw	r30, r28
    38bc:	ed 57       	subi	r30, 0x7D	; 125
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	80 81       	ld	r24, Z
    38c2:	91 81       	ldd	r25, Z+1	; 0x01
    38c4:	11 96       	adiw	r26, 0x01	; 1
    38c6:	9c 93       	st	X, r25
    38c8:	8e 93       	st	-X, r24
    38ca:	fe 01       	movw	r30, r28
    38cc:	e1 58       	subi	r30, 0x81	; 129
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	80 81       	ld	r24, Z
    38d2:	91 81       	ldd	r25, Z+1	; 0x01
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <main+0x7ee>
    38d8:	fe 01       	movw	r30, r28
    38da:	e1 58       	subi	r30, 0x81	; 129
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	91 83       	std	Z+1, r25	; 0x01
    38e0:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 5){
    38e2:	fe 01       	movw	r30, r28
    38e4:	e7 54       	subi	r30, 0x47	; 71
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	80 81       	ld	r24, Z
    38ea:	85 30       	cpi	r24, 0x05	; 5
    38ec:	09 f0       	breq	.+2      	; 0x38f0 <main+0x80a>
    38ee:	ce c0       	rjmp	.+412    	; 0x3a8c <main+0x9a6>
			LCD_displayCharacter('*');
    38f0:	8a e2       	ldi	r24, 0x2A	; 42
    38f2:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '5';
    38f6:	fe 01       	movw	r30, r28
    38f8:	e6 54       	subi	r30, 0x46	; 70
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	80 81       	ld	r24, Z
    38fe:	28 2f       	mov	r18, r24
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	ce 01       	movw	r24, r28
    3904:	84 54       	subi	r24, 0x44	; 68
    3906:	9f 4f       	sbci	r25, 0xFF	; 255
    3908:	fc 01       	movw	r30, r24
    390a:	e2 0f       	add	r30, r18
    390c:	f3 1f       	adc	r31, r19
    390e:	85 e3       	ldi	r24, 0x35	; 53
    3910:	80 83       	st	Z, r24
			c++;
    3912:	de 01       	movw	r26, r28
    3914:	a6 54       	subi	r26, 0x46	; 70
    3916:	bf 4f       	sbci	r27, 0xFF	; 255
    3918:	fe 01       	movw	r30, r28
    391a:	e6 54       	subi	r30, 0x46	; 70
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	80 81       	ld	r24, Z
    3920:	8f 5f       	subi	r24, 0xFF	; 255
    3922:	8c 93       	st	X, r24
    3924:	fe 01       	movw	r30, r28
    3926:	e5 58       	subi	r30, 0x85	; 133
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	ac e0       	ldi	r26, 0x0C	; 12
    3930:	b2 e4       	ldi	r27, 0x42	; 66
    3932:	80 83       	st	Z, r24
    3934:	91 83       	std	Z+1, r25	; 0x01
    3936:	a2 83       	std	Z+2, r26	; 0x02
    3938:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393a:	8e 01       	movw	r16, r28
    393c:	09 58       	subi	r16, 0x89	; 137
    393e:	1f 4f       	sbci	r17, 0xFF	; 255
    3940:	fe 01       	movw	r30, r28
    3942:	e5 58       	subi	r30, 0x85	; 133
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	60 81       	ld	r22, Z
    3948:	71 81       	ldd	r23, Z+1	; 0x01
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	4a e7       	ldi	r20, 0x7A	; 122
    3954:	55 e4       	ldi	r21, 0x45	; 69
    3956:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	f8 01       	movw	r30, r16
    3960:	80 83       	st	Z, r24
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	a2 83       	std	Z+2, r26	; 0x02
    3966:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3968:	fe 01       	movw	r30, r28
    396a:	e9 58       	subi	r30, 0x89	; 137
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	60 81       	ld	r22, Z
    3970:	71 81       	ldd	r23, Z+1	; 0x01
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e8       	ldi	r20, 0x80	; 128
    397c:	5f e3       	ldi	r21, 0x3F	; 63
    397e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3982:	88 23       	and	r24, r24
    3984:	44 f4       	brge	.+16     	; 0x3996 <main+0x8b0>
		__ticks = 1;
    3986:	fe 01       	movw	r30, r28
    3988:	eb 58       	subi	r30, 0x8B	; 139
    398a:	ff 4f       	sbci	r31, 0xFF	; 255
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	80 83       	st	Z, r24
    3994:	64 c0       	rjmp	.+200    	; 0x3a5e <main+0x978>
	else if (__tmp > 65535)
    3996:	fe 01       	movw	r30, r28
    3998:	e9 58       	subi	r30, 0x89	; 137
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	3f ef       	ldi	r19, 0xFF	; 255
    39a8:	4f e7       	ldi	r20, 0x7F	; 127
    39aa:	57 e4       	ldi	r21, 0x47	; 71
    39ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    39b0:	18 16       	cp	r1, r24
    39b2:	0c f0       	brlt	.+2      	; 0x39b6 <main+0x8d0>
    39b4:	43 c0       	rjmp	.+134    	; 0x3a3c <main+0x956>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b6:	fe 01       	movw	r30, r28
    39b8:	e5 58       	subi	r30, 0x85	; 133
    39ba:	ff 4f       	sbci	r31, 0xFF	; 255
    39bc:	60 81       	ld	r22, Z
    39be:	71 81       	ldd	r23, Z+1	; 0x01
    39c0:	82 81       	ldd	r24, Z+2	; 0x02
    39c2:	93 81       	ldd	r25, Z+3	; 0x03
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	40 e2       	ldi	r20, 0x20	; 32
    39ca:	51 e4       	ldi	r21, 0x41	; 65
    39cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	8e 01       	movw	r16, r28
    39d6:	0b 58       	subi	r16, 0x8B	; 139
    39d8:	1f 4f       	sbci	r17, 0xFF	; 255
    39da:	bc 01       	movw	r22, r24
    39dc:	cd 01       	movw	r24, r26
    39de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	f8 01       	movw	r30, r16
    39e8:	91 83       	std	Z+1, r25	; 0x01
    39ea:	80 83       	st	Z, r24
    39ec:	1f c0       	rjmp	.+62     	; 0x3a2c <main+0x946>
    39ee:	fe 01       	movw	r30, r28
    39f0:	ed 58       	subi	r30, 0x8D	; 141
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	80 e9       	ldi	r24, 0x90	; 144
    39f6:	91 e0       	ldi	r25, 0x01	; 1
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	80 83       	st	Z, r24
    39fc:	fe 01       	movw	r30, r28
    39fe:	ed 58       	subi	r30, 0x8D	; 141
    3a00:	ff 4f       	sbci	r31, 0xFF	; 255
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <main+0x920>
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	ed 58       	subi	r30, 0x8D	; 141
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a14:	de 01       	movw	r26, r28
    3a16:	ab 58       	subi	r26, 0x8B	; 139
    3a18:	bf 4f       	sbci	r27, 0xFF	; 255
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	eb 58       	subi	r30, 0x8B	; 139
    3a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a20:	80 81       	ld	r24, Z
    3a22:	91 81       	ldd	r25, Z+1	; 0x01
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	11 96       	adiw	r26, 0x01	; 1
    3a28:	9c 93       	st	X, r25
    3a2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	eb 58       	subi	r30, 0x8B	; 139
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	80 81       	ld	r24, Z
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	00 97       	sbiw	r24, 0x00	; 0
    3a38:	d1 f6       	brne	.-76     	; 0x39ee <main+0x908>
    3a3a:	28 c0       	rjmp	.+80     	; 0x3a8c <main+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3c:	8e 01       	movw	r16, r28
    3a3e:	0b 58       	subi	r16, 0x8B	; 139
    3a40:	1f 4f       	sbci	r17, 0xFF	; 255
    3a42:	fe 01       	movw	r30, r28
    3a44:	e9 58       	subi	r30, 0x89	; 137
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	f8 01       	movw	r30, r16
    3a5a:	91 83       	std	Z+1, r25	; 0x01
    3a5c:	80 83       	st	Z, r24
    3a5e:	de 01       	movw	r26, r28
    3a60:	af 58       	subi	r26, 0x8F	; 143
    3a62:	bf 4f       	sbci	r27, 0xFF	; 255
    3a64:	fe 01       	movw	r30, r28
    3a66:	eb 58       	subi	r30, 0x8B	; 139
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	11 96       	adiw	r26, 0x01	; 1
    3a70:	9c 93       	st	X, r25
    3a72:	8e 93       	st	-X, r24
    3a74:	fe 01       	movw	r30, r28
    3a76:	ef 58       	subi	r30, 0x8F	; 143
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	80 81       	ld	r24, Z
    3a7c:	91 81       	ldd	r25, Z+1	; 0x01
    3a7e:	01 97       	sbiw	r24, 0x01	; 1
    3a80:	f1 f7       	brne	.-4      	; 0x3a7e <main+0x998>
    3a82:	fe 01       	movw	r30, r28
    3a84:	ef 58       	subi	r30, 0x8F	; 143
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	91 83       	std	Z+1, r25	; 0x01
    3a8a:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 6){
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e7 54       	subi	r30, 0x47	; 71
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	86 30       	cpi	r24, 0x06	; 6
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <main+0x9b4>
    3a98:	ce c0       	rjmp	.+412    	; 0x3c36 <main+0xb50>
			LCD_displayCharacter('*');
    3a9a:	8a e2       	ldi	r24, 0x2A	; 42
    3a9c:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '6';
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	e6 54       	subi	r30, 0x46	; 70
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	28 2f       	mov	r18, r24
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	ce 01       	movw	r24, r28
    3aae:	84 54       	subi	r24, 0x44	; 68
    3ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	e2 0f       	add	r30, r18
    3ab6:	f3 1f       	adc	r31, r19
    3ab8:	86 e3       	ldi	r24, 0x36	; 54
    3aba:	80 83       	st	Z, r24
			c++;
    3abc:	de 01       	movw	r26, r28
    3abe:	a6 54       	subi	r26, 0x46	; 70
    3ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e6 54       	subi	r30, 0x46	; 70
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	80 81       	ld	r24, Z
    3aca:	8f 5f       	subi	r24, 0xFF	; 255
    3acc:	8c 93       	st	X, r24
    3ace:	fe 01       	movw	r30, r28
    3ad0:	e3 59       	subi	r30, 0x93	; 147
    3ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	ac e0       	ldi	r26, 0x0C	; 12
    3ada:	b2 e4       	ldi	r27, 0x42	; 66
    3adc:	80 83       	st	Z, r24
    3ade:	91 83       	std	Z+1, r25	; 0x01
    3ae0:	a2 83       	std	Z+2, r26	; 0x02
    3ae2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae4:	8e 01       	movw	r16, r28
    3ae6:	07 59       	subi	r16, 0x97	; 151
    3ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aea:	fe 01       	movw	r30, r28
    3aec:	e3 59       	subi	r30, 0x93	; 147
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	60 81       	ld	r22, Z
    3af2:	71 81       	ldd	r23, Z+1	; 0x01
    3af4:	82 81       	ldd	r24, Z+2	; 0x02
    3af6:	93 81       	ldd	r25, Z+3	; 0x03
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	4a e7       	ldi	r20, 0x7A	; 122
    3afe:	55 e4       	ldi	r21, 0x45	; 69
    3b00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	f8 01       	movw	r30, r16
    3b0a:	80 83       	st	Z, r24
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	a2 83       	std	Z+2, r26	; 0x02
    3b10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b12:	fe 01       	movw	r30, r28
    3b14:	e7 59       	subi	r30, 0x97	; 151
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	60 81       	ld	r22, Z
    3b1a:	71 81       	ldd	r23, Z+1	; 0x01
    3b1c:	82 81       	ldd	r24, Z+2	; 0x02
    3b1e:	93 81       	ldd	r25, Z+3	; 0x03
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e8       	ldi	r20, 0x80	; 128
    3b26:	5f e3       	ldi	r21, 0x3F	; 63
    3b28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b2c:	88 23       	and	r24, r24
    3b2e:	44 f4       	brge	.+16     	; 0x3b40 <main+0xa5a>
		__ticks = 1;
    3b30:	fe 01       	movw	r30, r28
    3b32:	e9 59       	subi	r30, 0x99	; 153
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
    3b3e:	64 c0       	rjmp	.+200    	; 0x3c08 <main+0xb22>
	else if (__tmp > 65535)
    3b40:	fe 01       	movw	r30, r28
    3b42:	e7 59       	subi	r30, 0x97	; 151
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	60 81       	ld	r22, Z
    3b48:	71 81       	ldd	r23, Z+1	; 0x01
    3b4a:	82 81       	ldd	r24, Z+2	; 0x02
    3b4c:	93 81       	ldd	r25, Z+3	; 0x03
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	3f ef       	ldi	r19, 0xFF	; 255
    3b52:	4f e7       	ldi	r20, 0x7F	; 127
    3b54:	57 e4       	ldi	r21, 0x47	; 71
    3b56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b5a:	18 16       	cp	r1, r24
    3b5c:	0c f0       	brlt	.+2      	; 0x3b60 <main+0xa7a>
    3b5e:	43 c0       	rjmp	.+134    	; 0x3be6 <main+0xb00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b60:	fe 01       	movw	r30, r28
    3b62:	e3 59       	subi	r30, 0x93	; 147
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	60 81       	ld	r22, Z
    3b68:	71 81       	ldd	r23, Z+1	; 0x01
    3b6a:	82 81       	ldd	r24, Z+2	; 0x02
    3b6c:	93 81       	ldd	r25, Z+3	; 0x03
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	8e 01       	movw	r16, r28
    3b80:	09 59       	subi	r16, 0x99	; 153
    3b82:	1f 4f       	sbci	r17, 0xFF	; 255
    3b84:	bc 01       	movw	r22, r24
    3b86:	cd 01       	movw	r24, r26
    3b88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	f8 01       	movw	r30, r16
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
    3b96:	1f c0       	rjmp	.+62     	; 0x3bd6 <main+0xaf0>
    3b98:	fe 01       	movw	r30, r28
    3b9a:	eb 59       	subi	r30, 0x9B	; 155
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	80 e9       	ldi	r24, 0x90	; 144
    3ba0:	91 e0       	ldi	r25, 0x01	; 1
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	eb 59       	subi	r30, 0x9B	; 155
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	f1 f7       	brne	.-4      	; 0x3bb0 <main+0xaca>
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	eb 59       	subi	r30, 0x9B	; 155
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	91 83       	std	Z+1, r25	; 0x01
    3bbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbe:	de 01       	movw	r26, r28
    3bc0:	a9 59       	subi	r26, 0x99	; 153
    3bc2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e9 59       	subi	r30, 0x99	; 153
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	80 81       	ld	r24, Z
    3bcc:	91 81       	ldd	r25, Z+1	; 0x01
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	11 96       	adiw	r26, 0x01	; 1
    3bd2:	9c 93       	st	X, r25
    3bd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e9 59       	subi	r30, 0x99	; 153
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 81       	ldd	r25, Z+1	; 0x01
    3be0:	00 97       	sbiw	r24, 0x00	; 0
    3be2:	d1 f6       	brne	.-76     	; 0x3b98 <main+0xab2>
    3be4:	28 c0       	rjmp	.+80     	; 0x3c36 <main+0xb50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be6:	8e 01       	movw	r16, r28
    3be8:	09 59       	subi	r16, 0x99	; 153
    3bea:	1f 4f       	sbci	r17, 0xFF	; 255
    3bec:	fe 01       	movw	r30, r28
    3bee:	e7 59       	subi	r30, 0x97	; 151
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	60 81       	ld	r22, Z
    3bf4:	71 81       	ldd	r23, Z+1	; 0x01
    3bf6:	82 81       	ldd	r24, Z+2	; 0x02
    3bf8:	93 81       	ldd	r25, Z+3	; 0x03
    3bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	f8 01       	movw	r30, r16
    3c04:	91 83       	std	Z+1, r25	; 0x01
    3c06:	80 83       	st	Z, r24
    3c08:	de 01       	movw	r26, r28
    3c0a:	ad 59       	subi	r26, 0x9D	; 157
    3c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e9 59       	subi	r30, 0x99	; 153
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	80 81       	ld	r24, Z
    3c16:	91 81       	ldd	r25, Z+1	; 0x01
    3c18:	11 96       	adiw	r26, 0x01	; 1
    3c1a:	9c 93       	st	X, r25
    3c1c:	8e 93       	st	-X, r24
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ed 59       	subi	r30, 0x9D	; 157
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	80 81       	ld	r24, Z
    3c26:	91 81       	ldd	r25, Z+1	; 0x01
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <main+0xb42>
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	ed 59       	subi	r30, 0x9D	; 157
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	91 83       	std	Z+1, r25	; 0x01
    3c34:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 7){
    3c36:	fe 01       	movw	r30, r28
    3c38:	e7 54       	subi	r30, 0x47	; 71
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	80 81       	ld	r24, Z
    3c3e:	87 30       	cpi	r24, 0x07	; 7
    3c40:	09 f0       	breq	.+2      	; 0x3c44 <main+0xb5e>
    3c42:	ce c0       	rjmp	.+412    	; 0x3de0 <main+0xcfa>
			LCD_displayCharacter('*');
    3c44:	8a e2       	ldi	r24, 0x2A	; 42
    3c46:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '7';
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e6 54       	subi	r30, 0x46	; 70
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	80 81       	ld	r24, Z
    3c52:	28 2f       	mov	r18, r24
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	ce 01       	movw	r24, r28
    3c58:	84 54       	subi	r24, 0x44	; 68
    3c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	e2 0f       	add	r30, r18
    3c60:	f3 1f       	adc	r31, r19
    3c62:	87 e3       	ldi	r24, 0x37	; 55
    3c64:	80 83       	st	Z, r24
			c++;
    3c66:	de 01       	movw	r26, r28
    3c68:	a6 54       	subi	r26, 0x46	; 70
    3c6a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	e6 54       	subi	r30, 0x46	; 70
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	80 81       	ld	r24, Z
    3c74:	8f 5f       	subi	r24, 0xFF	; 255
    3c76:	8c 93       	st	X, r24
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e1 5a       	subi	r30, 0xA1	; 161
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	ac e0       	ldi	r26, 0x0C	; 12
    3c84:	b2 e4       	ldi	r27, 0x42	; 66
    3c86:	80 83       	st	Z, r24
    3c88:	91 83       	std	Z+1, r25	; 0x01
    3c8a:	a2 83       	std	Z+2, r26	; 0x02
    3c8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c8e:	8e 01       	movw	r16, r28
    3c90:	05 5a       	subi	r16, 0xA5	; 165
    3c92:	1f 4f       	sbci	r17, 0xFF	; 255
    3c94:	fe 01       	movw	r30, r28
    3c96:	e1 5a       	subi	r30, 0xA1	; 161
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	60 81       	ld	r22, Z
    3c9c:	71 81       	ldd	r23, Z+1	; 0x01
    3c9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ca0:	93 81       	ldd	r25, Z+3	; 0x03
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	4a e7       	ldi	r20, 0x7A	; 122
    3ca8:	55 e4       	ldi	r21, 0x45	; 69
    3caa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	f8 01       	movw	r30, r16
    3cb4:	80 83       	st	Z, r24
    3cb6:	91 83       	std	Z+1, r25	; 0x01
    3cb8:	a2 83       	std	Z+2, r26	; 0x02
    3cba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	e5 5a       	subi	r30, 0xA5	; 165
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	60 81       	ld	r22, Z
    3cc4:	71 81       	ldd	r23, Z+1	; 0x01
    3cc6:	82 81       	ldd	r24, Z+2	; 0x02
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	40 e8       	ldi	r20, 0x80	; 128
    3cd0:	5f e3       	ldi	r21, 0x3F	; 63
    3cd2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3cd6:	88 23       	and	r24, r24
    3cd8:	44 f4       	brge	.+16     	; 0x3cea <main+0xc04>
		__ticks = 1;
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e7 5a       	subi	r30, 0xA7	; 167
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	91 83       	std	Z+1, r25	; 0x01
    3ce6:	80 83       	st	Z, r24
    3ce8:	64 c0       	rjmp	.+200    	; 0x3db2 <main+0xccc>
	else if (__tmp > 65535)
    3cea:	fe 01       	movw	r30, r28
    3cec:	e5 5a       	subi	r30, 0xA5	; 165
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	60 81       	ld	r22, Z
    3cf2:	71 81       	ldd	r23, Z+1	; 0x01
    3cf4:	82 81       	ldd	r24, Z+2	; 0x02
    3cf6:	93 81       	ldd	r25, Z+3	; 0x03
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	3f ef       	ldi	r19, 0xFF	; 255
    3cfc:	4f e7       	ldi	r20, 0x7F	; 127
    3cfe:	57 e4       	ldi	r21, 0x47	; 71
    3d00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d04:	18 16       	cp	r1, r24
    3d06:	0c f0       	brlt	.+2      	; 0x3d0a <main+0xc24>
    3d08:	43 c0       	rjmp	.+134    	; 0x3d90 <main+0xcaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	e1 5a       	subi	r30, 0xA1	; 161
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	60 81       	ld	r22, Z
    3d12:	71 81       	ldd	r23, Z+1	; 0x01
    3d14:	82 81       	ldd	r24, Z+2	; 0x02
    3d16:	93 81       	ldd	r25, Z+3	; 0x03
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	40 e2       	ldi	r20, 0x20	; 32
    3d1e:	51 e4       	ldi	r21, 0x41	; 65
    3d20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	8e 01       	movw	r16, r28
    3d2a:	07 5a       	subi	r16, 0xA7	; 167
    3d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	f8 01       	movw	r30, r16
    3d3c:	91 83       	std	Z+1, r25	; 0x01
    3d3e:	80 83       	st	Z, r24
    3d40:	1f c0       	rjmp	.+62     	; 0x3d80 <main+0xc9a>
    3d42:	fe 01       	movw	r30, r28
    3d44:	e9 5a       	subi	r30, 0xA9	; 169
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 e9       	ldi	r24, 0x90	; 144
    3d4a:	91 e0       	ldi	r25, 0x01	; 1
    3d4c:	91 83       	std	Z+1, r25	; 0x01
    3d4e:	80 83       	st	Z, r24
    3d50:	fe 01       	movw	r30, r28
    3d52:	e9 5a       	subi	r30, 0xA9	; 169
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 81       	ld	r24, Z
    3d58:	91 81       	ldd	r25, Z+1	; 0x01
    3d5a:	01 97       	sbiw	r24, 0x01	; 1
    3d5c:	f1 f7       	brne	.-4      	; 0x3d5a <main+0xc74>
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e9 5a       	subi	r30, 0xA9	; 169
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d68:	de 01       	movw	r26, r28
    3d6a:	a7 5a       	subi	r26, 0xA7	; 167
    3d6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e7 5a       	subi	r30, 0xA7	; 167
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	80 81       	ld	r24, Z
    3d76:	91 81       	ldd	r25, Z+1	; 0x01
    3d78:	01 97       	sbiw	r24, 0x01	; 1
    3d7a:	11 96       	adiw	r26, 0x01	; 1
    3d7c:	9c 93       	st	X, r25
    3d7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d80:	fe 01       	movw	r30, r28
    3d82:	e7 5a       	subi	r30, 0xA7	; 167
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	80 81       	ld	r24, Z
    3d88:	91 81       	ldd	r25, Z+1	; 0x01
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	d1 f6       	brne	.-76     	; 0x3d42 <main+0xc5c>
    3d8e:	28 c0       	rjmp	.+80     	; 0x3de0 <main+0xcfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d90:	8e 01       	movw	r16, r28
    3d92:	07 5a       	subi	r16, 0xA7	; 167
    3d94:	1f 4f       	sbci	r17, 0xFF	; 255
    3d96:	fe 01       	movw	r30, r28
    3d98:	e5 5a       	subi	r30, 0xA5	; 165
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	f8 01       	movw	r30, r16
    3dae:	91 83       	std	Z+1, r25	; 0x01
    3db0:	80 83       	st	Z, r24
    3db2:	de 01       	movw	r26, r28
    3db4:	ab 5a       	subi	r26, 0xAB	; 171
    3db6:	bf 4f       	sbci	r27, 0xFF	; 255
    3db8:	fe 01       	movw	r30, r28
    3dba:	e7 5a       	subi	r30, 0xA7	; 167
    3dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	11 96       	adiw	r26, 0x01	; 1
    3dc4:	9c 93       	st	X, r25
    3dc6:	8e 93       	st	-X, r24
    3dc8:	fe 01       	movw	r30, r28
    3dca:	eb 5a       	subi	r30, 0xAB	; 171
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	80 81       	ld	r24, Z
    3dd0:	91 81       	ldd	r25, Z+1	; 0x01
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	f1 f7       	brne	.-4      	; 0x3dd2 <main+0xcec>
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	eb 5a       	subi	r30, 0xAB	; 171
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	91 83       	std	Z+1, r25	; 0x01
    3dde:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 8){
    3de0:	fe 01       	movw	r30, r28
    3de2:	e7 54       	subi	r30, 0x47	; 71
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	80 81       	ld	r24, Z
    3de8:	88 30       	cpi	r24, 0x08	; 8
    3dea:	09 f0       	breq	.+2      	; 0x3dee <main+0xd08>
    3dec:	ce c0       	rjmp	.+412    	; 0x3f8a <main+0xea4>
			LCD_displayCharacter('*');
    3dee:	8a e2       	ldi	r24, 0x2A	; 42
    3df0:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '8';
    3df4:	fe 01       	movw	r30, r28
    3df6:	e6 54       	subi	r30, 0x46	; 70
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	80 81       	ld	r24, Z
    3dfc:	28 2f       	mov	r18, r24
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	ce 01       	movw	r24, r28
    3e02:	84 54       	subi	r24, 0x44	; 68
    3e04:	9f 4f       	sbci	r25, 0xFF	; 255
    3e06:	fc 01       	movw	r30, r24
    3e08:	e2 0f       	add	r30, r18
    3e0a:	f3 1f       	adc	r31, r19
    3e0c:	88 e3       	ldi	r24, 0x38	; 56
    3e0e:	80 83       	st	Z, r24
			c++;
    3e10:	de 01       	movw	r26, r28
    3e12:	a6 54       	subi	r26, 0x46	; 70
    3e14:	bf 4f       	sbci	r27, 0xFF	; 255
    3e16:	fe 01       	movw	r30, r28
    3e18:	e6 54       	subi	r30, 0x46	; 70
    3e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1c:	80 81       	ld	r24, Z
    3e1e:	8f 5f       	subi	r24, 0xFF	; 255
    3e20:	8c 93       	st	X, r24
    3e22:	fe 01       	movw	r30, r28
    3e24:	ef 5a       	subi	r30, 0xAF	; 175
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	ac e0       	ldi	r26, 0x0C	; 12
    3e2e:	b2 e4       	ldi	r27, 0x42	; 66
    3e30:	80 83       	st	Z, r24
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	a2 83       	std	Z+2, r26	; 0x02
    3e36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e38:	8e 01       	movw	r16, r28
    3e3a:	03 5b       	subi	r16, 0xB3	; 179
    3e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3e:	fe 01       	movw	r30, r28
    3e40:	ef 5a       	subi	r30, 0xAF	; 175
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	4a e7       	ldi	r20, 0x7A	; 122
    3e52:	55 e4       	ldi	r21, 0x45	; 69
    3e54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	f8 01       	movw	r30, r16
    3e5e:	80 83       	st	Z, r24
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	a2 83       	std	Z+2, r26	; 0x02
    3e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e66:	fe 01       	movw	r30, r28
    3e68:	e3 5b       	subi	r30, 0xB3	; 179
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	82 81       	ldd	r24, Z+2	; 0x02
    3e72:	93 81       	ldd	r25, Z+3	; 0x03
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	40 e8       	ldi	r20, 0x80	; 128
    3e7a:	5f e3       	ldi	r21, 0x3F	; 63
    3e7c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e80:	88 23       	and	r24, r24
    3e82:	44 f4       	brge	.+16     	; 0x3e94 <main+0xdae>
		__ticks = 1;
    3e84:	fe 01       	movw	r30, r28
    3e86:	e5 5b       	subi	r30, 0xB5	; 181
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	91 83       	std	Z+1, r25	; 0x01
    3e90:	80 83       	st	Z, r24
    3e92:	64 c0       	rjmp	.+200    	; 0x3f5c <main+0xe76>
	else if (__tmp > 65535)
    3e94:	fe 01       	movw	r30, r28
    3e96:	e3 5b       	subi	r30, 0xB3	; 179
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	60 81       	ld	r22, Z
    3e9c:	71 81       	ldd	r23, Z+1	; 0x01
    3e9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ea0:	93 81       	ldd	r25, Z+3	; 0x03
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	3f ef       	ldi	r19, 0xFF	; 255
    3ea6:	4f e7       	ldi	r20, 0x7F	; 127
    3ea8:	57 e4       	ldi	r21, 0x47	; 71
    3eaa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3eae:	18 16       	cp	r1, r24
    3eb0:	0c f0       	brlt	.+2      	; 0x3eb4 <main+0xdce>
    3eb2:	43 c0       	rjmp	.+134    	; 0x3f3a <main+0xe54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	ef 5a       	subi	r30, 0xAF	; 175
    3eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eba:	60 81       	ld	r22, Z
    3ebc:	71 81       	ldd	r23, Z+1	; 0x01
    3ebe:	82 81       	ldd	r24, Z+2	; 0x02
    3ec0:	93 81       	ldd	r25, Z+3	; 0x03
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	40 e2       	ldi	r20, 0x20	; 32
    3ec8:	51 e4       	ldi	r21, 0x41	; 65
    3eca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	8e 01       	movw	r16, r28
    3ed4:	05 5b       	subi	r16, 0xB5	; 181
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	f8 01       	movw	r30, r16
    3ee6:	91 83       	std	Z+1, r25	; 0x01
    3ee8:	80 83       	st	Z, r24
    3eea:	1f c0       	rjmp	.+62     	; 0x3f2a <main+0xe44>
    3eec:	fe 01       	movw	r30, r28
    3eee:	e7 5b       	subi	r30, 0xB7	; 183
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	80 e9       	ldi	r24, 0x90	; 144
    3ef4:	91 e0       	ldi	r25, 0x01	; 1
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
    3efa:	fe 01       	movw	r30, r28
    3efc:	e7 5b       	subi	r30, 0xB7	; 183
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 81       	ld	r24, Z
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	f1 f7       	brne	.-4      	; 0x3f04 <main+0xe1e>
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e7 5b       	subi	r30, 0xB7	; 183
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	91 83       	std	Z+1, r25	; 0x01
    3f10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f12:	de 01       	movw	r26, r28
    3f14:	a5 5b       	subi	r26, 0xB5	; 181
    3f16:	bf 4f       	sbci	r27, 0xFF	; 255
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e5 5b       	subi	r30, 0xB5	; 181
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	80 81       	ld	r24, Z
    3f20:	91 81       	ldd	r25, Z+1	; 0x01
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	11 96       	adiw	r26, 0x01	; 1
    3f26:	9c 93       	st	X, r25
    3f28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	e5 5b       	subi	r30, 0xB5	; 181
    3f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f30:	80 81       	ld	r24, Z
    3f32:	91 81       	ldd	r25, Z+1	; 0x01
    3f34:	00 97       	sbiw	r24, 0x00	; 0
    3f36:	d1 f6       	brne	.-76     	; 0x3eec <main+0xe06>
    3f38:	28 c0       	rjmp	.+80     	; 0x3f8a <main+0xea4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f3a:	8e 01       	movw	r16, r28
    3f3c:	05 5b       	subi	r16, 0xB5	; 181
    3f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f40:	fe 01       	movw	r30, r28
    3f42:	e3 5b       	subi	r30, 0xB3	; 179
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	60 81       	ld	r22, Z
    3f48:	71 81       	ldd	r23, Z+1	; 0x01
    3f4a:	82 81       	ldd	r24, Z+2	; 0x02
    3f4c:	93 81       	ldd	r25, Z+3	; 0x03
    3f4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	f8 01       	movw	r30, r16
    3f58:	91 83       	std	Z+1, r25	; 0x01
    3f5a:	80 83       	st	Z, r24
    3f5c:	de 01       	movw	r26, r28
    3f5e:	a9 5b       	subi	r26, 0xB9	; 185
    3f60:	bf 4f       	sbci	r27, 0xFF	; 255
    3f62:	fe 01       	movw	r30, r28
    3f64:	e5 5b       	subi	r30, 0xB5	; 181
    3f66:	ff 4f       	sbci	r31, 0xFF	; 255
    3f68:	80 81       	ld	r24, Z
    3f6a:	91 81       	ldd	r25, Z+1	; 0x01
    3f6c:	11 96       	adiw	r26, 0x01	; 1
    3f6e:	9c 93       	st	X, r25
    3f70:	8e 93       	st	-X, r24
    3f72:	fe 01       	movw	r30, r28
    3f74:	e9 5b       	subi	r30, 0xB9	; 185
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	80 81       	ld	r24, Z
    3f7a:	91 81       	ldd	r25, Z+1	; 0x01
    3f7c:	01 97       	sbiw	r24, 0x01	; 1
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <main+0xe96>
    3f80:	fe 01       	movw	r30, r28
    3f82:	e9 5b       	subi	r30, 0xB9	; 185
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	91 83       	std	Z+1, r25	; 0x01
    3f88:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 9){
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	e7 54       	subi	r30, 0x47	; 71
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	80 81       	ld	r24, Z
    3f92:	89 30       	cpi	r24, 0x09	; 9
    3f94:	09 f0       	breq	.+2      	; 0x3f98 <main+0xeb2>
    3f96:	9f c0       	rjmp	.+318    	; 0x40d6 <main+0xff0>
			LCD_displayCharacter('*');
    3f98:	8a e2       	ldi	r24, 0x2A	; 42
    3f9a:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '9';
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e6 54       	subi	r30, 0x46	; 70
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	80 81       	ld	r24, Z
    3fa6:	28 2f       	mov	r18, r24
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	ce 01       	movw	r24, r28
    3fac:	84 54       	subi	r24, 0x44	; 68
    3fae:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	e2 0f       	add	r30, r18
    3fb4:	f3 1f       	adc	r31, r19
    3fb6:	89 e3       	ldi	r24, 0x39	; 57
    3fb8:	80 83       	st	Z, r24
			c++;
    3fba:	de 01       	movw	r26, r28
    3fbc:	a6 54       	subi	r26, 0x46	; 70
    3fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e6 54       	subi	r30, 0x46	; 70
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	80 81       	ld	r24, Z
    3fc8:	8f 5f       	subi	r24, 0xFF	; 255
    3fca:	8c 93       	st	X, r24
    3fcc:	fe 01       	movw	r30, r28
    3fce:	ed 5b       	subi	r30, 0xBD	; 189
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	ac e0       	ldi	r26, 0x0C	; 12
    3fd8:	b2 e4       	ldi	r27, 0x42	; 66
    3fda:	80 83       	st	Z, r24
    3fdc:	91 83       	std	Z+1, r25	; 0x01
    3fde:	a2 83       	std	Z+2, r26	; 0x02
    3fe0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe2:	8e 01       	movw	r16, r28
    3fe4:	01 5c       	subi	r16, 0xC1	; 193
    3fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe8:	fe 01       	movw	r30, r28
    3fea:	ed 5b       	subi	r30, 0xBD	; 189
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	60 81       	ld	r22, Z
    3ff0:	71 81       	ldd	r23, Z+1	; 0x01
    3ff2:	82 81       	ldd	r24, Z+2	; 0x02
    3ff4:	93 81       	ldd	r25, Z+3	; 0x03
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	4a e7       	ldi	r20, 0x7A	; 122
    3ffc:	55 e4       	ldi	r21, 0x45	; 69
    3ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	f8 01       	movw	r30, r16
    4008:	80 83       	st	Z, r24
    400a:	91 83       	std	Z+1, r25	; 0x01
    400c:	a2 83       	std	Z+2, r26	; 0x02
    400e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4010:	fe 01       	movw	r30, r28
    4012:	ff 96       	adiw	r30, 0x3f	; 63
    4014:	60 81       	ld	r22, Z
    4016:	71 81       	ldd	r23, Z+1	; 0x01
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	93 81       	ldd	r25, Z+3	; 0x03
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e8       	ldi	r20, 0x80	; 128
    4022:	5f e3       	ldi	r21, 0x3F	; 63
    4024:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4028:	88 23       	and	r24, r24
    402a:	2c f4       	brge	.+10     	; 0x4036 <main+0xf50>
		__ticks = 1;
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	9e af       	std	Y+62, r25	; 0x3e
    4032:	8d af       	std	Y+61, r24	; 0x3d
    4034:	46 c0       	rjmp	.+140    	; 0x40c2 <main+0xfdc>
	else if (__tmp > 65535)
    4036:	fe 01       	movw	r30, r28
    4038:	ff 96       	adiw	r30, 0x3f	; 63
    403a:	60 81       	ld	r22, Z
    403c:	71 81       	ldd	r23, Z+1	; 0x01
    403e:	82 81       	ldd	r24, Z+2	; 0x02
    4040:	93 81       	ldd	r25, Z+3	; 0x03
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	3f ef       	ldi	r19, 0xFF	; 255
    4046:	4f e7       	ldi	r20, 0x7F	; 127
    4048:	57 e4       	ldi	r21, 0x47	; 71
    404a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    404e:	18 16       	cp	r1, r24
    4050:	64 f5       	brge	.+88     	; 0x40aa <main+0xfc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4052:	fe 01       	movw	r30, r28
    4054:	ed 5b       	subi	r30, 0xBD	; 189
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	60 81       	ld	r22, Z
    405a:	71 81       	ldd	r23, Z+1	; 0x01
    405c:	82 81       	ldd	r24, Z+2	; 0x02
    405e:	93 81       	ldd	r25, Z+3	; 0x03
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	40 e2       	ldi	r20, 0x20	; 32
    4066:	51 e4       	ldi	r21, 0x41	; 65
    4068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	bc 01       	movw	r22, r24
    4072:	cd 01       	movw	r24, r26
    4074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	9e af       	std	Y+62, r25	; 0x3e
    407e:	8d af       	std	Y+61, r24	; 0x3d
    4080:	0f c0       	rjmp	.+30     	; 0x40a0 <main+0xfba>
    4082:	80 e9       	ldi	r24, 0x90	; 144
    4084:	91 e0       	ldi	r25, 0x01	; 1
    4086:	9c af       	std	Y+60, r25	; 0x3c
    4088:	8b af       	std	Y+59, r24	; 0x3b
    408a:	8b ad       	ldd	r24, Y+59	; 0x3b
    408c:	9c ad       	ldd	r25, Y+60	; 0x3c
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	f1 f7       	brne	.-4      	; 0x408e <main+0xfa8>
    4092:	9c af       	std	Y+60, r25	; 0x3c
    4094:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4096:	8d ad       	ldd	r24, Y+61	; 0x3d
    4098:	9e ad       	ldd	r25, Y+62	; 0x3e
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	9e af       	std	Y+62, r25	; 0x3e
    409e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    40a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    40a4:	00 97       	sbiw	r24, 0x00	; 0
    40a6:	69 f7       	brne	.-38     	; 0x4082 <main+0xf9c>
    40a8:	16 c0       	rjmp	.+44     	; 0x40d6 <main+0xff0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40aa:	fe 01       	movw	r30, r28
    40ac:	ff 96       	adiw	r30, 0x3f	; 63
    40ae:	60 81       	ld	r22, Z
    40b0:	71 81       	ldd	r23, Z+1	; 0x01
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	93 81       	ldd	r25, Z+3	; 0x03
    40b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    40ba:	dc 01       	movw	r26, r24
    40bc:	cb 01       	movw	r24, r22
    40be:	9e af       	std	Y+62, r25	; 0x3e
    40c0:	8d af       	std	Y+61, r24	; 0x3d
    40c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    40c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    40c6:	9a af       	std	Y+58, r25	; 0x3a
    40c8:	89 af       	std	Y+57, r24	; 0x39
    40ca:	89 ad       	ldd	r24, Y+57	; 0x39
    40cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	f1 f7       	brne	.-4      	; 0x40ce <main+0xfe8>
    40d2:	9a af       	std	Y+58, r25	; 0x3a
    40d4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(35);
		}

		if(key_Pressed == '*'){
    40d6:	fe 01       	movw	r30, r28
    40d8:	e7 54       	subi	r30, 0x47	; 71
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	80 81       	ld	r24, Z
    40de:	8a 32       	cpi	r24, 0x2A	; 42
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <main+0xffe>
    40e2:	8c c0       	rjmp	.+280    	; 0x41fc <main+0x1116>
			LCD_displayCharacter('*');
    40e4:	8a e2       	ldi	r24, 0x2A	; 42
    40e6:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '*';
    40ea:	fe 01       	movw	r30, r28
    40ec:	e6 54       	subi	r30, 0x46	; 70
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	80 81       	ld	r24, Z
    40f2:	28 2f       	mov	r18, r24
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	ce 01       	movw	r24, r28
    40f8:	84 54       	subi	r24, 0x44	; 68
    40fa:	9f 4f       	sbci	r25, 0xFF	; 255
    40fc:	fc 01       	movw	r30, r24
    40fe:	e2 0f       	add	r30, r18
    4100:	f3 1f       	adc	r31, r19
    4102:	8a e2       	ldi	r24, 0x2A	; 42
    4104:	80 83       	st	Z, r24
			c++;
    4106:	de 01       	movw	r26, r28
    4108:	a6 54       	subi	r26, 0x46	; 70
    410a:	bf 4f       	sbci	r27, 0xFF	; 255
    410c:	fe 01       	movw	r30, r28
    410e:	e6 54       	subi	r30, 0x46	; 70
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	80 81       	ld	r24, Z
    4114:	8f 5f       	subi	r24, 0xFF	; 255
    4116:	8c 93       	st	X, r24
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	ac e0       	ldi	r26, 0x0C	; 12
    411e:	b2 e4       	ldi	r27, 0x42	; 66
    4120:	8d ab       	std	Y+53, r24	; 0x35
    4122:	9e ab       	std	Y+54, r25	; 0x36
    4124:	af ab       	std	Y+55, r26	; 0x37
    4126:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4128:	6d a9       	ldd	r22, Y+53	; 0x35
    412a:	7e a9       	ldd	r23, Y+54	; 0x36
    412c:	8f a9       	ldd	r24, Y+55	; 0x37
    412e:	98 ad       	ldd	r25, Y+56	; 0x38
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	4a e7       	ldi	r20, 0x7A	; 122
    4136:	55 e4       	ldi	r21, 0x45	; 69
    4138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	89 ab       	std	Y+49, r24	; 0x31
    4142:	9a ab       	std	Y+50, r25	; 0x32
    4144:	ab ab       	std	Y+51, r26	; 0x33
    4146:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4148:	69 a9       	ldd	r22, Y+49	; 0x31
    414a:	7a a9       	ldd	r23, Y+50	; 0x32
    414c:	8b a9       	ldd	r24, Y+51	; 0x33
    414e:	9c a9       	ldd	r25, Y+52	; 0x34
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	40 e8       	ldi	r20, 0x80	; 128
    4156:	5f e3       	ldi	r21, 0x3F	; 63
    4158:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    415c:	88 23       	and	r24, r24
    415e:	2c f4       	brge	.+10     	; 0x416a <main+0x1084>
		__ticks = 1;
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	98 ab       	std	Y+48, r25	; 0x30
    4166:	8f a7       	std	Y+47, r24	; 0x2f
    4168:	3f c0       	rjmp	.+126    	; 0x41e8 <main+0x1102>
	else if (__tmp > 65535)
    416a:	69 a9       	ldd	r22, Y+49	; 0x31
    416c:	7a a9       	ldd	r23, Y+50	; 0x32
    416e:	8b a9       	ldd	r24, Y+51	; 0x33
    4170:	9c a9       	ldd	r25, Y+52	; 0x34
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	3f ef       	ldi	r19, 0xFF	; 255
    4176:	4f e7       	ldi	r20, 0x7F	; 127
    4178:	57 e4       	ldi	r21, 0x47	; 71
    417a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    417e:	18 16       	cp	r1, r24
    4180:	4c f5       	brge	.+82     	; 0x41d4 <main+0x10ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4182:	6d a9       	ldd	r22, Y+53	; 0x35
    4184:	7e a9       	ldd	r23, Y+54	; 0x36
    4186:	8f a9       	ldd	r24, Y+55	; 0x37
    4188:	98 ad       	ldd	r25, Y+56	; 0x38
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e2       	ldi	r20, 0x20	; 32
    4190:	51 e4       	ldi	r21, 0x41	; 65
    4192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	98 ab       	std	Y+48, r25	; 0x30
    41a8:	8f a7       	std	Y+47, r24	; 0x2f
    41aa:	0f c0       	rjmp	.+30     	; 0x41ca <main+0x10e4>
    41ac:	80 e9       	ldi	r24, 0x90	; 144
    41ae:	91 e0       	ldi	r25, 0x01	; 1
    41b0:	9e a7       	std	Y+46, r25	; 0x2e
    41b2:	8d a7       	std	Y+45, r24	; 0x2d
    41b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    41b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    41b8:	01 97       	sbiw	r24, 0x01	; 1
    41ba:	f1 f7       	brne	.-4      	; 0x41b8 <main+0x10d2>
    41bc:	9e a7       	std	Y+46, r25	; 0x2e
    41be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    41c2:	98 a9       	ldd	r25, Y+48	; 0x30
    41c4:	01 97       	sbiw	r24, 0x01	; 1
    41c6:	98 ab       	std	Y+48, r25	; 0x30
    41c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    41cc:	98 a9       	ldd	r25, Y+48	; 0x30
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	69 f7       	brne	.-38     	; 0x41ac <main+0x10c6>
    41d2:	14 c0       	rjmp	.+40     	; 0x41fc <main+0x1116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d4:	69 a9       	ldd	r22, Y+49	; 0x31
    41d6:	7a a9       	ldd	r23, Y+50	; 0x32
    41d8:	8b a9       	ldd	r24, Y+51	; 0x33
    41da:	9c a9       	ldd	r25, Y+52	; 0x34
    41dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	98 ab       	std	Y+48, r25	; 0x30
    41e6:	8f a7       	std	Y+47, r24	; 0x2f
    41e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ea:	98 a9       	ldd	r25, Y+48	; 0x30
    41ec:	9c a7       	std	Y+44, r25	; 0x2c
    41ee:	8b a7       	std	Y+43, r24	; 0x2b
    41f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    41f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    41f4:	01 97       	sbiw	r24, 0x01	; 1
    41f6:	f1 f7       	brne	.-4      	; 0x41f4 <main+0x110e>
    41f8:	9c a7       	std	Y+44, r25	; 0x2c
    41fa:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(35);
		}

		if(key_Pressed == 0){
    41fc:	fe 01       	movw	r30, r28
    41fe:	e7 54       	subi	r30, 0x47	; 71
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	80 81       	ld	r24, Z
    4204:	88 23       	and	r24, r24
    4206:	09 f0       	breq	.+2      	; 0x420a <main+0x1124>
    4208:	8c c0       	rjmp	.+280    	; 0x4322 <main+0x123c>
			LCD_displayCharacter('*');
    420a:	8a e2       	ldi	r24, 0x2A	; 42
    420c:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '0';
    4210:	fe 01       	movw	r30, r28
    4212:	e6 54       	subi	r30, 0x46	; 70
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	80 81       	ld	r24, Z
    4218:	28 2f       	mov	r18, r24
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	ce 01       	movw	r24, r28
    421e:	84 54       	subi	r24, 0x44	; 68
    4220:	9f 4f       	sbci	r25, 0xFF	; 255
    4222:	fc 01       	movw	r30, r24
    4224:	e2 0f       	add	r30, r18
    4226:	f3 1f       	adc	r31, r19
    4228:	80 e3       	ldi	r24, 0x30	; 48
    422a:	80 83       	st	Z, r24
			c++;
    422c:	de 01       	movw	r26, r28
    422e:	a6 54       	subi	r26, 0x46	; 70
    4230:	bf 4f       	sbci	r27, 0xFF	; 255
    4232:	fe 01       	movw	r30, r28
    4234:	e6 54       	subi	r30, 0x46	; 70
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	80 81       	ld	r24, Z
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	8c 93       	st	X, r24
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	ac e0       	ldi	r26, 0x0C	; 12
    4244:	b2 e4       	ldi	r27, 0x42	; 66
    4246:	8f a3       	std	Y+39, r24	; 0x27
    4248:	98 a7       	std	Y+40, r25	; 0x28
    424a:	a9 a7       	std	Y+41, r26	; 0x29
    424c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424e:	6f a1       	ldd	r22, Y+39	; 0x27
    4250:	78 a5       	ldd	r23, Y+40	; 0x28
    4252:	89 a5       	ldd	r24, Y+41	; 0x29
    4254:	9a a5       	ldd	r25, Y+42	; 0x2a
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	4a e7       	ldi	r20, 0x7A	; 122
    425c:	55 e4       	ldi	r21, 0x45	; 69
    425e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	8b a3       	std	Y+35, r24	; 0x23
    4268:	9c a3       	std	Y+36, r25	; 0x24
    426a:	ad a3       	std	Y+37, r26	; 0x25
    426c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    426e:	6b a1       	ldd	r22, Y+35	; 0x23
    4270:	7c a1       	ldd	r23, Y+36	; 0x24
    4272:	8d a1       	ldd	r24, Y+37	; 0x25
    4274:	9e a1       	ldd	r25, Y+38	; 0x26
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	40 e8       	ldi	r20, 0x80	; 128
    427c:	5f e3       	ldi	r21, 0x3F	; 63
    427e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4282:	88 23       	and	r24, r24
    4284:	2c f4       	brge	.+10     	; 0x4290 <main+0x11aa>
		__ticks = 1;
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	9a a3       	std	Y+34, r25	; 0x22
    428c:	89 a3       	std	Y+33, r24	; 0x21
    428e:	3f c0       	rjmp	.+126    	; 0x430e <main+0x1228>
	else if (__tmp > 65535)
    4290:	6b a1       	ldd	r22, Y+35	; 0x23
    4292:	7c a1       	ldd	r23, Y+36	; 0x24
    4294:	8d a1       	ldd	r24, Y+37	; 0x25
    4296:	9e a1       	ldd	r25, Y+38	; 0x26
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	3f ef       	ldi	r19, 0xFF	; 255
    429c:	4f e7       	ldi	r20, 0x7F	; 127
    429e:	57 e4       	ldi	r21, 0x47	; 71
    42a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    42a4:	18 16       	cp	r1, r24
    42a6:	4c f5       	brge	.+82     	; 0x42fa <main+0x1214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a8:	6f a1       	ldd	r22, Y+39	; 0x27
    42aa:	78 a5       	ldd	r23, Y+40	; 0x28
    42ac:	89 a5       	ldd	r24, Y+41	; 0x29
    42ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	40 e2       	ldi	r20, 0x20	; 32
    42b6:	51 e4       	ldi	r21, 0x41	; 65
    42b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	bc 01       	movw	r22, r24
    42c2:	cd 01       	movw	r24, r26
    42c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42c8:	dc 01       	movw	r26, r24
    42ca:	cb 01       	movw	r24, r22
    42cc:	9a a3       	std	Y+34, r25	; 0x22
    42ce:	89 a3       	std	Y+33, r24	; 0x21
    42d0:	0f c0       	rjmp	.+30     	; 0x42f0 <main+0x120a>
    42d2:	80 e9       	ldi	r24, 0x90	; 144
    42d4:	91 e0       	ldi	r25, 0x01	; 1
    42d6:	98 a3       	std	Y+32, r25	; 0x20
    42d8:	8f 8f       	std	Y+31, r24	; 0x1f
    42da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42dc:	98 a1       	ldd	r25, Y+32	; 0x20
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	f1 f7       	brne	.-4      	; 0x42de <main+0x11f8>
    42e2:	98 a3       	std	Y+32, r25	; 0x20
    42e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e6:	89 a1       	ldd	r24, Y+33	; 0x21
    42e8:	9a a1       	ldd	r25, Y+34	; 0x22
    42ea:	01 97       	sbiw	r24, 0x01	; 1
    42ec:	9a a3       	std	Y+34, r25	; 0x22
    42ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42f0:	89 a1       	ldd	r24, Y+33	; 0x21
    42f2:	9a a1       	ldd	r25, Y+34	; 0x22
    42f4:	00 97       	sbiw	r24, 0x00	; 0
    42f6:	69 f7       	brne	.-38     	; 0x42d2 <main+0x11ec>
    42f8:	14 c0       	rjmp	.+40     	; 0x4322 <main+0x123c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42fa:	6b a1       	ldd	r22, Y+35	; 0x23
    42fc:	7c a1       	ldd	r23, Y+36	; 0x24
    42fe:	8d a1       	ldd	r24, Y+37	; 0x25
    4300:	9e a1       	ldd	r25, Y+38	; 0x26
    4302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	9a a3       	std	Y+34, r25	; 0x22
    430c:	89 a3       	std	Y+33, r24	; 0x21
    430e:	89 a1       	ldd	r24, Y+33	; 0x21
    4310:	9a a1       	ldd	r25, Y+34	; 0x22
    4312:	9e 8f       	std	Y+30, r25	; 0x1e
    4314:	8d 8f       	std	Y+29, r24	; 0x1d
    4316:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4318:	9e 8d       	ldd	r25, Y+30	; 0x1e
    431a:	01 97       	sbiw	r24, 0x01	; 1
    431c:	f1 f7       	brne	.-4      	; 0x431a <main+0x1234>
    431e:	9e 8f       	std	Y+30, r25	; 0x1e
    4320:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(35);
		}

		if(key_Pressed == '#'){
    4322:	fe 01       	movw	r30, r28
    4324:	e7 54       	subi	r30, 0x47	; 71
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	80 81       	ld	r24, Z
    432a:	83 32       	cpi	r24, 0x23	; 35
    432c:	09 f0       	breq	.+2      	; 0x4330 <main+0x124a>
    432e:	8c c0       	rjmp	.+280    	; 0x4448 <main+0x1362>
			LCD_displayCharacter('*');
    4330:	8a e2       	ldi	r24, 0x2A	; 42
    4332:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_displayCharacter>
			pressed_Keys[c] = '#';
    4336:	fe 01       	movw	r30, r28
    4338:	e6 54       	subi	r30, 0x46	; 70
    433a:	ff 4f       	sbci	r31, 0xFF	; 255
    433c:	80 81       	ld	r24, Z
    433e:	28 2f       	mov	r18, r24
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	ce 01       	movw	r24, r28
    4344:	84 54       	subi	r24, 0x44	; 68
    4346:	9f 4f       	sbci	r25, 0xFF	; 255
    4348:	fc 01       	movw	r30, r24
    434a:	e2 0f       	add	r30, r18
    434c:	f3 1f       	adc	r31, r19
    434e:	83 e2       	ldi	r24, 0x23	; 35
    4350:	80 83       	st	Z, r24
			c++;
    4352:	de 01       	movw	r26, r28
    4354:	a6 54       	subi	r26, 0x46	; 70
    4356:	bf 4f       	sbci	r27, 0xFF	; 255
    4358:	fe 01       	movw	r30, r28
    435a:	e6 54       	subi	r30, 0x46	; 70
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	80 81       	ld	r24, Z
    4360:	8f 5f       	subi	r24, 0xFF	; 255
    4362:	8c 93       	st	X, r24
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	ac e0       	ldi	r26, 0x0C	; 12
    436a:	b2 e4       	ldi	r27, 0x42	; 66
    436c:	89 8f       	std	Y+25, r24	; 0x19
    436e:	9a 8f       	std	Y+26, r25	; 0x1a
    4370:	ab 8f       	std	Y+27, r26	; 0x1b
    4372:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4374:	69 8d       	ldd	r22, Y+25	; 0x19
    4376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    437a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	4a e7       	ldi	r20, 0x7A	; 122
    4382:	55 e4       	ldi	r21, 0x45	; 69
    4384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	8d 8b       	std	Y+21, r24	; 0x15
    438e:	9e 8b       	std	Y+22, r25	; 0x16
    4390:	af 8b       	std	Y+23, r26	; 0x17
    4392:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4394:	6d 89       	ldd	r22, Y+21	; 0x15
    4396:	7e 89       	ldd	r23, Y+22	; 0x16
    4398:	8f 89       	ldd	r24, Y+23	; 0x17
    439a:	98 8d       	ldd	r25, Y+24	; 0x18
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	40 e8       	ldi	r20, 0x80	; 128
    43a2:	5f e3       	ldi	r21, 0x3F	; 63
    43a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    43a8:	88 23       	and	r24, r24
    43aa:	2c f4       	brge	.+10     	; 0x43b6 <main+0x12d0>
		__ticks = 1;
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	9c 8b       	std	Y+20, r25	; 0x14
    43b2:	8b 8b       	std	Y+19, r24	; 0x13
    43b4:	3f c0       	rjmp	.+126    	; 0x4434 <main+0x134e>
	else if (__tmp > 65535)
    43b6:	6d 89       	ldd	r22, Y+21	; 0x15
    43b8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ba:	8f 89       	ldd	r24, Y+23	; 0x17
    43bc:	98 8d       	ldd	r25, Y+24	; 0x18
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	3f ef       	ldi	r19, 0xFF	; 255
    43c2:	4f e7       	ldi	r20, 0x7F	; 127
    43c4:	57 e4       	ldi	r21, 0x47	; 71
    43c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    43ca:	18 16       	cp	r1, r24
    43cc:	4c f5       	brge	.+82     	; 0x4420 <main+0x133a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ce:	69 8d       	ldd	r22, Y+25	; 0x19
    43d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	40 e2       	ldi	r20, 0x20	; 32
    43dc:	51 e4       	ldi	r21, 0x41	; 65
    43de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	bc 01       	movw	r22, r24
    43e8:	cd 01       	movw	r24, r26
    43ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43ee:	dc 01       	movw	r26, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	9c 8b       	std	Y+20, r25	; 0x14
    43f4:	8b 8b       	std	Y+19, r24	; 0x13
    43f6:	0f c0       	rjmp	.+30     	; 0x4416 <main+0x1330>
    43f8:	80 e9       	ldi	r24, 0x90	; 144
    43fa:	91 e0       	ldi	r25, 0x01	; 1
    43fc:	9a 8b       	std	Y+18, r25	; 0x12
    43fe:	89 8b       	std	Y+17, r24	; 0x11
    4400:	89 89       	ldd	r24, Y+17	; 0x11
    4402:	9a 89       	ldd	r25, Y+18	; 0x12
    4404:	01 97       	sbiw	r24, 0x01	; 1
    4406:	f1 f7       	brne	.-4      	; 0x4404 <main+0x131e>
    4408:	9a 8b       	std	Y+18, r25	; 0x12
    440a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    440c:	8b 89       	ldd	r24, Y+19	; 0x13
    440e:	9c 89       	ldd	r25, Y+20	; 0x14
    4410:	01 97       	sbiw	r24, 0x01	; 1
    4412:	9c 8b       	std	Y+20, r25	; 0x14
    4414:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4416:	8b 89       	ldd	r24, Y+19	; 0x13
    4418:	9c 89       	ldd	r25, Y+20	; 0x14
    441a:	00 97       	sbiw	r24, 0x00	; 0
    441c:	69 f7       	brne	.-38     	; 0x43f8 <main+0x1312>
    441e:	14 c0       	rjmp	.+40     	; 0x4448 <main+0x1362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4420:	6d 89       	ldd	r22, Y+21	; 0x15
    4422:	7e 89       	ldd	r23, Y+22	; 0x16
    4424:	8f 89       	ldd	r24, Y+23	; 0x17
    4426:	98 8d       	ldd	r25, Y+24	; 0x18
    4428:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	9c 8b       	std	Y+20, r25	; 0x14
    4432:	8b 8b       	std	Y+19, r24	; 0x13
    4434:	8b 89       	ldd	r24, Y+19	; 0x13
    4436:	9c 89       	ldd	r25, Y+20	; 0x14
    4438:	98 8b       	std	Y+16, r25	; 0x10
    443a:	8f 87       	std	Y+15, r24	; 0x0f
    443c:	8f 85       	ldd	r24, Y+15	; 0x0f
    443e:	98 89       	ldd	r25, Y+16	; 0x10
    4440:	01 97       	sbiw	r24, 0x01	; 1
    4442:	f1 f7       	brne	.-4      	; 0x4440 <main+0x135a>
    4444:	98 8b       	std	Y+16, r25	; 0x10
    4446:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(35);
		}

		if(c == Password_Length){
    4448:	fe 01       	movw	r30, r28
    444a:	e6 54       	subi	r30, 0x46	; 70
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	80 81       	ld	r24, Z
    4450:	86 30       	cpi	r24, 0x06	; 6
    4452:	11 f0       	breq	.+4      	; 0x4458 <main+0x1372>
    4454:	0c 94 17 19 	jmp	0x322e	; 0x322e <main+0x148>
			for(int i = 0; i < 5; i++){
    4458:	fe 01       	movw	r30, r28
    445a:	e9 54       	subi	r30, 0x49	; 73
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	11 82       	std	Z+1, r1	; 0x01
    4460:	10 82       	st	Z, r1
    4462:	fe 01       	movw	r30, r28
    4464:	e9 54       	subi	r30, 0x49	; 73
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	80 81       	ld	r24, Z
    446a:	91 81       	ldd	r25, Z+1	; 0x01
    446c:	85 30       	cpi	r24, 0x05	; 5
    446e:	91 05       	cpc	r25, r1
    4470:	14 f0       	brlt	.+4      	; 0x4476 <main+0x1390>
    4472:	0c 94 17 19 	jmp	0x322e	; 0x322e <main+0x148>
				if(pressed_Keys[i] == password[i]){
    4476:	fe 01       	movw	r30, r28
    4478:	e9 54       	subi	r30, 0x49	; 73
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	20 81       	ld	r18, Z
    447e:	31 81       	ldd	r19, Z+1	; 0x01
    4480:	ce 01       	movw	r24, r28
    4482:	84 54       	subi	r24, 0x44	; 68
    4484:	9f 4f       	sbci	r25, 0xFF	; 255
    4486:	fc 01       	movw	r30, r24
    4488:	e2 0f       	add	r30, r18
    448a:	f3 1f       	adc	r31, r19
    448c:	40 81       	ld	r20, Z
    448e:	fe 01       	movw	r30, r28
    4490:	e9 54       	subi	r30, 0x49	; 73
    4492:	ff 4f       	sbci	r31, 0xFF	; 255
    4494:	20 81       	ld	r18, Z
    4496:	31 81       	ldd	r19, Z+1	; 0x01
    4498:	ce 01       	movw	r24, r28
    449a:	8a 53       	subi	r24, 0x3A	; 58
    449c:	9f 4f       	sbci	r25, 0xFF	; 255
    449e:	fc 01       	movw	r30, r24
    44a0:	e2 0f       	add	r30, r18
    44a2:	f3 1f       	adc	r31, r19
    44a4:	80 81       	ld	r24, Z
    44a6:	48 17       	cp	r20, r24
    44a8:	09 f0       	breq	.+2      	; 0x44ac <main+0x13c6>
    44aa:	80 c0       	rjmp	.+256    	; 0x45ac <main+0x14c6>
					LCD_ClearScreen();
    44ac:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <LCD_ClearScreen>
					LCD_displayString("Correct Password");
    44b0:	8f e6       	ldi	r24, 0x6F	; 111
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayString>
    44b8:	80 e0       	ldi	r24, 0x00	; 0
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	ac e0       	ldi	r26, 0x0C	; 12
    44be:	b2 e4       	ldi	r27, 0x42	; 66
    44c0:	8b 87       	std	Y+11, r24	; 0x0b
    44c2:	9c 87       	std	Y+12, r25	; 0x0c
    44c4:	ad 87       	std	Y+13, r26	; 0x0d
    44c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    44cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	4a e7       	ldi	r20, 0x7A	; 122
    44d6:	55 e4       	ldi	r21, 0x45	; 69
    44d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	8f 83       	std	Y+7, r24	; 0x07
    44e2:	98 87       	std	Y+8, r25	; 0x08
    44e4:	a9 87       	std	Y+9, r26	; 0x09
    44e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44e8:	6f 81       	ldd	r22, Y+7	; 0x07
    44ea:	78 85       	ldd	r23, Y+8	; 0x08
    44ec:	89 85       	ldd	r24, Y+9	; 0x09
    44ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	40 e8       	ldi	r20, 0x80	; 128
    44f6:	5f e3       	ldi	r21, 0x3F	; 63
    44f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    44fc:	88 23       	and	r24, r24
    44fe:	2c f4       	brge	.+10     	; 0x450a <main+0x1424>
		__ticks = 1;
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	9e 83       	std	Y+6, r25	; 0x06
    4506:	8d 83       	std	Y+5, r24	; 0x05
    4508:	3f c0       	rjmp	.+126    	; 0x4588 <main+0x14a2>
	else if (__tmp > 65535)
    450a:	6f 81       	ldd	r22, Y+7	; 0x07
    450c:	78 85       	ldd	r23, Y+8	; 0x08
    450e:	89 85       	ldd	r24, Y+9	; 0x09
    4510:	9a 85       	ldd	r25, Y+10	; 0x0a
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	3f ef       	ldi	r19, 0xFF	; 255
    4516:	4f e7       	ldi	r20, 0x7F	; 127
    4518:	57 e4       	ldi	r21, 0x47	; 71
    451a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    451e:	18 16       	cp	r1, r24
    4520:	4c f5       	brge	.+82     	; 0x4574 <main+0x148e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4522:	6b 85       	ldd	r22, Y+11	; 0x0b
    4524:	7c 85       	ldd	r23, Y+12	; 0x0c
    4526:	8d 85       	ldd	r24, Y+13	; 0x0d
    4528:	9e 85       	ldd	r25, Y+14	; 0x0e
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	40 e2       	ldi	r20, 0x20	; 32
    4530:	51 e4       	ldi	r21, 0x41	; 65
    4532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	bc 01       	movw	r22, r24
    453c:	cd 01       	movw	r24, r26
    453e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	9e 83       	std	Y+6, r25	; 0x06
    4548:	8d 83       	std	Y+5, r24	; 0x05
    454a:	0f c0       	rjmp	.+30     	; 0x456a <main+0x1484>
    454c:	80 e9       	ldi	r24, 0x90	; 144
    454e:	91 e0       	ldi	r25, 0x01	; 1
    4550:	9c 83       	std	Y+4, r25	; 0x04
    4552:	8b 83       	std	Y+3, r24	; 0x03
    4554:	8b 81       	ldd	r24, Y+3	; 0x03
    4556:	9c 81       	ldd	r25, Y+4	; 0x04
    4558:	01 97       	sbiw	r24, 0x01	; 1
    455a:	f1 f7       	brne	.-4      	; 0x4558 <main+0x1472>
    455c:	9c 83       	std	Y+4, r25	; 0x04
    455e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4560:	8d 81       	ldd	r24, Y+5	; 0x05
    4562:	9e 81       	ldd	r25, Y+6	; 0x06
    4564:	01 97       	sbiw	r24, 0x01	; 1
    4566:	9e 83       	std	Y+6, r25	; 0x06
    4568:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456a:	8d 81       	ldd	r24, Y+5	; 0x05
    456c:	9e 81       	ldd	r25, Y+6	; 0x06
    456e:	00 97       	sbiw	r24, 0x00	; 0
    4570:	69 f7       	brne	.-38     	; 0x454c <main+0x1466>
    4572:	14 c0       	rjmp	.+40     	; 0x459c <main+0x14b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4574:	6f 81       	ldd	r22, Y+7	; 0x07
    4576:	78 85       	ldd	r23, Y+8	; 0x08
    4578:	89 85       	ldd	r24, Y+9	; 0x09
    457a:	9a 85       	ldd	r25, Y+10	; 0x0a
    457c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	9e 83       	std	Y+6, r25	; 0x06
    4586:	8d 83       	std	Y+5, r24	; 0x05
    4588:	8d 81       	ldd	r24, Y+5	; 0x05
    458a:	9e 81       	ldd	r25, Y+6	; 0x06
    458c:	9a 83       	std	Y+2, r25	; 0x02
    458e:	89 83       	std	Y+1, r24	; 0x01
    4590:	89 81       	ldd	r24, Y+1	; 0x01
    4592:	9a 81       	ldd	r25, Y+2	; 0x02
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	f1 f7       	brne	.-4      	; 0x4594 <main+0x14ae>
    4598:	9a 83       	std	Y+2, r25	; 0x02
    459a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(35);
					LCD_ClearScreen();
    459c:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <LCD_ClearScreen>
					LCD_displayString("Opened Safely");
    45a0:	80 e8       	ldi	r24, 0x80	; 128
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayString>
    45a8:	0c 94 17 19 	jmp	0x322e	; 0x322e <main+0x148>
					break;
				}
				else{
					LCD_ClearScreen();
    45ac:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <LCD_ClearScreen>
					LCD_displayString("Error");
    45b0:	8e e8       	ldi	r24, 0x8E	; 142
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_displayString>
    45b8:	0c 94 17 19 	jmp	0x322e	; 0x322e <main+0x148>

000045bc <__prologue_saves__>:
    45bc:	2f 92       	push	r2
    45be:	3f 92       	push	r3
    45c0:	4f 92       	push	r4
    45c2:	5f 92       	push	r5
    45c4:	6f 92       	push	r6
    45c6:	7f 92       	push	r7
    45c8:	8f 92       	push	r8
    45ca:	9f 92       	push	r9
    45cc:	af 92       	push	r10
    45ce:	bf 92       	push	r11
    45d0:	cf 92       	push	r12
    45d2:	df 92       	push	r13
    45d4:	ef 92       	push	r14
    45d6:	ff 92       	push	r15
    45d8:	0f 93       	push	r16
    45da:	1f 93       	push	r17
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
    45e0:	cd b7       	in	r28, 0x3d	; 61
    45e2:	de b7       	in	r29, 0x3e	; 62
    45e4:	ca 1b       	sub	r28, r26
    45e6:	db 0b       	sbc	r29, r27
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	f8 94       	cli
    45ec:	de bf       	out	0x3e, r29	; 62
    45ee:	0f be       	out	0x3f, r0	; 63
    45f0:	cd bf       	out	0x3d, r28	; 61
    45f2:	09 94       	ijmp

000045f4 <__epilogue_restores__>:
    45f4:	2a 88       	ldd	r2, Y+18	; 0x12
    45f6:	39 88       	ldd	r3, Y+17	; 0x11
    45f8:	48 88       	ldd	r4, Y+16	; 0x10
    45fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    45fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    45fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    4600:	8c 84       	ldd	r8, Y+12	; 0x0c
    4602:	9b 84       	ldd	r9, Y+11	; 0x0b
    4604:	aa 84       	ldd	r10, Y+10	; 0x0a
    4606:	b9 84       	ldd	r11, Y+9	; 0x09
    4608:	c8 84       	ldd	r12, Y+8	; 0x08
    460a:	df 80       	ldd	r13, Y+7	; 0x07
    460c:	ee 80       	ldd	r14, Y+6	; 0x06
    460e:	fd 80       	ldd	r15, Y+5	; 0x05
    4610:	0c 81       	ldd	r16, Y+4	; 0x04
    4612:	1b 81       	ldd	r17, Y+3	; 0x03
    4614:	aa 81       	ldd	r26, Y+2	; 0x02
    4616:	b9 81       	ldd	r27, Y+1	; 0x01
    4618:	ce 0f       	add	r28, r30
    461a:	d1 1d       	adc	r29, r1
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	f8 94       	cli
    4620:	de bf       	out	0x3e, r29	; 62
    4622:	0f be       	out	0x3f, r0	; 63
    4624:	cd bf       	out	0x3d, r28	; 61
    4626:	ed 01       	movw	r28, r26
    4628:	08 95       	ret

0000462a <_exit>:
    462a:	f8 94       	cli

0000462c <__stop_program>:
    462c:	ff cf       	rjmp	.-2      	; 0x462c <__stop_program>
