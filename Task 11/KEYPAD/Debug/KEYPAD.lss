
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003614  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00003614  00003688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000279c  00000000  00000000  000036cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000db0  00000000  00000000  00005e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000099fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a7ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ab99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b367  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7f 10 	call	0x20fe	; 0x20fe <main>
      7a:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e9       	ldi	r26, 0x9A	; 154
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e9       	ldi	r24, 0x9A	; 154
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <LCD_setPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <LCD_setPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <LCD_setPinDirection+0x1c>
     b50:	d5 c0       	rjmp	.+426    	; 0xcfc <LCD_setPinDirection+0x1c6>
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	08 f0       	brcs	.+2      	; 0xb5a <LCD_setPinDirection+0x24>
     b58:	d1 c0       	rjmp	.+418    	; 0xcfc <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <LCD_setPinDirection+0x3a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <LCD_setPinDirection+0xc0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <LCD_setPinDirection+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <LCD_setPinDirection+0x68>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <LCD_setPinDirection+0x1c6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <LCD_setPinDirection+0x5a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <LCD_setPinDirection+0x118>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <LCD_setPinDirection+0x66>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <LCD_setPinDirection+0x170>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == AVR_PIN_OUTPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <LCD_setPinDirection+0x8c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <LCD_setPinDirection+0x88>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <LCD_setPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <LCD_setPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == AVR_PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <LCD_setPinDirection+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <LCD_setPinDirection+0xe0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <LCD_setPinDirection+0x10c>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <LCD_setPinDirection+0x108>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == AVR_PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <LCD_setPinDirection+0x13c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <LCD_setPinDirection+0x138>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <LCD_setPinDirection+0x164>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <LCD_setPinDirection+0x160>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == AVR_PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <LCD_setPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <LCD_setPinDirection+0x190>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <LCD_setPinDirection+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <LCD_setPinDirection+0x1b8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <LCD_setPinValue+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <LCD_setPinValue+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	08 f0       	brcs	.+2      	; 0xd28 <LCD_setPinValue+0x1c>
     d26:	d5 c0       	rjmp	.+426    	; 0xed2 <LCD_setPinValue+0x1c6>
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <LCD_setPinValue+0x24>
     d2e:	d1 c0       	rjmp	.+418    	; 0xed2 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <LCD_setPinValue+0x3a>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <LCD_setPinValue+0xc0>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <LCD_setPinValue+0x4e>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	71 f0       	breq	.+28     	; 0xd74 <LCD_setPinValue+0x68>
     d58:	bc c0       	rjmp	.+376    	; 0xed2 <LCD_setPinValue+0x1c6>
     d5a:	2c 81       	ldd	r18, Y+4	; 0x04
     d5c:	3d 81       	ldd	r19, Y+5	; 0x05
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <LCD_setPinValue+0x5a>
     d64:	5f c0       	rjmp	.+190    	; 0xe24 <LCD_setPinValue+0x118>
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <LCD_setPinValue+0x66>
     d70:	85 c0       	rjmp	.+266    	; 0xe7c <LCD_setPinValue+0x170>
     d72:	af c0       	rjmp	.+350    	; 0xed2 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d7a:	ab e3       	ldi	r26, 0x3B	; 59
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e3       	ldi	r30, 0x3B	; 59
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <LCD_setPinValue+0x8c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <LCD_setPinValue+0x88>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	98 c0       	rjmp	.+304    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <LCD_setPinValue+0xb4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <LCD_setPinValue+0xb0>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	83 c0       	rjmp	.+262    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <LCD_setPinValue+0xe4>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <LCD_setPinValue+0xe0>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	6c c0       	rjmp	.+216    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <LCD_setPinValue+0x10c>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <LCD_setPinValue+0x108>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	57 c0       	rjmp	.+174    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <LCD_setPinValue+0x13c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <LCD_setPinValue+0x138>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	40 c0       	rjmp	.+128    	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <LCD_setPinValue+0x164>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <LCD_setPinValue+0x160>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	2b c0       	rjmp	.+86     	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e82:	a2 e3       	ldi	r26, 0x32	; 50
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e2 e3       	ldi	r30, 0x32	; 50
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <LCD_setPinValue+0x194>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <LCD_setPinValue+0x190>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <LCD_setPinValue+0x1bc>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <LCD_setPinValue+0x1b8>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <LCD_getPinValue+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <LCD_getPinValue+0x8>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
     ef4:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <LCD_getPinValue+0x1c>
     efc:	84 c0       	rjmp	.+264    	; 0x1006 <LCD_getPinValue+0x124>
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	08 f0       	brcs	.+2      	; 0xf06 <LCD_getPinValue+0x24>
     f04:	80 c0       	rjmp	.+256    	; 0x1006 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	2c 83       	std	Y+4, r18	; 0x04
     f10:	4c 81       	ldd	r20, Y+4	; 0x04
     f12:	5d 81       	ldd	r21, Y+5	; 0x05
     f14:	41 30       	cpi	r20, 0x01	; 1
     f16:	51 05       	cpc	r21, r1
     f18:	79 f1       	breq	.+94     	; 0xf78 <LCD_getPinValue+0x96>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	91 05       	cpc	r25, r1
     f22:	34 f4       	brge	.+12     	; 0xf30 <LCD_getPinValue+0x4e>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	69 f0       	breq	.+26     	; 0xf48 <LCD_getPinValue+0x66>
     f2e:	6b c0       	rjmp	.+214    	; 0x1006 <LCD_getPinValue+0x124>
     f30:	4c 81       	ldd	r20, Y+4	; 0x04
     f32:	5d 81       	ldd	r21, Y+5	; 0x05
     f34:	42 30       	cpi	r20, 0x02	; 2
     f36:	51 05       	cpc	r21, r1
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <LCD_getPinValue+0xc6>
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <LCD_getPinValue+0x64>
     f44:	49 c0       	rjmp	.+146    	; 0xfd8 <LCD_getPinValue+0xf6>
     f46:	5f c0       	rjmp	.+190    	; 0x1006 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f48:	e9 e3       	ldi	r30, 0x39	; 57
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <LCD_getPinValue+0x7e>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <LCD_getPinValue+0x7a>
     f64:	ca 01       	movw	r24, r20
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	88 23       	and	r24, r24
     f6c:	19 f0       	breq	.+6      	; 0xf74 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	49 c0       	rjmp	.+146    	; 0x1006 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	47 c0       	rjmp	.+142    	; 0x1006 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f78:	e6 e3       	ldi	r30, 0x36	; 54
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <LCD_getPinValue+0xae>
     f8c:	55 95       	asr	r21
     f8e:	47 95       	ror	r20
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <LCD_getPinValue+0xaa>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	88 23       	and	r24, r24
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	31 c0       	rjmp	.+98     	; 0x1006 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	2f c0       	rjmp	.+94     	; 0x1006 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fa8:	e3 e3       	ldi	r30, 0x33	; 51
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <LCD_getPinValue+0xde>
     fbc:	55 95       	asr	r21
     fbe:	47 95       	ror	r20
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <LCD_getPinValue+0xda>
     fc4:	ca 01       	movw	r24, r20
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 23       	and	r24, r24
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	19 c0       	rjmp	.+50     	; 0x1006 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fd8:	e0 e3       	ldi	r30, 0x30	; 48
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <LCD_getPinValue+0x10e>
     fec:	55 95       	asr	r21
     fee:	47 95       	ror	r20
     ff0:	8a 95       	dec	r24
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <LCD_getPinValue+0x10a>
     ff4:	ca 01       	movw	r24, r20
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	88 23       	and	r24, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1004:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <LCD_setPortDirection+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <LCD_setPortDirection+0x8>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	90 f5       	brcc	.+100    	; 0x1092 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 83       	std	Y+4, r19	; 0x04
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	d1 f0       	breq	.+52     	; 0x1076 <LCD_setPortDirection+0x5e>
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	3c 81       	ldd	r19, Y+4	; 0x04
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <LCD_setPortDirection+0x3e>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	61 f0       	breq	.+24     	; 0x106c <LCD_setPortDirection+0x54>
    1054:	1e c0       	rjmp	.+60     	; 0x1092 <LCD_setPortDirection+0x7a>
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	81 f0       	breq	.+32     	; 0x1080 <LCD_setPortDirection+0x68>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	81 f0       	breq	.+32     	; 0x108a <LCD_setPortDirection+0x72>
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	80 83       	st	Z, r24
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1076:	e7 e3       	ldi	r30, 0x37	; 55
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 83       	st	Z, r24
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    108a:	e1 e3       	ldi	r30, 0x31	; 49
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
			break;
		}
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <LCD_setPortValue+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <LCD_setPortValue+0x8>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	90 f5       	brcc	.+100    	; 0x111a <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3c 83       	std	Y+4, r19	; 0x04
    10be:	2b 83       	std	Y+3, r18	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <LCD_setPortValue+0x5e>
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <LCD_setPortValue+0x3e>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <LCD_setPortValue+0x54>
    10dc:	1e c0       	rjmp	.+60     	; 0x111a <LCD_setPortValue+0x7a>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <LCD_setPortValue+0x68>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <LCD_setPortValue+0x72>
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    10f4:	eb e3       	ldi	r30, 0x3B	; 59
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	80 83       	st	Z, r24
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	80 83       	st	Z, r24
    1106:	09 c0       	rjmp	.+18     	; 0x111a <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1108:	e5 e3       	ldi	r30, 0x35	; 53
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	04 c0       	rjmp	.+8      	; 0x111a <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
			break;
		}
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <LCD_getPortValue+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <LCD_getPortValue+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1136:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	90 f5       	brcc	.+100    	; 0x11a2 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3c 83       	std	Y+4, r19	; 0x04
    1146:	2b 83       	std	Y+3, r18	; 0x03
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	d1 f0       	breq	.+52     	; 0x1186 <LCD_getPortValue+0x5e>
    1152:	2b 81       	ldd	r18, Y+3	; 0x03
    1154:	3c 81       	ldd	r19, Y+4	; 0x04
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <LCD_getPortValue+0x3e>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 f0       	breq	.+24     	; 0x117c <LCD_getPortValue+0x54>
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <LCD_getPortValue+0x7a>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <LCD_getPortValue+0x68>
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	81 f0       	breq	.+32     	; 0x119a <LCD_getPortValue+0x72>
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    117c:	e9 e3       	ldi	r30, 0x39	; 57
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1186:	e6 e3       	ldi	r30, 0x36	; 54
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    119a:	e0 e3       	ldi	r30, 0x30	; 48
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <Keypad_GetPressedKey>:
 *      Author: Mohamed
 */
#include "Keypad.h"

u8 Keypad_GetPressedKey()
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <Keypad_GetPressedKey+0x6>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    11bc:	1a 82       	std	Y+2, r1	; 0x02
    11be:	4d c0       	rjmp	.+154    	; 0x125a <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    11c0:	ea e3       	ldi	r30, 0x3A	; 58
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	80 e1       	ldi	r24, 0x10	; 16
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <Keypad_GetPressedKey+0x22>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	2a 95       	dec	r18
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <Keypad_GetPressedKey+0x1e>
    11d8:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	80 e1       	ldi	r24, 0x10	; 16
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <Keypad_GetPressedKey+0x3e>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <Keypad_GetPressedKey+0x3a>
    11f4:	80 95       	com	r24
    11f6:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    11f8:	19 82       	std	Y+1, r1	; 0x01
    11fa:	29 c0       	rjmp	.+82     	; 0x124e <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    11fc:	e9 e3       	ldi	r30, 0x39	; 57
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <Keypad_GetPressedKey+0x62>
    1210:	55 95       	asr	r21
    1212:	47 95       	ror	r20
    1214:	8a 95       	dec	r24
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <Keypad_GetPressedKey+0x5e>
    1218:	ca 01       	movw	r24, r20
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	90 70       	andi	r25, 0x00	; 0
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	99 f4       	brne	.+38     	; 0x1248 <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	c9 01       	movw	r24, r18
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	82 0f       	add	r24, r18
    1230:	93 1f       	adc	r25, r19
    1232:	98 2f       	mov	r25, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	89 0f       	add	r24, r25
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	0e 94 32 09 	call	0x1264	; 0x1264 <Keypad_4x3>
				}
			}
		}
	}
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	a0 f2       	brcs	.-88     	; 0x11fc <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey()
{
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	8f 5f       	subi	r24, 0xFF	; 255
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	08 f4       	brcc	.+2      	; 0x1262 <Keypad_GetPressedKey+0xb0>
    1260:	af cf       	rjmp	.-162    	; 0x11c0 <Keypad_GetPressedKey+0xe>
    1262:	ac cf       	rjmp	.-168    	; 0x11bc <Keypad_GetPressedKey+0xa>

00001264 <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <Keypad_4x3+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <Keypad_4x3+0x8>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3c 83       	std	Y+4, r19	; 0x04
    127a:	2b 83       	std	Y+3, r18	; 0x03
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	8a 30       	cpi	r24, 0x0A	; 10
    1282:	91 05       	cpc	r25, r1
    1284:	81 f0       	breq	.+32     	; 0x12a6 <Keypad_4x3+0x42>
    1286:	2b 81       	ldd	r18, Y+3	; 0x03
    1288:	3c 81       	ldd	r19, Y+4	; 0x04
    128a:	2a 30       	cpi	r18, 0x0A	; 10
    128c:	31 05       	cpc	r19, r1
    128e:	9c f0       	brlt	.+38     	; 0x12b6 <Keypad_4x3+0x52>
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	8b 30       	cpi	r24, 0x0B	; 11
    1296:	91 05       	cpc	r25, r1
    1298:	49 f0       	breq	.+18     	; 0x12ac <Keypad_4x3+0x48>
    129a:	2b 81       	ldd	r18, Y+3	; 0x03
    129c:	3c 81       	ldd	r19, Y+4	; 0x04
    129e:	2c 30       	cpi	r18, 0x0C	; 12
    12a0:	31 05       	cpc	r19, r1
    12a2:	31 f0       	breq	.+12     	; 0x12b0 <Keypad_4x3+0x4c>
    12a4:	08 c0       	rjmp	.+16     	; 0x12b6 <Keypad_4x3+0x52>
	case 10:
		return '*';
    12a6:	3a e2       	ldi	r19, 0x2A	; 42
    12a8:	3a 83       	std	Y+2, r19	; 0x02
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    12ac:	1a 82       	std	Y+2, r1	; 0x02
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    12b0:	83 e2       	ldi	r24, 0x23	; 35
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <Keypad_4x3+0x56>
	default:
		return Num;
    12b6:	99 81       	ldd	r25, Y+1	; 0x01
    12b8:	9a 83       	std	Y+2, r25	; 0x02
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <LCD_sendCommand>:

#include "BIT_MATH.h"
#include "Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	e9 97       	sbiw	r28, 0x39	; 57
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    12e0:	83 e0       	ldi	r24, 0x03	; 3
    12e2:	64 e0       	ldi	r22, 0x04	; 4
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a0 e8       	ldi	r26, 0x80	; 128
    12f0:	bf e3       	ldi	r27, 0x3F	; 63
    12f2:	8d ab       	std	Y+53, r24	; 0x35
    12f4:	9e ab       	std	Y+54, r25	; 0x36
    12f6:	af ab       	std	Y+55, r26	; 0x37
    12f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	6d a9       	ldd	r22, Y+53	; 0x35
    12fc:	7e a9       	ldd	r23, Y+54	; 0x36
    12fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1300:	98 ad       	ldd	r25, Y+56	; 0x38
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a e7       	ldi	r20, 0x7A	; 122
    1308:	55 e4       	ldi	r21, 0x45	; 69
    130a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	89 ab       	std	Y+49, r24	; 0x31
    1314:	9a ab       	std	Y+50, r25	; 0x32
    1316:	ab ab       	std	Y+51, r26	; 0x33
    1318:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    131a:	69 a9       	ldd	r22, Y+49	; 0x31
    131c:	7a a9       	ldd	r23, Y+50	; 0x32
    131e:	8b a9       	ldd	r24, Y+51	; 0x33
    1320:	9c a9       	ldd	r25, Y+52	; 0x34
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	2c f4       	brge	.+10     	; 0x133c <LCD_sendCommand+0x72>
		__ticks = 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	98 ab       	std	Y+48, r25	; 0x30
    1338:	8f a7       	std	Y+47, r24	; 0x2f
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    133c:	69 a9       	ldd	r22, Y+49	; 0x31
    133e:	7a a9       	ldd	r23, Y+50	; 0x32
    1340:	8b a9       	ldd	r24, Y+51	; 0x33
    1342:	9c a9       	ldd	r25, Y+52	; 0x34
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	57 e4       	ldi	r21, 0x47	; 71
    134c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1350:	18 16       	cp	r1, r24
    1352:	4c f5       	brge	.+82     	; 0x13a6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1354:	6d a9       	ldd	r22, Y+53	; 0x35
    1356:	7e a9       	ldd	r23, Y+54	; 0x36
    1358:	8f a9       	ldd	r24, Y+55	; 0x37
    135a:	98 ad       	ldd	r25, Y+56	; 0x38
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e2       	ldi	r20, 0x20	; 32
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	98 ab       	std	Y+48, r25	; 0x30
    137a:	8f a7       	std	Y+47, r24	; 0x2f
    137c:	0f c0       	rjmp	.+30     	; 0x139c <LCD_sendCommand+0xd2>
    137e:	80 e9       	ldi	r24, 0x90	; 144
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	9e a7       	std	Y+46, r25	; 0x2e
    1384:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1386:	8d a5       	ldd	r24, Y+45	; 0x2d
    1388:	9e a5       	ldd	r25, Y+46	; 0x2e
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <LCD_sendCommand+0xc0>
    138e:	9e a7       	std	Y+46, r25	; 0x2e
    1390:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	8f a5       	ldd	r24, Y+47	; 0x2f
    1394:	98 a9       	ldd	r25, Y+48	; 0x30
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	98 ab       	std	Y+48, r25	; 0x30
    139a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	8f a5       	ldd	r24, Y+47	; 0x2f
    139e:	98 a9       	ldd	r25, Y+48	; 0x30
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f7       	brne	.-38     	; 0x137e <LCD_sendCommand+0xb4>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a6:	69 a9       	ldd	r22, Y+49	; 0x31
    13a8:	7a a9       	ldd	r23, Y+50	; 0x32
    13aa:	8b a9       	ldd	r24, Y+51	; 0x33
    13ac:	9c a9       	ldd	r25, Y+52	; 0x34
    13ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	98 ab       	std	Y+48, r25	; 0x30
    13b8:	8f a7       	std	Y+47, r24	; 0x2f
    13ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    13bc:	98 a9       	ldd	r25, Y+48	; 0x30
    13be:	9c a7       	std	Y+44, r25	; 0x2c
    13c0:	8b a7       	std	Y+43, r24	; 0x2b
    13c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    13c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <LCD_sendCommand+0xfc>
    13ca:	9c a7       	std	Y+44, r25	; 0x2c
    13cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	65 e0       	ldi	r22, 0x05	; 5
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a0 e8       	ldi	r26, 0x80	; 128
    13de:	bf e3       	ldi	r27, 0x3F	; 63
    13e0:	8f a3       	std	Y+39, r24	; 0x27
    13e2:	98 a7       	std	Y+40, r25	; 0x28
    13e4:	a9 a7       	std	Y+41, r26	; 0x29
    13e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e8:	6f a1       	ldd	r22, Y+39	; 0x27
    13ea:	78 a5       	ldd	r23, Y+40	; 0x28
    13ec:	89 a5       	ldd	r24, Y+41	; 0x29
    13ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a e7       	ldi	r20, 0x7A	; 122
    13f6:	55 e4       	ldi	r21, 0x45	; 69
    13f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	8b a3       	std	Y+35, r24	; 0x23
    1402:	9c a3       	std	Y+36, r25	; 0x24
    1404:	ad a3       	std	Y+37, r26	; 0x25
    1406:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1408:	6b a1       	ldd	r22, Y+35	; 0x23
    140a:	7c a1       	ldd	r23, Y+36	; 0x24
    140c:	8d a1       	ldd	r24, Y+37	; 0x25
    140e:	9e a1       	ldd	r25, Y+38	; 0x26
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    141c:	88 23       	and	r24, r24
    141e:	2c f4       	brge	.+10     	; 0x142a <LCD_sendCommand+0x160>
		__ticks = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9a a3       	std	Y+34, r25	; 0x22
    1426:	89 a3       	std	Y+33, r24	; 0x21
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    142a:	6b a1       	ldd	r22, Y+35	; 0x23
    142c:	7c a1       	ldd	r23, Y+36	; 0x24
    142e:	8d a1       	ldd	r24, Y+37	; 0x25
    1430:	9e a1       	ldd	r25, Y+38	; 0x26
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	4c f5       	brge	.+82     	; 0x1494 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	6f a1       	ldd	r22, Y+39	; 0x27
    1444:	78 a5       	ldd	r23, Y+40	; 0x28
    1446:	89 a5       	ldd	r24, Y+41	; 0x29
    1448:	9a a5       	ldd	r25, Y+42	; 0x2a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
    146a:	0f c0       	rjmp	.+30     	; 0x148a <LCD_sendCommand+0x1c0>
    146c:	80 e9       	ldi	r24, 0x90	; 144
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	98 a3       	std	Y+32, r25	; 0x20
    1472:	8f 8f       	std	Y+31, r24	; 0x1f
    1474:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1476:	98 a1       	ldd	r25, Y+32	; 0x20
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCD_sendCommand+0x1ae>
    147c:	98 a3       	std	Y+32, r25	; 0x20
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	89 a1       	ldd	r24, Y+33	; 0x21
    1482:	9a a1       	ldd	r25, Y+34	; 0x22
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	9a a3       	std	Y+34, r25	; 0x22
    1488:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148a:	89 a1       	ldd	r24, Y+33	; 0x21
    148c:	9a a1       	ldd	r25, Y+34	; 0x22
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	69 f7       	brne	.-38     	; 0x146c <LCD_sendCommand+0x1a2>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1494:	6b a1       	ldd	r22, Y+35	; 0x23
    1496:	7c a1       	ldd	r23, Y+36	; 0x24
    1498:	8d a1       	ldd	r24, Y+37	; 0x25
    149a:	9e a1       	ldd	r25, Y+38	; 0x26
    149c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9a a3       	std	Y+34, r25	; 0x22
    14a6:	89 a3       	std	Y+33, r24	; 0x21
    14a8:	89 a1       	ldd	r24, Y+33	; 0x21
    14aa:	9a a1       	ldd	r25, Y+34	; 0x22
    14ac:	9e 8f       	std	Y+30, r25	; 0x1e
    14ae:	8d 8f       	std	Y+29, r24	; 0x1d
    14b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <LCD_sendCommand+0x1ea>
    14b8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	69 ad       	ldd	r22, Y+57	; 0x39
    14c0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <LCD_setPortValue>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a0 e8       	ldi	r26, 0x80	; 128
    14ca:	bf e3       	ldi	r27, 0x3F	; 63
    14cc:	89 8f       	std	Y+25, r24	; 0x19
    14ce:	9a 8f       	std	Y+26, r25	; 0x1a
    14d0:	ab 8f       	std	Y+27, r26	; 0x1b
    14d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d4:	69 8d       	ldd	r22, Y+25	; 0x19
    14d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	4a e7       	ldi	r20, 0x7A	; 122
    14e2:	55 e4       	ldi	r21, 0x45	; 69
    14e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	8d 8b       	std	Y+21, r24	; 0x15
    14ee:	9e 8b       	std	Y+22, r25	; 0x16
    14f0:	af 8b       	std	Y+23, r26	; 0x17
    14f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14f4:	6d 89       	ldd	r22, Y+21	; 0x15
    14f6:	7e 89       	ldd	r23, Y+22	; 0x16
    14f8:	8f 89       	ldd	r24, Y+23	; 0x17
    14fa:	98 8d       	ldd	r25, Y+24	; 0x18
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1508:	88 23       	and	r24, r24
    150a:	2c f4       	brge	.+10     	; 0x1516 <LCD_sendCommand+0x24c>
		__ticks = 1;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	9c 8b       	std	Y+20, r25	; 0x14
    1512:	8b 8b       	std	Y+19, r24	; 0x13
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1516:	6d 89       	ldd	r22, Y+21	; 0x15
    1518:	7e 89       	ldd	r23, Y+22	; 0x16
    151a:	8f 89       	ldd	r24, Y+23	; 0x17
    151c:	98 8d       	ldd	r25, Y+24	; 0x18
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    152a:	18 16       	cp	r1, r24
    152c:	4c f5       	brge	.+82     	; 0x1580 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	69 8d       	ldd	r22, Y+25	; 0x19
    1530:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9c 8b       	std	Y+20, r25	; 0x14
    1554:	8b 8b       	std	Y+19, r24	; 0x13
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <LCD_sendCommand+0x2ac>
    1558:	80 e9       	ldi	r24, 0x90	; 144
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	9a 8b       	std	Y+18, r25	; 0x12
    155e:	89 8b       	std	Y+17, r24	; 0x11
    1560:	89 89       	ldd	r24, Y+17	; 0x11
    1562:	9a 89       	ldd	r25, Y+18	; 0x12
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_sendCommand+0x29a>
    1568:	9a 8b       	std	Y+18, r25	; 0x12
    156a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156c:	8b 89       	ldd	r24, Y+19	; 0x13
    156e:	9c 89       	ldd	r25, Y+20	; 0x14
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	9c 8b       	std	Y+20, r25	; 0x14
    1574:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1576:	8b 89       	ldd	r24, Y+19	; 0x13
    1578:	9c 89       	ldd	r25, Y+20	; 0x14
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	69 f7       	brne	.-38     	; 0x1558 <LCD_sendCommand+0x28e>
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1580:	6d 89       	ldd	r22, Y+21	; 0x15
    1582:	7e 89       	ldd	r23, Y+22	; 0x16
    1584:	8f 89       	ldd	r24, Y+23	; 0x17
    1586:	98 8d       	ldd	r25, Y+24	; 0x18
    1588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9c 8b       	std	Y+20, r25	; 0x14
    1592:	8b 8b       	std	Y+19, r24	; 0x13
    1594:	8b 89       	ldd	r24, Y+19	; 0x13
    1596:	9c 89       	ldd	r25, Y+20	; 0x14
    1598:	98 8b       	std	Y+16, r25	; 0x10
    159a:	8f 87       	std	Y+15, r24	; 0x0f
    159c:	8f 85       	ldd	r24, Y+15	; 0x0f
    159e:	98 89       	ldd	r25, Y+16	; 0x10
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <LCD_sendCommand+0x2d6>
    15a4:	98 8b       	std	Y+16, r25	; 0x10
    15a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	65 e0       	ldi	r22, 0x05	; 5
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a0 e8       	ldi	r26, 0x80	; 128
    15b8:	bf e3       	ldi	r27, 0x3F	; 63
    15ba:	8b 87       	std	Y+11, r24	; 0x0b
    15bc:	9c 87       	std	Y+12, r25	; 0x0c
    15be:	ad 87       	std	Y+13, r26	; 0x0d
    15c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a e7       	ldi	r20, 0x7A	; 122
    15d0:	55 e4       	ldi	r21, 0x45	; 69
    15d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	8f 83       	std	Y+7, r24	; 0x07
    15dc:	98 87       	std	Y+8, r25	; 0x08
    15de:	a9 87       	std	Y+9, r26	; 0x09
    15e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	2c f4       	brge	.+10     	; 0x1604 <LCD_sendCommand+0x33a>
		__ticks = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1618:	18 16       	cp	r1, r24
    161a:	4c f5       	brge	.+82     	; 0x166e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161c:	6b 85       	ldd	r22, Y+11	; 0x0b
    161e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1620:	8d 85       	ldd	r24, Y+13	; 0x0d
    1622:	9e 85       	ldd	r25, Y+14	; 0x0e
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e2       	ldi	r20, 0x20	; 32
    162a:	51 e4       	ldi	r21, 0x41	; 65
    162c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <LCD_sendCommand+0x39a>
    1646:	80 e9       	ldi	r24, 0x90	; 144
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <LCD_sendCommand+0x388>
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	69 f7       	brne	.-38     	; 0x1646 <LCD_sendCommand+0x37c>
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_sendCommand+0x3c4>
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1696:	e9 96       	adiw	r28, 0x39	; 57
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	e9 97       	sbiw	r28, 0x39	; 57
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	64 e0       	ldi	r22, 0x04	; 4
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a0 e8       	ldi	r26, 0x80	; 128
    16ce:	bf e3       	ldi	r27, 0x3F	; 63
    16d0:	8d ab       	std	Y+53, r24	; 0x35
    16d2:	9e ab       	std	Y+54, r25	; 0x36
    16d4:	af ab       	std	Y+55, r26	; 0x37
    16d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	6d a9       	ldd	r22, Y+53	; 0x35
    16da:	7e a9       	ldd	r23, Y+54	; 0x36
    16dc:	8f a9       	ldd	r24, Y+55	; 0x37
    16de:	98 ad       	ldd	r25, Y+56	; 0x38
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4a e7       	ldi	r20, 0x7A	; 122
    16e6:	55 e4       	ldi	r21, 0x45	; 69
    16e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	89 ab       	std	Y+49, r24	; 0x31
    16f2:	9a ab       	std	Y+50, r25	; 0x32
    16f4:	ab ab       	std	Y+51, r26	; 0x33
    16f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16f8:	69 a9       	ldd	r22, Y+49	; 0x31
    16fa:	7a a9       	ldd	r23, Y+50	; 0x32
    16fc:	8b a9       	ldd	r24, Y+51	; 0x33
    16fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    170c:	88 23       	and	r24, r24
    170e:	2c f4       	brge	.+10     	; 0x171a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	98 ab       	std	Y+48, r25	; 0x30
    1716:	8f a7       	std	Y+47, r24	; 0x2f
    1718:	3f c0       	rjmp	.+126    	; 0x1798 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    171a:	69 a9       	ldd	r22, Y+49	; 0x31
    171c:	7a a9       	ldd	r23, Y+50	; 0x32
    171e:	8b a9       	ldd	r24, Y+51	; 0x33
    1720:	9c a9       	ldd	r25, Y+52	; 0x34
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	57 e4       	ldi	r21, 0x47	; 71
    172a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    172e:	18 16       	cp	r1, r24
    1730:	4c f5       	brge	.+82     	; 0x1784 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	6d a9       	ldd	r22, Y+53	; 0x35
    1734:	7e a9       	ldd	r23, Y+54	; 0x36
    1736:	8f a9       	ldd	r24, Y+55	; 0x37
    1738:	98 ad       	ldd	r25, Y+56	; 0x38
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	98 ab       	std	Y+48, r25	; 0x30
    1758:	8f a7       	std	Y+47, r24	; 0x2f
    175a:	0f c0       	rjmp	.+30     	; 0x177a <LCD_displayCharacter+0xd2>
    175c:	80 e9       	ldi	r24, 0x90	; 144
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	9e a7       	std	Y+46, r25	; 0x2e
    1762:	8d a7       	std	Y+45, r24	; 0x2d
    1764:	8d a5       	ldd	r24, Y+45	; 0x2d
    1766:	9e a5       	ldd	r25, Y+46	; 0x2e
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <LCD_displayCharacter+0xc0>
    176c:	9e a7       	std	Y+46, r25	; 0x2e
    176e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1770:	8f a5       	ldd	r24, Y+47	; 0x2f
    1772:	98 a9       	ldd	r25, Y+48	; 0x30
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	98 ab       	std	Y+48, r25	; 0x30
    1778:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177a:	8f a5       	ldd	r24, Y+47	; 0x2f
    177c:	98 a9       	ldd	r25, Y+48	; 0x30
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	69 f7       	brne	.-38     	; 0x175c <LCD_displayCharacter+0xb4>
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1784:	69 a9       	ldd	r22, Y+49	; 0x31
    1786:	7a a9       	ldd	r23, Y+50	; 0x32
    1788:	8b a9       	ldd	r24, Y+51	; 0x33
    178a:	9c a9       	ldd	r25, Y+52	; 0x34
    178c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	98 ab       	std	Y+48, r25	; 0x30
    1796:	8f a7       	std	Y+47, r24	; 0x2f
    1798:	8f a5       	ldd	r24, Y+47	; 0x2f
    179a:	98 a9       	ldd	r25, Y+48	; 0x30
    179c:	9c a7       	std	Y+44, r25	; 0x2c
    179e:	8b a7       	std	Y+43, r24	; 0x2b
    17a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <LCD_displayCharacter+0xfc>
    17a8:	9c a7       	std	Y+44, r25	; 0x2c
    17aa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    17ac:	83 e0       	ldi	r24, 0x03	; 3
    17ae:	65 e0       	ldi	r22, 0x05	; 5
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e8       	ldi	r26, 0x80	; 128
    17bc:	bf e3       	ldi	r27, 0x3F	; 63
    17be:	8f a3       	std	Y+39, r24	; 0x27
    17c0:	98 a7       	std	Y+40, r25	; 0x28
    17c2:	a9 a7       	std	Y+41, r26	; 0x29
    17c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c6:	6f a1       	ldd	r22, Y+39	; 0x27
    17c8:	78 a5       	ldd	r23, Y+40	; 0x28
    17ca:	89 a5       	ldd	r24, Y+41	; 0x29
    17cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	4a e7       	ldi	r20, 0x7A	; 122
    17d4:	55 e4       	ldi	r21, 0x45	; 69
    17d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	8b a3       	std	Y+35, r24	; 0x23
    17e0:	9c a3       	std	Y+36, r25	; 0x24
    17e2:	ad a3       	std	Y+37, r26	; 0x25
    17e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17e6:	6b a1       	ldd	r22, Y+35	; 0x23
    17e8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ea:	8d a1       	ldd	r24, Y+37	; 0x25
    17ec:	9e a1       	ldd	r25, Y+38	; 0x26
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e8       	ldi	r20, 0x80	; 128
    17f4:	5f e3       	ldi	r21, 0x3F	; 63
    17f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17fa:	88 23       	and	r24, r24
    17fc:	2c f4       	brge	.+10     	; 0x1808 <LCD_displayCharacter+0x160>
		__ticks = 1;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9a a3       	std	Y+34, r25	; 0x22
    1804:	89 a3       	std	Y+33, r24	; 0x21
    1806:	3f c0       	rjmp	.+126    	; 0x1886 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1808:	6b a1       	ldd	r22, Y+35	; 0x23
    180a:	7c a1       	ldd	r23, Y+36	; 0x24
    180c:	8d a1       	ldd	r24, Y+37	; 0x25
    180e:	9e a1       	ldd	r25, Y+38	; 0x26
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	3f ef       	ldi	r19, 0xFF	; 255
    1814:	4f e7       	ldi	r20, 0x7F	; 127
    1816:	57 e4       	ldi	r21, 0x47	; 71
    1818:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    181c:	18 16       	cp	r1, r24
    181e:	4c f5       	brge	.+82     	; 0x1872 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1820:	6f a1       	ldd	r22, Y+39	; 0x27
    1822:	78 a5       	ldd	r23, Y+40	; 0x28
    1824:	89 a5       	ldd	r24, Y+41	; 0x29
    1826:	9a a5       	ldd	r25, Y+42	; 0x2a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e2       	ldi	r20, 0x20	; 32
    182e:	51 e4       	ldi	r21, 0x41	; 65
    1830:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9a a3       	std	Y+34, r25	; 0x22
    1846:	89 a3       	std	Y+33, r24	; 0x21
    1848:	0f c0       	rjmp	.+30     	; 0x1868 <LCD_displayCharacter+0x1c0>
    184a:	80 e9       	ldi	r24, 0x90	; 144
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	98 a3       	std	Y+32, r25	; 0x20
    1850:	8f 8f       	std	Y+31, r24	; 0x1f
    1852:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1854:	98 a1       	ldd	r25, Y+32	; 0x20
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <LCD_displayCharacter+0x1ae>
    185a:	98 a3       	std	Y+32, r25	; 0x20
    185c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185e:	89 a1       	ldd	r24, Y+33	; 0x21
    1860:	9a a1       	ldd	r25, Y+34	; 0x22
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	9a a3       	std	Y+34, r25	; 0x22
    1866:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1868:	89 a1       	ldd	r24, Y+33	; 0x21
    186a:	9a a1       	ldd	r25, Y+34	; 0x22
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	69 f7       	brne	.-38     	; 0x184a <LCD_displayCharacter+0x1a2>
    1870:	14 c0       	rjmp	.+40     	; 0x189a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1872:	6b a1       	ldd	r22, Y+35	; 0x23
    1874:	7c a1       	ldd	r23, Y+36	; 0x24
    1876:	8d a1       	ldd	r24, Y+37	; 0x25
    1878:	9e a1       	ldd	r25, Y+38	; 0x26
    187a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	9a a3       	std	Y+34, r25	; 0x22
    1884:	89 a3       	std	Y+33, r24	; 0x21
    1886:	89 a1       	ldd	r24, Y+33	; 0x21
    1888:	9a a1       	ldd	r25, Y+34	; 0x22
    188a:	9e 8f       	std	Y+30, r25	; 0x1e
    188c:	8d 8f       	std	Y+29, r24	; 0x1d
    188e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1890:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_displayCharacter+0x1ea>
    1896:	9e 8f       	std	Y+30, r25	; 0x1e
    1898:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	69 ad       	ldd	r22, Y+57	; 0x39
    189e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <LCD_setPortValue>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e8       	ldi	r26, 0x80	; 128
    18a8:	bf e3       	ldi	r27, 0x3F	; 63
    18aa:	89 8f       	std	Y+25, r24	; 0x19
    18ac:	9a 8f       	std	Y+26, r25	; 0x1a
    18ae:	ab 8f       	std	Y+27, r26	; 0x1b
    18b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	69 8d       	ldd	r22, Y+25	; 0x19
    18b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a e7       	ldi	r20, 0x7A	; 122
    18c0:	55 e4       	ldi	r21, 0x45	; 69
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8d 8b       	std	Y+21, r24	; 0x15
    18cc:	9e 8b       	std	Y+22, r25	; 0x16
    18ce:	af 8b       	std	Y+23, r26	; 0x17
    18d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d2:	6d 89       	ldd	r22, Y+21	; 0x15
    18d4:	7e 89       	ldd	r23, Y+22	; 0x16
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	98 8d       	ldd	r25, Y+24	; 0x18
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9c 8b       	std	Y+20, r25	; 0x14
    18f0:	8b 8b       	std	Y+19, r24	; 0x13
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    18f4:	6d 89       	ldd	r22, Y+21	; 0x15
    18f6:	7e 89       	ldd	r23, Y+22	; 0x16
    18f8:	8f 89       	ldd	r24, Y+23	; 0x17
    18fa:	98 8d       	ldd	r25, Y+24	; 0x18
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	69 8d       	ldd	r22, Y+25	; 0x19
    190e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1912:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9c 8b       	std	Y+20, r25	; 0x14
    1932:	8b 8b       	std	Y+19, r24	; 0x13
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <LCD_displayCharacter+0x2ac>
    1936:	80 e9       	ldi	r24, 0x90	; 144
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	9a 8b       	std	Y+18, r25	; 0x12
    193c:	89 8b       	std	Y+17, r24	; 0x11
    193e:	89 89       	ldd	r24, Y+17	; 0x11
    1940:	9a 89       	ldd	r25, Y+18	; 0x12
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_displayCharacter+0x29a>
    1946:	9a 8b       	std	Y+18, r25	; 0x12
    1948:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8b 89       	ldd	r24, Y+19	; 0x13
    1956:	9c 89       	ldd	r25, Y+20	; 0x14
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <LCD_displayCharacter+0x28e>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6d 89       	ldd	r22, Y+21	; 0x15
    1960:	7e 89       	ldd	r23, Y+22	; 0x16
    1962:	8f 89       	ldd	r24, Y+23	; 0x17
    1964:	98 8d       	ldd	r25, Y+24	; 0x18
    1966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	98 8b       	std	Y+16, r25	; 0x10
    1978:	8f 87       	std	Y+15, r24	; 0x0f
    197a:	8f 85       	ldd	r24, Y+15	; 0x0f
    197c:	98 89       	ldd	r25, Y+16	; 0x10
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_displayCharacter+0x2d6>
    1982:	98 8b       	std	Y+16, r25	; 0x10
    1984:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1986:	83 e0       	ldi	r24, 0x03	; 3
    1988:	65 e0       	ldi	r22, 0x05	; 5
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_setPinValue>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e8       	ldi	r26, 0x80	; 128
    1996:	bf e3       	ldi	r27, 0x3F	; 63
    1998:	8b 87       	std	Y+11, r24	; 0x0b
    199a:	9c 87       	std	Y+12, r25	; 0x0c
    199c:	ad 87       	std	Y+13, r26	; 0x0d
    199e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a e7       	ldi	r20, 0x7A	; 122
    19ae:	55 e4       	ldi	r21, 0x45	; 69
    19b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8f 83       	std	Y+7, r24	; 0x07
    19ba:	98 87       	std	Y+8, r25	; 0x08
    19bc:	a9 87       	std	Y+9, r26	; 0x09
    19be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	78 85       	ldd	r23, Y+8	; 0x08
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	4c f5       	brge	.+82     	; 0x1a4c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <LCD_displayCharacter+0x39a>
    1a24:	80 e9       	ldi	r24, 0x90	; 144
    1a26:	91 e0       	ldi	r25, 0x01	; 1
    1a28:	9c 83       	std	Y+4, r25	; 0x04
    1a2a:	8b 83       	std	Y+3, r24	; 0x03
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCD_displayCharacter+0x388>
    1a34:	9c 83       	std	Y+4, r25	; 0x04
    1a36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	9e 83       	std	Y+6, r25	; 0x06
    1a40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <LCD_displayCharacter+0x37c>
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	9a 83       	std	Y+2, r25	; 0x02
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <LCD_displayCharacter+0x3c4>
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1a74:	e9 96       	adiw	r28, 0x39	; 57
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <LCD_init>:
void LCD_init(void)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	2e 97       	sbiw	r28, 0x0e	; 14
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, AVR_PIN_OUTPUT);
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	64 e0       	ldi	r22, 0x04	; 4
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, AVR_PIN_OUTPUT);
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	65 e0       	ldi	r22, 0x05	; 5
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, AVR_PIN_OUTPUT);
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 ea       	ldi	r26, 0xA0	; 160
    1abc:	b1 e4       	ldi	r27, 0x41	; 65
    1abe:	8b 87       	std	Y+11, r24	; 0x0b
    1ac0:	9c 87       	std	Y+12, r25	; 0x0c
    1ac2:	ad 87       	std	Y+13, r26	; 0x0d
    1ac4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a e7       	ldi	r20, 0x7A	; 122
    1ad4:	55 e4       	ldi	r21, 0x45	; 69
    1ad6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8f 83       	std	Y+7, r24	; 0x07
    1ae0:	98 87       	std	Y+8, r25	; 0x08
    1ae2:	a9 87       	std	Y+9, r26	; 0x09
    1ae4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae8:	78 85       	ldd	r23, Y+8	; 0x08
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <LCD_init+0x82>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9e 83       	std	Y+6, r25	; 0x06
    1b04:	8d 83       	std	Y+5, r24	; 0x05
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <LCD_init+0x100>
	else if (__tmp > 65535)
    1b08:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0a:	78 85       	ldd	r23, Y+8	; 0x08
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	4c f5       	brge	.+82     	; 0x1b72 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <LCD_init+0xe2>
    1b4a:	80 e9       	ldi	r24, 0x90	; 144
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	9c 83       	std	Y+4, r25	; 0x04
    1b50:	8b 83       	std	Y+3, r24	; 0x03
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_init+0xd0>
    1b5a:	9c 83       	std	Y+4, r25	; 0x04
    1b5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <LCD_init+0xc4>
    1b70:	14 c0       	rjmp	.+40     	; 0x1b9a <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	6f 81       	ldd	r22, Y+7	; 0x07
    1b74:	78 85       	ldd	r23, Y+8	; 0x08
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_init+0x10c>
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1b9a:	88 e3       	ldi	r24, 0x38	; 56
    1b9c:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    1ba0:	8c e0       	ldi	r24, 0x0C	; 12
    1ba2:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
}
    1bac:	2e 96       	adiw	r28, 0x0e	; 14
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <LCD_GoToXY+0x6>
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <LCD_GoToXY+0x8>
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	88 32       	cpi	r24, 0x28	; 40
    1bd2:	c0 f4       	brcc	.+48     	; 0x1c04 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	3c 83       	std	Y+4, r19	; 0x04
    1bdc:	2b 83       	std	Y+3, r18	; 0x03
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	31 f0       	breq	.+12     	; 0x1bf2 <LCD_GoToXY+0x34>
    1be6:	2b 81       	ldd	r18, Y+3	; 0x03
    1be8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bea:	21 30       	cpi	r18, 0x01	; 1
    1bec:	31 05       	cpc	r19, r1
    1bee:	31 f0       	breq	.+12     	; 0x1bfc <LCD_GoToXY+0x3e>
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	80 58       	subi	r24, 0x80	; 128
    1bf6:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	80 54       	subi	r24, 0x40	; 64
    1c00:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
			break;
		}
	}
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <LCD_displayString+0x6>
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	9b 83       	std	Y+3, r25	; 0x03
    1c20:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1c22:	19 82       	std	Y+1, r1	; 0x01
    1c24:	0e c0       	rjmp	.+28     	; 0x1c42 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c30:	fc 01       	movw	r30, r24
    1c32:	e2 0f       	add	r30, r18
    1c34:	f3 1f       	adc	r31, r19
    1c36:	80 81       	ld	r24, Z
    1c38:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
		i++;
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	e2 0f       	add	r30, r18
    1c50:	f3 1f       	adc	r31, r19
    1c52:	80 81       	ld	r24, Z
    1c54:	88 23       	and	r24, r24
    1c56:	39 f7       	brne	.-50     	; 0x1c26 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	28 97       	sbiw	r28, 0x08	; 8
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	8b 83       	std	Y+3, r24	; 0x03
    1c7a:	6c 83       	std	Y+4, r22	; 0x04
    1c7c:	5e 83       	std	Y+6, r21	; 0x06
    1c7e:	4d 83       	std	Y+5, r20	; 0x05
    1c80:	38 87       	std	Y+8, r19	; 0x08
    1c82:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    1c84:	1a 82       	std	Y+2, r1	; 0x02
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	88 23       	and	r24, r24
    1c8e:	49 f4       	brne	.+18     	; 0x1ca2 <LCD_String_xy+0x3e>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	80 31       	cpi	r24, 0x10	; 16
    1c94:	30 f4       	brcc	.+12     	; 0x1ca2 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    1c96:	8c 81       	ldd	r24, Y+4	; 0x04
    1c98:	8f 70       	andi	r24, 0x0F	; 15
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
    1ca0:	3a c0       	rjmp	.+116    	; 0x1d16 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	b9 f5       	brne	.+110    	; 0x1d16 <LCD_String_xy+0xb2>
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	80 31       	cpi	r24, 0x10	; 16
    1cac:	a0 f5       	brcc	.+104    	; 0x1d16 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	8f 70       	andi	r24, 0x0F	; 15
    1cb2:	80 6c       	ori	r24, 0xC0	; 192
    1cb4:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
    1cb8:	2e c0       	rjmp	.+92     	; 0x1d16 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	e2 0f       	add	r30, r18
    1cc8:	f3 1f       	adc	r31, r19
    1cca:	80 81       	ld	r24, Z
    1ccc:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
		i++;
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	8f 5f       	subi	r24, 0xFF	; 255
    1cd4:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	88 23       	and	r24, r24
    1cda:	71 f4       	brne	.+28     	; 0x1cf8 <LCD_String_xy+0x94>
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	83 30       	cpi	r24, 0x03	; 3
    1ce0:	58 f0       	brcs	.+22     	; 0x1cf8 <LCD_String_xy+0x94>
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	8b 30       	cpi	r24, 0x0B	; 11
    1ce6:	41 f4       	brne	.+16     	; 0x1cf8 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <LCD_GoToXY>
			c++;
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	0b c0       	rjmp	.+22     	; 0x1d0e <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	41 f4       	brne	.+16     	; 0x1d0e <LCD_String_xy+0xaa>
    1cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	28 f0       	brcs	.+10     	; 0x1d0e <LCD_String_xy+0xaa>
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	8b 30       	cpi	r24, 0x0B	; 11
    1d08:	11 f4       	brne	.+4      	; 0x1d0e <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    1d0a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_ClearScreen>
		}

		*count = c;
    1d0e:	ef 81       	ldd	r30, Y+7	; 0x07
    1d10:	f8 85       	ldd	r31, Y+8	; 0x08
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	fc 01       	movw	r30, r24
    1d22:	e2 0f       	add	r30, r18
    1d24:	f3 1f       	adc	r31, r19
    1d26:	80 81       	ld	r24, Z
    1d28:	88 23       	and	r24, r24
    1d2a:	39 f6       	brne	.-114    	; 0x1cba <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    1d2c:	28 96       	adiw	r28, 0x08	; 8
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	2e 97       	sbiw	r28, 0x0e	; 14
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a0 e0       	ldi	r26, 0x00	; 0
    1d5e:	b0 e4       	ldi	r27, 0x40	; 64
    1d60:	8b 87       	std	Y+11, r24	; 0x0b
    1d62:	9c 87       	std	Y+12, r25	; 0x0c
    1d64:	ad 87       	std	Y+13, r26	; 0x0d
    1d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	4a e7       	ldi	r20, 0x7A	; 122
    1d76:	55 e4       	ldi	r21, 0x45	; 69
    1d78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8f 83       	std	Y+7, r24	; 0x07
    1d82:	98 87       	std	Y+8, r25	; 0x08
    1d84:	a9 87       	std	Y+9, r26	; 0x09
    1d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d88:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8a:	78 85       	ldd	r23, Y+8	; 0x08
    1d8c:	89 85       	ldd	r24, Y+9	; 0x09
    1d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <LCD_ClearScreen+0x6c>
		__ticks = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	3f c0       	rjmp	.+126    	; 0x1e28 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	3f ef       	ldi	r19, 0xFF	; 255
    1db6:	4f e7       	ldi	r20, 0x7F	; 127
    1db8:	57 e4       	ldi	r21, 0x47	; 71
    1dba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dbe:	18 16       	cp	r1, r24
    1dc0:	4c f5       	brge	.+82     	; 0x1e14 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9e 83       	std	Y+6, r25	; 0x06
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <LCD_ClearScreen+0xcc>
    1dec:	80 e9       	ldi	r24, 0x90	; 144
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_ClearScreen+0xba>
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	69 f7       	brne	.-38     	; 0x1dec <LCD_ClearScreen+0xae>
    1e12:	14 c0       	rjmp	.+40     	; 0x1e3c <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	78 85       	ldd	r23, Y+8	; 0x08
    1e18:	89 85       	ldd	r24, Y+9	; 0x09
    1e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2c:	9a 83       	std	Y+2, r25	; 0x02
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_ClearScreen+0xf6>
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e3c:	2e 96       	adiw	r28, 0x0e	; 14
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	2e 97       	sbiw	r28, 0x0e	; 14
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    1e62:	88 e1       	ldi	r24, 0x18	; 24
    1e64:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e6e:	b1 e4       	ldi	r27, 0x41	; 65
    1e70:	8b 87       	std	Y+11, r24	; 0x0b
    1e72:	9c 87       	std	Y+12, r25	; 0x0c
    1e74:	ad 87       	std	Y+13, r26	; 0x0d
    1e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a e7       	ldi	r20, 0x7A	; 122
    1e86:	55 e4       	ldi	r21, 0x45	; 69
    1e88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8f 83       	std	Y+7, r24	; 0x07
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	a9 87       	std	Y+9, r26	; 0x09
    1e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <LCD_ShiftingLeft+0xcc>
    1efc:	80 e9       	ldi	r24, 0x90	; 144
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_ShiftingLeft+0xba>
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <LCD_ShiftingLeft+0xae>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_ShiftingLeft+0xf6>
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    1f4c:	2e 96       	adiw	r28, 0x0e	; 14
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	2e 97       	sbiw	r28, 0x0e	; 14
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    1f72:	8c e1       	ldi	r24, 0x1C	; 28
    1f74:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f7e:	b1 e4       	ldi	r27, 0x41	; 65
    1f80:	8b 87       	std	Y+11, r24	; 0x0b
    1f82:	9c 87       	std	Y+12, r25	; 0x0c
    1f84:	ad 87       	std	Y+13, r26	; 0x0d
    1f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a e7       	ldi	r20, 0x7A	; 122
    1f96:	55 e4       	ldi	r21, 0x45	; 69
    1f98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8f 83       	std	Y+7, r24	; 0x07
    1fa2:	98 87       	std	Y+8, r25	; 0x08
    1fa4:	a9 87       	std	Y+9, r26	; 0x09
    1fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	0f c0       	rjmp	.+30     	; 0x202a <LCD_ShiftingRight+0xcc>
    200c:	80 e9       	ldi	r24, 0x90	; 144
    200e:	91 e0       	ldi	r25, 0x01	; 1
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_ShiftingRight+0xba>
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <LCD_ShiftingRight+0xae>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_ShiftingRight+0xf6>
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    205c:	2e 96       	adiw	r28, 0x0e	; 14
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    206e:	0f 93       	push	r16
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	28 97       	sbiw	r28, 0x08	; 8
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	7d 83       	std	Y+5, r23	; 0x05
    2088:	6c 83       	std	Y+4, r22	; 0x04
    208a:	4e 83       	std	Y+6, r20	; 0x06
    208c:	2f 83       	std	Y+7, r18	; 0x07
    208e:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    2090:	88 85       	ldd	r24, Y+8	; 0x08
    2092:	0e 94 65 09 	call	0x12ca	; 0x12ca <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    2096:	1a 82       	std	Y+2, r1	; 0x02
    2098:	19 82       	std	Y+1, r1	; 0x01
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    209c:	29 81       	ldd	r18, Y+1	; 0x01
    209e:	3a 81       	ldd	r19, Y+2	; 0x02
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	fc 01       	movw	r30, r24
    20a6:	e2 0f       	add	r30, r18
    20a8:	f3 1f       	adc	r31, r19
    20aa:	80 81       	ld	r24, Z
    20ac:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	88 30       	cpi	r24, 0x08	; 8
    20c0:	91 05       	cpc	r25, r1
    20c2:	64 f3       	brlt	.-40     	; 0x209c <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    20c4:	8e 81       	ldd	r24, Y+6	; 0x06
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    20d2:	8f 81       	ldd	r24, Y+7	; 0x07
    20d4:	80 31       	cpi	r24, 0x10	; 16
    20d6:	48 f0       	brcs	.+18     	; 0x20ea <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    20d8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
	}
}
    20ea:	28 96       	adiw	r28, 0x08	; 8
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	0f 91       	pop	r16
    20fc:	08 95       	ret

000020fe <main>:
}*/




int main(void){
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	ca 5c       	subi	r28, 0xCA	; 202
    210c:	d0 40       	sbci	r29, 0x00	; 0
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
	u8 count;
	u8 c = 0;
    2118:	fe 01       	movw	r30, r28
    211a:	e6 54       	subi	r30, 0x46	; 70
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	10 82       	st	Z, r1
	LCD_setPortDirection(0, 0);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
	LCD_setPortDirection(1, 1);
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	61 e0       	ldi	r22, 0x01	; 1
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
	LCD_setPortDirection(2, 1);
    2138:	82 e0       	ldi	r24, 0x02	; 2
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
	LCD_setPortDirection(3, 1);
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	61 e0       	ldi	r22, 0x01	; 1
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPortDirection>
	LCD_init();
    2150:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LCD_init>

	u8 pressed_Keys[5];
	u8 password[5] = "51120";
    2154:	ce 01       	movw	r24, r28
    2156:	8f 53       	subi	r24, 0x3F	; 63
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	ca 53       	subi	r28, 0x3A	; 58
    215c:	df 4f       	sbci	r29, 0xFF	; 255
    215e:	99 83       	std	Y+1, r25	; 0x01
    2160:	88 83       	st	Y, r24
    2162:	c6 5c       	subi	r28, 0xC6	; 198
    2164:	d0 40       	sbci	r29, 0x00	; 0
    2166:	84 e9       	ldi	r24, 0x94	; 148
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	c8 53       	subi	r28, 0x38	; 56
    216c:	df 4f       	sbci	r29, 0xFF	; 255
    216e:	99 83       	std	Y+1, r25	; 0x01
    2170:	88 83       	st	Y, r24
    2172:	c8 5c       	subi	r28, 0xC8	; 200
    2174:	d0 40       	sbci	r29, 0x00	; 0
    2176:	95 e0       	ldi	r25, 0x05	; 5
    2178:	c6 53       	subi	r28, 0x36	; 54
    217a:	df 4f       	sbci	r29, 0xFF	; 255
    217c:	98 83       	st	Y, r25
    217e:	ca 5c       	subi	r28, 0xCA	; 202
    2180:	d0 40       	sbci	r29, 0x00	; 0
    2182:	c8 53       	subi	r28, 0x38	; 56
    2184:	df 4f       	sbci	r29, 0xFF	; 255
    2186:	e8 81       	ld	r30, Y
    2188:	f9 81       	ldd	r31, Y+1	; 0x01
    218a:	c8 5c       	subi	r28, 0xC8	; 200
    218c:	d0 40       	sbci	r29, 0x00	; 0
    218e:	00 80       	ld	r0, Z
    2190:	c8 53       	subi	r28, 0x38	; 56
    2192:	df 4f       	sbci	r29, 0xFF	; 255
    2194:	88 81       	ld	r24, Y
    2196:	99 81       	ldd	r25, Y+1	; 0x01
    2198:	c8 5c       	subi	r28, 0xC8	; 200
    219a:	d0 40       	sbci	r29, 0x00	; 0
    219c:	01 96       	adiw	r24, 0x01	; 1
    219e:	c8 53       	subi	r28, 0x38	; 56
    21a0:	df 4f       	sbci	r29, 0xFF	; 255
    21a2:	99 83       	std	Y+1, r25	; 0x01
    21a4:	88 83       	st	Y, r24
    21a6:	c8 5c       	subi	r28, 0xC8	; 200
    21a8:	d0 40       	sbci	r29, 0x00	; 0
    21aa:	ca 53       	subi	r28, 0x3A	; 58
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	e8 81       	ld	r30, Y
    21b0:	f9 81       	ldd	r31, Y+1	; 0x01
    21b2:	c6 5c       	subi	r28, 0xC6	; 198
    21b4:	d0 40       	sbci	r29, 0x00	; 0
    21b6:	00 82       	st	Z, r0
    21b8:	ca 53       	subi	r28, 0x3A	; 58
    21ba:	df 4f       	sbci	r29, 0xFF	; 255
    21bc:	88 81       	ld	r24, Y
    21be:	99 81       	ldd	r25, Y+1	; 0x01
    21c0:	c6 5c       	subi	r28, 0xC6	; 198
    21c2:	d0 40       	sbci	r29, 0x00	; 0
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	ca 53       	subi	r28, 0x3A	; 58
    21c8:	df 4f       	sbci	r29, 0xFF	; 255
    21ca:	99 83       	std	Y+1, r25	; 0x01
    21cc:	88 83       	st	Y, r24
    21ce:	c6 5c       	subi	r28, 0xC6	; 198
    21d0:	d0 40       	sbci	r29, 0x00	; 0
    21d2:	c6 53       	subi	r28, 0x36	; 54
    21d4:	df 4f       	sbci	r29, 0xFF	; 255
    21d6:	98 81       	ld	r25, Y
    21d8:	ca 5c       	subi	r28, 0xCA	; 202
    21da:	d0 40       	sbci	r29, 0x00	; 0
    21dc:	91 50       	subi	r25, 0x01	; 1
    21de:	c6 53       	subi	r28, 0x36	; 54
    21e0:	df 4f       	sbci	r29, 0xFF	; 255
    21e2:	98 83       	st	Y, r25
    21e4:	ca 5c       	subi	r28, 0xCA	; 202
    21e6:	d0 40       	sbci	r29, 0x00	; 0
    21e8:	c6 53       	subi	r28, 0x36	; 54
    21ea:	df 4f       	sbci	r29, 0xFF	; 255
    21ec:	e8 81       	ld	r30, Y
    21ee:	ca 5c       	subi	r28, 0xCA	; 202
    21f0:	d0 40       	sbci	r29, 0x00	; 0
    21f2:	ee 23       	and	r30, r30
    21f4:	31 f6       	brne	.-116    	; 0x2182 <main+0x84>

	LCD_String_xy(0, 0, "Enter Password", &count);
    21f6:	20 e6       	ldi	r18, 0x60	; 96
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	fe 01       	movw	r30, r28
    21fc:	e5 54       	subi	r30, 0x45	; 69
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	a9 01       	movw	r20, r18
    2206:	9f 01       	movw	r18, r30
    2208:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <LCD_String_xy>
	LCD_GoToXY(1, 0);
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <LCD_GoToXY>


	while(1){
		u8 key_Pressed = Keypad_GetPressedKey();
    2214:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Keypad_GetPressedKey>
    2218:	fe 01       	movw	r30, r28
    221a:	e7 54       	subi	r30, 0x47	; 71
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	80 83       	st	Z, r24

		if(key_Pressed == 1){
    2220:	fe 01       	movw	r30, r28
    2222:	e7 54       	subi	r30, 0x47	; 71
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	80 81       	ld	r24, Z
    2228:	81 30       	cpi	r24, 0x01	; 1
    222a:	09 f0       	breq	.+2      	; 0x222e <main+0x130>
    222c:	ce c0       	rjmp	.+412    	; 0x23ca <main+0x2cc>
			LCD_displayCharacter('*');
    222e:	8a e2       	ldi	r24, 0x2A	; 42
    2230:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '1';
    2234:	fe 01       	movw	r30, r28
    2236:	e6 54       	subi	r30, 0x46	; 70
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	ce 01       	movw	r24, r28
    2242:	84 54       	subi	r24, 0x44	; 68
    2244:	9f 4f       	sbci	r25, 0xFF	; 255
    2246:	fc 01       	movw	r30, r24
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	81 e3       	ldi	r24, 0x31	; 49
    224e:	80 83       	st	Z, r24
			c++;
    2250:	de 01       	movw	r26, r28
    2252:	a6 54       	subi	r26, 0x46	; 70
    2254:	bf 4f       	sbci	r27, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e6 54       	subi	r30, 0x46	; 70
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	8f 5f       	subi	r24, 0xFF	; 255
    2260:	8c 93       	st	X, r24
    2262:	fe 01       	movw	r30, r28
    2264:	ed 54       	subi	r30, 0x4D	; 77
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	ac e0       	ldi	r26, 0x0C	; 12
    226e:	b2 e4       	ldi	r27, 0x42	; 66
    2270:	80 83       	st	Z, r24
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	a2 83       	std	Z+2, r26	; 0x02
    2276:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2278:	8e 01       	movw	r16, r28
    227a:	01 55       	subi	r16, 0x51	; 81
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	fe 01       	movw	r30, r28
    2280:	ed 54       	subi	r30, 0x4D	; 77
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	55 e4       	ldi	r21, 0x45	; 69
    2294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	f8 01       	movw	r30, r16
    229e:	80 83       	st	Z, r24
    22a0:	91 83       	std	Z+1, r25	; 0x01
    22a2:	a2 83       	std	Z+2, r26	; 0x02
    22a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a6:	fe 01       	movw	r30, r28
    22a8:	e1 55       	subi	r30, 0x51	; 81
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	44 f4       	brge	.+16     	; 0x22d4 <main+0x1d6>
		__ticks = 1;
    22c4:	fe 01       	movw	r30, r28
    22c6:	e3 55       	subi	r30, 0x53	; 83
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	64 c0       	rjmp	.+200    	; 0x239c <main+0x29e>
	else if (__tmp > 65535)
    22d4:	fe 01       	movw	r30, r28
    22d6:	e1 55       	subi	r30, 0x51	; 81
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	0c f0       	brlt	.+2      	; 0x22f4 <main+0x1f6>
    22f2:	43 c0       	rjmp	.+134    	; 0x237a <main+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	fe 01       	movw	r30, r28
    22f6:	ed 54       	subi	r30, 0x4D	; 77
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8e 01       	movw	r16, r28
    2314:	03 55       	subi	r16, 0x53	; 83
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	f8 01       	movw	r30, r16
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	1f c0       	rjmp	.+62     	; 0x236a <main+0x26c>
    232c:	fe 01       	movw	r30, r28
    232e:	e5 55       	subi	r30, 0x55	; 85
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 e9       	ldi	r24, 0x90	; 144
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	fe 01       	movw	r30, r28
    233c:	e5 55       	subi	r30, 0x55	; 85
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <main+0x246>
    2348:	fe 01       	movw	r30, r28
    234a:	e5 55       	subi	r30, 0x55	; 85
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	de 01       	movw	r26, r28
    2354:	a3 55       	subi	r26, 0x53	; 83
    2356:	bf 4f       	sbci	r27, 0xFF	; 255
    2358:	fe 01       	movw	r30, r28
    235a:	e3 55       	subi	r30, 0x53	; 83
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	9c 93       	st	X, r25
    2368:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	fe 01       	movw	r30, r28
    236c:	e3 55       	subi	r30, 0x53	; 83
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	d1 f6       	brne	.-76     	; 0x232c <main+0x22e>
    2378:	28 c0       	rjmp	.+80     	; 0x23ca <main+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237a:	8e 01       	movw	r16, r28
    237c:	03 55       	subi	r16, 0x53	; 83
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	fe 01       	movw	r30, r28
    2382:	e1 55       	subi	r30, 0x51	; 81
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	f8 01       	movw	r30, r16
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    239c:	de 01       	movw	r26, r28
    239e:	a7 55       	subi	r26, 0x57	; 87
    23a0:	bf 4f       	sbci	r27, 0xFF	; 255
    23a2:	fe 01       	movw	r30, r28
    23a4:	e3 55       	subi	r30, 0x53	; 83
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	11 96       	adiw	r26, 0x01	; 1
    23ae:	9c 93       	st	X, r25
    23b0:	8e 93       	st	-X, r24
    23b2:	fe 01       	movw	r30, r28
    23b4:	e7 55       	subi	r30, 0x57	; 87
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	91 81       	ldd	r25, Z+1	; 0x01
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <main+0x2be>
    23c0:	fe 01       	movw	r30, r28
    23c2:	e7 55       	subi	r30, 0x57	; 87
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	91 83       	std	Z+1, r25	; 0x01
    23c8:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 2){
    23ca:	fe 01       	movw	r30, r28
    23cc:	e7 54       	subi	r30, 0x47	; 71
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <main+0x2da>
    23d6:	ce c0       	rjmp	.+412    	; 0x2574 <main+0x476>
			LCD_displayCharacter('*');
    23d8:	8a e2       	ldi	r24, 0x2A	; 42
    23da:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '2';
    23de:	fe 01       	movw	r30, r28
    23e0:	e6 54       	subi	r30, 0x46	; 70
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	ce 01       	movw	r24, r28
    23ec:	84 54       	subi	r24, 0x44	; 68
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	fc 01       	movw	r30, r24
    23f2:	e2 0f       	add	r30, r18
    23f4:	f3 1f       	adc	r31, r19
    23f6:	82 e3       	ldi	r24, 0x32	; 50
    23f8:	80 83       	st	Z, r24
			c++;
    23fa:	de 01       	movw	r26, r28
    23fc:	a6 54       	subi	r26, 0x46	; 70
    23fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2400:	fe 01       	movw	r30, r28
    2402:	e6 54       	subi	r30, 0x46	; 70
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	8f 5f       	subi	r24, 0xFF	; 255
    240a:	8c 93       	st	X, r24
    240c:	fe 01       	movw	r30, r28
    240e:	eb 55       	subi	r30, 0x5B	; 91
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	ac e0       	ldi	r26, 0x0C	; 12
    2418:	b2 e4       	ldi	r27, 0x42	; 66
    241a:	80 83       	st	Z, r24
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	a2 83       	std	Z+2, r26	; 0x02
    2420:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	8e 01       	movw	r16, r28
    2424:	0f 55       	subi	r16, 0x5F	; 95
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	fe 01       	movw	r30, r28
    242a:	eb 55       	subi	r30, 0x5B	; 91
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4a e7       	ldi	r20, 0x7A	; 122
    243c:	55 e4       	ldi	r21, 0x45	; 69
    243e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	f8 01       	movw	r30, r16
    2448:	80 83       	st	Z, r24
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	a2 83       	std	Z+2, r26	; 0x02
    244e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2450:	fe 01       	movw	r30, r28
    2452:	ef 55       	subi	r30, 0x5F	; 95
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	44 f4       	brge	.+16     	; 0x247e <main+0x380>
		__ticks = 1;
    246e:	fe 01       	movw	r30, r28
    2470:	e1 56       	subi	r30, 0x61	; 97
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	64 c0       	rjmp	.+200    	; 0x2546 <main+0x448>
	else if (__tmp > 65535)
    247e:	fe 01       	movw	r30, r28
    2480:	ef 55       	subi	r30, 0x5F	; 95
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	0c f0       	brlt	.+2      	; 0x249e <main+0x3a0>
    249c:	43 c0       	rjmp	.+134    	; 0x2524 <main+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249e:	fe 01       	movw	r30, r28
    24a0:	eb 55       	subi	r30, 0x5B	; 91
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	51 e4       	ldi	r21, 0x41	; 65
    24b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8e 01       	movw	r16, r28
    24be:	01 56       	subi	r16, 0x61	; 97
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	f8 01       	movw	r30, r16
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
    24d4:	1f c0       	rjmp	.+62     	; 0x2514 <main+0x416>
    24d6:	fe 01       	movw	r30, r28
    24d8:	e3 56       	subi	r30, 0x63	; 99
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 e9       	ldi	r24, 0x90	; 144
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	fe 01       	movw	r30, r28
    24e6:	e3 56       	subi	r30, 0x63	; 99
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <main+0x3f0>
    24f2:	fe 01       	movw	r30, r28
    24f4:	e3 56       	subi	r30, 0x63	; 99
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	de 01       	movw	r26, r28
    24fe:	a1 56       	subi	r26, 0x61	; 97
    2500:	bf 4f       	sbci	r27, 0xFF	; 255
    2502:	fe 01       	movw	r30, r28
    2504:	e1 56       	subi	r30, 0x61	; 97
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	11 96       	adiw	r26, 0x01	; 1
    2510:	9c 93       	st	X, r25
    2512:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	fe 01       	movw	r30, r28
    2516:	e1 56       	subi	r30, 0x61	; 97
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	d1 f6       	brne	.-76     	; 0x24d6 <main+0x3d8>
    2522:	28 c0       	rjmp	.+80     	; 0x2574 <main+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	8e 01       	movw	r16, r28
    2526:	01 56       	subi	r16, 0x61	; 97
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
    252a:	fe 01       	movw	r30, r28
    252c:	ef 55       	subi	r30, 0x5F	; 95
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	f8 01       	movw	r30, r16
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	80 83       	st	Z, r24
    2546:	de 01       	movw	r26, r28
    2548:	a5 56       	subi	r26, 0x65	; 101
    254a:	bf 4f       	sbci	r27, 0xFF	; 255
    254c:	fe 01       	movw	r30, r28
    254e:	e1 56       	subi	r30, 0x61	; 97
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	11 96       	adiw	r26, 0x01	; 1
    2558:	9c 93       	st	X, r25
    255a:	8e 93       	st	-X, r24
    255c:	fe 01       	movw	r30, r28
    255e:	e5 56       	subi	r30, 0x65	; 101
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <main+0x468>
    256a:	fe 01       	movw	r30, r28
    256c:	e5 56       	subi	r30, 0x65	; 101
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 3){
    2574:	fe 01       	movw	r30, r28
    2576:	e7 54       	subi	r30, 0x47	; 71
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	80 81       	ld	r24, Z
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	09 f0       	breq	.+2      	; 0x2582 <main+0x484>
    2580:	ce c0       	rjmp	.+412    	; 0x271e <main+0x620>
			LCD_displayCharacter('*');
    2582:	8a e2       	ldi	r24, 0x2A	; 42
    2584:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '3';
    2588:	fe 01       	movw	r30, r28
    258a:	e6 54       	subi	r30, 0x46	; 70
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	ce 01       	movw	r24, r28
    2596:	84 54       	subi	r24, 0x44	; 68
    2598:	9f 4f       	sbci	r25, 0xFF	; 255
    259a:	fc 01       	movw	r30, r24
    259c:	e2 0f       	add	r30, r18
    259e:	f3 1f       	adc	r31, r19
    25a0:	83 e3       	ldi	r24, 0x33	; 51
    25a2:	80 83       	st	Z, r24
			c++;
    25a4:	de 01       	movw	r26, r28
    25a6:	a6 54       	subi	r26, 0x46	; 70
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	e6 54       	subi	r30, 0x46	; 70
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	8c 93       	st	X, r24
    25b6:	fe 01       	movw	r30, r28
    25b8:	e9 56       	subi	r30, 0x69	; 105
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	ac e0       	ldi	r26, 0x0C	; 12
    25c2:	b2 e4       	ldi	r27, 0x42	; 66
    25c4:	80 83       	st	Z, r24
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	a2 83       	std	Z+2, r26	; 0x02
    25ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25cc:	8e 01       	movw	r16, r28
    25ce:	0d 56       	subi	r16, 0x6D	; 109
    25d0:	1f 4f       	sbci	r17, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	e9 56       	subi	r30, 0x69	; 105
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	55 e4       	ldi	r21, 0x45	; 69
    25e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	f8 01       	movw	r30, r16
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25fa:	fe 01       	movw	r30, r28
    25fc:	ed 56       	subi	r30, 0x6D	; 109
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	44 f4       	brge	.+16     	; 0x2628 <main+0x52a>
		__ticks = 1;
    2618:	fe 01       	movw	r30, r28
    261a:	ef 56       	subi	r30, 0x6F	; 111
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
    2626:	64 c0       	rjmp	.+200    	; 0x26f0 <main+0x5f2>
	else if (__tmp > 65535)
    2628:	fe 01       	movw	r30, r28
    262a:	ed 56       	subi	r30, 0x6D	; 109
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	0c f0       	brlt	.+2      	; 0x2648 <main+0x54a>
    2646:	43 c0       	rjmp	.+134    	; 0x26ce <main+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	fe 01       	movw	r30, r28
    264a:	e9 56       	subi	r30, 0x69	; 105
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e2       	ldi	r20, 0x20	; 32
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	8e 01       	movw	r16, r28
    2668:	0f 56       	subi	r16, 0x6F	; 111
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	f8 01       	movw	r30, r16
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
    267e:	1f c0       	rjmp	.+62     	; 0x26be <main+0x5c0>
    2680:	fe 01       	movw	r30, r28
    2682:	e1 57       	subi	r30, 0x71	; 113
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 e9       	ldi	r24, 0x90	; 144
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	fe 01       	movw	r30, r28
    2690:	e1 57       	subi	r30, 0x71	; 113
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <main+0x59a>
    269c:	fe 01       	movw	r30, r28
    269e:	e1 57       	subi	r30, 0x71	; 113
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	de 01       	movw	r26, r28
    26a8:	af 56       	subi	r26, 0x6F	; 111
    26aa:	bf 4f       	sbci	r27, 0xFF	; 255
    26ac:	fe 01       	movw	r30, r28
    26ae:	ef 56       	subi	r30, 0x6F	; 111
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	11 96       	adiw	r26, 0x01	; 1
    26ba:	9c 93       	st	X, r25
    26bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26be:	fe 01       	movw	r30, r28
    26c0:	ef 56       	subi	r30, 0x6F	; 111
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	d1 f6       	brne	.-76     	; 0x2680 <main+0x582>
    26cc:	28 c0       	rjmp	.+80     	; 0x271e <main+0x620>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	8e 01       	movw	r16, r28
    26d0:	0f 56       	subi	r16, 0x6F	; 111
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	fe 01       	movw	r30, r28
    26d6:	ed 56       	subi	r30, 0x6D	; 109
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	f8 01       	movw	r30, r16
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	de 01       	movw	r26, r28
    26f2:	a3 57       	subi	r26, 0x73	; 115
    26f4:	bf 4f       	sbci	r27, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	ef 56       	subi	r30, 0x6F	; 111
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	11 96       	adiw	r26, 0x01	; 1
    2702:	9c 93       	st	X, r25
    2704:	8e 93       	st	-X, r24
    2706:	fe 01       	movw	r30, r28
    2708:	e3 57       	subi	r30, 0x73	; 115
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <main+0x612>
    2714:	fe 01       	movw	r30, r28
    2716:	e3 57       	subi	r30, 0x73	; 115
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 4){
    271e:	fe 01       	movw	r30, r28
    2720:	e7 54       	subi	r30, 0x47	; 71
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	09 f0       	breq	.+2      	; 0x272c <main+0x62e>
    272a:	ce c0       	rjmp	.+412    	; 0x28c8 <main+0x7ca>
			LCD_displayCharacter('*');
    272c:	8a e2       	ldi	r24, 0x2A	; 42
    272e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '4';
    2732:	fe 01       	movw	r30, r28
    2734:	e6 54       	subi	r30, 0x46	; 70
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	ce 01       	movw	r24, r28
    2740:	84 54       	subi	r24, 0x44	; 68
    2742:	9f 4f       	sbci	r25, 0xFF	; 255
    2744:	fc 01       	movw	r30, r24
    2746:	e2 0f       	add	r30, r18
    2748:	f3 1f       	adc	r31, r19
    274a:	84 e3       	ldi	r24, 0x34	; 52
    274c:	80 83       	st	Z, r24
			c++;
    274e:	de 01       	movw	r26, r28
    2750:	a6 54       	subi	r26, 0x46	; 70
    2752:	bf 4f       	sbci	r27, 0xFF	; 255
    2754:	fe 01       	movw	r30, r28
    2756:	e6 54       	subi	r30, 0x46	; 70
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	8c 93       	st	X, r24
    2760:	fe 01       	movw	r30, r28
    2762:	e7 57       	subi	r30, 0x77	; 119
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	ac e0       	ldi	r26, 0x0C	; 12
    276c:	b2 e4       	ldi	r27, 0x42	; 66
    276e:	80 83       	st	Z, r24
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	a2 83       	std	Z+2, r26	; 0x02
    2774:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2776:	8e 01       	movw	r16, r28
    2778:	0b 57       	subi	r16, 0x7B	; 123
    277a:	1f 4f       	sbci	r17, 0xFF	; 255
    277c:	fe 01       	movw	r30, r28
    277e:	e7 57       	subi	r30, 0x77	; 119
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	4a e7       	ldi	r20, 0x7A	; 122
    2790:	55 e4       	ldi	r21, 0x45	; 69
    2792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	f8 01       	movw	r30, r16
    279c:	80 83       	st	Z, r24
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	a2 83       	std	Z+2, r26	; 0x02
    27a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a4:	fe 01       	movw	r30, r28
    27a6:	eb 57       	subi	r30, 0x7B	; 123
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	44 f4       	brge	.+16     	; 0x27d2 <main+0x6d4>
		__ticks = 1;
    27c2:	fe 01       	movw	r30, r28
    27c4:	ed 57       	subi	r30, 0x7D	; 125
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
    27d0:	64 c0       	rjmp	.+200    	; 0x289a <main+0x79c>
	else if (__tmp > 65535)
    27d2:	fe 01       	movw	r30, r28
    27d4:	eb 57       	subi	r30, 0x7B	; 123
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	0c f0       	brlt	.+2      	; 0x27f2 <main+0x6f4>
    27f0:	43 c0       	rjmp	.+134    	; 0x2878 <main+0x77a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	fe 01       	movw	r30, r28
    27f4:	e7 57       	subi	r30, 0x77	; 119
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8e 01       	movw	r16, r28
    2812:	0d 57       	subi	r16, 0x7D	; 125
    2814:	1f 4f       	sbci	r17, 0xFF	; 255
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	f8 01       	movw	r30, r16
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	80 83       	st	Z, r24
    2828:	1f c0       	rjmp	.+62     	; 0x2868 <main+0x76a>
    282a:	fe 01       	movw	r30, r28
    282c:	ef 57       	subi	r30, 0x7F	; 127
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 e9       	ldi	r24, 0x90	; 144
    2832:	91 e0       	ldi	r25, 0x01	; 1
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
    2838:	fe 01       	movw	r30, r28
    283a:	ef 57       	subi	r30, 0x7F	; 127
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 81       	ld	r24, Z
    2840:	91 81       	ldd	r25, Z+1	; 0x01
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <main+0x744>
    2846:	fe 01       	movw	r30, r28
    2848:	ef 57       	subi	r30, 0x7F	; 127
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2850:	de 01       	movw	r26, r28
    2852:	ad 57       	subi	r26, 0x7D	; 125
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	ed 57       	subi	r30, 0x7D	; 125
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	11 96       	adiw	r26, 0x01	; 1
    2864:	9c 93       	st	X, r25
    2866:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	fe 01       	movw	r30, r28
    286a:	ed 57       	subi	r30, 0x7D	; 125
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	d1 f6       	brne	.-76     	; 0x282a <main+0x72c>
    2876:	28 c0       	rjmp	.+80     	; 0x28c8 <main+0x7ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	8e 01       	movw	r16, r28
    287a:	0d 57       	subi	r16, 0x7D	; 125
    287c:	1f 4f       	sbci	r17, 0xFF	; 255
    287e:	fe 01       	movw	r30, r28
    2880:	eb 57       	subi	r30, 0x7B	; 123
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	f8 01       	movw	r30, r16
    2896:	91 83       	std	Z+1, r25	; 0x01
    2898:	80 83       	st	Z, r24
    289a:	de 01       	movw	r26, r28
    289c:	a1 58       	subi	r26, 0x81	; 129
    289e:	bf 4f       	sbci	r27, 0xFF	; 255
    28a0:	fe 01       	movw	r30, r28
    28a2:	ed 57       	subi	r30, 0x7D	; 125
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	91 81       	ldd	r25, Z+1	; 0x01
    28aa:	11 96       	adiw	r26, 0x01	; 1
    28ac:	9c 93       	st	X, r25
    28ae:	8e 93       	st	-X, r24
    28b0:	fe 01       	movw	r30, r28
    28b2:	e1 58       	subi	r30, 0x81	; 129
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <main+0x7bc>
    28be:	fe 01       	movw	r30, r28
    28c0:	e1 58       	subi	r30, 0x81	; 129
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 5){
    28c8:	fe 01       	movw	r30, r28
    28ca:	e7 54       	subi	r30, 0x47	; 71
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	85 30       	cpi	r24, 0x05	; 5
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <main+0x7d8>
    28d4:	ce c0       	rjmp	.+412    	; 0x2a72 <main+0x974>
			LCD_displayCharacter('*');
    28d6:	8a e2       	ldi	r24, 0x2A	; 42
    28d8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '5';
    28dc:	fe 01       	movw	r30, r28
    28de:	e6 54       	subi	r30, 0x46	; 70
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	ce 01       	movw	r24, r28
    28ea:	84 54       	subi	r24, 0x44	; 68
    28ec:	9f 4f       	sbci	r25, 0xFF	; 255
    28ee:	fc 01       	movw	r30, r24
    28f0:	e2 0f       	add	r30, r18
    28f2:	f3 1f       	adc	r31, r19
    28f4:	85 e3       	ldi	r24, 0x35	; 53
    28f6:	80 83       	st	Z, r24
			c++;
    28f8:	de 01       	movw	r26, r28
    28fa:	a6 54       	subi	r26, 0x46	; 70
    28fc:	bf 4f       	sbci	r27, 0xFF	; 255
    28fe:	fe 01       	movw	r30, r28
    2900:	e6 54       	subi	r30, 0x46	; 70
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	8c 93       	st	X, r24
    290a:	fe 01       	movw	r30, r28
    290c:	e5 58       	subi	r30, 0x85	; 133
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	ac e0       	ldi	r26, 0x0C	; 12
    2916:	b2 e4       	ldi	r27, 0x42	; 66
    2918:	80 83       	st	Z, r24
    291a:	91 83       	std	Z+1, r25	; 0x01
    291c:	a2 83       	std	Z+2, r26	; 0x02
    291e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2920:	8e 01       	movw	r16, r28
    2922:	09 58       	subi	r16, 0x89	; 137
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
    2926:	fe 01       	movw	r30, r28
    2928:	e5 58       	subi	r30, 0x85	; 133
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	60 81       	ld	r22, Z
    292e:	71 81       	ldd	r23, Z+1	; 0x01
    2930:	82 81       	ldd	r24, Z+2	; 0x02
    2932:	93 81       	ldd	r25, Z+3	; 0x03
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	4a e7       	ldi	r20, 0x7A	; 122
    293a:	55 e4       	ldi	r21, 0x45	; 69
    293c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	f8 01       	movw	r30, r16
    2946:	80 83       	st	Z, r24
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	a2 83       	std	Z+2, r26	; 0x02
    294c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    294e:	fe 01       	movw	r30, r28
    2950:	e9 58       	subi	r30, 0x89	; 137
    2952:	ff 4f       	sbci	r31, 0xFF	; 255
    2954:	60 81       	ld	r22, Z
    2956:	71 81       	ldd	r23, Z+1	; 0x01
    2958:	82 81       	ldd	r24, Z+2	; 0x02
    295a:	93 81       	ldd	r25, Z+3	; 0x03
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e8       	ldi	r20, 0x80	; 128
    2962:	5f e3       	ldi	r21, 0x3F	; 63
    2964:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2968:	88 23       	and	r24, r24
    296a:	44 f4       	brge	.+16     	; 0x297c <main+0x87e>
		__ticks = 1;
    296c:	fe 01       	movw	r30, r28
    296e:	eb 58       	subi	r30, 0x8B	; 139
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
    297a:	64 c0       	rjmp	.+200    	; 0x2a44 <main+0x946>
	else if (__tmp > 65535)
    297c:	fe 01       	movw	r30, r28
    297e:	e9 58       	subi	r30, 0x89	; 137
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	3f ef       	ldi	r19, 0xFF	; 255
    298e:	4f e7       	ldi	r20, 0x7F	; 127
    2990:	57 e4       	ldi	r21, 0x47	; 71
    2992:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2996:	18 16       	cp	r1, r24
    2998:	0c f0       	brlt	.+2      	; 0x299c <main+0x89e>
    299a:	43 c0       	rjmp	.+134    	; 0x2a22 <main+0x924>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299c:	fe 01       	movw	r30, r28
    299e:	e5 58       	subi	r30, 0x85	; 133
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	8e 01       	movw	r16, r28
    29bc:	0b 58       	subi	r16, 0x8B	; 139
    29be:	1f 4f       	sbci	r17, 0xFF	; 255
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	f8 01       	movw	r30, r16
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
    29d2:	1f c0       	rjmp	.+62     	; 0x2a12 <main+0x914>
    29d4:	fe 01       	movw	r30, r28
    29d6:	ed 58       	subi	r30, 0x8D	; 141
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 e9       	ldi	r24, 0x90	; 144
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	fe 01       	movw	r30, r28
    29e4:	ed 58       	subi	r30, 0x8D	; 141
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	91 81       	ldd	r25, Z+1	; 0x01
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <main+0x8ee>
    29f0:	fe 01       	movw	r30, r28
    29f2:	ed 58       	subi	r30, 0x8D	; 141
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fa:	de 01       	movw	r26, r28
    29fc:	ab 58       	subi	r26, 0x8B	; 139
    29fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2a00:	fe 01       	movw	r30, r28
    2a02:	eb 58       	subi	r30, 0x8B	; 139
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	91 81       	ldd	r25, Z+1	; 0x01
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	11 96       	adiw	r26, 0x01	; 1
    2a0e:	9c 93       	st	X, r25
    2a10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a12:	fe 01       	movw	r30, r28
    2a14:	eb 58       	subi	r30, 0x8B	; 139
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	d1 f6       	brne	.-76     	; 0x29d4 <main+0x8d6>
    2a20:	28 c0       	rjmp	.+80     	; 0x2a72 <main+0x974>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a22:	8e 01       	movw	r16, r28
    2a24:	0b 58       	subi	r16, 0x8B	; 139
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e9 58       	subi	r30, 0x89	; 137
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	60 81       	ld	r22, Z
    2a30:	71 81       	ldd	r23, Z+1	; 0x01
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	93 81       	ldd	r25, Z+3	; 0x03
    2a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	f8 01       	movw	r30, r16
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	80 83       	st	Z, r24
    2a44:	de 01       	movw	r26, r28
    2a46:	af 58       	subi	r26, 0x8F	; 143
    2a48:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	eb 58       	subi	r30, 0x8B	; 139
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	11 96       	adiw	r26, 0x01	; 1
    2a56:	9c 93       	st	X, r25
    2a58:	8e 93       	st	-X, r24
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	ef 58       	subi	r30, 0x8F	; 143
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <main+0x966>
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ef 58       	subi	r30, 0x8F	; 143
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 6){
    2a72:	fe 01       	movw	r30, r28
    2a74:	e7 54       	subi	r30, 0x47	; 71
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	86 30       	cpi	r24, 0x06	; 6
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <main+0x982>
    2a7e:	ce c0       	rjmp	.+412    	; 0x2c1c <main+0xb1e>
			LCD_displayCharacter('*');
    2a80:	8a e2       	ldi	r24, 0x2A	; 42
    2a82:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '6';
    2a86:	fe 01       	movw	r30, r28
    2a88:	e6 54       	subi	r30, 0x46	; 70
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 81       	ld	r24, Z
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	ce 01       	movw	r24, r28
    2a94:	84 54       	subi	r24, 0x44	; 68
    2a96:	9f 4f       	sbci	r25, 0xFF	; 255
    2a98:	fc 01       	movw	r30, r24
    2a9a:	e2 0f       	add	r30, r18
    2a9c:	f3 1f       	adc	r31, r19
    2a9e:	86 e3       	ldi	r24, 0x36	; 54
    2aa0:	80 83       	st	Z, r24
			c++;
    2aa2:	de 01       	movw	r26, r28
    2aa4:	a6 54       	subi	r26, 0x46	; 70
    2aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e6 54       	subi	r30, 0x46	; 70
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	8f 5f       	subi	r24, 0xFF	; 255
    2ab2:	8c 93       	st	X, r24
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e3 59       	subi	r30, 0x93	; 147
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	ac e0       	ldi	r26, 0x0C	; 12
    2ac0:	b2 e4       	ldi	r27, 0x42	; 66
    2ac2:	80 83       	st	Z, r24
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	a2 83       	std	Z+2, r26	; 0x02
    2ac8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aca:	8e 01       	movw	r16, r28
    2acc:	07 59       	subi	r16, 0x97	; 151
    2ace:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e3 59       	subi	r30, 0x93	; 147
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	60 81       	ld	r22, Z
    2ad8:	71 81       	ldd	r23, Z+1	; 0x01
    2ada:	82 81       	ldd	r24, Z+2	; 0x02
    2adc:	93 81       	ldd	r25, Z+3	; 0x03
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	4a e7       	ldi	r20, 0x7A	; 122
    2ae4:	55 e4       	ldi	r21, 0x45	; 69
    2ae6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	f8 01       	movw	r30, r16
    2af0:	80 83       	st	Z, r24
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	a2 83       	std	Z+2, r26	; 0x02
    2af6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2af8:	fe 01       	movw	r30, r28
    2afa:	e7 59       	subi	r30, 0x97	; 151
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	44 f4       	brge	.+16     	; 0x2b26 <main+0xa28>
		__ticks = 1;
    2b16:	fe 01       	movw	r30, r28
    2b18:	e9 59       	subi	r30, 0x99	; 153
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	64 c0       	rjmp	.+200    	; 0x2bee <main+0xaf0>
	else if (__tmp > 65535)
    2b26:	fe 01       	movw	r30, r28
    2b28:	e7 59       	subi	r30, 0x97	; 151
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	3f ef       	ldi	r19, 0xFF	; 255
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	57 e4       	ldi	r21, 0x47	; 71
    2b3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	0c f0       	brlt	.+2      	; 0x2b46 <main+0xa48>
    2b44:	43 c0       	rjmp	.+134    	; 0x2bcc <main+0xace>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b46:	fe 01       	movw	r30, r28
    2b48:	e3 59       	subi	r30, 0x93	; 147
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	8e 01       	movw	r16, r28
    2b66:	09 59       	subi	r16, 0x99	; 153
    2b68:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	f8 01       	movw	r30, r16
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	1f c0       	rjmp	.+62     	; 0x2bbc <main+0xabe>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	eb 59       	subi	r30, 0x9B	; 155
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 e9       	ldi	r24, 0x90	; 144
    2b86:	91 e0       	ldi	r25, 0x01	; 1
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	80 83       	st	Z, r24
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	eb 59       	subi	r30, 0x9B	; 155
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <main+0xa98>
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	eb 59       	subi	r30, 0x9B	; 155
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	de 01       	movw	r26, r28
    2ba6:	a9 59       	subi	r26, 0x99	; 153
    2ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    2baa:	fe 01       	movw	r30, r28
    2bac:	e9 59       	subi	r30, 0x99	; 153
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	11 96       	adiw	r26, 0x01	; 1
    2bb8:	9c 93       	st	X, r25
    2bba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e9 59       	subi	r30, 0x99	; 153
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	d1 f6       	brne	.-76     	; 0x2b7e <main+0xa80>
    2bca:	28 c0       	rjmp	.+80     	; 0x2c1c <main+0xb1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bcc:	8e 01       	movw	r16, r28
    2bce:	09 59       	subi	r16, 0x99	; 153
    2bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e7 59       	subi	r30, 0x97	; 151
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	60 81       	ld	r22, Z
    2bda:	71 81       	ldd	r23, Z+1	; 0x01
    2bdc:	82 81       	ldd	r24, Z+2	; 0x02
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	f8 01       	movw	r30, r16
    2bea:	91 83       	std	Z+1, r25	; 0x01
    2bec:	80 83       	st	Z, r24
    2bee:	de 01       	movw	r26, r28
    2bf0:	ad 59       	subi	r26, 0x9D	; 157
    2bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e9 59       	subi	r30, 0x99	; 153
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	91 81       	ldd	r25, Z+1	; 0x01
    2bfe:	11 96       	adiw	r26, 0x01	; 1
    2c00:	9c 93       	st	X, r25
    2c02:	8e 93       	st	-X, r24
    2c04:	fe 01       	movw	r30, r28
    2c06:	ed 59       	subi	r30, 0x9D	; 157
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <main+0xb10>
    2c12:	fe 01       	movw	r30, r28
    2c14:	ed 59       	subi	r30, 0x9D	; 157
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 7){
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e7 54       	subi	r30, 0x47	; 71
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	87 30       	cpi	r24, 0x07	; 7
    2c26:	09 f0       	breq	.+2      	; 0x2c2a <main+0xb2c>
    2c28:	ce c0       	rjmp	.+412    	; 0x2dc6 <main+0xcc8>
			LCD_displayCharacter('*');
    2c2a:	8a e2       	ldi	r24, 0x2A	; 42
    2c2c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '7';
    2c30:	fe 01       	movw	r30, r28
    2c32:	e6 54       	subi	r30, 0x46	; 70
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	84 54       	subi	r24, 0x44	; 68
    2c40:	9f 4f       	sbci	r25, 0xFF	; 255
    2c42:	fc 01       	movw	r30, r24
    2c44:	e2 0f       	add	r30, r18
    2c46:	f3 1f       	adc	r31, r19
    2c48:	87 e3       	ldi	r24, 0x37	; 55
    2c4a:	80 83       	st	Z, r24
			c++;
    2c4c:	de 01       	movw	r26, r28
    2c4e:	a6 54       	subi	r26, 0x46	; 70
    2c50:	bf 4f       	sbci	r27, 0xFF	; 255
    2c52:	fe 01       	movw	r30, r28
    2c54:	e6 54       	subi	r30, 0x46	; 70
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	8c 93       	st	X, r24
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e1 5a       	subi	r30, 0xA1	; 161
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	ac e0       	ldi	r26, 0x0C	; 12
    2c6a:	b2 e4       	ldi	r27, 0x42	; 66
    2c6c:	80 83       	st	Z, r24
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	a2 83       	std	Z+2, r26	; 0x02
    2c72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c74:	8e 01       	movw	r16, r28
    2c76:	05 5a       	subi	r16, 0xA5	; 165
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e1 5a       	subi	r30, 0xA1	; 161
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	93 81       	ldd	r25, Z+3	; 0x03
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4a e7       	ldi	r20, 0x7A	; 122
    2c8e:	55 e4       	ldi	r21, 0x45	; 69
    2c90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	f8 01       	movw	r30, r16
    2c9a:	80 83       	st	Z, r24
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	a2 83       	std	Z+2, r26	; 0x02
    2ca0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca2:	fe 01       	movw	r30, r28
    2ca4:	e5 5a       	subi	r30, 0xA5	; 165
    2ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca8:	60 81       	ld	r22, Z
    2caa:	71 81       	ldd	r23, Z+1	; 0x01
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	44 f4       	brge	.+16     	; 0x2cd0 <main+0xbd2>
		__ticks = 1;
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	e7 5a       	subi	r30, 0xA7	; 167
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	91 83       	std	Z+1, r25	; 0x01
    2ccc:	80 83       	st	Z, r24
    2cce:	64 c0       	rjmp	.+200    	; 0x2d98 <main+0xc9a>
	else if (__tmp > 65535)
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	e5 5a       	subi	r30, 0xA5	; 165
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	3f ef       	ldi	r19, 0xFF	; 255
    2ce2:	4f e7       	ldi	r20, 0x7F	; 127
    2ce4:	57 e4       	ldi	r21, 0x47	; 71
    2ce6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cea:	18 16       	cp	r1, r24
    2cec:	0c f0       	brlt	.+2      	; 0x2cf0 <main+0xbf2>
    2cee:	43 c0       	rjmp	.+134    	; 0x2d76 <main+0xc78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e1 5a       	subi	r30, 0xA1	; 161
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	8e 01       	movw	r16, r28
    2d10:	07 5a       	subi	r16, 0xA7	; 167
    2d12:	1f 4f       	sbci	r17, 0xFF	; 255
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	f8 01       	movw	r30, r16
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	1f c0       	rjmp	.+62     	; 0x2d66 <main+0xc68>
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e9 5a       	subi	r30, 0xA9	; 169
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 e9       	ldi	r24, 0x90	; 144
    2d30:	91 e0       	ldi	r25, 0x01	; 1
    2d32:	91 83       	std	Z+1, r25	; 0x01
    2d34:	80 83       	st	Z, r24
    2d36:	fe 01       	movw	r30, r28
    2d38:	e9 5a       	subi	r30, 0xA9	; 169
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <main+0xc42>
    2d44:	fe 01       	movw	r30, r28
    2d46:	e9 5a       	subi	r30, 0xA9	; 169
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4e:	de 01       	movw	r26, r28
    2d50:	a7 5a       	subi	r26, 0xA7	; 167
    2d52:	bf 4f       	sbci	r27, 0xFF	; 255
    2d54:	fe 01       	movw	r30, r28
    2d56:	e7 5a       	subi	r30, 0xA7	; 167
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	11 96       	adiw	r26, 0x01	; 1
    2d62:	9c 93       	st	X, r25
    2d64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	fe 01       	movw	r30, r28
    2d68:	e7 5a       	subi	r30, 0xA7	; 167
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	d1 f6       	brne	.-76     	; 0x2d28 <main+0xc2a>
    2d74:	28 c0       	rjmp	.+80     	; 0x2dc6 <main+0xcc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	8e 01       	movw	r16, r28
    2d78:	07 5a       	subi	r16, 0xA7	; 167
    2d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e5 5a       	subi	r30, 0xA5	; 165
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	f8 01       	movw	r30, r16
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	80 83       	st	Z, r24
    2d98:	de 01       	movw	r26, r28
    2d9a:	ab 5a       	subi	r26, 0xAB	; 171
    2d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e7 5a       	subi	r30, 0xA7	; 167
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	11 96       	adiw	r26, 0x01	; 1
    2daa:	9c 93       	st	X, r25
    2dac:	8e 93       	st	-X, r24
    2dae:	fe 01       	movw	r30, r28
    2db0:	eb 5a       	subi	r30, 0xAB	; 171
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <main+0xcba>
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	eb 5a       	subi	r30, 0xAB	; 171
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 8){
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e7 54       	subi	r30, 0x47	; 71
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 81       	ld	r24, Z
    2dce:	88 30       	cpi	r24, 0x08	; 8
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <main+0xcd6>
    2dd2:	ce c0       	rjmp	.+412    	; 0x2f70 <main+0xe72>
			LCD_displayCharacter('*');
    2dd4:	8a e2       	ldi	r24, 0x2A	; 42
    2dd6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '8';
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e6 54       	subi	r30, 0x46	; 70
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	ce 01       	movw	r24, r28
    2de8:	84 54       	subi	r24, 0x44	; 68
    2dea:	9f 4f       	sbci	r25, 0xFF	; 255
    2dec:	fc 01       	movw	r30, r24
    2dee:	e2 0f       	add	r30, r18
    2df0:	f3 1f       	adc	r31, r19
    2df2:	88 e3       	ldi	r24, 0x38	; 56
    2df4:	80 83       	st	Z, r24
			c++;
    2df6:	de 01       	movw	r26, r28
    2df8:	a6 54       	subi	r26, 0x46	; 70
    2dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e6 54       	subi	r30, 0x46	; 70
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	8c 93       	st	X, r24
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ef 5a       	subi	r30, 0xAF	; 175
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	ac e0       	ldi	r26, 0x0C	; 12
    2e14:	b2 e4       	ldi	r27, 0x42	; 66
    2e16:	80 83       	st	Z, r24
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	a2 83       	std	Z+2, r26	; 0x02
    2e1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1e:	8e 01       	movw	r16, r28
    2e20:	03 5b       	subi	r16, 0xB3	; 179
    2e22:	1f 4f       	sbci	r17, 0xFF	; 255
    2e24:	fe 01       	movw	r30, r28
    2e26:	ef 5a       	subi	r30, 0xAF	; 175
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	60 81       	ld	r22, Z
    2e2c:	71 81       	ldd	r23, Z+1	; 0x01
    2e2e:	82 81       	ldd	r24, Z+2	; 0x02
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	4a e7       	ldi	r20, 0x7A	; 122
    2e38:	55 e4       	ldi	r21, 0x45	; 69
    2e3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	f8 01       	movw	r30, r16
    2e44:	80 83       	st	Z, r24
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	a2 83       	std	Z+2, r26	; 0x02
    2e4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e3 5b       	subi	r30, 0xB3	; 179
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e8       	ldi	r20, 0x80	; 128
    2e60:	5f e3       	ldi	r21, 0x3F	; 63
    2e62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e66:	88 23       	and	r24, r24
    2e68:	44 f4       	brge	.+16     	; 0x2e7a <main+0xd7c>
		__ticks = 1;
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e5 5b       	subi	r30, 0xB5	; 181
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
    2e78:	64 c0       	rjmp	.+200    	; 0x2f42 <main+0xe44>
	else if (__tmp > 65535)
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	e3 5b       	subi	r30, 0xB3	; 179
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	60 81       	ld	r22, Z
    2e82:	71 81       	ldd	r23, Z+1	; 0x01
    2e84:	82 81       	ldd	r24, Z+2	; 0x02
    2e86:	93 81       	ldd	r25, Z+3	; 0x03
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	3f ef       	ldi	r19, 0xFF	; 255
    2e8c:	4f e7       	ldi	r20, 0x7F	; 127
    2e8e:	57 e4       	ldi	r21, 0x47	; 71
    2e90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e94:	18 16       	cp	r1, r24
    2e96:	0c f0       	brlt	.+2      	; 0x2e9a <main+0xd9c>
    2e98:	43 c0       	rjmp	.+134    	; 0x2f20 <main+0xe22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	ef 5a       	subi	r30, 0xAF	; 175
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	60 81       	ld	r22, Z
    2ea2:	71 81       	ldd	r23, Z+1	; 0x01
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	93 81       	ldd	r25, Z+3	; 0x03
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	8e 01       	movw	r16, r28
    2eba:	05 5b       	subi	r16, 0xB5	; 181
    2ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	f8 01       	movw	r30, r16
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	80 83       	st	Z, r24
    2ed0:	1f c0       	rjmp	.+62     	; 0x2f10 <main+0xe12>
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	e7 5b       	subi	r30, 0xB7	; 183
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 e9       	ldi	r24, 0x90	; 144
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	91 83       	std	Z+1, r25	; 0x01
    2ede:	80 83       	st	Z, r24
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e7 5b       	subi	r30, 0xB7	; 183
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 81       	ld	r24, Z
    2ee8:	91 81       	ldd	r25, Z+1	; 0x01
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <main+0xdec>
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e7 5b       	subi	r30, 0xB7	; 183
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef8:	de 01       	movw	r26, r28
    2efa:	a5 5b       	subi	r26, 0xB5	; 181
    2efc:	bf 4f       	sbci	r27, 0xFF	; 255
    2efe:	fe 01       	movw	r30, r28
    2f00:	e5 5b       	subi	r30, 0xB5	; 181
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	80 81       	ld	r24, Z
    2f06:	91 81       	ldd	r25, Z+1	; 0x01
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	11 96       	adiw	r26, 0x01	; 1
    2f0c:	9c 93       	st	X, r25
    2f0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f10:	fe 01       	movw	r30, r28
    2f12:	e5 5b       	subi	r30, 0xB5	; 181
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	d1 f6       	brne	.-76     	; 0x2ed2 <main+0xdd4>
    2f1e:	28 c0       	rjmp	.+80     	; 0x2f70 <main+0xe72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f20:	8e 01       	movw	r16, r28
    2f22:	05 5b       	subi	r16, 0xB5	; 181
    2f24:	1f 4f       	sbci	r17, 0xFF	; 255
    2f26:	fe 01       	movw	r30, r28
    2f28:	e3 5b       	subi	r30, 0xB3	; 179
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	60 81       	ld	r22, Z
    2f2e:	71 81       	ldd	r23, Z+1	; 0x01
    2f30:	82 81       	ldd	r24, Z+2	; 0x02
    2f32:	93 81       	ldd	r25, Z+3	; 0x03
    2f34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
    2f42:	de 01       	movw	r26, r28
    2f44:	a9 5b       	subi	r26, 0xB9	; 185
    2f46:	bf 4f       	sbci	r27, 0xFF	; 255
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e5 5b       	subi	r30, 0xB5	; 181
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	80 81       	ld	r24, Z
    2f50:	91 81       	ldd	r25, Z+1	; 0x01
    2f52:	11 96       	adiw	r26, 0x01	; 1
    2f54:	9c 93       	st	X, r25
    2f56:	8e 93       	st	-X, r24
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e9 5b       	subi	r30, 0xB9	; 185
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <main+0xe64>
    2f66:	fe 01       	movw	r30, r28
    2f68:	e9 5b       	subi	r30, 0xB9	; 185
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 9){
    2f70:	fe 01       	movw	r30, r28
    2f72:	e7 54       	subi	r30, 0x47	; 71
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	89 30       	cpi	r24, 0x09	; 9
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <main+0xe80>
    2f7c:	9f c0       	rjmp	.+318    	; 0x30bc <main+0xfbe>
			LCD_displayCharacter('*');
    2f7e:	8a e2       	ldi	r24, 0x2A	; 42
    2f80:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '9';
    2f84:	fe 01       	movw	r30, r28
    2f86:	e6 54       	subi	r30, 0x46	; 70
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	ce 01       	movw	r24, r28
    2f92:	84 54       	subi	r24, 0x44	; 68
    2f94:	9f 4f       	sbci	r25, 0xFF	; 255
    2f96:	fc 01       	movw	r30, r24
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	89 e3       	ldi	r24, 0x39	; 57
    2f9e:	80 83       	st	Z, r24
			c++;
    2fa0:	de 01       	movw	r26, r28
    2fa2:	a6 54       	subi	r26, 0x46	; 70
    2fa4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e6 54       	subi	r30, 0x46	; 70
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	8f 5f       	subi	r24, 0xFF	; 255
    2fb0:	8c 93       	st	X, r24
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	ed 5b       	subi	r30, 0xBD	; 189
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	ac e0       	ldi	r26, 0x0C	; 12
    2fbe:	b2 e4       	ldi	r27, 0x42	; 66
    2fc0:	80 83       	st	Z, r24
    2fc2:	91 83       	std	Z+1, r25	; 0x01
    2fc4:	a2 83       	std	Z+2, r26	; 0x02
    2fc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc8:	8e 01       	movw	r16, r28
    2fca:	01 5c       	subi	r16, 0xC1	; 193
    2fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fce:	fe 01       	movw	r30, r28
    2fd0:	ed 5b       	subi	r30, 0xBD	; 189
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	60 81       	ld	r22, Z
    2fd6:	71 81       	ldd	r23, Z+1	; 0x01
    2fd8:	82 81       	ldd	r24, Z+2	; 0x02
    2fda:	93 81       	ldd	r25, Z+3	; 0x03
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	4a e7       	ldi	r20, 0x7A	; 122
    2fe2:	55 e4       	ldi	r21, 0x45	; 69
    2fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	f8 01       	movw	r30, r16
    2fee:	80 83       	st	Z, r24
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	a2 83       	std	Z+2, r26	; 0x02
    2ff4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ff 96       	adiw	r30, 0x3f	; 63
    2ffa:	60 81       	ld	r22, Z
    2ffc:	71 81       	ldd	r23, Z+1	; 0x01
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	93 81       	ldd	r25, Z+3	; 0x03
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e8       	ldi	r20, 0x80	; 128
    3008:	5f e3       	ldi	r21, 0x3F	; 63
    300a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    300e:	88 23       	and	r24, r24
    3010:	2c f4       	brge	.+10     	; 0x301c <main+0xf1e>
		__ticks = 1;
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	9e af       	std	Y+62, r25	; 0x3e
    3018:	8d af       	std	Y+61, r24	; 0x3d
    301a:	46 c0       	rjmp	.+140    	; 0x30a8 <main+0xfaa>
	else if (__tmp > 65535)
    301c:	fe 01       	movw	r30, r28
    301e:	ff 96       	adiw	r30, 0x3f	; 63
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	3f ef       	ldi	r19, 0xFF	; 255
    302c:	4f e7       	ldi	r20, 0x7F	; 127
    302e:	57 e4       	ldi	r21, 0x47	; 71
    3030:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3034:	18 16       	cp	r1, r24
    3036:	64 f5       	brge	.+88     	; 0x3090 <main+0xf92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3038:	fe 01       	movw	r30, r28
    303a:	ed 5b       	subi	r30, 0xBD	; 189
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	60 81       	ld	r22, Z
    3040:	71 81       	ldd	r23, Z+1	; 0x01
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e2       	ldi	r20, 0x20	; 32
    304c:	51 e4       	ldi	r21, 0x41	; 65
    304e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	bc 01       	movw	r22, r24
    3058:	cd 01       	movw	r24, r26
    305a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	9e af       	std	Y+62, r25	; 0x3e
    3064:	8d af       	std	Y+61, r24	; 0x3d
    3066:	0f c0       	rjmp	.+30     	; 0x3086 <main+0xf88>
    3068:	80 e9       	ldi	r24, 0x90	; 144
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	9c af       	std	Y+60, r25	; 0x3c
    306e:	8b af       	std	Y+59, r24	; 0x3b
    3070:	8b ad       	ldd	r24, Y+59	; 0x3b
    3072:	9c ad       	ldd	r25, Y+60	; 0x3c
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <main+0xf76>
    3078:	9c af       	std	Y+60, r25	; 0x3c
    307a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307c:	8d ad       	ldd	r24, Y+61	; 0x3d
    307e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	9e af       	std	Y+62, r25	; 0x3e
    3084:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3086:	8d ad       	ldd	r24, Y+61	; 0x3d
    3088:	9e ad       	ldd	r25, Y+62	; 0x3e
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	69 f7       	brne	.-38     	; 0x3068 <main+0xf6a>
    308e:	16 c0       	rjmp	.+44     	; 0x30bc <main+0xfbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3090:	fe 01       	movw	r30, r28
    3092:	ff 96       	adiw	r30, 0x3f	; 63
    3094:	60 81       	ld	r22, Z
    3096:	71 81       	ldd	r23, Z+1	; 0x01
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	9e af       	std	Y+62, r25	; 0x3e
    30a6:	8d af       	std	Y+61, r24	; 0x3d
    30a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    30aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    30ac:	9a af       	std	Y+58, r25	; 0x3a
    30ae:	89 af       	std	Y+57, r24	; 0x39
    30b0:	89 ad       	ldd	r24, Y+57	; 0x39
    30b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <main+0xfb6>
    30b8:	9a af       	std	Y+58, r25	; 0x3a
    30ba:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(35);
		}

		if(key_Pressed == '*'){
    30bc:	fe 01       	movw	r30, r28
    30be:	e7 54       	subi	r30, 0x47	; 71
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	8a 32       	cpi	r24, 0x2A	; 42
    30c6:	09 f0       	breq	.+2      	; 0x30ca <main+0xfcc>
    30c8:	8c c0       	rjmp	.+280    	; 0x31e2 <main+0x10e4>
			LCD_displayCharacter('*');
    30ca:	8a e2       	ldi	r24, 0x2A	; 42
    30cc:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '*';
    30d0:	fe 01       	movw	r30, r28
    30d2:	e6 54       	subi	r30, 0x46	; 70
    30d4:	ff 4f       	sbci	r31, 0xFF	; 255
    30d6:	80 81       	ld	r24, Z
    30d8:	28 2f       	mov	r18, r24
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	ce 01       	movw	r24, r28
    30de:	84 54       	subi	r24, 0x44	; 68
    30e0:	9f 4f       	sbci	r25, 0xFF	; 255
    30e2:	fc 01       	movw	r30, r24
    30e4:	e2 0f       	add	r30, r18
    30e6:	f3 1f       	adc	r31, r19
    30e8:	8a e2       	ldi	r24, 0x2A	; 42
    30ea:	80 83       	st	Z, r24
			c++;
    30ec:	de 01       	movw	r26, r28
    30ee:	a6 54       	subi	r26, 0x46	; 70
    30f0:	bf 4f       	sbci	r27, 0xFF	; 255
    30f2:	fe 01       	movw	r30, r28
    30f4:	e6 54       	subi	r30, 0x46	; 70
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	80 81       	ld	r24, Z
    30fa:	8f 5f       	subi	r24, 0xFF	; 255
    30fc:	8c 93       	st	X, r24
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	ac e0       	ldi	r26, 0x0C	; 12
    3104:	b2 e4       	ldi	r27, 0x42	; 66
    3106:	8d ab       	std	Y+53, r24	; 0x35
    3108:	9e ab       	std	Y+54, r25	; 0x36
    310a:	af ab       	std	Y+55, r26	; 0x37
    310c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	6d a9       	ldd	r22, Y+53	; 0x35
    3110:	7e a9       	ldd	r23, Y+54	; 0x36
    3112:	8f a9       	ldd	r24, Y+55	; 0x37
    3114:	98 ad       	ldd	r25, Y+56	; 0x38
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a e7       	ldi	r20, 0x7A	; 122
    311c:	55 e4       	ldi	r21, 0x45	; 69
    311e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	89 ab       	std	Y+49, r24	; 0x31
    3128:	9a ab       	std	Y+50, r25	; 0x32
    312a:	ab ab       	std	Y+51, r26	; 0x33
    312c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    312e:	69 a9       	ldd	r22, Y+49	; 0x31
    3130:	7a a9       	ldd	r23, Y+50	; 0x32
    3132:	8b a9       	ldd	r24, Y+51	; 0x33
    3134:	9c a9       	ldd	r25, Y+52	; 0x34
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <main+0x1052>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	98 ab       	std	Y+48, r25	; 0x30
    314c:	8f a7       	std	Y+47, r24	; 0x2f
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <main+0x10d0>
	else if (__tmp > 65535)
    3150:	69 a9       	ldd	r22, Y+49	; 0x31
    3152:	7a a9       	ldd	r23, Y+50	; 0x32
    3154:	8b a9       	ldd	r24, Y+51	; 0x33
    3156:	9c a9       	ldd	r25, Y+52	; 0x34
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <main+0x10bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	6d a9       	ldd	r22, Y+53	; 0x35
    316a:	7e a9       	ldd	r23, Y+54	; 0x36
    316c:	8f a9       	ldd	r24, Y+55	; 0x37
    316e:	98 ad       	ldd	r25, Y+56	; 0x38
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	98 ab       	std	Y+48, r25	; 0x30
    318e:	8f a7       	std	Y+47, r24	; 0x2f
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <main+0x10b2>
    3192:	80 e9       	ldi	r24, 0x90	; 144
    3194:	91 e0       	ldi	r25, 0x01	; 1
    3196:	9e a7       	std	Y+46, r25	; 0x2e
    3198:	8d a7       	std	Y+45, r24	; 0x2d
    319a:	8d a5       	ldd	r24, Y+45	; 0x2d
    319c:	9e a5       	ldd	r25, Y+46	; 0x2e
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <main+0x10a0>
    31a2:	9e a7       	std	Y+46, r25	; 0x2e
    31a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a8:	98 a9       	ldd	r25, Y+48	; 0x30
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	98 ab       	std	Y+48, r25	; 0x30
    31ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    31b2:	98 a9       	ldd	r25, Y+48	; 0x30
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <main+0x1094>
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <main+0x10e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	69 a9       	ldd	r22, Y+49	; 0x31
    31bc:	7a a9       	ldd	r23, Y+50	; 0x32
    31be:	8b a9       	ldd	r24, Y+51	; 0x33
    31c0:	9c a9       	ldd	r25, Y+52	; 0x34
    31c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	98 ab       	std	Y+48, r25	; 0x30
    31cc:	8f a7       	std	Y+47, r24	; 0x2f
    31ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    31d0:	98 a9       	ldd	r25, Y+48	; 0x30
    31d2:	9c a7       	std	Y+44, r25	; 0x2c
    31d4:	8b a7       	std	Y+43, r24	; 0x2b
    31d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <main+0x10dc>
    31de:	9c a7       	std	Y+44, r25	; 0x2c
    31e0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(35);
		}

		if(key_Pressed == 0){
    31e2:	fe 01       	movw	r30, r28
    31e4:	e7 54       	subi	r30, 0x47	; 71
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	88 23       	and	r24, r24
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <main+0x10f2>
    31ee:	8c c0       	rjmp	.+280    	; 0x3308 <main+0x120a>
			LCD_displayCharacter('*');
    31f0:	8a e2       	ldi	r24, 0x2A	; 42
    31f2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '0';
    31f6:	fe 01       	movw	r30, r28
    31f8:	e6 54       	subi	r30, 0x46	; 70
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	80 81       	ld	r24, Z
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	ce 01       	movw	r24, r28
    3204:	84 54       	subi	r24, 0x44	; 68
    3206:	9f 4f       	sbci	r25, 0xFF	; 255
    3208:	fc 01       	movw	r30, r24
    320a:	e2 0f       	add	r30, r18
    320c:	f3 1f       	adc	r31, r19
    320e:	80 e3       	ldi	r24, 0x30	; 48
    3210:	80 83       	st	Z, r24
			c++;
    3212:	de 01       	movw	r26, r28
    3214:	a6 54       	subi	r26, 0x46	; 70
    3216:	bf 4f       	sbci	r27, 0xFF	; 255
    3218:	fe 01       	movw	r30, r28
    321a:	e6 54       	subi	r30, 0x46	; 70
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	80 81       	ld	r24, Z
    3220:	8f 5f       	subi	r24, 0xFF	; 255
    3222:	8c 93       	st	X, r24
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	ac e0       	ldi	r26, 0x0C	; 12
    322a:	b2 e4       	ldi	r27, 0x42	; 66
    322c:	8f a3       	std	Y+39, r24	; 0x27
    322e:	98 a7       	std	Y+40, r25	; 0x28
    3230:	a9 a7       	std	Y+41, r26	; 0x29
    3232:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3234:	6f a1       	ldd	r22, Y+39	; 0x27
    3236:	78 a5       	ldd	r23, Y+40	; 0x28
    3238:	89 a5       	ldd	r24, Y+41	; 0x29
    323a:	9a a5       	ldd	r25, Y+42	; 0x2a
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	4a e7       	ldi	r20, 0x7A	; 122
    3242:	55 e4       	ldi	r21, 0x45	; 69
    3244:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	8b a3       	std	Y+35, r24	; 0x23
    324e:	9c a3       	std	Y+36, r25	; 0x24
    3250:	ad a3       	std	Y+37, r26	; 0x25
    3252:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3254:	6b a1       	ldd	r22, Y+35	; 0x23
    3256:	7c a1       	ldd	r23, Y+36	; 0x24
    3258:	8d a1       	ldd	r24, Y+37	; 0x25
    325a:	9e a1       	ldd	r25, Y+38	; 0x26
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e8       	ldi	r20, 0x80	; 128
    3262:	5f e3       	ldi	r21, 0x3F	; 63
    3264:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3268:	88 23       	and	r24, r24
    326a:	2c f4       	brge	.+10     	; 0x3276 <main+0x1178>
		__ticks = 1;
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	9a a3       	std	Y+34, r25	; 0x22
    3272:	89 a3       	std	Y+33, r24	; 0x21
    3274:	3f c0       	rjmp	.+126    	; 0x32f4 <main+0x11f6>
	else if (__tmp > 65535)
    3276:	6b a1       	ldd	r22, Y+35	; 0x23
    3278:	7c a1       	ldd	r23, Y+36	; 0x24
    327a:	8d a1       	ldd	r24, Y+37	; 0x25
    327c:	9e a1       	ldd	r25, Y+38	; 0x26
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	3f ef       	ldi	r19, 0xFF	; 255
    3282:	4f e7       	ldi	r20, 0x7F	; 127
    3284:	57 e4       	ldi	r21, 0x47	; 71
    3286:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    328a:	18 16       	cp	r1, r24
    328c:	4c f5       	brge	.+82     	; 0x32e0 <main+0x11e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328e:	6f a1       	ldd	r22, Y+39	; 0x27
    3290:	78 a5       	ldd	r23, Y+40	; 0x28
    3292:	89 a5       	ldd	r24, Y+41	; 0x29
    3294:	9a a5       	ldd	r25, Y+42	; 0x2a
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e2       	ldi	r20, 0x20	; 32
    329c:	51 e4       	ldi	r21, 0x41	; 65
    329e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	9a a3       	std	Y+34, r25	; 0x22
    32b4:	89 a3       	std	Y+33, r24	; 0x21
    32b6:	0f c0       	rjmp	.+30     	; 0x32d6 <main+0x11d8>
    32b8:	80 e9       	ldi	r24, 0x90	; 144
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	98 a3       	std	Y+32, r25	; 0x20
    32be:	8f 8f       	std	Y+31, r24	; 0x1f
    32c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c2:	98 a1       	ldd	r25, Y+32	; 0x20
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <main+0x11c6>
    32c8:	98 a3       	std	Y+32, r25	; 0x20
    32ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32cc:	89 a1       	ldd	r24, Y+33	; 0x21
    32ce:	9a a1       	ldd	r25, Y+34	; 0x22
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	9a a3       	std	Y+34, r25	; 0x22
    32d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d6:	89 a1       	ldd	r24, Y+33	; 0x21
    32d8:	9a a1       	ldd	r25, Y+34	; 0x22
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	69 f7       	brne	.-38     	; 0x32b8 <main+0x11ba>
    32de:	14 c0       	rjmp	.+40     	; 0x3308 <main+0x120a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e0:	6b a1       	ldd	r22, Y+35	; 0x23
    32e2:	7c a1       	ldd	r23, Y+36	; 0x24
    32e4:	8d a1       	ldd	r24, Y+37	; 0x25
    32e6:	9e a1       	ldd	r25, Y+38	; 0x26
    32e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9a a3       	std	Y+34, r25	; 0x22
    32f2:	89 a3       	std	Y+33, r24	; 0x21
    32f4:	89 a1       	ldd	r24, Y+33	; 0x21
    32f6:	9a a1       	ldd	r25, Y+34	; 0x22
    32f8:	9e 8f       	std	Y+30, r25	; 0x1e
    32fa:	8d 8f       	std	Y+29, r24	; 0x1d
    32fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <main+0x1202>
    3304:	9e 8f       	std	Y+30, r25	; 0x1e
    3306:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(35);
		}

		if(key_Pressed == '#'){
    3308:	fe 01       	movw	r30, r28
    330a:	e7 54       	subi	r30, 0x47	; 71
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	83 32       	cpi	r24, 0x23	; 35
    3312:	09 f0       	breq	.+2      	; 0x3316 <main+0x1218>
    3314:	8c c0       	rjmp	.+280    	; 0x342e <main+0x1330>
			LCD_displayCharacter('*');
    3316:	8a e2       	ldi	r24, 0x2A	; 42
    3318:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <LCD_displayCharacter>
			pressed_Keys[c] = '#';
    331c:	fe 01       	movw	r30, r28
    331e:	e6 54       	subi	r30, 0x46	; 70
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 81       	ld	r24, Z
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	ce 01       	movw	r24, r28
    332a:	84 54       	subi	r24, 0x44	; 68
    332c:	9f 4f       	sbci	r25, 0xFF	; 255
    332e:	fc 01       	movw	r30, r24
    3330:	e2 0f       	add	r30, r18
    3332:	f3 1f       	adc	r31, r19
    3334:	83 e2       	ldi	r24, 0x23	; 35
    3336:	80 83       	st	Z, r24
			c++;
    3338:	de 01       	movw	r26, r28
    333a:	a6 54       	subi	r26, 0x46	; 70
    333c:	bf 4f       	sbci	r27, 0xFF	; 255
    333e:	fe 01       	movw	r30, r28
    3340:	e6 54       	subi	r30, 0x46	; 70
    3342:	ff 4f       	sbci	r31, 0xFF	; 255
    3344:	80 81       	ld	r24, Z
    3346:	8f 5f       	subi	r24, 0xFF	; 255
    3348:	8c 93       	st	X, r24
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	ac e0       	ldi	r26, 0x0C	; 12
    3350:	b2 e4       	ldi	r27, 0x42	; 66
    3352:	89 8f       	std	Y+25, r24	; 0x19
    3354:	9a 8f       	std	Y+26, r25	; 0x1a
    3356:	ab 8f       	std	Y+27, r26	; 0x1b
    3358:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335a:	69 8d       	ldd	r22, Y+25	; 0x19
    335c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    335e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	4a e7       	ldi	r20, 0x7A	; 122
    3368:	55 e4       	ldi	r21, 0x45	; 69
    336a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	8d 8b       	std	Y+21, r24	; 0x15
    3374:	9e 8b       	std	Y+22, r25	; 0x16
    3376:	af 8b       	std	Y+23, r26	; 0x17
    3378:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    337a:	6d 89       	ldd	r22, Y+21	; 0x15
    337c:	7e 89       	ldd	r23, Y+22	; 0x16
    337e:	8f 89       	ldd	r24, Y+23	; 0x17
    3380:	98 8d       	ldd	r25, Y+24	; 0x18
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e8       	ldi	r20, 0x80	; 128
    3388:	5f e3       	ldi	r21, 0x3F	; 63
    338a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    338e:	88 23       	and	r24, r24
    3390:	2c f4       	brge	.+10     	; 0x339c <main+0x129e>
		__ticks = 1;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	9c 8b       	std	Y+20, r25	; 0x14
    3398:	8b 8b       	std	Y+19, r24	; 0x13
    339a:	3f c0       	rjmp	.+126    	; 0x341a <main+0x131c>
	else if (__tmp > 65535)
    339c:	6d 89       	ldd	r22, Y+21	; 0x15
    339e:	7e 89       	ldd	r23, Y+22	; 0x16
    33a0:	8f 89       	ldd	r24, Y+23	; 0x17
    33a2:	98 8d       	ldd	r25, Y+24	; 0x18
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	3f ef       	ldi	r19, 0xFF	; 255
    33a8:	4f e7       	ldi	r20, 0x7F	; 127
    33aa:	57 e4       	ldi	r21, 0x47	; 71
    33ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    33b0:	18 16       	cp	r1, r24
    33b2:	4c f5       	brge	.+82     	; 0x3406 <main+0x1308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b4:	69 8d       	ldd	r22, Y+25	; 0x19
    33b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e2       	ldi	r20, 0x20	; 32
    33c2:	51 e4       	ldi	r21, 0x41	; 65
    33c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	9c 8b       	std	Y+20, r25	; 0x14
    33da:	8b 8b       	std	Y+19, r24	; 0x13
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <main+0x12fe>
    33de:	80 e9       	ldi	r24, 0x90	; 144
    33e0:	91 e0       	ldi	r25, 0x01	; 1
    33e2:	9a 8b       	std	Y+18, r25	; 0x12
    33e4:	89 8b       	std	Y+17, r24	; 0x11
    33e6:	89 89       	ldd	r24, Y+17	; 0x11
    33e8:	9a 89       	ldd	r25, Y+18	; 0x12
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <main+0x12ec>
    33ee:	9a 8b       	std	Y+18, r25	; 0x12
    33f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f2:	8b 89       	ldd	r24, Y+19	; 0x13
    33f4:	9c 89       	ldd	r25, Y+20	; 0x14
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	9c 8b       	std	Y+20, r25	; 0x14
    33fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fc:	8b 89       	ldd	r24, Y+19	; 0x13
    33fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3400:	00 97       	sbiw	r24, 0x00	; 0
    3402:	69 f7       	brne	.-38     	; 0x33de <main+0x12e0>
    3404:	14 c0       	rjmp	.+40     	; 0x342e <main+0x1330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3406:	6d 89       	ldd	r22, Y+21	; 0x15
    3408:	7e 89       	ldd	r23, Y+22	; 0x16
    340a:	8f 89       	ldd	r24, Y+23	; 0x17
    340c:	98 8d       	ldd	r25, Y+24	; 0x18
    340e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	9c 8b       	std	Y+20, r25	; 0x14
    3418:	8b 8b       	std	Y+19, r24	; 0x13
    341a:	8b 89       	ldd	r24, Y+19	; 0x13
    341c:	9c 89       	ldd	r25, Y+20	; 0x14
    341e:	98 8b       	std	Y+16, r25	; 0x10
    3420:	8f 87       	std	Y+15, r24	; 0x0f
    3422:	8f 85       	ldd	r24, Y+15	; 0x0f
    3424:	98 89       	ldd	r25, Y+16	; 0x10
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <main+0x1328>
    342a:	98 8b       	std	Y+16, r25	; 0x10
    342c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(35);
		}

		if(c == 5){
    342e:	fe 01       	movw	r30, r28
    3430:	e6 54       	subi	r30, 0x46	; 70
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	85 30       	cpi	r24, 0x05	; 5
    3438:	11 f0       	breq	.+4      	; 0x343e <main+0x1340>
    343a:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <main+0x116>
			for(int i = 0; i < 5; i++){
    343e:	fe 01       	movw	r30, r28
    3440:	e9 54       	subi	r30, 0x49	; 73
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	11 82       	std	Z+1, r1	; 0x01
    3446:	10 82       	st	Z, r1
    3448:	fe 01       	movw	r30, r28
    344a:	e9 54       	subi	r30, 0x49	; 73
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	85 30       	cpi	r24, 0x05	; 5
    3454:	91 05       	cpc	r25, r1
    3456:	14 f0       	brlt	.+4      	; 0x345c <main+0x135e>
    3458:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <main+0x116>
				if(pressed_Keys[i] == password[i]){
    345c:	fe 01       	movw	r30, r28
    345e:	e9 54       	subi	r30, 0x49	; 73
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	20 81       	ld	r18, Z
    3464:	31 81       	ldd	r19, Z+1	; 0x01
    3466:	ce 01       	movw	r24, r28
    3468:	84 54       	subi	r24, 0x44	; 68
    346a:	9f 4f       	sbci	r25, 0xFF	; 255
    346c:	fc 01       	movw	r30, r24
    346e:	e2 0f       	add	r30, r18
    3470:	f3 1f       	adc	r31, r19
    3472:	40 81       	ld	r20, Z
    3474:	fe 01       	movw	r30, r28
    3476:	e9 54       	subi	r30, 0x49	; 73
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	20 81       	ld	r18, Z
    347c:	31 81       	ldd	r19, Z+1	; 0x01
    347e:	ce 01       	movw	r24, r28
    3480:	8f 53       	subi	r24, 0x3F	; 63
    3482:	9f 4f       	sbci	r25, 0xFF	; 255
    3484:	fc 01       	movw	r30, r24
    3486:	e2 0f       	add	r30, r18
    3488:	f3 1f       	adc	r31, r19
    348a:	80 81       	ld	r24, Z
    348c:	48 17       	cp	r20, r24
    348e:	09 f0       	breq	.+2      	; 0x3492 <main+0x1394>
    3490:	80 c0       	rjmp	.+256    	; 0x3592 <main+0x1494>
					LCD_ClearScreen();
    3492:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_ClearScreen>
					LCD_displayString("Correct Password");
    3496:	8f e6       	ldi	r24, 0x6F	; 111
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_displayString>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	ac e0       	ldi	r26, 0x0C	; 12
    34a4:	b2 e4       	ldi	r27, 0x42	; 66
    34a6:	8b 87       	std	Y+11, r24	; 0x0b
    34a8:	9c 87       	std	Y+12, r25	; 0x0c
    34aa:	ad 87       	std	Y+13, r26	; 0x0d
    34ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	4a e7       	ldi	r20, 0x7A	; 122
    34bc:	55 e4       	ldi	r21, 0x45	; 69
    34be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	8f 83       	std	Y+7, r24	; 0x07
    34c8:	98 87       	std	Y+8, r25	; 0x08
    34ca:	a9 87       	std	Y+9, r26	; 0x09
    34cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34ce:	6f 81       	ldd	r22, Y+7	; 0x07
    34d0:	78 85       	ldd	r23, Y+8	; 0x08
    34d2:	89 85       	ldd	r24, Y+9	; 0x09
    34d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	40 e8       	ldi	r20, 0x80	; 128
    34dc:	5f e3       	ldi	r21, 0x3F	; 63
    34de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34e2:	88 23       	and	r24, r24
    34e4:	2c f4       	brge	.+10     	; 0x34f0 <main+0x13f2>
		__ticks = 1;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	9e 83       	std	Y+6, r25	; 0x06
    34ec:	8d 83       	std	Y+5, r24	; 0x05
    34ee:	3f c0       	rjmp	.+126    	; 0x356e <main+0x1470>
	else if (__tmp > 65535)
    34f0:	6f 81       	ldd	r22, Y+7	; 0x07
    34f2:	78 85       	ldd	r23, Y+8	; 0x08
    34f4:	89 85       	ldd	r24, Y+9	; 0x09
    34f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	3f ef       	ldi	r19, 0xFF	; 255
    34fc:	4f e7       	ldi	r20, 0x7F	; 127
    34fe:	57 e4       	ldi	r21, 0x47	; 71
    3500:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3504:	18 16       	cp	r1, r24
    3506:	4c f5       	brge	.+82     	; 0x355a <main+0x145c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3508:	6b 85       	ldd	r22, Y+11	; 0x0b
    350a:	7c 85       	ldd	r23, Y+12	; 0x0c
    350c:	8d 85       	ldd	r24, Y+13	; 0x0d
    350e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e2       	ldi	r20, 0x20	; 32
    3516:	51 e4       	ldi	r21, 0x41	; 65
    3518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
    3520:	bc 01       	movw	r22, r24
    3522:	cd 01       	movw	r24, r26
    3524:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
    3530:	0f c0       	rjmp	.+30     	; 0x3550 <main+0x1452>
    3532:	80 e9       	ldi	r24, 0x90	; 144
    3534:	91 e0       	ldi	r25, 0x01	; 1
    3536:	9c 83       	std	Y+4, r25	; 0x04
    3538:	8b 83       	std	Y+3, r24	; 0x03
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	9c 81       	ldd	r25, Y+4	; 0x04
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	f1 f7       	brne	.-4      	; 0x353e <main+0x1440>
    3542:	9c 83       	std	Y+4, r25	; 0x04
    3544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3546:	8d 81       	ldd	r24, Y+5	; 0x05
    3548:	9e 81       	ldd	r25, Y+6	; 0x06
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	9e 83       	std	Y+6, r25	; 0x06
    354e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3550:	8d 81       	ldd	r24, Y+5	; 0x05
    3552:	9e 81       	ldd	r25, Y+6	; 0x06
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	69 f7       	brne	.-38     	; 0x3532 <main+0x1434>
    3558:	14 c0       	rjmp	.+40     	; 0x3582 <main+0x1484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355a:	6f 81       	ldd	r22, Y+7	; 0x07
    355c:	78 85       	ldd	r23, Y+8	; 0x08
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	9e 83       	std	Y+6, r25	; 0x06
    356c:	8d 83       	std	Y+5, r24	; 0x05
    356e:	8d 81       	ldd	r24, Y+5	; 0x05
    3570:	9e 81       	ldd	r25, Y+6	; 0x06
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <main+0x147c>
    357e:	9a 83       	std	Y+2, r25	; 0x02
    3580:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(35);
					LCD_ClearScreen();
    3582:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_ClearScreen>
					LCD_displayString("Opened Safely");
    3586:	80 e8       	ldi	r24, 0x80	; 128
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_displayString>
    358e:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <main+0x116>
					break;
				}
				else{
					LCD_ClearScreen();
    3592:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <LCD_ClearScreen>
					LCD_displayString("Error");
    3596:	8e e8       	ldi	r24, 0x8E	; 142
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <LCD_displayString>
    359e:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <main+0x116>

000035a2 <__prologue_saves__>:
    35a2:	2f 92       	push	r2
    35a4:	3f 92       	push	r3
    35a6:	4f 92       	push	r4
    35a8:	5f 92       	push	r5
    35aa:	6f 92       	push	r6
    35ac:	7f 92       	push	r7
    35ae:	8f 92       	push	r8
    35b0:	9f 92       	push	r9
    35b2:	af 92       	push	r10
    35b4:	bf 92       	push	r11
    35b6:	cf 92       	push	r12
    35b8:	df 92       	push	r13
    35ba:	ef 92       	push	r14
    35bc:	ff 92       	push	r15
    35be:	0f 93       	push	r16
    35c0:	1f 93       	push	r17
    35c2:	cf 93       	push	r28
    35c4:	df 93       	push	r29
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	ca 1b       	sub	r28, r26
    35cc:	db 0b       	sbc	r29, r27
    35ce:	0f b6       	in	r0, 0x3f	; 63
    35d0:	f8 94       	cli
    35d2:	de bf       	out	0x3e, r29	; 62
    35d4:	0f be       	out	0x3f, r0	; 63
    35d6:	cd bf       	out	0x3d, r28	; 61
    35d8:	09 94       	ijmp

000035da <__epilogue_restores__>:
    35da:	2a 88       	ldd	r2, Y+18	; 0x12
    35dc:	39 88       	ldd	r3, Y+17	; 0x11
    35de:	48 88       	ldd	r4, Y+16	; 0x10
    35e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    35e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    35e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    35e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    35e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    35ec:	b9 84       	ldd	r11, Y+9	; 0x09
    35ee:	c8 84       	ldd	r12, Y+8	; 0x08
    35f0:	df 80       	ldd	r13, Y+7	; 0x07
    35f2:	ee 80       	ldd	r14, Y+6	; 0x06
    35f4:	fd 80       	ldd	r15, Y+5	; 0x05
    35f6:	0c 81       	ldd	r16, Y+4	; 0x04
    35f8:	1b 81       	ldd	r17, Y+3	; 0x03
    35fa:	aa 81       	ldd	r26, Y+2	; 0x02
    35fc:	b9 81       	ldd	r27, Y+1	; 0x01
    35fe:	ce 0f       	add	r28, r30
    3600:	d1 1d       	adc	r29, r1
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	ed 01       	movw	r28, r26
    360e:	08 95       	ret

00003610 <_exit>:
    3610:	f8 94       	cli

00003612 <__stop_program>:
    3612:	ff cf       	rjmp	.-2      	; 0x3612 <__stop_program>
