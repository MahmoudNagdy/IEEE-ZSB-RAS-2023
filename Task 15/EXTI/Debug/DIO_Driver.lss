
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00005960  000059f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800110  00800110  00005aa4  2**0
                  ALLOC
  3 .stab         000056b8  00000000  00000000  00005aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f37  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d093  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ef8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000fe77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000117df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__vector_1>
       8:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_2>
       c:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f9 e5       	ldi	r31, 0x59	; 89
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 32       	cpi	r26, 0x24	; 36
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <main>
      8a:	0c 94 ae 2c 	jmp	0x595c	; 0x595c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 2c 	jmp	0x58ee	; 0x58ee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 93 2c 	jmp	0x5926	; 0x5926 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 83 2c 	jmp	0x5906	; 0x5906 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9f 2c 	jmp	0x593e	; 0x593e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 83 2c 	jmp	0x5906	; 0x5906 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9f 2c 	jmp	0x593e	; 0x593e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 77 2c 	jmp	0x58ee	; 0x58ee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 93 2c 	jmp	0x5926	; 0x5926 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 83 2c 	jmp	0x5906	; 0x5906 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9f 2c 	jmp	0x593e	; 0x593e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 83 2c 	jmp	0x5906	; 0x5906 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9f 2c 	jmp	0x593e	; 0x593e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 83 2c 	jmp	0x5906	; 0x5906 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9f 2c 	jmp	0x593e	; 0x593e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 87 2c 	jmp	0x590e	; 0x590e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a3 2c 	jmp	0x5946	; 0x5946 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Switch_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Switch_Init+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
     b58:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
     b5a:	1a 82       	std	Y+2, r1	; 0x02
     b5c:	19 82       	std	Y+1, r1	; 0x01
     b5e:	50 c0       	rjmp	.+160    	; 0xc00 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
     b60:	29 81       	ldd	r18, Y+1	; 0x01
     b62:	3a 81       	ldd	r19, Y+2	; 0x02
     b64:	c9 01       	movw	r24, r18
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	28 0f       	add	r18, r24
     b6c:	39 1f       	adc	r19, r25
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	fc 01       	movw	r30, r24
     b74:	e2 0f       	add	r30, r18
     b76:	f3 1f       	adc	r31, r19
     b78:	40 81       	ld	r20, Z
     b7a:	29 81       	ldd	r18, Y+1	; 0x01
     b7c:	3a 81       	ldd	r19, Y+2	; 0x02
     b7e:	c9 01       	movw	r24, r18
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	28 0f       	add	r18, r24
     b86:	39 1f       	adc	r19, r25
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	fc 01       	movw	r30, r24
     b8e:	e2 0f       	add	r30, r18
     b90:	f3 1f       	adc	r31, r19
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	84 2f       	mov	r24, r20
     b96:	69 2f       	mov	r22, r25
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
     b9e:	29 81       	ldd	r18, Y+1	; 0x01
     ba0:	3a 81       	ldd	r19, Y+2	; 0x02
     ba2:	c9 01       	movw	r24, r18
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	28 0f       	add	r18, r24
     baa:	39 1f       	adc	r19, r25
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	fc 01       	movw	r30, r24
     bb2:	e2 0f       	add	r30, r18
     bb4:	f3 1f       	adc	r31, r19
     bb6:	50 81       	ld	r21, Z
     bb8:	29 81       	ldd	r18, Y+1	; 0x01
     bba:	3a 81       	ldd	r19, Y+2	; 0x02
     bbc:	c9 01       	movw	r24, r18
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	28 0f       	add	r18, r24
     bc4:	39 1f       	adc	r19, r25
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	fc 01       	movw	r30, r24
     bcc:	e2 0f       	add	r30, r18
     bce:	f3 1f       	adc	r31, r19
     bd0:	41 81       	ldd	r20, Z+1	; 0x01
     bd2:	29 81       	ldd	r18, Y+1	; 0x01
     bd4:	3a 81       	ldd	r19, Y+2	; 0x02
     bd6:	c9 01       	movw	r24, r18
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	28 0f       	add	r18, r24
     bde:	39 1f       	adc	r19, r25
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	fc 01       	movw	r30, r24
     be6:	e2 0f       	add	r30, r18
     be8:	f3 1f       	adc	r31, r19
     bea:	92 81       	ldd	r25, Z+2	; 0x02
     bec:	85 2f       	mov	r24, r21
     bee:	64 2f       	mov	r22, r20
     bf0:	49 2f       	mov	r20, r25
     bf2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	9a 83       	std	Y+2, r25	; 0x02
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	8d 81       	ldd	r24, Y+5	; 0x05
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	82 17       	cp	r24, r18
     c0c:	93 07       	cpc	r25, r19
     c0e:	0c f4       	brge	.+2      	; 0xc12 <Switch_Init+0xcc>
     c10:	a7 cf       	rjmp	.-178    	; 0xb60 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <Switch_GetValue+0x6>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <Switch_GetValue+0x8>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	7c 83       	std	Y+4, r23	; 0x04
     c34:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	80 81       	ld	r24, Z
     c3c:	e9 81       	ldd	r30, Y+1	; 0x01
     c3e:	fa 81       	ldd	r31, Y+2	; 0x02
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	2b 81       	ldd	r18, Y+3	; 0x03
     c44:	3c 81       	ldd	r19, Y+4	; 0x04
     c46:	69 2f       	mov	r22, r25
     c48:	a9 01       	movw	r20, r18
     c4a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_u8GetPinValue>
}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <LCD_setPinDirection+0x6>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <LCD_setPinDirection+0x8>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	6a 83       	std	Y+2, r22	; 0x02
     c6e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	88 30       	cpi	r24, 0x08	; 8
     c74:	08 f0       	brcs	.+2      	; 0xc78 <LCD_setPinDirection+0x1c>
     c76:	d5 c0       	rjmp	.+426    	; 0xe22 <LCD_setPinDirection+0x1c6>
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <LCD_setPinDirection+0x24>
     c7e:	d1 c0       	rjmp	.+418    	; 0xe22 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	3d 83       	std	Y+5, r19	; 0x05
     c88:	2c 83       	std	Y+4, r18	; 0x04
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	91 05       	cpc	r25, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <LCD_setPinDirection+0x3a>
     c94:	43 c0       	rjmp	.+134    	; 0xd1c <LCD_setPinDirection+0xc0>
     c96:	2c 81       	ldd	r18, Y+4	; 0x04
     c98:	3d 81       	ldd	r19, Y+5	; 0x05
     c9a:	22 30       	cpi	r18, 0x02	; 2
     c9c:	31 05       	cpc	r19, r1
     c9e:	2c f4       	brge	.+10     	; 0xcaa <LCD_setPinDirection+0x4e>
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
     ca2:	9d 81       	ldd	r25, Y+5	; 0x05
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	71 f0       	breq	.+28     	; 0xcc4 <LCD_setPinDirection+0x68>
     ca8:	bc c0       	rjmp	.+376    	; 0xe22 <LCD_setPinDirection+0x1c6>
     caa:	2c 81       	ldd	r18, Y+4	; 0x04
     cac:	3d 81       	ldd	r19, Y+5	; 0x05
     cae:	22 30       	cpi	r18, 0x02	; 2
     cb0:	31 05       	cpc	r19, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <LCD_setPinDirection+0x5a>
     cb4:	5f c0       	rjmp	.+190    	; 0xd74 <LCD_setPinDirection+0x118>
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <LCD_setPinDirection+0x66>
     cc0:	85 c0       	rjmp	.+266    	; 0xdcc <LCD_setPinDirection+0x170>
     cc2:	af c0       	rjmp	.+350    	; 0xe22 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	a1 f4       	brne	.+40     	; 0xcf2 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     cca:	aa e3       	ldi	r26, 0x3A	; 58
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ea e3       	ldi	r30, 0x3A	; 58
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <LCD_setPinDirection+0x8c>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <LCD_setPinDirection+0x88>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	98 c0       	rjmp	.+304    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
     cf2:	aa e3       	ldi	r26, 0x3A	; 58
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ea e3       	ldi	r30, 0x3A	; 58
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <LCD_setPinDirection+0xb4>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <LCD_setPinDirection+0xb0>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	83 c0       	rjmp	.+262    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	a1 f4       	brne	.+40     	; 0xd4a <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d22:	a7 e3       	ldi	r26, 0x37	; 55
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e3       	ldi	r30, 0x37	; 55
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <LCD_setPinDirection+0xe4>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <LCD_setPinDirection+0xe0>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	6c c0       	rjmp	.+216    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <LCD_setPinDirection+0x10c>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <LCD_setPinDirection+0x108>
     d6c:	80 95       	com	r24
     d6e:	84 23       	and	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	57 c0       	rjmp	.+174    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d7a:	a4 e3       	ldi	r26, 0x34	; 52
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e4 e3       	ldi	r30, 0x34	; 52
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <LCD_setPinDirection+0x13c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <LCD_setPinDirection+0x138>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	40 c0       	rjmp	.+128    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
     da2:	a4 e3       	ldi	r26, 0x34	; 52
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e4 e3       	ldi	r30, 0x34	; 52
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <LCD_setPinDirection+0x164>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <LCD_setPinDirection+0x160>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	2b c0       	rjmp	.+86     	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     dd2:	a1 e3       	ldi	r26, 0x31	; 49
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e1 e3       	ldi	r30, 0x31	; 49
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <LCD_setPinDirection+0x194>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <LCD_setPinDirection+0x190>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
     dfa:	a1 e3       	ldi	r26, 0x31	; 49
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e1 e3       	ldi	r30, 0x31	; 49
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <LCD_setPinDirection+0x1bc>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <LCD_setPinDirection+0x1b8>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <LCD_setPinValue+0x6>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <LCD_setPinValue+0x8>
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	6a 83       	std	Y+2, r22	; 0x02
     e44:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <LCD_setPinValue+0x1c>
     e4c:	d5 c0       	rjmp	.+426    	; 0xff8 <LCD_setPinValue+0x1c6>
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	08 f0       	brcs	.+2      	; 0xe56 <LCD_setPinValue+0x24>
     e54:	d1 c0       	rjmp	.+418    	; 0xff8 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3d 83       	std	Y+5, r19	; 0x05
     e5e:	2c 83       	std	Y+4, r18	; 0x04
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <LCD_setPinValue+0x3a>
     e6a:	43 c0       	rjmp	.+134    	; 0xef2 <LCD_setPinValue+0xc0>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	2c f4       	brge	.+10     	; 0xe80 <LCD_setPinValue+0x4e>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	71 f0       	breq	.+28     	; 0xe9a <LCD_setPinValue+0x68>
     e7e:	bc c0       	rjmp	.+376    	; 0xff8 <LCD_setPinValue+0x1c6>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <LCD_setPinValue+0x5a>
     e8a:	5f c0       	rjmp	.+190    	; 0xf4a <LCD_setPinValue+0x118>
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	91 05       	cpc	r25, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <LCD_setPinValue+0x66>
     e96:	85 c0       	rjmp	.+266    	; 0xfa2 <LCD_setPinValue+0x170>
     e98:	af c0       	rjmp	.+350    	; 0xff8 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ea0:	ab e3       	ldi	r26, 0x3B	; 59
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	eb e3       	ldi	r30, 0x3B	; 59
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <LCD_setPinValue+0x8c>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <LCD_setPinValue+0x88>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	98 c0       	rjmp	.+304    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
     ec8:	ab e3       	ldi	r26, 0x3B	; 59
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e3       	ldi	r30, 0x3B	; 59
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <LCD_setPinValue+0xb4>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <LCD_setPinValue+0xb0>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	83 c0       	rjmp	.+262    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	a1 f4       	brne	.+40     	; 0xf20 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ef8:	a8 e3       	ldi	r26, 0x38	; 56
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e8 e3       	ldi	r30, 0x38	; 56
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <LCD_setPinValue+0xe4>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <LCD_setPinValue+0xe0>
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	6c c0       	rjmp	.+216    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
     f20:	a8 e3       	ldi	r26, 0x38	; 56
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e8 e3       	ldi	r30, 0x38	; 56
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <LCD_setPinValue+0x10c>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <LCD_setPinValue+0x108>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	57 c0       	rjmp	.+174    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	a1 f4       	brne	.+40     	; 0xf78 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <LCD_setPinValue+0x13c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <LCD_setPinValue+0x138>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	40 c0       	rjmp	.+128    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
     f78:	a5 e3       	ldi	r26, 0x35	; 53
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e3       	ldi	r30, 0x35	; 53
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <LCD_setPinValue+0x164>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <LCD_setPinValue+0x160>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	2b c0       	rjmp	.+86     	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	a1 f4       	brne	.+40     	; 0xfd0 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fa8:	a2 e3       	ldi	r26, 0x32	; 50
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e2 e3       	ldi	r30, 0x32	; 50
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <LCD_setPinValue+0x194>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <LCD_setPinValue+0x190>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
     fd0:	a2 e3       	ldi	r26, 0x32	; 50
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e2 e3       	ldi	r30, 0x32	; 50
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <LCD_setPinValue+0x1bc>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <LCD_setPinValue+0x1b8>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <LCD_getPinValue+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <LCD_getPinValue+0x8>
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    101a:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	08 f0       	brcs	.+2      	; 0x1024 <LCD_getPinValue+0x1c>
    1022:	84 c0       	rjmp	.+264    	; 0x112c <LCD_getPinValue+0x124>
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	08 f0       	brcs	.+2      	; 0x102c <LCD_getPinValue+0x24>
    102a:	80 c0       	rjmp	.+256    	; 0x112c <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	3d 83       	std	Y+5, r19	; 0x05
    1034:	2c 83       	std	Y+4, r18	; 0x04
    1036:	4c 81       	ldd	r20, Y+4	; 0x04
    1038:	5d 81       	ldd	r21, Y+5	; 0x05
    103a:	41 30       	cpi	r20, 0x01	; 1
    103c:	51 05       	cpc	r21, r1
    103e:	79 f1       	breq	.+94     	; 0x109e <LCD_getPinValue+0x96>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	91 05       	cpc	r25, r1
    1048:	34 f4       	brge	.+12     	; 0x1056 <LCD_getPinValue+0x4e>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	69 f0       	breq	.+26     	; 0x106e <LCD_getPinValue+0x66>
    1054:	6b c0       	rjmp	.+214    	; 0x112c <LCD_getPinValue+0x124>
    1056:	4c 81       	ldd	r20, Y+4	; 0x04
    1058:	5d 81       	ldd	r21, Y+5	; 0x05
    105a:	42 30       	cpi	r20, 0x02	; 2
    105c:	51 05       	cpc	r21, r1
    105e:	b9 f1       	breq	.+110    	; 0x10ce <LCD_getPinValue+0xc6>
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <LCD_getPinValue+0x64>
    106a:	49 c0       	rjmp	.+146    	; 0x10fe <LCD_getPinValue+0xf6>
    106c:	5f c0       	rjmp	.+190    	; 0x112c <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    106e:	e9 e3       	ldi	r30, 0x39	; 57
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a9 01       	movw	r20, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <LCD_getPinValue+0x7e>
    1082:	55 95       	asr	r21
    1084:	47 95       	ror	r20
    1086:	8a 95       	dec	r24
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <LCD_getPinValue+0x7a>
    108a:	ca 01       	movw	r24, r20
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	90 70       	andi	r25, 0x00	; 0
    1090:	88 23       	and	r24, r24
    1092:	19 f0       	breq	.+6      	; 0x109a <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	49 c0       	rjmp	.+146    	; 0x112c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	47 c0       	rjmp	.+142    	; 0x112c <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    109e:	e6 e3       	ldi	r30, 0x36	; 54
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <LCD_getPinValue+0xae>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <LCD_getPinValue+0xaa>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	88 23       	and	r24, r24
    10c2:	19 f0       	breq	.+6      	; 0x10ca <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	31 c0       	rjmp	.+98     	; 0x112c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10ca:	19 82       	std	Y+1, r1	; 0x01
    10cc:	2f c0       	rjmp	.+94     	; 0x112c <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10ce:	e3 e3       	ldi	r30, 0x33	; 51
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <LCD_getPinValue+0xde>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <LCD_getPinValue+0xda>
    10ea:	ca 01       	movw	r24, r20
    10ec:	81 70       	andi	r24, 0x01	; 1
    10ee:	90 70       	andi	r25, 0x00	; 0
    10f0:	88 23       	and	r24, r24
    10f2:	19 f0       	breq	.+6      	; 0x10fa <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	19 c0       	rjmp	.+50     	; 0x112c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	17 c0       	rjmp	.+46     	; 0x112c <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    10fe:	e0 e3       	ldi	r30, 0x30	; 48
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <LCD_getPinValue+0x10e>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <LCD_getPinValue+0x10a>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	88 23       	and	r24, r24
    1122:	19 f0       	breq	.+6      	; 0x112a <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	01 c0       	rjmp	.+2      	; 0x112c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    112a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    112c:	89 81       	ldd	r24, Y+1	; 0x01
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <LCD_setPortDirection+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <LCD_setPortDirection+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	84 30       	cpi	r24, 0x04	; 4
    1152:	90 f5       	brcc	.+100    	; 0x11b8 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3c 83       	std	Y+4, r19	; 0x04
    115c:	2b 83       	std	Y+3, r18	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	d1 f0       	breq	.+52     	; 0x119c <LCD_setPortDirection+0x5e>
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	3c 81       	ldd	r19, Y+4	; 0x04
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <LCD_setPortDirection+0x3e>
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f0       	breq	.+24     	; 0x1192 <LCD_setPortDirection+0x54>
    117a:	1e c0       	rjmp	.+60     	; 0x11b8 <LCD_setPortDirection+0x7a>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	3c 81       	ldd	r19, Y+4	; 0x04
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <LCD_setPortDirection+0x68>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <LCD_setPortDirection+0x72>
    1190:	13 c0       	rjmp	.+38     	; 0x11b8 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1192:	ea e3       	ldi	r30, 0x3A	; 58
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	80 83       	st	Z, r24
    119a:	0e c0       	rjmp	.+28     	; 0x11b8 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    119c:	e7 e3       	ldi	r30, 0x37	; 55
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11a6:	e4 e3       	ldi	r30, 0x34	; 52
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 83       	st	Z, r24
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11b0:	e1 e3       	ldi	r30, 0x31	; 49
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <LCD_setPortValue+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <LCD_setPortValue+0x8>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	90 f5       	brcc	.+100    	; 0x1240 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	3c 83       	std	Y+4, r19	; 0x04
    11e4:	2b 83       	std	Y+3, r18	; 0x03
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	d1 f0       	breq	.+52     	; 0x1224 <LCD_setPortValue+0x5e>
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	3c 81       	ldd	r19, Y+4	; 0x04
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <LCD_setPortValue+0x3e>
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	61 f0       	breq	.+24     	; 0x121a <LCD_setPortValue+0x54>
    1202:	1e c0       	rjmp	.+60     	; 0x1240 <LCD_setPortValue+0x7a>
    1204:	2b 81       	ldd	r18, Y+3	; 0x03
    1206:	3c 81       	ldd	r19, Y+4	; 0x04
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	81 f0       	breq	.+32     	; 0x122e <LCD_setPortValue+0x68>
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <LCD_setPortValue+0x72>
    1218:	13 c0       	rjmp	.+38     	; 0x1240 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 83       	st	Z, r24
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1224:	e8 e3       	ldi	r30, 0x38	; 56
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1238:	e2 e3       	ldi	r30, 0x32	; 50
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <LCD_getPortValue+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <LCD_getPortValue+0x8>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    125c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	90 f5       	brcc	.+100    	; 0x12c8 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3c 83       	std	Y+4, r19	; 0x04
    126c:	2b 83       	std	Y+3, r18	; 0x03
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	d1 f0       	breq	.+52     	; 0x12ac <LCD_getPortValue+0x5e>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	2c f4       	brge	.+10     	; 0x128c <LCD_getPortValue+0x3e>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	61 f0       	breq	.+24     	; 0x12a2 <LCD_getPortValue+0x54>
    128a:	1e c0       	rjmp	.+60     	; 0x12c8 <LCD_getPortValue+0x7a>
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3c 81       	ldd	r19, Y+4	; 0x04
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	81 f0       	breq	.+32     	; 0x12b6 <LCD_getPortValue+0x68>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <LCD_getPortValue+0x72>
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12a2:	e9 e3       	ldi	r30, 0x39	; 57
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	0e c0       	rjmp	.+28     	; 0x12c8 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12ac:	e6 e3       	ldi	r30, 0x36	; 54
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12b6:	e3 e3       	ldi	r30, 0x33	; 51
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12c0:	e0 e3       	ldi	r30, 0x30	; 48
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    12e0:	af e5       	ldi	r26, 0x5F	; 95
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ef e5       	ldi	r30, 0x5F	; 95
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 68       	ori	r24, 0x80	; 128
    12ec:	8c 93       	st	X, r24
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    12fc:	af e5       	ldi	r26, 0x5F	; 95
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	ef e5       	ldi	r30, 0x5F	; 95
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 77       	andi	r24, 0x7F	; 127
    1308:	8c 93       	st	X, r24
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <setCallBack+0x6>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	fc 01       	movw	r30, r24
    132e:	e0 5f       	subi	r30, 0xF0	; 240
    1330:	fe 4f       	sbci	r31, 0xFE	; 254
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    134e:	a5 e5       	ldi	r26, 0x55	; 85
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e5 e5       	ldi	r30, 0x55	; 85
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8e 7f       	andi	r24, 0xFE	; 254
    135a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    135c:	a5 e5       	ldi	r26, 0x55	; 85
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e5       	ldi	r30, 0x55	; 85
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8d 7f       	andi	r24, 0xFD	; 253
    1368:	8c 93       	st	X, r24
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	82 60       	ori	r24, 0x02	; 2
    1384:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8e 7f       	andi	r24, 0xFE	; 254
    1392:	8c 93       	st	X, r24
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    13a2:	a5 e5       	ldi	r26, 0x55	; 85
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e5 e5       	ldi	r30, 0x55	; 85
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8d 7f       	andi	r24, 0xFD	; 253
    13ae:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    13b0:	a5 e5       	ldi	r26, 0x55	; 85
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e5       	ldi	r30, 0x55	; 85
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	8c 93       	st	X, r24
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    13cc:	a5 e5       	ldi	r26, 0x55	; 85
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e5       	ldi	r30, 0x55	; 85
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	82 60       	ori	r24, 0x02	; 2
    13d8:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    13da:	a5 e5       	ldi	r26, 0x55	; 85
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e5       	ldi	r30, 0x55	; 85
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	8c 93       	st	X, r24
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    13f6:	a5 e5       	ldi	r26, 0x55	; 85
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e5       	ldi	r30, 0x55	; 85
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8b 7f       	andi	r24, 0xFB	; 251
    1402:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1404:	a5 e5       	ldi	r26, 0x55	; 85
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e5 e5       	ldi	r30, 0x55	; 85
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	87 7f       	andi	r24, 0xF7	; 247
    1410:	8c 93       	st	X, r24
}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1420:	a5 e5       	ldi	r26, 0x55	; 85
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e5       	ldi	r30, 0x55	; 85
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	88 60       	ori	r24, 0x08	; 8
    142c:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    142e:	a5 e5       	ldi	r26, 0x55	; 85
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e5       	ldi	r30, 0x55	; 85
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8b 7f       	andi	r24, 0xFB	; 251
    143a:	8c 93       	st	X, r24
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    144a:	a5 e5       	ldi	r26, 0x55	; 85
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e5 e5       	ldi	r30, 0x55	; 85
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	87 7f       	andi	r24, 0xF7	; 247
    1456:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1458:	a5 e5       	ldi	r26, 0x55	; 85
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e5 e5       	ldi	r30, 0x55	; 85
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	84 60       	ori	r24, 0x04	; 4
    1464:	8c 93       	st	X, r24
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1474:	a5 e5       	ldi	r26, 0x55	; 85
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e5       	ldi	r30, 0x55	; 85
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	88 60       	ori	r24, 0x08	; 8
    1480:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1482:	a5 e5       	ldi	r26, 0x55	; 85
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e5 e5       	ldi	r30, 0x55	; 85
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	84 60       	ori	r24, 0x04	; 4
    148e:	8c 93       	st	X, r24
}
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    149e:	a4 e5       	ldi	r26, 0x54	; 84
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e4 e5       	ldi	r30, 0x54	; 84
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 64       	ori	r24, 0x40	; 64
    14aa:	8c 93       	st	X, r24
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    14ba:	a4 e5       	ldi	r26, 0x54	; 84
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e4 e5       	ldi	r30, 0x54	; 84
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 7b       	andi	r24, 0xBF	; 191
    14c6:	8c 93       	st	X, r24
}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_AnyLogicalChange_MODE();
    14d6:	0e 94 cd 09 	call	0x139a	; 0x139a <EXTI0_AnyLogicalChange_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    14da:	ab e5       	ldi	r26, 0x5B	; 91
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e5       	ldi	r30, 0x5B	; 91
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 64       	ori	r24, 0x40	; 64
    14e6:	8c 93       	st	X, r24
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    14f6:	0e 94 21 0a 	call	0x1442	; 0x1442 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    14fa:	ab e5       	ldi	r26, 0x5B	; 91
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e5       	ldi	r30, 0x5B	; 91
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	8c 93       	st	X, r24
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <EXTI_voidEnable>:


void EXTI_voidEnable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Mode){
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	2a 97       	sbiw	r28, 0x0a	; 10
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_EXTI_Index){
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3a 87       	std	Y+10, r19	; 0x0a
    152e:	29 87       	std	Y+9, r18	; 0x09
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	e9 f1       	breq	.+122    	; 0x15b4 <EXTI_voidEnable+0xa6>
    153a:	29 85       	ldd	r18, Y+9	; 0x09
    153c:	3a 85       	ldd	r19, Y+10	; 0x0a
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <EXTI_voidEnable+0x38>
    1544:	69 c0       	rjmp	.+210    	; 0x1618 <EXTI_voidEnable+0x10a>
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	09 f0       	breq	.+2      	; 0x1550 <EXTI_voidEnable+0x42>
    154e:	7f c0       	rjmp	.+254    	; 0x164e <EXTI_voidEnable+0x140>
		case EXTI0_Index:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1550:	ab e5       	ldi	r26, 0x5B	; 91
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	eb e5       	ldi	r30, 0x5B	; 91
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 64       	ori	r24, 0x40	; 64
    155c:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	38 87       	std	Y+8, r19	; 0x08
    1566:	2f 83       	std	Y+7, r18	; 0x07
    1568:	8f 81       	ldd	r24, Y+7	; 0x07
    156a:	98 85       	ldd	r25, Y+8	; 0x08
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	91 05       	cpc	r25, r1
    1570:	c1 f0       	breq	.+48     	; 0x15a2 <EXTI_voidEnable+0x94>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	2c f4       	brge	.+10     	; 0x1586 <EXTI_voidEnable+0x78>
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	98 85       	ldd	r25, Y+8	; 0x08
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	61 f0       	breq	.+24     	; 0x159c <EXTI_voidEnable+0x8e>
    1584:	64 c0       	rjmp	.+200    	; 0x164e <EXTI_voidEnable+0x140>
    1586:	2f 81       	ldd	r18, Y+7	; 0x07
    1588:	38 85       	ldd	r19, Y+8	; 0x08
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	61 f0       	breq	.+24     	; 0x15a8 <EXTI_voidEnable+0x9a>
    1590:	8f 81       	ldd	r24, Y+7	; 0x07
    1592:	98 85       	ldd	r25, Y+8	; 0x08
    1594:	83 30       	cpi	r24, 0x03	; 3
    1596:	91 05       	cpc	r25, r1
    1598:	51 f0       	breq	.+20     	; 0x15ae <EXTI_voidEnable+0xa0>
    159a:	59 c0       	rjmp	.+178    	; 0x164e <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    159c:	0e 94 a3 09 	call	0x1346	; 0x1346 <EXTI0_LowLevel_MODE>
    15a0:	56 c0       	rjmp	.+172    	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    15a2:	0e 94 b8 09 	call	0x1370	; 0x1370 <EXTI0_FALLING_MODE>
    15a6:	53 c0       	rjmp	.+166    	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    15a8:	0e 94 cd 09 	call	0x139a	; 0x139a <EXTI0_AnyLogicalChange_MODE>
    15ac:	50 c0       	rjmp	.+160    	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    15ae:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <EXTI0_RISING_MODE>
    15b2:	4d c0       	rjmp	.+154    	; 0x164e <EXTI_voidEnable+0x140>
			}
			break;

		case EXTI1_Index:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    15b4:	ab e5       	ldi	r26, 0x5B	; 91
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	eb e5       	ldi	r30, 0x5B	; 91
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 68       	ori	r24, 0x80	; 128
    15c0:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3e 83       	std	Y+6, r19	; 0x06
    15ca:	2d 83       	std	Y+5, r18	; 0x05
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	c1 f0       	breq	.+48     	; 0x1606 <EXTI_voidEnable+0xf8>
    15d6:	2d 81       	ldd	r18, Y+5	; 0x05
    15d8:	3e 81       	ldd	r19, Y+6	; 0x06
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <EXTI_voidEnable+0xdc>
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	61 f0       	breq	.+24     	; 0x1600 <EXTI_voidEnable+0xf2>
    15e8:	32 c0       	rjmp	.+100    	; 0x164e <EXTI_voidEnable+0x140>
    15ea:	2d 81       	ldd	r18, Y+5	; 0x05
    15ec:	3e 81       	ldd	r19, Y+6	; 0x06
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	61 f0       	breq	.+24     	; 0x160c <EXTI_voidEnable+0xfe>
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	91 05       	cpc	r25, r1
    15fc:	51 f0       	breq	.+20     	; 0x1612 <EXTI_voidEnable+0x104>
    15fe:	27 c0       	rjmp	.+78     	; 0x164e <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    1600:	0e 94 f7 09 	call	0x13ee	; 0x13ee <EXTI1_LowLevel_MODE>
    1604:	24 c0       	rjmp	.+72     	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    1606:	0e 94 0c 0a 	call	0x1418	; 0x1418 <EXTI1_FALLING_MODE>
    160a:	21 c0       	rjmp	.+66     	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    160c:	0e 94 21 0a 	call	0x1442	; 0x1442 <EXTI1_AnyLogicalChange_MODE>
    1610:	1e c0       	rjmp	.+60     	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1612:	0e 94 36 0a 	call	0x146c	; 0x146c <EXTI1_RISING_MODE>
    1616:	1b c0       	rjmp	.+54     	; 0x164e <EXTI_voidEnable+0x140>
					break;
			}
			break;
		case EXTI2_Index:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1618:	ab e5       	ldi	r26, 0x5B	; 91
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e5       	ldi	r30, 0x5B	; 91
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 62       	ori	r24, 0x20	; 32
    1624:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3c 83       	std	Y+4, r19	; 0x04
    162e:	2b 83       	std	Y+3, r18	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	41 f0       	breq	.+16     	; 0x164a <EXTI_voidEnable+0x13c>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	23 30       	cpi	r18, 0x03	; 3
    1640:	31 05       	cpc	r19, r1
    1642:	29 f4       	brne	.+10     	; 0x164e <EXTI_voidEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1644:	0e 94 4b 0a 	call	0x1496	; 0x1496 <EXTI2_RISING_MODE>
    1648:	02 c0       	rjmp	.+4      	; 0x164e <EXTI_voidEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    164a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    164e:	2a 96       	adiw	r28, 0x0a	; 10
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8_EXTI_Index){
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <EXTI_voidDisable+0x6>
    1666:	0f 92       	push	r0
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTI_Index){
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3b 83       	std	Y+3, r19	; 0x03
    1676:	2a 83       	std	Y+2, r18	; 0x02
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	31 f0       	breq	.+12     	; 0x168c <EXTI_voidDisable+0x2c>
    1680:	2a 81       	ldd	r18, Y+2	; 0x02
    1682:	3b 81       	ldd	r19, Y+3	; 0x03
    1684:	21 30       	cpi	r18, 0x01	; 1
    1686:	31 05       	cpc	r19, r1
    1688:	49 f0       	breq	.+18     	; 0x169c <EXTI_voidDisable+0x3c>
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <EXTI_voidDisable+0x4a>
		case EXTI0_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    168c:	ab e5       	ldi	r26, 0x5B	; 91
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e5       	ldi	r30, 0x5B	; 91
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8f 7b       	andi	r24, 0xBF	; 191
    1698:	8c 93       	st	X, r24
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <EXTI_voidDisable+0x4a>
			break;

		case EXTI1_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    169c:	ab e5       	ldi	r26, 0x5B	; 91
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	eb e5       	ldi	r30, 0x5B	; 91
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 77       	andi	r24, 0x7F	; 127
    16a8:	8c 93       	st	X, r24
			break;
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    16b6:	1f 92       	push	r1
    16b8:	0f 92       	push	r0
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	0f 92       	push	r0
    16be:	11 24       	eor	r1, r1
    16c0:	2f 93       	push	r18
    16c2:	3f 93       	push	r19
    16c4:	4f 93       	push	r20
    16c6:	5f 93       	push	r21
    16c8:	6f 93       	push	r22
    16ca:	7f 93       	push	r23
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
    16d0:	af 93       	push	r26
    16d2:	bf 93       	push	r27
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI0_Index] != NULL){
    16e0:	80 91 10 01 	lds	r24, 0x0110
    16e4:	90 91 11 01 	lds	r25, 0x0111
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <__vector_1+0x40>
		EXTI[0]();
    16ec:	e0 91 10 01 	lds	r30, 0x0110
    16f0:	f0 91 11 01 	lds	r31, 0x0111
    16f4:	09 95       	icall
	}

}
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	ff 91       	pop	r31
    16fc:	ef 91       	pop	r30
    16fe:	bf 91       	pop	r27
    1700:	af 91       	pop	r26
    1702:	9f 91       	pop	r25
    1704:	8f 91       	pop	r24
    1706:	7f 91       	pop	r23
    1708:	6f 91       	pop	r22
    170a:	5f 91       	pop	r21
    170c:	4f 91       	pop	r20
    170e:	3f 91       	pop	r19
    1710:	2f 91       	pop	r18
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI1_Index] != NULL){
    1746:	80 91 12 01 	lds	r24, 0x0112
    174a:	90 91 13 01 	lds	r25, 0x0113
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	29 f0       	breq	.+10     	; 0x175c <__vector_2+0x40>
			EXTI[1]();
    1752:	e0 91 12 01 	lds	r30, 0x0112
    1756:	f0 91 13 01 	lds	r31, 0x0113
    175a:	09 95       	icall
	}

}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f 90       	pop	r0
    177e:	1f 90       	pop	r1
    1780:	18 95       	reti

00001782 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI2_Index] != NULL){
    17ac:	80 91 14 01 	lds	r24, 0x0114
    17b0:	90 91 15 01 	lds	r25, 0x0115
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	29 f0       	breq	.+10     	; 0x17c2 <__vector_3+0x40>
			EXTI[2]();
    17b8:	e0 91 14 01 	lds	r30, 0x0114
    17bc:	f0 91 15 01 	lds	r31, 0x0115
    17c0:	09 95       	icall
	}

}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    17f0:	ea e3       	ldi	r30, 0x3A	; 58
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    17f6:	e7 e3       	ldi	r30, 0x37	; 55
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    17fc:	e4 e3       	ldi	r30, 0x34	; 52
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1804:	e1 e3       	ldi	r30, 0x31	; 49
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 e3       	ldi	r24, 0x30	; 48
    180a:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    180c:	eb e3       	ldi	r30, 0x3B	; 59
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    1812:	e8 e3       	ldi	r30, 0x38	; 56
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    181e:	e2 e3       	ldi	r30, 0x32	; 50
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	10 82       	st	Z, r1

}
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	2e 97       	sbiw	r28, 0x0e	; 14
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	8a 83       	std	Y+2, r24	; 0x02
    1840:	6b 83       	std	Y+3, r22	; 0x03
    1842:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	08 f0       	brcs	.+2      	; 0x1850 <DIO_u8SetPinDirection+0x26>
    184e:	0c c1       	rjmp	.+536    	; 0x1a68 <DIO_u8SetPinDirection+0x23e>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	88 30       	cpi	r24, 0x08	; 8
    1854:	08 f0       	brcs	.+2      	; 0x1858 <DIO_u8SetPinDirection+0x2e>
    1856:	08 c1       	rjmp	.+528    	; 0x1a68 <DIO_u8SetPinDirection+0x23e>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	21 f0       	breq	.+8      	; 0x1866 <DIO_u8SetPinDirection+0x3c>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	88 23       	and	r24, r24
    1862:	09 f0       	breq	.+2      	; 0x1866 <DIO_u8SetPinDirection+0x3c>
    1864:	01 c1       	rjmp	.+514    	; 0x1a68 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	3e 87       	std	Y+14, r19	; 0x0e
    186e:	2d 87       	std	Y+13, r18	; 0x0d
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	91 05       	cpc	r25, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <DIO_u8SetPinDirection+0x52>
    187a:	4f c0       	rjmp	.+158    	; 0x191a <DIO_u8SetPinDirection+0xf0>
    187c:	2d 85       	ldd	r18, Y+13	; 0x0d
    187e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	2c f4       	brge	.+10     	; 0x1890 <DIO_u8SetPinDirection+0x66>
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	71 f0       	breq	.+28     	; 0x18aa <DIO_u8SetPinDirection+0x80>
    188e:	ed c0       	rjmp	.+474    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
    1890:	2d 85       	ldd	r18, Y+13	; 0x0d
    1892:	3e 85       	ldd	r19, Y+14	; 0x0e
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <DIO_u8SetPinDirection+0x72>
    189a:	77 c0       	rjmp	.+238    	; 0x198a <DIO_u8SetPinDirection+0x160>
    189c:	8d 85       	ldd	r24, Y+13	; 0x0d
    189e:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a0:	83 30       	cpi	r24, 0x03	; 3
    18a2:	91 05       	cpc	r25, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <DIO_u8SetPinDirection+0x7e>
    18a6:	a9 c0       	rjmp	.+338    	; 0x19fa <DIO_u8SetPinDirection+0x1d0>
    18a8:	e0 c0       	rjmp	.+448    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3c 87       	std	Y+12, r19	; 0x0c
    18b2:	2b 87       	std	Y+11, r18	; 0x0b
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	d1 f0       	breq	.+52     	; 0x18f0 <DIO_u8SetPinDirection+0xc6>
    18bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    18be:	3c 85       	ldd	r19, Y+12	; 0x0c
    18c0:	21 30       	cpi	r18, 0x01	; 1
    18c2:	31 05       	cpc	r19, r1
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <DIO_u8SetPinDirection+0x9e>
    18c6:	d1 c0       	rjmp	.+418    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    18c8:	aa e3       	ldi	r26, 0x3A	; 58
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e3       	ldi	r30, 0x3A	; 58
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_u8SetPinDirection+0xbc>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_u8SetPinDirection+0xb8>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	bd c0       	rjmp	.+378    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    18f0:	aa e3       	ldi	r26, 0x3A	; 58
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ea e3       	ldi	r30, 0x3A	; 58
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8SetPinDirection+0xe4>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_u8SetPinDirection+0xe0>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	a8 c0       	rjmp	.+336    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	3a 87       	std	Y+10, r19	; 0x0a
    1922:	29 87       	std	Y+9, r18	; 0x09
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	d1 f0       	breq	.+52     	; 0x1960 <DIO_u8SetPinDirection+0x136>
    192c:	29 85       	ldd	r18, Y+9	; 0x09
    192e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1930:	21 30       	cpi	r18, 0x01	; 1
    1932:	31 05       	cpc	r19, r1
    1934:	09 f0       	breq	.+2      	; 0x1938 <DIO_u8SetPinDirection+0x10e>
    1936:	99 c0       	rjmp	.+306    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1938:	a7 e3       	ldi	r26, 0x37	; 55
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e7 e3       	ldi	r30, 0x37	; 55
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_u8SetPinDirection+0x12c>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_u8SetPinDirection+0x128>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	85 c0       	rjmp	.+266    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1960:	a7 e3       	ldi	r26, 0x37	; 55
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e7 e3       	ldi	r30, 0x37	; 55
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_u8SetPinDirection+0x154>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_u8SetPinDirection+0x150>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	70 c0       	rjmp	.+224    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	38 87       	std	Y+8, r19	; 0x08
    1992:	2f 83       	std	Y+7, r18	; 0x07
    1994:	8f 81       	ldd	r24, Y+7	; 0x07
    1996:	98 85       	ldd	r25, Y+8	; 0x08
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	d1 f0       	breq	.+52     	; 0x19d0 <DIO_u8SetPinDirection+0x1a6>
    199c:	2f 81       	ldd	r18, Y+7	; 0x07
    199e:	38 85       	ldd	r19, Y+8	; 0x08
    19a0:	21 30       	cpi	r18, 0x01	; 1
    19a2:	31 05       	cpc	r19, r1
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <DIO_u8SetPinDirection+0x17e>
    19a6:	61 c0       	rjmp	.+194    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    19a8:	a4 e3       	ldi	r26, 0x34	; 52
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e4 e3       	ldi	r30, 0x34	; 52
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_u8SetPinDirection+0x19c>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_u8SetPinDirection+0x198>
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	4d c0       	rjmp	.+154    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    19d0:	a4 e3       	ldi	r26, 0x34	; 52
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e4 e3       	ldi	r30, 0x34	; 52
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <DIO_u8SetPinDirection+0x1c4>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <DIO_u8SetPinDirection+0x1c0>
    19f2:	80 95       	com	r24
    19f4:	84 23       	and	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	38 c0       	rjmp	.+112    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3e 83       	std	Y+6, r19	; 0x06
    1a02:	2d 83       	std	Y+5, r18	; 0x05
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	c9 f0       	breq	.+50     	; 0x1a3e <DIO_u8SetPinDirection+0x214>
    1a0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a10:	21 30       	cpi	r18, 0x01	; 1
    1a12:	31 05       	cpc	r19, r1
    1a14:	51 f5       	brne	.+84     	; 0x1a6a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1a16:	a1 e3       	ldi	r26, 0x31	; 49
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e1 e3       	ldi	r30, 0x31	; 49
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_u8SetPinDirection+0x20a>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_u8SetPinDirection+0x206>
    1a38:	84 2b       	or	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	16 c0       	rjmp	.+44     	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1a3e:	a1 e3       	ldi	r26, 0x31	; 49
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e1 e3       	ldi	r30, 0x31	; 49
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_u8SetPinDirection+0x232>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_u8SetPinDirection+0x22e>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1a68:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6c:	2e 96       	adiw	r28, 0x0e	; 14
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	2f 97       	sbiw	r28, 0x0f	; 15
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	8b 83       	std	Y+3, r24	; 0x03
    1a94:	6c 83       	std	Y+4, r22	; 0x04
    1a96:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <DIO_u8SetPinValue+0x26>
    1aa2:	13 c1       	rjmp	.+550    	; 0x1cca <DIO_u8SetPinValue+0x24c>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <DIO_u8SetPinValue+0x2e>
    1aaa:	0f c1       	rjmp	.+542    	; 0x1cca <DIO_u8SetPinValue+0x24c>
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	88 23       	and	r24, r24
    1ab0:	21 f0       	breq	.+8      	; 0x1aba <DIO_u8SetPinValue+0x3c>
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <DIO_u8SetPinValue+0x3c>
    1ab8:	08 c1       	rjmp	.+528    	; 0x1cca <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3f 87       	std	Y+15, r19	; 0x0f
    1ac2:	2e 87       	std	Y+14, r18	; 0x0e
    1ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <DIO_u8SetPinValue+0x52>
    1ace:	50 c0       	rjmp	.+160    	; 0x1b70 <DIO_u8SetPinValue+0xf2>
    1ad0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ad2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <DIO_u8SetPinValue+0x66>
    1ada:	8e 85       	ldd	r24, Y+14	; 0x0e
    1adc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	71 f0       	breq	.+28     	; 0x1afe <DIO_u8SetPinValue+0x80>
    1ae2:	f4 c0       	rjmp	.+488    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
    1ae4:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ae6:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <DIO_u8SetPinValue+0x72>
    1aee:	79 c0       	rjmp	.+242    	; 0x1be2 <DIO_u8SetPinValue+0x164>
    1af0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1af2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1af4:	83 30       	cpi	r24, 0x03	; 3
    1af6:	91 05       	cpc	r25, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <DIO_u8SetPinValue+0x7e>
    1afa:	ad c0       	rjmp	.+346    	; 0x1c56 <DIO_u8SetPinValue+0x1d8>
    1afc:	e7 c0       	rjmp	.+462    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	3d 87       	std	Y+13, r19	; 0x0d
    1b06:	2c 87       	std	Y+12, r18	; 0x0c
    1b08:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	c9 f0       	breq	.+50     	; 0x1b42 <DIO_u8SetPinValue+0xc4>
    1b10:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b12:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b14:	21 30       	cpi	r18, 0x01	; 1
    1b16:	31 05       	cpc	r19, r1
    1b18:	49 f5       	brne	.+82     	; 0x1b6c <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1b1a:	ab e3       	ldi	r26, 0x3B	; 59
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	eb e3       	ldi	r30, 0x3B	; 59
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_u8SetPinValue+0xba>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_u8SetPinValue+0xb6>
    1b3c:	84 2b       	or	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	c5 c0       	rjmp	.+394    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1b42:	ab e3       	ldi	r26, 0x3B	; 59
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	eb e3       	ldi	r30, 0x3B	; 59
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_u8SetPinValue+0xe2>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_u8SetPinValue+0xde>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	b0 c0       	rjmp	.+352    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1b6c:	1a 82       	std	Y+2, r1	; 0x02
    1b6e:	ae c0       	rjmp	.+348    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	3b 87       	std	Y+11, r19	; 0x0b
    1b78:	2a 87       	std	Y+10, r18	; 0x0a
    1b7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	c9 f0       	breq	.+50     	; 0x1bb4 <DIO_u8SetPinValue+0x136>
    1b82:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b84:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b86:	21 30       	cpi	r18, 0x01	; 1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	49 f5       	brne	.+82     	; 0x1bde <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1b8c:	a8 e3       	ldi	r26, 0x38	; 56
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e8 e3       	ldi	r30, 0x38	; 56
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <DIO_u8SetPinValue+0x12c>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <DIO_u8SetPinValue+0x128>
    1bae:	84 2b       	or	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	8c c0       	rjmp	.+280    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1bb4:	a8 e3       	ldi	r26, 0x38	; 56
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e8 e3       	ldi	r30, 0x38	; 56
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_u8SetPinValue+0x154>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_u8SetPinValue+0x150>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	77 c0       	rjmp	.+238    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1bde:	1a 82       	std	Y+2, r1	; 0x02
    1be0:	75 c0       	rjmp	.+234    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	39 87       	std	Y+9, r19	; 0x09
    1bea:	28 87       	std	Y+8, r18	; 0x08
    1bec:	88 85       	ldd	r24, Y+8	; 0x08
    1bee:	99 85       	ldd	r25, Y+9	; 0x09
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	31 f0       	breq	.+12     	; 0x1c00 <DIO_u8SetPinValue+0x182>
    1bf4:	28 85       	ldd	r18, Y+8	; 0x08
    1bf6:	39 85       	ldd	r19, Y+9	; 0x09
    1bf8:	21 30       	cpi	r18, 0x01	; 1
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	b1 f0       	breq	.+44     	; 0x1c2a <DIO_u8SetPinValue+0x1ac>
    1bfe:	29 c0       	rjmp	.+82     	; 0x1c52 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1c00:	a5 e3       	ldi	r26, 0x35	; 53
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e5 e3       	ldi	r30, 0x35	; 53
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_u8SetPinValue+0x1a0>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_u8SetPinValue+0x19c>
    1c22:	80 95       	com	r24
    1c24:	84 23       	and	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	51 c0       	rjmp	.+162    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1c2a:	a5 e3       	ldi	r26, 0x35	; 53
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e5 e3       	ldi	r30, 0x35	; 53
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_u8SetPinValue+0x1ca>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_u8SetPinValue+0x1c6>
    1c4c:	84 2b       	or	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	3d c0       	rjmp	.+122    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1c52:	1a 82       	std	Y+2, r1	; 0x02
    1c54:	3b c0       	rjmp	.+118    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	3f 83       	std	Y+7, r19	; 0x07
    1c5e:	2e 83       	std	Y+6, r18	; 0x06
    1c60:	8e 81       	ldd	r24, Y+6	; 0x06
    1c62:	9f 81       	ldd	r25, Y+7	; 0x07
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	31 f0       	breq	.+12     	; 0x1c74 <DIO_u8SetPinValue+0x1f6>
    1c68:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6c:	21 30       	cpi	r18, 0x01	; 1
    1c6e:	31 05       	cpc	r19, r1
    1c70:	b1 f0       	breq	.+44     	; 0x1c9e <DIO_u8SetPinValue+0x220>
    1c72:	29 c0       	rjmp	.+82     	; 0x1cc6 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1c74:	a5 e3       	ldi	r26, 0x35	; 53
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e5 e3       	ldi	r30, 0x35	; 53
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_u8SetPinValue+0x214>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_u8SetPinValue+0x210>
    1c96:	80 95       	com	r24
    1c98:	84 23       	and	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	17 c0       	rjmp	.+46     	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1c9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e2 e3       	ldi	r30, 0x32	; 50
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <DIO_u8SetPinValue+0x23e>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <DIO_u8SetPinValue+0x23a>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1cc6:	1a 82       	std	Y+2, r1	; 0x02
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    1cca:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cce:	2f 96       	adiw	r28, 0x0f	; 15
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	28 97       	sbiw	r28, 0x08	; 8
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
    1cf6:	6c 83       	std	Y+4, r22	; 0x04
    1cf8:	5e 83       	std	Y+6, r21	; 0x06
    1cfa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	84 30       	cpi	r24, 0x04	; 4
    1d04:	08 f0       	brcs	.+2      	; 0x1d08 <DIO_u8GetPinValue+0x28>
    1d06:	9f c0       	rjmp	.+318    	; 0x1e46 <DIO_u8GetPinValue+0x166>
    1d08:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0a:	88 30       	cpi	r24, 0x08	; 8
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <DIO_u8GetPinValue+0x30>
    1d0e:	9b c0       	rjmp	.+310    	; 0x1e46 <DIO_u8GetPinValue+0x166>
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <DIO_u8GetPinValue+0x3a>
    1d18:	96 c0       	rjmp	.+300    	; 0x1e46 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	38 87       	std	Y+8, r19	; 0x08
    1d22:	2f 83       	std	Y+7, r18	; 0x07
    1d24:	4f 81       	ldd	r20, Y+7	; 0x07
    1d26:	58 85       	ldd	r21, Y+8	; 0x08
    1d28:	41 30       	cpi	r20, 0x01	; 1
    1d2a:	51 05       	cpc	r21, r1
    1d2c:	a9 f1       	breq	.+106    	; 0x1d98 <DIO_u8GetPinValue+0xb8>
    1d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d30:	98 85       	ldd	r25, Y+8	; 0x08
    1d32:	82 30       	cpi	r24, 0x02	; 2
    1d34:	91 05       	cpc	r25, r1
    1d36:	34 f4       	brge	.+12     	; 0x1d44 <DIO_u8GetPinValue+0x64>
    1d38:	2f 81       	ldd	r18, Y+7	; 0x07
    1d3a:	38 85       	ldd	r19, Y+8	; 0x08
    1d3c:	21 15       	cp	r18, r1
    1d3e:	31 05       	cpc	r19, r1
    1d40:	71 f0       	breq	.+28     	; 0x1d5e <DIO_u8GetPinValue+0x7e>
    1d42:	82 c0       	rjmp	.+260    	; 0x1e48 <DIO_u8GetPinValue+0x168>
    1d44:	4f 81       	ldd	r20, Y+7	; 0x07
    1d46:	58 85       	ldd	r21, Y+8	; 0x08
    1d48:	42 30       	cpi	r20, 0x02	; 2
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <DIO_u8GetPinValue+0x70>
    1d4e:	41 c0       	rjmp	.+130    	; 0x1dd2 <DIO_u8GetPinValue+0xf2>
    1d50:	8f 81       	ldd	r24, Y+7	; 0x07
    1d52:	98 85       	ldd	r25, Y+8	; 0x08
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	91 05       	cpc	r25, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <DIO_u8GetPinValue+0x7c>
    1d5a:	58 c0       	rjmp	.+176    	; 0x1e0c <DIO_u8GetPinValue+0x12c>
    1d5c:	75 c0       	rjmp	.+234    	; 0x1e48 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1d5e:	e9 e3       	ldi	r30, 0x39	; 57
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a9 01       	movw	r20, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <DIO_u8GetPinValue+0x96>
    1d72:	55 95       	asr	r21
    1d74:	47 95       	ror	r20
    1d76:	8a 95       	dec	r24
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <DIO_u8GetPinValue+0x92>
    1d7a:	ca 01       	movw	r24, r20
    1d7c:	81 70       	andi	r24, 0x01	; 1
    1d7e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	88 23       	and	r24, r24
    1d84:	21 f4       	brne	.+8      	; 0x1d8e <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1d86:	ed 81       	ldd	r30, Y+5	; 0x05
    1d88:	fe 81       	ldd	r31, Y+6	; 0x06
    1d8a:	10 82       	st	Z, r1
    1d8c:	5d c0       	rjmp	.+186    	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1d8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d90:	fe 81       	ldd	r31, Y+6	; 0x06
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	80 83       	st	Z, r24
    1d96:	58 c0       	rjmp	.+176    	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1d98:	e6 e3       	ldi	r30, 0x36	; 54
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a9 01       	movw	r20, r18
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <DIO_u8GetPinValue+0xd0>
    1dac:	55 95       	asr	r21
    1dae:	47 95       	ror	r20
    1db0:	8a 95       	dec	r24
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <DIO_u8GetPinValue+0xcc>
    1db4:	ca 01       	movw	r24, r20
    1db6:	81 70       	andi	r24, 0x01	; 1
    1db8:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	88 23       	and	r24, r24
    1dbe:	21 f4       	brne	.+8      	; 0x1dc8 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1dc0:	ed 81       	ldd	r30, Y+5	; 0x05
    1dc2:	fe 81       	ldd	r31, Y+6	; 0x06
    1dc4:	10 82       	st	Z, r1
    1dc6:	40 c0       	rjmp	.+128    	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1dc8:	ed 81       	ldd	r30, Y+5	; 0x05
    1dca:	fe 81       	ldd	r31, Y+6	; 0x06
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 83       	st	Z, r24
    1dd0:	3b c0       	rjmp	.+118    	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1dd2:	e3 e3       	ldi	r30, 0x33	; 51
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a9 01       	movw	r20, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_u8GetPinValue+0x10a>
    1de6:	55 95       	asr	r21
    1de8:	47 95       	ror	r20
    1dea:	8a 95       	dec	r24
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_u8GetPinValue+0x106>
    1dee:	ca 01       	movw	r24, r20
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	88 23       	and	r24, r24
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1dfa:	ed 81       	ldd	r30, Y+5	; 0x05
    1dfc:	fe 81       	ldd	r31, Y+6	; 0x06
    1dfe:	10 82       	st	Z, r1
    1e00:	23 c0       	rjmp	.+70     	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1e02:	ed 81       	ldd	r30, Y+5	; 0x05
    1e04:	fe 81       	ldd	r31, Y+6	; 0x06
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	80 83       	st	Z, r24
    1e0a:	1e c0       	rjmp	.+60     	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1e0c:	e0 e3       	ldi	r30, 0x30	; 48
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a9 01       	movw	r20, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <DIO_u8GetPinValue+0x144>
    1e20:	55 95       	asr	r21
    1e22:	47 95       	ror	r20
    1e24:	8a 95       	dec	r24
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <DIO_u8GetPinValue+0x140>
    1e28:	ca 01       	movw	r24, r20
    1e2a:	81 70       	andi	r24, 0x01	; 1
    1e2c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	88 23       	and	r24, r24
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1e34:	ed 81       	ldd	r30, Y+5	; 0x05
    1e36:	fe 81       	ldd	r31, Y+6	; 0x06
    1e38:	10 82       	st	Z, r1
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1e3c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e3e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	80 83       	st	Z, r24
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1e46:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e4a:	28 96       	adiw	r28, 0x08	; 8
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <DIO_getPinValueWithoutPointer+0x6>
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <DIO_getPinValueWithoutPointer+0x8>
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    1e6e:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	88 30       	cpi	r24, 0x08	; 8
    1e74:	08 f0       	brcs	.+2      	; 0x1e78 <DIO_getPinValueWithoutPointer+0x1c>
    1e76:	6b c0       	rjmp	.+214    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <DIO_getPinValueWithoutPointer+0x24>
    1e7e:	67 c0       	rjmp	.+206    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3d 83       	std	Y+5, r19	; 0x05
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e8e:	41 30       	cpi	r20, 0x01	; 1
    1e90:	51 05       	cpc	r21, r1
    1e92:	41 f1       	breq	.+80     	; 0x1ee4 <DIO_getPinValueWithoutPointer+0x88>
    1e94:	8c 81       	ldd	r24, Y+4	; 0x04
    1e96:	9d 81       	ldd	r25, Y+5	; 0x05
    1e98:	82 30       	cpi	r24, 0x02	; 2
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	34 f4       	brge	.+12     	; 0x1eaa <DIO_getPinValueWithoutPointer+0x4e>
    1e9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea2:	21 15       	cp	r18, r1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <DIO_getPinValueWithoutPointer+0x64>
    1ea8:	52 c0       	rjmp	.+164    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
    1eaa:	4c 81       	ldd	r20, Y+4	; 0x04
    1eac:	5d 81       	ldd	r21, Y+5	; 0x05
    1eae:	42 30       	cpi	r20, 0x02	; 2
    1eb0:	51 05       	cpc	r21, r1
    1eb2:	51 f1       	breq	.+84     	; 0x1f08 <DIO_getPinValueWithoutPointer+0xac>
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	83 30       	cpi	r24, 0x03	; 3
    1eba:	91 05       	cpc	r25, r1
    1ebc:	b9 f1       	breq	.+110    	; 0x1f2c <DIO_getPinValueWithoutPointer+0xd0>
    1ebe:	47 c0       	rjmp	.+142    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    1ec0:	e9 e3       	ldi	r30, 0x39	; 57
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a9 01       	movw	r20, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <DIO_getPinValueWithoutPointer+0x7c>
    1ed4:	55 95       	asr	r21
    1ed6:	47 95       	ror	r20
    1ed8:	8a 95       	dec	r24
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <DIO_getPinValueWithoutPointer+0x78>
    1edc:	ca 01       	movw	r24, r20
    1ede:	81 70       	andi	r24, 0x01	; 1
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	35 c0       	rjmp	.+106    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    1ee4:	e6 e3       	ldi	r30, 0x36	; 54
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a9 01       	movw	r20, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <DIO_getPinValueWithoutPointer+0xa0>
    1ef8:	55 95       	asr	r21
    1efa:	47 95       	ror	r20
    1efc:	8a 95       	dec	r24
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <DIO_getPinValueWithoutPointer+0x9c>
    1f00:	ca 01       	movw	r24, r20
    1f02:	81 70       	andi	r24, 0x01	; 1
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	23 c0       	rjmp	.+70     	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    1f08:	e3 e3       	ldi	r30, 0x33	; 51
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a9 01       	movw	r20, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_getPinValueWithoutPointer+0xc4>
    1f1c:	55 95       	asr	r21
    1f1e:	47 95       	ror	r20
    1f20:	8a 95       	dec	r24
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <DIO_getPinValueWithoutPointer+0xc0>
    1f24:	ca 01       	movw	r24, r20
    1f26:	81 70       	andi	r24, 0x01	; 1
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	11 c0       	rjmp	.+34     	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    1f2c:	e0 e3       	ldi	r30, 0x30	; 48
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a9 01       	movw	r20, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_getPinValueWithoutPointer+0xe8>
    1f40:	55 95       	asr	r21
    1f42:	47 95       	ror	r20
    1f44:	8a 95       	dec	r24
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_getPinValueWithoutPointer+0xe4>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	2d 97       	sbiw	r28, 0x0d	; 13
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	3c 87       	std	Y+12, r19	; 0x0c
    1f80:	2b 87       	std	Y+11, r18	; 0x0b
    1f82:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f84:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	91 05       	cpc	r25, r1
    1f8a:	71 f1       	breq	.+92     	; 0x1fe8 <DIO_u8SetPortDirection+0x88>
    1f8c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f8e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <DIO_u8SetPortDirection+0x40>
    1f96:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f98:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f0       	breq	.+26     	; 0x1fb8 <DIO_u8SetPortDirection+0x58>
    1f9e:	6b c0       	rjmp	.+214    	; 0x2076 <DIO_u8SetPortDirection+0x116>
    1fa0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fa2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fa4:	22 30       	cpi	r18, 0x02	; 2
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	b9 f1       	breq	.+110    	; 0x2018 <DIO_u8SetPortDirection+0xb8>
    1faa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fac:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <DIO_u8SetPortDirection+0x56>
    1fb4:	49 c0       	rjmp	.+146    	; 0x2048 <DIO_u8SetPortDirection+0xe8>
    1fb6:	5f c0       	rjmp	.+190    	; 0x2076 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	3a 87       	std	Y+10, r19	; 0x0a
    1fc0:	29 87       	std	Y+9, r18	; 0x09
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	31 f0       	breq	.+12     	; 0x1fd6 <DIO_u8SetPortDirection+0x76>
    1fca:	29 85       	ldd	r18, Y+9	; 0x09
    1fcc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fce:	21 30       	cpi	r18, 0x01	; 1
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	29 f0       	breq	.+10     	; 0x1fde <DIO_u8SetPortDirection+0x7e>
    1fd4:	50 c0       	rjmp	.+160    	; 0x2076 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1fd6:	ea e3       	ldi	r30, 0x3A	; 58
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	10 82       	st	Z, r1
    1fdc:	4c c0       	rjmp	.+152    	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1fde:	ea e3       	ldi	r30, 0x3A	; 58
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	8f ef       	ldi	r24, 0xFF	; 255
    1fe4:	80 83       	st	Z, r24
    1fe6:	47 c0       	rjmp	.+142    	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	38 87       	std	Y+8, r19	; 0x08
    1ff0:	2f 83       	std	Y+7, r18	; 0x07
    1ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff4:	98 85       	ldd	r25, Y+8	; 0x08
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	31 f0       	breq	.+12     	; 0x2006 <DIO_u8SetPortDirection+0xa6>
    1ffa:	2f 81       	ldd	r18, Y+7	; 0x07
    1ffc:	38 85       	ldd	r19, Y+8	; 0x08
    1ffe:	21 30       	cpi	r18, 0x01	; 1
    2000:	31 05       	cpc	r19, r1
    2002:	29 f0       	breq	.+10     	; 0x200e <DIO_u8SetPortDirection+0xae>
    2004:	38 c0       	rjmp	.+112    	; 0x2076 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    2006:	e7 e3       	ldi	r30, 0x37	; 55
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	10 82       	st	Z, r1
    200c:	34 c0       	rjmp	.+104    	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    200e:	e7 e3       	ldi	r30, 0x37	; 55
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	8f ef       	ldi	r24, 0xFF	; 255
    2014:	80 83       	st	Z, r24
    2016:	2f c0       	rjmp	.+94     	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	3e 83       	std	Y+6, r19	; 0x06
    2020:	2d 83       	std	Y+5, r18	; 0x05
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	31 f0       	breq	.+12     	; 0x2036 <DIO_u8SetPortDirection+0xd6>
    202a:	2d 81       	ldd	r18, Y+5	; 0x05
    202c:	3e 81       	ldd	r19, Y+6	; 0x06
    202e:	21 30       	cpi	r18, 0x01	; 1
    2030:	31 05       	cpc	r19, r1
    2032:	29 f0       	breq	.+10     	; 0x203e <DIO_u8SetPortDirection+0xde>
    2034:	20 c0       	rjmp	.+64     	; 0x2076 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    2036:	e4 e3       	ldi	r30, 0x34	; 52
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	10 82       	st	Z, r1
    203c:	1c c0       	rjmp	.+56     	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    203e:	e4 e3       	ldi	r30, 0x34	; 52
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	80 83       	st	Z, r24
    2046:	17 c0       	rjmp	.+46     	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3c 83       	std	Y+4, r19	; 0x04
    2050:	2b 83       	std	Y+3, r18	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	31 f0       	breq	.+12     	; 0x2066 <DIO_u8SetPortDirection+0x106>
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	21 30       	cpi	r18, 0x01	; 1
    2060:	31 05       	cpc	r19, r1
    2062:	29 f0       	breq	.+10     	; 0x206e <DIO_u8SetPortDirection+0x10e>
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2066:	e1 e3       	ldi	r30, 0x31	; 49
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	10 82       	st	Z, r1
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    206e:	e1 e3       	ldi	r30, 0x31	; 49
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    2076:	2d 96       	adiw	r28, 0x0d	; 13
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	2d 97       	sbiw	r28, 0x0d	; 13
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <DIO_u8SetPortValue+0x24>
    20aa:	80 c0       	rjmp	.+256    	; 0x21ac <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3d 87       	std	Y+13, r19	; 0x0d
    20b4:	2c 87       	std	Y+12, r18	; 0x0c
    20b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	71 f1       	breq	.+92     	; 0x211c <DIO_u8SetPortValue+0x94>
    20c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    20c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <DIO_u8SetPortValue+0x4c>
    20ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    20cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f0       	breq	.+26     	; 0x20ec <DIO_u8SetPortValue+0x64>
    20d2:	6d c0       	rjmp	.+218    	; 0x21ae <DIO_u8SetPortValue+0x126>
    20d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    20d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	b9 f1       	breq	.+110    	; 0x214c <DIO_u8SetPortValue+0xc4>
    20de:	8c 85       	ldd	r24, Y+12	; 0x0c
    20e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    20e2:	83 30       	cpi	r24, 0x03	; 3
    20e4:	91 05       	cpc	r25, r1
    20e6:	09 f4       	brne	.+2      	; 0x20ea <DIO_u8SetPortValue+0x62>
    20e8:	49 c0       	rjmp	.+146    	; 0x217c <DIO_u8SetPortValue+0xf4>
    20ea:	61 c0       	rjmp	.+194    	; 0x21ae <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	3b 87       	std	Y+11, r19	; 0x0b
    20f4:	2a 87       	std	Y+10, r18	; 0x0a
    20f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	31 f0       	breq	.+12     	; 0x210a <DIO_u8SetPortValue+0x82>
    20fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2100:	3b 85       	ldd	r19, Y+11	; 0x0b
    2102:	21 30       	cpi	r18, 0x01	; 1
    2104:	31 05       	cpc	r19, r1
    2106:	29 f0       	breq	.+10     	; 0x2112 <DIO_u8SetPortValue+0x8a>
    2108:	52 c0       	rjmp	.+164    	; 0x21ae <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    210a:	eb e3       	ldi	r30, 0x3B	; 59
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	10 82       	st	Z, r1
    2110:	4e c0       	rjmp	.+156    	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    2112:	eb e3       	ldi	r30, 0x3B	; 59
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	8f ef       	ldi	r24, 0xFF	; 255
    2118:	80 83       	st	Z, r24
    211a:	49 c0       	rjmp	.+146    	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	39 87       	std	Y+9, r19	; 0x09
    2124:	28 87       	std	Y+8, r18	; 0x08
    2126:	88 85       	ldd	r24, Y+8	; 0x08
    2128:	99 85       	ldd	r25, Y+9	; 0x09
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	31 f0       	breq	.+12     	; 0x213a <DIO_u8SetPortValue+0xb2>
    212e:	28 85       	ldd	r18, Y+8	; 0x08
    2130:	39 85       	ldd	r19, Y+9	; 0x09
    2132:	21 30       	cpi	r18, 0x01	; 1
    2134:	31 05       	cpc	r19, r1
    2136:	29 f0       	breq	.+10     	; 0x2142 <DIO_u8SetPortValue+0xba>
    2138:	3a c0       	rjmp	.+116    	; 0x21ae <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    213a:	e8 e3       	ldi	r30, 0x38	; 56
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	10 82       	st	Z, r1
    2140:	36 c0       	rjmp	.+108    	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2142:	e8 e3       	ldi	r30, 0x38	; 56
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	8f ef       	ldi	r24, 0xFF	; 255
    2148:	80 83       	st	Z, r24
    214a:	31 c0       	rjmp	.+98     	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	3f 83       	std	Y+7, r19	; 0x07
    2154:	2e 83       	std	Y+6, r18	; 0x06
    2156:	8e 81       	ldd	r24, Y+6	; 0x06
    2158:	9f 81       	ldd	r25, Y+7	; 0x07
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	31 f0       	breq	.+12     	; 0x216a <DIO_u8SetPortValue+0xe2>
    215e:	2e 81       	ldd	r18, Y+6	; 0x06
    2160:	3f 81       	ldd	r19, Y+7	; 0x07
    2162:	21 30       	cpi	r18, 0x01	; 1
    2164:	31 05       	cpc	r19, r1
    2166:	29 f0       	breq	.+10     	; 0x2172 <DIO_u8SetPortValue+0xea>
    2168:	22 c0       	rjmp	.+68     	; 0x21ae <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    216a:	e5 e3       	ldi	r30, 0x35	; 53
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	10 82       	st	Z, r1
    2170:	1e c0       	rjmp	.+60     	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2172:	e5 e3       	ldi	r30, 0x35	; 53
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	80 83       	st	Z, r24
    217a:	19 c0       	rjmp	.+50     	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	3d 83       	std	Y+5, r19	; 0x05
    2184:	2c 83       	std	Y+4, r18	; 0x04
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	9d 81       	ldd	r25, Y+5	; 0x05
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	31 f0       	breq	.+12     	; 0x219a <DIO_u8SetPortValue+0x112>
    218e:	2c 81       	ldd	r18, Y+4	; 0x04
    2190:	3d 81       	ldd	r19, Y+5	; 0x05
    2192:	21 30       	cpi	r18, 0x01	; 1
    2194:	31 05       	cpc	r19, r1
    2196:	29 f0       	breq	.+10     	; 0x21a2 <DIO_u8SetPortValue+0x11a>
    2198:	0a c0       	rjmp	.+20     	; 0x21ae <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    219a:	e2 e3       	ldi	r30, 0x32	; 50
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	10 82       	st	Z, r1
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    21a2:	e2 e3       	ldi	r30, 0x32	; 50
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	80 83       	st	Z, r24
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    21ac:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b0:	2d 96       	adiw	r28, 0x0d	; 13
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <DIO_u8GetPortValue+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <DIO_u8GetPortValue+0x8>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <DIO_u8GetPortValue+0xa>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	8a 83       	std	Y+2, r24	; 0x02
    21d2:	7c 83       	std	Y+4, r23	; 0x04
    21d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	08 f0       	brcs	.+2      	; 0x21e2 <DIO_u8GetPortValue+0x20>
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <DIO_u8GetPortValue+0x9e>
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	d9 f1       	breq	.+118    	; 0x2260 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	3e 83       	std	Y+6, r19	; 0x06
    21f2:	2d 83       	std	Y+5, r18	; 0x05
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	91 05       	cpc	r25, r1
    21fc:	e1 f0       	breq	.+56     	; 0x2236 <DIO_u8GetPortValue+0x74>
    21fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2200:	3e 81       	ldd	r19, Y+6	; 0x06
    2202:	22 30       	cpi	r18, 0x02	; 2
    2204:	31 05       	cpc	r19, r1
    2206:	2c f4       	brge	.+10     	; 0x2212 <DIO_u8GetPortValue+0x50>
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	61 f0       	breq	.+24     	; 0x2228 <DIO_u8GetPortValue+0x66>
    2210:	28 c0       	rjmp	.+80     	; 0x2262 <DIO_u8GetPortValue+0xa0>
    2212:	2d 81       	ldd	r18, Y+5	; 0x05
    2214:	3e 81       	ldd	r19, Y+6	; 0x06
    2216:	22 30       	cpi	r18, 0x02	; 2
    2218:	31 05       	cpc	r19, r1
    221a:	a1 f0       	breq	.+40     	; 0x2244 <DIO_u8GetPortValue+0x82>
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	91 05       	cpc	r25, r1
    2224:	b1 f0       	breq	.+44     	; 0x2252 <DIO_u8GetPortValue+0x90>
    2226:	1d c0       	rjmp	.+58     	; 0x2262 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    2228:	e9 e3       	ldi	r30, 0x39	; 57
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	eb 81       	ldd	r30, Y+3	; 0x03
    2230:	fc 81       	ldd	r31, Y+4	; 0x04
    2232:	80 83       	st	Z, r24
    2234:	16 c0       	rjmp	.+44     	; 0x2262 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    2236:	e6 e3       	ldi	r30, 0x36	; 54
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	eb 81       	ldd	r30, Y+3	; 0x03
    223e:	fc 81       	ldd	r31, Y+4	; 0x04
    2240:	80 83       	st	Z, r24
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    2244:	e3 e3       	ldi	r30, 0x33	; 51
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	eb 81       	ldd	r30, Y+3	; 0x03
    224c:	fc 81       	ldd	r31, Y+4	; 0x04
    224e:	80 83       	st	Z, r24
    2250:	08 c0       	rjmp	.+16     	; 0x2262 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2252:	e0 e3       	ldi	r30, 0x30	; 48
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	eb 81       	ldd	r30, Y+3	; 0x03
    225a:	fc 81       	ldd	r31, Y+4	; 0x04
    225c:	80 83       	st	Z, r24
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2260:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
}
    2264:	26 96       	adiw	r28, 0x06	; 6
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    2276:	8f 92       	push	r8
    2278:	af 92       	push	r10
    227a:	cf 92       	push	r12
    227c:	ef 92       	push	r14
    227e:	0f 93       	push	r16
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	2c 97       	sbiw	r28, 0x0c	; 12
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	6a 83       	std	Y+2, r22	; 0x02
    2298:	4b 83       	std	Y+3, r20	; 0x03
    229a:	2c 83       	std	Y+4, r18	; 0x04
    229c:	0d 83       	std	Y+5, r16	; 0x05
    229e:	ee 82       	std	Y+6, r14	; 0x06
    22a0:	cf 82       	std	Y+7, r12	; 0x07
    22a2:	a8 86       	std	Y+8, r10	; 0x08
    22a4:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	3b 87       	std	Y+11, r19	; 0x0b
    22ae:	2a 87       	std	Y+10, r18	; 0x0a
    22b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b4:	81 30       	cpi	r24, 0x01	; 1
    22b6:	91 05       	cpc	r25, r1
    22b8:	09 f4       	brne	.+2      	; 0x22bc <DIO_u8SetValueToAllPins+0x46>
    22ba:	a8 c0       	rjmp	.+336    	; 0x240c <DIO_u8SetValueToAllPins+0x196>
    22bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    22be:	3b 85       	ldd	r19, Y+11	; 0x0b
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	2c f4       	brge	.+10     	; 0x22d0 <DIO_u8SetValueToAllPins+0x5a>
    22c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	71 f0       	breq	.+28     	; 0x22ea <DIO_u8SetValueToAllPins+0x74>
    22ce:	50 c2       	rjmp	.+1184   	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
    22d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    22d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <DIO_u8SetValueToAllPins+0x66>
    22da:	29 c1       	rjmp	.+594    	; 0x252e <DIO_u8SetValueToAllPins+0x2b8>
    22dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22de:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	91 05       	cpc	r25, r1
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <DIO_u8SetValueToAllPins+0x72>
    22e6:	b4 c1       	rjmp	.+872    	; 0x2650 <DIO_u8SetValueToAllPins+0x3da>
    22e8:	43 c2       	rjmp	.+1158   	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	41 f4       	brne	.+16     	; 0x2300 <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    22f0:	ab e3       	ldi	r26, 0x3B	; 59
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	eb e3       	ldi	r30, 0x3B	; 59
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	81 60       	ori	r24, 0x01	; 1
    22fc:	8c 93       	st	X, r24
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    2300:	ab e3       	ldi	r26, 0x3B	; 59
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	eb e3       	ldi	r30, 0x3B	; 59
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	8e 7f       	andi	r24, 0xFE	; 254
    230c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	41 f4       	brne	.+16     	; 0x2324 <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    2314:	ab e3       	ldi	r26, 0x3B	; 59
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	eb e3       	ldi	r30, 0x3B	; 59
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	82 60       	ori	r24, 0x02	; 2
    2320:	8c 93       	st	X, r24
    2322:	07 c0       	rjmp	.+14     	; 0x2332 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    2324:	ab e3       	ldi	r26, 0x3B	; 59
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	eb e3       	ldi	r30, 0x3B	; 59
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	8d 7f       	andi	r24, 0xFD	; 253
    2330:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	41 f4       	brne	.+16     	; 0x2348 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    2338:	ab e3       	ldi	r26, 0x3B	; 59
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	eb e3       	ldi	r30, 0x3B	; 59
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	84 60       	ori	r24, 0x04	; 4
    2344:	8c 93       	st	X, r24
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    2348:	ab e3       	ldi	r26, 0x3B	; 59
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	eb e3       	ldi	r30, 0x3B	; 59
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	8b 7f       	andi	r24, 0xFB	; 251
    2354:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	41 f4       	brne	.+16     	; 0x236c <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    235c:	ab e3       	ldi	r26, 0x3B	; 59
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	eb e3       	ldi	r30, 0x3B	; 59
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	88 60       	ori	r24, 0x08	; 8
    2368:	8c 93       	st	X, r24
    236a:	07 c0       	rjmp	.+14     	; 0x237a <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    236c:	ab e3       	ldi	r26, 0x3B	; 59
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	eb e3       	ldi	r30, 0x3B	; 59
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	87 7f       	andi	r24, 0xF7	; 247
    2378:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    237a:	8e 81       	ldd	r24, Y+6	; 0x06
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	41 f4       	brne	.+16     	; 0x2390 <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2380:	ab e3       	ldi	r26, 0x3B	; 59
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	eb e3       	ldi	r30, 0x3B	; 59
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	80 61       	ori	r24, 0x10	; 16
    238c:	8c 93       	st	X, r24
    238e:	07 c0       	rjmp	.+14     	; 0x239e <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2390:	ab e3       	ldi	r26, 0x3B	; 59
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	eb e3       	ldi	r30, 0x3B	; 59
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8f 7e       	andi	r24, 0xEF	; 239
    239c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    239e:	8f 81       	ldd	r24, Y+7	; 0x07
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	41 f4       	brne	.+16     	; 0x23b4 <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    23a4:	ab e3       	ldi	r26, 0x3B	; 59
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	eb e3       	ldi	r30, 0x3B	; 59
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	80 62       	ori	r24, 0x20	; 32
    23b0:	8c 93       	st	X, r24
    23b2:	07 c0       	rjmp	.+14     	; 0x23c2 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    23b4:	ab e3       	ldi	r26, 0x3B	; 59
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e3       	ldi	r30, 0x3B	; 59
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	8f 7d       	andi	r24, 0xDF	; 223
    23c0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    23c2:	88 85       	ldd	r24, Y+8	; 0x08
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	41 f4       	brne	.+16     	; 0x23d8 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    23c8:	ab e3       	ldi	r26, 0x3B	; 59
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	eb e3       	ldi	r30, 0x3B	; 59
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	80 64       	ori	r24, 0x40	; 64
    23d4:	8c 93       	st	X, r24
    23d6:	07 c0       	rjmp	.+14     	; 0x23e6 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    23d8:	ab e3       	ldi	r26, 0x3B	; 59
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	eb e3       	ldi	r30, 0x3B	; 59
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 7b       	andi	r24, 0xBF	; 191
    23e4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	41 f4       	brne	.+16     	; 0x23fc <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    23ec:	ab e3       	ldi	r26, 0x3B	; 59
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	eb e3       	ldi	r30, 0x3B	; 59
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 68       	ori	r24, 0x80	; 128
    23f8:	8c 93       	st	X, r24
    23fa:	ba c1       	rjmp	.+884    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    23fc:	ab e3       	ldi	r26, 0x3B	; 59
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	eb e3       	ldi	r30, 0x3B	; 59
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	8f 77       	andi	r24, 0x7F	; 127
    2408:	8c 93       	st	X, r24
    240a:	b2 c1       	rjmp	.+868    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	41 f4       	brne	.+16     	; 0x2422 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2412:	a8 e3       	ldi	r26, 0x38	; 56
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e8 e3       	ldi	r30, 0x38	; 56
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	81 60       	ori	r24, 0x01	; 1
    241e:	8c 93       	st	X, r24
    2420:	07 c0       	rjmp	.+14     	; 0x2430 <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2422:	a8 e3       	ldi	r26, 0x38	; 56
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e8 e3       	ldi	r30, 0x38	; 56
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8e 7f       	andi	r24, 0xFE	; 254
    242e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	41 f4       	brne	.+16     	; 0x2446 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    2436:	a8 e3       	ldi	r26, 0x38	; 56
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e8 e3       	ldi	r30, 0x38	; 56
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	82 60       	ori	r24, 0x02	; 2
    2442:	8c 93       	st	X, r24
    2444:	07 c0       	rjmp	.+14     	; 0x2454 <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    2446:	a8 e3       	ldi	r26, 0x38	; 56
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e8 e3       	ldi	r30, 0x38	; 56
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8d 7f       	andi	r24, 0xFD	; 253
    2452:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	41 f4       	brne	.+16     	; 0x246a <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    245a:	a8 e3       	ldi	r26, 0x38	; 56
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e8 e3       	ldi	r30, 0x38	; 56
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	84 60       	ori	r24, 0x04	; 4
    2466:	8c 93       	st	X, r24
    2468:	07 c0       	rjmp	.+14     	; 0x2478 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    246a:	a8 e3       	ldi	r26, 0x38	; 56
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e8 e3       	ldi	r30, 0x38	; 56
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	8b 7f       	andi	r24, 0xFB	; 251
    2476:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	81 30       	cpi	r24, 0x01	; 1
    247c:	41 f4       	brne	.+16     	; 0x248e <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    247e:	a8 e3       	ldi	r26, 0x38	; 56
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e8 e3       	ldi	r30, 0x38	; 56
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	88 60       	ori	r24, 0x08	; 8
    248a:	8c 93       	st	X, r24
    248c:	07 c0       	rjmp	.+14     	; 0x249c <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    248e:	a8 e3       	ldi	r26, 0x38	; 56
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e8 e3       	ldi	r30, 0x38	; 56
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	87 7f       	andi	r24, 0xF7	; 247
    249a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    249c:	8e 81       	ldd	r24, Y+6	; 0x06
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	41 f4       	brne	.+16     	; 0x24b2 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    24a2:	a8 e3       	ldi	r26, 0x38	; 56
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e8 e3       	ldi	r30, 0x38	; 56
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	80 61       	ori	r24, 0x10	; 16
    24ae:	8c 93       	st	X, r24
    24b0:	07 c0       	rjmp	.+14     	; 0x24c0 <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    24b2:	a8 e3       	ldi	r26, 0x38	; 56
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e8 e3       	ldi	r30, 0x38	; 56
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	8f 7e       	andi	r24, 0xEF	; 239
    24be:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    24c0:	8f 81       	ldd	r24, Y+7	; 0x07
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	41 f4       	brne	.+16     	; 0x24d6 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    24c6:	a8 e3       	ldi	r26, 0x38	; 56
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e8 e3       	ldi	r30, 0x38	; 56
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	80 62       	ori	r24, 0x20	; 32
    24d2:	8c 93       	st	X, r24
    24d4:	07 c0       	rjmp	.+14     	; 0x24e4 <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    24d6:	a8 e3       	ldi	r26, 0x38	; 56
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e8 e3       	ldi	r30, 0x38	; 56
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 7d       	andi	r24, 0xDF	; 223
    24e2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    24e4:	88 85       	ldd	r24, Y+8	; 0x08
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	41 f4       	brne	.+16     	; 0x24fa <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    24ea:	a8 e3       	ldi	r26, 0x38	; 56
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e8 e3       	ldi	r30, 0x38	; 56
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	80 64       	ori	r24, 0x40	; 64
    24f6:	8c 93       	st	X, r24
    24f8:	07 c0       	rjmp	.+14     	; 0x2508 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    24fa:	a8 e3       	ldi	r26, 0x38	; 56
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e8 e3       	ldi	r30, 0x38	; 56
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	8f 7b       	andi	r24, 0xBF	; 191
    2506:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	41 f4       	brne	.+16     	; 0x251e <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    250e:	a8 e3       	ldi	r26, 0x38	; 56
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e8 e3       	ldi	r30, 0x38	; 56
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	80 68       	ori	r24, 0x80	; 128
    251a:	8c 93       	st	X, r24
    251c:	29 c1       	rjmp	.+594    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    251e:	a8 e3       	ldi	r26, 0x38	; 56
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e8 e3       	ldi	r30, 0x38	; 56
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8f 77       	andi	r24, 0x7F	; 127
    252a:	8c 93       	st	X, r24
    252c:	21 c1       	rjmp	.+578    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	41 f4       	brne	.+16     	; 0x2544 <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2534:	a5 e3       	ldi	r26, 0x35	; 53
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e5 e3       	ldi	r30, 0x35	; 53
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	81 60       	ori	r24, 0x01	; 1
    2540:	8c 93       	st	X, r24
    2542:	07 c0       	rjmp	.+14     	; 0x2552 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2544:	a5 e3       	ldi	r26, 0x35	; 53
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e5 e3       	ldi	r30, 0x35	; 53
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	8e 7f       	andi	r24, 0xFE	; 254
    2550:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	41 f4       	brne	.+16     	; 0x2568 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2558:	a5 e3       	ldi	r26, 0x35	; 53
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e5 e3       	ldi	r30, 0x35	; 53
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	82 60       	ori	r24, 0x02	; 2
    2564:	8c 93       	st	X, r24
    2566:	07 c0       	rjmp	.+14     	; 0x2576 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2568:	a5 e3       	ldi	r26, 0x35	; 53
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e5 e3       	ldi	r30, 0x35	; 53
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8d 7f       	andi	r24, 0xFD	; 253
    2574:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2576:	8c 81       	ldd	r24, Y+4	; 0x04
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	41 f4       	brne	.+16     	; 0x258c <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    257c:	a5 e3       	ldi	r26, 0x35	; 53
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e5 e3       	ldi	r30, 0x35	; 53
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	84 60       	ori	r24, 0x04	; 4
    2588:	8c 93       	st	X, r24
    258a:	07 c0       	rjmp	.+14     	; 0x259a <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    258c:	a5 e3       	ldi	r26, 0x35	; 53
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e5 e3       	ldi	r30, 0x35	; 53
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8b 7f       	andi	r24, 0xFB	; 251
    2598:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	41 f4       	brne	.+16     	; 0x25b0 <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    25a0:	a5 e3       	ldi	r26, 0x35	; 53
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e5 e3       	ldi	r30, 0x35	; 53
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	88 60       	ori	r24, 0x08	; 8
    25ac:	8c 93       	st	X, r24
    25ae:	07 c0       	rjmp	.+14     	; 0x25be <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    25b0:	a5 e3       	ldi	r26, 0x35	; 53
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e5 e3       	ldi	r30, 0x35	; 53
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	87 7f       	andi	r24, 0xF7	; 247
    25bc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    25be:	8e 81       	ldd	r24, Y+6	; 0x06
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	41 f4       	brne	.+16     	; 0x25d4 <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    25c4:	a5 e3       	ldi	r26, 0x35	; 53
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e5 e3       	ldi	r30, 0x35	; 53
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	80 61       	ori	r24, 0x10	; 16
    25d0:	8c 93       	st	X, r24
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    25d4:	a5 e3       	ldi	r26, 0x35	; 53
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e5 e3       	ldi	r30, 0x35	; 53
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	8f 7e       	andi	r24, 0xEF	; 239
    25e0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    25e2:	8f 81       	ldd	r24, Y+7	; 0x07
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	41 f4       	brne	.+16     	; 0x25f8 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    25e8:	a5 e3       	ldi	r26, 0x35	; 53
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e5 e3       	ldi	r30, 0x35	; 53
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	80 62       	ori	r24, 0x20	; 32
    25f4:	8c 93       	st	X, r24
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    25f8:	a5 e3       	ldi	r26, 0x35	; 53
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e5 e3       	ldi	r30, 0x35	; 53
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	8f 7d       	andi	r24, 0xDF	; 223
    2604:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    2606:	88 85       	ldd	r24, Y+8	; 0x08
    2608:	81 30       	cpi	r24, 0x01	; 1
    260a:	41 f4       	brne	.+16     	; 0x261c <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    260c:	a5 e3       	ldi	r26, 0x35	; 53
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e5 e3       	ldi	r30, 0x35	; 53
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	80 64       	ori	r24, 0x40	; 64
    2618:	8c 93       	st	X, r24
    261a:	07 c0       	rjmp	.+14     	; 0x262a <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    261c:	a5 e3       	ldi	r26, 0x35	; 53
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e5 e3       	ldi	r30, 0x35	; 53
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	8f 7b       	andi	r24, 0xBF	; 191
    2628:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	81 30       	cpi	r24, 0x01	; 1
    262e:	41 f4       	brne	.+16     	; 0x2640 <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2630:	a5 e3       	ldi	r26, 0x35	; 53
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e5 e3       	ldi	r30, 0x35	; 53
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	80 68       	ori	r24, 0x80	; 128
    263c:	8c 93       	st	X, r24
    263e:	98 c0       	rjmp	.+304    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2640:	a5 e3       	ldi	r26, 0x35	; 53
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e5 e3       	ldi	r30, 0x35	; 53
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	8f 77       	andi	r24, 0x7F	; 127
    264c:	8c 93       	st	X, r24
    264e:	90 c0       	rjmp	.+288    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	41 f4       	brne	.+16     	; 0x2666 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2656:	a2 e3       	ldi	r26, 0x32	; 50
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e2 e3       	ldi	r30, 0x32	; 50
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	81 60       	ori	r24, 0x01	; 1
    2662:	8c 93       	st	X, r24
    2664:	07 c0       	rjmp	.+14     	; 0x2674 <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2666:	a2 e3       	ldi	r26, 0x32	; 50
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e2 e3       	ldi	r30, 0x32	; 50
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8e 7f       	andi	r24, 0xFE	; 254
    2672:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	41 f4       	brne	.+16     	; 0x268a <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    267a:	a2 e3       	ldi	r26, 0x32	; 50
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e2 e3       	ldi	r30, 0x32	; 50
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	82 60       	ori	r24, 0x02	; 2
    2686:	8c 93       	st	X, r24
    2688:	07 c0       	rjmp	.+14     	; 0x2698 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    268a:	a2 e3       	ldi	r26, 0x32	; 50
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e2 e3       	ldi	r30, 0x32	; 50
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	8d 7f       	andi	r24, 0xFD	; 253
    2696:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	41 f4       	brne	.+16     	; 0x26ae <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    269e:	a2 e3       	ldi	r26, 0x32	; 50
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e2 e3       	ldi	r30, 0x32	; 50
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	84 60       	ori	r24, 0x04	; 4
    26aa:	8c 93       	st	X, r24
    26ac:	07 c0       	rjmp	.+14     	; 0x26bc <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    26ae:	a2 e3       	ldi	r26, 0x32	; 50
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e2 e3       	ldi	r30, 0x32	; 50
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8b 7f       	andi	r24, 0xFB	; 251
    26ba:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	41 f4       	brne	.+16     	; 0x26d2 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    26c2:	a2 e3       	ldi	r26, 0x32	; 50
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e2 e3       	ldi	r30, 0x32	; 50
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	88 60       	ori	r24, 0x08	; 8
    26ce:	8c 93       	st	X, r24
    26d0:	07 c0       	rjmp	.+14     	; 0x26e0 <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    26d2:	a2 e3       	ldi	r26, 0x32	; 50
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e2 e3       	ldi	r30, 0x32	; 50
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	87 7f       	andi	r24, 0xF7	; 247
    26de:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
    26e2:	81 30       	cpi	r24, 0x01	; 1
    26e4:	41 f4       	brne	.+16     	; 0x26f6 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    26e6:	a2 e3       	ldi	r26, 0x32	; 50
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e2 e3       	ldi	r30, 0x32	; 50
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	80 61       	ori	r24, 0x10	; 16
    26f2:	8c 93       	st	X, r24
    26f4:	07 c0       	rjmp	.+14     	; 0x2704 <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    26f6:	a2 e3       	ldi	r26, 0x32	; 50
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e2 e3       	ldi	r30, 0x32	; 50
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	8f 7e       	andi	r24, 0xEF	; 239
    2702:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    2704:	8f 81       	ldd	r24, Y+7	; 0x07
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	41 f4       	brne	.+16     	; 0x271a <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    270a:	a2 e3       	ldi	r26, 0x32	; 50
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e2 e3       	ldi	r30, 0x32	; 50
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	80 62       	ori	r24, 0x20	; 32
    2716:	8c 93       	st	X, r24
    2718:	07 c0       	rjmp	.+14     	; 0x2728 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    271a:	a2 e3       	ldi	r26, 0x32	; 50
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e2 e3       	ldi	r30, 0x32	; 50
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 7d       	andi	r24, 0xDF	; 223
    2726:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    2728:	88 85       	ldd	r24, Y+8	; 0x08
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	41 f4       	brne	.+16     	; 0x273e <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    272e:	a2 e3       	ldi	r26, 0x32	; 50
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e2 e3       	ldi	r30, 0x32	; 50
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	80 64       	ori	r24, 0x40	; 64
    273a:	8c 93       	st	X, r24
    273c:	07 c0       	rjmp	.+14     	; 0x274c <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    273e:	a2 e3       	ldi	r26, 0x32	; 50
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e2 e3       	ldi	r30, 0x32	; 50
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8f 7b       	andi	r24, 0xBF	; 191
    274a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	41 f4       	brne	.+16     	; 0x2762 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2752:	a2 e3       	ldi	r26, 0x32	; 50
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e2 e3       	ldi	r30, 0x32	; 50
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 68       	ori	r24, 0x80	; 128
    275e:	8c 93       	st	X, r24
    2760:	07 c0       	rjmp	.+14     	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2762:	a2 e3       	ldi	r26, 0x32	; 50
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e2 e3       	ldi	r30, 0x32	; 50
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	8f 77       	andi	r24, 0x7F	; 127
    276e:	8c 93       	st	X, r24
		}
		break;
	}
}
    2770:	2c 96       	adiw	r28, 0x0c	; 12
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	0f 91       	pop	r16
    2782:	ef 90       	pop	r14
    2784:	cf 90       	pop	r12
    2786:	af 90       	pop	r10
    2788:	8f 90       	pop	r8
    278a:	08 95       	ret

0000278c <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	61 e0       	ldi	r22, 0x01	; 1
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    27a8:	83 e0       	ldi	r24, 0x03	; 3
    27aa:	62 e0       	ldi	r22, 0x02	; 2
    27ac:	41 e0       	ldi	r20, 0x01	; 1
    27ae:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    27b2:	83 e0       	ldi	r24, 0x03	; 3
    27b4:	63 e0       	ldi	r22, 0x03	; 3
    27b6:	41 e0       	ldi	r20, 0x01	; 1
    27b8:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
}
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <ActivatePins1+0x6>
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <ActivatePins1+0x8>
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	6a 83       	std	Y+2, r22	; 0x02
    27d2:	4b 83       	std	Y+3, r20	; 0x03
    27d4:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    27d6:	83 e0       	ldi	r24, 0x03	; 3
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	49 81       	ldd	r20, Y+1	; 0x01
    27dc:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    27e0:	83 e0       	ldi	r24, 0x03	; 3
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	4a 81       	ldd	r20, Y+2	; 0x02
    27e6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	62 e0       	ldi	r22, 0x02	; 2
    27ee:	4b 81       	ldd	r20, Y+3	; 0x03
    27f0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    27f4:	83 e0       	ldi	r24, 0x03	; 3
    27f6:	63 e0       	ldi	r22, 0x03	; 3
    27f8:	4c 81       	ldd	r20, Y+4	; 0x04
    27fa:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
}
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	00 d0       	rcall	.+0      	; 0x2812 <ActivatePins2+0x6>
    2812:	00 d0       	rcall	.+0      	; 0x2814 <ActivatePins2+0x8>
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	6a 83       	std	Y+2, r22	; 0x02
    281c:	4b 83       	std	Y+3, r20	; 0x03
    281e:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	63 e0       	ldi	r22, 0x03	; 3
    2824:	4c 81       	ldd	r20, Y+4	; 0x04
    2826:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	62 e0       	ldi	r22, 0x02	; 2
    282e:	4b 81       	ldd	r20, Y+3	; 0x03
    2830:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2834:	83 e0       	ldi	r24, 0x03	; 3
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	4a 81       	ldd	r20, Y+2	; 0x02
    283a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    283e:	83 e0       	ldi	r24, 0x03	; 3
    2840:	60 e0       	ldi	r22, 0x00	; 0
    2842:	49 81       	ldd	r20, Y+1	; 0x01
    2844:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
}
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	29 97       	sbiw	r28, 0x09	; 9
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2870:	29 81       	ldd	r18, Y+1	; 0x01
    2872:	3a 81       	ldd	r19, Y+2	; 0x02
    2874:	39 87       	std	Y+9, r19	; 0x09
    2876:	28 87       	std	Y+8, r18	; 0x08
    2878:	88 85       	ldd	r24, Y+8	; 0x08
    287a:	99 85       	ldd	r25, Y+9	; 0x09
    287c:	8a 35       	cpi	r24, 0x5A	; 90
    287e:	91 05       	cpc	r25, r1
    2880:	31 f0       	breq	.+12     	; 0x288e <SelectStepAngle+0x38>
    2882:	28 85       	ldd	r18, Y+8	; 0x08
    2884:	39 85       	ldd	r19, Y+9	; 0x09
    2886:	24 3b       	cpi	r18, 0xB4	; 180
    2888:	31 05       	cpc	r19, r1
    288a:	f1 f0       	breq	.+60     	; 0x28c8 <SelectStepAngle+0x72>
    288c:	39 c0       	rjmp	.+114    	; 0x2900 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	3f 83       	std	Y+7, r19	; 0x07
    2896:	2e 83       	std	Y+6, r18	; 0x06
    2898:	8e 81       	ldd	r24, Y+6	; 0x06
    289a:	9f 81       	ldd	r25, Y+7	; 0x07
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	31 f0       	breq	.+12     	; 0x28ac <SelectStepAngle+0x56>
    28a0:	2e 81       	ldd	r18, Y+6	; 0x06
    28a2:	3f 81       	ldd	r19, Y+7	; 0x07
    28a4:	21 30       	cpi	r18, 0x01	; 1
    28a6:	31 05       	cpc	r19, r1
    28a8:	41 f0       	breq	.+16     	; 0x28ba <SelectStepAngle+0x64>
    28aa:	2a c0       	rjmp	.+84     	; 0x2900 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	60 e0       	ldi	r22, 0x00	; 0
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	21 e0       	ldi	r18, 0x01	; 1
    28b4:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <ActivatePins1>
    28b8:	23 c0       	rjmp	.+70     	; 0x2900 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	61 e0       	ldi	r22, 0x01	; 1
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	0e 94 06 14 	call	0x280c	; 0x280c <ActivatePins2>
    28c6:	1c c0       	rjmp	.+56     	; 0x2900 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	3d 83       	std	Y+5, r19	; 0x05
    28d0:	2c 83       	std	Y+4, r18	; 0x04
    28d2:	8c 81       	ldd	r24, Y+4	; 0x04
    28d4:	9d 81       	ldd	r25, Y+5	; 0x05
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	31 f0       	breq	.+12     	; 0x28e6 <SelectStepAngle+0x90>
    28da:	2c 81       	ldd	r18, Y+4	; 0x04
    28dc:	3d 81       	ldd	r19, Y+5	; 0x05
    28de:	21 30       	cpi	r18, 0x01	; 1
    28e0:	31 05       	cpc	r19, r1
    28e2:	41 f0       	breq	.+16     	; 0x28f4 <SelectStepAngle+0x9e>
    28e4:	0d c0       	rjmp	.+26     	; 0x2900 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	61 e0       	ldi	r22, 0x01	; 1
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	0e 94 06 14 	call	0x280c	; 0x280c <ActivatePins2>
    28f2:	06 c0       	rjmp	.+12     	; 0x2900 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	61 e0       	ldi	r22, 0x01	; 1
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <ActivatePins1>
						break;
				}
				break;
	}
}
    2900:	29 96       	adiw	r28, 0x09	; 9
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	e9 97       	sbiw	r28, 0x39	; 57
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	64 e0       	ldi	r22, 0x04	; 4
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	40 e0       	ldi	r20, 0x00	; 0
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	a0 e8       	ldi	r26, 0x80	; 128
    293e:	bf e3       	ldi	r27, 0x3F	; 63
    2940:	8d ab       	std	Y+53, r24	; 0x35
    2942:	9e ab       	std	Y+54, r25	; 0x36
    2944:	af ab       	std	Y+55, r26	; 0x37
    2946:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2948:	6d a9       	ldd	r22, Y+53	; 0x35
    294a:	7e a9       	ldd	r23, Y+54	; 0x36
    294c:	8f a9       	ldd	r24, Y+55	; 0x37
    294e:	98 ad       	ldd	r25, Y+56	; 0x38
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	4a e7       	ldi	r20, 0x7A	; 122
    2956:	55 e4       	ldi	r21, 0x45	; 69
    2958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	89 ab       	std	Y+49, r24	; 0x31
    2962:	9a ab       	std	Y+50, r25	; 0x32
    2964:	ab ab       	std	Y+51, r26	; 0x33
    2966:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2968:	69 a9       	ldd	r22, Y+49	; 0x31
    296a:	7a a9       	ldd	r23, Y+50	; 0x32
    296c:	8b a9       	ldd	r24, Y+51	; 0x33
    296e:	9c a9       	ldd	r25, Y+52	; 0x34
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e8       	ldi	r20, 0x80	; 128
    2976:	5f e3       	ldi	r21, 0x3F	; 63
    2978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297c:	88 23       	and	r24, r24
    297e:	2c f4       	brge	.+10     	; 0x298a <LCD_sendCommand+0x78>
		__ticks = 1;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	98 ab       	std	Y+48, r25	; 0x30
    2986:	8f a7       	std	Y+47, r24	; 0x2f
    2988:	3f c0       	rjmp	.+126    	; 0x2a08 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    298a:	69 a9       	ldd	r22, Y+49	; 0x31
    298c:	7a a9       	ldd	r23, Y+50	; 0x32
    298e:	8b a9       	ldd	r24, Y+51	; 0x33
    2990:	9c a9       	ldd	r25, Y+52	; 0x34
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	3f ef       	ldi	r19, 0xFF	; 255
    2996:	4f e7       	ldi	r20, 0x7F	; 127
    2998:	57 e4       	ldi	r21, 0x47	; 71
    299a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299e:	18 16       	cp	r1, r24
    29a0:	4c f5       	brge	.+82     	; 0x29f4 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a2:	6d a9       	ldd	r22, Y+53	; 0x35
    29a4:	7e a9       	ldd	r23, Y+54	; 0x36
    29a6:	8f a9       	ldd	r24, Y+55	; 0x37
    29a8:	98 ad       	ldd	r25, Y+56	; 0x38
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	98 ab       	std	Y+48, r25	; 0x30
    29c8:	8f a7       	std	Y+47, r24	; 0x2f
    29ca:	0f c0       	rjmp	.+30     	; 0x29ea <LCD_sendCommand+0xd8>
    29cc:	80 e9       	ldi	r24, 0x90	; 144
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	9e a7       	std	Y+46, r25	; 0x2e
    29d2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_sendCommand+0xc6>
    29dc:	9e a7       	std	Y+46, r25	; 0x2e
    29de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e2:	98 a9       	ldd	r25, Y+48	; 0x30
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	98 ab       	std	Y+48, r25	; 0x30
    29e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ec:	98 a9       	ldd	r25, Y+48	; 0x30
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	69 f7       	brne	.-38     	; 0x29cc <LCD_sendCommand+0xba>
    29f2:	14 c0       	rjmp	.+40     	; 0x2a1c <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f4:	69 a9       	ldd	r22, Y+49	; 0x31
    29f6:	7a a9       	ldd	r23, Y+50	; 0x32
    29f8:	8b a9       	ldd	r24, Y+51	; 0x33
    29fa:	9c a9       	ldd	r25, Y+52	; 0x34
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	98 ab       	std	Y+48, r25	; 0x30
    2a06:	8f a7       	std	Y+47, r24	; 0x2f
    2a08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0c:	9c a7       	std	Y+44, r25	; 0x2c
    2a0e:	8b a7       	std	Y+43, r24	; 0x2b
    2a10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_sendCommand+0x102>
    2a18:	9c a7       	std	Y+44, r25	; 0x2c
    2a1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2a1c:	83 e0       	ldi	r24, 0x03	; 3
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	65 e0       	ldi	r22, 0x05	; 5
    2a22:	70 e0       	ldi	r23, 0x00	; 0
    2a24:	41 e0       	ldi	r20, 0x01	; 1
    2a26:	50 e0       	ldi	r21, 0x00	; 0
    2a28:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a0 e8       	ldi	r26, 0x80	; 128
    2a32:	bf e3       	ldi	r27, 0x3F	; 63
    2a34:	8f a3       	std	Y+39, r24	; 0x27
    2a36:	98 a7       	std	Y+40, r25	; 0x28
    2a38:	a9 a7       	std	Y+41, r26	; 0x29
    2a3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a40:	89 a5       	ldd	r24, Y+41	; 0x29
    2a42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	4a e7       	ldi	r20, 0x7A	; 122
    2a4a:	55 e4       	ldi	r21, 0x45	; 69
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	8b a3       	std	Y+35, r24	; 0x23
    2a56:	9c a3       	std	Y+36, r25	; 0x24
    2a58:	ad a3       	std	Y+37, r26	; 0x25
    2a5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a60:	8d a1       	ldd	r24, Y+37	; 0x25
    2a62:	9e a1       	ldd	r25, Y+38	; 0x26
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e8       	ldi	r20, 0x80	; 128
    2a6a:	5f e3       	ldi	r21, 0x3F	; 63
    2a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a70:	88 23       	and	r24, r24
    2a72:	2c f4       	brge	.+10     	; 0x2a7e <LCD_sendCommand+0x16c>
		__ticks = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9a a3       	std	Y+34, r25	; 0x22
    2a7a:	89 a3       	std	Y+33, r24	; 0x21
    2a7c:	3f c0       	rjmp	.+126    	; 0x2afc <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a80:	7c a1       	ldd	r23, Y+36	; 0x24
    2a82:	8d a1       	ldd	r24, Y+37	; 0x25
    2a84:	9e a1       	ldd	r25, Y+38	; 0x26
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	3f ef       	ldi	r19, 0xFF	; 255
    2a8a:	4f e7       	ldi	r20, 0x7F	; 127
    2a8c:	57 e4       	ldi	r21, 0x47	; 71
    2a8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a92:	18 16       	cp	r1, r24
    2a94:	4c f5       	brge	.+82     	; 0x2ae8 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a96:	6f a1       	ldd	r22, Y+39	; 0x27
    2a98:	78 a5       	ldd	r23, Y+40	; 0x28
    2a9a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e2       	ldi	r20, 0x20	; 32
    2aa4:	51 e4       	ldi	r21, 0x41	; 65
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9a a3       	std	Y+34, r25	; 0x22
    2abc:	89 a3       	std	Y+33, r24	; 0x21
    2abe:	0f c0       	rjmp	.+30     	; 0x2ade <LCD_sendCommand+0x1cc>
    2ac0:	80 e9       	ldi	r24, 0x90	; 144
    2ac2:	91 e0       	ldi	r25, 0x01	; 1
    2ac4:	98 a3       	std	Y+32, r25	; 0x20
    2ac6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ac8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aca:	98 a1       	ldd	r25, Y+32	; 0x20
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_sendCommand+0x1ba>
    2ad0:	98 a3       	std	Y+32, r25	; 0x20
    2ad2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	9a a3       	std	Y+34, r25	; 0x22
    2adc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ade:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	69 f7       	brne	.-38     	; 0x2ac0 <LCD_sendCommand+0x1ae>
    2ae6:	14 c0       	rjmp	.+40     	; 0x2b10 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    2aea:	7c a1       	ldd	r23, Y+36	; 0x24
    2aec:	8d a1       	ldd	r24, Y+37	; 0x25
    2aee:	9e a1       	ldd	r25, Y+38	; 0x26
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9a a3       	std	Y+34, r25	; 0x22
    2afa:	89 a3       	std	Y+33, r24	; 0x21
    2afc:	89 a1       	ldd	r24, Y+33	; 0x21
    2afe:	9a a1       	ldd	r25, Y+34	; 0x22
    2b00:	9e 8f       	std	Y+30, r25	; 0x1e
    2b02:	8d 8f       	std	Y+29, r24	; 0x1d
    2b04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <LCD_sendCommand+0x1f6>
    2b0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2b10:	89 ad       	ldd	r24, Y+57	; 0x39
    2b12:	28 2f       	mov	r18, r24
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	b9 01       	movw	r22, r18
    2b1c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_setPortValue>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a0 e8       	ldi	r26, 0x80	; 128
    2b26:	bf e3       	ldi	r27, 0x3F	; 63
    2b28:	89 8f       	std	Y+25, r24	; 0x19
    2b2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b30:	69 8d       	ldd	r22, Y+25	; 0x19
    2b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a e7       	ldi	r20, 0x7A	; 122
    2b3e:	55 e4       	ldi	r21, 0x45	; 69
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8d 8b       	std	Y+21, r24	; 0x15
    2b4a:	9e 8b       	std	Y+22, r25	; 0x16
    2b4c:	af 8b       	std	Y+23, r26	; 0x17
    2b4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b50:	6d 89       	ldd	r22, Y+21	; 0x15
    2b52:	7e 89       	ldd	r23, Y+22	; 0x16
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e8       	ldi	r20, 0x80	; 128
    2b5e:	5f e3       	ldi	r21, 0x3F	; 63
    2b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <LCD_sendCommand+0x260>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9c 8b       	std	Y+20, r25	; 0x14
    2b6e:	8b 8b       	std	Y+19, r24	; 0x13
    2b70:	3f c0       	rjmp	.+126    	; 0x2bf0 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    2b72:	6d 89       	ldd	r22, Y+21	; 0x15
    2b74:	7e 89       	ldd	r23, Y+22	; 0x16
    2b76:	8f 89       	ldd	r24, Y+23	; 0x17
    2b78:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	4f e7       	ldi	r20, 0x7F	; 127
    2b80:	57 e4       	ldi	r21, 0x47	; 71
    2b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b86:	18 16       	cp	r1, r24
    2b88:	4c f5       	brge	.+82     	; 0x2bdc <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9c 8b       	std	Y+20, r25	; 0x14
    2bb0:	8b 8b       	std	Y+19, r24	; 0x13
    2bb2:	0f c0       	rjmp	.+30     	; 0x2bd2 <LCD_sendCommand+0x2c0>
    2bb4:	80 e9       	ldi	r24, 0x90	; 144
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	9a 8b       	std	Y+18, r25	; 0x12
    2bba:	89 8b       	std	Y+17, r24	; 0x11
    2bbc:	89 89       	ldd	r24, Y+17	; 0x11
    2bbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <LCD_sendCommand+0x2ae>
    2bc4:	9a 8b       	std	Y+18, r25	; 0x12
    2bc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bca:	9c 89       	ldd	r25, Y+20	; 0x14
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	9c 8b       	std	Y+20, r25	; 0x14
    2bd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	69 f7       	brne	.-38     	; 0x2bb4 <LCD_sendCommand+0x2a2>
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bde:	7e 89       	ldd	r23, Y+22	; 0x16
    2be0:	8f 89       	ldd	r24, Y+23	; 0x17
    2be2:	98 8d       	ldd	r25, Y+24	; 0x18
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9c 8b       	std	Y+20, r25	; 0x14
    2bee:	8b 8b       	std	Y+19, r24	; 0x13
    2bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf4:	98 8b       	std	Y+16, r25	; 0x10
    2bf6:	8f 87       	std	Y+15, r24	; 0x0f
    2bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfa:	98 89       	ldd	r25, Y+16	; 0x10
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_sendCommand+0x2ea>
    2c00:	98 8b       	std	Y+16, r25	; 0x10
    2c02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2c04:	83 e0       	ldi	r24, 0x03	; 3
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	65 e0       	ldi	r22, 0x05	; 5
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a0 e8       	ldi	r26, 0x80	; 128
    2c1a:	bf e3       	ldi	r27, 0x3F	; 63
    2c1c:	8b 87       	std	Y+11, r24	; 0x0b
    2c1e:	9c 87       	std	Y+12, r25	; 0x0c
    2c20:	ad 87       	std	Y+13, r26	; 0x0d
    2c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	4a e7       	ldi	r20, 0x7A	; 122
    2c32:	55 e4       	ldi	r21, 0x45	; 69
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8f 83       	std	Y+7, r24	; 0x07
    2c3e:	98 87       	std	Y+8, r25	; 0x08
    2c40:	a9 87       	std	Y+9, r26	; 0x09
    2c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c44:	6f 81       	ldd	r22, Y+7	; 0x07
    2c46:	78 85       	ldd	r23, Y+8	; 0x08
    2c48:	89 85       	ldd	r24, Y+9	; 0x09
    2c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	2c f4       	brge	.+10     	; 0x2c66 <LCD_sendCommand+0x354>
		__ticks = 1;
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	3f c0       	rjmp	.+126    	; 0x2ce4 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	3f ef       	ldi	r19, 0xFF	; 255
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	57 e4       	ldi	r21, 0x47	; 71
    2c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c7a:	18 16       	cp	r1, r24
    2c7c:	4c f5       	brge	.+82     	; 0x2cd0 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9e 83       	std	Y+6, r25	; 0x06
    2ca4:	8d 83       	std	Y+5, r24	; 0x05
    2ca6:	0f c0       	rjmp	.+30     	; 0x2cc6 <LCD_sendCommand+0x3b4>
    2ca8:	80 e9       	ldi	r24, 0x90	; 144
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	9c 83       	std	Y+4, r25	; 0x04
    2cae:	8b 83       	std	Y+3, r24	; 0x03
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <LCD_sendCommand+0x3a2>
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <LCD_sendCommand+0x396>
    2cce:	14 c0       	rjmp	.+40     	; 0x2cf8 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd2:	78 85       	ldd	r23, Y+8	; 0x08
    2cd4:	89 85       	ldd	r24, Y+9	; 0x09
    2cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce8:	9a 83       	std	Y+2, r25	; 0x02
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <LCD_sendCommand+0x3de>
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2cf8:	e9 96       	adiw	r28, 0x39	; 57
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	e9 97       	sbiw	r28, 0x39	; 57
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2d20:	83 e0       	ldi	r24, 0x03	; 3
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	64 e0       	ldi	r22, 0x04	; 4
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a0 e8       	ldi	r26, 0x80	; 128
    2d36:	bf e3       	ldi	r27, 0x3F	; 63
    2d38:	8d ab       	std	Y+53, r24	; 0x35
    2d3a:	9e ab       	std	Y+54, r25	; 0x36
    2d3c:	af ab       	std	Y+55, r26	; 0x37
    2d3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	6d a9       	ldd	r22, Y+53	; 0x35
    2d42:	7e a9       	ldd	r23, Y+54	; 0x36
    2d44:	8f a9       	ldd	r24, Y+55	; 0x37
    2d46:	98 ad       	ldd	r25, Y+56	; 0x38
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4a e7       	ldi	r20, 0x7A	; 122
    2d4e:	55 e4       	ldi	r21, 0x45	; 69
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	89 ab       	std	Y+49, r24	; 0x31
    2d5a:	9a ab       	std	Y+50, r25	; 0x32
    2d5c:	ab ab       	std	Y+51, r26	; 0x33
    2d5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d60:	69 a9       	ldd	r22, Y+49	; 0x31
    2d62:	7a a9       	ldd	r23, Y+50	; 0x32
    2d64:	8b a9       	ldd	r24, Y+51	; 0x33
    2d66:	9c a9       	ldd	r25, Y+52	; 0x34
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <LCD_displayCharacter+0x78>
		__ticks = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	98 ab       	std	Y+48, r25	; 0x30
    2d7e:	8f a7       	std	Y+47, r24	; 0x2f
    2d80:	3f c0       	rjmp	.+126    	; 0x2e00 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    2d82:	69 a9       	ldd	r22, Y+49	; 0x31
    2d84:	7a a9       	ldd	r23, Y+50	; 0x32
    2d86:	8b a9       	ldd	r24, Y+51	; 0x33
    2d88:	9c a9       	ldd	r25, Y+52	; 0x34
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	4c f5       	brge	.+82     	; 0x2dec <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d9c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d9e:	8f a9       	ldd	r24, Y+55	; 0x37
    2da0:	98 ad       	ldd	r25, Y+56	; 0x38
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	98 ab       	std	Y+48, r25	; 0x30
    2dc0:	8f a7       	std	Y+47, r24	; 0x2f
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <LCD_displayCharacter+0xd8>
    2dc4:	80 e9       	ldi	r24, 0x90	; 144
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	9e a7       	std	Y+46, r25	; 0x2e
    2dca:	8d a7       	std	Y+45, r24	; 0x2d
    2dcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dce:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_displayCharacter+0xc6>
    2dd4:	9e a7       	std	Y+46, r25	; 0x2e
    2dd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dda:	98 a9       	ldd	r25, Y+48	; 0x30
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	98 ab       	std	Y+48, r25	; 0x30
    2de0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2de4:	98 a9       	ldd	r25, Y+48	; 0x30
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <LCD_displayCharacter+0xba>
    2dea:	14 c0       	rjmp	.+40     	; 0x2e14 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	69 a9       	ldd	r22, Y+49	; 0x31
    2dee:	7a a9       	ldd	r23, Y+50	; 0x32
    2df0:	8b a9       	ldd	r24, Y+51	; 0x33
    2df2:	9c a9       	ldd	r25, Y+52	; 0x34
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	98 ab       	std	Y+48, r25	; 0x30
    2dfe:	8f a7       	std	Y+47, r24	; 0x2f
    2e00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e02:	98 a9       	ldd	r25, Y+48	; 0x30
    2e04:	9c a7       	std	Y+44, r25	; 0x2c
    2e06:	8b a7       	std	Y+43, r24	; 0x2b
    2e08:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_displayCharacter+0x102>
    2e10:	9c a7       	std	Y+44, r25	; 0x2c
    2e12:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2e14:	83 e0       	ldi	r24, 0x03	; 3
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	65 e0       	ldi	r22, 0x05	; 5
    2e1a:	70 e0       	ldi	r23, 0x00	; 0
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a0 e8       	ldi	r26, 0x80	; 128
    2e2a:	bf e3       	ldi	r27, 0x3F	; 63
    2e2c:	8f a3       	std	Y+39, r24	; 0x27
    2e2e:	98 a7       	std	Y+40, r25	; 0x28
    2e30:	a9 a7       	std	Y+41, r26	; 0x29
    2e32:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e34:	6f a1       	ldd	r22, Y+39	; 0x27
    2e36:	78 a5       	ldd	r23, Y+40	; 0x28
    2e38:	89 a5       	ldd	r24, Y+41	; 0x29
    2e3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4a e7       	ldi	r20, 0x7A	; 122
    2e42:	55 e4       	ldi	r21, 0x45	; 69
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	8b a3       	std	Y+35, r24	; 0x23
    2e4e:	9c a3       	std	Y+36, r25	; 0x24
    2e50:	ad a3       	std	Y+37, r26	; 0x25
    2e52:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e54:	6b a1       	ldd	r22, Y+35	; 0x23
    2e56:	7c a1       	ldd	r23, Y+36	; 0x24
    2e58:	8d a1       	ldd	r24, Y+37	; 0x25
    2e5a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e8       	ldi	r20, 0x80	; 128
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e68:	88 23       	and	r24, r24
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9a a3       	std	Y+34, r25	; 0x22
    2e72:	89 a3       	std	Y+33, r24	; 0x21
    2e74:	3f c0       	rjmp	.+126    	; 0x2ef4 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2e76:	6b a1       	ldd	r22, Y+35	; 0x23
    2e78:	7c a1       	ldd	r23, Y+36	; 0x24
    2e7a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e7c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	3f ef       	ldi	r19, 0xFF	; 255
    2e82:	4f e7       	ldi	r20, 0x7F	; 127
    2e84:	57 e4       	ldi	r21, 0x47	; 71
    2e86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e8a:	18 16       	cp	r1, r24
    2e8c:	4c f5       	brge	.+82     	; 0x2ee0 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8e:	6f a1       	ldd	r22, Y+39	; 0x27
    2e90:	78 a5       	ldd	r23, Y+40	; 0x28
    2e92:	89 a5       	ldd	r24, Y+41	; 0x29
    2e94:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e2       	ldi	r20, 0x20	; 32
    2e9c:	51 e4       	ldi	r21, 0x41	; 65
    2e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9a a3       	std	Y+34, r25	; 0x22
    2eb4:	89 a3       	std	Y+33, r24	; 0x21
    2eb6:	0f c0       	rjmp	.+30     	; 0x2ed6 <LCD_displayCharacter+0x1cc>
    2eb8:	80 e9       	ldi	r24, 0x90	; 144
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	98 a3       	std	Y+32, r25	; 0x20
    2ebe:	8f 8f       	std	Y+31, r24	; 0x1f
    2ec0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ec2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <LCD_displayCharacter+0x1ba>
    2ec8:	98 a3       	std	Y+32, r25	; 0x20
    2eca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ecc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ece:	9a a1       	ldd	r25, Y+34	; 0x22
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	9a a3       	std	Y+34, r25	; 0x22
    2ed4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed8:	9a a1       	ldd	r25, Y+34	; 0x22
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <LCD_displayCharacter+0x1ae>
    2ede:	14 c0       	rjmp	.+40     	; 0x2f08 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9a a3       	std	Y+34, r25	; 0x22
    2ef2:	89 a3       	std	Y+33, r24	; 0x21
    2ef4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef8:	9e 8f       	std	Y+30, r25	; 0x1e
    2efa:	8d 8f       	std	Y+29, r24	; 0x1d
    2efc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2efe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <LCD_displayCharacter+0x1f6>
    2f04:	9e 8f       	std	Y+30, r25	; 0x1e
    2f06:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    2f08:	89 ad       	ldd	r24, Y+57	; 0x39
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	b9 01       	movw	r22, r18
    2f14:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_setPortValue>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	a0 e8       	ldi	r26, 0x80	; 128
    2f1e:	bf e3       	ldi	r27, 0x3F	; 63
    2f20:	89 8f       	std	Y+25, r24	; 0x19
    2f22:	9a 8f       	std	Y+26, r25	; 0x1a
    2f24:	ab 8f       	std	Y+27, r26	; 0x1b
    2f26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f28:	69 8d       	ldd	r22, Y+25	; 0x19
    2f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	4a e7       	ldi	r20, 0x7A	; 122
    2f36:	55 e4       	ldi	r21, 0x45	; 69
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	8d 8b       	std	Y+21, r24	; 0x15
    2f42:	9e 8b       	std	Y+22, r25	; 0x16
    2f44:	af 8b       	std	Y+23, r26	; 0x17
    2f46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f48:	6d 89       	ldd	r22, Y+21	; 0x15
    2f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e8       	ldi	r20, 0x80	; 128
    2f56:	5f e3       	ldi	r21, 0x3F	; 63
    2f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5c:	88 23       	and	r24, r24
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <LCD_displayCharacter+0x260>
		__ticks = 1;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9c 8b       	std	Y+20, r25	; 0x14
    2f66:	8b 8b       	std	Y+19, r24	; 0x13
    2f68:	3f c0       	rjmp	.+126    	; 0x2fe8 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    2f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f70:	98 8d       	ldd	r25, Y+24	; 0x18
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	3f ef       	ldi	r19, 0xFF	; 255
    2f76:	4f e7       	ldi	r20, 0x7F	; 127
    2f78:	57 e4       	ldi	r21, 0x47	; 71
    2f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	4c f5       	brge	.+82     	; 0x2fd4 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f82:	69 8d       	ldd	r22, Y+25	; 0x19
    2f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e2       	ldi	r20, 0x20	; 32
    2f90:	51 e4       	ldi	r21, 0x41	; 65
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9c 8b       	std	Y+20, r25	; 0x14
    2fa8:	8b 8b       	std	Y+19, r24	; 0x13
    2faa:	0f c0       	rjmp	.+30     	; 0x2fca <LCD_displayCharacter+0x2c0>
    2fac:	80 e9       	ldi	r24, 0x90	; 144
    2fae:	91 e0       	ldi	r25, 0x01	; 1
    2fb0:	9a 8b       	std	Y+18, r25	; 0x12
    2fb2:	89 8b       	std	Y+17, r24	; 0x11
    2fb4:	89 89       	ldd	r24, Y+17	; 0x11
    2fb6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <LCD_displayCharacter+0x2ae>
    2fbc:	9a 8b       	std	Y+18, r25	; 0x12
    2fbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	9c 8b       	std	Y+20, r25	; 0x14
    2fc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fca:	8b 89       	ldd	r24, Y+19	; 0x13
    2fcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	69 f7       	brne	.-38     	; 0x2fac <LCD_displayCharacter+0x2a2>
    2fd2:	14 c0       	rjmp	.+40     	; 0x2ffc <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fda:	98 8d       	ldd	r25, Y+24	; 0x18
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9c 8b       	std	Y+20, r25	; 0x14
    2fe6:	8b 8b       	std	Y+19, r24	; 0x13
    2fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fea:	9c 89       	ldd	r25, Y+20	; 0x14
    2fec:	98 8b       	std	Y+16, r25	; 0x10
    2fee:	8f 87       	std	Y+15, r24	; 0x0f
    2ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff2:	98 89       	ldd	r25, Y+16	; 0x10
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_displayCharacter+0x2ea>
    2ff8:	98 8b       	std	Y+16, r25	; 0x10
    2ffa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	65 e0       	ldi	r22, 0x05	; 5
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	40 e0       	ldi	r20, 0x00	; 0
    3006:	50 e0       	ldi	r21, 0x00	; 0
    3008:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	a0 e8       	ldi	r26, 0x80	; 128
    3012:	bf e3       	ldi	r27, 0x3F	; 63
    3014:	8b 87       	std	Y+11, r24	; 0x0b
    3016:	9c 87       	std	Y+12, r25	; 0x0c
    3018:	ad 87       	std	Y+13, r26	; 0x0d
    301a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301c:	6b 85       	ldd	r22, Y+11	; 0x0b
    301e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3020:	8d 85       	ldd	r24, Y+13	; 0x0d
    3022:	9e 85       	ldd	r25, Y+14	; 0x0e
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	4a e7       	ldi	r20, 0x7A	; 122
    302a:	55 e4       	ldi	r21, 0x45	; 69
    302c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	8f 83       	std	Y+7, r24	; 0x07
    3036:	98 87       	std	Y+8, r25	; 0x08
    3038:	a9 87       	std	Y+9, r26	; 0x09
    303a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    303c:	6f 81       	ldd	r22, Y+7	; 0x07
    303e:	78 85       	ldd	r23, Y+8	; 0x08
    3040:	89 85       	ldd	r24, Y+9	; 0x09
    3042:	9a 85       	ldd	r25, Y+10	; 0x0a
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e8       	ldi	r20, 0x80	; 128
    304a:	5f e3       	ldi	r21, 0x3F	; 63
    304c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3050:	88 23       	and	r24, r24
    3052:	2c f4       	brge	.+10     	; 0x305e <LCD_displayCharacter+0x354>
		__ticks = 1;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	9e 83       	std	Y+6, r25	; 0x06
    305a:	8d 83       	std	Y+5, r24	; 0x05
    305c:	3f c0       	rjmp	.+126    	; 0x30dc <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    305e:	6f 81       	ldd	r22, Y+7	; 0x07
    3060:	78 85       	ldd	r23, Y+8	; 0x08
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	3f ef       	ldi	r19, 0xFF	; 255
    306a:	4f e7       	ldi	r20, 0x7F	; 127
    306c:	57 e4       	ldi	r21, 0x47	; 71
    306e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3072:	18 16       	cp	r1, r24
    3074:	4c f5       	brge	.+82     	; 0x30c8 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3076:	6b 85       	ldd	r22, Y+11	; 0x0b
    3078:	7c 85       	ldd	r23, Y+12	; 0x0c
    307a:	8d 85       	ldd	r24, Y+13	; 0x0d
    307c:	9e 85       	ldd	r25, Y+14	; 0x0e
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e2       	ldi	r20, 0x20	; 32
    3084:	51 e4       	ldi	r21, 0x41	; 65
    3086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
    309e:	0f c0       	rjmp	.+30     	; 0x30be <LCD_displayCharacter+0x3b4>
    30a0:	80 e9       	ldi	r24, 0x90	; 144
    30a2:	91 e0       	ldi	r25, 0x01	; 1
    30a4:	9c 83       	std	Y+4, r25	; 0x04
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <LCD_displayCharacter+0x3a2>
    30b0:	9c 83       	std	Y+4, r25	; 0x04
    30b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	9e 83       	std	Y+6, r25	; 0x06
    30bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	69 f7       	brne	.-38     	; 0x30a0 <LCD_displayCharacter+0x396>
    30c6:	14 c0       	rjmp	.+40     	; 0x30f0 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ca:	78 85       	ldd	r23, Y+8	; 0x08
    30cc:	89 85       	ldd	r24, Y+9	; 0x09
    30ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <LCD_displayCharacter+0x3de>
    30ec:	9a 83       	std	Y+2, r25	; 0x02
    30ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    30f0:	e9 96       	adiw	r28, 0x39	; 57
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <LCD_init>:
void LCD_init(void)
{
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	2e 97       	sbiw	r28, 0x0e	; 14
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    3116:	83 e0       	ldi	r24, 0x03	; 3
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	64 e0       	ldi	r22, 0x04	; 4
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    3126:	83 e0       	ldi	r24, 0x03	; 3
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	65 e0       	ldi	r22, 0x05	; 5
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	41 e0       	ldi	r20, 0x01	; 1
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	6f ef       	ldi	r22, 0xFF	; 255
    313c:	70 e0       	ldi	r23, 0x00	; 0
    313e:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_setPortDirection>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	a0 ea       	ldi	r26, 0xA0	; 160
    3148:	b1 e4       	ldi	r27, 0x41	; 65
    314a:	8b 87       	std	Y+11, r24	; 0x0b
    314c:	9c 87       	std	Y+12, r25	; 0x0c
    314e:	ad 87       	std	Y+13, r26	; 0x0d
    3150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	6b 85       	ldd	r22, Y+11	; 0x0b
    3154:	7c 85       	ldd	r23, Y+12	; 0x0c
    3156:	8d 85       	ldd	r24, Y+13	; 0x0d
    3158:	9e 85       	ldd	r25, Y+14	; 0x0e
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a e7       	ldi	r20, 0x7A	; 122
    3160:	55 e4       	ldi	r21, 0x45	; 69
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	8f 83       	std	Y+7, r24	; 0x07
    316c:	98 87       	std	Y+8, r25	; 0x08
    316e:	a9 87       	std	Y+9, r26	; 0x09
    3170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3172:	6f 81       	ldd	r22, Y+7	; 0x07
    3174:	78 85       	ldd	r23, Y+8	; 0x08
    3176:	89 85       	ldd	r24, Y+9	; 0x09
    3178:	9a 85       	ldd	r25, Y+10	; 0x0a
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	2c f4       	brge	.+10     	; 0x3194 <LCD_init+0x92>
		__ticks = 1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	3f c0       	rjmp	.+126    	; 0x3212 <LCD_init+0x110>
	else if (__tmp > 65535)
    3194:	6f 81       	ldd	r22, Y+7	; 0x07
    3196:	78 85       	ldd	r23, Y+8	; 0x08
    3198:	89 85       	ldd	r24, Y+9	; 0x09
    319a:	9a 85       	ldd	r25, Y+10	; 0x0a
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	3f ef       	ldi	r19, 0xFF	; 255
    31a0:	4f e7       	ldi	r20, 0x7F	; 127
    31a2:	57 e4       	ldi	r21, 0x47	; 71
    31a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a8:	18 16       	cp	r1, r24
    31aa:	4c f5       	brge	.+82     	; 0x31fe <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9e 83       	std	Y+6, r25	; 0x06
    31d2:	8d 83       	std	Y+5, r24	; 0x05
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <LCD_init+0xf2>
    31d6:	80 e9       	ldi	r24, 0x90	; 144
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	9c 83       	std	Y+4, r25	; 0x04
    31dc:	8b 83       	std	Y+3, r24	; 0x03
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	9c 81       	ldd	r25, Y+4	; 0x04
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <LCD_init+0xe0>
    31e6:	9c 83       	std	Y+4, r25	; 0x04
    31e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	9e 81       	ldd	r25, Y+6	; 0x06
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	9e 81       	ldd	r25, Y+6	; 0x06
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <LCD_init+0xd4>
    31fc:	14 c0       	rjmp	.+40     	; 0x3226 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3200:	78 85       	ldd	r23, Y+8	; 0x08
    3202:	89 85       	ldd	r24, Y+9	; 0x09
    3204:	9a 85       	ldd	r25, Y+10	; 0x0a
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	9e 83       	std	Y+6, r25	; 0x06
    3210:	8d 83       	std	Y+5, r24	; 0x05
    3212:	8d 81       	ldd	r24, Y+5	; 0x05
    3214:	9e 81       	ldd	r25, Y+6	; 0x06
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <LCD_init+0x11c>
    3222:	9a 83       	std	Y+2, r25	; 0x02
    3224:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3226:	88 e3       	ldi	r24, 0x38	; 56
    3228:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    322c:	8c e0       	ldi	r24, 0x0C	; 12
    322e:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
}
    3238:	2e 96       	adiw	r28, 0x0e	; 14
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	00 d0       	rcall	.+0      	; 0x3250 <LCD_GoToXY+0x6>
    3250:	00 d0       	rcall	.+0      	; 0x3252 <LCD_GoToXY+0x8>
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	89 83       	std	Y+1, r24	; 0x01
    3258:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	88 32       	cpi	r24, 0x28	; 40
    325e:	c0 f4       	brcc	.+48     	; 0x3290 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	3c 83       	std	Y+4, r19	; 0x04
    3268:	2b 83       	std	Y+3, r18	; 0x03
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	9c 81       	ldd	r25, Y+4	; 0x04
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	31 f0       	breq	.+12     	; 0x327e <LCD_GoToXY+0x34>
    3272:	2b 81       	ldd	r18, Y+3	; 0x03
    3274:	3c 81       	ldd	r19, Y+4	; 0x04
    3276:	21 30       	cpi	r18, 0x01	; 1
    3278:	31 05       	cpc	r19, r1
    327a:	31 f0       	breq	.+12     	; 0x3288 <LCD_GoToXY+0x3e>
    327c:	09 c0       	rjmp	.+18     	; 0x3290 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    327e:	8a 81       	ldd	r24, Y+2	; 0x02
    3280:	80 58       	subi	r24, 0x80	; 128
    3282:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
    3286:	04 c0       	rjmp	.+8      	; 0x3290 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	80 54       	subi	r24, 0x40	; 64
    328c:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
			break;
		}
	}
}
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	08 95       	ret

0000329e <LCD_displayString>:

void LCD_displayString(const char *str)
{
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <LCD_displayString+0x6>
    32a4:	0f 92       	push	r0
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	9b 83       	std	Y+3, r25	; 0x03
    32ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    32ae:	19 82       	std	Y+1, r1	; 0x01
    32b0:	0e c0       	rjmp	.+28     	; 0x32ce <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ba:	9b 81       	ldd	r25, Y+3	; 0x03
    32bc:	fc 01       	movw	r30, r24
    32be:	e2 0f       	add	r30, r18
    32c0:	f3 1f       	adc	r31, r19
    32c2:	80 81       	ld	r24, Z
    32c4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
		i++;
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	8f 5f       	subi	r24, 0xFF	; 255
    32cc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	28 2f       	mov	r18, r24
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	9b 81       	ldd	r25, Y+3	; 0x03
    32d8:	fc 01       	movw	r30, r24
    32da:	e2 0f       	add	r30, r18
    32dc:	f3 1f       	adc	r31, r19
    32de:	80 81       	ld	r24, Z
    32e0:	88 23       	and	r24, r24
    32e2:	39 f7       	brne	.-50     	; 0x32b2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	28 97       	sbiw	r28, 0x08	; 8
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	8b 83       	std	Y+3, r24	; 0x03
    3306:	6c 83       	std	Y+4, r22	; 0x04
    3308:	5e 83       	std	Y+6, r21	; 0x06
    330a:	4d 83       	std	Y+5, r20	; 0x05
    330c:	38 87       	std	Y+8, r19	; 0x08
    330e:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    3310:	1a 82       	std	Y+2, r1	; 0x02
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    3316:	8b 81       	ldd	r24, Y+3	; 0x03
    3318:	88 23       	and	r24, r24
    331a:	49 f4       	brne	.+18     	; 0x332e <LCD_String_xy+0x3e>
    331c:	8c 81       	ldd	r24, Y+4	; 0x04
    331e:	80 31       	cpi	r24, 0x10	; 16
    3320:	30 f4       	brcc	.+12     	; 0x332e <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    3322:	8c 81       	ldd	r24, Y+4	; 0x04
    3324:	8f 70       	andi	r24, 0x0F	; 15
    3326:	80 68       	ori	r24, 0x80	; 128
    3328:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
    332c:	3a c0       	rjmp	.+116    	; 0x33a2 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    332e:	8b 81       	ldd	r24, Y+3	; 0x03
    3330:	81 30       	cpi	r24, 0x01	; 1
    3332:	b9 f5       	brne	.+110    	; 0x33a2 <LCD_String_xy+0xb2>
    3334:	8c 81       	ldd	r24, Y+4	; 0x04
    3336:	80 31       	cpi	r24, 0x10	; 16
    3338:	a0 f5       	brcc	.+104    	; 0x33a2 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    333a:	8c 81       	ldd	r24, Y+4	; 0x04
    333c:	8f 70       	andi	r24, 0x0F	; 15
    333e:	80 6c       	ori	r24, 0xC0	; 192
    3340:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
    3344:	2e c0       	rjmp	.+92     	; 0x33a2 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	fc 01       	movw	r30, r24
    3352:	e2 0f       	add	r30, r18
    3354:	f3 1f       	adc	r31, r19
    3356:	80 81       	ld	r24, Z
    3358:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
		i++;
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	8f 5f       	subi	r24, 0xFF	; 255
    3360:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	88 23       	and	r24, r24
    3366:	71 f4       	brne	.+28     	; 0x3384 <LCD_String_xy+0x94>
    3368:	8c 81       	ldd	r24, Y+4	; 0x04
    336a:	83 30       	cpi	r24, 0x03	; 3
    336c:	58 f0       	brcs	.+22     	; 0x3384 <LCD_String_xy+0x94>
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	8b 30       	cpi	r24, 0x0B	; 11
    3372:	41 f4       	brne	.+16     	; 0x3384 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
			c++;
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	8f 5f       	subi	r24, 0xFF	; 255
    3380:	89 83       	std	Y+1, r24	; 0x01
    3382:	0b c0       	rjmp	.+22     	; 0x339a <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	81 30       	cpi	r24, 0x01	; 1
    3388:	41 f4       	brne	.+16     	; 0x339a <LCD_String_xy+0xaa>
    338a:	8c 81       	ldd	r24, Y+4	; 0x04
    338c:	83 30       	cpi	r24, 0x03	; 3
    338e:	28 f0       	brcs	.+10     	; 0x339a <LCD_String_xy+0xaa>
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	8b 30       	cpi	r24, 0x0B	; 11
    3394:	11 f4       	brne	.+4      	; 0x339a <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3396:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
		}

		*count = c;
    339a:	ef 81       	ldd	r30, Y+7	; 0x07
    339c:	f8 85       	ldd	r31, Y+8	; 0x08
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	8d 81       	ldd	r24, Y+5	; 0x05
    33aa:	9e 81       	ldd	r25, Y+6	; 0x06
    33ac:	fc 01       	movw	r30, r24
    33ae:	e2 0f       	add	r30, r18
    33b0:	f3 1f       	adc	r31, r19
    33b2:	80 81       	ld	r24, Z
    33b4:	88 23       	and	r24, r24
    33b6:	39 f6       	brne	.-114    	; 0x3346 <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    33b8:	28 96       	adiw	r28, 0x08	; 8
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	2e 97       	sbiw	r28, 0x0e	; 14
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	a0 e0       	ldi	r26, 0x00	; 0
    33ea:	b0 e4       	ldi	r27, 0x40	; 64
    33ec:	8b 87       	std	Y+11, r24	; 0x0b
    33ee:	9c 87       	std	Y+12, r25	; 0x0c
    33f0:	ad 87       	std	Y+13, r26	; 0x0d
    33f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	4a e7       	ldi	r20, 0x7A	; 122
    3402:	55 e4       	ldi	r21, 0x45	; 69
    3404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	8f 83       	std	Y+7, r24	; 0x07
    340e:	98 87       	std	Y+8, r25	; 0x08
    3410:	a9 87       	std	Y+9, r26	; 0x09
    3412:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3414:	6f 81       	ldd	r22, Y+7	; 0x07
    3416:	78 85       	ldd	r23, Y+8	; 0x08
    3418:	89 85       	ldd	r24, Y+9	; 0x09
    341a:	9a 85       	ldd	r25, Y+10	; 0x0a
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e8       	ldi	r20, 0x80	; 128
    3422:	5f e3       	ldi	r21, 0x3F	; 63
    3424:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3428:	88 23       	and	r24, r24
    342a:	2c f4       	brge	.+10     	; 0x3436 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	9e 83       	std	Y+6, r25	; 0x06
    3432:	8d 83       	std	Y+5, r24	; 0x05
    3434:	3f c0       	rjmp	.+126    	; 0x34b4 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3436:	6f 81       	ldd	r22, Y+7	; 0x07
    3438:	78 85       	ldd	r23, Y+8	; 0x08
    343a:	89 85       	ldd	r24, Y+9	; 0x09
    343c:	9a 85       	ldd	r25, Y+10	; 0x0a
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	3f ef       	ldi	r19, 0xFF	; 255
    3442:	4f e7       	ldi	r20, 0x7F	; 127
    3444:	57 e4       	ldi	r21, 0x47	; 71
    3446:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    344a:	18 16       	cp	r1, r24
    344c:	4c f5       	brge	.+82     	; 0x34a0 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3450:	7c 85       	ldd	r23, Y+12	; 0x0c
    3452:	8d 85       	ldd	r24, Y+13	; 0x0d
    3454:	9e 85       	ldd	r25, Y+14	; 0x0e
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	40 e2       	ldi	r20, 0x20	; 32
    345c:	51 e4       	ldi	r21, 0x41	; 65
    345e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	bc 01       	movw	r22, r24
    3468:	cd 01       	movw	r24, r26
    346a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	9e 83       	std	Y+6, r25	; 0x06
    3474:	8d 83       	std	Y+5, r24	; 0x05
    3476:	0f c0       	rjmp	.+30     	; 0x3496 <LCD_ClearScreen+0xcc>
    3478:	80 e9       	ldi	r24, 0x90	; 144
    347a:	91 e0       	ldi	r25, 0x01	; 1
    347c:	9c 83       	std	Y+4, r25	; 0x04
    347e:	8b 83       	std	Y+3, r24	; 0x03
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	9c 81       	ldd	r25, Y+4	; 0x04
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	f1 f7       	brne	.-4      	; 0x3484 <LCD_ClearScreen+0xba>
    3488:	9c 83       	std	Y+4, r25	; 0x04
    348a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348c:	8d 81       	ldd	r24, Y+5	; 0x05
    348e:	9e 81       	ldd	r25, Y+6	; 0x06
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	9e 83       	std	Y+6, r25	; 0x06
    3494:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3496:	8d 81       	ldd	r24, Y+5	; 0x05
    3498:	9e 81       	ldd	r25, Y+6	; 0x06
    349a:	00 97       	sbiw	r24, 0x00	; 0
    349c:	69 f7       	brne	.-38     	; 0x3478 <LCD_ClearScreen+0xae>
    349e:	14 c0       	rjmp	.+40     	; 0x34c8 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a0:	6f 81       	ldd	r22, Y+7	; 0x07
    34a2:	78 85       	ldd	r23, Y+8	; 0x08
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	9e 83       	std	Y+6, r25	; 0x06
    34b2:	8d 83       	std	Y+5, r24	; 0x05
    34b4:	8d 81       	ldd	r24, Y+5	; 0x05
    34b6:	9e 81       	ldd	r25, Y+6	; 0x06
    34b8:	9a 83       	std	Y+2, r25	; 0x02
    34ba:	89 83       	std	Y+1, r24	; 0x01
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	9a 81       	ldd	r25, Y+2	; 0x02
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	f1 f7       	brne	.-4      	; 0x34c0 <LCD_ClearScreen+0xf6>
    34c4:	9a 83       	std	Y+2, r25	; 0x02
    34c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    34c8:	2e 96       	adiw	r28, 0x0e	; 14
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	08 95       	ret

000034da <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    34da:	df 93       	push	r29
    34dc:	cf 93       	push	r28
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	2e 97       	sbiw	r28, 0x0e	; 14
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    34ee:	88 e1       	ldi	r24, 0x18	; 24
    34f0:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	a0 ea       	ldi	r26, 0xA0	; 160
    34fa:	b1 e4       	ldi	r27, 0x41	; 65
    34fc:	8b 87       	std	Y+11, r24	; 0x0b
    34fe:	9c 87       	std	Y+12, r25	; 0x0c
    3500:	ad 87       	std	Y+13, r26	; 0x0d
    3502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	6b 85       	ldd	r22, Y+11	; 0x0b
    3506:	7c 85       	ldd	r23, Y+12	; 0x0c
    3508:	8d 85       	ldd	r24, Y+13	; 0x0d
    350a:	9e 85       	ldd	r25, Y+14	; 0x0e
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	4a e7       	ldi	r20, 0x7A	; 122
    3512:	55 e4       	ldi	r21, 0x45	; 69
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	8f 83       	std	Y+7, r24	; 0x07
    351e:	98 87       	std	Y+8, r25	; 0x08
    3520:	a9 87       	std	Y+9, r26	; 0x09
    3522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3524:	6f 81       	ldd	r22, Y+7	; 0x07
    3526:	78 85       	ldd	r23, Y+8	; 0x08
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	9a 85       	ldd	r25, Y+10	; 0x0a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3538:	88 23       	and	r24, r24
    353a:	2c f4       	brge	.+10     	; 0x3546 <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	3f c0       	rjmp	.+126    	; 0x35c4 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	78 85       	ldd	r23, Y+8	; 0x08
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	9a 85       	ldd	r25, Y+10	; 0x0a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	3f ef       	ldi	r19, 0xFF	; 255
    3552:	4f e7       	ldi	r20, 0x7F	; 127
    3554:	57 e4       	ldi	r21, 0x47	; 71
    3556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    355a:	18 16       	cp	r1, r24
    355c:	4c f5       	brge	.+82     	; 0x35b0 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3560:	7c 85       	ldd	r23, Y+12	; 0x0c
    3562:	8d 85       	ldd	r24, Y+13	; 0x0d
    3564:	9e 85       	ldd	r25, Y+14	; 0x0e
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9e 83       	std	Y+6, r25	; 0x06
    3584:	8d 83       	std	Y+5, r24	; 0x05
    3586:	0f c0       	rjmp	.+30     	; 0x35a6 <LCD_ShiftingLeft+0xcc>
    3588:	80 e9       	ldi	r24, 0x90	; 144
    358a:	91 e0       	ldi	r25, 0x01	; 1
    358c:	9c 83       	std	Y+4, r25	; 0x04
    358e:	8b 83       	std	Y+3, r24	; 0x03
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <LCD_ShiftingLeft+0xba>
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	69 f7       	brne	.-38     	; 0x3588 <LCD_ShiftingLeft+0xae>
    35ae:	14 c0       	rjmp	.+40     	; 0x35d8 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b0:	6f 81       	ldd	r22, Y+7	; 0x07
    35b2:	78 85       	ldd	r23, Y+8	; 0x08
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	9e 81       	ldd	r25, Y+6	; 0x06
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <LCD_ShiftingLeft+0xf6>
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    35d8:	2e 96       	adiw	r28, 0x0e	; 14
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	2e 97       	sbiw	r28, 0x0e	; 14
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    35fe:	8c e1       	ldi	r24, 0x1C	; 28
    3600:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	a0 ea       	ldi	r26, 0xA0	; 160
    360a:	b1 e4       	ldi	r27, 0x41	; 65
    360c:	8b 87       	std	Y+11, r24	; 0x0b
    360e:	9c 87       	std	Y+12, r25	; 0x0c
    3610:	ad 87       	std	Y+13, r26	; 0x0d
    3612:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3614:	6b 85       	ldd	r22, Y+11	; 0x0b
    3616:	7c 85       	ldd	r23, Y+12	; 0x0c
    3618:	8d 85       	ldd	r24, Y+13	; 0x0d
    361a:	9e 85       	ldd	r25, Y+14	; 0x0e
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	4a e7       	ldi	r20, 0x7A	; 122
    3622:	55 e4       	ldi	r21, 0x45	; 69
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	8f 83       	std	Y+7, r24	; 0x07
    362e:	98 87       	std	Y+8, r25	; 0x08
    3630:	a9 87       	std	Y+9, r26	; 0x09
    3632:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3634:	6f 81       	ldd	r22, Y+7	; 0x07
    3636:	78 85       	ldd	r23, Y+8	; 0x08
    3638:	89 85       	ldd	r24, Y+9	; 0x09
    363a:	9a 85       	ldd	r25, Y+10	; 0x0a
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e8       	ldi	r20, 0x80	; 128
    3642:	5f e3       	ldi	r21, 0x3F	; 63
    3644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3648:	88 23       	and	r24, r24
    364a:	2c f4       	brge	.+10     	; 0x3656 <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	9e 83       	std	Y+6, r25	; 0x06
    3652:	8d 83       	std	Y+5, r24	; 0x05
    3654:	3f c0       	rjmp	.+126    	; 0x36d4 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3656:	6f 81       	ldd	r22, Y+7	; 0x07
    3658:	78 85       	ldd	r23, Y+8	; 0x08
    365a:	89 85       	ldd	r24, Y+9	; 0x09
    365c:	9a 85       	ldd	r25, Y+10	; 0x0a
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	3f ef       	ldi	r19, 0xFF	; 255
    3662:	4f e7       	ldi	r20, 0x7F	; 127
    3664:	57 e4       	ldi	r21, 0x47	; 71
    3666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    366a:	18 16       	cp	r1, r24
    366c:	4c f5       	brge	.+82     	; 0x36c0 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3670:	7c 85       	ldd	r23, Y+12	; 0x0c
    3672:	8d 85       	ldd	r24, Y+13	; 0x0d
    3674:	9e 85       	ldd	r25, Y+14	; 0x0e
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	40 e2       	ldi	r20, 0x20	; 32
    367c:	51 e4       	ldi	r21, 0x41	; 65
    367e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	bc 01       	movw	r22, r24
    3688:	cd 01       	movw	r24, r26
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	9e 83       	std	Y+6, r25	; 0x06
    3694:	8d 83       	std	Y+5, r24	; 0x05
    3696:	0f c0       	rjmp	.+30     	; 0x36b6 <LCD_ShiftingRight+0xcc>
    3698:	80 e9       	ldi	r24, 0x90	; 144
    369a:	91 e0       	ldi	r25, 0x01	; 1
    369c:	9c 83       	std	Y+4, r25	; 0x04
    369e:	8b 83       	std	Y+3, r24	; 0x03
    36a0:	8b 81       	ldd	r24, Y+3	; 0x03
    36a2:	9c 81       	ldd	r25, Y+4	; 0x04
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <LCD_ShiftingRight+0xba>
    36a8:	9c 83       	std	Y+4, r25	; 0x04
    36aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
    36ae:	9e 81       	ldd	r25, Y+6	; 0x06
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b6:	8d 81       	ldd	r24, Y+5	; 0x05
    36b8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	69 f7       	brne	.-38     	; 0x3698 <LCD_ShiftingRight+0xae>
    36be:	14 c0       	rjmp	.+40     	; 0x36e8 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c0:	6f 81       	ldd	r22, Y+7	; 0x07
    36c2:	78 85       	ldd	r23, Y+8	; 0x08
    36c4:	89 85       	ldd	r24, Y+9	; 0x09
    36c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	9e 83       	std	Y+6, r25	; 0x06
    36d2:	8d 83       	std	Y+5, r24	; 0x05
    36d4:	8d 81       	ldd	r24, Y+5	; 0x05
    36d6:	9e 81       	ldd	r25, Y+6	; 0x06
    36d8:	9a 83       	std	Y+2, r25	; 0x02
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <LCD_ShiftingRight+0xf6>
    36e4:	9a 83       	std	Y+2, r25	; 0x02
    36e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    36e8:	2e 96       	adiw	r28, 0x0e	; 14
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    36fa:	0f 93       	push	r16
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
    3704:	28 97       	sbiw	r28, 0x08	; 8
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	8b 83       	std	Y+3, r24	; 0x03
    3712:	7d 83       	std	Y+5, r23	; 0x05
    3714:	6c 83       	std	Y+4, r22	; 0x04
    3716:	4e 83       	std	Y+6, r20	; 0x06
    3718:	2f 83       	std	Y+7, r18	; 0x07
    371a:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    371c:	88 85       	ldd	r24, Y+8	; 0x08
    371e:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3722:	1a 82       	std	Y+2, r1	; 0x02
    3724:	19 82       	std	Y+1, r1	; 0x01
    3726:	0f c0       	rjmp	.+30     	; 0x3746 <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3728:	29 81       	ldd	r18, Y+1	; 0x01
    372a:	3a 81       	ldd	r19, Y+2	; 0x02
    372c:	8c 81       	ldd	r24, Y+4	; 0x04
    372e:	9d 81       	ldd	r25, Y+5	; 0x05
    3730:	fc 01       	movw	r30, r24
    3732:	e2 0f       	add	r30, r18
    3734:	f3 1f       	adc	r31, r19
    3736:	80 81       	ld	r24, Z
    3738:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	9a 81       	ldd	r25, Y+2	; 0x02
    374a:	88 30       	cpi	r24, 0x08	; 8
    374c:	91 05       	cpc	r25, r1
    374e:	64 f3       	brlt	.-40     	; 0x3728 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3750:	8e 81       	ldd	r24, Y+6	; 0x06
    3752:	6f 81       	ldd	r22, Y+7	; 0x07
    3754:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    375e:	8f 81       	ldd	r24, Y+7	; 0x07
    3760:	80 31       	cpi	r24, 0x10	; 16
    3762:	48 f0       	brcs	.+18     	; 0x3776 <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3764:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3770:	8b 81       	ldd	r24, Y+3	; 0x03
    3772:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
	}
}
    3776:	28 96       	adiw	r28, 0x08	; 8
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	de bf       	out	0x3e, r29	; 62
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	cd bf       	out	0x3d, r28	; 61
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	0f 91       	pop	r16
    3788:	08 95       	ret

0000378a <Keypad_GetPressedKey>:
#include "Keypad.h";

u8 Keypad_GetPressedKey(){
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	00 d0       	rcall	.+0      	; 0x3790 <Keypad_GetPressedKey+0x6>
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    3794:	1a 82       	std	Y+2, r1	; 0x02
    3796:	4d c0       	rjmp	.+154    	; 0x3832 <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    3798:	ea e3       	ldi	r30, 0x3A	; 58
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	28 2f       	mov	r18, r24
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	80 e1       	ldi	r24, 0x10	; 16
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <Keypad_GetPressedKey+0x22>
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	2a 95       	dec	r18
    37ae:	e2 f7       	brpl	.-8      	; 0x37a8 <Keypad_GetPressedKey+0x1e>
    37b0:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    37b2:	eb e3       	ldi	r30, 0x3B	; 59
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	28 2f       	mov	r18, r24
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	80 e1       	ldi	r24, 0x10	; 16
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	02 2e       	mov	r0, r18
    37c2:	02 c0       	rjmp	.+4      	; 0x37c8 <Keypad_GetPressedKey+0x3e>
    37c4:	88 0f       	add	r24, r24
    37c6:	99 1f       	adc	r25, r25
    37c8:	0a 94       	dec	r0
    37ca:	e2 f7       	brpl	.-8      	; 0x37c4 <Keypad_GetPressedKey+0x3a>
    37cc:	80 95       	com	r24
    37ce:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    37d0:	19 82       	std	Y+1, r1	; 0x01
    37d2:	29 c0       	rjmp	.+82     	; 0x3826 <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    37d4:	e9 e3       	ldi	r30, 0x39	; 57
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	28 2f       	mov	r18, r24
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	88 2f       	mov	r24, r24
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	a9 01       	movw	r20, r18
    37e6:	02 c0       	rjmp	.+4      	; 0x37ec <Keypad_GetPressedKey+0x62>
    37e8:	55 95       	asr	r21
    37ea:	47 95       	ror	r20
    37ec:	8a 95       	dec	r24
    37ee:	e2 f7       	brpl	.-8      	; 0x37e8 <Keypad_GetPressedKey+0x5e>
    37f0:	ca 01       	movw	r24, r20
    37f2:	81 70       	andi	r24, 0x01	; 1
    37f4:	90 70       	andi	r25, 0x00	; 0
    37f6:	00 97       	sbiw	r24, 0x00	; 0
    37f8:	99 f4       	brne	.+38     	; 0x3820 <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	28 2f       	mov	r18, r24
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	c9 01       	movw	r24, r18
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	82 0f       	add	r24, r18
    3808:	93 1f       	adc	r25, r19
    380a:	98 2f       	mov	r25, r24
    380c:	8a 81       	ldd	r24, Y+2	; 0x02
    380e:	89 0f       	add	r24, r25
    3810:	8f 5f       	subi	r24, 0xFF	; 255
    3812:	0e 94 1e 1c 	call	0x383c	; 0x383c <Keypad_4x3>
				}
			}
		}
	}
}
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	8f 5f       	subi	r24, 0xFF	; 255
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	84 30       	cpi	r24, 0x04	; 4
    382a:	a0 f2       	brcs	.-88     	; 0x37d4 <Keypad_GetPressedKey+0x4a>

u8 Keypad_GetPressedKey(){
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	8f 5f       	subi	r24, 0xFF	; 255
    3830:	8a 83       	std	Y+2, r24	; 0x02
    3832:	8a 81       	ldd	r24, Y+2	; 0x02
    3834:	83 30       	cpi	r24, 0x03	; 3
    3836:	08 f4       	brcc	.+2      	; 0x383a <Keypad_GetPressedKey+0xb0>
    3838:	af cf       	rjmp	.-162    	; 0x3798 <Keypad_GetPressedKey+0xe>
    383a:	ac cf       	rjmp	.-168    	; 0x3794 <Keypad_GetPressedKey+0xa>

0000383c <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	00 d0       	rcall	.+0      	; 0x3842 <Keypad_4x3+0x6>
    3842:	00 d0       	rcall	.+0      	; 0x3844 <Keypad_4x3+0x8>
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	28 2f       	mov	r18, r24
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	3c 83       	std	Y+4, r19	; 0x04
    3852:	2b 83       	std	Y+3, r18	; 0x03
    3854:	8b 81       	ldd	r24, Y+3	; 0x03
    3856:	9c 81       	ldd	r25, Y+4	; 0x04
    3858:	8a 30       	cpi	r24, 0x0A	; 10
    385a:	91 05       	cpc	r25, r1
    385c:	81 f0       	breq	.+32     	; 0x387e <Keypad_4x3+0x42>
    385e:	2b 81       	ldd	r18, Y+3	; 0x03
    3860:	3c 81       	ldd	r19, Y+4	; 0x04
    3862:	2a 30       	cpi	r18, 0x0A	; 10
    3864:	31 05       	cpc	r19, r1
    3866:	9c f0       	brlt	.+38     	; 0x388e <Keypad_4x3+0x52>
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	9c 81       	ldd	r25, Y+4	; 0x04
    386c:	8b 30       	cpi	r24, 0x0B	; 11
    386e:	91 05       	cpc	r25, r1
    3870:	49 f0       	breq	.+18     	; 0x3884 <Keypad_4x3+0x48>
    3872:	2b 81       	ldd	r18, Y+3	; 0x03
    3874:	3c 81       	ldd	r19, Y+4	; 0x04
    3876:	2c 30       	cpi	r18, 0x0C	; 12
    3878:	31 05       	cpc	r19, r1
    387a:	31 f0       	breq	.+12     	; 0x3888 <Keypad_4x3+0x4c>
    387c:	08 c0       	rjmp	.+16     	; 0x388e <Keypad_4x3+0x52>
	case 10:
		return '*';
    387e:	3a e2       	ldi	r19, 0x2A	; 42
    3880:	3a 83       	std	Y+2, r19	; 0x02
    3882:	07 c0       	rjmp	.+14     	; 0x3892 <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    3884:	1a 82       	std	Y+2, r1	; 0x02
    3886:	05 c0       	rjmp	.+10     	; 0x3892 <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    3888:	83 e2       	ldi	r24, 0x23	; 35
    388a:	8a 83       	std	Y+2, r24	; 0x02
    388c:	02 c0       	rjmp	.+4      	; 0x3892 <Keypad_4x3+0x56>
	default:
		return Num;
    388e:	99 81       	ldd	r25, Y+1	; 0x01
    3890:	9a 83       	std	Y+2, r25	; 0x02
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	00 d0       	rcall	.+0      	; 0x38a8 <DC_Motor_Init+0x6>
    38a8:	0f 92       	push	r0
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	8a 83       	std	Y+2, r24	; 0x02
    38b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    38b6:	8a 81       	ldd	r24, Y+2	; 0x02
    38b8:	81 30       	cpi	r24, 0x01	; 1
    38ba:	81 f4       	brne	.+32     	; 0x38dc <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	63 e0       	ldi	r22, 0x03	; 3
    38c0:	41 e0       	ldi	r20, 0x01	; 1
    38c2:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	65 e0       	ldi	r22, 0x05	; 5
    38ca:	41 e0       	ldi	r20, 0x01	; 1
    38cc:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	64 e0       	ldi	r22, 0x04	; 4
    38d4:	41 e0       	ldi	r20, 0x01	; 1
    38d6:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
    38da:	14 c0       	rjmp	.+40     	; 0x3904 <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    38dc:	8b 81       	ldd	r24, Y+3	; 0x03
    38de:	81 30       	cpi	r24, 0x01	; 1
    38e0:	81 f4       	brne	.+32     	; 0x3902 <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	62 e0       	ldi	r22, 0x02	; 2
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	61 e0       	ldi	r22, 0x01	; 1
    38f0:	41 e0       	ldi	r20, 0x01	; 1
    38f2:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	41 e0       	ldi	r20, 0x01	; 1
    38fc:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
    3900:	01 c0       	rjmp	.+2      	; 0x3904 <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3902:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3904:	89 81       	ldd	r24, Y+1	; 0x01
}
    3906:	0f 90       	pop	r0
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	cf 91       	pop	r28
    390e:	df 91       	pop	r29
    3910:	08 95       	ret

00003912 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    3912:	df 93       	push	r29
    3914:	cf 93       	push	r28
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	29 97       	sbiw	r28, 0x09	; 9
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	de bf       	out	0x3e, r29	; 62
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	cd bf       	out	0x3d, r28	; 61
    3926:	8a 83       	std	Y+2, r24	; 0x02
    3928:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    392e:	8a 81       	ldd	r24, Y+2	; 0x02
    3930:	28 2f       	mov	r18, r24
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	39 87       	std	Y+9, r19	; 0x09
    3936:	28 87       	std	Y+8, r18	; 0x08
    3938:	88 85       	ldd	r24, Y+8	; 0x08
    393a:	99 85       	ldd	r25, Y+9	; 0x09
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	31 f0       	breq	.+12     	; 0x394c <DC_Motor_Rotate+0x3a>
    3940:	28 85       	ldd	r18, Y+8	; 0x08
    3942:	39 85       	ldd	r19, Y+9	; 0x09
    3944:	21 30       	cpi	r18, 0x01	; 1
    3946:	31 05       	cpc	r19, r1
    3948:	89 f1       	breq	.+98     	; 0x39ac <DC_Motor_Rotate+0x9a>
    394a:	60 c0       	rjmp	.+192    	; 0x3a0c <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    394c:	8b 81       	ldd	r24, Y+3	; 0x03
    394e:	28 2f       	mov	r18, r24
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	3f 83       	std	Y+7, r19	; 0x07
    3954:	2e 83       	std	Y+6, r18	; 0x06
    3956:	8e 81       	ldd	r24, Y+6	; 0x06
    3958:	9f 81       	ldd	r25, Y+7	; 0x07
    395a:	00 97       	sbiw	r24, 0x00	; 0
    395c:	a9 f0       	breq	.+42     	; 0x3988 <DC_Motor_Rotate+0x76>
    395e:	2e 81       	ldd	r18, Y+6	; 0x06
    3960:	3f 81       	ldd	r19, Y+7	; 0x07
    3962:	21 30       	cpi	r18, 0x01	; 1
    3964:	31 05       	cpc	r19, r1
    3966:	01 f5       	brne	.+64     	; 0x39a8 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	63 e0       	ldi	r22, 0x03	; 3
    396c:	41 e0       	ldi	r20, 0x01	; 1
    396e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	65 e0       	ldi	r22, 0x05	; 5
    3976:	41 e0       	ldi	r20, 0x01	; 1
    3978:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	64 e0       	ldi	r22, 0x04	; 4
    3980:	40 e0       	ldi	r20, 0x00	; 0
    3982:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3986:	43 c0       	rjmp	.+134    	; 0x3a0e <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	63 e0       	ldi	r22, 0x03	; 3
    398c:	41 e0       	ldi	r20, 0x01	; 1
    398e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	65 e0       	ldi	r22, 0x05	; 5
    3996:	40 e0       	ldi	r20, 0x00	; 0
    3998:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	64 e0       	ldi	r22, 0x04	; 4
    39a0:	41 e0       	ldi	r20, 0x01	; 1
    39a2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    39a6:	33 c0       	rjmp	.+102    	; 0x3a0e <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    39a8:	19 82       	std	Y+1, r1	; 0x01
    39aa:	31 c0       	rjmp	.+98     	; 0x3a0e <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    39ac:	8b 81       	ldd	r24, Y+3	; 0x03
    39ae:	28 2f       	mov	r18, r24
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	3d 83       	std	Y+5, r19	; 0x05
    39b4:	2c 83       	std	Y+4, r18	; 0x04
    39b6:	8c 81       	ldd	r24, Y+4	; 0x04
    39b8:	9d 81       	ldd	r25, Y+5	; 0x05
    39ba:	00 97       	sbiw	r24, 0x00	; 0
    39bc:	a9 f0       	breq	.+42     	; 0x39e8 <DC_Motor_Rotate+0xd6>
    39be:	2c 81       	ldd	r18, Y+4	; 0x04
    39c0:	3d 81       	ldd	r19, Y+5	; 0x05
    39c2:	21 30       	cpi	r18, 0x01	; 1
    39c4:	31 05       	cpc	r19, r1
    39c6:	01 f5       	brne	.+64     	; 0x3a08 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	62 e0       	ldi	r22, 0x02	; 2
    39cc:	41 e0       	ldi	r20, 0x01	; 1
    39ce:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	41 e0       	ldi	r20, 0x01	; 1
    39d8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	60 e0       	ldi	r22, 0x00	; 0
    39e0:	40 e0       	ldi	r20, 0x00	; 0
    39e2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    39e6:	13 c0       	rjmp	.+38     	; 0x3a0e <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	62 e0       	ldi	r22, 0x02	; 2
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	61 e0       	ldi	r22, 0x01	; 1
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	41 e0       	ldi	r20, 0x01	; 1
    3a02:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3a06:	03 c0       	rjmp	.+6      	; 0x3a0e <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    3a08:	19 82       	std	Y+1, r1	; 0x01
    3a0a:	01 c0       	rjmp	.+2      	; 0x3a0e <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    3a0c:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a10:	29 96       	adiw	r28, 0x09	; 9
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <DC_Motor_Stop+0x6>
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    3a32:	8a 81       	ldd	r24, Y+2	; 0x02
    3a34:	88 23       	and	r24, r24
    3a36:	31 f4       	brne	.+12     	; 0x3a44 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	63 e0       	ldi	r22, 0x03	; 3
    3a3c:	40 e0       	ldi	r20, 0x00	; 0
    3a3e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3a42:	0a c0       	rjmp	.+20     	; 0x3a58 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	81 30       	cpi	r24, 0x01	; 1
    3a48:	31 f4       	brne	.+12     	; 0x3a56 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	62 e0       	ldi	r22, 0x02	; 2
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3a54:	01 c0       	rjmp	.+2      	; 0x3a58 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3a56:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3a58:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	08 95       	ret

00003a64 <First_Screen>:
#define F_CPU 16000000UL

#define Password_Length	6
u8 Local_u8_Flag = 0;

void First_Screen(){
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	2e 97       	sbiw	r28, 0x0e	; 14
    3a6e:	0f b6       	in	r0, 0x3f	; 63
    3a70:	f8 94       	cli
    3a72:	de bf       	out	0x3e, r29	; 62
    3a74:	0f be       	out	0x3f, r0	; 63
    3a76:	cd bf       	out	0x3d, r28	; 61
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	ac e0       	ldi	r26, 0x0C	; 12
    3a7e:	b2 e4       	ldi	r27, 0x42	; 66
    3a80:	8b 87       	std	Y+11, r24	; 0x0b
    3a82:	9c 87       	std	Y+12, r25	; 0x0c
    3a84:	ad 87       	std	Y+13, r26	; 0x0d
    3a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	4a e7       	ldi	r20, 0x7A	; 122
    3a96:	55 e4       	ldi	r21, 0x45	; 69
    3a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	8f 83       	std	Y+7, r24	; 0x07
    3aa2:	98 87       	std	Y+8, r25	; 0x08
    3aa4:	a9 87       	std	Y+9, r26	; 0x09
    3aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aaa:	78 85       	ldd	r23, Y+8	; 0x08
    3aac:	89 85       	ldd	r24, Y+9	; 0x09
    3aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e8       	ldi	r20, 0x80	; 128
    3ab6:	5f e3       	ldi	r21, 0x3F	; 63
    3ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3abc:	88 23       	and	r24, r24
    3abe:	2c f4       	brge	.+10     	; 0x3aca <First_Screen+0x66>
		__ticks = 1;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
    3ac8:	3f c0       	rjmp	.+126    	; 0x3b48 <First_Screen+0xe4>
	else if (__tmp > 65535)
    3aca:	6f 81       	ldd	r22, Y+7	; 0x07
    3acc:	78 85       	ldd	r23, Y+8	; 0x08
    3ace:	89 85       	ldd	r24, Y+9	; 0x09
    3ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	3f ef       	ldi	r19, 0xFF	; 255
    3ad6:	4f e7       	ldi	r20, 0x7F	; 127
    3ad8:	57 e4       	ldi	r21, 0x47	; 71
    3ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ade:	18 16       	cp	r1, r24
    3ae0:	4c f5       	brge	.+82     	; 0x3b34 <First_Screen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e2       	ldi	r20, 0x20	; 32
    3af0:	51 e4       	ldi	r21, 0x41	; 65
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	9e 83       	std	Y+6, r25	; 0x06
    3b08:	8d 83       	std	Y+5, r24	; 0x05
    3b0a:	0f c0       	rjmp	.+30     	; 0x3b2a <First_Screen+0xc6>
    3b0c:	80 e9       	ldi	r24, 0x90	; 144
    3b0e:	91 e0       	ldi	r25, 0x01	; 1
    3b10:	9c 83       	std	Y+4, r25	; 0x04
    3b12:	8b 83       	std	Y+3, r24	; 0x03
    3b14:	8b 81       	ldd	r24, Y+3	; 0x03
    3b16:	9c 81       	ldd	r25, Y+4	; 0x04
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <First_Screen+0xb4>
    3b1c:	9c 83       	std	Y+4, r25	; 0x04
    3b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b20:	8d 81       	ldd	r24, Y+5	; 0x05
    3b22:	9e 81       	ldd	r25, Y+6	; 0x06
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	9e 83       	std	Y+6, r25	; 0x06
    3b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	69 f7       	brne	.-38     	; 0x3b0c <First_Screen+0xa8>
    3b32:	14 c0       	rjmp	.+40     	; 0x3b5c <First_Screen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b34:	6f 81       	ldd	r22, Y+7	; 0x07
    3b36:	78 85       	ldd	r23, Y+8	; 0x08
    3b38:	89 85       	ldd	r24, Y+9	; 0x09
    3b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	9e 83       	std	Y+6, r25	; 0x06
    3b46:	8d 83       	std	Y+5, r24	; 0x05
    3b48:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4c:	9a 83       	std	Y+2, r25	; 0x02
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	9a 81       	ldd	r25, Y+2	; 0x02
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <First_Screen+0xf0>
    3b58:	9a 83       	std	Y+2, r25	; 0x02
    3b5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_ClearScreen();
    3b5c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
	LCD_displayString("1-DC Motor");
    3b60:	80 e6       	ldi	r24, 0x60	; 96
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
	LCD_GoToXY(1, 0);
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
	LCD_displayString("2-Stepper");
    3b70:	8b e6       	ldi	r24, 0x6B	; 107
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
	LCD_GoToXY(1, 10);
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	6a e0       	ldi	r22, 0x0A	; 10
    3b7c:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
	LCD_displayString("3-Exit");
    3b80:	85 e7       	ldi	r24, 0x75	; 117
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
}
    3b88:	2e 96       	adiw	r28, 0x0e	; 14
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	f8 94       	cli
    3b8e:	de bf       	out	0x3e, r29	; 62
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	cd bf       	out	0x3d, r28	; 61
    3b94:	cf 91       	pop	r28
    3b96:	df 91       	pop	r29
    3b98:	08 95       	ret

00003b9a <Second_Screen>:

void Second_Screen(){
    3b9a:	df 93       	push	r29
    3b9c:	cf 93       	push	r28
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    3ba2:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
	LCD_displayString("1-CW Motor");
    3ba6:	8c e7       	ldi	r24, 0x7C	; 124
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
	LCD_GoToXY(1, 0);
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	60 e0       	ldi	r22, 0x00	; 0
    3bb2:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
	LCD_displayString("2-CCW Motor");
    3bb6:	87 e8       	ldi	r24, 0x87	; 135
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
	LCD_GoToXY(0, 10);
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	6a e0       	ldi	r22, 0x0A	; 10
    3bc2:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
	LCD_displayString("3-back");
    3bc6:	83 e9       	ldi	r24, 0x93	; 147
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
}
    3bce:	cf 91       	pop	r28
    3bd0:	df 91       	pop	r29
    3bd2:	08 95       	ret

00003bd4 <StepperAngles_Screen>:

void StepperAngles_Screen(){
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    3bdc:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>

	LCD_displayString("1-90");
    3be0:	8a e9       	ldi	r24, 0x9A	; 154
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>

	LCD_GoToXY(1, 0);
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
	LCD_displayString("2-180");
    3bf0:	8f e9       	ldi	r24, 0x9F	; 159
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
}
    3bf8:	cf 91       	pop	r28
    3bfa:	df 91       	pop	r29
    3bfc:	08 95       	ret

00003bfe <StepperDirection_Screen>:

void StepperDirection_Screen(){
    3bfe:	df 93       	push	r29
    3c00:	cf 93       	push	r28
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    3c06:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>

	LCD_displayString("1-CW");
    3c0a:	85 ea       	ldi	r24, 0xA5	; 165
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>

	LCD_GoToXY(1, 0);
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	60 e0       	ldi	r22, 0x00	; 0
    3c16:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
	LCD_displayString("2-CCW");
    3c1a:	8a ea       	ldi	r24, 0xAA	; 170
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
}
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	08 95       	ret

00003c28 <main>:


void Tog_Led(void);
void EXTI_System(void);

int main(){
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62

	DC_Motor_Init(1, 2);
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	62 e0       	ldi	r22, 0x02	; 2
    3c34:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <DC_Motor_Init>
	Stepper_Init();
    3c38:	0e 94 c6 13 	call	0x278c	; 0x278c <Stepper_Init>


	LCD_setPortDirection(0, 0);
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	60 e0       	ldi	r22, 0x00	; 0
    3c42:	70 e0       	ldi	r23, 0x00	; 0
    3c44:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_setPortDirection>
	DIO_u8SetPinDirection(1, 2, 0);
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	62 e0       	ldi	r22, 0x02	; 2
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(1, 1);
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	61 e0       	ldi	r22, 0x01	; 1
    3c56:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <DIO_u8SetPortDirection>
	LCD_setPortDirection(2, 1);
    3c5a:	82 e0       	ldi	r24, 0x02	; 2
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	61 e0       	ldi	r22, 0x01	; 1
    3c60:	70 e0       	ldi	r23, 0x00	; 0
    3c62:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_setPortDirection>
	LCD_setPortDirection(3, 1);
    3c66:	83 e0       	ldi	r24, 0x03	; 3
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	61 e0       	ldi	r22, 0x01	; 1
    3c6c:	70 e0       	ldi	r23, 0x00	; 0
    3c6e:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_setPortDirection>
	DIO_u8SetPinDirection(3, 3, 0);
    3c72:	83 e0       	ldi	r24, 0x03	; 3
    3c74:	63 e0       	ldi	r22, 0x03	; 3
    3c76:	40 e0       	ldi	r20, 0x00	; 0
    3c78:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	LCD_init();
    3c7c:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_init>


	EXTI_voidEnable(1, 2);
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	62 e0       	ldi	r22, 0x02	; 2
    3c84:	0e 94 87 0a 	call	0x150e	; 0x150e <EXTI_voidEnable>
	EXTI_voidEnable_GIE();
    3c88:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <EXTI_voidEnable_GIE>

	setCallBack(&EXTI_System, 1);
    3c8c:	8d e6       	ldi	r24, 0x6D	; 109
    3c8e:	9e e1       	ldi	r25, 0x1E	; 30
    3c90:	61 e0       	ldi	r22, 0x01	; 1
    3c92:	0e 94 88 09 	call	0x1310	; 0x1310 <setCallBack>
    3c96:	ff cf       	rjmp	.-2      	; 0x3c96 <main+0x6e>

00003c98 <Tog_Led>:
	while(1);
	return 0;
}


void Tog_Led(void){
    3c98:	df 93       	push	r29
    3c9a:	cf 93       	push	r28
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8_Flag = 0;
	if(Local_u8_Flag == 1){
    3ca0:	80 91 18 01 	lds	r24, 0x0118
    3ca4:	81 30       	cpi	r24, 0x01	; 1
    3ca6:	59 f4       	brne	.+22     	; 0x3cbe <Tog_Led+0x26>
		LCD_setPinValue(0, 0, 1);
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	60 e0       	ldi	r22, 0x00	; 0
    3cae:	70 e0       	ldi	r23, 0x00	; 0
    3cb0:	41 e0       	ldi	r20, 0x01	; 1
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
		Local_u8_Flag = 0;
    3cb8:	10 92 18 01 	sts	0x0118, r1
    3cbc:	0b c0       	rjmp	.+22     	; 0x3cd4 <Tog_Led+0x3c>
	}
	else{
		LCD_setPinValue(0, 0, 0);
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	60 e0       	ldi	r22, 0x00	; 0
    3cc4:	70 e0       	ldi	r23, 0x00	; 0
    3cc6:	40 e0       	ldi	r20, 0x00	; 0
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
		Local_u8_Flag = 1;
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	80 93 18 01 	sts	0x0118, r24
	}
}
    3cd4:	cf 91       	pop	r28
    3cd6:	df 91       	pop	r29
    3cd8:	08 95       	ret

00003cda <EXTI_System>:


void EXTI_System(void){
    3cda:	0f 93       	push	r16
    3cdc:	1f 93       	push	r17
    3cde:	df 93       	push	r29
    3ce0:	cf 93       	push	r28
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	c6 50       	subi	r28, 0x06	; 6
    3ce8:	d1 40       	sbci	r29, 0x01	; 1
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	f8 94       	cli
    3cee:	de bf       	out	0x3e, r29	; 62
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	cd bf       	out	0x3d, r28	; 61
	u8 key_Pressed;

	if(Local_u8_Flag == 0){
    3cf4:	80 91 16 01 	lds	r24, 0x0116
    3cf8:	88 23       	and	r24, r24
    3cfa:	11 f0       	breq	.+4      	; 0x3d00 <EXTI_System+0x26>
    3cfc:	0c 94 63 2c 	jmp	0x58c6	; 0x58c6 <EXTI_System+0x1bec>
		Local_u8_Flag = 1;
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	80 93 16 01 	sts	0x0116, r24
		LCD_String_xy(0, 0, "Enter Password", &count);
    3d06:	20 eb       	ldi	r18, 0xB0	; 176
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	e3 e2       	ldi	r30, 0x23	; 35
    3d0c:	f1 e0       	ldi	r31, 0x01	; 1
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	a9 01       	movw	r20, r18
    3d14:	9f 01       	movw	r18, r30
    3d16:	0e 94 78 19 	call	0x32f0	; 0x32f0 <LCD_String_xy>
		LCD_GoToXY(1, 0);
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>

		while(1){
			key_Pressed = Keypad_GetPressedKey();
    3d22:	0e 94 c5 1b 	call	0x378a	; 0x378a <Keypad_GetPressedKey>
    3d26:	fe 01       	movw	r30, r28
    3d28:	ea 5f       	subi	r30, 0xFA	; 250
    3d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d2c:	80 83       	st	Z, r24

			if(key_Pressed == 1){
    3d2e:	fe 01       	movw	r30, r28
    3d30:	ea 5f       	subi	r30, 0xFA	; 250
    3d32:	fe 4f       	sbci	r31, 0xFE	; 254
    3d34:	80 81       	ld	r24, Z
    3d36:	81 30       	cpi	r24, 0x01	; 1
    3d38:	09 f0       	breq	.+2      	; 0x3d3c <EXTI_System+0x62>
    3d3a:	c5 c0       	rjmp	.+394    	; 0x3ec6 <EXTI_System+0x1ec>
				LCD_displayCharacter('*');
    3d3c:	8a e2       	ldi	r24, 0x2A	; 42
    3d3e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '1';
    3d42:	80 91 17 01 	lds	r24, 0x0117
    3d46:	88 2f       	mov	r24, r24
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	e7 5e       	subi	r30, 0xE7	; 231
    3d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d50:	81 e3       	ldi	r24, 0x31	; 49
    3d52:	80 83       	st	Z, r24
				c++;
    3d54:	80 91 17 01 	lds	r24, 0x0117
    3d58:	8f 5f       	subi	r24, 0xFF	; 255
    3d5a:	80 93 17 01 	sts	0x0117, r24
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e7 50       	subi	r30, 0x07	; 7
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	ac e0       	ldi	r26, 0x0C	; 12
    3d6a:	b2 e4       	ldi	r27, 0x42	; 66
    3d6c:	80 83       	st	Z, r24
    3d6e:	91 83       	std	Z+1, r25	; 0x01
    3d70:	a2 83       	std	Z+2, r26	; 0x02
    3d72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d74:	8e 01       	movw	r16, r28
    3d76:	0b 50       	subi	r16, 0x0B	; 11
    3d78:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e7 50       	subi	r30, 0x07	; 7
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	60 81       	ld	r22, Z
    3d82:	71 81       	ldd	r23, Z+1	; 0x01
    3d84:	82 81       	ldd	r24, Z+2	; 0x02
    3d86:	93 81       	ldd	r25, Z+3	; 0x03
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	4a e7       	ldi	r20, 0x7A	; 122
    3d8e:	55 e4       	ldi	r21, 0x45	; 69
    3d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	f8 01       	movw	r30, r16
    3d9a:	80 83       	st	Z, r24
    3d9c:	91 83       	std	Z+1, r25	; 0x01
    3d9e:	a2 83       	std	Z+2, r26	; 0x02
    3da0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3da2:	fe 01       	movw	r30, r28
    3da4:	eb 50       	subi	r30, 0x0B	; 11
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	60 81       	ld	r22, Z
    3daa:	71 81       	ldd	r23, Z+1	; 0x01
    3dac:	82 81       	ldd	r24, Z+2	; 0x02
    3dae:	93 81       	ldd	r25, Z+3	; 0x03
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	40 e8       	ldi	r20, 0x80	; 128
    3db6:	5f e3       	ldi	r21, 0x3F	; 63
    3db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dbc:	88 23       	and	r24, r24
    3dbe:	44 f4       	brge	.+16     	; 0x3dd0 <EXTI_System+0xf6>
		__ticks = 1;
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	ed 50       	subi	r30, 0x0D	; 13
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	80 83       	st	Z, r24
    3dce:	64 c0       	rjmp	.+200    	; 0x3e98 <EXTI_System+0x1be>
	else if (__tmp > 65535)
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	eb 50       	subi	r30, 0x0B	; 11
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	60 81       	ld	r22, Z
    3dd8:	71 81       	ldd	r23, Z+1	; 0x01
    3dda:	82 81       	ldd	r24, Z+2	; 0x02
    3ddc:	93 81       	ldd	r25, Z+3	; 0x03
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	3f ef       	ldi	r19, 0xFF	; 255
    3de2:	4f e7       	ldi	r20, 0x7F	; 127
    3de4:	57 e4       	ldi	r21, 0x47	; 71
    3de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dea:	18 16       	cp	r1, r24
    3dec:	0c f0       	brlt	.+2      	; 0x3df0 <EXTI_System+0x116>
    3dee:	43 c0       	rjmp	.+134    	; 0x3e76 <EXTI_System+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df0:	fe 01       	movw	r30, r28
    3df2:	e7 50       	subi	r30, 0x07	; 7
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	60 81       	ld	r22, Z
    3df8:	71 81       	ldd	r23, Z+1	; 0x01
    3dfa:	82 81       	ldd	r24, Z+2	; 0x02
    3dfc:	93 81       	ldd	r25, Z+3	; 0x03
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	40 e2       	ldi	r20, 0x20	; 32
    3e04:	51 e4       	ldi	r21, 0x41	; 65
    3e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	8e 01       	movw	r16, r28
    3e10:	0d 50       	subi	r16, 0x0D	; 13
    3e12:	1f 4f       	sbci	r17, 0xFF	; 255
    3e14:	bc 01       	movw	r22, r24
    3e16:	cd 01       	movw	r24, r26
    3e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	f8 01       	movw	r30, r16
    3e22:	91 83       	std	Z+1, r25	; 0x01
    3e24:	80 83       	st	Z, r24
    3e26:	1f c0       	rjmp	.+62     	; 0x3e66 <EXTI_System+0x18c>
    3e28:	fe 01       	movw	r30, r28
    3e2a:	ef 50       	subi	r30, 0x0F	; 15
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	80 e9       	ldi	r24, 0x90	; 144
    3e30:	91 e0       	ldi	r25, 0x01	; 1
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	80 83       	st	Z, r24
    3e36:	fe 01       	movw	r30, r28
    3e38:	ef 50       	subi	r30, 0x0F	; 15
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	80 81       	ld	r24, Z
    3e3e:	91 81       	ldd	r25, Z+1	; 0x01
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	f1 f7       	brne	.-4      	; 0x3e40 <EXTI_System+0x166>
    3e44:	fe 01       	movw	r30, r28
    3e46:	ef 50       	subi	r30, 0x0F	; 15
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e4e:	de 01       	movw	r26, r28
    3e50:	ad 50       	subi	r26, 0x0D	; 13
    3e52:	bf 4f       	sbci	r27, 0xFF	; 255
    3e54:	fe 01       	movw	r30, r28
    3e56:	ed 50       	subi	r30, 0x0D	; 13
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	80 81       	ld	r24, Z
    3e5c:	91 81       	ldd	r25, Z+1	; 0x01
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	11 96       	adiw	r26, 0x01	; 1
    3e62:	9c 93       	st	X, r25
    3e64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e66:	fe 01       	movw	r30, r28
    3e68:	ed 50       	subi	r30, 0x0D	; 13
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	d1 f6       	brne	.-76     	; 0x3e28 <EXTI_System+0x14e>
    3e74:	28 c0       	rjmp	.+80     	; 0x3ec6 <EXTI_System+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e76:	8e 01       	movw	r16, r28
    3e78:	0d 50       	subi	r16, 0x0D	; 13
    3e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	eb 50       	subi	r30, 0x0B	; 11
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	f8 01       	movw	r30, r16
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	80 83       	st	Z, r24
    3e98:	de 01       	movw	r26, r28
    3e9a:	a1 51       	subi	r26, 0x11	; 17
    3e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	ed 50       	subi	r30, 0x0D	; 13
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	80 81       	ld	r24, Z
    3ea6:	91 81       	ldd	r25, Z+1	; 0x01
    3ea8:	11 96       	adiw	r26, 0x01	; 1
    3eaa:	9c 93       	st	X, r25
    3eac:	8e 93       	st	-X, r24
    3eae:	fe 01       	movw	r30, r28
    3eb0:	e1 51       	subi	r30, 0x11	; 17
    3eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb4:	80 81       	ld	r24, Z
    3eb6:	91 81       	ldd	r25, Z+1	; 0x01
    3eb8:	01 97       	sbiw	r24, 0x01	; 1
    3eba:	f1 f7       	brne	.-4      	; 0x3eb8 <EXTI_System+0x1de>
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	e1 51       	subi	r30, 0x11	; 17
    3ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec2:	91 83       	std	Z+1, r25	; 0x01
    3ec4:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 2){
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	ea 5f       	subi	r30, 0xFA	; 250
    3eca:	fe 4f       	sbci	r31, 0xFE	; 254
    3ecc:	80 81       	ld	r24, Z
    3ece:	82 30       	cpi	r24, 0x02	; 2
    3ed0:	09 f0       	breq	.+2      	; 0x3ed4 <EXTI_System+0x1fa>
    3ed2:	c5 c0       	rjmp	.+394    	; 0x405e <EXTI_System+0x384>
				LCD_displayCharacter('*');
    3ed4:	8a e2       	ldi	r24, 0x2A	; 42
    3ed6:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '2';
    3eda:	80 91 17 01 	lds	r24, 0x0117
    3ede:	88 2f       	mov	r24, r24
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	e7 5e       	subi	r30, 0xE7	; 231
    3ee6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee8:	82 e3       	ldi	r24, 0x32	; 50
    3eea:	80 83       	st	Z, r24
				c++;
    3eec:	80 91 17 01 	lds	r24, 0x0117
    3ef0:	8f 5f       	subi	r24, 0xFF	; 255
    3ef2:	80 93 17 01 	sts	0x0117, r24
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e5 51       	subi	r30, 0x15	; 21
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	ac e0       	ldi	r26, 0x0C	; 12
    3f02:	b2 e4       	ldi	r27, 0x42	; 66
    3f04:	80 83       	st	Z, r24
    3f06:	91 83       	std	Z+1, r25	; 0x01
    3f08:	a2 83       	std	Z+2, r26	; 0x02
    3f0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0c:	8e 01       	movw	r16, r28
    3f0e:	09 51       	subi	r16, 0x19	; 25
    3f10:	1f 4f       	sbci	r17, 0xFF	; 255
    3f12:	fe 01       	movw	r30, r28
    3f14:	e5 51       	subi	r30, 0x15	; 21
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	60 81       	ld	r22, Z
    3f1a:	71 81       	ldd	r23, Z+1	; 0x01
    3f1c:	82 81       	ldd	r24, Z+2	; 0x02
    3f1e:	93 81       	ldd	r25, Z+3	; 0x03
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	4a e7       	ldi	r20, 0x7A	; 122
    3f26:	55 e4       	ldi	r21, 0x45	; 69
    3f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	f8 01       	movw	r30, r16
    3f32:	80 83       	st	Z, r24
    3f34:	91 83       	std	Z+1, r25	; 0x01
    3f36:	a2 83       	std	Z+2, r26	; 0x02
    3f38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e9 51       	subi	r30, 0x19	; 25
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	60 81       	ld	r22, Z
    3f42:	71 81       	ldd	r23, Z+1	; 0x01
    3f44:	82 81       	ldd	r24, Z+2	; 0x02
    3f46:	93 81       	ldd	r25, Z+3	; 0x03
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e8       	ldi	r20, 0x80	; 128
    3f4e:	5f e3       	ldi	r21, 0x3F	; 63
    3f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f54:	88 23       	and	r24, r24
    3f56:	44 f4       	brge	.+16     	; 0x3f68 <EXTI_System+0x28e>
		__ticks = 1;
    3f58:	fe 01       	movw	r30, r28
    3f5a:	eb 51       	subi	r30, 0x1B	; 27
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	80 83       	st	Z, r24
    3f66:	64 c0       	rjmp	.+200    	; 0x4030 <EXTI_System+0x356>
	else if (__tmp > 65535)
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e9 51       	subi	r30, 0x19	; 25
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	60 81       	ld	r22, Z
    3f70:	71 81       	ldd	r23, Z+1	; 0x01
    3f72:	82 81       	ldd	r24, Z+2	; 0x02
    3f74:	93 81       	ldd	r25, Z+3	; 0x03
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	3f ef       	ldi	r19, 0xFF	; 255
    3f7a:	4f e7       	ldi	r20, 0x7F	; 127
    3f7c:	57 e4       	ldi	r21, 0x47	; 71
    3f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f82:	18 16       	cp	r1, r24
    3f84:	0c f0       	brlt	.+2      	; 0x3f88 <EXTI_System+0x2ae>
    3f86:	43 c0       	rjmp	.+134    	; 0x400e <EXTI_System+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e5 51       	subi	r30, 0x15	; 21
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	60 81       	ld	r22, Z
    3f90:	71 81       	ldd	r23, Z+1	; 0x01
    3f92:	82 81       	ldd	r24, Z+2	; 0x02
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e2       	ldi	r20, 0x20	; 32
    3f9c:	51 e4       	ldi	r21, 0x41	; 65
    3f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	8e 01       	movw	r16, r28
    3fa8:	0b 51       	subi	r16, 0x1B	; 27
    3faa:	1f 4f       	sbci	r17, 0xFF	; 255
    3fac:	bc 01       	movw	r22, r24
    3fae:	cd 01       	movw	r24, r26
    3fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	f8 01       	movw	r30, r16
    3fba:	91 83       	std	Z+1, r25	; 0x01
    3fbc:	80 83       	st	Z, r24
    3fbe:	1f c0       	rjmp	.+62     	; 0x3ffe <EXTI_System+0x324>
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	ed 51       	subi	r30, 0x1D	; 29
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	80 e9       	ldi	r24, 0x90	; 144
    3fc8:	91 e0       	ldi	r25, 0x01	; 1
    3fca:	91 83       	std	Z+1, r25	; 0x01
    3fcc:	80 83       	st	Z, r24
    3fce:	fe 01       	movw	r30, r28
    3fd0:	ed 51       	subi	r30, 0x1D	; 29
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <EXTI_System+0x2fe>
    3fdc:	fe 01       	movw	r30, r28
    3fde:	ed 51       	subi	r30, 0x1D	; 29
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	91 83       	std	Z+1, r25	; 0x01
    3fe4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe6:	de 01       	movw	r26, r28
    3fe8:	ab 51       	subi	r26, 0x1B	; 27
    3fea:	bf 4f       	sbci	r27, 0xFF	; 255
    3fec:	fe 01       	movw	r30, r28
    3fee:	eb 51       	subi	r30, 0x1B	; 27
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	80 81       	ld	r24, Z
    3ff4:	91 81       	ldd	r25, Z+1	; 0x01
    3ff6:	01 97       	sbiw	r24, 0x01	; 1
    3ff8:	11 96       	adiw	r26, 0x01	; 1
    3ffa:	9c 93       	st	X, r25
    3ffc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffe:	fe 01       	movw	r30, r28
    4000:	eb 51       	subi	r30, 0x1B	; 27
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	d1 f6       	brne	.-76     	; 0x3fc0 <EXTI_System+0x2e6>
    400c:	28 c0       	rjmp	.+80     	; 0x405e <EXTI_System+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400e:	8e 01       	movw	r16, r28
    4010:	0b 51       	subi	r16, 0x1B	; 27
    4012:	1f 4f       	sbci	r17, 0xFF	; 255
    4014:	fe 01       	movw	r30, r28
    4016:	e9 51       	subi	r30, 0x19	; 25
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	60 81       	ld	r22, Z
    401c:	71 81       	ldd	r23, Z+1	; 0x01
    401e:	82 81       	ldd	r24, Z+2	; 0x02
    4020:	93 81       	ldd	r25, Z+3	; 0x03
    4022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	f8 01       	movw	r30, r16
    402c:	91 83       	std	Z+1, r25	; 0x01
    402e:	80 83       	st	Z, r24
    4030:	de 01       	movw	r26, r28
    4032:	af 51       	subi	r26, 0x1F	; 31
    4034:	bf 4f       	sbci	r27, 0xFF	; 255
    4036:	fe 01       	movw	r30, r28
    4038:	eb 51       	subi	r30, 0x1B	; 27
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	80 81       	ld	r24, Z
    403e:	91 81       	ldd	r25, Z+1	; 0x01
    4040:	11 96       	adiw	r26, 0x01	; 1
    4042:	9c 93       	st	X, r25
    4044:	8e 93       	st	-X, r24
    4046:	fe 01       	movw	r30, r28
    4048:	ef 51       	subi	r30, 0x1F	; 31
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	80 81       	ld	r24, Z
    404e:	91 81       	ldd	r25, Z+1	; 0x01
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	f1 f7       	brne	.-4      	; 0x4050 <EXTI_System+0x376>
    4054:	fe 01       	movw	r30, r28
    4056:	ef 51       	subi	r30, 0x1F	; 31
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	91 83       	std	Z+1, r25	; 0x01
    405c:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 3){
    405e:	fe 01       	movw	r30, r28
    4060:	ea 5f       	subi	r30, 0xFA	; 250
    4062:	fe 4f       	sbci	r31, 0xFE	; 254
    4064:	80 81       	ld	r24, Z
    4066:	83 30       	cpi	r24, 0x03	; 3
    4068:	09 f0       	breq	.+2      	; 0x406c <EXTI_System+0x392>
    406a:	c5 c0       	rjmp	.+394    	; 0x41f6 <EXTI_System+0x51c>
				LCD_displayCharacter('*');
    406c:	8a e2       	ldi	r24, 0x2A	; 42
    406e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '3';
    4072:	80 91 17 01 	lds	r24, 0x0117
    4076:	88 2f       	mov	r24, r24
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	fc 01       	movw	r30, r24
    407c:	e7 5e       	subi	r30, 0xE7	; 231
    407e:	fe 4f       	sbci	r31, 0xFE	; 254
    4080:	83 e3       	ldi	r24, 0x33	; 51
    4082:	80 83       	st	Z, r24
				c++;
    4084:	80 91 17 01 	lds	r24, 0x0117
    4088:	8f 5f       	subi	r24, 0xFF	; 255
    408a:	80 93 17 01 	sts	0x0117, r24
    408e:	fe 01       	movw	r30, r28
    4090:	e3 52       	subi	r30, 0x23	; 35
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	ac e0       	ldi	r26, 0x0C	; 12
    409a:	b2 e4       	ldi	r27, 0x42	; 66
    409c:	80 83       	st	Z, r24
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	a2 83       	std	Z+2, r26	; 0x02
    40a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a4:	8e 01       	movw	r16, r28
    40a6:	07 52       	subi	r16, 0x27	; 39
    40a8:	1f 4f       	sbci	r17, 0xFF	; 255
    40aa:	fe 01       	movw	r30, r28
    40ac:	e3 52       	subi	r30, 0x23	; 35
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	60 81       	ld	r22, Z
    40b2:	71 81       	ldd	r23, Z+1	; 0x01
    40b4:	82 81       	ldd	r24, Z+2	; 0x02
    40b6:	93 81       	ldd	r25, Z+3	; 0x03
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	4a e7       	ldi	r20, 0x7A	; 122
    40be:	55 e4       	ldi	r21, 0x45	; 69
    40c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	f8 01       	movw	r30, r16
    40ca:	80 83       	st	Z, r24
    40cc:	91 83       	std	Z+1, r25	; 0x01
    40ce:	a2 83       	std	Z+2, r26	; 0x02
    40d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40d2:	fe 01       	movw	r30, r28
    40d4:	e7 52       	subi	r30, 0x27	; 39
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	60 81       	ld	r22, Z
    40da:	71 81       	ldd	r23, Z+1	; 0x01
    40dc:	82 81       	ldd	r24, Z+2	; 0x02
    40de:	93 81       	ldd	r25, Z+3	; 0x03
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	40 e8       	ldi	r20, 0x80	; 128
    40e6:	5f e3       	ldi	r21, 0x3F	; 63
    40e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40ec:	88 23       	and	r24, r24
    40ee:	44 f4       	brge	.+16     	; 0x4100 <EXTI_System+0x426>
		__ticks = 1;
    40f0:	fe 01       	movw	r30, r28
    40f2:	e9 52       	subi	r30, 0x29	; 41
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	91 83       	std	Z+1, r25	; 0x01
    40fc:	80 83       	st	Z, r24
    40fe:	64 c0       	rjmp	.+200    	; 0x41c8 <EXTI_System+0x4ee>
	else if (__tmp > 65535)
    4100:	fe 01       	movw	r30, r28
    4102:	e7 52       	subi	r30, 0x27	; 39
    4104:	ff 4f       	sbci	r31, 0xFF	; 255
    4106:	60 81       	ld	r22, Z
    4108:	71 81       	ldd	r23, Z+1	; 0x01
    410a:	82 81       	ldd	r24, Z+2	; 0x02
    410c:	93 81       	ldd	r25, Z+3	; 0x03
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	3f ef       	ldi	r19, 0xFF	; 255
    4112:	4f e7       	ldi	r20, 0x7F	; 127
    4114:	57 e4       	ldi	r21, 0x47	; 71
    4116:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    411a:	18 16       	cp	r1, r24
    411c:	0c f0       	brlt	.+2      	; 0x4120 <EXTI_System+0x446>
    411e:	43 c0       	rjmp	.+134    	; 0x41a6 <EXTI_System+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4120:	fe 01       	movw	r30, r28
    4122:	e3 52       	subi	r30, 0x23	; 35
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	60 81       	ld	r22, Z
    4128:	71 81       	ldd	r23, Z+1	; 0x01
    412a:	82 81       	ldd	r24, Z+2	; 0x02
    412c:	93 81       	ldd	r25, Z+3	; 0x03
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	40 e2       	ldi	r20, 0x20	; 32
    4134:	51 e4       	ldi	r21, 0x41	; 65
    4136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	8e 01       	movw	r16, r28
    4140:	09 52       	subi	r16, 0x29	; 41
    4142:	1f 4f       	sbci	r17, 0xFF	; 255
    4144:	bc 01       	movw	r22, r24
    4146:	cd 01       	movw	r24, r26
    4148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	f8 01       	movw	r30, r16
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	80 83       	st	Z, r24
    4156:	1f c0       	rjmp	.+62     	; 0x4196 <EXTI_System+0x4bc>
    4158:	fe 01       	movw	r30, r28
    415a:	eb 52       	subi	r30, 0x2B	; 43
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	80 e9       	ldi	r24, 0x90	; 144
    4160:	91 e0       	ldi	r25, 0x01	; 1
    4162:	91 83       	std	Z+1, r25	; 0x01
    4164:	80 83       	st	Z, r24
    4166:	fe 01       	movw	r30, r28
    4168:	eb 52       	subi	r30, 0x2B	; 43
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	91 81       	ldd	r25, Z+1	; 0x01
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	f1 f7       	brne	.-4      	; 0x4170 <EXTI_System+0x496>
    4174:	fe 01       	movw	r30, r28
    4176:	eb 52       	subi	r30, 0x2B	; 43
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    417e:	de 01       	movw	r26, r28
    4180:	a9 52       	subi	r26, 0x29	; 41
    4182:	bf 4f       	sbci	r27, 0xFF	; 255
    4184:	fe 01       	movw	r30, r28
    4186:	e9 52       	subi	r30, 0x29	; 41
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 81       	ld	r24, Z
    418c:	91 81       	ldd	r25, Z+1	; 0x01
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	11 96       	adiw	r26, 0x01	; 1
    4192:	9c 93       	st	X, r25
    4194:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4196:	fe 01       	movw	r30, r28
    4198:	e9 52       	subi	r30, 0x29	; 41
    419a:	ff 4f       	sbci	r31, 0xFF	; 255
    419c:	80 81       	ld	r24, Z
    419e:	91 81       	ldd	r25, Z+1	; 0x01
    41a0:	00 97       	sbiw	r24, 0x00	; 0
    41a2:	d1 f6       	brne	.-76     	; 0x4158 <EXTI_System+0x47e>
    41a4:	28 c0       	rjmp	.+80     	; 0x41f6 <EXTI_System+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a6:	8e 01       	movw	r16, r28
    41a8:	09 52       	subi	r16, 0x29	; 41
    41aa:	1f 4f       	sbci	r17, 0xFF	; 255
    41ac:	fe 01       	movw	r30, r28
    41ae:	e7 52       	subi	r30, 0x27	; 39
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	60 81       	ld	r22, Z
    41b4:	71 81       	ldd	r23, Z+1	; 0x01
    41b6:	82 81       	ldd	r24, Z+2	; 0x02
    41b8:	93 81       	ldd	r25, Z+3	; 0x03
    41ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	f8 01       	movw	r30, r16
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	80 83       	st	Z, r24
    41c8:	de 01       	movw	r26, r28
    41ca:	ad 52       	subi	r26, 0x2D	; 45
    41cc:	bf 4f       	sbci	r27, 0xFF	; 255
    41ce:	fe 01       	movw	r30, r28
    41d0:	e9 52       	subi	r30, 0x29	; 41
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	80 81       	ld	r24, Z
    41d6:	91 81       	ldd	r25, Z+1	; 0x01
    41d8:	11 96       	adiw	r26, 0x01	; 1
    41da:	9c 93       	st	X, r25
    41dc:	8e 93       	st	-X, r24
    41de:	fe 01       	movw	r30, r28
    41e0:	ed 52       	subi	r30, 0x2D	; 45
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	80 81       	ld	r24, Z
    41e6:	91 81       	ldd	r25, Z+1	; 0x01
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	f1 f7       	brne	.-4      	; 0x41e8 <EXTI_System+0x50e>
    41ec:	fe 01       	movw	r30, r28
    41ee:	ed 52       	subi	r30, 0x2D	; 45
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	91 83       	std	Z+1, r25	; 0x01
    41f4:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 4){
    41f6:	fe 01       	movw	r30, r28
    41f8:	ea 5f       	subi	r30, 0xFA	; 250
    41fa:	fe 4f       	sbci	r31, 0xFE	; 254
    41fc:	80 81       	ld	r24, Z
    41fe:	84 30       	cpi	r24, 0x04	; 4
    4200:	09 f0       	breq	.+2      	; 0x4204 <EXTI_System+0x52a>
    4202:	c5 c0       	rjmp	.+394    	; 0x438e <EXTI_System+0x6b4>
				LCD_displayCharacter('*');
    4204:	8a e2       	ldi	r24, 0x2A	; 42
    4206:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '4';
    420a:	80 91 17 01 	lds	r24, 0x0117
    420e:	88 2f       	mov	r24, r24
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	fc 01       	movw	r30, r24
    4214:	e7 5e       	subi	r30, 0xE7	; 231
    4216:	fe 4f       	sbci	r31, 0xFE	; 254
    4218:	84 e3       	ldi	r24, 0x34	; 52
    421a:	80 83       	st	Z, r24
				c++;
    421c:	80 91 17 01 	lds	r24, 0x0117
    4220:	8f 5f       	subi	r24, 0xFF	; 255
    4222:	80 93 17 01 	sts	0x0117, r24
    4226:	fe 01       	movw	r30, r28
    4228:	e1 53       	subi	r30, 0x31	; 49
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	ac e0       	ldi	r26, 0x0C	; 12
    4232:	b2 e4       	ldi	r27, 0x42	; 66
    4234:	80 83       	st	Z, r24
    4236:	91 83       	std	Z+1, r25	; 0x01
    4238:	a2 83       	std	Z+2, r26	; 0x02
    423a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    423c:	8e 01       	movw	r16, r28
    423e:	05 53       	subi	r16, 0x35	; 53
    4240:	1f 4f       	sbci	r17, 0xFF	; 255
    4242:	fe 01       	movw	r30, r28
    4244:	e1 53       	subi	r30, 0x31	; 49
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	60 81       	ld	r22, Z
    424a:	71 81       	ldd	r23, Z+1	; 0x01
    424c:	82 81       	ldd	r24, Z+2	; 0x02
    424e:	93 81       	ldd	r25, Z+3	; 0x03
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	4a e7       	ldi	r20, 0x7A	; 122
    4256:	55 e4       	ldi	r21, 0x45	; 69
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	f8 01       	movw	r30, r16
    4262:	80 83       	st	Z, r24
    4264:	91 83       	std	Z+1, r25	; 0x01
    4266:	a2 83       	std	Z+2, r26	; 0x02
    4268:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    426a:	fe 01       	movw	r30, r28
    426c:	e5 53       	subi	r30, 0x35	; 53
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	60 81       	ld	r22, Z
    4272:	71 81       	ldd	r23, Z+1	; 0x01
    4274:	82 81       	ldd	r24, Z+2	; 0x02
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	40 e8       	ldi	r20, 0x80	; 128
    427e:	5f e3       	ldi	r21, 0x3F	; 63
    4280:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4284:	88 23       	and	r24, r24
    4286:	44 f4       	brge	.+16     	; 0x4298 <EXTI_System+0x5be>
		__ticks = 1;
    4288:	fe 01       	movw	r30, r28
    428a:	e7 53       	subi	r30, 0x37	; 55
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
    4296:	64 c0       	rjmp	.+200    	; 0x4360 <EXTI_System+0x686>
	else if (__tmp > 65535)
    4298:	fe 01       	movw	r30, r28
    429a:	e5 53       	subi	r30, 0x35	; 53
    429c:	ff 4f       	sbci	r31, 0xFF	; 255
    429e:	60 81       	ld	r22, Z
    42a0:	71 81       	ldd	r23, Z+1	; 0x01
    42a2:	82 81       	ldd	r24, Z+2	; 0x02
    42a4:	93 81       	ldd	r25, Z+3	; 0x03
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	3f ef       	ldi	r19, 0xFF	; 255
    42aa:	4f e7       	ldi	r20, 0x7F	; 127
    42ac:	57 e4       	ldi	r21, 0x47	; 71
    42ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42b2:	18 16       	cp	r1, r24
    42b4:	0c f0       	brlt	.+2      	; 0x42b8 <EXTI_System+0x5de>
    42b6:	43 c0       	rjmp	.+134    	; 0x433e <EXTI_System+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42b8:	fe 01       	movw	r30, r28
    42ba:	e1 53       	subi	r30, 0x31	; 49
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	60 81       	ld	r22, Z
    42c0:	71 81       	ldd	r23, Z+1	; 0x01
    42c2:	82 81       	ldd	r24, Z+2	; 0x02
    42c4:	93 81       	ldd	r25, Z+3	; 0x03
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	40 e2       	ldi	r20, 0x20	; 32
    42cc:	51 e4       	ldi	r21, 0x41	; 65
    42ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	8e 01       	movw	r16, r28
    42d8:	07 53       	subi	r16, 0x37	; 55
    42da:	1f 4f       	sbci	r17, 0xFF	; 255
    42dc:	bc 01       	movw	r22, r24
    42de:	cd 01       	movw	r24, r26
    42e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	f8 01       	movw	r30, r16
    42ea:	91 83       	std	Z+1, r25	; 0x01
    42ec:	80 83       	st	Z, r24
    42ee:	1f c0       	rjmp	.+62     	; 0x432e <EXTI_System+0x654>
    42f0:	fe 01       	movw	r30, r28
    42f2:	e9 53       	subi	r30, 0x39	; 57
    42f4:	ff 4f       	sbci	r31, 0xFF	; 255
    42f6:	80 e9       	ldi	r24, 0x90	; 144
    42f8:	91 e0       	ldi	r25, 0x01	; 1
    42fa:	91 83       	std	Z+1, r25	; 0x01
    42fc:	80 83       	st	Z, r24
    42fe:	fe 01       	movw	r30, r28
    4300:	e9 53       	subi	r30, 0x39	; 57
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 81       	ld	r24, Z
    4306:	91 81       	ldd	r25, Z+1	; 0x01
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <EXTI_System+0x62e>
    430c:	fe 01       	movw	r30, r28
    430e:	e9 53       	subi	r30, 0x39	; 57
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4316:	de 01       	movw	r26, r28
    4318:	a7 53       	subi	r26, 0x37	; 55
    431a:	bf 4f       	sbci	r27, 0xFF	; 255
    431c:	fe 01       	movw	r30, r28
    431e:	e7 53       	subi	r30, 0x37	; 55
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	80 81       	ld	r24, Z
    4324:	91 81       	ldd	r25, Z+1	; 0x01
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	11 96       	adiw	r26, 0x01	; 1
    432a:	9c 93       	st	X, r25
    432c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432e:	fe 01       	movw	r30, r28
    4330:	e7 53       	subi	r30, 0x37	; 55
    4332:	ff 4f       	sbci	r31, 0xFF	; 255
    4334:	80 81       	ld	r24, Z
    4336:	91 81       	ldd	r25, Z+1	; 0x01
    4338:	00 97       	sbiw	r24, 0x00	; 0
    433a:	d1 f6       	brne	.-76     	; 0x42f0 <EXTI_System+0x616>
    433c:	28 c0       	rjmp	.+80     	; 0x438e <EXTI_System+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    433e:	8e 01       	movw	r16, r28
    4340:	07 53       	subi	r16, 0x37	; 55
    4342:	1f 4f       	sbci	r17, 0xFF	; 255
    4344:	fe 01       	movw	r30, r28
    4346:	e5 53       	subi	r30, 0x35	; 53
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	60 81       	ld	r22, Z
    434c:	71 81       	ldd	r23, Z+1	; 0x01
    434e:	82 81       	ldd	r24, Z+2	; 0x02
    4350:	93 81       	ldd	r25, Z+3	; 0x03
    4352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	f8 01       	movw	r30, r16
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	80 83       	st	Z, r24
    4360:	de 01       	movw	r26, r28
    4362:	ab 53       	subi	r26, 0x3B	; 59
    4364:	bf 4f       	sbci	r27, 0xFF	; 255
    4366:	fe 01       	movw	r30, r28
    4368:	e7 53       	subi	r30, 0x37	; 55
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	80 81       	ld	r24, Z
    436e:	91 81       	ldd	r25, Z+1	; 0x01
    4370:	11 96       	adiw	r26, 0x01	; 1
    4372:	9c 93       	st	X, r25
    4374:	8e 93       	st	-X, r24
    4376:	fe 01       	movw	r30, r28
    4378:	eb 53       	subi	r30, 0x3B	; 59
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	80 81       	ld	r24, Z
    437e:	91 81       	ldd	r25, Z+1	; 0x01
    4380:	01 97       	sbiw	r24, 0x01	; 1
    4382:	f1 f7       	brne	.-4      	; 0x4380 <EXTI_System+0x6a6>
    4384:	fe 01       	movw	r30, r28
    4386:	eb 53       	subi	r30, 0x3B	; 59
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	91 83       	std	Z+1, r25	; 0x01
    438c:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 5){
    438e:	fe 01       	movw	r30, r28
    4390:	ea 5f       	subi	r30, 0xFA	; 250
    4392:	fe 4f       	sbci	r31, 0xFE	; 254
    4394:	80 81       	ld	r24, Z
    4396:	85 30       	cpi	r24, 0x05	; 5
    4398:	09 f0       	breq	.+2      	; 0x439c <EXTI_System+0x6c2>
    439a:	c5 c0       	rjmp	.+394    	; 0x4526 <EXTI_System+0x84c>
				LCD_displayCharacter('*');
    439c:	8a e2       	ldi	r24, 0x2A	; 42
    439e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '5';
    43a2:	80 91 17 01 	lds	r24, 0x0117
    43a6:	88 2f       	mov	r24, r24
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	fc 01       	movw	r30, r24
    43ac:	e7 5e       	subi	r30, 0xE7	; 231
    43ae:	fe 4f       	sbci	r31, 0xFE	; 254
    43b0:	85 e3       	ldi	r24, 0x35	; 53
    43b2:	80 83       	st	Z, r24
				c++;
    43b4:	80 91 17 01 	lds	r24, 0x0117
    43b8:	8f 5f       	subi	r24, 0xFF	; 255
    43ba:	80 93 17 01 	sts	0x0117, r24
    43be:	fe 01       	movw	r30, r28
    43c0:	ef 53       	subi	r30, 0x3F	; 63
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	80 e0       	ldi	r24, 0x00	; 0
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	ac e0       	ldi	r26, 0x0C	; 12
    43ca:	b2 e4       	ldi	r27, 0x42	; 66
    43cc:	80 83       	st	Z, r24
    43ce:	91 83       	std	Z+1, r25	; 0x01
    43d0:	a2 83       	std	Z+2, r26	; 0x02
    43d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d4:	8e 01       	movw	r16, r28
    43d6:	03 54       	subi	r16, 0x43	; 67
    43d8:	1f 4f       	sbci	r17, 0xFF	; 255
    43da:	fe 01       	movw	r30, r28
    43dc:	ef 53       	subi	r30, 0x3F	; 63
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	60 81       	ld	r22, Z
    43e2:	71 81       	ldd	r23, Z+1	; 0x01
    43e4:	82 81       	ldd	r24, Z+2	; 0x02
    43e6:	93 81       	ldd	r25, Z+3	; 0x03
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	4a e7       	ldi	r20, 0x7A	; 122
    43ee:	55 e4       	ldi	r21, 0x45	; 69
    43f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	f8 01       	movw	r30, r16
    43fa:	80 83       	st	Z, r24
    43fc:	91 83       	std	Z+1, r25	; 0x01
    43fe:	a2 83       	std	Z+2, r26	; 0x02
    4400:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4402:	fe 01       	movw	r30, r28
    4404:	e3 54       	subi	r30, 0x43	; 67
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	60 81       	ld	r22, Z
    440a:	71 81       	ldd	r23, Z+1	; 0x01
    440c:	82 81       	ldd	r24, Z+2	; 0x02
    440e:	93 81       	ldd	r25, Z+3	; 0x03
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	40 e8       	ldi	r20, 0x80	; 128
    4416:	5f e3       	ldi	r21, 0x3F	; 63
    4418:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    441c:	88 23       	and	r24, r24
    441e:	44 f4       	brge	.+16     	; 0x4430 <EXTI_System+0x756>
		__ticks = 1;
    4420:	fe 01       	movw	r30, r28
    4422:	e5 54       	subi	r30, 0x45	; 69
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	91 83       	std	Z+1, r25	; 0x01
    442c:	80 83       	st	Z, r24
    442e:	64 c0       	rjmp	.+200    	; 0x44f8 <EXTI_System+0x81e>
	else if (__tmp > 65535)
    4430:	fe 01       	movw	r30, r28
    4432:	e3 54       	subi	r30, 0x43	; 67
    4434:	ff 4f       	sbci	r31, 0xFF	; 255
    4436:	60 81       	ld	r22, Z
    4438:	71 81       	ldd	r23, Z+1	; 0x01
    443a:	82 81       	ldd	r24, Z+2	; 0x02
    443c:	93 81       	ldd	r25, Z+3	; 0x03
    443e:	20 e0       	ldi	r18, 0x00	; 0
    4440:	3f ef       	ldi	r19, 0xFF	; 255
    4442:	4f e7       	ldi	r20, 0x7F	; 127
    4444:	57 e4       	ldi	r21, 0x47	; 71
    4446:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    444a:	18 16       	cp	r1, r24
    444c:	0c f0       	brlt	.+2      	; 0x4450 <EXTI_System+0x776>
    444e:	43 c0       	rjmp	.+134    	; 0x44d6 <EXTI_System+0x7fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4450:	fe 01       	movw	r30, r28
    4452:	ef 53       	subi	r30, 0x3F	; 63
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	60 81       	ld	r22, Z
    4458:	71 81       	ldd	r23, Z+1	; 0x01
    445a:	82 81       	ldd	r24, Z+2	; 0x02
    445c:	93 81       	ldd	r25, Z+3	; 0x03
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	40 e2       	ldi	r20, 0x20	; 32
    4464:	51 e4       	ldi	r21, 0x41	; 65
    4466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446a:	dc 01       	movw	r26, r24
    446c:	cb 01       	movw	r24, r22
    446e:	8e 01       	movw	r16, r28
    4470:	05 54       	subi	r16, 0x45	; 69
    4472:	1f 4f       	sbci	r17, 0xFF	; 255
    4474:	bc 01       	movw	r22, r24
    4476:	cd 01       	movw	r24, r26
    4478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447c:	dc 01       	movw	r26, r24
    447e:	cb 01       	movw	r24, r22
    4480:	f8 01       	movw	r30, r16
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	80 83       	st	Z, r24
    4486:	1f c0       	rjmp	.+62     	; 0x44c6 <EXTI_System+0x7ec>
    4488:	fe 01       	movw	r30, r28
    448a:	e7 54       	subi	r30, 0x47	; 71
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	80 e9       	ldi	r24, 0x90	; 144
    4490:	91 e0       	ldi	r25, 0x01	; 1
    4492:	91 83       	std	Z+1, r25	; 0x01
    4494:	80 83       	st	Z, r24
    4496:	fe 01       	movw	r30, r28
    4498:	e7 54       	subi	r30, 0x47	; 71
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	80 81       	ld	r24, Z
    449e:	91 81       	ldd	r25, Z+1	; 0x01
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	f1 f7       	brne	.-4      	; 0x44a0 <EXTI_System+0x7c6>
    44a4:	fe 01       	movw	r30, r28
    44a6:	e7 54       	subi	r30, 0x47	; 71
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ae:	de 01       	movw	r26, r28
    44b0:	a5 54       	subi	r26, 0x45	; 69
    44b2:	bf 4f       	sbci	r27, 0xFF	; 255
    44b4:	fe 01       	movw	r30, r28
    44b6:	e5 54       	subi	r30, 0x45	; 69
    44b8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ba:	80 81       	ld	r24, Z
    44bc:	91 81       	ldd	r25, Z+1	; 0x01
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	11 96       	adiw	r26, 0x01	; 1
    44c2:	9c 93       	st	X, r25
    44c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c6:	fe 01       	movw	r30, r28
    44c8:	e5 54       	subi	r30, 0x45	; 69
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	80 81       	ld	r24, Z
    44ce:	91 81       	ldd	r25, Z+1	; 0x01
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	d1 f6       	brne	.-76     	; 0x4488 <EXTI_System+0x7ae>
    44d4:	28 c0       	rjmp	.+80     	; 0x4526 <EXTI_System+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d6:	8e 01       	movw	r16, r28
    44d8:	05 54       	subi	r16, 0x45	; 69
    44da:	1f 4f       	sbci	r17, 0xFF	; 255
    44dc:	fe 01       	movw	r30, r28
    44de:	e3 54       	subi	r30, 0x43	; 67
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	60 81       	ld	r22, Z
    44e4:	71 81       	ldd	r23, Z+1	; 0x01
    44e6:	82 81       	ldd	r24, Z+2	; 0x02
    44e8:	93 81       	ldd	r25, Z+3	; 0x03
    44ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	f8 01       	movw	r30, r16
    44f4:	91 83       	std	Z+1, r25	; 0x01
    44f6:	80 83       	st	Z, r24
    44f8:	de 01       	movw	r26, r28
    44fa:	a9 54       	subi	r26, 0x49	; 73
    44fc:	bf 4f       	sbci	r27, 0xFF	; 255
    44fe:	fe 01       	movw	r30, r28
    4500:	e5 54       	subi	r30, 0x45	; 69
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	80 81       	ld	r24, Z
    4506:	91 81       	ldd	r25, Z+1	; 0x01
    4508:	11 96       	adiw	r26, 0x01	; 1
    450a:	9c 93       	st	X, r25
    450c:	8e 93       	st	-X, r24
    450e:	fe 01       	movw	r30, r28
    4510:	e9 54       	subi	r30, 0x49	; 73
    4512:	ff 4f       	sbci	r31, 0xFF	; 255
    4514:	80 81       	ld	r24, Z
    4516:	91 81       	ldd	r25, Z+1	; 0x01
    4518:	01 97       	sbiw	r24, 0x01	; 1
    451a:	f1 f7       	brne	.-4      	; 0x4518 <EXTI_System+0x83e>
    451c:	fe 01       	movw	r30, r28
    451e:	e9 54       	subi	r30, 0x49	; 73
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	91 83       	std	Z+1, r25	; 0x01
    4524:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 6){
    4526:	fe 01       	movw	r30, r28
    4528:	ea 5f       	subi	r30, 0xFA	; 250
    452a:	fe 4f       	sbci	r31, 0xFE	; 254
    452c:	80 81       	ld	r24, Z
    452e:	86 30       	cpi	r24, 0x06	; 6
    4530:	09 f0       	breq	.+2      	; 0x4534 <EXTI_System+0x85a>
    4532:	c5 c0       	rjmp	.+394    	; 0x46be <EXTI_System+0x9e4>
				LCD_displayCharacter('*');
    4534:	8a e2       	ldi	r24, 0x2A	; 42
    4536:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '6';
    453a:	80 91 17 01 	lds	r24, 0x0117
    453e:	88 2f       	mov	r24, r24
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	fc 01       	movw	r30, r24
    4544:	e7 5e       	subi	r30, 0xE7	; 231
    4546:	fe 4f       	sbci	r31, 0xFE	; 254
    4548:	86 e3       	ldi	r24, 0x36	; 54
    454a:	80 83       	st	Z, r24
				c++;
    454c:	80 91 17 01 	lds	r24, 0x0117
    4550:	8f 5f       	subi	r24, 0xFF	; 255
    4552:	80 93 17 01 	sts	0x0117, r24
    4556:	fe 01       	movw	r30, r28
    4558:	ed 54       	subi	r30, 0x4D	; 77
    455a:	ff 4f       	sbci	r31, 0xFF	; 255
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	ac e0       	ldi	r26, 0x0C	; 12
    4562:	b2 e4       	ldi	r27, 0x42	; 66
    4564:	80 83       	st	Z, r24
    4566:	91 83       	std	Z+1, r25	; 0x01
    4568:	a2 83       	std	Z+2, r26	; 0x02
    456a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456c:	8e 01       	movw	r16, r28
    456e:	01 55       	subi	r16, 0x51	; 81
    4570:	1f 4f       	sbci	r17, 0xFF	; 255
    4572:	fe 01       	movw	r30, r28
    4574:	ed 54       	subi	r30, 0x4D	; 77
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	60 81       	ld	r22, Z
    457a:	71 81       	ldd	r23, Z+1	; 0x01
    457c:	82 81       	ldd	r24, Z+2	; 0x02
    457e:	93 81       	ldd	r25, Z+3	; 0x03
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	4a e7       	ldi	r20, 0x7A	; 122
    4586:	55 e4       	ldi	r21, 0x45	; 69
    4588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	f8 01       	movw	r30, r16
    4592:	80 83       	st	Z, r24
    4594:	91 83       	std	Z+1, r25	; 0x01
    4596:	a2 83       	std	Z+2, r26	; 0x02
    4598:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    459a:	fe 01       	movw	r30, r28
    459c:	e1 55       	subi	r30, 0x51	; 81
    459e:	ff 4f       	sbci	r31, 0xFF	; 255
    45a0:	60 81       	ld	r22, Z
    45a2:	71 81       	ldd	r23, Z+1	; 0x01
    45a4:	82 81       	ldd	r24, Z+2	; 0x02
    45a6:	93 81       	ldd	r25, Z+3	; 0x03
    45a8:	20 e0       	ldi	r18, 0x00	; 0
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	40 e8       	ldi	r20, 0x80	; 128
    45ae:	5f e3       	ldi	r21, 0x3F	; 63
    45b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45b4:	88 23       	and	r24, r24
    45b6:	44 f4       	brge	.+16     	; 0x45c8 <EXTI_System+0x8ee>
		__ticks = 1;
    45b8:	fe 01       	movw	r30, r28
    45ba:	e3 55       	subi	r30, 0x53	; 83
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	91 83       	std	Z+1, r25	; 0x01
    45c4:	80 83       	st	Z, r24
    45c6:	64 c0       	rjmp	.+200    	; 0x4690 <EXTI_System+0x9b6>
	else if (__tmp > 65535)
    45c8:	fe 01       	movw	r30, r28
    45ca:	e1 55       	subi	r30, 0x51	; 81
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	60 81       	ld	r22, Z
    45d0:	71 81       	ldd	r23, Z+1	; 0x01
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	93 81       	ldd	r25, Z+3	; 0x03
    45d6:	20 e0       	ldi	r18, 0x00	; 0
    45d8:	3f ef       	ldi	r19, 0xFF	; 255
    45da:	4f e7       	ldi	r20, 0x7F	; 127
    45dc:	57 e4       	ldi	r21, 0x47	; 71
    45de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45e2:	18 16       	cp	r1, r24
    45e4:	0c f0       	brlt	.+2      	; 0x45e8 <EXTI_System+0x90e>
    45e6:	43 c0       	rjmp	.+134    	; 0x466e <EXTI_System+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e8:	fe 01       	movw	r30, r28
    45ea:	ed 54       	subi	r30, 0x4D	; 77
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	60 81       	ld	r22, Z
    45f0:	71 81       	ldd	r23, Z+1	; 0x01
    45f2:	82 81       	ldd	r24, Z+2	; 0x02
    45f4:	93 81       	ldd	r25, Z+3	; 0x03
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	30 e0       	ldi	r19, 0x00	; 0
    45fa:	40 e2       	ldi	r20, 0x20	; 32
    45fc:	51 e4       	ldi	r21, 0x41	; 65
    45fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4602:	dc 01       	movw	r26, r24
    4604:	cb 01       	movw	r24, r22
    4606:	8e 01       	movw	r16, r28
    4608:	03 55       	subi	r16, 0x53	; 83
    460a:	1f 4f       	sbci	r17, 0xFF	; 255
    460c:	bc 01       	movw	r22, r24
    460e:	cd 01       	movw	r24, r26
    4610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4614:	dc 01       	movw	r26, r24
    4616:	cb 01       	movw	r24, r22
    4618:	f8 01       	movw	r30, r16
    461a:	91 83       	std	Z+1, r25	; 0x01
    461c:	80 83       	st	Z, r24
    461e:	1f c0       	rjmp	.+62     	; 0x465e <EXTI_System+0x984>
    4620:	fe 01       	movw	r30, r28
    4622:	e5 55       	subi	r30, 0x55	; 85
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	80 e9       	ldi	r24, 0x90	; 144
    4628:	91 e0       	ldi	r25, 0x01	; 1
    462a:	91 83       	std	Z+1, r25	; 0x01
    462c:	80 83       	st	Z, r24
    462e:	fe 01       	movw	r30, r28
    4630:	e5 55       	subi	r30, 0x55	; 85
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	80 81       	ld	r24, Z
    4636:	91 81       	ldd	r25, Z+1	; 0x01
    4638:	01 97       	sbiw	r24, 0x01	; 1
    463a:	f1 f7       	brne	.-4      	; 0x4638 <EXTI_System+0x95e>
    463c:	fe 01       	movw	r30, r28
    463e:	e5 55       	subi	r30, 0x55	; 85
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4646:	de 01       	movw	r26, r28
    4648:	a3 55       	subi	r26, 0x53	; 83
    464a:	bf 4f       	sbci	r27, 0xFF	; 255
    464c:	fe 01       	movw	r30, r28
    464e:	e3 55       	subi	r30, 0x53	; 83
    4650:	ff 4f       	sbci	r31, 0xFF	; 255
    4652:	80 81       	ld	r24, Z
    4654:	91 81       	ldd	r25, Z+1	; 0x01
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	11 96       	adiw	r26, 0x01	; 1
    465a:	9c 93       	st	X, r25
    465c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    465e:	fe 01       	movw	r30, r28
    4660:	e3 55       	subi	r30, 0x53	; 83
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	80 81       	ld	r24, Z
    4666:	91 81       	ldd	r25, Z+1	; 0x01
    4668:	00 97       	sbiw	r24, 0x00	; 0
    466a:	d1 f6       	brne	.-76     	; 0x4620 <EXTI_System+0x946>
    466c:	28 c0       	rjmp	.+80     	; 0x46be <EXTI_System+0x9e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466e:	8e 01       	movw	r16, r28
    4670:	03 55       	subi	r16, 0x53	; 83
    4672:	1f 4f       	sbci	r17, 0xFF	; 255
    4674:	fe 01       	movw	r30, r28
    4676:	e1 55       	subi	r30, 0x51	; 81
    4678:	ff 4f       	sbci	r31, 0xFF	; 255
    467a:	60 81       	ld	r22, Z
    467c:	71 81       	ldd	r23, Z+1	; 0x01
    467e:	82 81       	ldd	r24, Z+2	; 0x02
    4680:	93 81       	ldd	r25, Z+3	; 0x03
    4682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	f8 01       	movw	r30, r16
    468c:	91 83       	std	Z+1, r25	; 0x01
    468e:	80 83       	st	Z, r24
    4690:	de 01       	movw	r26, r28
    4692:	a7 55       	subi	r26, 0x57	; 87
    4694:	bf 4f       	sbci	r27, 0xFF	; 255
    4696:	fe 01       	movw	r30, r28
    4698:	e3 55       	subi	r30, 0x53	; 83
    469a:	ff 4f       	sbci	r31, 0xFF	; 255
    469c:	80 81       	ld	r24, Z
    469e:	91 81       	ldd	r25, Z+1	; 0x01
    46a0:	11 96       	adiw	r26, 0x01	; 1
    46a2:	9c 93       	st	X, r25
    46a4:	8e 93       	st	-X, r24
    46a6:	fe 01       	movw	r30, r28
    46a8:	e7 55       	subi	r30, 0x57	; 87
    46aa:	ff 4f       	sbci	r31, 0xFF	; 255
    46ac:	80 81       	ld	r24, Z
    46ae:	91 81       	ldd	r25, Z+1	; 0x01
    46b0:	01 97       	sbiw	r24, 0x01	; 1
    46b2:	f1 f7       	brne	.-4      	; 0x46b0 <EXTI_System+0x9d6>
    46b4:	fe 01       	movw	r30, r28
    46b6:	e7 55       	subi	r30, 0x57	; 87
    46b8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ba:	91 83       	std	Z+1, r25	; 0x01
    46bc:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 7){
    46be:	fe 01       	movw	r30, r28
    46c0:	ea 5f       	subi	r30, 0xFA	; 250
    46c2:	fe 4f       	sbci	r31, 0xFE	; 254
    46c4:	80 81       	ld	r24, Z
    46c6:	87 30       	cpi	r24, 0x07	; 7
    46c8:	09 f0       	breq	.+2      	; 0x46cc <EXTI_System+0x9f2>
    46ca:	c5 c0       	rjmp	.+394    	; 0x4856 <EXTI_System+0xb7c>
				LCD_displayCharacter('*');
    46cc:	8a e2       	ldi	r24, 0x2A	; 42
    46ce:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '7';
    46d2:	80 91 17 01 	lds	r24, 0x0117
    46d6:	88 2f       	mov	r24, r24
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	fc 01       	movw	r30, r24
    46dc:	e7 5e       	subi	r30, 0xE7	; 231
    46de:	fe 4f       	sbci	r31, 0xFE	; 254
    46e0:	87 e3       	ldi	r24, 0x37	; 55
    46e2:	80 83       	st	Z, r24
				c++;
    46e4:	80 91 17 01 	lds	r24, 0x0117
    46e8:	8f 5f       	subi	r24, 0xFF	; 255
    46ea:	80 93 17 01 	sts	0x0117, r24
    46ee:	fe 01       	movw	r30, r28
    46f0:	eb 55       	subi	r30, 0x5B	; 91
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	ac e0       	ldi	r26, 0x0C	; 12
    46fa:	b2 e4       	ldi	r27, 0x42	; 66
    46fc:	80 83       	st	Z, r24
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	a2 83       	std	Z+2, r26	; 0x02
    4702:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4704:	8e 01       	movw	r16, r28
    4706:	0f 55       	subi	r16, 0x5F	; 95
    4708:	1f 4f       	sbci	r17, 0xFF	; 255
    470a:	fe 01       	movw	r30, r28
    470c:	eb 55       	subi	r30, 0x5B	; 91
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	60 81       	ld	r22, Z
    4712:	71 81       	ldd	r23, Z+1	; 0x01
    4714:	82 81       	ldd	r24, Z+2	; 0x02
    4716:	93 81       	ldd	r25, Z+3	; 0x03
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	4a e7       	ldi	r20, 0x7A	; 122
    471e:	55 e4       	ldi	r21, 0x45	; 69
    4720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	f8 01       	movw	r30, r16
    472a:	80 83       	st	Z, r24
    472c:	91 83       	std	Z+1, r25	; 0x01
    472e:	a2 83       	std	Z+2, r26	; 0x02
    4730:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4732:	fe 01       	movw	r30, r28
    4734:	ef 55       	subi	r30, 0x5F	; 95
    4736:	ff 4f       	sbci	r31, 0xFF	; 255
    4738:	60 81       	ld	r22, Z
    473a:	71 81       	ldd	r23, Z+1	; 0x01
    473c:	82 81       	ldd	r24, Z+2	; 0x02
    473e:	93 81       	ldd	r25, Z+3	; 0x03
    4740:	20 e0       	ldi	r18, 0x00	; 0
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	40 e8       	ldi	r20, 0x80	; 128
    4746:	5f e3       	ldi	r21, 0x3F	; 63
    4748:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    474c:	88 23       	and	r24, r24
    474e:	44 f4       	brge	.+16     	; 0x4760 <EXTI_System+0xa86>
		__ticks = 1;
    4750:	fe 01       	movw	r30, r28
    4752:	e1 56       	subi	r30, 0x61	; 97
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	91 83       	std	Z+1, r25	; 0x01
    475c:	80 83       	st	Z, r24
    475e:	64 c0       	rjmp	.+200    	; 0x4828 <EXTI_System+0xb4e>
	else if (__tmp > 65535)
    4760:	fe 01       	movw	r30, r28
    4762:	ef 55       	subi	r30, 0x5F	; 95
    4764:	ff 4f       	sbci	r31, 0xFF	; 255
    4766:	60 81       	ld	r22, Z
    4768:	71 81       	ldd	r23, Z+1	; 0x01
    476a:	82 81       	ldd	r24, Z+2	; 0x02
    476c:	93 81       	ldd	r25, Z+3	; 0x03
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	3f ef       	ldi	r19, 0xFF	; 255
    4772:	4f e7       	ldi	r20, 0x7F	; 127
    4774:	57 e4       	ldi	r21, 0x47	; 71
    4776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    477a:	18 16       	cp	r1, r24
    477c:	0c f0       	brlt	.+2      	; 0x4780 <EXTI_System+0xaa6>
    477e:	43 c0       	rjmp	.+134    	; 0x4806 <EXTI_System+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4780:	fe 01       	movw	r30, r28
    4782:	eb 55       	subi	r30, 0x5B	; 91
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	60 81       	ld	r22, Z
    4788:	71 81       	ldd	r23, Z+1	; 0x01
    478a:	82 81       	ldd	r24, Z+2	; 0x02
    478c:	93 81       	ldd	r25, Z+3	; 0x03
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	40 e2       	ldi	r20, 0x20	; 32
    4794:	51 e4       	ldi	r21, 0x41	; 65
    4796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	8e 01       	movw	r16, r28
    47a0:	01 56       	subi	r16, 0x61	; 97
    47a2:	1f 4f       	sbci	r17, 0xFF	; 255
    47a4:	bc 01       	movw	r22, r24
    47a6:	cd 01       	movw	r24, r26
    47a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
    47b0:	f8 01       	movw	r30, r16
    47b2:	91 83       	std	Z+1, r25	; 0x01
    47b4:	80 83       	st	Z, r24
    47b6:	1f c0       	rjmp	.+62     	; 0x47f6 <EXTI_System+0xb1c>
    47b8:	fe 01       	movw	r30, r28
    47ba:	e3 56       	subi	r30, 0x63	; 99
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	80 e9       	ldi	r24, 0x90	; 144
    47c0:	91 e0       	ldi	r25, 0x01	; 1
    47c2:	91 83       	std	Z+1, r25	; 0x01
    47c4:	80 83       	st	Z, r24
    47c6:	fe 01       	movw	r30, r28
    47c8:	e3 56       	subi	r30, 0x63	; 99
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	80 81       	ld	r24, Z
    47ce:	91 81       	ldd	r25, Z+1	; 0x01
    47d0:	01 97       	sbiw	r24, 0x01	; 1
    47d2:	f1 f7       	brne	.-4      	; 0x47d0 <EXTI_System+0xaf6>
    47d4:	fe 01       	movw	r30, r28
    47d6:	e3 56       	subi	r30, 0x63	; 99
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47de:	de 01       	movw	r26, r28
    47e0:	a1 56       	subi	r26, 0x61	; 97
    47e2:	bf 4f       	sbci	r27, 0xFF	; 255
    47e4:	fe 01       	movw	r30, r28
    47e6:	e1 56       	subi	r30, 0x61	; 97
    47e8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ea:	80 81       	ld	r24, Z
    47ec:	91 81       	ldd	r25, Z+1	; 0x01
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	11 96       	adiw	r26, 0x01	; 1
    47f2:	9c 93       	st	X, r25
    47f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f6:	fe 01       	movw	r30, r28
    47f8:	e1 56       	subi	r30, 0x61	; 97
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	80 81       	ld	r24, Z
    47fe:	91 81       	ldd	r25, Z+1	; 0x01
    4800:	00 97       	sbiw	r24, 0x00	; 0
    4802:	d1 f6       	brne	.-76     	; 0x47b8 <EXTI_System+0xade>
    4804:	28 c0       	rjmp	.+80     	; 0x4856 <EXTI_System+0xb7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4806:	8e 01       	movw	r16, r28
    4808:	01 56       	subi	r16, 0x61	; 97
    480a:	1f 4f       	sbci	r17, 0xFF	; 255
    480c:	fe 01       	movw	r30, r28
    480e:	ef 55       	subi	r30, 0x5F	; 95
    4810:	ff 4f       	sbci	r31, 0xFF	; 255
    4812:	60 81       	ld	r22, Z
    4814:	71 81       	ldd	r23, Z+1	; 0x01
    4816:	82 81       	ldd	r24, Z+2	; 0x02
    4818:	93 81       	ldd	r25, Z+3	; 0x03
    481a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    481e:	dc 01       	movw	r26, r24
    4820:	cb 01       	movw	r24, r22
    4822:	f8 01       	movw	r30, r16
    4824:	91 83       	std	Z+1, r25	; 0x01
    4826:	80 83       	st	Z, r24
    4828:	de 01       	movw	r26, r28
    482a:	a5 56       	subi	r26, 0x65	; 101
    482c:	bf 4f       	sbci	r27, 0xFF	; 255
    482e:	fe 01       	movw	r30, r28
    4830:	e1 56       	subi	r30, 0x61	; 97
    4832:	ff 4f       	sbci	r31, 0xFF	; 255
    4834:	80 81       	ld	r24, Z
    4836:	91 81       	ldd	r25, Z+1	; 0x01
    4838:	11 96       	adiw	r26, 0x01	; 1
    483a:	9c 93       	st	X, r25
    483c:	8e 93       	st	-X, r24
    483e:	fe 01       	movw	r30, r28
    4840:	e5 56       	subi	r30, 0x65	; 101
    4842:	ff 4f       	sbci	r31, 0xFF	; 255
    4844:	80 81       	ld	r24, Z
    4846:	91 81       	ldd	r25, Z+1	; 0x01
    4848:	01 97       	sbiw	r24, 0x01	; 1
    484a:	f1 f7       	brne	.-4      	; 0x4848 <EXTI_System+0xb6e>
    484c:	fe 01       	movw	r30, r28
    484e:	e5 56       	subi	r30, 0x65	; 101
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	91 83       	std	Z+1, r25	; 0x01
    4854:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 8){
    4856:	fe 01       	movw	r30, r28
    4858:	ea 5f       	subi	r30, 0xFA	; 250
    485a:	fe 4f       	sbci	r31, 0xFE	; 254
    485c:	80 81       	ld	r24, Z
    485e:	88 30       	cpi	r24, 0x08	; 8
    4860:	09 f0       	breq	.+2      	; 0x4864 <EXTI_System+0xb8a>
    4862:	c5 c0       	rjmp	.+394    	; 0x49ee <EXTI_System+0xd14>
				LCD_displayCharacter('*');
    4864:	8a e2       	ldi	r24, 0x2A	; 42
    4866:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '8';
    486a:	80 91 17 01 	lds	r24, 0x0117
    486e:	88 2f       	mov	r24, r24
    4870:	90 e0       	ldi	r25, 0x00	; 0
    4872:	fc 01       	movw	r30, r24
    4874:	e7 5e       	subi	r30, 0xE7	; 231
    4876:	fe 4f       	sbci	r31, 0xFE	; 254
    4878:	88 e3       	ldi	r24, 0x38	; 56
    487a:	80 83       	st	Z, r24
				c++;
    487c:	80 91 17 01 	lds	r24, 0x0117
    4880:	8f 5f       	subi	r24, 0xFF	; 255
    4882:	80 93 17 01 	sts	0x0117, r24
    4886:	fe 01       	movw	r30, r28
    4888:	e9 56       	subi	r30, 0x69	; 105
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	ac e0       	ldi	r26, 0x0C	; 12
    4892:	b2 e4       	ldi	r27, 0x42	; 66
    4894:	80 83       	st	Z, r24
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	a2 83       	std	Z+2, r26	; 0x02
    489a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    489c:	8e 01       	movw	r16, r28
    489e:	0d 56       	subi	r16, 0x6D	; 109
    48a0:	1f 4f       	sbci	r17, 0xFF	; 255
    48a2:	fe 01       	movw	r30, r28
    48a4:	e9 56       	subi	r30, 0x69	; 105
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	60 81       	ld	r22, Z
    48aa:	71 81       	ldd	r23, Z+1	; 0x01
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	93 81       	ldd	r25, Z+3	; 0x03
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	4a e7       	ldi	r20, 0x7A	; 122
    48b6:	55 e4       	ldi	r21, 0x45	; 69
    48b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48bc:	dc 01       	movw	r26, r24
    48be:	cb 01       	movw	r24, r22
    48c0:	f8 01       	movw	r30, r16
    48c2:	80 83       	st	Z, r24
    48c4:	91 83       	std	Z+1, r25	; 0x01
    48c6:	a2 83       	std	Z+2, r26	; 0x02
    48c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48ca:	fe 01       	movw	r30, r28
    48cc:	ed 56       	subi	r30, 0x6D	; 109
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	60 81       	ld	r22, Z
    48d2:	71 81       	ldd	r23, Z+1	; 0x01
    48d4:	82 81       	ldd	r24, Z+2	; 0x02
    48d6:	93 81       	ldd	r25, Z+3	; 0x03
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	40 e8       	ldi	r20, 0x80	; 128
    48de:	5f e3       	ldi	r21, 0x3F	; 63
    48e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48e4:	88 23       	and	r24, r24
    48e6:	44 f4       	brge	.+16     	; 0x48f8 <EXTI_System+0xc1e>
		__ticks = 1;
    48e8:	fe 01       	movw	r30, r28
    48ea:	ef 56       	subi	r30, 0x6F	; 111
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	91 83       	std	Z+1, r25	; 0x01
    48f4:	80 83       	st	Z, r24
    48f6:	64 c0       	rjmp	.+200    	; 0x49c0 <EXTI_System+0xce6>
	else if (__tmp > 65535)
    48f8:	fe 01       	movw	r30, r28
    48fa:	ed 56       	subi	r30, 0x6D	; 109
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	60 81       	ld	r22, Z
    4900:	71 81       	ldd	r23, Z+1	; 0x01
    4902:	82 81       	ldd	r24, Z+2	; 0x02
    4904:	93 81       	ldd	r25, Z+3	; 0x03
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	3f ef       	ldi	r19, 0xFF	; 255
    490a:	4f e7       	ldi	r20, 0x7F	; 127
    490c:	57 e4       	ldi	r21, 0x47	; 71
    490e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4912:	18 16       	cp	r1, r24
    4914:	0c f0       	brlt	.+2      	; 0x4918 <EXTI_System+0xc3e>
    4916:	43 c0       	rjmp	.+134    	; 0x499e <EXTI_System+0xcc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4918:	fe 01       	movw	r30, r28
    491a:	e9 56       	subi	r30, 0x69	; 105
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e2       	ldi	r20, 0x20	; 32
    492c:	51 e4       	ldi	r21, 0x41	; 65
    492e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4932:	dc 01       	movw	r26, r24
    4934:	cb 01       	movw	r24, r22
    4936:	8e 01       	movw	r16, r28
    4938:	0f 56       	subi	r16, 0x6F	; 111
    493a:	1f 4f       	sbci	r17, 0xFF	; 255
    493c:	bc 01       	movw	r22, r24
    493e:	cd 01       	movw	r24, r26
    4940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	f8 01       	movw	r30, r16
    494a:	91 83       	std	Z+1, r25	; 0x01
    494c:	80 83       	st	Z, r24
    494e:	1f c0       	rjmp	.+62     	; 0x498e <EXTI_System+0xcb4>
    4950:	fe 01       	movw	r30, r28
    4952:	e1 57       	subi	r30, 0x71	; 113
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	80 e9       	ldi	r24, 0x90	; 144
    4958:	91 e0       	ldi	r25, 0x01	; 1
    495a:	91 83       	std	Z+1, r25	; 0x01
    495c:	80 83       	st	Z, r24
    495e:	fe 01       	movw	r30, r28
    4960:	e1 57       	subi	r30, 0x71	; 113
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	80 81       	ld	r24, Z
    4966:	91 81       	ldd	r25, Z+1	; 0x01
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	f1 f7       	brne	.-4      	; 0x4968 <EXTI_System+0xc8e>
    496c:	fe 01       	movw	r30, r28
    496e:	e1 57       	subi	r30, 0x71	; 113
    4970:	ff 4f       	sbci	r31, 0xFF	; 255
    4972:	91 83       	std	Z+1, r25	; 0x01
    4974:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4976:	de 01       	movw	r26, r28
    4978:	af 56       	subi	r26, 0x6F	; 111
    497a:	bf 4f       	sbci	r27, 0xFF	; 255
    497c:	fe 01       	movw	r30, r28
    497e:	ef 56       	subi	r30, 0x6F	; 111
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	80 81       	ld	r24, Z
    4984:	91 81       	ldd	r25, Z+1	; 0x01
    4986:	01 97       	sbiw	r24, 0x01	; 1
    4988:	11 96       	adiw	r26, 0x01	; 1
    498a:	9c 93       	st	X, r25
    498c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    498e:	fe 01       	movw	r30, r28
    4990:	ef 56       	subi	r30, 0x6F	; 111
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	80 81       	ld	r24, Z
    4996:	91 81       	ldd	r25, Z+1	; 0x01
    4998:	00 97       	sbiw	r24, 0x00	; 0
    499a:	d1 f6       	brne	.-76     	; 0x4950 <EXTI_System+0xc76>
    499c:	28 c0       	rjmp	.+80     	; 0x49ee <EXTI_System+0xd14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    499e:	8e 01       	movw	r16, r28
    49a0:	0f 56       	subi	r16, 0x6F	; 111
    49a2:	1f 4f       	sbci	r17, 0xFF	; 255
    49a4:	fe 01       	movw	r30, r28
    49a6:	ed 56       	subi	r30, 0x6D	; 109
    49a8:	ff 4f       	sbci	r31, 0xFF	; 255
    49aa:	60 81       	ld	r22, Z
    49ac:	71 81       	ldd	r23, Z+1	; 0x01
    49ae:	82 81       	ldd	r24, Z+2	; 0x02
    49b0:	93 81       	ldd	r25, Z+3	; 0x03
    49b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	f8 01       	movw	r30, r16
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	80 83       	st	Z, r24
    49c0:	de 01       	movw	r26, r28
    49c2:	a3 57       	subi	r26, 0x73	; 115
    49c4:	bf 4f       	sbci	r27, 0xFF	; 255
    49c6:	fe 01       	movw	r30, r28
    49c8:	ef 56       	subi	r30, 0x6F	; 111
    49ca:	ff 4f       	sbci	r31, 0xFF	; 255
    49cc:	80 81       	ld	r24, Z
    49ce:	91 81       	ldd	r25, Z+1	; 0x01
    49d0:	11 96       	adiw	r26, 0x01	; 1
    49d2:	9c 93       	st	X, r25
    49d4:	8e 93       	st	-X, r24
    49d6:	fe 01       	movw	r30, r28
    49d8:	e3 57       	subi	r30, 0x73	; 115
    49da:	ff 4f       	sbci	r31, 0xFF	; 255
    49dc:	80 81       	ld	r24, Z
    49de:	91 81       	ldd	r25, Z+1	; 0x01
    49e0:	01 97       	sbiw	r24, 0x01	; 1
    49e2:	f1 f7       	brne	.-4      	; 0x49e0 <EXTI_System+0xd06>
    49e4:	fe 01       	movw	r30, r28
    49e6:	e3 57       	subi	r30, 0x73	; 115
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	91 83       	std	Z+1, r25	; 0x01
    49ec:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 9){
    49ee:	fe 01       	movw	r30, r28
    49f0:	ea 5f       	subi	r30, 0xFA	; 250
    49f2:	fe 4f       	sbci	r31, 0xFE	; 254
    49f4:	80 81       	ld	r24, Z
    49f6:	89 30       	cpi	r24, 0x09	; 9
    49f8:	09 f0       	breq	.+2      	; 0x49fc <EXTI_System+0xd22>
    49fa:	c5 c0       	rjmp	.+394    	; 0x4b86 <EXTI_System+0xeac>
				LCD_displayCharacter('*');
    49fc:	8a e2       	ldi	r24, 0x2A	; 42
    49fe:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '9';
    4a02:	80 91 17 01 	lds	r24, 0x0117
    4a06:	88 2f       	mov	r24, r24
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	e7 5e       	subi	r30, 0xE7	; 231
    4a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a10:	89 e3       	ldi	r24, 0x39	; 57
    4a12:	80 83       	st	Z, r24
				c++;
    4a14:	80 91 17 01 	lds	r24, 0x0117
    4a18:	8f 5f       	subi	r24, 0xFF	; 255
    4a1a:	80 93 17 01 	sts	0x0117, r24
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e7 57       	subi	r30, 0x77	; 119
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	ac e0       	ldi	r26, 0x0C	; 12
    4a2a:	b2 e4       	ldi	r27, 0x42	; 66
    4a2c:	80 83       	st	Z, r24
    4a2e:	91 83       	std	Z+1, r25	; 0x01
    4a30:	a2 83       	std	Z+2, r26	; 0x02
    4a32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a34:	8e 01       	movw	r16, r28
    4a36:	0b 57       	subi	r16, 0x7B	; 123
    4a38:	1f 4f       	sbci	r17, 0xFF	; 255
    4a3a:	fe 01       	movw	r30, r28
    4a3c:	e7 57       	subi	r30, 0x77	; 119
    4a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a40:	60 81       	ld	r22, Z
    4a42:	71 81       	ldd	r23, Z+1	; 0x01
    4a44:	82 81       	ldd	r24, Z+2	; 0x02
    4a46:	93 81       	ldd	r25, Z+3	; 0x03
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	4a e7       	ldi	r20, 0x7A	; 122
    4a4e:	55 e4       	ldi	r21, 0x45	; 69
    4a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	f8 01       	movw	r30, r16
    4a5a:	80 83       	st	Z, r24
    4a5c:	91 83       	std	Z+1, r25	; 0x01
    4a5e:	a2 83       	std	Z+2, r26	; 0x02
    4a60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a62:	fe 01       	movw	r30, r28
    4a64:	eb 57       	subi	r30, 0x7B	; 123
    4a66:	ff 4f       	sbci	r31, 0xFF	; 255
    4a68:	60 81       	ld	r22, Z
    4a6a:	71 81       	ldd	r23, Z+1	; 0x01
    4a6c:	82 81       	ldd	r24, Z+2	; 0x02
    4a6e:	93 81       	ldd	r25, Z+3	; 0x03
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e8       	ldi	r20, 0x80	; 128
    4a76:	5f e3       	ldi	r21, 0x3F	; 63
    4a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a7c:	88 23       	and	r24, r24
    4a7e:	44 f4       	brge	.+16     	; 0x4a90 <EXTI_System+0xdb6>
		__ticks = 1;
    4a80:	fe 01       	movw	r30, r28
    4a82:	ed 57       	subi	r30, 0x7D	; 125
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	91 83       	std	Z+1, r25	; 0x01
    4a8c:	80 83       	st	Z, r24
    4a8e:	64 c0       	rjmp	.+200    	; 0x4b58 <EXTI_System+0xe7e>
	else if (__tmp > 65535)
    4a90:	fe 01       	movw	r30, r28
    4a92:	eb 57       	subi	r30, 0x7B	; 123
    4a94:	ff 4f       	sbci	r31, 0xFF	; 255
    4a96:	60 81       	ld	r22, Z
    4a98:	71 81       	ldd	r23, Z+1	; 0x01
    4a9a:	82 81       	ldd	r24, Z+2	; 0x02
    4a9c:	93 81       	ldd	r25, Z+3	; 0x03
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	3f ef       	ldi	r19, 0xFF	; 255
    4aa2:	4f e7       	ldi	r20, 0x7F	; 127
    4aa4:	57 e4       	ldi	r21, 0x47	; 71
    4aa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4aaa:	18 16       	cp	r1, r24
    4aac:	0c f0       	brlt	.+2      	; 0x4ab0 <EXTI_System+0xdd6>
    4aae:	43 c0       	rjmp	.+134    	; 0x4b36 <EXTI_System+0xe5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ab0:	fe 01       	movw	r30, r28
    4ab2:	e7 57       	subi	r30, 0x77	; 119
    4ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab6:	60 81       	ld	r22, Z
    4ab8:	71 81       	ldd	r23, Z+1	; 0x01
    4aba:	82 81       	ldd	r24, Z+2	; 0x02
    4abc:	93 81       	ldd	r25, Z+3	; 0x03
    4abe:	20 e0       	ldi	r18, 0x00	; 0
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	40 e2       	ldi	r20, 0x20	; 32
    4ac4:	51 e4       	ldi	r21, 0x41	; 65
    4ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aca:	dc 01       	movw	r26, r24
    4acc:	cb 01       	movw	r24, r22
    4ace:	8e 01       	movw	r16, r28
    4ad0:	0d 57       	subi	r16, 0x7D	; 125
    4ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad4:	bc 01       	movw	r22, r24
    4ad6:	cd 01       	movw	r24, r26
    4ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4adc:	dc 01       	movw	r26, r24
    4ade:	cb 01       	movw	r24, r22
    4ae0:	f8 01       	movw	r30, r16
    4ae2:	91 83       	std	Z+1, r25	; 0x01
    4ae4:	80 83       	st	Z, r24
    4ae6:	1f c0       	rjmp	.+62     	; 0x4b26 <EXTI_System+0xe4c>
    4ae8:	fe 01       	movw	r30, r28
    4aea:	ef 57       	subi	r30, 0x7F	; 127
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	80 e9       	ldi	r24, 0x90	; 144
    4af0:	91 e0       	ldi	r25, 0x01	; 1
    4af2:	91 83       	std	Z+1, r25	; 0x01
    4af4:	80 83       	st	Z, r24
    4af6:	fe 01       	movw	r30, r28
    4af8:	ef 57       	subi	r30, 0x7F	; 127
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	80 81       	ld	r24, Z
    4afe:	91 81       	ldd	r25, Z+1	; 0x01
    4b00:	01 97       	sbiw	r24, 0x01	; 1
    4b02:	f1 f7       	brne	.-4      	; 0x4b00 <EXTI_System+0xe26>
    4b04:	fe 01       	movw	r30, r28
    4b06:	ef 57       	subi	r30, 0x7F	; 127
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	91 83       	std	Z+1, r25	; 0x01
    4b0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b0e:	de 01       	movw	r26, r28
    4b10:	ad 57       	subi	r26, 0x7D	; 125
    4b12:	bf 4f       	sbci	r27, 0xFF	; 255
    4b14:	fe 01       	movw	r30, r28
    4b16:	ed 57       	subi	r30, 0x7D	; 125
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	80 81       	ld	r24, Z
    4b1c:	91 81       	ldd	r25, Z+1	; 0x01
    4b1e:	01 97       	sbiw	r24, 0x01	; 1
    4b20:	11 96       	adiw	r26, 0x01	; 1
    4b22:	9c 93       	st	X, r25
    4b24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b26:	fe 01       	movw	r30, r28
    4b28:	ed 57       	subi	r30, 0x7D	; 125
    4b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2c:	80 81       	ld	r24, Z
    4b2e:	91 81       	ldd	r25, Z+1	; 0x01
    4b30:	00 97       	sbiw	r24, 0x00	; 0
    4b32:	d1 f6       	brne	.-76     	; 0x4ae8 <EXTI_System+0xe0e>
    4b34:	28 c0       	rjmp	.+80     	; 0x4b86 <EXTI_System+0xeac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b36:	8e 01       	movw	r16, r28
    4b38:	0d 57       	subi	r16, 0x7D	; 125
    4b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	eb 57       	subi	r30, 0x7B	; 123
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	60 81       	ld	r22, Z
    4b44:	71 81       	ldd	r23, Z+1	; 0x01
    4b46:	82 81       	ldd	r24, Z+2	; 0x02
    4b48:	93 81       	ldd	r25, Z+3	; 0x03
    4b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	f8 01       	movw	r30, r16
    4b54:	91 83       	std	Z+1, r25	; 0x01
    4b56:	80 83       	st	Z, r24
    4b58:	de 01       	movw	r26, r28
    4b5a:	a1 58       	subi	r26, 0x81	; 129
    4b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b5e:	fe 01       	movw	r30, r28
    4b60:	ed 57       	subi	r30, 0x7D	; 125
    4b62:	ff 4f       	sbci	r31, 0xFF	; 255
    4b64:	80 81       	ld	r24, Z
    4b66:	91 81       	ldd	r25, Z+1	; 0x01
    4b68:	11 96       	adiw	r26, 0x01	; 1
    4b6a:	9c 93       	st	X, r25
    4b6c:	8e 93       	st	-X, r24
    4b6e:	fe 01       	movw	r30, r28
    4b70:	e1 58       	subi	r30, 0x81	; 129
    4b72:	ff 4f       	sbci	r31, 0xFF	; 255
    4b74:	80 81       	ld	r24, Z
    4b76:	91 81       	ldd	r25, Z+1	; 0x01
    4b78:	01 97       	sbiw	r24, 0x01	; 1
    4b7a:	f1 f7       	brne	.-4      	; 0x4b78 <EXTI_System+0xe9e>
    4b7c:	fe 01       	movw	r30, r28
    4b7e:	e1 58       	subi	r30, 0x81	; 129
    4b80:	ff 4f       	sbci	r31, 0xFF	; 255
    4b82:	91 83       	std	Z+1, r25	; 0x01
    4b84:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == '*'){
    4b86:	fe 01       	movw	r30, r28
    4b88:	ea 5f       	subi	r30, 0xFA	; 250
    4b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4b8c:	80 81       	ld	r24, Z
    4b8e:	8a 32       	cpi	r24, 0x2A	; 42
    4b90:	09 f0       	breq	.+2      	; 0x4b94 <EXTI_System+0xeba>
    4b92:	c5 c0       	rjmp	.+394    	; 0x4d1e <EXTI_System+0x1044>
				LCD_displayCharacter('*');
    4b94:	8a e2       	ldi	r24, 0x2A	; 42
    4b96:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '*';
    4b9a:	80 91 17 01 	lds	r24, 0x0117
    4b9e:	88 2f       	mov	r24, r24
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	e7 5e       	subi	r30, 0xE7	; 231
    4ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba8:	8a e2       	ldi	r24, 0x2A	; 42
    4baa:	80 83       	st	Z, r24
				c++;
    4bac:	80 91 17 01 	lds	r24, 0x0117
    4bb0:	8f 5f       	subi	r24, 0xFF	; 255
    4bb2:	80 93 17 01 	sts	0x0117, r24
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	e5 58       	subi	r30, 0x85	; 133
    4bba:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	ac e0       	ldi	r26, 0x0C	; 12
    4bc2:	b2 e4       	ldi	r27, 0x42	; 66
    4bc4:	80 83       	st	Z, r24
    4bc6:	91 83       	std	Z+1, r25	; 0x01
    4bc8:	a2 83       	std	Z+2, r26	; 0x02
    4bca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bcc:	8e 01       	movw	r16, r28
    4bce:	09 58       	subi	r16, 0x89	; 137
    4bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	e5 58       	subi	r30, 0x85	; 133
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	60 81       	ld	r22, Z
    4bda:	71 81       	ldd	r23, Z+1	; 0x01
    4bdc:	82 81       	ldd	r24, Z+2	; 0x02
    4bde:	93 81       	ldd	r25, Z+3	; 0x03
    4be0:	20 e0       	ldi	r18, 0x00	; 0
    4be2:	30 e0       	ldi	r19, 0x00	; 0
    4be4:	4a e7       	ldi	r20, 0x7A	; 122
    4be6:	55 e4       	ldi	r21, 0x45	; 69
    4be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bec:	dc 01       	movw	r26, r24
    4bee:	cb 01       	movw	r24, r22
    4bf0:	f8 01       	movw	r30, r16
    4bf2:	80 83       	st	Z, r24
    4bf4:	91 83       	std	Z+1, r25	; 0x01
    4bf6:	a2 83       	std	Z+2, r26	; 0x02
    4bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e9 58       	subi	r30, 0x89	; 137
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	60 81       	ld	r22, Z
    4c02:	71 81       	ldd	r23, Z+1	; 0x01
    4c04:	82 81       	ldd	r24, Z+2	; 0x02
    4c06:	93 81       	ldd	r25, Z+3	; 0x03
    4c08:	20 e0       	ldi	r18, 0x00	; 0
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	40 e8       	ldi	r20, 0x80	; 128
    4c0e:	5f e3       	ldi	r21, 0x3F	; 63
    4c10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c14:	88 23       	and	r24, r24
    4c16:	44 f4       	brge	.+16     	; 0x4c28 <EXTI_System+0xf4e>
		__ticks = 1;
    4c18:	fe 01       	movw	r30, r28
    4c1a:	eb 58       	subi	r30, 0x8B	; 139
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	91 83       	std	Z+1, r25	; 0x01
    4c24:	80 83       	st	Z, r24
    4c26:	64 c0       	rjmp	.+200    	; 0x4cf0 <EXTI_System+0x1016>
	else if (__tmp > 65535)
    4c28:	fe 01       	movw	r30, r28
    4c2a:	e9 58       	subi	r30, 0x89	; 137
    4c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2e:	60 81       	ld	r22, Z
    4c30:	71 81       	ldd	r23, Z+1	; 0x01
    4c32:	82 81       	ldd	r24, Z+2	; 0x02
    4c34:	93 81       	ldd	r25, Z+3	; 0x03
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	3f ef       	ldi	r19, 0xFF	; 255
    4c3a:	4f e7       	ldi	r20, 0x7F	; 127
    4c3c:	57 e4       	ldi	r21, 0x47	; 71
    4c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c42:	18 16       	cp	r1, r24
    4c44:	0c f0       	brlt	.+2      	; 0x4c48 <EXTI_System+0xf6e>
    4c46:	43 c0       	rjmp	.+134    	; 0x4cce <EXTI_System+0xff4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c48:	fe 01       	movw	r30, r28
    4c4a:	e5 58       	subi	r30, 0x85	; 133
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	60 81       	ld	r22, Z
    4c50:	71 81       	ldd	r23, Z+1	; 0x01
    4c52:	82 81       	ldd	r24, Z+2	; 0x02
    4c54:	93 81       	ldd	r25, Z+3	; 0x03
    4c56:	20 e0       	ldi	r18, 0x00	; 0
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	40 e2       	ldi	r20, 0x20	; 32
    4c5c:	51 e4       	ldi	r21, 0x41	; 65
    4c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c62:	dc 01       	movw	r26, r24
    4c64:	cb 01       	movw	r24, r22
    4c66:	8e 01       	movw	r16, r28
    4c68:	0b 58       	subi	r16, 0x8B	; 139
    4c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c6c:	bc 01       	movw	r22, r24
    4c6e:	cd 01       	movw	r24, r26
    4c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c74:	dc 01       	movw	r26, r24
    4c76:	cb 01       	movw	r24, r22
    4c78:	f8 01       	movw	r30, r16
    4c7a:	91 83       	std	Z+1, r25	; 0x01
    4c7c:	80 83       	st	Z, r24
    4c7e:	1f c0       	rjmp	.+62     	; 0x4cbe <EXTI_System+0xfe4>
    4c80:	fe 01       	movw	r30, r28
    4c82:	ed 58       	subi	r30, 0x8D	; 141
    4c84:	ff 4f       	sbci	r31, 0xFF	; 255
    4c86:	80 e9       	ldi	r24, 0x90	; 144
    4c88:	91 e0       	ldi	r25, 0x01	; 1
    4c8a:	91 83       	std	Z+1, r25	; 0x01
    4c8c:	80 83       	st	Z, r24
    4c8e:	fe 01       	movw	r30, r28
    4c90:	ed 58       	subi	r30, 0x8D	; 141
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	80 81       	ld	r24, Z
    4c96:	91 81       	ldd	r25, Z+1	; 0x01
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	f1 f7       	brne	.-4      	; 0x4c98 <EXTI_System+0xfbe>
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	ed 58       	subi	r30, 0x8D	; 141
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	91 83       	std	Z+1, r25	; 0x01
    4ca4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca6:	de 01       	movw	r26, r28
    4ca8:	ab 58       	subi	r26, 0x8B	; 139
    4caa:	bf 4f       	sbci	r27, 0xFF	; 255
    4cac:	fe 01       	movw	r30, r28
    4cae:	eb 58       	subi	r30, 0x8B	; 139
    4cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb2:	80 81       	ld	r24, Z
    4cb4:	91 81       	ldd	r25, Z+1	; 0x01
    4cb6:	01 97       	sbiw	r24, 0x01	; 1
    4cb8:	11 96       	adiw	r26, 0x01	; 1
    4cba:	9c 93       	st	X, r25
    4cbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	eb 58       	subi	r30, 0x8B	; 139
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	80 81       	ld	r24, Z
    4cc6:	91 81       	ldd	r25, Z+1	; 0x01
    4cc8:	00 97       	sbiw	r24, 0x00	; 0
    4cca:	d1 f6       	brne	.-76     	; 0x4c80 <EXTI_System+0xfa6>
    4ccc:	28 c0       	rjmp	.+80     	; 0x4d1e <EXTI_System+0x1044>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cce:	8e 01       	movw	r16, r28
    4cd0:	0b 58       	subi	r16, 0x8B	; 139
    4cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	e9 58       	subi	r30, 0x89	; 137
    4cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cda:	60 81       	ld	r22, Z
    4cdc:	71 81       	ldd	r23, Z+1	; 0x01
    4cde:	82 81       	ldd	r24, Z+2	; 0x02
    4ce0:	93 81       	ldd	r25, Z+3	; 0x03
    4ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce6:	dc 01       	movw	r26, r24
    4ce8:	cb 01       	movw	r24, r22
    4cea:	f8 01       	movw	r30, r16
    4cec:	91 83       	std	Z+1, r25	; 0x01
    4cee:	80 83       	st	Z, r24
    4cf0:	de 01       	movw	r26, r28
    4cf2:	af 58       	subi	r26, 0x8F	; 143
    4cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	eb 58       	subi	r30, 0x8B	; 139
    4cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfc:	80 81       	ld	r24, Z
    4cfe:	91 81       	ldd	r25, Z+1	; 0x01
    4d00:	11 96       	adiw	r26, 0x01	; 1
    4d02:	9c 93       	st	X, r25
    4d04:	8e 93       	st	-X, r24
    4d06:	fe 01       	movw	r30, r28
    4d08:	ef 58       	subi	r30, 0x8F	; 143
    4d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0c:	80 81       	ld	r24, Z
    4d0e:	91 81       	ldd	r25, Z+1	; 0x01
    4d10:	01 97       	sbiw	r24, 0x01	; 1
    4d12:	f1 f7       	brne	.-4      	; 0x4d10 <EXTI_System+0x1036>
    4d14:	fe 01       	movw	r30, r28
    4d16:	ef 58       	subi	r30, 0x8F	; 143
    4d18:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1a:	91 83       	std	Z+1, r25	; 0x01
    4d1c:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 0){
    4d1e:	fe 01       	movw	r30, r28
    4d20:	ea 5f       	subi	r30, 0xFA	; 250
    4d22:	fe 4f       	sbci	r31, 0xFE	; 254
    4d24:	80 81       	ld	r24, Z
    4d26:	88 23       	and	r24, r24
    4d28:	09 f0       	breq	.+2      	; 0x4d2c <EXTI_System+0x1052>
    4d2a:	c5 c0       	rjmp	.+394    	; 0x4eb6 <EXTI_System+0x11dc>
				LCD_displayCharacter('*');
    4d2c:	8a e2       	ldi	r24, 0x2A	; 42
    4d2e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '0';
    4d32:	80 91 17 01 	lds	r24, 0x0117
    4d36:	88 2f       	mov	r24, r24
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	fc 01       	movw	r30, r24
    4d3c:	e7 5e       	subi	r30, 0xE7	; 231
    4d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d40:	80 e3       	ldi	r24, 0x30	; 48
    4d42:	80 83       	st	Z, r24
				c++;
    4d44:	80 91 17 01 	lds	r24, 0x0117
    4d48:	8f 5f       	subi	r24, 0xFF	; 255
    4d4a:	80 93 17 01 	sts	0x0117, r24
    4d4e:	fe 01       	movw	r30, r28
    4d50:	e3 59       	subi	r30, 0x93	; 147
    4d52:	ff 4f       	sbci	r31, 0xFF	; 255
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	ac e0       	ldi	r26, 0x0C	; 12
    4d5a:	b2 e4       	ldi	r27, 0x42	; 66
    4d5c:	80 83       	st	Z, r24
    4d5e:	91 83       	std	Z+1, r25	; 0x01
    4d60:	a2 83       	std	Z+2, r26	; 0x02
    4d62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d64:	8e 01       	movw	r16, r28
    4d66:	07 59       	subi	r16, 0x97	; 151
    4d68:	1f 4f       	sbci	r17, 0xFF	; 255
    4d6a:	fe 01       	movw	r30, r28
    4d6c:	e3 59       	subi	r30, 0x93	; 147
    4d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d70:	60 81       	ld	r22, Z
    4d72:	71 81       	ldd	r23, Z+1	; 0x01
    4d74:	82 81       	ldd	r24, Z+2	; 0x02
    4d76:	93 81       	ldd	r25, Z+3	; 0x03
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	4a e7       	ldi	r20, 0x7A	; 122
    4d7e:	55 e4       	ldi	r21, 0x45	; 69
    4d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d84:	dc 01       	movw	r26, r24
    4d86:	cb 01       	movw	r24, r22
    4d88:	f8 01       	movw	r30, r16
    4d8a:	80 83       	st	Z, r24
    4d8c:	91 83       	std	Z+1, r25	; 0x01
    4d8e:	a2 83       	std	Z+2, r26	; 0x02
    4d90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d92:	fe 01       	movw	r30, r28
    4d94:	e7 59       	subi	r30, 0x97	; 151
    4d96:	ff 4f       	sbci	r31, 0xFF	; 255
    4d98:	60 81       	ld	r22, Z
    4d9a:	71 81       	ldd	r23, Z+1	; 0x01
    4d9c:	82 81       	ldd	r24, Z+2	; 0x02
    4d9e:	93 81       	ldd	r25, Z+3	; 0x03
    4da0:	20 e0       	ldi	r18, 0x00	; 0
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	40 e8       	ldi	r20, 0x80	; 128
    4da6:	5f e3       	ldi	r21, 0x3F	; 63
    4da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4dac:	88 23       	and	r24, r24
    4dae:	44 f4       	brge	.+16     	; 0x4dc0 <EXTI_System+0x10e6>
		__ticks = 1;
    4db0:	fe 01       	movw	r30, r28
    4db2:	e9 59       	subi	r30, 0x99	; 153
    4db4:	ff 4f       	sbci	r31, 0xFF	; 255
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	91 83       	std	Z+1, r25	; 0x01
    4dbc:	80 83       	st	Z, r24
    4dbe:	64 c0       	rjmp	.+200    	; 0x4e88 <EXTI_System+0x11ae>
	else if (__tmp > 65535)
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	e7 59       	subi	r30, 0x97	; 151
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	60 81       	ld	r22, Z
    4dc8:	71 81       	ldd	r23, Z+1	; 0x01
    4dca:	82 81       	ldd	r24, Z+2	; 0x02
    4dcc:	93 81       	ldd	r25, Z+3	; 0x03
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	3f ef       	ldi	r19, 0xFF	; 255
    4dd2:	4f e7       	ldi	r20, 0x7F	; 127
    4dd4:	57 e4       	ldi	r21, 0x47	; 71
    4dd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4dda:	18 16       	cp	r1, r24
    4ddc:	0c f0       	brlt	.+2      	; 0x4de0 <EXTI_System+0x1106>
    4dde:	43 c0       	rjmp	.+134    	; 0x4e66 <EXTI_System+0x118c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4de0:	fe 01       	movw	r30, r28
    4de2:	e3 59       	subi	r30, 0x93	; 147
    4de4:	ff 4f       	sbci	r31, 0xFF	; 255
    4de6:	60 81       	ld	r22, Z
    4de8:	71 81       	ldd	r23, Z+1	; 0x01
    4dea:	82 81       	ldd	r24, Z+2	; 0x02
    4dec:	93 81       	ldd	r25, Z+3	; 0x03
    4dee:	20 e0       	ldi	r18, 0x00	; 0
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	40 e2       	ldi	r20, 0x20	; 32
    4df4:	51 e4       	ldi	r21, 0x41	; 65
    4df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dfa:	dc 01       	movw	r26, r24
    4dfc:	cb 01       	movw	r24, r22
    4dfe:	8e 01       	movw	r16, r28
    4e00:	09 59       	subi	r16, 0x99	; 153
    4e02:	1f 4f       	sbci	r17, 0xFF	; 255
    4e04:	bc 01       	movw	r22, r24
    4e06:	cd 01       	movw	r24, r26
    4e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e0c:	dc 01       	movw	r26, r24
    4e0e:	cb 01       	movw	r24, r22
    4e10:	f8 01       	movw	r30, r16
    4e12:	91 83       	std	Z+1, r25	; 0x01
    4e14:	80 83       	st	Z, r24
    4e16:	1f c0       	rjmp	.+62     	; 0x4e56 <EXTI_System+0x117c>
    4e18:	fe 01       	movw	r30, r28
    4e1a:	eb 59       	subi	r30, 0x9B	; 155
    4e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1e:	80 e9       	ldi	r24, 0x90	; 144
    4e20:	91 e0       	ldi	r25, 0x01	; 1
    4e22:	91 83       	std	Z+1, r25	; 0x01
    4e24:	80 83       	st	Z, r24
    4e26:	fe 01       	movw	r30, r28
    4e28:	eb 59       	subi	r30, 0x9B	; 155
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	80 81       	ld	r24, Z
    4e2e:	91 81       	ldd	r25, Z+1	; 0x01
    4e30:	01 97       	sbiw	r24, 0x01	; 1
    4e32:	f1 f7       	brne	.-4      	; 0x4e30 <EXTI_System+0x1156>
    4e34:	fe 01       	movw	r30, r28
    4e36:	eb 59       	subi	r30, 0x9B	; 155
    4e38:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3a:	91 83       	std	Z+1, r25	; 0x01
    4e3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e3e:	de 01       	movw	r26, r28
    4e40:	a9 59       	subi	r26, 0x99	; 153
    4e42:	bf 4f       	sbci	r27, 0xFF	; 255
    4e44:	fe 01       	movw	r30, r28
    4e46:	e9 59       	subi	r30, 0x99	; 153
    4e48:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4a:	80 81       	ld	r24, Z
    4e4c:	91 81       	ldd	r25, Z+1	; 0x01
    4e4e:	01 97       	sbiw	r24, 0x01	; 1
    4e50:	11 96       	adiw	r26, 0x01	; 1
    4e52:	9c 93       	st	X, r25
    4e54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e56:	fe 01       	movw	r30, r28
    4e58:	e9 59       	subi	r30, 0x99	; 153
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	80 81       	ld	r24, Z
    4e5e:	91 81       	ldd	r25, Z+1	; 0x01
    4e60:	00 97       	sbiw	r24, 0x00	; 0
    4e62:	d1 f6       	brne	.-76     	; 0x4e18 <EXTI_System+0x113e>
    4e64:	28 c0       	rjmp	.+80     	; 0x4eb6 <EXTI_System+0x11dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e66:	8e 01       	movw	r16, r28
    4e68:	09 59       	subi	r16, 0x99	; 153
    4e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	e7 59       	subi	r30, 0x97	; 151
    4e70:	ff 4f       	sbci	r31, 0xFF	; 255
    4e72:	60 81       	ld	r22, Z
    4e74:	71 81       	ldd	r23, Z+1	; 0x01
    4e76:	82 81       	ldd	r24, Z+2	; 0x02
    4e78:	93 81       	ldd	r25, Z+3	; 0x03
    4e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7e:	dc 01       	movw	r26, r24
    4e80:	cb 01       	movw	r24, r22
    4e82:	f8 01       	movw	r30, r16
    4e84:	91 83       	std	Z+1, r25	; 0x01
    4e86:	80 83       	st	Z, r24
    4e88:	de 01       	movw	r26, r28
    4e8a:	ad 59       	subi	r26, 0x9D	; 157
    4e8c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e8e:	fe 01       	movw	r30, r28
    4e90:	e9 59       	subi	r30, 0x99	; 153
    4e92:	ff 4f       	sbci	r31, 0xFF	; 255
    4e94:	80 81       	ld	r24, Z
    4e96:	91 81       	ldd	r25, Z+1	; 0x01
    4e98:	11 96       	adiw	r26, 0x01	; 1
    4e9a:	9c 93       	st	X, r25
    4e9c:	8e 93       	st	-X, r24
    4e9e:	fe 01       	movw	r30, r28
    4ea0:	ed 59       	subi	r30, 0x9D	; 157
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	80 81       	ld	r24, Z
    4ea6:	91 81       	ldd	r25, Z+1	; 0x01
    4ea8:	01 97       	sbiw	r24, 0x01	; 1
    4eaa:	f1 f7       	brne	.-4      	; 0x4ea8 <EXTI_System+0x11ce>
    4eac:	fe 01       	movw	r30, r28
    4eae:	ed 59       	subi	r30, 0x9D	; 157
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	91 83       	std	Z+1, r25	; 0x01
    4eb4:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == '#'){
    4eb6:	fe 01       	movw	r30, r28
    4eb8:	ea 5f       	subi	r30, 0xFA	; 250
    4eba:	fe 4f       	sbci	r31, 0xFE	; 254
    4ebc:	80 81       	ld	r24, Z
    4ebe:	83 32       	cpi	r24, 0x23	; 35
    4ec0:	09 f0       	breq	.+2      	; 0x4ec4 <EXTI_System+0x11ea>
    4ec2:	c5 c0       	rjmp	.+394    	; 0x504e <EXTI_System+0x1374>
				LCD_displayCharacter('*');
    4ec4:	8a e2       	ldi	r24, 0x2A	; 42
    4ec6:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_displayCharacter>
				pressed_Keys[c] = '#';
    4eca:	80 91 17 01 	lds	r24, 0x0117
    4ece:	88 2f       	mov	r24, r24
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	e7 5e       	subi	r30, 0xE7	; 231
    4ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ed8:	83 e2       	ldi	r24, 0x23	; 35
    4eda:	80 83       	st	Z, r24
				c++;
    4edc:	80 91 17 01 	lds	r24, 0x0117
    4ee0:	8f 5f       	subi	r24, 0xFF	; 255
    4ee2:	80 93 17 01 	sts	0x0117, r24
    4ee6:	fe 01       	movw	r30, r28
    4ee8:	e1 5a       	subi	r30, 0xA1	; 161
    4eea:	ff 4f       	sbci	r31, 0xFF	; 255
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	ac e0       	ldi	r26, 0x0C	; 12
    4ef2:	b2 e4       	ldi	r27, 0x42	; 66
    4ef4:	80 83       	st	Z, r24
    4ef6:	91 83       	std	Z+1, r25	; 0x01
    4ef8:	a2 83       	std	Z+2, r26	; 0x02
    4efa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4efc:	8e 01       	movw	r16, r28
    4efe:	05 5a       	subi	r16, 0xA5	; 165
    4f00:	1f 4f       	sbci	r17, 0xFF	; 255
    4f02:	fe 01       	movw	r30, r28
    4f04:	e1 5a       	subi	r30, 0xA1	; 161
    4f06:	ff 4f       	sbci	r31, 0xFF	; 255
    4f08:	60 81       	ld	r22, Z
    4f0a:	71 81       	ldd	r23, Z+1	; 0x01
    4f0c:	82 81       	ldd	r24, Z+2	; 0x02
    4f0e:	93 81       	ldd	r25, Z+3	; 0x03
    4f10:	20 e0       	ldi	r18, 0x00	; 0
    4f12:	30 e0       	ldi	r19, 0x00	; 0
    4f14:	4a e7       	ldi	r20, 0x7A	; 122
    4f16:	55 e4       	ldi	r21, 0x45	; 69
    4f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f1c:	dc 01       	movw	r26, r24
    4f1e:	cb 01       	movw	r24, r22
    4f20:	f8 01       	movw	r30, r16
    4f22:	80 83       	st	Z, r24
    4f24:	91 83       	std	Z+1, r25	; 0x01
    4f26:	a2 83       	std	Z+2, r26	; 0x02
    4f28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	e5 5a       	subi	r30, 0xA5	; 165
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	60 81       	ld	r22, Z
    4f32:	71 81       	ldd	r23, Z+1	; 0x01
    4f34:	82 81       	ldd	r24, Z+2	; 0x02
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	20 e0       	ldi	r18, 0x00	; 0
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	40 e8       	ldi	r20, 0x80	; 128
    4f3e:	5f e3       	ldi	r21, 0x3F	; 63
    4f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f44:	88 23       	and	r24, r24
    4f46:	44 f4       	brge	.+16     	; 0x4f58 <EXTI_System+0x127e>
		__ticks = 1;
    4f48:	fe 01       	movw	r30, r28
    4f4a:	e7 5a       	subi	r30, 0xA7	; 167
    4f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	91 83       	std	Z+1, r25	; 0x01
    4f54:	80 83       	st	Z, r24
    4f56:	64 c0       	rjmp	.+200    	; 0x5020 <EXTI_System+0x1346>
	else if (__tmp > 65535)
    4f58:	fe 01       	movw	r30, r28
    4f5a:	e5 5a       	subi	r30, 0xA5	; 165
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	60 81       	ld	r22, Z
    4f60:	71 81       	ldd	r23, Z+1	; 0x01
    4f62:	82 81       	ldd	r24, Z+2	; 0x02
    4f64:	93 81       	ldd	r25, Z+3	; 0x03
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	3f ef       	ldi	r19, 0xFF	; 255
    4f6a:	4f e7       	ldi	r20, 0x7F	; 127
    4f6c:	57 e4       	ldi	r21, 0x47	; 71
    4f6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f72:	18 16       	cp	r1, r24
    4f74:	0c f0       	brlt	.+2      	; 0x4f78 <EXTI_System+0x129e>
    4f76:	43 c0       	rjmp	.+134    	; 0x4ffe <EXTI_System+0x1324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f78:	fe 01       	movw	r30, r28
    4f7a:	e1 5a       	subi	r30, 0xA1	; 161
    4f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7e:	60 81       	ld	r22, Z
    4f80:	71 81       	ldd	r23, Z+1	; 0x01
    4f82:	82 81       	ldd	r24, Z+2	; 0x02
    4f84:	93 81       	ldd	r25, Z+3	; 0x03
    4f86:	20 e0       	ldi	r18, 0x00	; 0
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	40 e2       	ldi	r20, 0x20	; 32
    4f8c:	51 e4       	ldi	r21, 0x41	; 65
    4f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
    4f96:	8e 01       	movw	r16, r28
    4f98:	07 5a       	subi	r16, 0xA7	; 167
    4f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9c:	bc 01       	movw	r22, r24
    4f9e:	cd 01       	movw	r24, r26
    4fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fa4:	dc 01       	movw	r26, r24
    4fa6:	cb 01       	movw	r24, r22
    4fa8:	f8 01       	movw	r30, r16
    4faa:	91 83       	std	Z+1, r25	; 0x01
    4fac:	80 83       	st	Z, r24
    4fae:	1f c0       	rjmp	.+62     	; 0x4fee <EXTI_System+0x1314>
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e9 5a       	subi	r30, 0xA9	; 169
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	80 e9       	ldi	r24, 0x90	; 144
    4fb8:	91 e0       	ldi	r25, 0x01	; 1
    4fba:	91 83       	std	Z+1, r25	; 0x01
    4fbc:	80 83       	st	Z, r24
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	e9 5a       	subi	r30, 0xA9	; 169
    4fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc4:	80 81       	ld	r24, Z
    4fc6:	91 81       	ldd	r25, Z+1	; 0x01
    4fc8:	01 97       	sbiw	r24, 0x01	; 1
    4fca:	f1 f7       	brne	.-4      	; 0x4fc8 <EXTI_System+0x12ee>
    4fcc:	fe 01       	movw	r30, r28
    4fce:	e9 5a       	subi	r30, 0xA9	; 169
    4fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd2:	91 83       	std	Z+1, r25	; 0x01
    4fd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd6:	de 01       	movw	r26, r28
    4fd8:	a7 5a       	subi	r26, 0xA7	; 167
    4fda:	bf 4f       	sbci	r27, 0xFF	; 255
    4fdc:	fe 01       	movw	r30, r28
    4fde:	e7 5a       	subi	r30, 0xA7	; 167
    4fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe2:	80 81       	ld	r24, Z
    4fe4:	91 81       	ldd	r25, Z+1	; 0x01
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	11 96       	adiw	r26, 0x01	; 1
    4fea:	9c 93       	st	X, r25
    4fec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fee:	fe 01       	movw	r30, r28
    4ff0:	e7 5a       	subi	r30, 0xA7	; 167
    4ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff4:	80 81       	ld	r24, Z
    4ff6:	91 81       	ldd	r25, Z+1	; 0x01
    4ff8:	00 97       	sbiw	r24, 0x00	; 0
    4ffa:	d1 f6       	brne	.-76     	; 0x4fb0 <EXTI_System+0x12d6>
    4ffc:	28 c0       	rjmp	.+80     	; 0x504e <EXTI_System+0x1374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ffe:	8e 01       	movw	r16, r28
    5000:	07 5a       	subi	r16, 0xA7	; 167
    5002:	1f 4f       	sbci	r17, 0xFF	; 255
    5004:	fe 01       	movw	r30, r28
    5006:	e5 5a       	subi	r30, 0xA5	; 165
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	60 81       	ld	r22, Z
    500c:	71 81       	ldd	r23, Z+1	; 0x01
    500e:	82 81       	ldd	r24, Z+2	; 0x02
    5010:	93 81       	ldd	r25, Z+3	; 0x03
    5012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5016:	dc 01       	movw	r26, r24
    5018:	cb 01       	movw	r24, r22
    501a:	f8 01       	movw	r30, r16
    501c:	91 83       	std	Z+1, r25	; 0x01
    501e:	80 83       	st	Z, r24
    5020:	de 01       	movw	r26, r28
    5022:	ab 5a       	subi	r26, 0xAB	; 171
    5024:	bf 4f       	sbci	r27, 0xFF	; 255
    5026:	fe 01       	movw	r30, r28
    5028:	e7 5a       	subi	r30, 0xA7	; 167
    502a:	ff 4f       	sbci	r31, 0xFF	; 255
    502c:	80 81       	ld	r24, Z
    502e:	91 81       	ldd	r25, Z+1	; 0x01
    5030:	11 96       	adiw	r26, 0x01	; 1
    5032:	9c 93       	st	X, r25
    5034:	8e 93       	st	-X, r24
    5036:	fe 01       	movw	r30, r28
    5038:	eb 5a       	subi	r30, 0xAB	; 171
    503a:	ff 4f       	sbci	r31, 0xFF	; 255
    503c:	80 81       	ld	r24, Z
    503e:	91 81       	ldd	r25, Z+1	; 0x01
    5040:	01 97       	sbiw	r24, 0x01	; 1
    5042:	f1 f7       	brne	.-4      	; 0x5040 <EXTI_System+0x1366>
    5044:	fe 01       	movw	r30, r28
    5046:	eb 5a       	subi	r30, 0xAB	; 171
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	91 83       	std	Z+1, r25	; 0x01
    504c:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(c == Password_Length){
    504e:	80 91 17 01 	lds	r24, 0x0117
    5052:	86 30       	cpi	r24, 0x06	; 6
    5054:	11 f0       	breq	.+4      	; 0x505a <EXTI_System+0x1380>
    5056:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <EXTI_System+0x48>
				for(int i = 0; i < 5; i++){
    505a:	fe 01       	movw	r30, r28
    505c:	ec 5f       	subi	r30, 0xFC	; 252
    505e:	fe 4f       	sbci	r31, 0xFE	; 254
    5060:	11 82       	std	Z+1, r1	; 0x01
    5062:	10 82       	st	Z, r1
    5064:	fe 01       	movw	r30, r28
    5066:	ec 5f       	subi	r30, 0xFC	; 252
    5068:	fe 4f       	sbci	r31, 0xFE	; 254
    506a:	80 81       	ld	r24, Z
    506c:	91 81       	ldd	r25, Z+1	; 0x01
    506e:	85 30       	cpi	r24, 0x05	; 5
    5070:	91 05       	cpc	r25, r1
    5072:	14 f0       	brlt	.+4      	; 0x5078 <EXTI_System+0x139e>
    5074:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <EXTI_System+0x48>
					if(pressed_Keys[i] == password[i]){
    5078:	fe 01       	movw	r30, r28
    507a:	ec 5f       	subi	r30, 0xFC	; 252
    507c:	fe 4f       	sbci	r31, 0xFE	; 254
    507e:	80 81       	ld	r24, Z
    5080:	91 81       	ldd	r25, Z+1	; 0x01
    5082:	fc 01       	movw	r30, r24
    5084:	e7 5e       	subi	r30, 0xE7	; 231
    5086:	fe 4f       	sbci	r31, 0xFE	; 254
    5088:	20 81       	ld	r18, Z
    508a:	fe 01       	movw	r30, r28
    508c:	ec 5f       	subi	r30, 0xFC	; 252
    508e:	fe 4f       	sbci	r31, 0xFE	; 254
    5090:	80 81       	ld	r24, Z
    5092:	91 81       	ldd	r25, Z+1	; 0x01
    5094:	fc 01       	movw	r30, r24
    5096:	eb 5f       	subi	r30, 0xFB	; 251
    5098:	fe 4f       	sbci	r31, 0xFE	; 254
    509a:	80 81       	ld	r24, Z
    509c:	28 17       	cp	r18, r24
    509e:	09 f0       	breq	.+2      	; 0x50a2 <EXTI_System+0x13c8>
    50a0:	0a c4       	rjmp	.+2068   	; 0x58b6 <EXTI_System+0x1bdc>
						LCD_ClearScreen();
    50a2:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
						LCD_displayString("Correct Password");
    50a6:	8f eb       	ldi	r24, 0xBF	; 191
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
    50ae:	fe 01       	movw	r30, r28
    50b0:	ef 5a       	subi	r30, 0xAF	; 175
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	ac e0       	ldi	r26, 0x0C	; 12
    50ba:	b2 e4       	ldi	r27, 0x42	; 66
    50bc:	80 83       	st	Z, r24
    50be:	91 83       	std	Z+1, r25	; 0x01
    50c0:	a2 83       	std	Z+2, r26	; 0x02
    50c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50c4:	8e 01       	movw	r16, r28
    50c6:	03 5b       	subi	r16, 0xB3	; 179
    50c8:	1f 4f       	sbci	r17, 0xFF	; 255
    50ca:	fe 01       	movw	r30, r28
    50cc:	ef 5a       	subi	r30, 0xAF	; 175
    50ce:	ff 4f       	sbci	r31, 0xFF	; 255
    50d0:	60 81       	ld	r22, Z
    50d2:	71 81       	ldd	r23, Z+1	; 0x01
    50d4:	82 81       	ldd	r24, Z+2	; 0x02
    50d6:	93 81       	ldd	r25, Z+3	; 0x03
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	4a e7       	ldi	r20, 0x7A	; 122
    50de:	55 e4       	ldi	r21, 0x45	; 69
    50e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e4:	dc 01       	movw	r26, r24
    50e6:	cb 01       	movw	r24, r22
    50e8:	f8 01       	movw	r30, r16
    50ea:	80 83       	st	Z, r24
    50ec:	91 83       	std	Z+1, r25	; 0x01
    50ee:	a2 83       	std	Z+2, r26	; 0x02
    50f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50f2:	fe 01       	movw	r30, r28
    50f4:	e3 5b       	subi	r30, 0xB3	; 179
    50f6:	ff 4f       	sbci	r31, 0xFF	; 255
    50f8:	60 81       	ld	r22, Z
    50fa:	71 81       	ldd	r23, Z+1	; 0x01
    50fc:	82 81       	ldd	r24, Z+2	; 0x02
    50fe:	93 81       	ldd	r25, Z+3	; 0x03
    5100:	20 e0       	ldi	r18, 0x00	; 0
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	40 e8       	ldi	r20, 0x80	; 128
    5106:	5f e3       	ldi	r21, 0x3F	; 63
    5108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    510c:	88 23       	and	r24, r24
    510e:	44 f4       	brge	.+16     	; 0x5120 <EXTI_System+0x1446>
		__ticks = 1;
    5110:	fe 01       	movw	r30, r28
    5112:	e5 5b       	subi	r30, 0xB5	; 181
    5114:	ff 4f       	sbci	r31, 0xFF	; 255
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	91 83       	std	Z+1, r25	; 0x01
    511c:	80 83       	st	Z, r24
    511e:	64 c0       	rjmp	.+200    	; 0x51e8 <EXTI_System+0x150e>
	else if (__tmp > 65535)
    5120:	fe 01       	movw	r30, r28
    5122:	e3 5b       	subi	r30, 0xB3	; 179
    5124:	ff 4f       	sbci	r31, 0xFF	; 255
    5126:	60 81       	ld	r22, Z
    5128:	71 81       	ldd	r23, Z+1	; 0x01
    512a:	82 81       	ldd	r24, Z+2	; 0x02
    512c:	93 81       	ldd	r25, Z+3	; 0x03
    512e:	20 e0       	ldi	r18, 0x00	; 0
    5130:	3f ef       	ldi	r19, 0xFF	; 255
    5132:	4f e7       	ldi	r20, 0x7F	; 127
    5134:	57 e4       	ldi	r21, 0x47	; 71
    5136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    513a:	18 16       	cp	r1, r24
    513c:	0c f0       	brlt	.+2      	; 0x5140 <EXTI_System+0x1466>
    513e:	43 c0       	rjmp	.+134    	; 0x51c6 <EXTI_System+0x14ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5140:	fe 01       	movw	r30, r28
    5142:	ef 5a       	subi	r30, 0xAF	; 175
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	60 81       	ld	r22, Z
    5148:	71 81       	ldd	r23, Z+1	; 0x01
    514a:	82 81       	ldd	r24, Z+2	; 0x02
    514c:	93 81       	ldd	r25, Z+3	; 0x03
    514e:	20 e0       	ldi	r18, 0x00	; 0
    5150:	30 e0       	ldi	r19, 0x00	; 0
    5152:	40 e2       	ldi	r20, 0x20	; 32
    5154:	51 e4       	ldi	r21, 0x41	; 65
    5156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    515a:	dc 01       	movw	r26, r24
    515c:	cb 01       	movw	r24, r22
    515e:	8e 01       	movw	r16, r28
    5160:	05 5b       	subi	r16, 0xB5	; 181
    5162:	1f 4f       	sbci	r17, 0xFF	; 255
    5164:	bc 01       	movw	r22, r24
    5166:	cd 01       	movw	r24, r26
    5168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    516c:	dc 01       	movw	r26, r24
    516e:	cb 01       	movw	r24, r22
    5170:	f8 01       	movw	r30, r16
    5172:	91 83       	std	Z+1, r25	; 0x01
    5174:	80 83       	st	Z, r24
    5176:	1f c0       	rjmp	.+62     	; 0x51b6 <EXTI_System+0x14dc>
    5178:	fe 01       	movw	r30, r28
    517a:	e7 5b       	subi	r30, 0xB7	; 183
    517c:	ff 4f       	sbci	r31, 0xFF	; 255
    517e:	80 e9       	ldi	r24, 0x90	; 144
    5180:	91 e0       	ldi	r25, 0x01	; 1
    5182:	91 83       	std	Z+1, r25	; 0x01
    5184:	80 83       	st	Z, r24
    5186:	fe 01       	movw	r30, r28
    5188:	e7 5b       	subi	r30, 0xB7	; 183
    518a:	ff 4f       	sbci	r31, 0xFF	; 255
    518c:	80 81       	ld	r24, Z
    518e:	91 81       	ldd	r25, Z+1	; 0x01
    5190:	01 97       	sbiw	r24, 0x01	; 1
    5192:	f1 f7       	brne	.-4      	; 0x5190 <EXTI_System+0x14b6>
    5194:	fe 01       	movw	r30, r28
    5196:	e7 5b       	subi	r30, 0xB7	; 183
    5198:	ff 4f       	sbci	r31, 0xFF	; 255
    519a:	91 83       	std	Z+1, r25	; 0x01
    519c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    519e:	de 01       	movw	r26, r28
    51a0:	a5 5b       	subi	r26, 0xB5	; 181
    51a2:	bf 4f       	sbci	r27, 0xFF	; 255
    51a4:	fe 01       	movw	r30, r28
    51a6:	e5 5b       	subi	r30, 0xB5	; 181
    51a8:	ff 4f       	sbci	r31, 0xFF	; 255
    51aa:	80 81       	ld	r24, Z
    51ac:	91 81       	ldd	r25, Z+1	; 0x01
    51ae:	01 97       	sbiw	r24, 0x01	; 1
    51b0:	11 96       	adiw	r26, 0x01	; 1
    51b2:	9c 93       	st	X, r25
    51b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51b6:	fe 01       	movw	r30, r28
    51b8:	e5 5b       	subi	r30, 0xB5	; 181
    51ba:	ff 4f       	sbci	r31, 0xFF	; 255
    51bc:	80 81       	ld	r24, Z
    51be:	91 81       	ldd	r25, Z+1	; 0x01
    51c0:	00 97       	sbiw	r24, 0x00	; 0
    51c2:	d1 f6       	brne	.-76     	; 0x5178 <EXTI_System+0x149e>
    51c4:	27 c0       	rjmp	.+78     	; 0x5214 <EXTI_System+0x153a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51c6:	8e 01       	movw	r16, r28
    51c8:	05 5b       	subi	r16, 0xB5	; 181
    51ca:	1f 4f       	sbci	r17, 0xFF	; 255
    51cc:	fe 01       	movw	r30, r28
    51ce:	e3 5b       	subi	r30, 0xB3	; 179
    51d0:	ff 4f       	sbci	r31, 0xFF	; 255
    51d2:	60 81       	ld	r22, Z
    51d4:	71 81       	ldd	r23, Z+1	; 0x01
    51d6:	82 81       	ldd	r24, Z+2	; 0x02
    51d8:	93 81       	ldd	r25, Z+3	; 0x03
    51da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51de:	dc 01       	movw	r26, r24
    51e0:	cb 01       	movw	r24, r22
    51e2:	f8 01       	movw	r30, r16
    51e4:	91 83       	std	Z+1, r25	; 0x01
    51e6:	80 83       	st	Z, r24
    51e8:	de 01       	movw	r26, r28
    51ea:	a9 5b       	subi	r26, 0xB9	; 185
    51ec:	bf 4f       	sbci	r27, 0xFF	; 255
    51ee:	fe 01       	movw	r30, r28
    51f0:	e5 5b       	subi	r30, 0xB5	; 181
    51f2:	ff 4f       	sbci	r31, 0xFF	; 255
    51f4:	80 81       	ld	r24, Z
    51f6:	91 81       	ldd	r25, Z+1	; 0x01
    51f8:	8d 93       	st	X+, r24
    51fa:	9c 93       	st	X, r25
    51fc:	fe 01       	movw	r30, r28
    51fe:	e9 5b       	subi	r30, 0xB9	; 185
    5200:	ff 4f       	sbci	r31, 0xFF	; 255
    5202:	80 81       	ld	r24, Z
    5204:	91 81       	ldd	r25, Z+1	; 0x01
    5206:	01 97       	sbiw	r24, 0x01	; 1
    5208:	f1 f7       	brne	.-4      	; 0x5206 <EXTI_System+0x152c>
    520a:	fe 01       	movw	r30, r28
    520c:	e9 5b       	subi	r30, 0xB9	; 185
    520e:	ff 4f       	sbci	r31, 0xFF	; 255
    5210:	91 83       	std	Z+1, r25	; 0x01
    5212:	80 83       	st	Z, r24
						_delay_ms(35);
						LCD_ClearScreen();
    5214:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>

						// Dc Motor

						LCD_displayString("Welcome to Motor");
    5218:	80 ed       	ldi	r24, 0xD0	; 208
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
						LCD_GoToXY(1, 0);
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	60 e0       	ldi	r22, 0x00	; 0
    5224:	0e 94 25 19 	call	0x324a	; 0x324a <LCD_GoToXY>
						LCD_displayString("DachBoard");
    5228:	81 ee       	ldi	r24, 0xE1	; 225
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
						First_Screen();
    5230:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <First_Screen>

						while(1){
							u8 key_Motor = Keypad_GetPressedKey();
    5234:	0e 94 c5 1b 	call	0x378a	; 0x378a <Keypad_GetPressedKey>
    5238:	fe 01       	movw	r30, r28
    523a:	ed 5f       	subi	r30, 0xFD	; 253
    523c:	fe 4f       	sbci	r31, 0xFE	; 254
    523e:	80 83       	st	Z, r24
							if(key_Motor == 1){
    5240:	fe 01       	movw	r30, r28
    5242:	ed 5f       	subi	r30, 0xFD	; 253
    5244:	fe 4f       	sbci	r31, 0xFE	; 254
    5246:	80 81       	ld	r24, Z
    5248:	81 30       	cpi	r24, 0x01	; 1
    524a:	09 f0       	breq	.+2      	; 0x524e <EXTI_System+0x1574>
    524c:	c8 c2       	rjmp	.+1424   	; 0x57de <EXTI_System+0x1b04>
								Second_Screen();
    524e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <Second_Screen>
    5252:	fe 01       	movw	r30, r28
    5254:	ed 5b       	subi	r30, 0xBD	; 189
    5256:	ff 4f       	sbci	r31, 0xFF	; 255
    5258:	80 e0       	ldi	r24, 0x00	; 0
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	ac e0       	ldi	r26, 0x0C	; 12
    525e:	b2 e4       	ldi	r27, 0x42	; 66
    5260:	80 83       	st	Z, r24
    5262:	91 83       	std	Z+1, r25	; 0x01
    5264:	a2 83       	std	Z+2, r26	; 0x02
    5266:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5268:	8e 01       	movw	r16, r28
    526a:	01 5c       	subi	r16, 0xC1	; 193
    526c:	1f 4f       	sbci	r17, 0xFF	; 255
    526e:	fe 01       	movw	r30, r28
    5270:	ed 5b       	subi	r30, 0xBD	; 189
    5272:	ff 4f       	sbci	r31, 0xFF	; 255
    5274:	60 81       	ld	r22, Z
    5276:	71 81       	ldd	r23, Z+1	; 0x01
    5278:	82 81       	ldd	r24, Z+2	; 0x02
    527a:	93 81       	ldd	r25, Z+3	; 0x03
    527c:	20 e0       	ldi	r18, 0x00	; 0
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	4a e7       	ldi	r20, 0x7A	; 122
    5282:	55 e4       	ldi	r21, 0x45	; 69
    5284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5288:	dc 01       	movw	r26, r24
    528a:	cb 01       	movw	r24, r22
    528c:	f8 01       	movw	r30, r16
    528e:	80 83       	st	Z, r24
    5290:	91 83       	std	Z+1, r25	; 0x01
    5292:	a2 83       	std	Z+2, r26	; 0x02
    5294:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5296:	fe 01       	movw	r30, r28
    5298:	ff 96       	adiw	r30, 0x3f	; 63
    529a:	60 81       	ld	r22, Z
    529c:	71 81       	ldd	r23, Z+1	; 0x01
    529e:	82 81       	ldd	r24, Z+2	; 0x02
    52a0:	93 81       	ldd	r25, Z+3	; 0x03
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	40 e8       	ldi	r20, 0x80	; 128
    52a8:	5f e3       	ldi	r21, 0x3F	; 63
    52aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52ae:	88 23       	and	r24, r24
    52b0:	2c f4       	brge	.+10     	; 0x52bc <EXTI_System+0x15e2>
		__ticks = 1;
    52b2:	81 e0       	ldi	r24, 0x01	; 1
    52b4:	90 e0       	ldi	r25, 0x00	; 0
    52b6:	9e af       	std	Y+62, r25	; 0x3e
    52b8:	8d af       	std	Y+61, r24	; 0x3d
    52ba:	46 c0       	rjmp	.+140    	; 0x5348 <EXTI_System+0x166e>
	else if (__tmp > 65535)
    52bc:	fe 01       	movw	r30, r28
    52be:	ff 96       	adiw	r30, 0x3f	; 63
    52c0:	60 81       	ld	r22, Z
    52c2:	71 81       	ldd	r23, Z+1	; 0x01
    52c4:	82 81       	ldd	r24, Z+2	; 0x02
    52c6:	93 81       	ldd	r25, Z+3	; 0x03
    52c8:	20 e0       	ldi	r18, 0x00	; 0
    52ca:	3f ef       	ldi	r19, 0xFF	; 255
    52cc:	4f e7       	ldi	r20, 0x7F	; 127
    52ce:	57 e4       	ldi	r21, 0x47	; 71
    52d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52d4:	18 16       	cp	r1, r24
    52d6:	64 f5       	brge	.+88     	; 0x5330 <EXTI_System+0x1656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52d8:	fe 01       	movw	r30, r28
    52da:	ed 5b       	subi	r30, 0xBD	; 189
    52dc:	ff 4f       	sbci	r31, 0xFF	; 255
    52de:	60 81       	ld	r22, Z
    52e0:	71 81       	ldd	r23, Z+1	; 0x01
    52e2:	82 81       	ldd	r24, Z+2	; 0x02
    52e4:	93 81       	ldd	r25, Z+3	; 0x03
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	40 e2       	ldi	r20, 0x20	; 32
    52ec:	51 e4       	ldi	r21, 0x41	; 65
    52ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f2:	dc 01       	movw	r26, r24
    52f4:	cb 01       	movw	r24, r22
    52f6:	bc 01       	movw	r22, r24
    52f8:	cd 01       	movw	r24, r26
    52fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fe:	dc 01       	movw	r26, r24
    5300:	cb 01       	movw	r24, r22
    5302:	9e af       	std	Y+62, r25	; 0x3e
    5304:	8d af       	std	Y+61, r24	; 0x3d
    5306:	0f c0       	rjmp	.+30     	; 0x5326 <EXTI_System+0x164c>
    5308:	80 e9       	ldi	r24, 0x90	; 144
    530a:	91 e0       	ldi	r25, 0x01	; 1
    530c:	9c af       	std	Y+60, r25	; 0x3c
    530e:	8b af       	std	Y+59, r24	; 0x3b
    5310:	8b ad       	ldd	r24, Y+59	; 0x3b
    5312:	9c ad       	ldd	r25, Y+60	; 0x3c
    5314:	01 97       	sbiw	r24, 0x01	; 1
    5316:	f1 f7       	brne	.-4      	; 0x5314 <EXTI_System+0x163a>
    5318:	9c af       	std	Y+60, r25	; 0x3c
    531a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    531c:	8d ad       	ldd	r24, Y+61	; 0x3d
    531e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5320:	01 97       	sbiw	r24, 0x01	; 1
    5322:	9e af       	std	Y+62, r25	; 0x3e
    5324:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5326:	8d ad       	ldd	r24, Y+61	; 0x3d
    5328:	9e ad       	ldd	r25, Y+62	; 0x3e
    532a:	00 97       	sbiw	r24, 0x00	; 0
    532c:	69 f7       	brne	.-38     	; 0x5308 <EXTI_System+0x162e>
    532e:	16 c0       	rjmp	.+44     	; 0x535c <EXTI_System+0x1682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5330:	fe 01       	movw	r30, r28
    5332:	ff 96       	adiw	r30, 0x3f	; 63
    5334:	60 81       	ld	r22, Z
    5336:	71 81       	ldd	r23, Z+1	; 0x01
    5338:	82 81       	ldd	r24, Z+2	; 0x02
    533a:	93 81       	ldd	r25, Z+3	; 0x03
    533c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5340:	dc 01       	movw	r26, r24
    5342:	cb 01       	movw	r24, r22
    5344:	9e af       	std	Y+62, r25	; 0x3e
    5346:	8d af       	std	Y+61, r24	; 0x3d
    5348:	8d ad       	ldd	r24, Y+61	; 0x3d
    534a:	9e ad       	ldd	r25, Y+62	; 0x3e
    534c:	9a af       	std	Y+58, r25	; 0x3a
    534e:	89 af       	std	Y+57, r24	; 0x39
    5350:	89 ad       	ldd	r24, Y+57	; 0x39
    5352:	9a ad       	ldd	r25, Y+58	; 0x3a
    5354:	01 97       	sbiw	r24, 0x01	; 1
    5356:	f1 f7       	brne	.-4      	; 0x5354 <EXTI_System+0x167a>
    5358:	9a af       	std	Y+58, r25	; 0x3a
    535a:	89 af       	std	Y+57, r24	; 0x39
								_delay_ms(35);

								while(1){
									u8 Motor_Rotate = Keypad_GetPressedKey();
    535c:	0e 94 c5 1b 	call	0x378a	; 0x378a <Keypad_GetPressedKey>
    5360:	fe 01       	movw	r30, r28
    5362:	ee 5f       	subi	r30, 0xFE	; 254
    5364:	fe 4f       	sbci	r31, 0xFE	; 254
    5366:	80 83       	st	Z, r24
									if(Motor_Rotate == 1){
    5368:	fe 01       	movw	r30, r28
    536a:	ee 5f       	subi	r30, 0xFE	; 254
    536c:	fe 4f       	sbci	r31, 0xFE	; 254
    536e:	80 81       	ld	r24, Z
    5370:	81 30       	cpi	r24, 0x01	; 1
    5372:	09 f0       	breq	.+2      	; 0x5376 <EXTI_System+0x169c>
    5374:	7a c0       	rjmp	.+244    	; 0x546a <EXTI_System+0x1790>
										DC_Motor_Stop(0);
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <DC_Motor_Stop>
    537c:	80 e0       	ldi	r24, 0x00	; 0
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	a0 ea       	ldi	r26, 0xA0	; 160
    5382:	b1 e4       	ldi	r27, 0x41	; 65
    5384:	8d ab       	std	Y+53, r24	; 0x35
    5386:	9e ab       	std	Y+54, r25	; 0x36
    5388:	af ab       	std	Y+55, r26	; 0x37
    538a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    538c:	6d a9       	ldd	r22, Y+53	; 0x35
    538e:	7e a9       	ldd	r23, Y+54	; 0x36
    5390:	8f a9       	ldd	r24, Y+55	; 0x37
    5392:	98 ad       	ldd	r25, Y+56	; 0x38
    5394:	20 e0       	ldi	r18, 0x00	; 0
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	4a e7       	ldi	r20, 0x7A	; 122
    539a:	55 e4       	ldi	r21, 0x45	; 69
    539c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a0:	dc 01       	movw	r26, r24
    53a2:	cb 01       	movw	r24, r22
    53a4:	89 ab       	std	Y+49, r24	; 0x31
    53a6:	9a ab       	std	Y+50, r25	; 0x32
    53a8:	ab ab       	std	Y+51, r26	; 0x33
    53aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    53ac:	69 a9       	ldd	r22, Y+49	; 0x31
    53ae:	7a a9       	ldd	r23, Y+50	; 0x32
    53b0:	8b a9       	ldd	r24, Y+51	; 0x33
    53b2:	9c a9       	ldd	r25, Y+52	; 0x34
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	40 e8       	ldi	r20, 0x80	; 128
    53ba:	5f e3       	ldi	r21, 0x3F	; 63
    53bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53c0:	88 23       	and	r24, r24
    53c2:	2c f4       	brge	.+10     	; 0x53ce <EXTI_System+0x16f4>
		__ticks = 1;
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	98 ab       	std	Y+48, r25	; 0x30
    53ca:	8f a7       	std	Y+47, r24	; 0x2f
    53cc:	3f c0       	rjmp	.+126    	; 0x544c <EXTI_System+0x1772>
	else if (__tmp > 65535)
    53ce:	69 a9       	ldd	r22, Y+49	; 0x31
    53d0:	7a a9       	ldd	r23, Y+50	; 0x32
    53d2:	8b a9       	ldd	r24, Y+51	; 0x33
    53d4:	9c a9       	ldd	r25, Y+52	; 0x34
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	3f ef       	ldi	r19, 0xFF	; 255
    53da:	4f e7       	ldi	r20, 0x7F	; 127
    53dc:	57 e4       	ldi	r21, 0x47	; 71
    53de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    53e2:	18 16       	cp	r1, r24
    53e4:	4c f5       	brge	.+82     	; 0x5438 <EXTI_System+0x175e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53e6:	6d a9       	ldd	r22, Y+53	; 0x35
    53e8:	7e a9       	ldd	r23, Y+54	; 0x36
    53ea:	8f a9       	ldd	r24, Y+55	; 0x37
    53ec:	98 ad       	ldd	r25, Y+56	; 0x38
    53ee:	20 e0       	ldi	r18, 0x00	; 0
    53f0:	30 e0       	ldi	r19, 0x00	; 0
    53f2:	40 e2       	ldi	r20, 0x20	; 32
    53f4:	51 e4       	ldi	r21, 0x41	; 65
    53f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53fa:	dc 01       	movw	r26, r24
    53fc:	cb 01       	movw	r24, r22
    53fe:	bc 01       	movw	r22, r24
    5400:	cd 01       	movw	r24, r26
    5402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5406:	dc 01       	movw	r26, r24
    5408:	cb 01       	movw	r24, r22
    540a:	98 ab       	std	Y+48, r25	; 0x30
    540c:	8f a7       	std	Y+47, r24	; 0x2f
    540e:	0f c0       	rjmp	.+30     	; 0x542e <EXTI_System+0x1754>
    5410:	80 e9       	ldi	r24, 0x90	; 144
    5412:	91 e0       	ldi	r25, 0x01	; 1
    5414:	9e a7       	std	Y+46, r25	; 0x2e
    5416:	8d a7       	std	Y+45, r24	; 0x2d
    5418:	8d a5       	ldd	r24, Y+45	; 0x2d
    541a:	9e a5       	ldd	r25, Y+46	; 0x2e
    541c:	01 97       	sbiw	r24, 0x01	; 1
    541e:	f1 f7       	brne	.-4      	; 0x541c <EXTI_System+0x1742>
    5420:	9e a7       	std	Y+46, r25	; 0x2e
    5422:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5424:	8f a5       	ldd	r24, Y+47	; 0x2f
    5426:	98 a9       	ldd	r25, Y+48	; 0x30
    5428:	01 97       	sbiw	r24, 0x01	; 1
    542a:	98 ab       	std	Y+48, r25	; 0x30
    542c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    542e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5430:	98 a9       	ldd	r25, Y+48	; 0x30
    5432:	00 97       	sbiw	r24, 0x00	; 0
    5434:	69 f7       	brne	.-38     	; 0x5410 <EXTI_System+0x1736>
    5436:	14 c0       	rjmp	.+40     	; 0x5460 <EXTI_System+0x1786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5438:	69 a9       	ldd	r22, Y+49	; 0x31
    543a:	7a a9       	ldd	r23, Y+50	; 0x32
    543c:	8b a9       	ldd	r24, Y+51	; 0x33
    543e:	9c a9       	ldd	r25, Y+52	; 0x34
    5440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5444:	dc 01       	movw	r26, r24
    5446:	cb 01       	movw	r24, r22
    5448:	98 ab       	std	Y+48, r25	; 0x30
    544a:	8f a7       	std	Y+47, r24	; 0x2f
    544c:	8f a5       	ldd	r24, Y+47	; 0x2f
    544e:	98 a9       	ldd	r25, Y+48	; 0x30
    5450:	9c a7       	std	Y+44, r25	; 0x2c
    5452:	8b a7       	std	Y+43, r24	; 0x2b
    5454:	8b a5       	ldd	r24, Y+43	; 0x2b
    5456:	9c a5       	ldd	r25, Y+44	; 0x2c
    5458:	01 97       	sbiw	r24, 0x01	; 1
    545a:	f1 f7       	brne	.-4      	; 0x5458 <EXTI_System+0x177e>
    545c:	9c a7       	std	Y+44, r25	; 0x2c
    545e:	8b a7       	std	Y+43, r24	; 0x2b
										_delay_ms(20);
										DC_Motor_Rotate(0, 0);
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	60 e0       	ldi	r22, 0x00	; 0
    5464:	0e 94 89 1c 	call	0x3912	; 0x3912 <DC_Motor_Rotate>
    5468:	79 cf       	rjmp	.-270    	; 0x535c <EXTI_System+0x1682>
									}

									else if(Motor_Rotate == 2){
    546a:	fe 01       	movw	r30, r28
    546c:	ee 5f       	subi	r30, 0xFE	; 254
    546e:	fe 4f       	sbci	r31, 0xFE	; 254
    5470:	80 81       	ld	r24, Z
    5472:	82 30       	cpi	r24, 0x02	; 2
    5474:	09 f0       	breq	.+2      	; 0x5478 <EXTI_System+0x179e>
    5476:	7a c0       	rjmp	.+244    	; 0x556c <EXTI_System+0x1892>
										DC_Motor_Stop(0);
    5478:	80 e0       	ldi	r24, 0x00	; 0
    547a:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <DC_Motor_Stop>
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	a0 ea       	ldi	r26, 0xA0	; 160
    5484:	b1 e4       	ldi	r27, 0x41	; 65
    5486:	8f a3       	std	Y+39, r24	; 0x27
    5488:	98 a7       	std	Y+40, r25	; 0x28
    548a:	a9 a7       	std	Y+41, r26	; 0x29
    548c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    548e:	6f a1       	ldd	r22, Y+39	; 0x27
    5490:	78 a5       	ldd	r23, Y+40	; 0x28
    5492:	89 a5       	ldd	r24, Y+41	; 0x29
    5494:	9a a5       	ldd	r25, Y+42	; 0x2a
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	4a e7       	ldi	r20, 0x7A	; 122
    549c:	55 e4       	ldi	r21, 0x45	; 69
    549e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54a2:	dc 01       	movw	r26, r24
    54a4:	cb 01       	movw	r24, r22
    54a6:	8b a3       	std	Y+35, r24	; 0x23
    54a8:	9c a3       	std	Y+36, r25	; 0x24
    54aa:	ad a3       	std	Y+37, r26	; 0x25
    54ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    54ae:	6b a1       	ldd	r22, Y+35	; 0x23
    54b0:	7c a1       	ldd	r23, Y+36	; 0x24
    54b2:	8d a1       	ldd	r24, Y+37	; 0x25
    54b4:	9e a1       	ldd	r25, Y+38	; 0x26
    54b6:	20 e0       	ldi	r18, 0x00	; 0
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	40 e8       	ldi	r20, 0x80	; 128
    54bc:	5f e3       	ldi	r21, 0x3F	; 63
    54be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54c2:	88 23       	and	r24, r24
    54c4:	2c f4       	brge	.+10     	; 0x54d0 <EXTI_System+0x17f6>
		__ticks = 1;
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	9a a3       	std	Y+34, r25	; 0x22
    54cc:	89 a3       	std	Y+33, r24	; 0x21
    54ce:	3f c0       	rjmp	.+126    	; 0x554e <EXTI_System+0x1874>
	else if (__tmp > 65535)
    54d0:	6b a1       	ldd	r22, Y+35	; 0x23
    54d2:	7c a1       	ldd	r23, Y+36	; 0x24
    54d4:	8d a1       	ldd	r24, Y+37	; 0x25
    54d6:	9e a1       	ldd	r25, Y+38	; 0x26
    54d8:	20 e0       	ldi	r18, 0x00	; 0
    54da:	3f ef       	ldi	r19, 0xFF	; 255
    54dc:	4f e7       	ldi	r20, 0x7F	; 127
    54de:	57 e4       	ldi	r21, 0x47	; 71
    54e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54e4:	18 16       	cp	r1, r24
    54e6:	4c f5       	brge	.+82     	; 0x553a <EXTI_System+0x1860>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54e8:	6f a1       	ldd	r22, Y+39	; 0x27
    54ea:	78 a5       	ldd	r23, Y+40	; 0x28
    54ec:	89 a5       	ldd	r24, Y+41	; 0x29
    54ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    54f0:	20 e0       	ldi	r18, 0x00	; 0
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	40 e2       	ldi	r20, 0x20	; 32
    54f6:	51 e4       	ldi	r21, 0x41	; 65
    54f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54fc:	dc 01       	movw	r26, r24
    54fe:	cb 01       	movw	r24, r22
    5500:	bc 01       	movw	r22, r24
    5502:	cd 01       	movw	r24, r26
    5504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5508:	dc 01       	movw	r26, r24
    550a:	cb 01       	movw	r24, r22
    550c:	9a a3       	std	Y+34, r25	; 0x22
    550e:	89 a3       	std	Y+33, r24	; 0x21
    5510:	0f c0       	rjmp	.+30     	; 0x5530 <EXTI_System+0x1856>
    5512:	80 e9       	ldi	r24, 0x90	; 144
    5514:	91 e0       	ldi	r25, 0x01	; 1
    5516:	98 a3       	std	Y+32, r25	; 0x20
    5518:	8f 8f       	std	Y+31, r24	; 0x1f
    551a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    551c:	98 a1       	ldd	r25, Y+32	; 0x20
    551e:	01 97       	sbiw	r24, 0x01	; 1
    5520:	f1 f7       	brne	.-4      	; 0x551e <EXTI_System+0x1844>
    5522:	98 a3       	std	Y+32, r25	; 0x20
    5524:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5526:	89 a1       	ldd	r24, Y+33	; 0x21
    5528:	9a a1       	ldd	r25, Y+34	; 0x22
    552a:	01 97       	sbiw	r24, 0x01	; 1
    552c:	9a a3       	std	Y+34, r25	; 0x22
    552e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5530:	89 a1       	ldd	r24, Y+33	; 0x21
    5532:	9a a1       	ldd	r25, Y+34	; 0x22
    5534:	00 97       	sbiw	r24, 0x00	; 0
    5536:	69 f7       	brne	.-38     	; 0x5512 <EXTI_System+0x1838>
    5538:	14 c0       	rjmp	.+40     	; 0x5562 <EXTI_System+0x1888>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    553a:	6b a1       	ldd	r22, Y+35	; 0x23
    553c:	7c a1       	ldd	r23, Y+36	; 0x24
    553e:	8d a1       	ldd	r24, Y+37	; 0x25
    5540:	9e a1       	ldd	r25, Y+38	; 0x26
    5542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5546:	dc 01       	movw	r26, r24
    5548:	cb 01       	movw	r24, r22
    554a:	9a a3       	std	Y+34, r25	; 0x22
    554c:	89 a3       	std	Y+33, r24	; 0x21
    554e:	89 a1       	ldd	r24, Y+33	; 0x21
    5550:	9a a1       	ldd	r25, Y+34	; 0x22
    5552:	9e 8f       	std	Y+30, r25	; 0x1e
    5554:	8d 8f       	std	Y+29, r24	; 0x1d
    5556:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5558:	9e 8d       	ldd	r25, Y+30	; 0x1e
    555a:	01 97       	sbiw	r24, 0x01	; 1
    555c:	f1 f7       	brne	.-4      	; 0x555a <EXTI_System+0x1880>
    555e:	9e 8f       	std	Y+30, r25	; 0x1e
    5560:	8d 8f       	std	Y+29, r24	; 0x1d
										_delay_ms(20);
										DC_Motor_Rotate(0, 1);
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	61 e0       	ldi	r22, 0x01	; 1
    5566:	0e 94 89 1c 	call	0x3912	; 0x3912 <DC_Motor_Rotate>
    556a:	f8 ce       	rjmp	.-528    	; 0x535c <EXTI_System+0x1682>
									}

									else if(Motor_Rotate == 3){
    556c:	fe 01       	movw	r30, r28
    556e:	ee 5f       	subi	r30, 0xFE	; 254
    5570:	fe 4f       	sbci	r31, 0xFE	; 254
    5572:	80 81       	ld	r24, Z
    5574:	83 30       	cpi	r24, 0x03	; 3
    5576:	09 f0       	breq	.+2      	; 0x557a <EXTI_System+0x18a0>
    5578:	f1 ce       	rjmp	.-542    	; 0x535c <EXTI_System+0x1682>
										DC_Motor_Stop(0);
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <DC_Motor_Stop>
										First_Screen();
    5580:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <First_Screen>

										while(1){
											u8 Motor_Back = Keypad_GetPressedKey();
    5584:	0e 94 c5 1b 	call	0x378a	; 0x378a <Keypad_GetPressedKey>
    5588:	fe 01       	movw	r30, r28
    558a:	ef 5f       	subi	r30, 0xFF	; 255
    558c:	fe 4f       	sbci	r31, 0xFE	; 254
    558e:	80 83       	st	Z, r24
											if(Motor_Back == 1){
    5590:	fe 01       	movw	r30, r28
    5592:	ef 5f       	subi	r30, 0xFF	; 255
    5594:	fe 4f       	sbci	r31, 0xFE	; 254
    5596:	80 81       	ld	r24, Z
    5598:	81 30       	cpi	r24, 0x01	; 1
    559a:	09 f0       	breq	.+2      	; 0x559e <EXTI_System+0x18c4>
    559c:	13 c1       	rjmp	.+550    	; 0x57c4 <EXTI_System+0x1aea>
												Second_Screen();
    559e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <Second_Screen>
    55a2:	80 e0       	ldi	r24, 0x00	; 0
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	ac e0       	ldi	r26, 0x0C	; 12
    55a8:	b2 e4       	ldi	r27, 0x42	; 66
    55aa:	89 8f       	std	Y+25, r24	; 0x19
    55ac:	9a 8f       	std	Y+26, r25	; 0x1a
    55ae:	ab 8f       	std	Y+27, r26	; 0x1b
    55b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55b2:	69 8d       	ldd	r22, Y+25	; 0x19
    55b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55ba:	20 e0       	ldi	r18, 0x00	; 0
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	4a e7       	ldi	r20, 0x7A	; 122
    55c0:	55 e4       	ldi	r21, 0x45	; 69
    55c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55c6:	dc 01       	movw	r26, r24
    55c8:	cb 01       	movw	r24, r22
    55ca:	8d 8b       	std	Y+21, r24	; 0x15
    55cc:	9e 8b       	std	Y+22, r25	; 0x16
    55ce:	af 8b       	std	Y+23, r26	; 0x17
    55d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55d2:	6d 89       	ldd	r22, Y+21	; 0x15
    55d4:	7e 89       	ldd	r23, Y+22	; 0x16
    55d6:	8f 89       	ldd	r24, Y+23	; 0x17
    55d8:	98 8d       	ldd	r25, Y+24	; 0x18
    55da:	20 e0       	ldi	r18, 0x00	; 0
    55dc:	30 e0       	ldi	r19, 0x00	; 0
    55de:	40 e8       	ldi	r20, 0x80	; 128
    55e0:	5f e3       	ldi	r21, 0x3F	; 63
    55e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55e6:	88 23       	and	r24, r24
    55e8:	2c f4       	brge	.+10     	; 0x55f4 <EXTI_System+0x191a>
		__ticks = 1;
    55ea:	81 e0       	ldi	r24, 0x01	; 1
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	9c 8b       	std	Y+20, r25	; 0x14
    55f0:	8b 8b       	std	Y+19, r24	; 0x13
    55f2:	3f c0       	rjmp	.+126    	; 0x5672 <EXTI_System+0x1998>
	else if (__tmp > 65535)
    55f4:	6d 89       	ldd	r22, Y+21	; 0x15
    55f6:	7e 89       	ldd	r23, Y+22	; 0x16
    55f8:	8f 89       	ldd	r24, Y+23	; 0x17
    55fa:	98 8d       	ldd	r25, Y+24	; 0x18
    55fc:	20 e0       	ldi	r18, 0x00	; 0
    55fe:	3f ef       	ldi	r19, 0xFF	; 255
    5600:	4f e7       	ldi	r20, 0x7F	; 127
    5602:	57 e4       	ldi	r21, 0x47	; 71
    5604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5608:	18 16       	cp	r1, r24
    560a:	4c f5       	brge	.+82     	; 0x565e <EXTI_System+0x1984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    560c:	69 8d       	ldd	r22, Y+25	; 0x19
    560e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5614:	20 e0       	ldi	r18, 0x00	; 0
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	40 e2       	ldi	r20, 0x20	; 32
    561a:	51 e4       	ldi	r21, 0x41	; 65
    561c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5620:	dc 01       	movw	r26, r24
    5622:	cb 01       	movw	r24, r22
    5624:	bc 01       	movw	r22, r24
    5626:	cd 01       	movw	r24, r26
    5628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    562c:	dc 01       	movw	r26, r24
    562e:	cb 01       	movw	r24, r22
    5630:	9c 8b       	std	Y+20, r25	; 0x14
    5632:	8b 8b       	std	Y+19, r24	; 0x13
    5634:	0f c0       	rjmp	.+30     	; 0x5654 <EXTI_System+0x197a>
    5636:	80 e9       	ldi	r24, 0x90	; 144
    5638:	91 e0       	ldi	r25, 0x01	; 1
    563a:	9a 8b       	std	Y+18, r25	; 0x12
    563c:	89 8b       	std	Y+17, r24	; 0x11
    563e:	89 89       	ldd	r24, Y+17	; 0x11
    5640:	9a 89       	ldd	r25, Y+18	; 0x12
    5642:	01 97       	sbiw	r24, 0x01	; 1
    5644:	f1 f7       	brne	.-4      	; 0x5642 <EXTI_System+0x1968>
    5646:	9a 8b       	std	Y+18, r25	; 0x12
    5648:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    564a:	8b 89       	ldd	r24, Y+19	; 0x13
    564c:	9c 89       	ldd	r25, Y+20	; 0x14
    564e:	01 97       	sbiw	r24, 0x01	; 1
    5650:	9c 8b       	std	Y+20, r25	; 0x14
    5652:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5654:	8b 89       	ldd	r24, Y+19	; 0x13
    5656:	9c 89       	ldd	r25, Y+20	; 0x14
    5658:	00 97       	sbiw	r24, 0x00	; 0
    565a:	69 f7       	brne	.-38     	; 0x5636 <EXTI_System+0x195c>
    565c:	14 c0       	rjmp	.+40     	; 0x5686 <EXTI_System+0x19ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    565e:	6d 89       	ldd	r22, Y+21	; 0x15
    5660:	7e 89       	ldd	r23, Y+22	; 0x16
    5662:	8f 89       	ldd	r24, Y+23	; 0x17
    5664:	98 8d       	ldd	r25, Y+24	; 0x18
    5666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    566a:	dc 01       	movw	r26, r24
    566c:	cb 01       	movw	r24, r22
    566e:	9c 8b       	std	Y+20, r25	; 0x14
    5670:	8b 8b       	std	Y+19, r24	; 0x13
    5672:	8b 89       	ldd	r24, Y+19	; 0x13
    5674:	9c 89       	ldd	r25, Y+20	; 0x14
    5676:	98 8b       	std	Y+16, r25	; 0x10
    5678:	8f 87       	std	Y+15, r24	; 0x0f
    567a:	8f 85       	ldd	r24, Y+15	; 0x0f
    567c:	98 89       	ldd	r25, Y+16	; 0x10
    567e:	01 97       	sbiw	r24, 0x01	; 1
    5680:	f1 f7       	brne	.-4      	; 0x567e <EXTI_System+0x19a4>
    5682:	98 8b       	std	Y+16, r25	; 0x10
    5684:	8f 87       	std	Y+15, r24	; 0x0f
												_delay_ms(35);

												while(1){
													u8 new_System = Keypad_GetPressedKey;
    5686:	85 ec       	ldi	r24, 0xC5	; 197
    5688:	9b e1       	ldi	r25, 0x1B	; 27
    568a:	fe 01       	movw	r30, r28
    568c:	e0 50       	subi	r30, 0x00	; 0
    568e:	ff 4f       	sbci	r31, 0xFF	; 255
    5690:	80 83       	st	Z, r24

													if(new_System == 1){
    5692:	fe 01       	movw	r30, r28
    5694:	e0 50       	subi	r30, 0x00	; 0
    5696:	ff 4f       	sbci	r31, 0xFF	; 255
    5698:	80 81       	ld	r24, Z
    569a:	81 30       	cpi	r24, 0x01	; 1
    569c:	29 f4       	brne	.+10     	; 0x56a8 <EXTI_System+0x19ce>
														DC_Motor_Rotate(0, 0);
    569e:	80 e0       	ldi	r24, 0x00	; 0
    56a0:	60 e0       	ldi	r22, 0x00	; 0
    56a2:	0e 94 89 1c 	call	0x3912	; 0x3912 <DC_Motor_Rotate>
    56a6:	ef cf       	rjmp	.-34     	; 0x5686 <EXTI_System+0x19ac>
													}

													else if(new_System == 2){
    56a8:	fe 01       	movw	r30, r28
    56aa:	e0 50       	subi	r30, 0x00	; 0
    56ac:	ff 4f       	sbci	r31, 0xFF	; 255
    56ae:	80 81       	ld	r24, Z
    56b0:	82 30       	cpi	r24, 0x02	; 2
    56b2:	09 f0       	breq	.+2      	; 0x56b6 <EXTI_System+0x19dc>
    56b4:	7a c0       	rjmp	.+244    	; 0x57aa <EXTI_System+0x1ad0>
														DC_Motor_Stop(0);
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    56b8:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <DC_Motor_Stop>
    56bc:	80 e0       	ldi	r24, 0x00	; 0
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	ac e0       	ldi	r26, 0x0C	; 12
    56c2:	b2 e4       	ldi	r27, 0x42	; 66
    56c4:	8b 87       	std	Y+11, r24	; 0x0b
    56c6:	9c 87       	std	Y+12, r25	; 0x0c
    56c8:	ad 87       	std	Y+13, r26	; 0x0d
    56ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    56ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    56d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    56d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    56d4:	20 e0       	ldi	r18, 0x00	; 0
    56d6:	30 e0       	ldi	r19, 0x00	; 0
    56d8:	4a e7       	ldi	r20, 0x7A	; 122
    56da:	55 e4       	ldi	r21, 0x45	; 69
    56dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56e0:	dc 01       	movw	r26, r24
    56e2:	cb 01       	movw	r24, r22
    56e4:	8f 83       	std	Y+7, r24	; 0x07
    56e6:	98 87       	std	Y+8, r25	; 0x08
    56e8:	a9 87       	std	Y+9, r26	; 0x09
    56ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56ec:	6f 81       	ldd	r22, Y+7	; 0x07
    56ee:	78 85       	ldd	r23, Y+8	; 0x08
    56f0:	89 85       	ldd	r24, Y+9	; 0x09
    56f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56f4:	20 e0       	ldi	r18, 0x00	; 0
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	40 e8       	ldi	r20, 0x80	; 128
    56fa:	5f e3       	ldi	r21, 0x3F	; 63
    56fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5700:	88 23       	and	r24, r24
    5702:	2c f4       	brge	.+10     	; 0x570e <EXTI_System+0x1a34>
		__ticks = 1;
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	90 e0       	ldi	r25, 0x00	; 0
    5708:	9e 83       	std	Y+6, r25	; 0x06
    570a:	8d 83       	std	Y+5, r24	; 0x05
    570c:	3f c0       	rjmp	.+126    	; 0x578c <EXTI_System+0x1ab2>
	else if (__tmp > 65535)
    570e:	6f 81       	ldd	r22, Y+7	; 0x07
    5710:	78 85       	ldd	r23, Y+8	; 0x08
    5712:	89 85       	ldd	r24, Y+9	; 0x09
    5714:	9a 85       	ldd	r25, Y+10	; 0x0a
    5716:	20 e0       	ldi	r18, 0x00	; 0
    5718:	3f ef       	ldi	r19, 0xFF	; 255
    571a:	4f e7       	ldi	r20, 0x7F	; 127
    571c:	57 e4       	ldi	r21, 0x47	; 71
    571e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5722:	18 16       	cp	r1, r24
    5724:	4c f5       	brge	.+82     	; 0x5778 <EXTI_System+0x1a9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5726:	6b 85       	ldd	r22, Y+11	; 0x0b
    5728:	7c 85       	ldd	r23, Y+12	; 0x0c
    572a:	8d 85       	ldd	r24, Y+13	; 0x0d
    572c:	9e 85       	ldd	r25, Y+14	; 0x0e
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	30 e0       	ldi	r19, 0x00	; 0
    5732:	40 e2       	ldi	r20, 0x20	; 32
    5734:	51 e4       	ldi	r21, 0x41	; 65
    5736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    573a:	dc 01       	movw	r26, r24
    573c:	cb 01       	movw	r24, r22
    573e:	bc 01       	movw	r22, r24
    5740:	cd 01       	movw	r24, r26
    5742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5746:	dc 01       	movw	r26, r24
    5748:	cb 01       	movw	r24, r22
    574a:	9e 83       	std	Y+6, r25	; 0x06
    574c:	8d 83       	std	Y+5, r24	; 0x05
    574e:	0f c0       	rjmp	.+30     	; 0x576e <EXTI_System+0x1a94>
    5750:	80 e9       	ldi	r24, 0x90	; 144
    5752:	91 e0       	ldi	r25, 0x01	; 1
    5754:	9c 83       	std	Y+4, r25	; 0x04
    5756:	8b 83       	std	Y+3, r24	; 0x03
    5758:	8b 81       	ldd	r24, Y+3	; 0x03
    575a:	9c 81       	ldd	r25, Y+4	; 0x04
    575c:	01 97       	sbiw	r24, 0x01	; 1
    575e:	f1 f7       	brne	.-4      	; 0x575c <EXTI_System+0x1a82>
    5760:	9c 83       	std	Y+4, r25	; 0x04
    5762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5764:	8d 81       	ldd	r24, Y+5	; 0x05
    5766:	9e 81       	ldd	r25, Y+6	; 0x06
    5768:	01 97       	sbiw	r24, 0x01	; 1
    576a:	9e 83       	std	Y+6, r25	; 0x06
    576c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    576e:	8d 81       	ldd	r24, Y+5	; 0x05
    5770:	9e 81       	ldd	r25, Y+6	; 0x06
    5772:	00 97       	sbiw	r24, 0x00	; 0
    5774:	69 f7       	brne	.-38     	; 0x5750 <EXTI_System+0x1a76>
    5776:	14 c0       	rjmp	.+40     	; 0x57a0 <EXTI_System+0x1ac6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5778:	6f 81       	ldd	r22, Y+7	; 0x07
    577a:	78 85       	ldd	r23, Y+8	; 0x08
    577c:	89 85       	ldd	r24, Y+9	; 0x09
    577e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5784:	dc 01       	movw	r26, r24
    5786:	cb 01       	movw	r24, r22
    5788:	9e 83       	std	Y+6, r25	; 0x06
    578a:	8d 83       	std	Y+5, r24	; 0x05
    578c:	8d 81       	ldd	r24, Y+5	; 0x05
    578e:	9e 81       	ldd	r25, Y+6	; 0x06
    5790:	9a 83       	std	Y+2, r25	; 0x02
    5792:	89 83       	std	Y+1, r24	; 0x01
    5794:	89 81       	ldd	r24, Y+1	; 0x01
    5796:	9a 81       	ldd	r25, Y+2	; 0x02
    5798:	01 97       	sbiw	r24, 0x01	; 1
    579a:	f1 f7       	brne	.-4      	; 0x5798 <EXTI_System+0x1abe>
    579c:	9a 83       	std	Y+2, r25	; 0x02
    579e:	89 83       	std	Y+1, r24	; 0x01
														_delay_ms(35);
														DC_Motor_Rotate(0, 1);
    57a0:	80 e0       	ldi	r24, 0x00	; 0
    57a2:	61 e0       	ldi	r22, 0x01	; 1
    57a4:	0e 94 89 1c 	call	0x3912	; 0x3912 <DC_Motor_Rotate>
    57a8:	6e cf       	rjmp	.-292    	; 0x5686 <EXTI_System+0x19ac>
													}

													else if(new_System == 3){
    57aa:	fe 01       	movw	r30, r28
    57ac:	e0 50       	subi	r30, 0x00	; 0
    57ae:	ff 4f       	sbci	r31, 0xFF	; 255
    57b0:	80 81       	ld	r24, Z
    57b2:	83 30       	cpi	r24, 0x03	; 3
    57b4:	09 f0       	breq	.+2      	; 0x57b8 <EXTI_System+0x1ade>
    57b6:	67 cf       	rjmp	.-306    	; 0x5686 <EXTI_System+0x19ac>
														DC_Motor_Stop(0);
    57b8:	80 e0       	ldi	r24, 0x00	; 0
    57ba:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <DC_Motor_Stop>
														First_Screen();
    57be:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <First_Screen>
    57c2:	61 cf       	rjmp	.-318    	; 0x5686 <EXTI_System+0x19ac>
													}
												}

											}

											else if(Motor_Back == 2){
    57c4:	fe 01       	movw	r30, r28
    57c6:	ef 5f       	subi	r30, 0xFF	; 255
    57c8:	fe 4f       	sbci	r31, 0xFE	; 254
    57ca:	80 81       	ld	r24, Z
    57cc:	82 30       	cpi	r24, 0x02	; 2
    57ce:	09 f0       	breq	.+2      	; 0x57d2 <EXTI_System+0x1af8>
    57d0:	d9 ce       	rjmp	.-590    	; 0x5584 <EXTI_System+0x18aa>
												DC_Motor_Stop(0);
    57d2:	80 e0       	ldi	r24, 0x00	; 0
    57d4:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <DC_Motor_Stop>
												LCD_ClearScreen();
    57d8:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
    57dc:	d3 ce       	rjmp	.-602    	; 0x5584 <EXTI_System+0x18aa>
										}
									}
								}
							}

							else if(key_Motor == 2){
    57de:	fe 01       	movw	r30, r28
    57e0:	ed 5f       	subi	r30, 0xFD	; 253
    57e2:	fe 4f       	sbci	r31, 0xFE	; 254
    57e4:	80 81       	ld	r24, Z
    57e6:	82 30       	cpi	r24, 0x02	; 2
    57e8:	09 f0       	breq	.+2      	; 0x57ec <EXTI_System+0x1b12>
    57ea:	58 c0       	rjmp	.+176    	; 0x589c <EXTI_System+0x1bc2>
								StepperAngles_Screen();
    57ec:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <StepperAngles_Screen>
								while(1){
									u8 Stepper_angle = Keypad_GetPressedKey();
    57f0:	0e 94 c5 1b 	call	0x378a	; 0x378a <Keypad_GetPressedKey>
    57f4:	fe 01       	movw	r30, r28
    57f6:	e1 50       	subi	r30, 0x01	; 1
    57f8:	ff 4f       	sbci	r31, 0xFF	; 255
    57fa:	80 83       	st	Z, r24
									if(Stepper_angle == 1){
    57fc:	fe 01       	movw	r30, r28
    57fe:	e1 50       	subi	r30, 0x01	; 1
    5800:	ff 4f       	sbci	r31, 0xFF	; 255
    5802:	80 81       	ld	r24, Z
    5804:	81 30       	cpi	r24, 0x01	; 1
    5806:	11 f5       	brne	.+68     	; 0x584c <EXTI_System+0x1b72>
										StepperDirection_Screen();
    5808:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <StepperDirection_Screen>
										while(1){
											u8 Stepper_Diection90 = Keypad_GetPressedKey();
    580c:	0e 94 c5 1b 	call	0x378a	; 0x378a <Keypad_GetPressedKey>
    5810:	fe 01       	movw	r30, r28
    5812:	e2 50       	subi	r30, 0x02	; 2
    5814:	ff 4f       	sbci	r31, 0xFF	; 255
    5816:	80 83       	st	Z, r24
											if(Stepper_Diection90 == 1){
    5818:	fe 01       	movw	r30, r28
    581a:	e2 50       	subi	r30, 0x02	; 2
    581c:	ff 4f       	sbci	r31, 0xFF	; 255
    581e:	80 81       	ld	r24, Z
    5820:	81 30       	cpi	r24, 0x01	; 1
    5822:	39 f4       	brne	.+14     	; 0x5832 <EXTI_System+0x1b58>
												SelectStepAngle(90, 0);
    5824:	8a e5       	ldi	r24, 0x5A	; 90
    5826:	90 e0       	ldi	r25, 0x00	; 0
    5828:	60 e0       	ldi	r22, 0x00	; 0
    582a:	70 e0       	ldi	r23, 0x00	; 0
    582c:	0e 94 2b 14 	call	0x2856	; 0x2856 <SelectStepAngle>
    5830:	ed cf       	rjmp	.-38     	; 0x580c <EXTI_System+0x1b32>
											}

											else if(Stepper_Diection90 == 2){
    5832:	fe 01       	movw	r30, r28
    5834:	e2 50       	subi	r30, 0x02	; 2
    5836:	ff 4f       	sbci	r31, 0xFF	; 255
    5838:	80 81       	ld	r24, Z
    583a:	82 30       	cpi	r24, 0x02	; 2
    583c:	39 f7       	brne	.-50     	; 0x580c <EXTI_System+0x1b32>
												SelectStepAngle(90, 1);
    583e:	8a e5       	ldi	r24, 0x5A	; 90
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	61 e0       	ldi	r22, 0x01	; 1
    5844:	70 e0       	ldi	r23, 0x00	; 0
    5846:	0e 94 2b 14 	call	0x2856	; 0x2856 <SelectStepAngle>
    584a:	e0 cf       	rjmp	.-64     	; 0x580c <EXTI_System+0x1b32>
											}
										}
									}

									else if(Stepper_angle == 2){
    584c:	fe 01       	movw	r30, r28
    584e:	e1 50       	subi	r30, 0x01	; 1
    5850:	ff 4f       	sbci	r31, 0xFF	; 255
    5852:	80 81       	ld	r24, Z
    5854:	82 30       	cpi	r24, 0x02	; 2
    5856:	61 f6       	brne	.-104    	; 0x57f0 <EXTI_System+0x1b16>
										StepperDirection_Screen();
    5858:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <StepperDirection_Screen>
										while(1){
											u8 Stepper_Diection180 = Keypad_GetPressedKey();
    585c:	0e 94 c5 1b 	call	0x378a	; 0x378a <Keypad_GetPressedKey>
    5860:	fe 01       	movw	r30, r28
    5862:	e3 50       	subi	r30, 0x03	; 3
    5864:	ff 4f       	sbci	r31, 0xFF	; 255
    5866:	80 83       	st	Z, r24
											if(Stepper_Diection180 == 1){
    5868:	fe 01       	movw	r30, r28
    586a:	e3 50       	subi	r30, 0x03	; 3
    586c:	ff 4f       	sbci	r31, 0xFF	; 255
    586e:	80 81       	ld	r24, Z
    5870:	81 30       	cpi	r24, 0x01	; 1
    5872:	39 f4       	brne	.+14     	; 0x5882 <EXTI_System+0x1ba8>
												SelectStepAngle(180, 0);
    5874:	84 eb       	ldi	r24, 0xB4	; 180
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	60 e0       	ldi	r22, 0x00	; 0
    587a:	70 e0       	ldi	r23, 0x00	; 0
    587c:	0e 94 2b 14 	call	0x2856	; 0x2856 <SelectStepAngle>
    5880:	ed cf       	rjmp	.-38     	; 0x585c <EXTI_System+0x1b82>
											}

											else if(Stepper_Diection180 == 2){
    5882:	fe 01       	movw	r30, r28
    5884:	e3 50       	subi	r30, 0x03	; 3
    5886:	ff 4f       	sbci	r31, 0xFF	; 255
    5888:	80 81       	ld	r24, Z
    588a:	82 30       	cpi	r24, 0x02	; 2
    588c:	39 f7       	brne	.-50     	; 0x585c <EXTI_System+0x1b82>
												SelectStepAngle(180, 1);
    588e:	84 eb       	ldi	r24, 0xB4	; 180
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	61 e0       	ldi	r22, 0x01	; 1
    5894:	70 e0       	ldi	r23, 0x00	; 0
    5896:	0e 94 2b 14 	call	0x2856	; 0x2856 <SelectStepAngle>
    589a:	e0 cf       	rjmp	.-64     	; 0x585c <EXTI_System+0x1b82>
										}
									}
								}
							}

							else if(key_Motor == 3){
    589c:	fe 01       	movw	r30, r28
    589e:	ed 5f       	subi	r30, 0xFD	; 253
    58a0:	fe 4f       	sbci	r31, 0xFE	; 254
    58a2:	80 81       	ld	r24, Z
    58a4:	83 30       	cpi	r24, 0x03	; 3
    58a6:	09 f0       	breq	.+2      	; 0x58aa <EXTI_System+0x1bd0>
    58a8:	c5 cc       	rjmp	.-1654   	; 0x5234 <EXTI_System+0x155a>
								DC_Motor_Stop(0);
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <DC_Motor_Stop>
								LCD_ClearScreen();
    58b0:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
    58b4:	bf cc       	rjmp	.-1666   	; 0x5234 <EXTI_System+0x155a>
							}
						}
						break;
					}
					else{
						LCD_ClearScreen();
    58b6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
						LCD_displayString("Wrong Password");
    58ba:	8b ee       	ldi	r24, 0xEB	; 235
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_displayString>
    58c2:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <EXTI_System+0x48>
			}

		}

	}
	else if(Local_u8_Flag == 1){
    58c6:	80 91 16 01 	lds	r24, 0x0116
    58ca:	81 30       	cpi	r24, 0x01	; 1
    58cc:	21 f4       	brne	.+8      	; 0x58d6 <EXTI_System+0x1bfc>
		Local_u8_Flag = 0;
    58ce:	10 92 16 01 	sts	0x0116, r1
		LCD_ClearScreen();
    58d2:	0e 94 e5 19 	call	0x33ca	; 0x33ca <LCD_ClearScreen>
	}

}
    58d6:	ca 5f       	subi	r28, 0xFA	; 250
    58d8:	de 4f       	sbci	r29, 0xFE	; 254
    58da:	0f b6       	in	r0, 0x3f	; 63
    58dc:	f8 94       	cli
    58de:	de bf       	out	0x3e, r29	; 62
    58e0:	0f be       	out	0x3f, r0	; 63
    58e2:	cd bf       	out	0x3d, r28	; 61
    58e4:	cf 91       	pop	r28
    58e6:	df 91       	pop	r29
    58e8:	1f 91       	pop	r17
    58ea:	0f 91       	pop	r16
    58ec:	08 95       	ret

000058ee <__prologue_saves__>:
    58ee:	2f 92       	push	r2
    58f0:	3f 92       	push	r3
    58f2:	4f 92       	push	r4
    58f4:	5f 92       	push	r5
    58f6:	6f 92       	push	r6
    58f8:	7f 92       	push	r7
    58fa:	8f 92       	push	r8
    58fc:	9f 92       	push	r9
    58fe:	af 92       	push	r10
    5900:	bf 92       	push	r11
    5902:	cf 92       	push	r12
    5904:	df 92       	push	r13
    5906:	ef 92       	push	r14
    5908:	ff 92       	push	r15
    590a:	0f 93       	push	r16
    590c:	1f 93       	push	r17
    590e:	cf 93       	push	r28
    5910:	df 93       	push	r29
    5912:	cd b7       	in	r28, 0x3d	; 61
    5914:	de b7       	in	r29, 0x3e	; 62
    5916:	ca 1b       	sub	r28, r26
    5918:	db 0b       	sbc	r29, r27
    591a:	0f b6       	in	r0, 0x3f	; 63
    591c:	f8 94       	cli
    591e:	de bf       	out	0x3e, r29	; 62
    5920:	0f be       	out	0x3f, r0	; 63
    5922:	cd bf       	out	0x3d, r28	; 61
    5924:	09 94       	ijmp

00005926 <__epilogue_restores__>:
    5926:	2a 88       	ldd	r2, Y+18	; 0x12
    5928:	39 88       	ldd	r3, Y+17	; 0x11
    592a:	48 88       	ldd	r4, Y+16	; 0x10
    592c:	5f 84       	ldd	r5, Y+15	; 0x0f
    592e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5930:	7d 84       	ldd	r7, Y+13	; 0x0d
    5932:	8c 84       	ldd	r8, Y+12	; 0x0c
    5934:	9b 84       	ldd	r9, Y+11	; 0x0b
    5936:	aa 84       	ldd	r10, Y+10	; 0x0a
    5938:	b9 84       	ldd	r11, Y+9	; 0x09
    593a:	c8 84       	ldd	r12, Y+8	; 0x08
    593c:	df 80       	ldd	r13, Y+7	; 0x07
    593e:	ee 80       	ldd	r14, Y+6	; 0x06
    5940:	fd 80       	ldd	r15, Y+5	; 0x05
    5942:	0c 81       	ldd	r16, Y+4	; 0x04
    5944:	1b 81       	ldd	r17, Y+3	; 0x03
    5946:	aa 81       	ldd	r26, Y+2	; 0x02
    5948:	b9 81       	ldd	r27, Y+1	; 0x01
    594a:	ce 0f       	add	r28, r30
    594c:	d1 1d       	adc	r29, r1
    594e:	0f b6       	in	r0, 0x3f	; 63
    5950:	f8 94       	cli
    5952:	de bf       	out	0x3e, r29	; 62
    5954:	0f be       	out	0x3f, r0	; 63
    5956:	cd bf       	out	0x3d, r28	; 61
    5958:	ed 01       	movw	r28, r26
    595a:	08 95       	ret

0000595c <_exit>:
    595c:	f8 94       	cli

0000595e <__stop_program>:
    595e:	ff cf       	rjmp	.-2      	; 0x595e <__stop_program>
