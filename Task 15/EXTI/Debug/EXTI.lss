
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005702  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00005702  00005796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080010c  0080010c  00005842  2**0
                  ALLOC
  3 .stab         000051f0  00000000  00000000  00005844  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cc2  00000000  00000000  0000aa34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c836  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f4da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010288  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010675  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010e43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_1>
       8:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__vector_2>
       c:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <main>
      8a:	0c 94 7f 2b 	jmp	0x56fe	; 0x56fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 2b 	jmp	0x56c8	; 0x56c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 2b 	jmp	0x56e0	; 0x56e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 2b 	jmp	0x56e0	; 0x56e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 2b 	jmp	0x5690	; 0x5690 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 2b 	jmp	0x56c8	; 0x56c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 2b 	jmp	0x56e0	; 0x56e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 70 2b 	jmp	0x56e0	; 0x56e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 54 2b 	jmp	0x56a8	; 0x56a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 70 2b 	jmp	0x56e0	; 0x56e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 2b 	jmp	0x56b0	; 0x56b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 74 2b 	jmp	0x56e8	; 0x56e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <setCallBack+0x6>
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	9a 83       	std	Y+2, r25	; 0x02
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	fc 01       	movw	r30, r24
     b9c:	e4 5f       	subi	r30, 0xF4	; 244
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	80 83       	st	Z, r24
}
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
     bbc:	a5 e5       	ldi	r26, 0x55	; 85
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e5 e5       	ldi	r30, 0x55	; 85
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	8e 7f       	andi	r24, 0xFE	; 254
     bc8:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
     bca:	a5 e5       	ldi	r26, 0x55	; 85
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e5 e5       	ldi	r30, 0x55	; 85
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
     bd6:	8c 93       	st	X, r24
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
     be6:	a5 e5       	ldi	r26, 0x55	; 85
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e5 e5       	ldi	r30, 0x55	; 85
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	82 60       	ori	r24, 0x02	; 2
     bf2:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
     bf4:	a5 e5       	ldi	r26, 0x55	; 85
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e5 e5       	ldi	r30, 0x55	; 85
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	8e 7f       	andi	r24, 0xFE	; 254
     c00:	8c 93       	st	X, r24
}
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
     c10:	a5 e5       	ldi	r26, 0x55	; 85
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e5 e5       	ldi	r30, 0x55	; 85
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	8d 7f       	andi	r24, 0xFD	; 253
     c1c:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
     c1e:	a5 e5       	ldi	r26, 0x55	; 85
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e5 e5       	ldi	r30, 0x55	; 85
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	81 60       	ori	r24, 0x01	; 1
     c2a:	8c 93       	st	X, r24
}
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
     c3a:	a5 e5       	ldi	r26, 0x55	; 85
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e5 e5       	ldi	r30, 0x55	; 85
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	82 60       	ori	r24, 0x02	; 2
     c46:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
     c48:	a5 e5       	ldi	r26, 0x55	; 85
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e5 e5       	ldi	r30, 0x55	; 85
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	8c 93       	st	X, r24
}
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
     c64:	a5 e5       	ldi	r26, 0x55	; 85
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e5 e5       	ldi	r30, 0x55	; 85
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	8b 7f       	andi	r24, 0xFB	; 251
     c70:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
     c72:	a5 e5       	ldi	r26, 0x55	; 85
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e5 e5       	ldi	r30, 0x55	; 85
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	8c 93       	st	X, r24
}
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
     c8e:	a5 e5       	ldi	r26, 0x55	; 85
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e5 e5       	ldi	r30, 0x55	; 85
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	88 60       	ori	r24, 0x08	; 8
     c9a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
     c9c:	a5 e5       	ldi	r26, 0x55	; 85
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e5 e5       	ldi	r30, 0x55	; 85
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8b 7f       	andi	r24, 0xFB	; 251
     ca8:	8c 93       	st	X, r24
}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
     cb8:	a5 e5       	ldi	r26, 0x55	; 85
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e5 e5       	ldi	r30, 0x55	; 85
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	87 7f       	andi	r24, 0xF7	; 247
     cc4:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
     cc6:	a5 e5       	ldi	r26, 0x55	; 85
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e5 e5       	ldi	r30, 0x55	; 85
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	84 60       	ori	r24, 0x04	; 4
     cd2:	8c 93       	st	X, r24
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
     ce2:	a5 e5       	ldi	r26, 0x55	; 85
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e5       	ldi	r30, 0x55	; 85
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	88 60       	ori	r24, 0x08	; 8
     cee:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
     cf0:	a5 e5       	ldi	r26, 0x55	; 85
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e5 e5       	ldi	r30, 0x55	; 85
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	84 60       	ori	r24, 0x04	; 4
     cfc:	8c 93       	st	X, r24
}
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
     d0c:	a4 e5       	ldi	r26, 0x54	; 84
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e4 e5       	ldi	r30, 0x54	; 84
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 64       	ori	r24, 0x40	; 64
     d18:	8c 93       	st	X, r24
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
     d28:	a4 e5       	ldi	r26, 0x54	; 84
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e4 e5       	ldi	r30, 0x54	; 84
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7b       	andi	r24, 0xBF	; 191
     d34:	8c 93       	st	X, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_AnyLogicalChange_MODE();
     d44:	0e 94 04 06 	call	0xc08	; 0xc08 <EXTI0_AnyLogicalChange_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
     d48:	ab e5       	ldi	r26, 0x5B	; 91
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	eb e5       	ldi	r30, 0x5B	; 91
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 64       	ori	r24, 0x40	; 64
     d54:	8c 93       	st	X, r24
}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
     d64:	0e 94 58 06 	call	0xcb0	; 0xcb0 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
     d68:	ab e5       	ldi	r26, 0x5B	; 91
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	eb e5       	ldi	r30, 0x5B	; 91
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	8c 93       	st	X, r24
}
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <EXTI_voidEnable>:


void EXTI_voidEnable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Mode){
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	2a 97       	sbiw	r28, 0x0a	; 10
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_EXTI_Index){
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3a 87       	std	Y+10, r19	; 0x0a
     d9c:	29 87       	std	Y+9, r18	; 0x09
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	e9 f1       	breq	.+122    	; 0xe22 <EXTI_voidEnable+0xa6>
     da8:	29 85       	ldd	r18, Y+9	; 0x09
     daa:	3a 85       	ldd	r19, Y+10	; 0x0a
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <EXTI_voidEnable+0x38>
     db2:	69 c0       	rjmp	.+210    	; 0xe86 <EXTI_voidEnable+0x10a>
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	09 f0       	breq	.+2      	; 0xdbe <EXTI_voidEnable+0x42>
     dbc:	7f c0       	rjmp	.+254    	; 0xebc <EXTI_voidEnable+0x140>
		case EXTI0_Index:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
     dbe:	ab e5       	ldi	r26, 0x5B	; 91
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	eb e5       	ldi	r30, 0x5B	; 91
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	80 64       	ori	r24, 0x40	; 64
     dca:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	38 87       	std	Y+8, r19	; 0x08
     dd4:	2f 83       	std	Y+7, r18	; 0x07
     dd6:	8f 81       	ldd	r24, Y+7	; 0x07
     dd8:	98 85       	ldd	r25, Y+8	; 0x08
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	91 05       	cpc	r25, r1
     dde:	c1 f0       	breq	.+48     	; 0xe10 <EXTI_voidEnable+0x94>
     de0:	2f 81       	ldd	r18, Y+7	; 0x07
     de2:	38 85       	ldd	r19, Y+8	; 0x08
     de4:	22 30       	cpi	r18, 0x02	; 2
     de6:	31 05       	cpc	r19, r1
     de8:	2c f4       	brge	.+10     	; 0xdf4 <EXTI_voidEnable+0x78>
     dea:	8f 81       	ldd	r24, Y+7	; 0x07
     dec:	98 85       	ldd	r25, Y+8	; 0x08
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	61 f0       	breq	.+24     	; 0xe0a <EXTI_voidEnable+0x8e>
     df2:	64 c0       	rjmp	.+200    	; 0xebc <EXTI_voidEnable+0x140>
     df4:	2f 81       	ldd	r18, Y+7	; 0x07
     df6:	38 85       	ldd	r19, Y+8	; 0x08
     df8:	22 30       	cpi	r18, 0x02	; 2
     dfa:	31 05       	cpc	r19, r1
     dfc:	61 f0       	breq	.+24     	; 0xe16 <EXTI_voidEnable+0x9a>
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	98 85       	ldd	r25, Y+8	; 0x08
     e02:	83 30       	cpi	r24, 0x03	; 3
     e04:	91 05       	cpc	r25, r1
     e06:	51 f0       	breq	.+20     	; 0xe1c <EXTI_voidEnable+0xa0>
     e08:	59 c0       	rjmp	.+178    	; 0xebc <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
     e0a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <EXTI0_LowLevel_MODE>
     e0e:	56 c0       	rjmp	.+172    	; 0xebc <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
     e10:	0e 94 ef 05 	call	0xbde	; 0xbde <EXTI0_FALLING_MODE>
     e14:	53 c0       	rjmp	.+166    	; 0xebc <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
     e16:	0e 94 04 06 	call	0xc08	; 0xc08 <EXTI0_AnyLogicalChange_MODE>
     e1a:	50 c0       	rjmp	.+160    	; 0xebc <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
     e1c:	0e 94 19 06 	call	0xc32	; 0xc32 <EXTI0_RISING_MODE>
     e20:	4d c0       	rjmp	.+154    	; 0xebc <EXTI_voidEnable+0x140>
			}
			break;

		case EXTI1_Index:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
     e22:	ab e5       	ldi	r26, 0x5B	; 91
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	eb e5       	ldi	r30, 0x5B	; 91
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 68       	ori	r24, 0x80	; 128
     e2e:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	3e 83       	std	Y+6, r19	; 0x06
     e38:	2d 83       	std	Y+5, r18	; 0x05
     e3a:	8d 81       	ldd	r24, Y+5	; 0x05
     e3c:	9e 81       	ldd	r25, Y+6	; 0x06
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	91 05       	cpc	r25, r1
     e42:	c1 f0       	breq	.+48     	; 0xe74 <EXTI_voidEnable+0xf8>
     e44:	2d 81       	ldd	r18, Y+5	; 0x05
     e46:	3e 81       	ldd	r19, Y+6	; 0x06
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	2c f4       	brge	.+10     	; 0xe58 <EXTI_voidEnable+0xdc>
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	61 f0       	breq	.+24     	; 0xe6e <EXTI_voidEnable+0xf2>
     e56:	32 c0       	rjmp	.+100    	; 0xebc <EXTI_voidEnable+0x140>
     e58:	2d 81       	ldd	r18, Y+5	; 0x05
     e5a:	3e 81       	ldd	r19, Y+6	; 0x06
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	61 f0       	breq	.+24     	; 0xe7a <EXTI_voidEnable+0xfe>
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	91 05       	cpc	r25, r1
     e6a:	51 f0       	breq	.+20     	; 0xe80 <EXTI_voidEnable+0x104>
     e6c:	27 c0       	rjmp	.+78     	; 0xebc <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
     e6e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <EXTI1_LowLevel_MODE>
     e72:	24 c0       	rjmp	.+72     	; 0xebc <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
     e74:	0e 94 43 06 	call	0xc86	; 0xc86 <EXTI1_FALLING_MODE>
     e78:	21 c0       	rjmp	.+66     	; 0xebc <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
     e7a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <EXTI1_AnyLogicalChange_MODE>
     e7e:	1e c0       	rjmp	.+60     	; 0xebc <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
     e80:	0e 94 6d 06 	call	0xcda	; 0xcda <EXTI1_RISING_MODE>
     e84:	1b c0       	rjmp	.+54     	; 0xebc <EXTI_voidEnable+0x140>
					break;
			}
			break;
		case EXTI2_Index:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
     e86:	ab e5       	ldi	r26, 0x5B	; 91
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	eb e5       	ldi	r30, 0x5B	; 91
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 62       	ori	r24, 0x20	; 32
     e92:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	3c 83       	std	Y+4, r19	; 0x04
     e9c:	2b 83       	std	Y+3, r18	; 0x03
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	9c 81       	ldd	r25, Y+4	; 0x04
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	91 05       	cpc	r25, r1
     ea6:	41 f0       	breq	.+16     	; 0xeb8 <EXTI_voidEnable+0x13c>
     ea8:	2b 81       	ldd	r18, Y+3	; 0x03
     eaa:	3c 81       	ldd	r19, Y+4	; 0x04
     eac:	23 30       	cpi	r18, 0x03	; 3
     eae:	31 05       	cpc	r19, r1
     eb0:	29 f4       	brne	.+10     	; 0xebc <EXTI_voidEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
     eb2:	0e 94 82 06 	call	0xd04	; 0xd04 <EXTI2_RISING_MODE>
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <EXTI_voidEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
     eb8:	0e 94 90 06 	call	0xd20	; 0xd20 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
     ebc:	2a 96       	adiw	r28, 0x0a	; 10
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8_EXTI_Index){
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <EXTI_voidDisable+0x6>
     ed4:	0f 92       	push	r0
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTI_Index){
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	3b 83       	std	Y+3, r19	; 0x03
     ee4:	2a 83       	std	Y+2, r18	; 0x02
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	31 f0       	breq	.+12     	; 0xefa <EXTI_voidDisable+0x2c>
     eee:	2a 81       	ldd	r18, Y+2	; 0x02
     ef0:	3b 81       	ldd	r19, Y+3	; 0x03
     ef2:	21 30       	cpi	r18, 0x01	; 1
     ef4:	31 05       	cpc	r19, r1
     ef6:	49 f0       	breq	.+18     	; 0xf0a <EXTI_voidDisable+0x3c>
     ef8:	0f c0       	rjmp	.+30     	; 0xf18 <EXTI_voidDisable+0x4a>
		case EXTI0_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
     efa:	ab e5       	ldi	r26, 0x5B	; 91
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e5       	ldi	r30, 0x5B	; 91
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8f 7b       	andi	r24, 0xBF	; 191
     f06:	8c 93       	st	X, r24
     f08:	07 c0       	rjmp	.+14     	; 0xf18 <EXTI_voidDisable+0x4a>
			break;

		case EXTI1_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
     f0a:	ab e5       	ldi	r26, 0x5B	; 91
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e5       	ldi	r30, 0x5B	; 91
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8f 77       	andi	r24, 0x7F	; 127
     f16:	8c 93       	st	X, r24
			break;
	}
}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI0_Index] != NULL){
     f4e:	80 91 0c 01 	lds	r24, 0x010C
     f52:	90 91 0d 01 	lds	r25, 0x010D
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	29 f0       	breq	.+10     	; 0xf64 <__vector_1+0x40>
		EXTI[0]();
     f5a:	e0 91 0c 01 	lds	r30, 0x010C
     f5e:	f0 91 0d 01 	lds	r31, 0x010D
     f62:	09 95       	icall
	}

}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	ef 93       	push	r30
     faa:	ff 93       	push	r31
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI1_Index] != NULL){
     fb4:	80 91 0e 01 	lds	r24, 0x010E
     fb8:	90 91 0f 01 	lds	r25, 0x010F
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	29 f0       	breq	.+10     	; 0xfca <__vector_2+0x40>
			EXTI[1]();
     fc0:	e0 91 0e 01 	lds	r30, 0x010E
     fc4:	f0 91 0f 01 	lds	r31, 0x010F
     fc8:	09 95       	icall
	}

}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI2_Index] != NULL){
    101a:	80 91 10 01 	lds	r24, 0x0110
    101e:	90 91 11 01 	lds	r25, 0x0111
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	29 f0       	breq	.+10     	; 0x1030 <__vector_3+0x40>
			EXTI[2]();
    1026:	e0 91 10 01 	lds	r30, 0x0110
    102a:	f0 91 11 01 	lds	r31, 0x0111
    102e:	09 95       	icall
	}

}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	bf 91       	pop	r27
    103a:	af 91       	pop	r26
    103c:	9f 91       	pop	r25
    103e:	8f 91       	pop	r24
    1040:	7f 91       	pop	r23
    1042:	6f 91       	pop	r22
    1044:	5f 91       	pop	r21
    1046:	4f 91       	pop	r20
    1048:	3f 91       	pop	r19
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	0f 90       	pop	r0
    1052:	1f 90       	pop	r1
    1054:	18 95       	reti

00001056 <LCD_setPinDirection>:
#include "avr/io.h"

#include "../../LIB/BIT_MATH.h"
#include "Dio_Interface.h"
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <LCD_setPinDirection+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <LCD_setPinDirection+0x8>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
    1068:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	08 f0       	brcs	.+2      	; 0x1072 <LCD_setPinDirection+0x1c>
    1070:	d5 c0       	rjmp	.+426    	; 0x121c <LCD_setPinDirection+0x1c6>
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	08 f0       	brcs	.+2      	; 0x107a <LCD_setPinDirection+0x24>
    1078:	d1 c0       	rjmp	.+418    	; 0x121c <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <LCD_setPinDirection+0x3a>
    108e:	43 c0       	rjmp	.+134    	; 0x1116 <LCD_setPinDirection+0xc0>
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	3d 81       	ldd	r19, Y+5	; 0x05
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <LCD_setPinDirection+0x4e>
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	9d 81       	ldd	r25, Y+5	; 0x05
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	71 f0       	breq	.+28     	; 0x10be <LCD_setPinDirection+0x68>
    10a2:	bc c0       	rjmp	.+376    	; 0x121c <LCD_setPinDirection+0x1c6>
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <LCD_setPinDirection+0x5a>
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <LCD_setPinDirection+0x118>
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <LCD_setPinDirection+0x66>
    10ba:	85 c0       	rjmp	.+266    	; 0x11c6 <LCD_setPinDirection+0x170>
    10bc:	af c0       	rjmp	.+350    	; 0x121c <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == AVR_PIN_OUTPUT)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	a1 f4       	brne	.+40     	; 0x10ec <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10c4:	aa e3       	ldi	r26, 0x3A	; 58
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <LCD_setPinDirection+0x8c>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <LCD_setPinDirection+0x88>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	98 c0       	rjmp	.+304    	; 0x121c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    10ec:	aa e3       	ldi	r26, 0x3A	; 58
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ea e3       	ldi	r30, 0x3A	; 58
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <LCD_setPinDirection+0xb4>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <LCD_setPinDirection+0xb0>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	83 c0       	rjmp	.+262    	; 0x121c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == AVR_PIN_OUTPUT)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	a1 f4       	brne	.+40     	; 0x1144 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    111c:	a7 e3       	ldi	r26, 0x37	; 55
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e7 e3       	ldi	r30, 0x37	; 55
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <LCD_setPinDirection+0xe4>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <LCD_setPinDirection+0xe0>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	6c c0       	rjmp	.+216    	; 0x121c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    1144:	a7 e3       	ldi	r26, 0x37	; 55
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e7 e3       	ldi	r30, 0x37	; 55
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <LCD_setPinDirection+0x10c>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <LCD_setPinDirection+0x108>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	57 c0       	rjmp	.+174    	; 0x121c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == AVR_PIN_OUTPUT)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1174:	a4 e3       	ldi	r26, 0x34	; 52
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e4 e3       	ldi	r30, 0x34	; 52
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <LCD_setPinDirection+0x13c>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <LCD_setPinDirection+0x138>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	40 c0       	rjmp	.+128    	; 0x121c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    119c:	a4 e3       	ldi	r26, 0x34	; 52
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e4 e3       	ldi	r30, 0x34	; 52
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <LCD_setPinDirection+0x164>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <LCD_setPinDirection+0x160>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	2b c0       	rjmp	.+86     	; 0x121c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == AVR_PIN_OUTPUT)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11cc:	a1 e3       	ldi	r26, 0x31	; 49
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e1 e3       	ldi	r30, 0x31	; 49
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <LCD_setPinDirection+0x194>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <LCD_setPinDirection+0x190>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    11f4:	a1 e3       	ldi	r26, 0x31	; 49
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e1 e3       	ldi	r30, 0x31	; 49
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <LCD_setPinDirection+0x1bc>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <LCD_setPinDirection+0x1b8>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <LCD_setPinValue+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <LCD_setPinValue+0x8>
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
    123e:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	88 30       	cpi	r24, 0x08	; 8
    1244:	08 f0       	brcs	.+2      	; 0x1248 <LCD_setPinValue+0x1c>
    1246:	d5 c0       	rjmp	.+426    	; 0x13f2 <LCD_setPinValue+0x1c6>
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	08 f0       	brcs	.+2      	; 0x1250 <LCD_setPinValue+0x24>
    124e:	d1 c0       	rjmp	.+418    	; 0x13f2 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <LCD_setPinValue+0x3a>
    1264:	43 c0       	rjmp	.+134    	; 0x12ec <LCD_setPinValue+0xc0>
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	3d 81       	ldd	r19, Y+5	; 0x05
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	2c f4       	brge	.+10     	; 0x127a <LCD_setPinValue+0x4e>
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	71 f0       	breq	.+28     	; 0x1294 <LCD_setPinValue+0x68>
    1278:	bc c0       	rjmp	.+376    	; 0x13f2 <LCD_setPinValue+0x1c6>
    127a:	2c 81       	ldd	r18, Y+4	; 0x04
    127c:	3d 81       	ldd	r19, Y+5	; 0x05
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <LCD_setPinValue+0x5a>
    1284:	5f c0       	rjmp	.+190    	; 0x1344 <LCD_setPinValue+0x118>
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	09 f4       	brne	.+2      	; 0x1292 <LCD_setPinValue+0x66>
    1290:	85 c0       	rjmp	.+266    	; 0x139c <LCD_setPinValue+0x170>
    1292:	af c0       	rjmp	.+350    	; 0x13f2 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	a1 f4       	brne	.+40     	; 0x12c2 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    129a:	ab e3       	ldi	r26, 0x3B	; 59
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <LCD_setPinValue+0x8c>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <LCD_setPinValue+0x88>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	98 c0       	rjmp	.+304    	; 0x13f2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    12c2:	ab e3       	ldi	r26, 0x3B	; 59
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e3       	ldi	r30, 0x3B	; 59
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <LCD_setPinValue+0xb4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <LCD_setPinValue+0xb0>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	83 c0       	rjmp	.+262    	; 0x13f2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	a1 f4       	brne	.+40     	; 0x131a <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <LCD_setPinValue+0xe4>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <LCD_setPinValue+0xe0>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	6c c0       	rjmp	.+216    	; 0x13f2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    131a:	a8 e3       	ldi	r26, 0x38	; 56
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <LCD_setPinValue+0x10c>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <LCD_setPinValue+0x108>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	57 c0       	rjmp	.+174    	; 0x13f2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	a1 f4       	brne	.+40     	; 0x1372 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    134a:	a5 e3       	ldi	r26, 0x35	; 53
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <LCD_setPinValue+0x13c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <LCD_setPinValue+0x138>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	40 c0       	rjmp	.+128    	; 0x13f2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    1372:	a5 e3       	ldi	r26, 0x35	; 53
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <LCD_setPinValue+0x164>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <LCD_setPinValue+0x160>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	2b c0       	rjmp	.+86     	; 0x13f2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13a2:	a2 e3       	ldi	r26, 0x32	; 50
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e2 e3       	ldi	r30, 0x32	; 50
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <LCD_setPinValue+0x194>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <LCD_setPinValue+0x190>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    13ca:	a2 e3       	ldi	r26, 0x32	; 50
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e2 e3       	ldi	r30, 0x32	; 50
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <LCD_setPinValue+0x1bc>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <LCD_setPinValue+0x1b8>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <LCD_getPinValue+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <LCD_getPinValue+0x8>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	8a 83       	std	Y+2, r24	; 0x02
    1412:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1414:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	08 f0       	brcs	.+2      	; 0x141e <LCD_getPinValue+0x1c>
    141c:	84 c0       	rjmp	.+264    	; 0x1526 <LCD_getPinValue+0x124>
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	08 f0       	brcs	.+2      	; 0x1426 <LCD_getPinValue+0x24>
    1424:	80 c0       	rjmp	.+256    	; 0x1526 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3d 83       	std	Y+5, r19	; 0x05
    142e:	2c 83       	std	Y+4, r18	; 0x04
    1430:	4c 81       	ldd	r20, Y+4	; 0x04
    1432:	5d 81       	ldd	r21, Y+5	; 0x05
    1434:	41 30       	cpi	r20, 0x01	; 1
    1436:	51 05       	cpc	r21, r1
    1438:	79 f1       	breq	.+94     	; 0x1498 <LCD_getPinValue+0x96>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <LCD_getPinValue+0x4e>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	69 f0       	breq	.+26     	; 0x1468 <LCD_getPinValue+0x66>
    144e:	6b c0       	rjmp	.+214    	; 0x1526 <LCD_getPinValue+0x124>
    1450:	4c 81       	ldd	r20, Y+4	; 0x04
    1452:	5d 81       	ldd	r21, Y+5	; 0x05
    1454:	42 30       	cpi	r20, 0x02	; 2
    1456:	51 05       	cpc	r21, r1
    1458:	b9 f1       	breq	.+110    	; 0x14c8 <LCD_getPinValue+0xc6>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <LCD_getPinValue+0x64>
    1464:	49 c0       	rjmp	.+146    	; 0x14f8 <LCD_getPinValue+0xf6>
    1466:	5f c0       	rjmp	.+190    	; 0x1526 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1468:	e9 e3       	ldi	r30, 0x39	; 57
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <LCD_getPinValue+0x7e>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <LCD_getPinValue+0x7a>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	88 23       	and	r24, r24
    148c:	19 f0       	breq	.+6      	; 0x1494 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	49 c0       	rjmp	.+146    	; 0x1526 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1494:	19 82       	std	Y+1, r1	; 0x01
    1496:	47 c0       	rjmp	.+142    	; 0x1526 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1498:	e6 e3       	ldi	r30, 0x36	; 54
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <LCD_getPinValue+0xae>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <LCD_getPinValue+0xaa>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	90 70       	andi	r25, 0x00	; 0
    14ba:	88 23       	and	r24, r24
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	31 c0       	rjmp	.+98     	; 0x1526 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14c4:	19 82       	std	Y+1, r1	; 0x01
    14c6:	2f c0       	rjmp	.+94     	; 0x1526 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14c8:	e3 e3       	ldi	r30, 0x33	; 51
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <LCD_getPinValue+0xde>
    14dc:	55 95       	asr	r21
    14de:	47 95       	ror	r20
    14e0:	8a 95       	dec	r24
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <LCD_getPinValue+0xda>
    14e4:	ca 01       	movw	r24, r20
    14e6:	81 70       	andi	r24, 0x01	; 1
    14e8:	90 70       	andi	r25, 0x00	; 0
    14ea:	88 23       	and	r24, r24
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	19 c0       	rjmp	.+50     	; 0x1526 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14f4:	19 82       	std	Y+1, r1	; 0x01
    14f6:	17 c0       	rjmp	.+46     	; 0x1526 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14f8:	e0 e3       	ldi	r30, 0x30	; 48
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <LCD_getPinValue+0x10e>
    150c:	55 95       	asr	r21
    150e:	47 95       	ror	r20
    1510:	8a 95       	dec	r24
    1512:	e2 f7       	brpl	.-8      	; 0x150c <LCD_getPinValue+0x10a>
    1514:	ca 01       	movw	r24, r20
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	90 70       	andi	r25, 0x00	; 0
    151a:	88 23       	and	r24, r24
    151c:	19 f0       	breq	.+6      	; 0x1524 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1524:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <LCD_setPortDirection+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <LCD_setPortDirection+0x8>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	90 f5       	brcc	.+100    	; 0x15b2 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3c 83       	std	Y+4, r19	; 0x04
    1556:	2b 83       	std	Y+3, r18	; 0x03
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	d1 f0       	breq	.+52     	; 0x1596 <LCD_setPortDirection+0x5e>
    1562:	2b 81       	ldd	r18, Y+3	; 0x03
    1564:	3c 81       	ldd	r19, Y+4	; 0x04
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	2c f4       	brge	.+10     	; 0x1576 <LCD_setPortDirection+0x3e>
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	61 f0       	breq	.+24     	; 0x158c <LCD_setPortDirection+0x54>
    1574:	1e c0       	rjmp	.+60     	; 0x15b2 <LCD_setPortDirection+0x7a>
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	81 f0       	breq	.+32     	; 0x15a0 <LCD_setPortDirection+0x68>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	81 f0       	breq	.+32     	; 0x15aa <LCD_setPortDirection+0x72>
    158a:	13 c0       	rjmp	.+38     	; 0x15b2 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    158c:	ea e3       	ldi	r30, 0x3A	; 58
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	80 83       	st	Z, r24
    1594:	0e c0       	rjmp	.+28     	; 0x15b2 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1596:	e7 e3       	ldi	r30, 0x37	; 55
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	80 83       	st	Z, r24
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15a0:	e4 e3       	ldi	r30, 0x34	; 52
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	80 83       	st	Z, r24
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15aa:	e1 e3       	ldi	r30, 0x31	; 49
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <LCD_setPortValue+0x6>
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <LCD_setPortValue+0x8>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	90 f5       	brcc	.+100    	; 0x163a <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3c 83       	std	Y+4, r19	; 0x04
    15de:	2b 83       	std	Y+3, r18	; 0x03
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	d1 f0       	breq	.+52     	; 0x161e <LCD_setPortValue+0x5e>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	2c f4       	brge	.+10     	; 0x15fe <LCD_setPortValue+0x3e>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	61 f0       	breq	.+24     	; 0x1614 <LCD_setPortValue+0x54>
    15fc:	1e c0       	rjmp	.+60     	; 0x163a <LCD_setPortValue+0x7a>
    15fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1600:	3c 81       	ldd	r19, Y+4	; 0x04
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	81 f0       	breq	.+32     	; 0x1628 <LCD_setPortValue+0x68>
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	81 f0       	breq	.+32     	; 0x1632 <LCD_setPortValue+0x72>
    1612:	13 c0       	rjmp	.+38     	; 0x163a <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1614:	eb e3       	ldi	r30, 0x3B	; 59
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	80 83       	st	Z, r24
    161c:	0e c0       	rjmp	.+28     	; 0x163a <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    161e:	e8 e3       	ldi	r30, 0x38	; 56
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	80 83       	st	Z, r24
    1626:	09 c0       	rjmp	.+18     	; 0x163a <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 83       	st	Z, r24
    1630:	04 c0       	rjmp	.+8      	; 0x163a <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1632:	e2 e3       	ldi	r30, 0x32	; 50
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 83       	st	Z, r24
			break;
		}
	}
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <LCD_getPortValue+0x6>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <LCD_getPortValue+0x8>
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1656:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	84 30       	cpi	r24, 0x04	; 4
    165c:	90 f5       	brcc	.+100    	; 0x16c2 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3c 83       	std	Y+4, r19	; 0x04
    1666:	2b 83       	std	Y+3, r18	; 0x03
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	d1 f0       	breq	.+52     	; 0x16a6 <LCD_getPortValue+0x5e>
    1672:	2b 81       	ldd	r18, Y+3	; 0x03
    1674:	3c 81       	ldd	r19, Y+4	; 0x04
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <LCD_getPortValue+0x3e>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	61 f0       	breq	.+24     	; 0x169c <LCD_getPortValue+0x54>
    1684:	1e c0       	rjmp	.+60     	; 0x16c2 <LCD_getPortValue+0x7a>
    1686:	2b 81       	ldd	r18, Y+3	; 0x03
    1688:	3c 81       	ldd	r19, Y+4	; 0x04
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	81 f0       	breq	.+32     	; 0x16b0 <LCD_getPortValue+0x68>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <LCD_getPortValue+0x72>
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    169c:	e9 e3       	ldi	r30, 0x39	; 57
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	0e c0       	rjmp	.+28     	; 0x16c2 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16a6:	e6 e3       	ldi	r30, 0x36	; 54
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16b0:	e3 e3       	ldi	r30, 0x33	; 51
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16ba:	e0 e3       	ldi	r30, 0x30	; 48
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    16da:	ea e3       	ldi	r30, 0x3A	; 58
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    16e0:	e7 e3       	ldi	r30, 0x37	; 55
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    16e6:	e4 e3       	ldi	r30, 0x34	; 52
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8f ef       	ldi	r24, 0xFF	; 255
    16ec:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    16ee:	e1 e3       	ldi	r30, 0x31	; 49
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 e3       	ldi	r24, 0x30	; 48
    16f4:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    16f6:	eb e3       	ldi	r30, 0x3B	; 59
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    16fc:	e8 e3       	ldi	r30, 0x38	; 56
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    1702:	e5 e3       	ldi	r30, 0x35	; 53
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    1708:	e2 e3       	ldi	r30, 0x32	; 50
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	10 82       	st	Z, r1

}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	2e 97       	sbiw	r28, 0x0e	; 14
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	8a 83       	std	Y+2, r24	; 0x02
    172a:	6b 83       	std	Y+3, r22	; 0x03
    172c:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	08 f0       	brcs	.+2      	; 0x173a <DIO_u8SetPinDirection+0x26>
    1738:	0c c1       	rjmp	.+536    	; 0x1952 <DIO_u8SetPinDirection+0x23e>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	88 30       	cpi	r24, 0x08	; 8
    173e:	08 f0       	brcs	.+2      	; 0x1742 <DIO_u8SetPinDirection+0x2e>
    1740:	08 c1       	rjmp	.+528    	; 0x1952 <DIO_u8SetPinDirection+0x23e>
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	21 f0       	breq	.+8      	; 0x1750 <DIO_u8SetPinDirection+0x3c>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	88 23       	and	r24, r24
    174c:	09 f0       	breq	.+2      	; 0x1750 <DIO_u8SetPinDirection+0x3c>
    174e:	01 c1       	rjmp	.+514    	; 0x1952 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	3e 87       	std	Y+14, r19	; 0x0e
    1758:	2d 87       	std	Y+13, r18	; 0x0d
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	91 05       	cpc	r25, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <DIO_u8SetPinDirection+0x52>
    1764:	4f c0       	rjmp	.+158    	; 0x1804 <DIO_u8SetPinDirection+0xf0>
    1766:	2d 85       	ldd	r18, Y+13	; 0x0d
    1768:	3e 85       	ldd	r19, Y+14	; 0x0e
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	2c f4       	brge	.+10     	; 0x177a <DIO_u8SetPinDirection+0x66>
    1770:	8d 85       	ldd	r24, Y+13	; 0x0d
    1772:	9e 85       	ldd	r25, Y+14	; 0x0e
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	71 f0       	breq	.+28     	; 0x1794 <DIO_u8SetPinDirection+0x80>
    1778:	ed c0       	rjmp	.+474    	; 0x1954 <DIO_u8SetPinDirection+0x240>
    177a:	2d 85       	ldd	r18, Y+13	; 0x0d
    177c:	3e 85       	ldd	r19, Y+14	; 0x0e
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <DIO_u8SetPinDirection+0x72>
    1784:	77 c0       	rjmp	.+238    	; 0x1874 <DIO_u8SetPinDirection+0x160>
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	9e 85       	ldd	r25, Y+14	; 0x0e
    178a:	83 30       	cpi	r24, 0x03	; 3
    178c:	91 05       	cpc	r25, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <DIO_u8SetPinDirection+0x7e>
    1790:	a9 c0       	rjmp	.+338    	; 0x18e4 <DIO_u8SetPinDirection+0x1d0>
    1792:	e0 c0       	rjmp	.+448    	; 0x1954 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	3c 87       	std	Y+12, r19	; 0x0c
    179c:	2b 87       	std	Y+11, r18	; 0x0b
    179e:	8b 85       	ldd	r24, Y+11	; 0x0b
    17a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	d1 f0       	breq	.+52     	; 0x17da <DIO_u8SetPinDirection+0xc6>
    17a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    17a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    17aa:	21 30       	cpi	r18, 0x01	; 1
    17ac:	31 05       	cpc	r19, r1
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <DIO_u8SetPinDirection+0x9e>
    17b0:	d1 c0       	rjmp	.+418    	; 0x1954 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    17b2:	aa e3       	ldi	r26, 0x3A	; 58
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	ea e3       	ldi	r30, 0x3A	; 58
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_u8SetPinDirection+0xbc>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_u8SetPinDirection+0xb8>
    17d4:	84 2b       	or	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	bd c0       	rjmp	.+378    	; 0x1954 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    17da:	aa e3       	ldi	r26, 0x3A	; 58
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ea e3       	ldi	r30, 0x3A	; 58
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <DIO_u8SetPinDirection+0xe4>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <DIO_u8SetPinDirection+0xe0>
    17fc:	80 95       	com	r24
    17fe:	84 23       	and	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	a8 c0       	rjmp	.+336    	; 0x1954 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3a 87       	std	Y+10, r19	; 0x0a
    180c:	29 87       	std	Y+9, r18	; 0x09
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	d1 f0       	breq	.+52     	; 0x184a <DIO_u8SetPinDirection+0x136>
    1816:	29 85       	ldd	r18, Y+9	; 0x09
    1818:	3a 85       	ldd	r19, Y+10	; 0x0a
    181a:	21 30       	cpi	r18, 0x01	; 1
    181c:	31 05       	cpc	r19, r1
    181e:	09 f0       	breq	.+2      	; 0x1822 <DIO_u8SetPinDirection+0x10e>
    1820:	99 c0       	rjmp	.+306    	; 0x1954 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1822:	a7 e3       	ldi	r26, 0x37	; 55
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e7 e3       	ldi	r30, 0x37	; 55
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_u8SetPinDirection+0x12c>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_u8SetPinDirection+0x128>
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	85 c0       	rjmp	.+266    	; 0x1954 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    184a:	a7 e3       	ldi	r26, 0x37	; 55
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e7 e3       	ldi	r30, 0x37	; 55
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_u8SetPinDirection+0x154>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_u8SetPinDirection+0x150>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	70 c0       	rjmp	.+224    	; 0x1954 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	38 87       	std	Y+8, r19	; 0x08
    187c:	2f 83       	std	Y+7, r18	; 0x07
    187e:	8f 81       	ldd	r24, Y+7	; 0x07
    1880:	98 85       	ldd	r25, Y+8	; 0x08
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	d1 f0       	breq	.+52     	; 0x18ba <DIO_u8SetPinDirection+0x1a6>
    1886:	2f 81       	ldd	r18, Y+7	; 0x07
    1888:	38 85       	ldd	r19, Y+8	; 0x08
    188a:	21 30       	cpi	r18, 0x01	; 1
    188c:	31 05       	cpc	r19, r1
    188e:	09 f0       	breq	.+2      	; 0x1892 <DIO_u8SetPinDirection+0x17e>
    1890:	61 c0       	rjmp	.+194    	; 0x1954 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1892:	a4 e3       	ldi	r26, 0x34	; 52
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e4 e3       	ldi	r30, 0x34	; 52
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_u8SetPinDirection+0x19c>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_u8SetPinDirection+0x198>
    18b4:	84 2b       	or	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	4d c0       	rjmp	.+154    	; 0x1954 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    18ba:	a4 e3       	ldi	r26, 0x34	; 52
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e4 e3       	ldi	r30, 0x34	; 52
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_u8SetPinDirection+0x1c4>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_u8SetPinDirection+0x1c0>
    18dc:	80 95       	com	r24
    18de:	84 23       	and	r24, r20
    18e0:	8c 93       	st	X, r24
    18e2:	38 c0       	rjmp	.+112    	; 0x1954 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3e 83       	std	Y+6, r19	; 0x06
    18ec:	2d 83       	std	Y+5, r18	; 0x05
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	c9 f0       	breq	.+50     	; 0x1928 <DIO_u8SetPinDirection+0x214>
    18f6:	2d 81       	ldd	r18, Y+5	; 0x05
    18f8:	3e 81       	ldd	r19, Y+6	; 0x06
    18fa:	21 30       	cpi	r18, 0x01	; 1
    18fc:	31 05       	cpc	r19, r1
    18fe:	51 f5       	brne	.+84     	; 0x1954 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1900:	a1 e3       	ldi	r26, 0x31	; 49
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e1 e3       	ldi	r30, 0x31	; 49
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_u8SetPinDirection+0x20a>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_u8SetPinDirection+0x206>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	16 c0       	rjmp	.+44     	; 0x1954 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1928:	a1 e3       	ldi	r26, 0x31	; 49
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e1 e3       	ldi	r30, 0x31	; 49
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_u8SetPinDirection+0x232>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_u8SetPinDirection+0x22e>
    194a:	80 95       	com	r24
    194c:	84 23       	and	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1952:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1954:	89 81       	ldd	r24, Y+1	; 0x01
}
    1956:	2e 96       	adiw	r28, 0x0e	; 14
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	2f 97       	sbiw	r28, 0x0f	; 15
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	8b 83       	std	Y+3, r24	; 0x03
    197e:	6c 83       	std	Y+4, r22	; 0x04
    1980:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	84 30       	cpi	r24, 0x04	; 4
    198a:	08 f0       	brcs	.+2      	; 0x198e <DIO_u8SetPinValue+0x26>
    198c:	13 c1       	rjmp	.+550    	; 0x1bb4 <DIO_u8SetPinValue+0x24c>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	88 30       	cpi	r24, 0x08	; 8
    1992:	08 f0       	brcs	.+2      	; 0x1996 <DIO_u8SetPinValue+0x2e>
    1994:	0f c1       	rjmp	.+542    	; 0x1bb4 <DIO_u8SetPinValue+0x24c>
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	88 23       	and	r24, r24
    199a:	21 f0       	breq	.+8      	; 0x19a4 <DIO_u8SetPinValue+0x3c>
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	81 30       	cpi	r24, 0x01	; 1
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <DIO_u8SetPinValue+0x3c>
    19a2:	08 c1       	rjmp	.+528    	; 0x1bb4 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	3f 87       	std	Y+15, r19	; 0x0f
    19ac:	2e 87       	std	Y+14, r18	; 0x0e
    19ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    19b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <DIO_u8SetPinValue+0x52>
    19b8:	50 c0       	rjmp	.+160    	; 0x1a5a <DIO_u8SetPinValue+0xf2>
    19ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    19bc:	3f 85       	ldd	r19, Y+15	; 0x0f
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	31 05       	cpc	r19, r1
    19c2:	2c f4       	brge	.+10     	; 0x19ce <DIO_u8SetPinValue+0x66>
    19c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    19c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <DIO_u8SetPinValue+0x80>
    19cc:	f4 c0       	rjmp	.+488    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
    19ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    19d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	09 f4       	brne	.+2      	; 0x19da <DIO_u8SetPinValue+0x72>
    19d8:	79 c0       	rjmp	.+242    	; 0x1acc <DIO_u8SetPinValue+0x164>
    19da:	8e 85       	ldd	r24, Y+14	; 0x0e
    19dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <DIO_u8SetPinValue+0x7e>
    19e4:	ad c0       	rjmp	.+346    	; 0x1b40 <DIO_u8SetPinValue+0x1d8>
    19e6:	e7 c0       	rjmp	.+462    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3d 87       	std	Y+13, r19	; 0x0d
    19f0:	2c 87       	std	Y+12, r18	; 0x0c
    19f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    19f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	c9 f0       	breq	.+50     	; 0x1a2c <DIO_u8SetPinValue+0xc4>
    19fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    19fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    19fe:	21 30       	cpi	r18, 0x01	; 1
    1a00:	31 05       	cpc	r19, r1
    1a02:	49 f5       	brne	.+82     	; 0x1a56 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1a04:	ab e3       	ldi	r26, 0x3B	; 59
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	eb e3       	ldi	r30, 0x3B	; 59
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_u8SetPinValue+0xba>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <DIO_u8SetPinValue+0xb6>
    1a26:	84 2b       	or	r24, r20
    1a28:	8c 93       	st	X, r24
    1a2a:	c5 c0       	rjmp	.+394    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1a2c:	ab e3       	ldi	r26, 0x3B	; 59
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	eb e3       	ldi	r30, 0x3B	; 59
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_u8SetPinValue+0xe2>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_u8SetPinValue+0xde>
    1a4e:	80 95       	com	r24
    1a50:	84 23       	and	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	b0 c0       	rjmp	.+352    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1a56:	1a 82       	std	Y+2, r1	; 0x02
    1a58:	ae c0       	rjmp	.+348    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3b 87       	std	Y+11, r19	; 0x0b
    1a62:	2a 87       	std	Y+10, r18	; 0x0a
    1a64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	c9 f0       	breq	.+50     	; 0x1a9e <DIO_u8SetPinValue+0x136>
    1a6c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a6e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a70:	21 30       	cpi	r18, 0x01	; 1
    1a72:	31 05       	cpc	r19, r1
    1a74:	49 f5       	brne	.+82     	; 0x1ac8 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1a76:	a8 e3       	ldi	r26, 0x38	; 56
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e8 e3       	ldi	r30, 0x38	; 56
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	8c 81       	ldd	r24, Y+4	; 0x04
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_u8SetPinValue+0x12c>
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	0a 94       	dec	r0
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_u8SetPinValue+0x128>
    1a98:	84 2b       	or	r24, r20
    1a9a:	8c 93       	st	X, r24
    1a9c:	8c c0       	rjmp	.+280    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1a9e:	a8 e3       	ldi	r26, 0x38	; 56
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e8 e3       	ldi	r30, 0x38	; 56
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_u8SetPinValue+0x154>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_u8SetPinValue+0x150>
    1ac0:	80 95       	com	r24
    1ac2:	84 23       	and	r24, r20
    1ac4:	8c 93       	st	X, r24
    1ac6:	77 c0       	rjmp	.+238    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1ac8:	1a 82       	std	Y+2, r1	; 0x02
    1aca:	75 c0       	rjmp	.+234    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	39 87       	std	Y+9, r19	; 0x09
    1ad4:	28 87       	std	Y+8, r18	; 0x08
    1ad6:	88 85       	ldd	r24, Y+8	; 0x08
    1ad8:	99 85       	ldd	r25, Y+9	; 0x09
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	31 f0       	breq	.+12     	; 0x1aea <DIO_u8SetPinValue+0x182>
    1ade:	28 85       	ldd	r18, Y+8	; 0x08
    1ae0:	39 85       	ldd	r19, Y+9	; 0x09
    1ae2:	21 30       	cpi	r18, 0x01	; 1
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	b1 f0       	breq	.+44     	; 0x1b14 <DIO_u8SetPinValue+0x1ac>
    1ae8:	29 c0       	rjmp	.+82     	; 0x1b3c <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1aea:	a5 e3       	ldi	r26, 0x35	; 53
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e5 e3       	ldi	r30, 0x35	; 53
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_u8SetPinValue+0x1a0>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_u8SetPinValue+0x19c>
    1b0c:	80 95       	com	r24
    1b0e:	84 23       	and	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	51 c0       	rjmp	.+162    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1b14:	a5 e3       	ldi	r26, 0x35	; 53
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e5 e3       	ldi	r30, 0x35	; 53
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	48 2f       	mov	r20, r24
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 2e       	mov	r0, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <DIO_u8SetPinValue+0x1ca>
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <DIO_u8SetPinValue+0x1c6>
    1b36:	84 2b       	or	r24, r20
    1b38:	8c 93       	st	X, r24
    1b3a:	3d c0       	rjmp	.+122    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1b3c:	1a 82       	std	Y+2, r1	; 0x02
    1b3e:	3b c0       	rjmp	.+118    	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	3f 83       	std	Y+7, r19	; 0x07
    1b48:	2e 83       	std	Y+6, r18	; 0x06
    1b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	31 f0       	breq	.+12     	; 0x1b5e <DIO_u8SetPinValue+0x1f6>
    1b52:	2e 81       	ldd	r18, Y+6	; 0x06
    1b54:	3f 81       	ldd	r19, Y+7	; 0x07
    1b56:	21 30       	cpi	r18, 0x01	; 1
    1b58:	31 05       	cpc	r19, r1
    1b5a:	b1 f0       	breq	.+44     	; 0x1b88 <DIO_u8SetPinValue+0x220>
    1b5c:	29 c0       	rjmp	.+82     	; 0x1bb0 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1b5e:	a5 e3       	ldi	r26, 0x35	; 53
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e5 e3       	ldi	r30, 0x35	; 53
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <DIO_u8SetPinValue+0x214>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <DIO_u8SetPinValue+0x210>
    1b80:	80 95       	com	r24
    1b82:	84 23       	and	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	17 c0       	rjmp	.+46     	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1b88:	a2 e3       	ldi	r26, 0x32	; 50
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e2 e3       	ldi	r30, 0x32	; 50
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <DIO_u8SetPinValue+0x23e>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <DIO_u8SetPinValue+0x23a>
    1baa:	84 2b       	or	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1bb0:	1a 82       	std	Y+2, r1	; 0x02
    1bb2:	01 c0       	rjmp	.+2      	; 0x1bb6 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    1bb4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bb8:	2f 96       	adiw	r28, 0x0f	; 15
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	28 97       	sbiw	r28, 0x08	; 8
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	6c 83       	std	Y+4, r22	; 0x04
    1be2:	5e 83       	std	Y+6, r21	; 0x06
    1be4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	84 30       	cpi	r24, 0x04	; 4
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <DIO_u8GetPinValue+0x28>
    1bf0:	9f c0       	rjmp	.+318    	; 0x1d30 <DIO_u8GetPinValue+0x166>
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	88 30       	cpi	r24, 0x08	; 8
    1bf6:	08 f0       	brcs	.+2      	; 0x1bfa <DIO_u8GetPinValue+0x30>
    1bf8:	9b c0       	rjmp	.+310    	; 0x1d30 <DIO_u8GetPinValue+0x166>
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <DIO_u8GetPinValue+0x3a>
    1c02:	96 c0       	rjmp	.+300    	; 0x1d30 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	38 87       	std	Y+8, r19	; 0x08
    1c0c:	2f 83       	std	Y+7, r18	; 0x07
    1c0e:	4f 81       	ldd	r20, Y+7	; 0x07
    1c10:	58 85       	ldd	r21, Y+8	; 0x08
    1c12:	41 30       	cpi	r20, 0x01	; 1
    1c14:	51 05       	cpc	r21, r1
    1c16:	a9 f1       	breq	.+106    	; 0x1c82 <DIO_u8GetPinValue+0xb8>
    1c18:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1a:	98 85       	ldd	r25, Y+8	; 0x08
    1c1c:	82 30       	cpi	r24, 0x02	; 2
    1c1e:	91 05       	cpc	r25, r1
    1c20:	34 f4       	brge	.+12     	; 0x1c2e <DIO_u8GetPinValue+0x64>
    1c22:	2f 81       	ldd	r18, Y+7	; 0x07
    1c24:	38 85       	ldd	r19, Y+8	; 0x08
    1c26:	21 15       	cp	r18, r1
    1c28:	31 05       	cpc	r19, r1
    1c2a:	71 f0       	breq	.+28     	; 0x1c48 <DIO_u8GetPinValue+0x7e>
    1c2c:	82 c0       	rjmp	.+260    	; 0x1d32 <DIO_u8GetPinValue+0x168>
    1c2e:	4f 81       	ldd	r20, Y+7	; 0x07
    1c30:	58 85       	ldd	r21, Y+8	; 0x08
    1c32:	42 30       	cpi	r20, 0x02	; 2
    1c34:	51 05       	cpc	r21, r1
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <DIO_u8GetPinValue+0x70>
    1c38:	41 c0       	rjmp	.+130    	; 0x1cbc <DIO_u8GetPinValue+0xf2>
    1c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3c:	98 85       	ldd	r25, Y+8	; 0x08
    1c3e:	83 30       	cpi	r24, 0x03	; 3
    1c40:	91 05       	cpc	r25, r1
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <DIO_u8GetPinValue+0x7c>
    1c44:	58 c0       	rjmp	.+176    	; 0x1cf6 <DIO_u8GetPinValue+0x12c>
    1c46:	75 c0       	rjmp	.+234    	; 0x1d32 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1c48:	e9 e3       	ldi	r30, 0x39	; 57
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	a9 01       	movw	r20, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_u8GetPinValue+0x96>
    1c5c:	55 95       	asr	r21
    1c5e:	47 95       	ror	r20
    1c60:	8a 95       	dec	r24
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_u8GetPinValue+0x92>
    1c64:	ca 01       	movw	r24, r20
    1c66:	81 70       	andi	r24, 0x01	; 1
    1c68:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	88 23       	and	r24, r24
    1c6e:	21 f4       	brne	.+8      	; 0x1c78 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1c70:	ed 81       	ldd	r30, Y+5	; 0x05
    1c72:	fe 81       	ldd	r31, Y+6	; 0x06
    1c74:	10 82       	st	Z, r1
    1c76:	5d c0       	rjmp	.+186    	; 0x1d32 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1c78:	ed 81       	ldd	r30, Y+5	; 0x05
    1c7a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	80 83       	st	Z, r24
    1c80:	58 c0       	rjmp	.+176    	; 0x1d32 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1c82:	e6 e3       	ldi	r30, 0x36	; 54
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a9 01       	movw	r20, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <DIO_u8GetPinValue+0xd0>
    1c96:	55 95       	asr	r21
    1c98:	47 95       	ror	r20
    1c9a:	8a 95       	dec	r24
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <DIO_u8GetPinValue+0xcc>
    1c9e:	ca 01       	movw	r24, r20
    1ca0:	81 70       	andi	r24, 0x01	; 1
    1ca2:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	88 23       	and	r24, r24
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1caa:	ed 81       	ldd	r30, Y+5	; 0x05
    1cac:	fe 81       	ldd	r31, Y+6	; 0x06
    1cae:	10 82       	st	Z, r1
    1cb0:	40 c0       	rjmp	.+128    	; 0x1d32 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1cb2:	ed 81       	ldd	r30, Y+5	; 0x05
    1cb4:	fe 81       	ldd	r31, Y+6	; 0x06
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	80 83       	st	Z, r24
    1cba:	3b c0       	rjmp	.+118    	; 0x1d32 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1cbc:	e3 e3       	ldi	r30, 0x33	; 51
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	88 2f       	mov	r24, r24
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	a9 01       	movw	r20, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_u8GetPinValue+0x10a>
    1cd0:	55 95       	asr	r21
    1cd2:	47 95       	ror	r20
    1cd4:	8a 95       	dec	r24
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <DIO_u8GetPinValue+0x106>
    1cd8:	ca 01       	movw	r24, r20
    1cda:	81 70       	andi	r24, 0x01	; 1
    1cdc:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	88 23       	and	r24, r24
    1ce2:	21 f4       	brne	.+8      	; 0x1cec <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1ce4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ce6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ce8:	10 82       	st	Z, r1
    1cea:	23 c0       	rjmp	.+70     	; 0x1d32 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1cec:	ed 81       	ldd	r30, Y+5	; 0x05
    1cee:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	80 83       	st	Z, r24
    1cf4:	1e c0       	rjmp	.+60     	; 0x1d32 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1cf6:	e0 e3       	ldi	r30, 0x30	; 48
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8c 81       	ldd	r24, Y+4	; 0x04
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a9 01       	movw	r20, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_u8GetPinValue+0x144>
    1d0a:	55 95       	asr	r21
    1d0c:	47 95       	ror	r20
    1d0e:	8a 95       	dec	r24
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_u8GetPinValue+0x140>
    1d12:	ca 01       	movw	r24, r20
    1d14:	81 70       	andi	r24, 0x01	; 1
    1d16:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	88 23       	and	r24, r24
    1d1c:	21 f4       	brne	.+8      	; 0x1d26 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1d1e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d20:	fe 81       	ldd	r31, Y+6	; 0x06
    1d22:	10 82       	st	Z, r1
    1d24:	06 c0       	rjmp	.+12     	; 0x1d32 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1d26:	ed 81       	ldd	r30, Y+5	; 0x05
    1d28:	fe 81       	ldd	r31, Y+6	; 0x06
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	80 83       	st	Z, r24
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1d30:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d34:	28 96       	adiw	r28, 0x08	; 8
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	2d 97       	sbiw	r28, 0x0d	; 13
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	3c 87       	std	Y+12, r19	; 0x0c
    1d66:	2b 87       	std	Y+11, r18	; 0x0b
    1d68:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	91 05       	cpc	r25, r1
    1d70:	71 f1       	breq	.+92     	; 0x1dce <DIO_u8SetPortDirection+0x88>
    1d72:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d74:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d76:	22 30       	cpi	r18, 0x02	; 2
    1d78:	31 05       	cpc	r19, r1
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <DIO_u8SetPortDirection+0x40>
    1d7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f0       	breq	.+26     	; 0x1d9e <DIO_u8SetPortDirection+0x58>
    1d84:	6b c0       	rjmp	.+214    	; 0x1e5c <DIO_u8SetPortDirection+0x116>
    1d86:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d88:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	b9 f1       	breq	.+110    	; 0x1dfe <DIO_u8SetPortDirection+0xb8>
    1d90:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d92:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d94:	83 30       	cpi	r24, 0x03	; 3
    1d96:	91 05       	cpc	r25, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <DIO_u8SetPortDirection+0x56>
    1d9a:	49 c0       	rjmp	.+146    	; 0x1e2e <DIO_u8SetPortDirection+0xe8>
    1d9c:	5f c0       	rjmp	.+190    	; 0x1e5c <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	3a 87       	std	Y+10, r19	; 0x0a
    1da6:	29 87       	std	Y+9, r18	; 0x09
    1da8:	89 85       	ldd	r24, Y+9	; 0x09
    1daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	31 f0       	breq	.+12     	; 0x1dbc <DIO_u8SetPortDirection+0x76>
    1db0:	29 85       	ldd	r18, Y+9	; 0x09
    1db2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1db4:	21 30       	cpi	r18, 0x01	; 1
    1db6:	31 05       	cpc	r19, r1
    1db8:	29 f0       	breq	.+10     	; 0x1dc4 <DIO_u8SetPortDirection+0x7e>
    1dba:	50 c0       	rjmp	.+160    	; 0x1e5c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1dbc:	ea e3       	ldi	r30, 0x3A	; 58
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	10 82       	st	Z, r1
    1dc2:	4c c0       	rjmp	.+152    	; 0x1e5c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1dc4:	ea e3       	ldi	r30, 0x3A	; 58
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	8f ef       	ldi	r24, 0xFF	; 255
    1dca:	80 83       	st	Z, r24
    1dcc:	47 c0       	rjmp	.+142    	; 0x1e5c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	38 87       	std	Y+8, r19	; 0x08
    1dd6:	2f 83       	std	Y+7, r18	; 0x07
    1dd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dda:	98 85       	ldd	r25, Y+8	; 0x08
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	31 f0       	breq	.+12     	; 0x1dec <DIO_u8SetPortDirection+0xa6>
    1de0:	2f 81       	ldd	r18, Y+7	; 0x07
    1de2:	38 85       	ldd	r19, Y+8	; 0x08
    1de4:	21 30       	cpi	r18, 0x01	; 1
    1de6:	31 05       	cpc	r19, r1
    1de8:	29 f0       	breq	.+10     	; 0x1df4 <DIO_u8SetPortDirection+0xae>
    1dea:	38 c0       	rjmp	.+112    	; 0x1e5c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    1dec:	e7 e3       	ldi	r30, 0x37	; 55
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	10 82       	st	Z, r1
    1df2:	34 c0       	rjmp	.+104    	; 0x1e5c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    1df4:	e7 e3       	ldi	r30, 0x37	; 55
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	8f ef       	ldi	r24, 0xFF	; 255
    1dfa:	80 83       	st	Z, r24
    1dfc:	2f c0       	rjmp	.+94     	; 0x1e5c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3e 83       	std	Y+6, r19	; 0x06
    1e06:	2d 83       	std	Y+5, r18	; 0x05
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	31 f0       	breq	.+12     	; 0x1e1c <DIO_u8SetPortDirection+0xd6>
    1e10:	2d 81       	ldd	r18, Y+5	; 0x05
    1e12:	3e 81       	ldd	r19, Y+6	; 0x06
    1e14:	21 30       	cpi	r18, 0x01	; 1
    1e16:	31 05       	cpc	r19, r1
    1e18:	29 f0       	breq	.+10     	; 0x1e24 <DIO_u8SetPortDirection+0xde>
    1e1a:	20 c0       	rjmp	.+64     	; 0x1e5c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1e1c:	e4 e3       	ldi	r30, 0x34	; 52
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	10 82       	st	Z, r1
    1e22:	1c c0       	rjmp	.+56     	; 0x1e5c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    1e24:	e4 e3       	ldi	r30, 0x34	; 52
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	8f ef       	ldi	r24, 0xFF	; 255
    1e2a:	80 83       	st	Z, r24
    1e2c:	17 c0       	rjmp	.+46     	; 0x1e5c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	3c 83       	std	Y+4, r19	; 0x04
    1e36:	2b 83       	std	Y+3, r18	; 0x03
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	31 f0       	breq	.+12     	; 0x1e4c <DIO_u8SetPortDirection+0x106>
    1e40:	2b 81       	ldd	r18, Y+3	; 0x03
    1e42:	3c 81       	ldd	r19, Y+4	; 0x04
    1e44:	21 30       	cpi	r18, 0x01	; 1
    1e46:	31 05       	cpc	r19, r1
    1e48:	29 f0       	breq	.+10     	; 0x1e54 <DIO_u8SetPortDirection+0x10e>
    1e4a:	08 c0       	rjmp	.+16     	; 0x1e5c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    1e4c:	e1 e3       	ldi	r30, 0x31	; 49
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	10 82       	st	Z, r1
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1e54:	e1 e3       	ldi	r30, 0x31	; 49
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    1e5c:	2d 96       	adiw	r28, 0x0d	; 13
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	2d 97       	sbiw	r28, 0x0d	; 13
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	84 30       	cpi	r24, 0x04	; 4
    1e8e:	08 f0       	brcs	.+2      	; 0x1e92 <DIO_u8SetPortValue+0x24>
    1e90:	80 c0       	rjmp	.+256    	; 0x1f92 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	3d 87       	std	Y+13, r19	; 0x0d
    1e9a:	2c 87       	std	Y+12, r18	; 0x0c
    1e9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	71 f1       	breq	.+92     	; 0x1f02 <DIO_u8SetPortValue+0x94>
    1ea6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ea8:	3d 85       	ldd	r19, Y+13	; 0x0d
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	2c f4       	brge	.+10     	; 0x1eba <DIO_u8SetPortValue+0x4c>
    1eb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eb2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	69 f0       	breq	.+26     	; 0x1ed2 <DIO_u8SetPortValue+0x64>
    1eb8:	6d c0       	rjmp	.+218    	; 0x1f94 <DIO_u8SetPortValue+0x126>
    1eba:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ebc:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ebe:	22 30       	cpi	r18, 0x02	; 2
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	b9 f1       	breq	.+110    	; 0x1f32 <DIO_u8SetPortValue+0xc4>
    1ec4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ec6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <DIO_u8SetPortValue+0x62>
    1ece:	49 c0       	rjmp	.+146    	; 0x1f62 <DIO_u8SetPortValue+0xf4>
    1ed0:	61 c0       	rjmp	.+194    	; 0x1f94 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	3b 87       	std	Y+11, r19	; 0x0b
    1eda:	2a 87       	std	Y+10, r18	; 0x0a
    1edc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ede:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	31 f0       	breq	.+12     	; 0x1ef0 <DIO_u8SetPortValue+0x82>
    1ee4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ee6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ee8:	21 30       	cpi	r18, 0x01	; 1
    1eea:	31 05       	cpc	r19, r1
    1eec:	29 f0       	breq	.+10     	; 0x1ef8 <DIO_u8SetPortValue+0x8a>
    1eee:	52 c0       	rjmp	.+164    	; 0x1f94 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    1ef0:	eb e3       	ldi	r30, 0x3B	; 59
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	10 82       	st	Z, r1
    1ef6:	4e c0       	rjmp	.+156    	; 0x1f94 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    1ef8:	eb e3       	ldi	r30, 0x3B	; 59
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	8f ef       	ldi	r24, 0xFF	; 255
    1efe:	80 83       	st	Z, r24
    1f00:	49 c0       	rjmp	.+146    	; 0x1f94 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	39 87       	std	Y+9, r19	; 0x09
    1f0a:	28 87       	std	Y+8, r18	; 0x08
    1f0c:	88 85       	ldd	r24, Y+8	; 0x08
    1f0e:	99 85       	ldd	r25, Y+9	; 0x09
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	31 f0       	breq	.+12     	; 0x1f20 <DIO_u8SetPortValue+0xb2>
    1f14:	28 85       	ldd	r18, Y+8	; 0x08
    1f16:	39 85       	ldd	r19, Y+9	; 0x09
    1f18:	21 30       	cpi	r18, 0x01	; 1
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	29 f0       	breq	.+10     	; 0x1f28 <DIO_u8SetPortValue+0xba>
    1f1e:	3a c0       	rjmp	.+116    	; 0x1f94 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    1f20:	e8 e3       	ldi	r30, 0x38	; 56
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	10 82       	st	Z, r1
    1f26:	36 c0       	rjmp	.+108    	; 0x1f94 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    1f28:	e8 e3       	ldi	r30, 0x38	; 56
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	8f ef       	ldi	r24, 0xFF	; 255
    1f2e:	80 83       	st	Z, r24
    1f30:	31 c0       	rjmp	.+98     	; 0x1f94 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	3f 83       	std	Y+7, r19	; 0x07
    1f3a:	2e 83       	std	Y+6, r18	; 0x06
    1f3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	31 f0       	breq	.+12     	; 0x1f50 <DIO_u8SetPortValue+0xe2>
    1f44:	2e 81       	ldd	r18, Y+6	; 0x06
    1f46:	3f 81       	ldd	r19, Y+7	; 0x07
    1f48:	21 30       	cpi	r18, 0x01	; 1
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	29 f0       	breq	.+10     	; 0x1f58 <DIO_u8SetPortValue+0xea>
    1f4e:	22 c0       	rjmp	.+68     	; 0x1f94 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    1f50:	e5 e3       	ldi	r30, 0x35	; 53
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	10 82       	st	Z, r1
    1f56:	1e c0       	rjmp	.+60     	; 0x1f94 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    1f58:	e5 e3       	ldi	r30, 0x35	; 53
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	80 83       	st	Z, r24
    1f60:	19 c0       	rjmp	.+50     	; 0x1f94 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	3d 83       	std	Y+5, r19	; 0x05
    1f6a:	2c 83       	std	Y+4, r18	; 0x04
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	31 f0       	breq	.+12     	; 0x1f80 <DIO_u8SetPortValue+0x112>
    1f74:	2c 81       	ldd	r18, Y+4	; 0x04
    1f76:	3d 81       	ldd	r19, Y+5	; 0x05
    1f78:	21 30       	cpi	r18, 0x01	; 1
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	29 f0       	breq	.+10     	; 0x1f88 <DIO_u8SetPortValue+0x11a>
    1f7e:	0a c0       	rjmp	.+20     	; 0x1f94 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    1f80:	e2 e3       	ldi	r30, 0x32	; 50
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	10 82       	st	Z, r1
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    1f88:	e2 e3       	ldi	r30, 0x32	; 50
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	80 83       	st	Z, r24
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1f92:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f96:	2d 96       	adiw	r28, 0x0d	; 13
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <DIO_u8GetPortValue+0x6>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <DIO_u8GetPortValue+0x8>
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <DIO_u8GetPortValue+0xa>
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
    1fb8:	7c 83       	std	Y+4, r23	; 0x04
    1fba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	84 30       	cpi	r24, 0x04	; 4
    1fc4:	08 f0       	brcs	.+2      	; 0x1fc8 <DIO_u8GetPortValue+0x20>
    1fc6:	3f c0       	rjmp	.+126    	; 0x2046 <DIO_u8GetPortValue+0x9e>
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	d9 f1       	breq	.+118    	; 0x2046 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	3e 83       	std	Y+6, r19	; 0x06
    1fd8:	2d 83       	std	Y+5, r18	; 0x05
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	e1 f0       	breq	.+56     	; 0x201c <DIO_u8GetPortValue+0x74>
    1fe4:	2d 81       	ldd	r18, Y+5	; 0x05
    1fe6:	3e 81       	ldd	r19, Y+6	; 0x06
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <DIO_u8GetPortValue+0x50>
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	61 f0       	breq	.+24     	; 0x200e <DIO_u8GetPortValue+0x66>
    1ff6:	28 c0       	rjmp	.+80     	; 0x2048 <DIO_u8GetPortValue+0xa0>
    1ff8:	2d 81       	ldd	r18, Y+5	; 0x05
    1ffa:	3e 81       	ldd	r19, Y+6	; 0x06
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	31 05       	cpc	r19, r1
    2000:	a1 f0       	breq	.+40     	; 0x202a <DIO_u8GetPortValue+0x82>
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	9e 81       	ldd	r25, Y+6	; 0x06
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	91 05       	cpc	r25, r1
    200a:	b1 f0       	breq	.+44     	; 0x2038 <DIO_u8GetPortValue+0x90>
    200c:	1d c0       	rjmp	.+58     	; 0x2048 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    200e:	e9 e3       	ldi	r30, 0x39	; 57
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	eb 81       	ldd	r30, Y+3	; 0x03
    2016:	fc 81       	ldd	r31, Y+4	; 0x04
    2018:	80 83       	st	Z, r24
    201a:	16 c0       	rjmp	.+44     	; 0x2048 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    201c:	e6 e3       	ldi	r30, 0x36	; 54
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	eb 81       	ldd	r30, Y+3	; 0x03
    2024:	fc 81       	ldd	r31, Y+4	; 0x04
    2026:	80 83       	st	Z, r24
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    202a:	e3 e3       	ldi	r30, 0x33	; 51
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	eb 81       	ldd	r30, Y+3	; 0x03
    2032:	fc 81       	ldd	r31, Y+4	; 0x04
    2034:	80 83       	st	Z, r24
    2036:	08 c0       	rjmp	.+16     	; 0x2048 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2038:	e0 e3       	ldi	r30, 0x30	; 48
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	eb 81       	ldd	r30, Y+3	; 0x03
    2040:	fc 81       	ldd	r31, Y+4	; 0x04
    2042:	80 83       	st	Z, r24
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2046:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2048:	89 81       	ldd	r24, Y+1	; 0x01
}
    204a:	26 96       	adiw	r28, 0x06	; 6
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    205c:	8f 92       	push	r8
    205e:	af 92       	push	r10
    2060:	cf 92       	push	r12
    2062:	ef 92       	push	r14
    2064:	0f 93       	push	r16
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	2c 97       	sbiw	r28, 0x0c	; 12
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	6a 83       	std	Y+2, r22	; 0x02
    207e:	4b 83       	std	Y+3, r20	; 0x03
    2080:	2c 83       	std	Y+4, r18	; 0x04
    2082:	0d 83       	std	Y+5, r16	; 0x05
    2084:	ee 82       	std	Y+6, r14	; 0x06
    2086:	cf 82       	std	Y+7, r12	; 0x07
    2088:	a8 86       	std	Y+8, r10	; 0x08
    208a:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	3b 87       	std	Y+11, r19	; 0x0b
    2094:	2a 87       	std	Y+10, r18	; 0x0a
    2096:	8a 85       	ldd	r24, Y+10	; 0x0a
    2098:	9b 85       	ldd	r25, Y+11	; 0x0b
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <DIO_u8SetValueToAllPins+0x46>
    20a0:	a8 c0       	rjmp	.+336    	; 0x21f2 <DIO_u8SetValueToAllPins+0x196>
    20a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    20a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <DIO_u8SetValueToAllPins+0x5a>
    20ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	71 f0       	breq	.+28     	; 0x20d0 <DIO_u8SetValueToAllPins+0x74>
    20b4:	50 c2       	rjmp	.+1184   	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
    20b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    20b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    20ba:	22 30       	cpi	r18, 0x02	; 2
    20bc:	31 05       	cpc	r19, r1
    20be:	09 f4       	brne	.+2      	; 0x20c2 <DIO_u8SetValueToAllPins+0x66>
    20c0:	29 c1       	rjmp	.+594    	; 0x2314 <DIO_u8SetValueToAllPins+0x2b8>
    20c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c6:	83 30       	cpi	r24, 0x03	; 3
    20c8:	91 05       	cpc	r25, r1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <DIO_u8SetValueToAllPins+0x72>
    20cc:	b4 c1       	rjmp	.+872    	; 0x2436 <DIO_u8SetValueToAllPins+0x3da>
    20ce:	43 c2       	rjmp	.+1158   	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	41 f4       	brne	.+16     	; 0x20e6 <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    20d6:	ab e3       	ldi	r26, 0x3B	; 59
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	eb e3       	ldi	r30, 0x3B	; 59
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	81 60       	ori	r24, 0x01	; 1
    20e2:	8c 93       	st	X, r24
    20e4:	07 c0       	rjmp	.+14     	; 0x20f4 <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    20e6:	ab e3       	ldi	r26, 0x3B	; 59
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	eb e3       	ldi	r30, 0x3B	; 59
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	8e 7f       	andi	r24, 0xFE	; 254
    20f2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	81 30       	cpi	r24, 0x01	; 1
    20f8:	41 f4       	brne	.+16     	; 0x210a <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    20fa:	ab e3       	ldi	r26, 0x3B	; 59
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	eb e3       	ldi	r30, 0x3B	; 59
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	82 60       	ori	r24, 0x02	; 2
    2106:	8c 93       	st	X, r24
    2108:	07 c0       	rjmp	.+14     	; 0x2118 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    210a:	ab e3       	ldi	r26, 0x3B	; 59
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	eb e3       	ldi	r30, 0x3B	; 59
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8d 7f       	andi	r24, 0xFD	; 253
    2116:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	81 30       	cpi	r24, 0x01	; 1
    211c:	41 f4       	brne	.+16     	; 0x212e <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    211e:	ab e3       	ldi	r26, 0x3B	; 59
    2120:	b0 e0       	ldi	r27, 0x00	; 0
    2122:	eb e3       	ldi	r30, 0x3B	; 59
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	84 60       	ori	r24, 0x04	; 4
    212a:	8c 93       	st	X, r24
    212c:	07 c0       	rjmp	.+14     	; 0x213c <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    212e:	ab e3       	ldi	r26, 0x3B	; 59
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	eb e3       	ldi	r30, 0x3B	; 59
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	8b 7f       	andi	r24, 0xFB	; 251
    213a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	41 f4       	brne	.+16     	; 0x2152 <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    2142:	ab e3       	ldi	r26, 0x3B	; 59
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	eb e3       	ldi	r30, 0x3B	; 59
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	88 60       	ori	r24, 0x08	; 8
    214e:	8c 93       	st	X, r24
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    2152:	ab e3       	ldi	r26, 0x3B	; 59
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	eb e3       	ldi	r30, 0x3B	; 59
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	87 7f       	andi	r24, 0xF7	; 247
    215e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    2160:	8e 81       	ldd	r24, Y+6	; 0x06
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	41 f4       	brne	.+16     	; 0x2176 <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2166:	ab e3       	ldi	r26, 0x3B	; 59
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	eb e3       	ldi	r30, 0x3B	; 59
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	80 61       	ori	r24, 0x10	; 16
    2172:	8c 93       	st	X, r24
    2174:	07 c0       	rjmp	.+14     	; 0x2184 <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2176:	ab e3       	ldi	r26, 0x3B	; 59
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	eb e3       	ldi	r30, 0x3B	; 59
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	8f 7e       	andi	r24, 0xEF	; 239
    2182:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    2184:	8f 81       	ldd	r24, Y+7	; 0x07
    2186:	81 30       	cpi	r24, 0x01	; 1
    2188:	41 f4       	brne	.+16     	; 0x219a <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    218a:	ab e3       	ldi	r26, 0x3B	; 59
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	eb e3       	ldi	r30, 0x3B	; 59
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	80 62       	ori	r24, 0x20	; 32
    2196:	8c 93       	st	X, r24
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    219a:	ab e3       	ldi	r26, 0x3B	; 59
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	eb e3       	ldi	r30, 0x3B	; 59
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	8f 7d       	andi	r24, 0xDF	; 223
    21a6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    21a8:	88 85       	ldd	r24, Y+8	; 0x08
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	41 f4       	brne	.+16     	; 0x21be <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    21ae:	ab e3       	ldi	r26, 0x3B	; 59
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	eb e3       	ldi	r30, 0x3B	; 59
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	80 64       	ori	r24, 0x40	; 64
    21ba:	8c 93       	st	X, r24
    21bc:	07 c0       	rjmp	.+14     	; 0x21cc <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    21be:	ab e3       	ldi	r26, 0x3B	; 59
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	eb e3       	ldi	r30, 0x3B	; 59
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 7b       	andi	r24, 0xBF	; 191
    21ca:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	41 f4       	brne	.+16     	; 0x21e2 <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    21d2:	ab e3       	ldi	r26, 0x3B	; 59
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	eb e3       	ldi	r30, 0x3B	; 59
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	80 68       	ori	r24, 0x80	; 128
    21de:	8c 93       	st	X, r24
    21e0:	ba c1       	rjmp	.+884    	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    21e2:	ab e3       	ldi	r26, 0x3B	; 59
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	eb e3       	ldi	r30, 0x3B	; 59
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8f 77       	andi	r24, 0x7F	; 127
    21ee:	8c 93       	st	X, r24
    21f0:	b2 c1       	rjmp	.+868    	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	41 f4       	brne	.+16     	; 0x2208 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    21f8:	a8 e3       	ldi	r26, 0x38	; 56
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e8 e3       	ldi	r30, 0x38	; 56
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	81 60       	ori	r24, 0x01	; 1
    2204:	8c 93       	st	X, r24
    2206:	07 c0       	rjmp	.+14     	; 0x2216 <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2208:	a8 e3       	ldi	r26, 0x38	; 56
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e8 e3       	ldi	r30, 0x38	; 56
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8e 7f       	andi	r24, 0xFE	; 254
    2214:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	41 f4       	brne	.+16     	; 0x222c <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    221c:	a8 e3       	ldi	r26, 0x38	; 56
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e8 e3       	ldi	r30, 0x38	; 56
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	82 60       	ori	r24, 0x02	; 2
    2228:	8c 93       	st	X, r24
    222a:	07 c0       	rjmp	.+14     	; 0x223a <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    222c:	a8 e3       	ldi	r26, 0x38	; 56
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e8 e3       	ldi	r30, 0x38	; 56
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	8d 7f       	andi	r24, 0xFD	; 253
    2238:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	41 f4       	brne	.+16     	; 0x2250 <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    2240:	a8 e3       	ldi	r26, 0x38	; 56
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e8 e3       	ldi	r30, 0x38	; 56
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	84 60       	ori	r24, 0x04	; 4
    224c:	8c 93       	st	X, r24
    224e:	07 c0       	rjmp	.+14     	; 0x225e <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    2250:	a8 e3       	ldi	r26, 0x38	; 56
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e8 e3       	ldi	r30, 0x38	; 56
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	8b 7f       	andi	r24, 0xFB	; 251
    225c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	41 f4       	brne	.+16     	; 0x2274 <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    2264:	a8 e3       	ldi	r26, 0x38	; 56
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e8 e3       	ldi	r30, 0x38	; 56
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	88 60       	ori	r24, 0x08	; 8
    2270:	8c 93       	st	X, r24
    2272:	07 c0       	rjmp	.+14     	; 0x2282 <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    2274:	a8 e3       	ldi	r26, 0x38	; 56
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e8 e3       	ldi	r30, 0x38	; 56
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	87 7f       	andi	r24, 0xF7	; 247
    2280:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    2282:	8e 81       	ldd	r24, Y+6	; 0x06
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	41 f4       	brne	.+16     	; 0x2298 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    2288:	a8 e3       	ldi	r26, 0x38	; 56
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e8 e3       	ldi	r30, 0x38	; 56
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	80 61       	ori	r24, 0x10	; 16
    2294:	8c 93       	st	X, r24
    2296:	07 c0       	rjmp	.+14     	; 0x22a6 <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    2298:	a8 e3       	ldi	r26, 0x38	; 56
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e8 e3       	ldi	r30, 0x38	; 56
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 7e       	andi	r24, 0xEF	; 239
    22a4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    22a6:	8f 81       	ldd	r24, Y+7	; 0x07
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	41 f4       	brne	.+16     	; 0x22bc <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    22ac:	a8 e3       	ldi	r26, 0x38	; 56
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e8 e3       	ldi	r30, 0x38	; 56
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 62       	ori	r24, 0x20	; 32
    22b8:	8c 93       	st	X, r24
    22ba:	07 c0       	rjmp	.+14     	; 0x22ca <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    22bc:	a8 e3       	ldi	r26, 0x38	; 56
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e8 e3       	ldi	r30, 0x38	; 56
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8f 7d       	andi	r24, 0xDF	; 223
    22c8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    22ca:	88 85       	ldd	r24, Y+8	; 0x08
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	41 f4       	brne	.+16     	; 0x22e0 <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    22d0:	a8 e3       	ldi	r26, 0x38	; 56
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e8 e3       	ldi	r30, 0x38	; 56
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 64       	ori	r24, 0x40	; 64
    22dc:	8c 93       	st	X, r24
    22de:	07 c0       	rjmp	.+14     	; 0x22ee <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    22e0:	a8 e3       	ldi	r26, 0x38	; 56
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e8 e3       	ldi	r30, 0x38	; 56
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	8f 7b       	andi	r24, 0xBF	; 191
    22ec:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	41 f4       	brne	.+16     	; 0x2304 <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    22f4:	a8 e3       	ldi	r26, 0x38	; 56
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e8 e3       	ldi	r30, 0x38	; 56
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	80 68       	ori	r24, 0x80	; 128
    2300:	8c 93       	st	X, r24
    2302:	29 c1       	rjmp	.+594    	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    2304:	a8 e3       	ldi	r26, 0x38	; 56
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e8 e3       	ldi	r30, 0x38	; 56
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	8f 77       	andi	r24, 0x7F	; 127
    2310:	8c 93       	st	X, r24
    2312:	21 c1       	rjmp	.+578    	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	41 f4       	brne	.+16     	; 0x232a <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    231a:	a5 e3       	ldi	r26, 0x35	; 53
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e5 e3       	ldi	r30, 0x35	; 53
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	81 60       	ori	r24, 0x01	; 1
    2326:	8c 93       	st	X, r24
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    232a:	a5 e3       	ldi	r26, 0x35	; 53
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e5 e3       	ldi	r30, 0x35	; 53
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8e 7f       	andi	r24, 0xFE	; 254
    2336:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	41 f4       	brne	.+16     	; 0x234e <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    233e:	a5 e3       	ldi	r26, 0x35	; 53
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e5 e3       	ldi	r30, 0x35	; 53
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	82 60       	ori	r24, 0x02	; 2
    234a:	8c 93       	st	X, r24
    234c:	07 c0       	rjmp	.+14     	; 0x235c <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    234e:	a5 e3       	ldi	r26, 0x35	; 53
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e5 e3       	ldi	r30, 0x35	; 53
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8d 7f       	andi	r24, 0xFD	; 253
    235a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	41 f4       	brne	.+16     	; 0x2372 <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    2362:	a5 e3       	ldi	r26, 0x35	; 53
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e5 e3       	ldi	r30, 0x35	; 53
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	84 60       	ori	r24, 0x04	; 4
    236e:	8c 93       	st	X, r24
    2370:	07 c0       	rjmp	.+14     	; 0x2380 <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    2372:	a5 e3       	ldi	r26, 0x35	; 53
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e5 e3       	ldi	r30, 0x35	; 53
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	8b 7f       	andi	r24, 0xFB	; 251
    237e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	41 f4       	brne	.+16     	; 0x2396 <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    2386:	a5 e3       	ldi	r26, 0x35	; 53
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e5 e3       	ldi	r30, 0x35	; 53
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	88 60       	ori	r24, 0x08	; 8
    2392:	8c 93       	st	X, r24
    2394:	07 c0       	rjmp	.+14     	; 0x23a4 <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    2396:	a5 e3       	ldi	r26, 0x35	; 53
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e5 e3       	ldi	r30, 0x35	; 53
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	87 7f       	andi	r24, 0xF7	; 247
    23a2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    23a4:	8e 81       	ldd	r24, Y+6	; 0x06
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	41 f4       	brne	.+16     	; 0x23ba <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    23aa:	a5 e3       	ldi	r26, 0x35	; 53
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e5 e3       	ldi	r30, 0x35	; 53
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	80 61       	ori	r24, 0x10	; 16
    23b6:	8c 93       	st	X, r24
    23b8:	07 c0       	rjmp	.+14     	; 0x23c8 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    23ba:	a5 e3       	ldi	r26, 0x35	; 53
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e5 e3       	ldi	r30, 0x35	; 53
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8f 7e       	andi	r24, 0xEF	; 239
    23c6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    23c8:	8f 81       	ldd	r24, Y+7	; 0x07
    23ca:	81 30       	cpi	r24, 0x01	; 1
    23cc:	41 f4       	brne	.+16     	; 0x23de <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    23ce:	a5 e3       	ldi	r26, 0x35	; 53
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e5 e3       	ldi	r30, 0x35	; 53
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	80 62       	ori	r24, 0x20	; 32
    23da:	8c 93       	st	X, r24
    23dc:	07 c0       	rjmp	.+14     	; 0x23ec <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    23de:	a5 e3       	ldi	r26, 0x35	; 53
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e5 e3       	ldi	r30, 0x35	; 53
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	8f 7d       	andi	r24, 0xDF	; 223
    23ea:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    23ec:	88 85       	ldd	r24, Y+8	; 0x08
    23ee:	81 30       	cpi	r24, 0x01	; 1
    23f0:	41 f4       	brne	.+16     	; 0x2402 <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    23f2:	a5 e3       	ldi	r26, 0x35	; 53
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e5 e3       	ldi	r30, 0x35	; 53
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	80 64       	ori	r24, 0x40	; 64
    23fe:	8c 93       	st	X, r24
    2400:	07 c0       	rjmp	.+14     	; 0x2410 <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    2402:	a5 e3       	ldi	r26, 0x35	; 53
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e5 e3       	ldi	r30, 0x35	; 53
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	8f 7b       	andi	r24, 0xBF	; 191
    240e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	81 30       	cpi	r24, 0x01	; 1
    2414:	41 f4       	brne	.+16     	; 0x2426 <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2416:	a5 e3       	ldi	r26, 0x35	; 53
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e5 e3       	ldi	r30, 0x35	; 53
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	80 68       	ori	r24, 0x80	; 128
    2422:	8c 93       	st	X, r24
    2424:	98 c0       	rjmp	.+304    	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2426:	a5 e3       	ldi	r26, 0x35	; 53
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e5 e3       	ldi	r30, 0x35	; 53
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	8f 77       	andi	r24, 0x7F	; 127
    2432:	8c 93       	st	X, r24
    2434:	90 c0       	rjmp	.+288    	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	41 f4       	brne	.+16     	; 0x244c <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    243c:	a2 e3       	ldi	r26, 0x32	; 50
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e2 e3       	ldi	r30, 0x32	; 50
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	81 60       	ori	r24, 0x01	; 1
    2448:	8c 93       	st	X, r24
    244a:	07 c0       	rjmp	.+14     	; 0x245a <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    244c:	a2 e3       	ldi	r26, 0x32	; 50
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e2 e3       	ldi	r30, 0x32	; 50
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	8e 7f       	andi	r24, 0xFE	; 254
    2458:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	41 f4       	brne	.+16     	; 0x2470 <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    2460:	a2 e3       	ldi	r26, 0x32	; 50
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e2 e3       	ldi	r30, 0x32	; 50
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	82 60       	ori	r24, 0x02	; 2
    246c:	8c 93       	st	X, r24
    246e:	07 c0       	rjmp	.+14     	; 0x247e <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    2470:	a2 e3       	ldi	r26, 0x32	; 50
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e2 e3       	ldi	r30, 0x32	; 50
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8d 7f       	andi	r24, 0xFD	; 253
    247c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	41 f4       	brne	.+16     	; 0x2494 <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    2484:	a2 e3       	ldi	r26, 0x32	; 50
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e2 e3       	ldi	r30, 0x32	; 50
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	84 60       	ori	r24, 0x04	; 4
    2490:	8c 93       	st	X, r24
    2492:	07 c0       	rjmp	.+14     	; 0x24a2 <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    2494:	a2 e3       	ldi	r26, 0x32	; 50
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e2 e3       	ldi	r30, 0x32	; 50
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	8b 7f       	andi	r24, 0xFB	; 251
    24a0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    24a2:	8d 81       	ldd	r24, Y+5	; 0x05
    24a4:	81 30       	cpi	r24, 0x01	; 1
    24a6:	41 f4       	brne	.+16     	; 0x24b8 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    24a8:	a2 e3       	ldi	r26, 0x32	; 50
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e2 e3       	ldi	r30, 0x32	; 50
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	88 60       	ori	r24, 0x08	; 8
    24b4:	8c 93       	st	X, r24
    24b6:	07 c0       	rjmp	.+14     	; 0x24c6 <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    24b8:	a2 e3       	ldi	r26, 0x32	; 50
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e2 e3       	ldi	r30, 0x32	; 50
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	87 7f       	andi	r24, 0xF7	; 247
    24c4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    24c6:	8e 81       	ldd	r24, Y+6	; 0x06
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	41 f4       	brne	.+16     	; 0x24dc <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    24cc:	a2 e3       	ldi	r26, 0x32	; 50
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e2 e3       	ldi	r30, 0x32	; 50
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	80 61       	ori	r24, 0x10	; 16
    24d8:	8c 93       	st	X, r24
    24da:	07 c0       	rjmp	.+14     	; 0x24ea <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    24dc:	a2 e3       	ldi	r26, 0x32	; 50
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e2 e3       	ldi	r30, 0x32	; 50
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	8f 7e       	andi	r24, 0xEF	; 239
    24e8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    24ea:	8f 81       	ldd	r24, Y+7	; 0x07
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	41 f4       	brne	.+16     	; 0x2500 <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    24f0:	a2 e3       	ldi	r26, 0x32	; 50
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	e2 e3       	ldi	r30, 0x32	; 50
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	80 62       	ori	r24, 0x20	; 32
    24fc:	8c 93       	st	X, r24
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    2500:	a2 e3       	ldi	r26, 0x32	; 50
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e2 e3       	ldi	r30, 0x32	; 50
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	8f 7d       	andi	r24, 0xDF	; 223
    250c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    250e:	88 85       	ldd	r24, Y+8	; 0x08
    2510:	81 30       	cpi	r24, 0x01	; 1
    2512:	41 f4       	brne	.+16     	; 0x2524 <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2514:	a2 e3       	ldi	r26, 0x32	; 50
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e2 e3       	ldi	r30, 0x32	; 50
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	80 64       	ori	r24, 0x40	; 64
    2520:	8c 93       	st	X, r24
    2522:	07 c0       	rjmp	.+14     	; 0x2532 <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2524:	a2 e3       	ldi	r26, 0x32	; 50
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e2 e3       	ldi	r30, 0x32	; 50
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8f 7b       	andi	r24, 0xBF	; 191
    2530:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	41 f4       	brne	.+16     	; 0x2548 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2538:	a2 e3       	ldi	r26, 0x32	; 50
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e2 e3       	ldi	r30, 0x32	; 50
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	80 68       	ori	r24, 0x80	; 128
    2544:	8c 93       	st	X, r24
    2546:	07 c0       	rjmp	.+14     	; 0x2556 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2548:	a2 e3       	ldi	r26, 0x32	; 50
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e2 e3       	ldi	r30, 0x32	; 50
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	8f 77       	andi	r24, 0x7F	; 127
    2554:	8c 93       	st	X, r24
		}
		break;
	}
}
    2556:	2c 96       	adiw	r28, 0x0c	; 12
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	0f 91       	pop	r16
    2568:	ef 90       	pop	r14
    256a:	cf 90       	pop	r12
    256c:	af 90       	pop	r10
    256e:	8f 90       	pop	r8
    2570:	08 95       	ret

00002572 <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    257a:	83 e0       	ldi	r24, 0x03	; 3
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2584:	83 e0       	ldi	r24, 0x03	; 3
    2586:	61 e0       	ldi	r22, 0x01	; 1
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	62 e0       	ldi	r22, 0x02	; 2
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	63 e0       	ldi	r22, 0x03	; 3
    259c:	41 e0       	ldi	r20, 0x01	; 1
    259e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
}
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <ActivatePins1+0x6>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <ActivatePins1+0x8>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	6a 83       	std	Y+2, r22	; 0x02
    25b8:	4b 83       	std	Y+3, r20	; 0x03
    25ba:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    25bc:	83 e0       	ldi	r24, 0x03	; 3
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	49 81       	ldd	r20, Y+1	; 0x01
    25c2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    25c6:	83 e0       	ldi	r24, 0x03	; 3
    25c8:	61 e0       	ldi	r22, 0x01	; 1
    25ca:	4a 81       	ldd	r20, Y+2	; 0x02
    25cc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	62 e0       	ldi	r22, 0x02	; 2
    25d4:	4b 81       	ldd	r20, Y+3	; 0x03
    25d6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    25da:	83 e0       	ldi	r24, 0x03	; 3
    25dc:	63 e0       	ldi	r22, 0x03	; 3
    25de:	4c 81       	ldd	r20, Y+4	; 0x04
    25e0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
}
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <ActivatePins2+0x6>
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <ActivatePins2+0x8>
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	6a 83       	std	Y+2, r22	; 0x02
    2602:	4b 83       	std	Y+3, r20	; 0x03
    2604:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	63 e0       	ldi	r22, 0x03	; 3
    260a:	4c 81       	ldd	r20, Y+4	; 0x04
    260c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2610:	83 e0       	ldi	r24, 0x03	; 3
    2612:	62 e0       	ldi	r22, 0x02	; 2
    2614:	4b 81       	ldd	r20, Y+3	; 0x03
    2616:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	61 e0       	ldi	r22, 0x01	; 1
    261e:	4a 81       	ldd	r20, Y+2	; 0x02
    2620:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2624:	83 e0       	ldi	r24, 0x03	; 3
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	49 81       	ldd	r20, Y+1	; 0x01
    262a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
}
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	29 97       	sbiw	r28, 0x09	; 9
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	9a 83       	std	Y+2, r25	; 0x02
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2656:	29 81       	ldd	r18, Y+1	; 0x01
    2658:	3a 81       	ldd	r19, Y+2	; 0x02
    265a:	39 87       	std	Y+9, r19	; 0x09
    265c:	28 87       	std	Y+8, r18	; 0x08
    265e:	88 85       	ldd	r24, Y+8	; 0x08
    2660:	99 85       	ldd	r25, Y+9	; 0x09
    2662:	8a 35       	cpi	r24, 0x5A	; 90
    2664:	91 05       	cpc	r25, r1
    2666:	31 f0       	breq	.+12     	; 0x2674 <SelectStepAngle+0x38>
    2668:	28 85       	ldd	r18, Y+8	; 0x08
    266a:	39 85       	ldd	r19, Y+9	; 0x09
    266c:	24 3b       	cpi	r18, 0xB4	; 180
    266e:	31 05       	cpc	r19, r1
    2670:	f1 f0       	breq	.+60     	; 0x26ae <SelectStepAngle+0x72>
    2672:	39 c0       	rjmp	.+114    	; 0x26e6 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	3f 83       	std	Y+7, r19	; 0x07
    267c:	2e 83       	std	Y+6, r18	; 0x06
    267e:	8e 81       	ldd	r24, Y+6	; 0x06
    2680:	9f 81       	ldd	r25, Y+7	; 0x07
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	31 f0       	breq	.+12     	; 0x2692 <SelectStepAngle+0x56>
    2686:	2e 81       	ldd	r18, Y+6	; 0x06
    2688:	3f 81       	ldd	r19, Y+7	; 0x07
    268a:	21 30       	cpi	r18, 0x01	; 1
    268c:	31 05       	cpc	r19, r1
    268e:	41 f0       	breq	.+16     	; 0x26a0 <SelectStepAngle+0x64>
    2690:	2a c0       	rjmp	.+84     	; 0x26e6 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	21 e0       	ldi	r18, 0x01	; 1
    269a:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <ActivatePins1>
    269e:	23 c0       	rjmp	.+70     	; 0x26e6 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <ActivatePins2>
    26ac:	1c c0       	rjmp	.+56     	; 0x26e6 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	3d 83       	std	Y+5, r19	; 0x05
    26b6:	2c 83       	std	Y+4, r18	; 0x04
    26b8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ba:	9d 81       	ldd	r25, Y+5	; 0x05
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	31 f0       	breq	.+12     	; 0x26cc <SelectStepAngle+0x90>
    26c0:	2c 81       	ldd	r18, Y+4	; 0x04
    26c2:	3d 81       	ldd	r19, Y+5	; 0x05
    26c4:	21 30       	cpi	r18, 0x01	; 1
    26c6:	31 05       	cpc	r19, r1
    26c8:	41 f0       	breq	.+16     	; 0x26da <SelectStepAngle+0x9e>
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <ActivatePins2>
    26d8:	06 c0       	rjmp	.+12     	; 0x26e6 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	61 e0       	ldi	r22, 0x01	; 1
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <ActivatePins1>
						break;
				}
				break;
	}
}
    26e6:	29 96       	adiw	r28, 0x09	; 9
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO_LCD/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	e9 97       	sbiw	r28, 0x39	; 57
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    270e:	83 e0       	ldi	r24, 0x03	; 3
    2710:	64 e0       	ldi	r22, 0x04	; 4
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_setPinValue>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a0 e8       	ldi	r26, 0x80	; 128
    271e:	bf e3       	ldi	r27, 0x3F	; 63
    2720:	8d ab       	std	Y+53, r24	; 0x35
    2722:	9e ab       	std	Y+54, r25	; 0x36
    2724:	af ab       	std	Y+55, r26	; 0x37
    2726:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	6d a9       	ldd	r22, Y+53	; 0x35
    272a:	7e a9       	ldd	r23, Y+54	; 0x36
    272c:	8f a9       	ldd	r24, Y+55	; 0x37
    272e:	98 ad       	ldd	r25, Y+56	; 0x38
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a e7       	ldi	r20, 0x7A	; 122
    2736:	55 e4       	ldi	r21, 0x45	; 69
    2738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	89 ab       	std	Y+49, r24	; 0x31
    2742:	9a ab       	std	Y+50, r25	; 0x32
    2744:	ab ab       	std	Y+51, r26	; 0x33
    2746:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2748:	69 a9       	ldd	r22, Y+49	; 0x31
    274a:	7a a9       	ldd	r23, Y+50	; 0x32
    274c:	8b a9       	ldd	r24, Y+51	; 0x33
    274e:	9c a9       	ldd	r25, Y+52	; 0x34
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	2c f4       	brge	.+10     	; 0x276a <LCD_sendCommand+0x72>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	98 ab       	std	Y+48, r25	; 0x30
    2766:	8f a7       	std	Y+47, r24	; 0x2f
    2768:	3f c0       	rjmp	.+126    	; 0x27e8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    276a:	69 a9       	ldd	r22, Y+49	; 0x31
    276c:	7a a9       	ldd	r23, Y+50	; 0x32
    276e:	8b a9       	ldd	r24, Y+51	; 0x33
    2770:	9c a9       	ldd	r25, Y+52	; 0x34
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	4c f5       	brge	.+82     	; 0x27d4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	6d a9       	ldd	r22, Y+53	; 0x35
    2784:	7e a9       	ldd	r23, Y+54	; 0x36
    2786:	8f a9       	ldd	r24, Y+55	; 0x37
    2788:	98 ad       	ldd	r25, Y+56	; 0x38
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e2       	ldi	r20, 0x20	; 32
    2790:	51 e4       	ldi	r21, 0x41	; 65
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	98 ab       	std	Y+48, r25	; 0x30
    27a8:	8f a7       	std	Y+47, r24	; 0x2f
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <LCD_sendCommand+0xd2>
    27ac:	80 e9       	ldi	r24, 0x90	; 144
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	9e a7       	std	Y+46, r25	; 0x2e
    27b2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    27b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_sendCommand+0xc0>
    27bc:	9e a7       	std	Y+46, r25	; 0x2e
    27be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c2:	98 a9       	ldd	r25, Y+48	; 0x30
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	98 ab       	std	Y+48, r25	; 0x30
    27c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    27cc:	98 a9       	ldd	r25, Y+48	; 0x30
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	69 f7       	brne	.-38     	; 0x27ac <LCD_sendCommand+0xb4>
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	69 a9       	ldd	r22, Y+49	; 0x31
    27d6:	7a a9       	ldd	r23, Y+50	; 0x32
    27d8:	8b a9       	ldd	r24, Y+51	; 0x33
    27da:	9c a9       	ldd	r25, Y+52	; 0x34
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	98 ab       	std	Y+48, r25	; 0x30
    27e6:	8f a7       	std	Y+47, r24	; 0x2f
    27e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ea:	98 a9       	ldd	r25, Y+48	; 0x30
    27ec:	9c a7       	std	Y+44, r25	; 0x2c
    27ee:	8b a7       	std	Y+43, r24	; 0x2b
    27f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_sendCommand+0xfc>
    27f8:	9c a7       	std	Y+44, r25	; 0x2c
    27fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    27fc:	83 e0       	ldi	r24, 0x03	; 3
    27fe:	65 e0       	ldi	r22, 0x05	; 5
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_setPinValue>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a0 e8       	ldi	r26, 0x80	; 128
    280c:	bf e3       	ldi	r27, 0x3F	; 63
    280e:	8f a3       	std	Y+39, r24	; 0x27
    2810:	98 a7       	std	Y+40, r25	; 0x28
    2812:	a9 a7       	std	Y+41, r26	; 0x29
    2814:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	6f a1       	ldd	r22, Y+39	; 0x27
    2818:	78 a5       	ldd	r23, Y+40	; 0x28
    281a:	89 a5       	ldd	r24, Y+41	; 0x29
    281c:	9a a5       	ldd	r25, Y+42	; 0x2a
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	4a e7       	ldi	r20, 0x7A	; 122
    2824:	55 e4       	ldi	r21, 0x45	; 69
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8b a3       	std	Y+35, r24	; 0x23
    2830:	9c a3       	std	Y+36, r25	; 0x24
    2832:	ad a3       	std	Y+37, r26	; 0x25
    2834:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2836:	6b a1       	ldd	r22, Y+35	; 0x23
    2838:	7c a1       	ldd	r23, Y+36	; 0x24
    283a:	8d a1       	ldd	r24, Y+37	; 0x25
    283c:	9e a1       	ldd	r25, Y+38	; 0x26
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <LCD_sendCommand+0x160>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9a a3       	std	Y+34, r25	; 0x22
    2854:	89 a3       	std	Y+33, r24	; 0x21
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2858:	6b a1       	ldd	r22, Y+35	; 0x23
    285a:	7c a1       	ldd	r23, Y+36	; 0x24
    285c:	8d a1       	ldd	r24, Y+37	; 0x25
    285e:	9e a1       	ldd	r25, Y+38	; 0x26
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	3f ef       	ldi	r19, 0xFF	; 255
    2864:	4f e7       	ldi	r20, 0x7F	; 127
    2866:	57 e4       	ldi	r21, 0x47	; 71
    2868:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286c:	18 16       	cp	r1, r24
    286e:	4c f5       	brge	.+82     	; 0x28c2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2870:	6f a1       	ldd	r22, Y+39	; 0x27
    2872:	78 a5       	ldd	r23, Y+40	; 0x28
    2874:	89 a5       	ldd	r24, Y+41	; 0x29
    2876:	9a a5       	ldd	r25, Y+42	; 0x2a
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9a a3       	std	Y+34, r25	; 0x22
    2896:	89 a3       	std	Y+33, r24	; 0x21
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <LCD_sendCommand+0x1c0>
    289a:	80 e9       	ldi	r24, 0x90	; 144
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	98 a3       	std	Y+32, r25	; 0x20
    28a0:	8f 8f       	std	Y+31, r24	; 0x1f
    28a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28a4:	98 a1       	ldd	r25, Y+32	; 0x20
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_sendCommand+0x1ae>
    28aa:	98 a3       	std	Y+32, r25	; 0x20
    28ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	89 a1       	ldd	r24, Y+33	; 0x21
    28b0:	9a a1       	ldd	r25, Y+34	; 0x22
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9a a3       	std	Y+34, r25	; 0x22
    28b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ba:	9a a1       	ldd	r25, Y+34	; 0x22
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <LCD_sendCommand+0x1a2>
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	6b a1       	ldd	r22, Y+35	; 0x23
    28c4:	7c a1       	ldd	r23, Y+36	; 0x24
    28c6:	8d a1       	ldd	r24, Y+37	; 0x25
    28c8:	9e a1       	ldd	r25, Y+38	; 0x26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9a a3       	std	Y+34, r25	; 0x22
    28d4:	89 a3       	std	Y+33, r24	; 0x21
    28d6:	89 a1       	ldd	r24, Y+33	; 0x21
    28d8:	9a a1       	ldd	r25, Y+34	; 0x22
    28da:	9e 8f       	std	Y+30, r25	; 0x1e
    28dc:	8d 8f       	std	Y+29, r24	; 0x1d
    28de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <LCD_sendCommand+0x1ea>
    28e6:	9e 8f       	std	Y+30, r25	; 0x1e
    28e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    28ea:	82 e0       	ldi	r24, 0x02	; 2
    28ec:	69 ad       	ldd	r22, Y+57	; 0x39
    28ee:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_setPortValue>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e8       	ldi	r26, 0x80	; 128
    28f8:	bf e3       	ldi	r27, 0x3F	; 63
    28fa:	89 8f       	std	Y+25, r24	; 0x19
    28fc:	9a 8f       	std	Y+26, r25	; 0x1a
    28fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2900:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	69 8d       	ldd	r22, Y+25	; 0x19
    2904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	4a e7       	ldi	r20, 0x7A	; 122
    2910:	55 e4       	ldi	r21, 0x45	; 69
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	8d 8b       	std	Y+21, r24	; 0x15
    291c:	9e 8b       	std	Y+22, r25	; 0x16
    291e:	af 8b       	std	Y+23, r26	; 0x17
    2920:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2922:	6d 89       	ldd	r22, Y+21	; 0x15
    2924:	7e 89       	ldd	r23, Y+22	; 0x16
    2926:	8f 89       	ldd	r24, Y+23	; 0x17
    2928:	98 8d       	ldd	r25, Y+24	; 0x18
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	2c f4       	brge	.+10     	; 0x2944 <LCD_sendCommand+0x24c>
		__ticks = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	9c 8b       	std	Y+20, r25	; 0x14
    2940:	8b 8b       	std	Y+19, r24	; 0x13
    2942:	3f c0       	rjmp	.+126    	; 0x29c2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2944:	6d 89       	ldd	r22, Y+21	; 0x15
    2946:	7e 89       	ldd	r23, Y+22	; 0x16
    2948:	8f 89       	ldd	r24, Y+23	; 0x17
    294a:	98 8d       	ldd	r25, Y+24	; 0x18
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	3f ef       	ldi	r19, 0xFF	; 255
    2950:	4f e7       	ldi	r20, 0x7F	; 127
    2952:	57 e4       	ldi	r21, 0x47	; 71
    2954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2958:	18 16       	cp	r1, r24
    295a:	4c f5       	brge	.+82     	; 0x29ae <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295c:	69 8d       	ldd	r22, Y+25	; 0x19
    295e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2960:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2962:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e2       	ldi	r20, 0x20	; 32
    296a:	51 e4       	ldi	r21, 0x41	; 65
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9c 8b       	std	Y+20, r25	; 0x14
    2982:	8b 8b       	std	Y+19, r24	; 0x13
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <LCD_sendCommand+0x2ac>
    2986:	80 e9       	ldi	r24, 0x90	; 144
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	9a 8b       	std	Y+18, r25	; 0x12
    298c:	89 8b       	std	Y+17, r24	; 0x11
    298e:	89 89       	ldd	r24, Y+17	; 0x11
    2990:	9a 89       	ldd	r25, Y+18	; 0x12
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <LCD_sendCommand+0x29a>
    2996:	9a 8b       	std	Y+18, r25	; 0x12
    2998:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299a:	8b 89       	ldd	r24, Y+19	; 0x13
    299c:	9c 89       	ldd	r25, Y+20	; 0x14
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	9c 8b       	std	Y+20, r25	; 0x14
    29a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a4:	8b 89       	ldd	r24, Y+19	; 0x13
    29a6:	9c 89       	ldd	r25, Y+20	; 0x14
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	69 f7       	brne	.-38     	; 0x2986 <LCD_sendCommand+0x28e>
    29ac:	14 c0       	rjmp	.+40     	; 0x29d6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ae:	6d 89       	ldd	r22, Y+21	; 0x15
    29b0:	7e 89       	ldd	r23, Y+22	; 0x16
    29b2:	8f 89       	ldd	r24, Y+23	; 0x17
    29b4:	98 8d       	ldd	r25, Y+24	; 0x18
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	9c 8b       	std	Y+20, r25	; 0x14
    29c0:	8b 8b       	std	Y+19, r24	; 0x13
    29c2:	8b 89       	ldd	r24, Y+19	; 0x13
    29c4:	9c 89       	ldd	r25, Y+20	; 0x14
    29c6:	98 8b       	std	Y+16, r25	; 0x10
    29c8:	8f 87       	std	Y+15, r24	; 0x0f
    29ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    29cc:	98 89       	ldd	r25, Y+16	; 0x10
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <LCD_sendCommand+0x2d6>
    29d2:	98 8b       	std	Y+16, r25	; 0x10
    29d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    29d6:	83 e0       	ldi	r24, 0x03	; 3
    29d8:	65 e0       	ldi	r22, 0x05	; 5
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_setPinValue>
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a0 e8       	ldi	r26, 0x80	; 128
    29e6:	bf e3       	ldi	r27, 0x3F	; 63
    29e8:	8b 87       	std	Y+11, r24	; 0x0b
    29ea:	9c 87       	std	Y+12, r25	; 0x0c
    29ec:	ad 87       	std	Y+13, r26	; 0x0d
    29ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	4a e7       	ldi	r20, 0x7A	; 122
    29fe:	55 e4       	ldi	r21, 0x45	; 69
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	8f 83       	std	Y+7, r24	; 0x07
    2a0a:	98 87       	std	Y+8, r25	; 0x08
    2a0c:	a9 87       	std	Y+9, r26	; 0x09
    2a0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a10:	6f 81       	ldd	r22, Y+7	; 0x07
    2a12:	78 85       	ldd	r23, Y+8	; 0x08
    2a14:	89 85       	ldd	r24, Y+9	; 0x09
    2a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e8       	ldi	r20, 0x80	; 128
    2a1e:	5f e3       	ldi	r21, 0x3F	; 63
    2a20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a24:	88 23       	and	r24, r24
    2a26:	2c f4       	brge	.+10     	; 0x2a32 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
    2a30:	3f c0       	rjmp	.+126    	; 0x2ab0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2a32:	6f 81       	ldd	r22, Y+7	; 0x07
    2a34:	78 85       	ldd	r23, Y+8	; 0x08
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	3f ef       	ldi	r19, 0xFF	; 255
    2a3e:	4f e7       	ldi	r20, 0x7F	; 127
    2a40:	57 e4       	ldi	r21, 0x47	; 71
    2a42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a46:	18 16       	cp	r1, r24
    2a48:	4c f5       	brge	.+82     	; 0x2a9c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e2       	ldi	r20, 0x20	; 32
    2a58:	51 e4       	ldi	r21, 0x41	; 65
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <LCD_sendCommand+0x39a>
    2a74:	80 e9       	ldi	r24, 0x90	; 144
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	9c 83       	std	Y+4, r25	; 0x04
    2a7a:	8b 83       	std	Y+3, r24	; 0x03
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <LCD_sendCommand+0x388>
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	69 f7       	brne	.-38     	; 0x2a74 <LCD_sendCommand+0x37c>
    2a9a:	14 c0       	rjmp	.+40     	; 0x2ac4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9e:	78 85       	ldd	r23, Y+8	; 0x08
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	9a 81       	ldd	r25, Y+2	; 0x02
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <LCD_sendCommand+0x3c4>
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2ac4:	e9 96       	adiw	r28, 0x39	; 57
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	e9 97       	sbiw	r28, 0x39	; 57
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2aec:	83 e0       	ldi	r24, 0x03	; 3
    2aee:	64 e0       	ldi	r22, 0x04	; 4
    2af0:	41 e0       	ldi	r20, 0x01	; 1
    2af2:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_setPinValue>
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a0 e8       	ldi	r26, 0x80	; 128
    2afc:	bf e3       	ldi	r27, 0x3F	; 63
    2afe:	8d ab       	std	Y+53, r24	; 0x35
    2b00:	9e ab       	std	Y+54, r25	; 0x36
    2b02:	af ab       	std	Y+55, r26	; 0x37
    2b04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b06:	6d a9       	ldd	r22, Y+53	; 0x35
    2b08:	7e a9       	ldd	r23, Y+54	; 0x36
    2b0a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b0c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4a e7       	ldi	r20, 0x7A	; 122
    2b14:	55 e4       	ldi	r21, 0x45	; 69
    2b16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	89 ab       	std	Y+49, r24	; 0x31
    2b20:	9a ab       	std	Y+50, r25	; 0x32
    2b22:	ab ab       	std	Y+51, r26	; 0x33
    2b24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b26:	69 a9       	ldd	r22, Y+49	; 0x31
    2b28:	7a a9       	ldd	r23, Y+50	; 0x32
    2b2a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b2c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e8       	ldi	r20, 0x80	; 128
    2b34:	5f e3       	ldi	r21, 0x3F	; 63
    2b36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b3a:	88 23       	and	r24, r24
    2b3c:	2c f4       	brge	.+10     	; 0x2b48 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	98 ab       	std	Y+48, r25	; 0x30
    2b44:	8f a7       	std	Y+47, r24	; 0x2f
    2b46:	3f c0       	rjmp	.+126    	; 0x2bc6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2b48:	69 a9       	ldd	r22, Y+49	; 0x31
    2b4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	4f e7       	ldi	r20, 0x7F	; 127
    2b56:	57 e4       	ldi	r21, 0x47	; 71
    2b58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5c:	18 16       	cp	r1, r24
    2b5e:	4c f5       	brge	.+82     	; 0x2bb2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b60:	6d a9       	ldd	r22, Y+53	; 0x35
    2b62:	7e a9       	ldd	r23, Y+54	; 0x36
    2b64:	8f a9       	ldd	r24, Y+55	; 0x37
    2b66:	98 ad       	ldd	r25, Y+56	; 0x38
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e2       	ldi	r20, 0x20	; 32
    2b6e:	51 e4       	ldi	r21, 0x41	; 65
    2b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	98 ab       	std	Y+48, r25	; 0x30
    2b86:	8f a7       	std	Y+47, r24	; 0x2f
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <LCD_displayCharacter+0xd2>
    2b8a:	80 e9       	ldi	r24, 0x90	; 144
    2b8c:	91 e0       	ldi	r25, 0x01	; 1
    2b8e:	9e a7       	std	Y+46, r25	; 0x2e
    2b90:	8d a7       	std	Y+45, r24	; 0x2d
    2b92:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b94:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LCD_displayCharacter+0xc0>
    2b9a:	9e a7       	std	Y+46, r25	; 0x2e
    2b9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	98 ab       	std	Y+48, r25	; 0x30
    2ba6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2baa:	98 a9       	ldd	r25, Y+48	; 0x30
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	69 f7       	brne	.-38     	; 0x2b8a <LCD_displayCharacter+0xb4>
    2bb0:	14 c0       	rjmp	.+40     	; 0x2bda <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bb4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bb6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	98 ab       	std	Y+48, r25	; 0x30
    2bc4:	8f a7       	std	Y+47, r24	; 0x2f
    2bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bca:	9c a7       	std	Y+44, r25	; 0x2c
    2bcc:	8b a7       	std	Y+43, r24	; 0x2b
    2bce:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bd0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_displayCharacter+0xfc>
    2bd6:	9c a7       	std	Y+44, r25	; 0x2c
    2bd8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2bda:	83 e0       	ldi	r24, 0x03	; 3
    2bdc:	65 e0       	ldi	r22, 0x05	; 5
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_setPinValue>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 e8       	ldi	r26, 0x80	; 128
    2bea:	bf e3       	ldi	r27, 0x3F	; 63
    2bec:	8f a3       	std	Y+39, r24	; 0x27
    2bee:	98 a7       	std	Y+40, r25	; 0x28
    2bf0:	a9 a7       	std	Y+41, r26	; 0x29
    2bf2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	6f a1       	ldd	r22, Y+39	; 0x27
    2bf6:	78 a5       	ldd	r23, Y+40	; 0x28
    2bf8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a e7       	ldi	r20, 0x7A	; 122
    2c02:	55 e4       	ldi	r21, 0x45	; 69
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	8b a3       	std	Y+35, r24	; 0x23
    2c0e:	9c a3       	std	Y+36, r25	; 0x24
    2c10:	ad a3       	std	Y+37, r26	; 0x25
    2c12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c14:	6b a1       	ldd	r22, Y+35	; 0x23
    2c16:	7c a1       	ldd	r23, Y+36	; 0x24
    2c18:	8d a1       	ldd	r24, Y+37	; 0x25
    2c1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	9a a3       	std	Y+34, r25	; 0x22
    2c32:	89 a3       	std	Y+33, r24	; 0x21
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2c36:	6b a1       	ldd	r22, Y+35	; 0x23
    2c38:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c50:	78 a5       	ldd	r23, Y+40	; 0x28
    2c52:	89 a5       	ldd	r24, Y+41	; 0x29
    2c54:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9a a3       	std	Y+34, r25	; 0x22
    2c74:	89 a3       	std	Y+33, r24	; 0x21
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <LCD_displayCharacter+0x1c0>
    2c78:	80 e9       	ldi	r24, 0x90	; 144
    2c7a:	91 e0       	ldi	r25, 0x01	; 1
    2c7c:	98 a3       	std	Y+32, r25	; 0x20
    2c7e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c80:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c82:	98 a1       	ldd	r25, Y+32	; 0x20
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <LCD_displayCharacter+0x1ae>
    2c88:	98 a3       	std	Y+32, r25	; 0x20
    2c8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	9a a3       	std	Y+34, r25	; 0x22
    2c94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	89 a1       	ldd	r24, Y+33	; 0x21
    2c98:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <LCD_displayCharacter+0x1a2>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ca6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9a a3       	std	Y+34, r25	; 0x22
    2cb2:	89 a3       	std	Y+33, r24	; 0x21
    2cb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb6:	9a a1       	ldd	r25, Y+34	; 0x22
    2cb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2cba:	8d 8f       	std	Y+29, r24	; 0x1d
    2cbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <LCD_displayCharacter+0x1ea>
    2cc4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	69 ad       	ldd	r22, Y+57	; 0x39
    2ccc:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_setPortValue>
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	a0 e8       	ldi	r26, 0x80	; 128
    2cd6:	bf e3       	ldi	r27, 0x3F	; 63
    2cd8:	89 8f       	std	Y+25, r24	; 0x19
    2cda:	9a 8f       	std	Y+26, r25	; 0x1a
    2cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    2cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	4a e7       	ldi	r20, 0x7A	; 122
    2cee:	55 e4       	ldi	r21, 0x45	; 69
    2cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	8d 8b       	std	Y+21, r24	; 0x15
    2cfa:	9e 8b       	std	Y+22, r25	; 0x16
    2cfc:	af 8b       	std	Y+23, r26	; 0x17
    2cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d00:	6d 89       	ldd	r22, Y+21	; 0x15
    2d02:	7e 89       	ldd	r23, Y+22	; 0x16
    2d04:	8f 89       	ldd	r24, Y+23	; 0x17
    2d06:	98 8d       	ldd	r25, Y+24	; 0x18
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	9c 8b       	std	Y+20, r25	; 0x14
    2d1e:	8b 8b       	std	Y+19, r24	; 0x13
    2d20:	3f c0       	rjmp	.+126    	; 0x2da0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2d22:	6d 89       	ldd	r22, Y+21	; 0x15
    2d24:	7e 89       	ldd	r23, Y+22	; 0x16
    2d26:	8f 89       	ldd	r24, Y+23	; 0x17
    2d28:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	3f ef       	ldi	r19, 0xFF	; 255
    2d2e:	4f e7       	ldi	r20, 0x7F	; 127
    2d30:	57 e4       	ldi	r21, 0x47	; 71
    2d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d36:	18 16       	cp	r1, r24
    2d38:	4c f5       	brge	.+82     	; 0x2d8c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e2       	ldi	r20, 0x20	; 32
    2d48:	51 e4       	ldi	r21, 0x41	; 65
    2d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	bc 01       	movw	r22, r24
    2d54:	cd 01       	movw	r24, r26
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9c 8b       	std	Y+20, r25	; 0x14
    2d60:	8b 8b       	std	Y+19, r24	; 0x13
    2d62:	0f c0       	rjmp	.+30     	; 0x2d82 <LCD_displayCharacter+0x2ac>
    2d64:	80 e9       	ldi	r24, 0x90	; 144
    2d66:	91 e0       	ldi	r25, 0x01	; 1
    2d68:	9a 8b       	std	Y+18, r25	; 0x12
    2d6a:	89 8b       	std	Y+17, r24	; 0x11
    2d6c:	89 89       	ldd	r24, Y+17	; 0x11
    2d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <LCD_displayCharacter+0x29a>
    2d74:	9a 8b       	std	Y+18, r25	; 0x12
    2d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	9c 8b       	std	Y+20, r25	; 0x14
    2d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d82:	8b 89       	ldd	r24, Y+19	; 0x13
    2d84:	9c 89       	ldd	r25, Y+20	; 0x14
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	69 f7       	brne	.-38     	; 0x2d64 <LCD_displayCharacter+0x28e>
    2d8a:	14 c0       	rjmp	.+40     	; 0x2db4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d90:	8f 89       	ldd	r24, Y+23	; 0x17
    2d92:	98 8d       	ldd	r25, Y+24	; 0x18
    2d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9c 8b       	std	Y+20, r25	; 0x14
    2d9e:	8b 8b       	std	Y+19, r24	; 0x13
    2da0:	8b 89       	ldd	r24, Y+19	; 0x13
    2da2:	9c 89       	ldd	r25, Y+20	; 0x14
    2da4:	98 8b       	std	Y+16, r25	; 0x10
    2da6:	8f 87       	std	Y+15, r24	; 0x0f
    2da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2daa:	98 89       	ldd	r25, Y+16	; 0x10
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <LCD_displayCharacter+0x2d6>
    2db0:	98 8b       	std	Y+16, r25	; 0x10
    2db2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2db4:	83 e0       	ldi	r24, 0x03	; 3
    2db6:	65 e0       	ldi	r22, 0x05	; 5
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_setPinValue>
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 e8       	ldi	r26, 0x80	; 128
    2dc4:	bf e3       	ldi	r27, 0x3F	; 63
    2dc6:	8b 87       	std	Y+11, r24	; 0x0b
    2dc8:	9c 87       	std	Y+12, r25	; 0x0c
    2dca:	ad 87       	std	Y+13, r26	; 0x0d
    2dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a e7       	ldi	r20, 0x7A	; 122
    2ddc:	55 e4       	ldi	r21, 0x45	; 69
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	8f 83       	std	Y+7, r24	; 0x07
    2de8:	98 87       	std	Y+8, r25	; 0x08
    2dea:	a9 87       	std	Y+9, r26	; 0x09
    2dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dee:	6f 81       	ldd	r22, Y+7	; 0x07
    2df0:	78 85       	ldd	r23, Y+8	; 0x08
    2df2:	89 85       	ldd	r24, Y+9	; 0x09
    2df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e8       	ldi	r20, 0x80	; 128
    2dfc:	5f e3       	ldi	r21, 0x3F	; 63
    2dfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e02:	88 23       	and	r24, r24
    2e04:	2c f4       	brge	.+10     	; 0x2e10 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	9e 83       	std	Y+6, r25	; 0x06
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
    2e0e:	3f c0       	rjmp	.+126    	; 0x2e8e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2e10:	6f 81       	ldd	r22, Y+7	; 0x07
    2e12:	78 85       	ldd	r23, Y+8	; 0x08
    2e14:	89 85       	ldd	r24, Y+9	; 0x09
    2e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	3f ef       	ldi	r19, 0xFF	; 255
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	57 e4       	ldi	r21, 0x47	; 71
    2e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	4c f5       	brge	.+82     	; 0x2e7a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e2       	ldi	r20, 0x20	; 32
    2e36:	51 e4       	ldi	r21, 0x41	; 65
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
    2e50:	0f c0       	rjmp	.+30     	; 0x2e70 <LCD_displayCharacter+0x39a>
    2e52:	80 e9       	ldi	r24, 0x90	; 144
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	9c 83       	std	Y+4, r25	; 0x04
    2e58:	8b 83       	std	Y+3, r24	; 0x03
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <LCD_displayCharacter+0x388>
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	9e 83       	std	Y+6, r25	; 0x06
    2e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	69 f7       	brne	.-38     	; 0x2e52 <LCD_displayCharacter+0x37c>
    2e78:	14 c0       	rjmp	.+40     	; 0x2ea2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7c:	78 85       	ldd	r23, Y+8	; 0x08
    2e7e:	89 85       	ldd	r24, Y+9	; 0x09
    2e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	9e 83       	std	Y+6, r25	; 0x06
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <LCD_displayCharacter+0x3c4>
    2e9e:	9a 83       	std	Y+2, r25	; 0x02
    2ea0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2ea2:	e9 96       	adiw	r28, 0x39	; 57
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <LCD_init>:
void LCD_init(void)
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	2e 97       	sbiw	r28, 0x0e	; 14
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, AVR_PIN_OUTPUT);
    2ec8:	83 e0       	ldi	r24, 0x03	; 3
    2eca:	64 e0       	ldi	r22, 0x04	; 4
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 2b 08 	call	0x1056	; 0x1056 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, AVR_PIN_OUTPUT);
    2ed2:	83 e0       	ldi	r24, 0x03	; 3
    2ed4:	65 e0       	ldi	r22, 0x05	; 5
    2ed6:	41 e0       	ldi	r20, 0x01	; 1
    2ed8:	0e 94 2b 08 	call	0x1056	; 0x1056 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, AVR_PIN_OUTPUT);
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	61 e0       	ldi	r22, 0x01	; 1
    2ee0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_setPortDirection>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	a0 ea       	ldi	r26, 0xA0	; 160
    2eea:	b1 e4       	ldi	r27, 0x41	; 65
    2eec:	8b 87       	std	Y+11, r24	; 0x0b
    2eee:	9c 87       	std	Y+12, r25	; 0x0c
    2ef0:	ad 87       	std	Y+13, r26	; 0x0d
    2ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	4a e7       	ldi	r20, 0x7A	; 122
    2f02:	55 e4       	ldi	r21, 0x45	; 69
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8f 83       	std	Y+7, r24	; 0x07
    2f0e:	98 87       	std	Y+8, r25	; 0x08
    2f10:	a9 87       	std	Y+9, r26	; 0x09
    2f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	2c f4       	brge	.+10     	; 0x2f36 <LCD_init+0x82>
		__ticks = 1;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <LCD_init+0x100>
	else if (__tmp > 65535)
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	3f ef       	ldi	r19, 0xFF	; 255
    2f42:	4f e7       	ldi	r20, 0x7F	; 127
    2f44:	57 e4       	ldi	r21, 0x47	; 71
    2f46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4a:	18 16       	cp	r1, r24
    2f4c:	4c f5       	brge	.+82     	; 0x2fa0 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	51 e4       	ldi	r21, 0x41	; 65
    2f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f62:	dc 01       	movw	r26, r24
    2f64:	cb 01       	movw	r24, r22
    2f66:	bc 01       	movw	r22, r24
    2f68:	cd 01       	movw	r24, r26
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <LCD_init+0xe2>
    2f78:	80 e9       	ldi	r24, 0x90	; 144
    2f7a:	91 e0       	ldi	r25, 0x01	; 1
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
    2f80:	8b 81       	ldd	r24, Y+3	; 0x03
    2f82:	9c 81       	ldd	r25, Y+4	; 0x04
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <LCD_init+0xd0>
    2f88:	9c 83       	std	Y+4, r25	; 0x04
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	9e 83       	std	Y+6, r25	; 0x06
    2f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f96:	8d 81       	ldd	r24, Y+5	; 0x05
    2f98:	9e 81       	ldd	r25, Y+6	; 0x06
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	69 f7       	brne	.-38     	; 0x2f78 <LCD_init+0xc4>
    2f9e:	14 c0       	rjmp	.+40     	; 0x2fc8 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa2:	78 85       	ldd	r23, Y+8	; 0x08
    2fa4:	89 85       	ldd	r24, Y+9	; 0x09
    2fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	9e 83       	std	Y+6, r25	; 0x06
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb8:	9a 83       	std	Y+2, r25	; 0x02
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <LCD_init+0x10c>
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2fc8:	88 e3       	ldi	r24, 0x38	; 56
    2fca:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    2fce:	8c e0       	ldi	r24, 0x0C	; 12
    2fd0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
}
    2fda:	2e 96       	adiw	r28, 0x0e	; 14
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <LCD_GoToXY+0x6>
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <LCD_GoToXY+0x8>
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	88 32       	cpi	r24, 0x28	; 40
    3000:	c0 f4       	brcc	.+48     	; 0x3032 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	3c 83       	std	Y+4, r19	; 0x04
    300a:	2b 83       	std	Y+3, r18	; 0x03
    300c:	8b 81       	ldd	r24, Y+3	; 0x03
    300e:	9c 81       	ldd	r25, Y+4	; 0x04
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	31 f0       	breq	.+12     	; 0x3020 <LCD_GoToXY+0x34>
    3014:	2b 81       	ldd	r18, Y+3	; 0x03
    3016:	3c 81       	ldd	r19, Y+4	; 0x04
    3018:	21 30       	cpi	r18, 0x01	; 1
    301a:	31 05       	cpc	r19, r1
    301c:	31 f0       	breq	.+12     	; 0x302a <LCD_GoToXY+0x3e>
    301e:	09 c0       	rjmp	.+18     	; 0x3032 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	80 58       	subi	r24, 0x80	; 128
    3024:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
    3028:	04 c0       	rjmp	.+8      	; 0x3032 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    302a:	8a 81       	ldd	r24, Y+2	; 0x02
    302c:	80 54       	subi	r24, 0x40	; 64
    302e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
			break;
		}
	}
}
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	00 d0       	rcall	.+0      	; 0x3046 <LCD_displayString+0x6>
    3046:	0f 92       	push	r0
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	9b 83       	std	Y+3, r25	; 0x03
    304e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3050:	19 82       	std	Y+1, r1	; 0x01
    3052:	0e c0       	rjmp	.+28     	; 0x3070 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	28 2f       	mov	r18, r24
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	9b 81       	ldd	r25, Y+3	; 0x03
    305e:	fc 01       	movw	r30, r24
    3060:	e2 0f       	add	r30, r18
    3062:	f3 1f       	adc	r31, r19
    3064:	80 81       	ld	r24, Z
    3066:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
		i++;
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	8f 5f       	subi	r24, 0xFF	; 255
    306e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	9b 81       	ldd	r25, Y+3	; 0x03
    307a:	fc 01       	movw	r30, r24
    307c:	e2 0f       	add	r30, r18
    307e:	f3 1f       	adc	r31, r19
    3080:	80 81       	ld	r24, Z
    3082:	88 23       	and	r24, r24
    3084:	39 f7       	brne	.-50     	; 0x3054 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	28 97       	sbiw	r28, 0x08	; 8
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	6c 83       	std	Y+4, r22	; 0x04
    30aa:	5e 83       	std	Y+6, r21	; 0x06
    30ac:	4d 83       	std	Y+5, r20	; 0x05
    30ae:	38 87       	std	Y+8, r19	; 0x08
    30b0:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    30b2:	1a 82       	std	Y+2, r1	; 0x02
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	88 23       	and	r24, r24
    30bc:	49 f4       	brne	.+18     	; 0x30d0 <LCD_String_xy+0x3e>
    30be:	8c 81       	ldd	r24, Y+4	; 0x04
    30c0:	80 31       	cpi	r24, 0x10	; 16
    30c2:	30 f4       	brcc	.+12     	; 0x30d0 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    30c4:	8c 81       	ldd	r24, Y+4	; 0x04
    30c6:	8f 70       	andi	r24, 0x0F	; 15
    30c8:	80 68       	ori	r24, 0x80	; 128
    30ca:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
    30ce:	3a c0       	rjmp	.+116    	; 0x3144 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	b9 f5       	brne	.+110    	; 0x3144 <LCD_String_xy+0xb2>
    30d6:	8c 81       	ldd	r24, Y+4	; 0x04
    30d8:	80 31       	cpi	r24, 0x10	; 16
    30da:	a0 f5       	brcc	.+104    	; 0x3144 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    30dc:	8c 81       	ldd	r24, Y+4	; 0x04
    30de:	8f 70       	andi	r24, 0x0F	; 15
    30e0:	80 6c       	ori	r24, 0xC0	; 192
    30e2:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
    30e6:	2e c0       	rjmp	.+92     	; 0x3144 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	28 2f       	mov	r18, r24
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	9e 81       	ldd	r25, Y+6	; 0x06
    30f2:	fc 01       	movw	r30, r24
    30f4:	e2 0f       	add	r30, r18
    30f6:	f3 1f       	adc	r31, r19
    30f8:	80 81       	ld	r24, Z
    30fa:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
		i++;
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	8f 5f       	subi	r24, 0xFF	; 255
    3102:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	88 23       	and	r24, r24
    3108:	71 f4       	brne	.+28     	; 0x3126 <LCD_String_xy+0x94>
    310a:	8c 81       	ldd	r24, Y+4	; 0x04
    310c:	83 30       	cpi	r24, 0x03	; 3
    310e:	58 f0       	brcs	.+22     	; 0x3126 <LCD_String_xy+0x94>
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	8b 30       	cpi	r24, 0x0B	; 11
    3114:	41 f4       	brne	.+16     	; 0x3126 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	60 e0       	ldi	r22, 0x00	; 0
    311a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
			c++;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	0b c0       	rjmp	.+22     	; 0x313c <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3126:	8b 81       	ldd	r24, Y+3	; 0x03
    3128:	81 30       	cpi	r24, 0x01	; 1
    312a:	41 f4       	brne	.+16     	; 0x313c <LCD_String_xy+0xaa>
    312c:	8c 81       	ldd	r24, Y+4	; 0x04
    312e:	83 30       	cpi	r24, 0x03	; 3
    3130:	28 f0       	brcs	.+10     	; 0x313c <LCD_String_xy+0xaa>
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	8b 30       	cpi	r24, 0x0B	; 11
    3136:	11 f4       	brne	.+4      	; 0x313c <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3138:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
		}

		*count = c;
    313c:	ef 81       	ldd	r30, Y+7	; 0x07
    313e:	f8 85       	ldd	r31, Y+8	; 0x08
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	28 2f       	mov	r18, r24
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	9e 81       	ldd	r25, Y+6	; 0x06
    314e:	fc 01       	movw	r30, r24
    3150:	e2 0f       	add	r30, r18
    3152:	f3 1f       	adc	r31, r19
    3154:	80 81       	ld	r24, Z
    3156:	88 23       	and	r24, r24
    3158:	39 f6       	brne	.-114    	; 0x30e8 <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    315a:	28 96       	adiw	r28, 0x08	; 8
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	2e 97       	sbiw	r28, 0x0e	; 14
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	a0 e0       	ldi	r26, 0x00	; 0
    318c:	b0 e4       	ldi	r27, 0x40	; 64
    318e:	8b 87       	std	Y+11, r24	; 0x0b
    3190:	9c 87       	std	Y+12, r25	; 0x0c
    3192:	ad 87       	std	Y+13, r26	; 0x0d
    3194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3196:	6b 85       	ldd	r22, Y+11	; 0x0b
    3198:	7c 85       	ldd	r23, Y+12	; 0x0c
    319a:	8d 85       	ldd	r24, Y+13	; 0x0d
    319c:	9e 85       	ldd	r25, Y+14	; 0x0e
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	4a e7       	ldi	r20, 0x7A	; 122
    31a4:	55 e4       	ldi	r21, 0x45	; 69
    31a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	8f 83       	std	Y+7, r24	; 0x07
    31b0:	98 87       	std	Y+8, r25	; 0x08
    31b2:	a9 87       	std	Y+9, r26	; 0x09
    31b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b6:	6f 81       	ldd	r22, Y+7	; 0x07
    31b8:	78 85       	ldd	r23, Y+8	; 0x08
    31ba:	89 85       	ldd	r24, Y+9	; 0x09
    31bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e8       	ldi	r20, 0x80	; 128
    31c4:	5f e3       	ldi	r21, 0x3F	; 63
    31c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ca:	88 23       	and	r24, r24
    31cc:	2c f4       	brge	.+10     	; 0x31d8 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05
    31d6:	3f c0       	rjmp	.+126    	; 0x3256 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    31d8:	6f 81       	ldd	r22, Y+7	; 0x07
    31da:	78 85       	ldd	r23, Y+8	; 0x08
    31dc:	89 85       	ldd	r24, Y+9	; 0x09
    31de:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	3f ef       	ldi	r19, 0xFF	; 255
    31e4:	4f e7       	ldi	r20, 0x7F	; 127
    31e6:	57 e4       	ldi	r21, 0x47	; 71
    31e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ec:	18 16       	cp	r1, r24
    31ee:	4c f5       	brge	.+82     	; 0x3242 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	40 e2       	ldi	r20, 0x20	; 32
    31fe:	51 e4       	ldi	r21, 0x41	; 65
    3200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	bc 01       	movw	r22, r24
    320a:	cd 01       	movw	r24, r26
    320c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	9e 83       	std	Y+6, r25	; 0x06
    3216:	8d 83       	std	Y+5, r24	; 0x05
    3218:	0f c0       	rjmp	.+30     	; 0x3238 <LCD_ClearScreen+0xcc>
    321a:	80 e9       	ldi	r24, 0x90	; 144
    321c:	91 e0       	ldi	r25, 0x01	; 1
    321e:	9c 83       	std	Y+4, r25	; 0x04
    3220:	8b 83       	std	Y+3, r24	; 0x03
    3222:	8b 81       	ldd	r24, Y+3	; 0x03
    3224:	9c 81       	ldd	r25, Y+4	; 0x04
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	f1 f7       	brne	.-4      	; 0x3226 <LCD_ClearScreen+0xba>
    322a:	9c 83       	std	Y+4, r25	; 0x04
    322c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3238:	8d 81       	ldd	r24, Y+5	; 0x05
    323a:	9e 81       	ldd	r25, Y+6	; 0x06
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	69 f7       	brne	.-38     	; 0x321a <LCD_ClearScreen+0xae>
    3240:	14 c0       	rjmp	.+40     	; 0x326a <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3242:	6f 81       	ldd	r22, Y+7	; 0x07
    3244:	78 85       	ldd	r23, Y+8	; 0x08
    3246:	89 85       	ldd	r24, Y+9	; 0x09
    3248:	9a 85       	ldd	r25, Y+10	; 0x0a
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9e 83       	std	Y+6, r25	; 0x06
    3254:	8d 83       	std	Y+5, r24	; 0x05
    3256:	8d 81       	ldd	r24, Y+5	; 0x05
    3258:	9e 81       	ldd	r25, Y+6	; 0x06
    325a:	9a 83       	std	Y+2, r25	; 0x02
    325c:	89 83       	std	Y+1, r24	; 0x01
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	9a 81       	ldd	r25, Y+2	; 0x02
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <LCD_ClearScreen+0xf6>
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    326a:	2e 96       	adiw	r28, 0x0e	; 14
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	2e 97       	sbiw	r28, 0x0e	; 14
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	f8 94       	cli
    328a:	de bf       	out	0x3e, r29	; 62
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3290:	88 e1       	ldi	r24, 0x18	; 24
    3292:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	a0 ea       	ldi	r26, 0xA0	; 160
    329c:	b1 e4       	ldi	r27, 0x41	; 65
    329e:	8b 87       	std	Y+11, r24	; 0x0b
    32a0:	9c 87       	std	Y+12, r25	; 0x0c
    32a2:	ad 87       	std	Y+13, r26	; 0x0d
    32a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	4a e7       	ldi	r20, 0x7A	; 122
    32b4:	55 e4       	ldi	r21, 0x45	; 69
    32b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	8f 83       	std	Y+7, r24	; 0x07
    32c0:	98 87       	std	Y+8, r25	; 0x08
    32c2:	a9 87       	std	Y+9, r26	; 0x09
    32c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c6:	6f 81       	ldd	r22, Y+7	; 0x07
    32c8:	78 85       	ldd	r23, Y+8	; 0x08
    32ca:	89 85       	ldd	r24, Y+9	; 0x09
    32cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	40 e8       	ldi	r20, 0x80	; 128
    32d4:	5f e3       	ldi	r21, 0x3F	; 63
    32d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32da:	88 23       	and	r24, r24
    32dc:	2c f4       	brge	.+10     	; 0x32e8 <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	9e 83       	std	Y+6, r25	; 0x06
    32e4:	8d 83       	std	Y+5, r24	; 0x05
    32e6:	3f c0       	rjmp	.+126    	; 0x3366 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    32e8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ea:	78 85       	ldd	r23, Y+8	; 0x08
    32ec:	89 85       	ldd	r24, Y+9	; 0x09
    32ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	3f ef       	ldi	r19, 0xFF	; 255
    32f4:	4f e7       	ldi	r20, 0x7F	; 127
    32f6:	57 e4       	ldi	r21, 0x47	; 71
    32f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32fc:	18 16       	cp	r1, r24
    32fe:	4c f5       	brge	.+82     	; 0x3352 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3300:	6b 85       	ldd	r22, Y+11	; 0x0b
    3302:	7c 85       	ldd	r23, Y+12	; 0x0c
    3304:	8d 85       	ldd	r24, Y+13	; 0x0d
    3306:	9e 85       	ldd	r25, Y+14	; 0x0e
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e2       	ldi	r20, 0x20	; 32
    330e:	51 e4       	ldi	r21, 0x41	; 65
    3310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	bc 01       	movw	r22, r24
    331a:	cd 01       	movw	r24, r26
    331c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	9e 83       	std	Y+6, r25	; 0x06
    3326:	8d 83       	std	Y+5, r24	; 0x05
    3328:	0f c0       	rjmp	.+30     	; 0x3348 <LCD_ShiftingLeft+0xcc>
    332a:	80 e9       	ldi	r24, 0x90	; 144
    332c:	91 e0       	ldi	r25, 0x01	; 1
    332e:	9c 83       	std	Y+4, r25	; 0x04
    3330:	8b 83       	std	Y+3, r24	; 0x03
    3332:	8b 81       	ldd	r24, Y+3	; 0x03
    3334:	9c 81       	ldd	r25, Y+4	; 0x04
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <LCD_ShiftingLeft+0xba>
    333a:	9c 83       	std	Y+4, r25	; 0x04
    333c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333e:	8d 81       	ldd	r24, Y+5	; 0x05
    3340:	9e 81       	ldd	r25, Y+6	; 0x06
    3342:	01 97       	sbiw	r24, 0x01	; 1
    3344:	9e 83       	std	Y+6, r25	; 0x06
    3346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3348:	8d 81       	ldd	r24, Y+5	; 0x05
    334a:	9e 81       	ldd	r25, Y+6	; 0x06
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	69 f7       	brne	.-38     	; 0x332a <LCD_ShiftingLeft+0xae>
    3350:	14 c0       	rjmp	.+40     	; 0x337a <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3352:	6f 81       	ldd	r22, Y+7	; 0x07
    3354:	78 85       	ldd	r23, Y+8	; 0x08
    3356:	89 85       	ldd	r24, Y+9	; 0x09
    3358:	9a 85       	ldd	r25, Y+10	; 0x0a
    335a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	9e 83       	std	Y+6, r25	; 0x06
    3364:	8d 83       	std	Y+5, r24	; 0x05
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	9e 81       	ldd	r25, Y+6	; 0x06
    336a:	9a 83       	std	Y+2, r25	; 0x02
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	9a 81       	ldd	r25, Y+2	; 0x02
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <LCD_ShiftingLeft+0xf6>
    3376:	9a 83       	std	Y+2, r25	; 0x02
    3378:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    337a:	2e 96       	adiw	r28, 0x0e	; 14
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	08 95       	ret

0000338c <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	2e 97       	sbiw	r28, 0x0e	; 14
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    33a0:	8c e1       	ldi	r24, 0x1C	; 28
    33a2:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 ea       	ldi	r26, 0xA0	; 160
    33ac:	b1 e4       	ldi	r27, 0x41	; 65
    33ae:	8b 87       	std	Y+11, r24	; 0x0b
    33b0:	9c 87       	std	Y+12, r25	; 0x0c
    33b2:	ad 87       	std	Y+13, r26	; 0x0d
    33b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    33bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	4a e7       	ldi	r20, 0x7A	; 122
    33c4:	55 e4       	ldi	r21, 0x45	; 69
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	8f 83       	std	Y+7, r24	; 0x07
    33d0:	98 87       	std	Y+8, r25	; 0x08
    33d2:	a9 87       	std	Y+9, r26	; 0x09
    33d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d6:	6f 81       	ldd	r22, Y+7	; 0x07
    33d8:	78 85       	ldd	r23, Y+8	; 0x08
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e8       	ldi	r20, 0x80	; 128
    33e4:	5f e3       	ldi	r21, 0x3F	; 63
    33e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ea:	88 23       	and	r24, r24
    33ec:	2c f4       	brge	.+10     	; 0x33f8 <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	9e 83       	std	Y+6, r25	; 0x06
    33f4:	8d 83       	std	Y+5, r24	; 0x05
    33f6:	3f c0       	rjmp	.+126    	; 0x3476 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    33f8:	6f 81       	ldd	r22, Y+7	; 0x07
    33fa:	78 85       	ldd	r23, Y+8	; 0x08
    33fc:	89 85       	ldd	r24, Y+9	; 0x09
    33fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	3f ef       	ldi	r19, 0xFF	; 255
    3404:	4f e7       	ldi	r20, 0x7F	; 127
    3406:	57 e4       	ldi	r21, 0x47	; 71
    3408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340c:	18 16       	cp	r1, r24
    340e:	4c f5       	brge	.+82     	; 0x3462 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3410:	6b 85       	ldd	r22, Y+11	; 0x0b
    3412:	7c 85       	ldd	r23, Y+12	; 0x0c
    3414:	8d 85       	ldd	r24, Y+13	; 0x0d
    3416:	9e 85       	ldd	r25, Y+14	; 0x0e
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e2       	ldi	r20, 0x20	; 32
    341e:	51 e4       	ldi	r21, 0x41	; 65
    3420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	bc 01       	movw	r22, r24
    342a:	cd 01       	movw	r24, r26
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
    3438:	0f c0       	rjmp	.+30     	; 0x3458 <LCD_ShiftingRight+0xcc>
    343a:	80 e9       	ldi	r24, 0x90	; 144
    343c:	91 e0       	ldi	r25, 0x01	; 1
    343e:	9c 83       	std	Y+4, r25	; 0x04
    3440:	8b 83       	std	Y+3, r24	; 0x03
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <LCD_ShiftingRight+0xba>
    344a:	9c 83       	std	Y+4, r25	; 0x04
    344c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344e:	8d 81       	ldd	r24, Y+5	; 0x05
    3450:	9e 81       	ldd	r25, Y+6	; 0x06
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	9e 83       	std	Y+6, r25	; 0x06
    3456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3458:	8d 81       	ldd	r24, Y+5	; 0x05
    345a:	9e 81       	ldd	r25, Y+6	; 0x06
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	69 f7       	brne	.-38     	; 0x343a <LCD_ShiftingRight+0xae>
    3460:	14 c0       	rjmp	.+40     	; 0x348a <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3462:	6f 81       	ldd	r22, Y+7	; 0x07
    3464:	78 85       	ldd	r23, Y+8	; 0x08
    3466:	89 85       	ldd	r24, Y+9	; 0x09
    3468:	9a 85       	ldd	r25, Y+10	; 0x0a
    346a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	9e 83       	std	Y+6, r25	; 0x06
    3474:	8d 83       	std	Y+5, r24	; 0x05
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	9a 83       	std	Y+2, r25	; 0x02
    347c:	89 83       	std	Y+1, r24	; 0x01
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <LCD_ShiftingRight+0xf6>
    3486:	9a 83       	std	Y+2, r25	; 0x02
    3488:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    348a:	2e 96       	adiw	r28, 0x0e	; 14
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    349c:	0f 93       	push	r16
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	28 97       	sbiw	r28, 0x08	; 8
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	7d 83       	std	Y+5, r23	; 0x05
    34b6:	6c 83       	std	Y+4, r22	; 0x04
    34b8:	4e 83       	std	Y+6, r20	; 0x06
    34ba:	2f 83       	std	Y+7, r18	; 0x07
    34bc:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    34be:	88 85       	ldd	r24, Y+8	; 0x08
    34c0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    34c4:	1a 82       	std	Y+2, r1	; 0x02
    34c6:	19 82       	std	Y+1, r1	; 0x01
    34c8:	0f c0       	rjmp	.+30     	; 0x34e8 <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    34ca:	29 81       	ldd	r18, Y+1	; 0x01
    34cc:	3a 81       	ldd	r19, Y+2	; 0x02
    34ce:	8c 81       	ldd	r24, Y+4	; 0x04
    34d0:	9d 81       	ldd	r25, Y+5	; 0x05
    34d2:	fc 01       	movw	r30, r24
    34d4:	e2 0f       	add	r30, r18
    34d6:	f3 1f       	adc	r31, r19
    34d8:	80 81       	ld	r24, Z
    34da:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	9a 81       	ldd	r25, Y+2	; 0x02
    34e2:	01 96       	adiw	r24, 0x01	; 1
    34e4:	9a 83       	std	Y+2, r25	; 0x02
    34e6:	89 83       	std	Y+1, r24	; 0x01
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	9a 81       	ldd	r25, Y+2	; 0x02
    34ec:	88 30       	cpi	r24, 0x08	; 8
    34ee:	91 05       	cpc	r25, r1
    34f0:	64 f3       	brlt	.-40     	; 0x34ca <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    34f2:	8e 81       	ldd	r24, Y+6	; 0x06
    34f4:	6f 81       	ldd	r22, Y+7	; 0x07
    34f6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    3500:	8f 81       	ldd	r24, Y+7	; 0x07
    3502:	80 31       	cpi	r24, 0x10	; 16
    3504:	48 f0       	brcs	.+18     	; 0x3518 <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3506:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	60 e0       	ldi	r22, 0x00	; 0
    350e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
	}
}
    3518:	28 96       	adiw	r28, 0x08	; 8
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	0f 91       	pop	r16
    352a:	08 95       	ret

0000352c <Keypad_GetPressedKey>:
 *      Author: Mohamed
 */
#include "Keypad.h";

u8 Keypad_GetPressedKey()
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	00 d0       	rcall	.+0      	; 0x3532 <Keypad_GetPressedKey+0x6>
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    3536:	1a 82       	std	Y+2, r1	; 0x02
    3538:	4d c0       	rjmp	.+154    	; 0x35d4 <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    353a:	ea e3       	ldi	r30, 0x3A	; 58
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	8a 81       	ldd	r24, Y+2	; 0x02
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	80 e1       	ldi	r24, 0x10	; 16
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	02 c0       	rjmp	.+4      	; 0x354e <Keypad_GetPressedKey+0x22>
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	2a 95       	dec	r18
    3550:	e2 f7       	brpl	.-8      	; 0x354a <Keypad_GetPressedKey+0x1e>
    3552:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    3554:	eb e3       	ldi	r30, 0x3B	; 59
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	28 2f       	mov	r18, r24
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	80 e1       	ldi	r24, 0x10	; 16
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	02 2e       	mov	r0, r18
    3564:	02 c0       	rjmp	.+4      	; 0x356a <Keypad_GetPressedKey+0x3e>
    3566:	88 0f       	add	r24, r24
    3568:	99 1f       	adc	r25, r25
    356a:	0a 94       	dec	r0
    356c:	e2 f7       	brpl	.-8      	; 0x3566 <Keypad_GetPressedKey+0x3a>
    356e:	80 95       	com	r24
    3570:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    3572:	19 82       	std	Y+1, r1	; 0x01
    3574:	29 c0       	rjmp	.+82     	; 0x35c8 <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    3576:	e9 e3       	ldi	r30, 0x39	; 57
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	88 2f       	mov	r24, r24
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	a9 01       	movw	r20, r18
    3588:	02 c0       	rjmp	.+4      	; 0x358e <Keypad_GetPressedKey+0x62>
    358a:	55 95       	asr	r21
    358c:	47 95       	ror	r20
    358e:	8a 95       	dec	r24
    3590:	e2 f7       	brpl	.-8      	; 0x358a <Keypad_GetPressedKey+0x5e>
    3592:	ca 01       	movw	r24, r20
    3594:	81 70       	andi	r24, 0x01	; 1
    3596:	90 70       	andi	r25, 0x00	; 0
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	99 f4       	brne	.+38     	; 0x35c2 <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	c9 01       	movw	r24, r18
    35a4:	88 0f       	add	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	82 0f       	add	r24, r18
    35aa:	93 1f       	adc	r25, r19
    35ac:	98 2f       	mov	r25, r24
    35ae:	8a 81       	ldd	r24, Y+2	; 0x02
    35b0:	89 0f       	add	r24, r25
    35b2:	8f 5f       	subi	r24, 0xFF	; 255
    35b4:	0e 94 ef 1a 	call	0x35de	; 0x35de <Keypad_4x3>
				}
			}
		}
	}
}
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	cf 91       	pop	r28
    35be:	df 91       	pop	r29
    35c0:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	8f 5f       	subi	r24, 0xFF	; 255
    35c6:	89 83       	std	Y+1, r24	; 0x01
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	84 30       	cpi	r24, 0x04	; 4
    35cc:	a0 f2       	brcs	.-88     	; 0x3576 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey()
{
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	8f 5f       	subi	r24, 0xFF	; 255
    35d2:	8a 83       	std	Y+2, r24	; 0x02
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	83 30       	cpi	r24, 0x03	; 3
    35d8:	08 f4       	brcc	.+2      	; 0x35dc <Keypad_GetPressedKey+0xb0>
    35da:	af cf       	rjmp	.-162    	; 0x353a <Keypad_GetPressedKey+0xe>
    35dc:	ac cf       	rjmp	.-168    	; 0x3536 <Keypad_GetPressedKey+0xa>

000035de <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	00 d0       	rcall	.+0      	; 0x35e4 <Keypad_4x3+0x6>
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <Keypad_4x3+0x8>
    35e6:	cd b7       	in	r28, 0x3d	; 61
    35e8:	de b7       	in	r29, 0x3e	; 62
    35ea:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	28 2f       	mov	r18, r24
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	3c 83       	std	Y+4, r19	; 0x04
    35f4:	2b 83       	std	Y+3, r18	; 0x03
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	9c 81       	ldd	r25, Y+4	; 0x04
    35fa:	8a 30       	cpi	r24, 0x0A	; 10
    35fc:	91 05       	cpc	r25, r1
    35fe:	81 f0       	breq	.+32     	; 0x3620 <Keypad_4x3+0x42>
    3600:	2b 81       	ldd	r18, Y+3	; 0x03
    3602:	3c 81       	ldd	r19, Y+4	; 0x04
    3604:	2a 30       	cpi	r18, 0x0A	; 10
    3606:	31 05       	cpc	r19, r1
    3608:	9c f0       	brlt	.+38     	; 0x3630 <Keypad_4x3+0x52>
    360a:	8b 81       	ldd	r24, Y+3	; 0x03
    360c:	9c 81       	ldd	r25, Y+4	; 0x04
    360e:	8b 30       	cpi	r24, 0x0B	; 11
    3610:	91 05       	cpc	r25, r1
    3612:	49 f0       	breq	.+18     	; 0x3626 <Keypad_4x3+0x48>
    3614:	2b 81       	ldd	r18, Y+3	; 0x03
    3616:	3c 81       	ldd	r19, Y+4	; 0x04
    3618:	2c 30       	cpi	r18, 0x0C	; 12
    361a:	31 05       	cpc	r19, r1
    361c:	31 f0       	breq	.+12     	; 0x362a <Keypad_4x3+0x4c>
    361e:	08 c0       	rjmp	.+16     	; 0x3630 <Keypad_4x3+0x52>
	case 10:
		return '*';
    3620:	3a e2       	ldi	r19, 0x2A	; 42
    3622:	3a 83       	std	Y+2, r19	; 0x02
    3624:	07 c0       	rjmp	.+14     	; 0x3634 <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    3626:	1a 82       	std	Y+2, r1	; 0x02
    3628:	05 c0       	rjmp	.+10     	; 0x3634 <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    362a:	83 e2       	ldi	r24, 0x23	; 35
    362c:	8a 83       	std	Y+2, r24	; 0x02
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <Keypad_4x3+0x56>
	default:
		return Num;
    3630:	99 81       	ldd	r25, Y+1	; 0x01
    3632:	9a 83       	std	Y+2, r25	; 0x02
    3634:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	00 d0       	rcall	.+0      	; 0x364a <DC_Motor_Init+0x6>
    364a:	0f 92       	push	r0
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	8a 83       	std	Y+2, r24	; 0x02
    3652:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	81 30       	cpi	r24, 0x01	; 1
    365c:	81 f4       	brne	.+32     	; 0x367e <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	63 e0       	ldi	r22, 0x03	; 3
    3662:	41 e0       	ldi	r20, 0x01	; 1
    3664:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	65 e0       	ldi	r22, 0x05	; 5
    366c:	41 e0       	ldi	r20, 0x01	; 1
    366e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	64 e0       	ldi	r22, 0x04	; 4
    3676:	41 e0       	ldi	r20, 0x01	; 1
    3678:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
    367c:	14 c0       	rjmp	.+40     	; 0x36a6 <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    367e:	8b 81       	ldd	r24, Y+3	; 0x03
    3680:	81 30       	cpi	r24, 0x01	; 1
    3682:	81 f4       	brne	.+32     	; 0x36a4 <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	62 e0       	ldi	r22, 0x02	; 2
    3688:	41 e0       	ldi	r20, 0x01	; 1
    368a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	61 e0       	ldi	r22, 0x01	; 1
    3692:	41 e0       	ldi	r20, 0x01	; 1
    3694:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	41 e0       	ldi	r20, 0x01	; 1
    369e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
    36a2:	01 c0       	rjmp	.+2      	; 0x36a6 <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    36a4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	29 97       	sbiw	r28, 0x09	; 9
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	8a 83       	std	Y+2, r24	; 0x02
    36ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	39 87       	std	Y+9, r19	; 0x09
    36d8:	28 87       	std	Y+8, r18	; 0x08
    36da:	88 85       	ldd	r24, Y+8	; 0x08
    36dc:	99 85       	ldd	r25, Y+9	; 0x09
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	31 f0       	breq	.+12     	; 0x36ee <DC_Motor_Rotate+0x3a>
    36e2:	28 85       	ldd	r18, Y+8	; 0x08
    36e4:	39 85       	ldd	r19, Y+9	; 0x09
    36e6:	21 30       	cpi	r18, 0x01	; 1
    36e8:	31 05       	cpc	r19, r1
    36ea:	89 f1       	breq	.+98     	; 0x374e <DC_Motor_Rotate+0x9a>
    36ec:	60 c0       	rjmp	.+192    	; 0x37ae <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    36ee:	8b 81       	ldd	r24, Y+3	; 0x03
    36f0:	28 2f       	mov	r18, r24
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	3f 83       	std	Y+7, r19	; 0x07
    36f6:	2e 83       	std	Y+6, r18	; 0x06
    36f8:	8e 81       	ldd	r24, Y+6	; 0x06
    36fa:	9f 81       	ldd	r25, Y+7	; 0x07
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	a9 f0       	breq	.+42     	; 0x372a <DC_Motor_Rotate+0x76>
    3700:	2e 81       	ldd	r18, Y+6	; 0x06
    3702:	3f 81       	ldd	r19, Y+7	; 0x07
    3704:	21 30       	cpi	r18, 0x01	; 1
    3706:	31 05       	cpc	r19, r1
    3708:	01 f5       	brne	.+64     	; 0x374a <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	63 e0       	ldi	r22, 0x03	; 3
    370e:	41 e0       	ldi	r20, 0x01	; 1
    3710:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	65 e0       	ldi	r22, 0x05	; 5
    3718:	41 e0       	ldi	r20, 0x01	; 1
    371a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	64 e0       	ldi	r22, 0x04	; 4
    3722:	40 e0       	ldi	r20, 0x00	; 0
    3724:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
    3728:	43 c0       	rjmp	.+134    	; 0x37b0 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	63 e0       	ldi	r22, 0x03	; 3
    372e:	41 e0       	ldi	r20, 0x01	; 1
    3730:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	65 e0       	ldi	r22, 0x05	; 5
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	64 e0       	ldi	r22, 0x04	; 4
    3742:	41 e0       	ldi	r20, 0x01	; 1
    3744:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
    3748:	33 c0       	rjmp	.+102    	; 0x37b0 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    374a:	19 82       	std	Y+1, r1	; 0x01
    374c:	31 c0       	rjmp	.+98     	; 0x37b0 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    374e:	8b 81       	ldd	r24, Y+3	; 0x03
    3750:	28 2f       	mov	r18, r24
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	3d 83       	std	Y+5, r19	; 0x05
    3756:	2c 83       	std	Y+4, r18	; 0x04
    3758:	8c 81       	ldd	r24, Y+4	; 0x04
    375a:	9d 81       	ldd	r25, Y+5	; 0x05
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	a9 f0       	breq	.+42     	; 0x378a <DC_Motor_Rotate+0xd6>
    3760:	2c 81       	ldd	r18, Y+4	; 0x04
    3762:	3d 81       	ldd	r19, Y+5	; 0x05
    3764:	21 30       	cpi	r18, 0x01	; 1
    3766:	31 05       	cpc	r19, r1
    3768:	01 f5       	brne	.+64     	; 0x37aa <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	62 e0       	ldi	r22, 0x02	; 2
    376e:	41 e0       	ldi	r20, 0x01	; 1
    3770:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	61 e0       	ldi	r22, 0x01	; 1
    3778:	41 e0       	ldi	r20, 0x01	; 1
    377a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
    3788:	13 c0       	rjmp	.+38     	; 0x37b0 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	62 e0       	ldi	r22, 0x02	; 2
    378e:	41 e0       	ldi	r20, 0x01	; 1
    3790:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	61 e0       	ldi	r22, 0x01	; 1
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
    37a8:	03 c0       	rjmp	.+6      	; 0x37b0 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    37aa:	19 82       	std	Y+1, r1	; 0x01
    37ac:	01 c0       	rjmp	.+2      	; 0x37b0 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    37ae:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    37b2:	29 96       	adiw	r28, 0x09	; 9
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	cf 91       	pop	r28
    37c0:	df 91       	pop	r29
    37c2:	08 95       	ret

000037c4 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    37c4:	df 93       	push	r29
    37c6:	cf 93       	push	r28
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <DC_Motor_Stop+0x6>
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	88 23       	and	r24, r24
    37d8:	31 f4       	brne	.+12     	; 0x37e6 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	63 e0       	ldi	r22, 0x03	; 3
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
    37e4:	0a c0       	rjmp	.+20     	; 0x37fa <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    37e6:	8a 81       	ldd	r24, Y+2	; 0x02
    37e8:	81 30       	cpi	r24, 0x01	; 1
    37ea:	31 f4       	brne	.+12     	; 0x37f8 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	62 e0       	ldi	r22, 0x02	; 2
    37f0:	40 e0       	ldi	r20, 0x00	; 0
    37f2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinValue>
    37f6:	01 c0       	rjmp	.+2      	; 0x37fa <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    37f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <First_Screen>:
#define F_CPU 16000000UL

#define Password_Length	6
u8 Local_u8_Flag = 0;

void First_Screen(){
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	2e 97       	sbiw	r28, 0x0e	; 14
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	ac e0       	ldi	r26, 0x0C	; 12
    3820:	b2 e4       	ldi	r27, 0x42	; 66
    3822:	8b 87       	std	Y+11, r24	; 0x0b
    3824:	9c 87       	std	Y+12, r25	; 0x0c
    3826:	ad 87       	std	Y+13, r26	; 0x0d
    3828:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    382a:	6b 85       	ldd	r22, Y+11	; 0x0b
    382c:	7c 85       	ldd	r23, Y+12	; 0x0c
    382e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3830:	9e 85       	ldd	r25, Y+14	; 0x0e
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	4a e7       	ldi	r20, 0x7A	; 122
    3838:	55 e4       	ldi	r21, 0x45	; 69
    383a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	8f 83       	std	Y+7, r24	; 0x07
    3844:	98 87       	std	Y+8, r25	; 0x08
    3846:	a9 87       	std	Y+9, r26	; 0x09
    3848:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    384a:	6f 81       	ldd	r22, Y+7	; 0x07
    384c:	78 85       	ldd	r23, Y+8	; 0x08
    384e:	89 85       	ldd	r24, Y+9	; 0x09
    3850:	9a 85       	ldd	r25, Y+10	; 0x0a
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e8       	ldi	r20, 0x80	; 128
    3858:	5f e3       	ldi	r21, 0x3F	; 63
    385a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    385e:	88 23       	and	r24, r24
    3860:	2c f4       	brge	.+10     	; 0x386c <First_Screen+0x66>
		__ticks = 1;
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	9e 83       	std	Y+6, r25	; 0x06
    3868:	8d 83       	std	Y+5, r24	; 0x05
    386a:	3f c0       	rjmp	.+126    	; 0x38ea <First_Screen+0xe4>
	else if (__tmp > 65535)
    386c:	6f 81       	ldd	r22, Y+7	; 0x07
    386e:	78 85       	ldd	r23, Y+8	; 0x08
    3870:	89 85       	ldd	r24, Y+9	; 0x09
    3872:	9a 85       	ldd	r25, Y+10	; 0x0a
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	3f ef       	ldi	r19, 0xFF	; 255
    3878:	4f e7       	ldi	r20, 0x7F	; 127
    387a:	57 e4       	ldi	r21, 0x47	; 71
    387c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3880:	18 16       	cp	r1, r24
    3882:	4c f5       	brge	.+82     	; 0x38d6 <First_Screen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3884:	6b 85       	ldd	r22, Y+11	; 0x0b
    3886:	7c 85       	ldd	r23, Y+12	; 0x0c
    3888:	8d 85       	ldd	r24, Y+13	; 0x0d
    388a:	9e 85       	ldd	r25, Y+14	; 0x0e
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 e2       	ldi	r20, 0x20	; 32
    3892:	51 e4       	ldi	r21, 0x41	; 65
    3894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	bc 01       	movw	r22, r24
    389e:	cd 01       	movw	r24, r26
    38a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
    38ac:	0f c0       	rjmp	.+30     	; 0x38cc <First_Screen+0xc6>
    38ae:	80 e9       	ldi	r24, 0x90	; 144
    38b0:	91 e0       	ldi	r25, 0x01	; 1
    38b2:	9c 83       	std	Y+4, r25	; 0x04
    38b4:	8b 83       	std	Y+3, r24	; 0x03
    38b6:	8b 81       	ldd	r24, Y+3	; 0x03
    38b8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	f1 f7       	brne	.-4      	; 0x38ba <First_Screen+0xb4>
    38be:	9c 83       	std	Y+4, r25	; 0x04
    38c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c2:	8d 81       	ldd	r24, Y+5	; 0x05
    38c4:	9e 81       	ldd	r25, Y+6	; 0x06
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	9e 83       	std	Y+6, r25	; 0x06
    38ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38cc:	8d 81       	ldd	r24, Y+5	; 0x05
    38ce:	9e 81       	ldd	r25, Y+6	; 0x06
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	69 f7       	brne	.-38     	; 0x38ae <First_Screen+0xa8>
    38d4:	14 c0       	rjmp	.+40     	; 0x38fe <First_Screen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d6:	6f 81       	ldd	r22, Y+7	; 0x07
    38d8:	78 85       	ldd	r23, Y+8	; 0x08
    38da:	89 85       	ldd	r24, Y+9	; 0x09
    38dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	9e 83       	std	Y+6, r25	; 0x06
    38e8:	8d 83       	std	Y+5, r24	; 0x05
    38ea:	8d 81       	ldd	r24, Y+5	; 0x05
    38ec:	9e 81       	ldd	r25, Y+6	; 0x06
    38ee:	9a 83       	std	Y+2, r25	; 0x02
    38f0:	89 83       	std	Y+1, r24	; 0x01
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
    38f6:	01 97       	sbiw	r24, 0x01	; 1
    38f8:	f1 f7       	brne	.-4      	; 0x38f6 <First_Screen+0xf0>
    38fa:	9a 83       	std	Y+2, r25	; 0x02
    38fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_ClearScreen();
    38fe:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
	LCD_displayString("1-DC Motor");
    3902:	80 e6       	ldi	r24, 0x60	; 96
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
	LCD_GoToXY(1, 0);
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
	LCD_displayString("2-Stepper");
    3912:	8b e6       	ldi	r24, 0x6B	; 107
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
	LCD_GoToXY(1, 10);
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	6a e0       	ldi	r22, 0x0A	; 10
    391e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
	LCD_displayString("3-Exit");
    3922:	85 e7       	ldi	r24, 0x75	; 117
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
}
    392a:	2e 96       	adiw	r28, 0x0e	; 14
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <Second_Screen>:

void Second_Screen(){
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    3944:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
	LCD_displayString("1-CW Motor");
    3948:	8c e7       	ldi	r24, 0x7C	; 124
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
	LCD_GoToXY(1, 0);
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	60 e0       	ldi	r22, 0x00	; 0
    3954:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
	LCD_displayString("2-CCW Motor");
    3958:	87 e8       	ldi	r24, 0x87	; 135
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
	LCD_GoToXY(0, 10);
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	6a e0       	ldi	r22, 0x0A	; 10
    3964:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
	LCD_displayString("3-back");
    3968:	83 e9       	ldi	r24, 0x93	; 147
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
}
    3970:	cf 91       	pop	r28
    3972:	df 91       	pop	r29
    3974:	08 95       	ret

00003976 <StepperAngles_Screen>:

void StepperAngles_Screen(){
    3976:	df 93       	push	r29
    3978:	cf 93       	push	r28
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    397e:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>

	LCD_displayString("1-90");
    3982:	8a e9       	ldi	r24, 0x9A	; 154
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>

	LCD_GoToXY(1, 0);
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
	LCD_displayString("2-180");
    3992:	8f e9       	ldi	r24, 0x9F	; 159
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
}
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <StepperDirection_Screen>:

void StepperDirection_Screen(){
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    39a8:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>

	LCD_displayString("1-CW");
    39ac:	85 ea       	ldi	r24, 0xA5	; 165
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>

	LCD_GoToXY(1, 0);
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
	LCD_displayString("2-CCW");
    39bc:	8a ea       	ldi	r24, 0xAA	; 170
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
}
    39c4:	cf 91       	pop	r28
    39c6:	df 91       	pop	r29
    39c8:	08 95       	ret

000039ca <main>:


void Tog_Led(void);
void EXTI_System(void);

int main(){
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62

	DC_Motor_Init(1, 2);
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	62 e0       	ldi	r22, 0x02	; 2
    39d6:	0e 94 22 1b 	call	0x3644	; 0x3644 <DC_Motor_Init>
	Stepper_Init();
    39da:	0e 94 b9 12 	call	0x2572	; 0x2572 <Stepper_Init>


	LCD_setPortDirection(0, 0);
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_setPortDirection>
	DIO_u8SetPinDirection(1, 2, 0);
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	62 e0       	ldi	r22, 0x02	; 2
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(1, 1);
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	61 e0       	ldi	r22, 0x01	; 1
    39f8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <DIO_u8SetPortDirection>
	LCD_setPortDirection(2, 1);
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	61 e0       	ldi	r22, 0x01	; 1
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_setPortDirection>
	LCD_setPortDirection(3, 1);
    3a08:	83 e0       	ldi	r24, 0x03	; 3
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	61 e0       	ldi	r22, 0x01	; 1
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	0e 94 9c 0a 	call	0x1538	; 0x1538 <LCD_setPortDirection>
	DIO_u8SetPinDirection(3, 3, 0);
    3a14:	83 e0       	ldi	r24, 0x03	; 3
    3a16:	63 e0       	ldi	r22, 0x03	; 3
    3a18:	40 e0       	ldi	r20, 0x00	; 0
    3a1a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_u8SetPinDirection>
	LCD_init();
    3a1e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <LCD_init>


	EXTI_voidEnable(1, 2);
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	62 e0       	ldi	r22, 0x02	; 2
    3a26:	0e 94 be 06 	call	0xd7c	; 0xd7c <EXTI_voidEnable>
	EXTI_voidEnable_GIE();
    3a2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <EXTI_voidEnable_GIE>

	setCallBack(&EXTI_System, 1);
    3a2e:	8e e3       	ldi	r24, 0x3E	; 62
    3a30:	9d e1       	ldi	r25, 0x1D	; 29
    3a32:	61 e0       	ldi	r22, 0x01	; 1
    3a34:	0e 94 bf 05 	call	0xb7e	; 0xb7e <setCallBack>
    3a38:	ff cf       	rjmp	.-2      	; 0x3a38 <main+0x6e>

00003a3a <Tog_Led>:
	while(1);
	return 0;
}


void Tog_Led(void){
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8_Flag = 0;
	if(Local_u8_Flag == 1){
    3a42:	80 91 14 01 	lds	r24, 0x0114
    3a46:	81 30       	cpi	r24, 0x01	; 1
    3a48:	59 f4       	brne	.+22     	; 0x3a60 <Tog_Led+0x26>
		LCD_setPinValue(0, 0, 1);
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	60 e0       	ldi	r22, 0x00	; 0
    3a50:	70 e0       	ldi	r23, 0x00	; 0
    3a52:	41 e0       	ldi	r20, 0x01	; 1
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_setPinValue>
		Local_u8_Flag = 0;
    3a5a:	10 92 14 01 	sts	0x0114, r1
    3a5e:	0b c0       	rjmp	.+22     	; 0x3a76 <Tog_Led+0x3c>
	}
	else{
		LCD_setPinValue(0, 0, 0);
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	60 e0       	ldi	r22, 0x00	; 0
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	40 e0       	ldi	r20, 0x00	; 0
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_setPinValue>
		Local_u8_Flag = 1;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	80 93 14 01 	sts	0x0114, r24
	}
}
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	08 95       	ret

00003a7c <EXTI_System>:


void EXTI_System(void){
    3a7c:	0f 93       	push	r16
    3a7e:	1f 93       	push	r17
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	c6 50       	subi	r28, 0x06	; 6
    3a8a:	d1 40       	sbci	r29, 0x01	; 1
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
	u8 key_Pressed;

	if(Local_u8_Flag == 0){
    3a96:	80 91 12 01 	lds	r24, 0x0112
    3a9a:	88 23       	and	r24, r24
    3a9c:	11 f0       	breq	.+4      	; 0x3aa2 <EXTI_System+0x26>
    3a9e:	0c 94 34 2b 	jmp	0x5668	; 0x5668 <EXTI_System+0x1bec>
		Local_u8_Flag = 1;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	80 93 12 01 	sts	0x0112, r24
		LCD_String_xy(0, 0, "Enter Password", &count);
    3aa8:	20 eb       	ldi	r18, 0xB0	; 176
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	ef e1       	ldi	r30, 0x1F	; 31
    3aae:	f1 e0       	ldi	r31, 0x01	; 1
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	60 e0       	ldi	r22, 0x00	; 0
    3ab4:	a9 01       	movw	r20, r18
    3ab6:	9f 01       	movw	r18, r30
    3ab8:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_String_xy>
		LCD_GoToXY(1, 0);
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>

		while(1){
			key_Pressed = Keypad_GetPressedKey();
    3ac4:	0e 94 96 1a 	call	0x352c	; 0x352c <Keypad_GetPressedKey>
    3ac8:	fe 01       	movw	r30, r28
    3aca:	ea 5f       	subi	r30, 0xFA	; 250
    3acc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ace:	80 83       	st	Z, r24

			if(key_Pressed == 1){
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	ea 5f       	subi	r30, 0xFA	; 250
    3ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad6:	80 81       	ld	r24, Z
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	09 f0       	breq	.+2      	; 0x3ade <EXTI_System+0x62>
    3adc:	c5 c0       	rjmp	.+394    	; 0x3c68 <EXTI_System+0x1ec>
				LCD_displayCharacter('*');
    3ade:	8a e2       	ldi	r24, 0x2A	; 42
    3ae0:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '1';
    3ae4:	80 91 13 01 	lds	r24, 0x0113
    3ae8:	88 2f       	mov	r24, r24
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	fc 01       	movw	r30, r24
    3aee:	eb 5e       	subi	r30, 0xEB	; 235
    3af0:	fe 4f       	sbci	r31, 0xFE	; 254
    3af2:	81 e3       	ldi	r24, 0x31	; 49
    3af4:	80 83       	st	Z, r24
				c++;
    3af6:	80 91 13 01 	lds	r24, 0x0113
    3afa:	8f 5f       	subi	r24, 0xFF	; 255
    3afc:	80 93 13 01 	sts	0x0113, r24
    3b00:	fe 01       	movw	r30, r28
    3b02:	e7 50       	subi	r30, 0x07	; 7
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	ac e0       	ldi	r26, 0x0C	; 12
    3b0c:	b2 e4       	ldi	r27, 0x42	; 66
    3b0e:	80 83       	st	Z, r24
    3b10:	91 83       	std	Z+1, r25	; 0x01
    3b12:	a2 83       	std	Z+2, r26	; 0x02
    3b14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b16:	8e 01       	movw	r16, r28
    3b18:	0b 50       	subi	r16, 0x0B	; 11
    3b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e7 50       	subi	r30, 0x07	; 7
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	60 81       	ld	r22, Z
    3b24:	71 81       	ldd	r23, Z+1	; 0x01
    3b26:	82 81       	ldd	r24, Z+2	; 0x02
    3b28:	93 81       	ldd	r25, Z+3	; 0x03
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	4a e7       	ldi	r20, 0x7A	; 122
    3b30:	55 e4       	ldi	r21, 0x45	; 69
    3b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	80 83       	st	Z, r24
    3b3e:	91 83       	std	Z+1, r25	; 0x01
    3b40:	a2 83       	std	Z+2, r26	; 0x02
    3b42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b44:	fe 01       	movw	r30, r28
    3b46:	eb 50       	subi	r30, 0x0B	; 11
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	60 81       	ld	r22, Z
    3b4c:	71 81       	ldd	r23, Z+1	; 0x01
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	93 81       	ldd	r25, Z+3	; 0x03
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	40 e8       	ldi	r20, 0x80	; 128
    3b58:	5f e3       	ldi	r21, 0x3F	; 63
    3b5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b5e:	88 23       	and	r24, r24
    3b60:	44 f4       	brge	.+16     	; 0x3b72 <EXTI_System+0xf6>
		__ticks = 1;
    3b62:	fe 01       	movw	r30, r28
    3b64:	ed 50       	subi	r30, 0x0D	; 13
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	91 83       	std	Z+1, r25	; 0x01
    3b6e:	80 83       	st	Z, r24
    3b70:	64 c0       	rjmp	.+200    	; 0x3c3a <EXTI_System+0x1be>
	else if (__tmp > 65535)
    3b72:	fe 01       	movw	r30, r28
    3b74:	eb 50       	subi	r30, 0x0B	; 11
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	60 81       	ld	r22, Z
    3b7a:	71 81       	ldd	r23, Z+1	; 0x01
    3b7c:	82 81       	ldd	r24, Z+2	; 0x02
    3b7e:	93 81       	ldd	r25, Z+3	; 0x03
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	3f ef       	ldi	r19, 0xFF	; 255
    3b84:	4f e7       	ldi	r20, 0x7F	; 127
    3b86:	57 e4       	ldi	r21, 0x47	; 71
    3b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b8c:	18 16       	cp	r1, r24
    3b8e:	0c f0       	brlt	.+2      	; 0x3b92 <EXTI_System+0x116>
    3b90:	43 c0       	rjmp	.+134    	; 0x3c18 <EXTI_System+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b92:	fe 01       	movw	r30, r28
    3b94:	e7 50       	subi	r30, 0x07	; 7
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	60 81       	ld	r22, Z
    3b9a:	71 81       	ldd	r23, Z+1	; 0x01
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e2       	ldi	r20, 0x20	; 32
    3ba6:	51 e4       	ldi	r21, 0x41	; 65
    3ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	8e 01       	movw	r16, r28
    3bb2:	0d 50       	subi	r16, 0x0D	; 13
    3bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb6:	bc 01       	movw	r22, r24
    3bb8:	cd 01       	movw	r24, r26
    3bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	f8 01       	movw	r30, r16
    3bc4:	91 83       	std	Z+1, r25	; 0x01
    3bc6:	80 83       	st	Z, r24
    3bc8:	1f c0       	rjmp	.+62     	; 0x3c08 <EXTI_System+0x18c>
    3bca:	fe 01       	movw	r30, r28
    3bcc:	ef 50       	subi	r30, 0x0F	; 15
    3bce:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd0:	80 e9       	ldi	r24, 0x90	; 144
    3bd2:	91 e0       	ldi	r25, 0x01	; 1
    3bd4:	91 83       	std	Z+1, r25	; 0x01
    3bd6:	80 83       	st	Z, r24
    3bd8:	fe 01       	movw	r30, r28
    3bda:	ef 50       	subi	r30, 0x0F	; 15
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	80 81       	ld	r24, Z
    3be0:	91 81       	ldd	r25, Z+1	; 0x01
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	f1 f7       	brne	.-4      	; 0x3be2 <EXTI_System+0x166>
    3be6:	fe 01       	movw	r30, r28
    3be8:	ef 50       	subi	r30, 0x0F	; 15
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf0:	de 01       	movw	r26, r28
    3bf2:	ad 50       	subi	r26, 0x0D	; 13
    3bf4:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	ed 50       	subi	r30, 0x0D	; 13
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	80 81       	ld	r24, Z
    3bfe:	91 81       	ldd	r25, Z+1	; 0x01
    3c00:	01 97       	sbiw	r24, 0x01	; 1
    3c02:	11 96       	adiw	r26, 0x01	; 1
    3c04:	9c 93       	st	X, r25
    3c06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c08:	fe 01       	movw	r30, r28
    3c0a:	ed 50       	subi	r30, 0x0D	; 13
    3c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0e:	80 81       	ld	r24, Z
    3c10:	91 81       	ldd	r25, Z+1	; 0x01
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	d1 f6       	brne	.-76     	; 0x3bca <EXTI_System+0x14e>
    3c16:	28 c0       	rjmp	.+80     	; 0x3c68 <EXTI_System+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c18:	8e 01       	movw	r16, r28
    3c1a:	0d 50       	subi	r16, 0x0D	; 13
    3c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1e:	fe 01       	movw	r30, r28
    3c20:	eb 50       	subi	r30, 0x0B	; 11
    3c22:	ff 4f       	sbci	r31, 0xFF	; 255
    3c24:	60 81       	ld	r22, Z
    3c26:	71 81       	ldd	r23, Z+1	; 0x01
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	f8 01       	movw	r30, r16
    3c36:	91 83       	std	Z+1, r25	; 0x01
    3c38:	80 83       	st	Z, r24
    3c3a:	de 01       	movw	r26, r28
    3c3c:	a1 51       	subi	r26, 0x11	; 17
    3c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c40:	fe 01       	movw	r30, r28
    3c42:	ed 50       	subi	r30, 0x0D	; 13
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 81       	ld	r24, Z
    3c48:	91 81       	ldd	r25, Z+1	; 0x01
    3c4a:	11 96       	adiw	r26, 0x01	; 1
    3c4c:	9c 93       	st	X, r25
    3c4e:	8e 93       	st	-X, r24
    3c50:	fe 01       	movw	r30, r28
    3c52:	e1 51       	subi	r30, 0x11	; 17
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 81       	ld	r24, Z
    3c58:	91 81       	ldd	r25, Z+1	; 0x01
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	f1 f7       	brne	.-4      	; 0x3c5a <EXTI_System+0x1de>
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e1 51       	subi	r30, 0x11	; 17
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	91 83       	std	Z+1, r25	; 0x01
    3c66:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 2){
    3c68:	fe 01       	movw	r30, r28
    3c6a:	ea 5f       	subi	r30, 0xFA	; 250
    3c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6e:	80 81       	ld	r24, Z
    3c70:	82 30       	cpi	r24, 0x02	; 2
    3c72:	09 f0       	breq	.+2      	; 0x3c76 <EXTI_System+0x1fa>
    3c74:	c5 c0       	rjmp	.+394    	; 0x3e00 <EXTI_System+0x384>
				LCD_displayCharacter('*');
    3c76:	8a e2       	ldi	r24, 0x2A	; 42
    3c78:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '2';
    3c7c:	80 91 13 01 	lds	r24, 0x0113
    3c80:	88 2f       	mov	r24, r24
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	fc 01       	movw	r30, r24
    3c86:	eb 5e       	subi	r30, 0xEB	; 235
    3c88:	fe 4f       	sbci	r31, 0xFE	; 254
    3c8a:	82 e3       	ldi	r24, 0x32	; 50
    3c8c:	80 83       	st	Z, r24
				c++;
    3c8e:	80 91 13 01 	lds	r24, 0x0113
    3c92:	8f 5f       	subi	r24, 0xFF	; 255
    3c94:	80 93 13 01 	sts	0x0113, r24
    3c98:	fe 01       	movw	r30, r28
    3c9a:	e5 51       	subi	r30, 0x15	; 21
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	ac e0       	ldi	r26, 0x0C	; 12
    3ca4:	b2 e4       	ldi	r27, 0x42	; 66
    3ca6:	80 83       	st	Z, r24
    3ca8:	91 83       	std	Z+1, r25	; 0x01
    3caa:	a2 83       	std	Z+2, r26	; 0x02
    3cac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cae:	8e 01       	movw	r16, r28
    3cb0:	09 51       	subi	r16, 0x19	; 25
    3cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	e5 51       	subi	r30, 0x15	; 21
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	60 81       	ld	r22, Z
    3cbc:	71 81       	ldd	r23, Z+1	; 0x01
    3cbe:	82 81       	ldd	r24, Z+2	; 0x02
    3cc0:	93 81       	ldd	r25, Z+3	; 0x03
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	4a e7       	ldi	r20, 0x7A	; 122
    3cc8:	55 e4       	ldi	r21, 0x45	; 69
    3cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	80 83       	st	Z, r24
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	a2 83       	std	Z+2, r26	; 0x02
    3cda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cdc:	fe 01       	movw	r30, r28
    3cde:	e9 51       	subi	r30, 0x19	; 25
    3ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce2:	60 81       	ld	r22, Z
    3ce4:	71 81       	ldd	r23, Z+1	; 0x01
    3ce6:	82 81       	ldd	r24, Z+2	; 0x02
    3ce8:	93 81       	ldd	r25, Z+3	; 0x03
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e8       	ldi	r20, 0x80	; 128
    3cf0:	5f e3       	ldi	r21, 0x3F	; 63
    3cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cf6:	88 23       	and	r24, r24
    3cf8:	44 f4       	brge	.+16     	; 0x3d0a <EXTI_System+0x28e>
		__ticks = 1;
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	eb 51       	subi	r30, 0x1B	; 27
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	80 83       	st	Z, r24
    3d08:	64 c0       	rjmp	.+200    	; 0x3dd2 <EXTI_System+0x356>
	else if (__tmp > 65535)
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	e9 51       	subi	r30, 0x19	; 25
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	60 81       	ld	r22, Z
    3d12:	71 81       	ldd	r23, Z+1	; 0x01
    3d14:	82 81       	ldd	r24, Z+2	; 0x02
    3d16:	93 81       	ldd	r25, Z+3	; 0x03
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	3f ef       	ldi	r19, 0xFF	; 255
    3d1c:	4f e7       	ldi	r20, 0x7F	; 127
    3d1e:	57 e4       	ldi	r21, 0x47	; 71
    3d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d24:	18 16       	cp	r1, r24
    3d26:	0c f0       	brlt	.+2      	; 0x3d2a <EXTI_System+0x2ae>
    3d28:	43 c0       	rjmp	.+134    	; 0x3db0 <EXTI_System+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e5 51       	subi	r30, 0x15	; 21
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	60 81       	ld	r22, Z
    3d32:	71 81       	ldd	r23, Z+1	; 0x01
    3d34:	82 81       	ldd	r24, Z+2	; 0x02
    3d36:	93 81       	ldd	r25, Z+3	; 0x03
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e2       	ldi	r20, 0x20	; 32
    3d3e:	51 e4       	ldi	r21, 0x41	; 65
    3d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	8e 01       	movw	r16, r28
    3d4a:	0b 51       	subi	r16, 0x1B	; 27
    3d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4e:	bc 01       	movw	r22, r24
    3d50:	cd 01       	movw	r24, r26
    3d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	f8 01       	movw	r30, r16
    3d5c:	91 83       	std	Z+1, r25	; 0x01
    3d5e:	80 83       	st	Z, r24
    3d60:	1f c0       	rjmp	.+62     	; 0x3da0 <EXTI_System+0x324>
    3d62:	fe 01       	movw	r30, r28
    3d64:	ed 51       	subi	r30, 0x1D	; 29
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	80 e9       	ldi	r24, 0x90	; 144
    3d6a:	91 e0       	ldi	r25, 0x01	; 1
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	80 83       	st	Z, r24
    3d70:	fe 01       	movw	r30, r28
    3d72:	ed 51       	subi	r30, 0x1D	; 29
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <EXTI_System+0x2fe>
    3d7e:	fe 01       	movw	r30, r28
    3d80:	ed 51       	subi	r30, 0x1D	; 29
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	91 83       	std	Z+1, r25	; 0x01
    3d86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d88:	de 01       	movw	r26, r28
    3d8a:	ab 51       	subi	r26, 0x1B	; 27
    3d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d8e:	fe 01       	movw	r30, r28
    3d90:	eb 51       	subi	r30, 0x1B	; 27
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255
    3d94:	80 81       	ld	r24, Z
    3d96:	91 81       	ldd	r25, Z+1	; 0x01
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	11 96       	adiw	r26, 0x01	; 1
    3d9c:	9c 93       	st	X, r25
    3d9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da0:	fe 01       	movw	r30, r28
    3da2:	eb 51       	subi	r30, 0x1B	; 27
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	80 81       	ld	r24, Z
    3da8:	91 81       	ldd	r25, Z+1	; 0x01
    3daa:	00 97       	sbiw	r24, 0x00	; 0
    3dac:	d1 f6       	brne	.-76     	; 0x3d62 <EXTI_System+0x2e6>
    3dae:	28 c0       	rjmp	.+80     	; 0x3e00 <EXTI_System+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db0:	8e 01       	movw	r16, r28
    3db2:	0b 51       	subi	r16, 0x1B	; 27
    3db4:	1f 4f       	sbci	r17, 0xFF	; 255
    3db6:	fe 01       	movw	r30, r28
    3db8:	e9 51       	subi	r30, 0x19	; 25
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	60 81       	ld	r22, Z
    3dbe:	71 81       	ldd	r23, Z+1	; 0x01
    3dc0:	82 81       	ldd	r24, Z+2	; 0x02
    3dc2:	93 81       	ldd	r25, Z+3	; 0x03
    3dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	f8 01       	movw	r30, r16
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	80 83       	st	Z, r24
    3dd2:	de 01       	movw	r26, r28
    3dd4:	af 51       	subi	r26, 0x1F	; 31
    3dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd8:	fe 01       	movw	r30, r28
    3dda:	eb 51       	subi	r30, 0x1B	; 27
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	80 81       	ld	r24, Z
    3de0:	91 81       	ldd	r25, Z+1	; 0x01
    3de2:	11 96       	adiw	r26, 0x01	; 1
    3de4:	9c 93       	st	X, r25
    3de6:	8e 93       	st	-X, r24
    3de8:	fe 01       	movw	r30, r28
    3dea:	ef 51       	subi	r30, 0x1F	; 31
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	80 81       	ld	r24, Z
    3df0:	91 81       	ldd	r25, Z+1	; 0x01
    3df2:	01 97       	sbiw	r24, 0x01	; 1
    3df4:	f1 f7       	brne	.-4      	; 0x3df2 <EXTI_System+0x376>
    3df6:	fe 01       	movw	r30, r28
    3df8:	ef 51       	subi	r30, 0x1F	; 31
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	91 83       	std	Z+1, r25	; 0x01
    3dfe:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 3){
    3e00:	fe 01       	movw	r30, r28
    3e02:	ea 5f       	subi	r30, 0xFA	; 250
    3e04:	fe 4f       	sbci	r31, 0xFE	; 254
    3e06:	80 81       	ld	r24, Z
    3e08:	83 30       	cpi	r24, 0x03	; 3
    3e0a:	09 f0       	breq	.+2      	; 0x3e0e <EXTI_System+0x392>
    3e0c:	c5 c0       	rjmp	.+394    	; 0x3f98 <EXTI_System+0x51c>
				LCD_displayCharacter('*');
    3e0e:	8a e2       	ldi	r24, 0x2A	; 42
    3e10:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '3';
    3e14:	80 91 13 01 	lds	r24, 0x0113
    3e18:	88 2f       	mov	r24, r24
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	eb 5e       	subi	r30, 0xEB	; 235
    3e20:	fe 4f       	sbci	r31, 0xFE	; 254
    3e22:	83 e3       	ldi	r24, 0x33	; 51
    3e24:	80 83       	st	Z, r24
				c++;
    3e26:	80 91 13 01 	lds	r24, 0x0113
    3e2a:	8f 5f       	subi	r24, 0xFF	; 255
    3e2c:	80 93 13 01 	sts	0x0113, r24
    3e30:	fe 01       	movw	r30, r28
    3e32:	e3 52       	subi	r30, 0x23	; 35
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	80 e0       	ldi	r24, 0x00	; 0
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	ac e0       	ldi	r26, 0x0C	; 12
    3e3c:	b2 e4       	ldi	r27, 0x42	; 66
    3e3e:	80 83       	st	Z, r24
    3e40:	91 83       	std	Z+1, r25	; 0x01
    3e42:	a2 83       	std	Z+2, r26	; 0x02
    3e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e46:	8e 01       	movw	r16, r28
    3e48:	07 52       	subi	r16, 0x27	; 39
    3e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e3 52       	subi	r30, 0x23	; 35
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	60 81       	ld	r22, Z
    3e54:	71 81       	ldd	r23, Z+1	; 0x01
    3e56:	82 81       	ldd	r24, Z+2	; 0x02
    3e58:	93 81       	ldd	r25, Z+3	; 0x03
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	4a e7       	ldi	r20, 0x7A	; 122
    3e60:	55 e4       	ldi	r21, 0x45	; 69
    3e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	f8 01       	movw	r30, r16
    3e6c:	80 83       	st	Z, r24
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	a2 83       	std	Z+2, r26	; 0x02
    3e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e74:	fe 01       	movw	r30, r28
    3e76:	e7 52       	subi	r30, 0x27	; 39
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	60 81       	ld	r22, Z
    3e7c:	71 81       	ldd	r23, Z+1	; 0x01
    3e7e:	82 81       	ldd	r24, Z+2	; 0x02
    3e80:	93 81       	ldd	r25, Z+3	; 0x03
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e8       	ldi	r20, 0x80	; 128
    3e88:	5f e3       	ldi	r21, 0x3F	; 63
    3e8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e8e:	88 23       	and	r24, r24
    3e90:	44 f4       	brge	.+16     	; 0x3ea2 <EXTI_System+0x426>
		__ticks = 1;
    3e92:	fe 01       	movw	r30, r28
    3e94:	e9 52       	subi	r30, 0x29	; 41
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	80 83       	st	Z, r24
    3ea0:	64 c0       	rjmp	.+200    	; 0x3f6a <EXTI_System+0x4ee>
	else if (__tmp > 65535)
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	e7 52       	subi	r30, 0x27	; 39
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	60 81       	ld	r22, Z
    3eaa:	71 81       	ldd	r23, Z+1	; 0x01
    3eac:	82 81       	ldd	r24, Z+2	; 0x02
    3eae:	93 81       	ldd	r25, Z+3	; 0x03
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	3f ef       	ldi	r19, 0xFF	; 255
    3eb4:	4f e7       	ldi	r20, 0x7F	; 127
    3eb6:	57 e4       	ldi	r21, 0x47	; 71
    3eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ebc:	18 16       	cp	r1, r24
    3ebe:	0c f0       	brlt	.+2      	; 0x3ec2 <EXTI_System+0x446>
    3ec0:	43 c0       	rjmp	.+134    	; 0x3f48 <EXTI_System+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e3 52       	subi	r30, 0x23	; 35
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	60 81       	ld	r22, Z
    3eca:	71 81       	ldd	r23, Z+1	; 0x01
    3ecc:	82 81       	ldd	r24, Z+2	; 0x02
    3ece:	93 81       	ldd	r25, Z+3	; 0x03
    3ed0:	20 e0       	ldi	r18, 0x00	; 0
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	40 e2       	ldi	r20, 0x20	; 32
    3ed6:	51 e4       	ldi	r21, 0x41	; 65
    3ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	8e 01       	movw	r16, r28
    3ee2:	09 52       	subi	r16, 0x29	; 41
    3ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee6:	bc 01       	movw	r22, r24
    3ee8:	cd 01       	movw	r24, r26
    3eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	f8 01       	movw	r30, r16
    3ef4:	91 83       	std	Z+1, r25	; 0x01
    3ef6:	80 83       	st	Z, r24
    3ef8:	1f c0       	rjmp	.+62     	; 0x3f38 <EXTI_System+0x4bc>
    3efa:	fe 01       	movw	r30, r28
    3efc:	eb 52       	subi	r30, 0x2B	; 43
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 e9       	ldi	r24, 0x90	; 144
    3f02:	91 e0       	ldi	r25, 0x01	; 1
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	80 83       	st	Z, r24
    3f08:	fe 01       	movw	r30, r28
    3f0a:	eb 52       	subi	r30, 0x2B	; 43
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	80 81       	ld	r24, Z
    3f10:	91 81       	ldd	r25, Z+1	; 0x01
    3f12:	01 97       	sbiw	r24, 0x01	; 1
    3f14:	f1 f7       	brne	.-4      	; 0x3f12 <EXTI_System+0x496>
    3f16:	fe 01       	movw	r30, r28
    3f18:	eb 52       	subi	r30, 0x2B	; 43
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f20:	de 01       	movw	r26, r28
    3f22:	a9 52       	subi	r26, 0x29	; 41
    3f24:	bf 4f       	sbci	r27, 0xFF	; 255
    3f26:	fe 01       	movw	r30, r28
    3f28:	e9 52       	subi	r30, 0x29	; 41
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	80 81       	ld	r24, Z
    3f2e:	91 81       	ldd	r25, Z+1	; 0x01
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	11 96       	adiw	r26, 0x01	; 1
    3f34:	9c 93       	st	X, r25
    3f36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e9 52       	subi	r30, 0x29	; 41
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	80 81       	ld	r24, Z
    3f40:	91 81       	ldd	r25, Z+1	; 0x01
    3f42:	00 97       	sbiw	r24, 0x00	; 0
    3f44:	d1 f6       	brne	.-76     	; 0x3efa <EXTI_System+0x47e>
    3f46:	28 c0       	rjmp	.+80     	; 0x3f98 <EXTI_System+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f48:	8e 01       	movw	r16, r28
    3f4a:	09 52       	subi	r16, 0x29	; 41
    3f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e7 52       	subi	r30, 0x27	; 39
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	60 81       	ld	r22, Z
    3f56:	71 81       	ldd	r23, Z+1	; 0x01
    3f58:	82 81       	ldd	r24, Z+2	; 0x02
    3f5a:	93 81       	ldd	r25, Z+3	; 0x03
    3f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f60:	dc 01       	movw	r26, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	f8 01       	movw	r30, r16
    3f66:	91 83       	std	Z+1, r25	; 0x01
    3f68:	80 83       	st	Z, r24
    3f6a:	de 01       	movw	r26, r28
    3f6c:	ad 52       	subi	r26, 0x2D	; 45
    3f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f70:	fe 01       	movw	r30, r28
    3f72:	e9 52       	subi	r30, 0x29	; 41
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	80 81       	ld	r24, Z
    3f78:	91 81       	ldd	r25, Z+1	; 0x01
    3f7a:	11 96       	adiw	r26, 0x01	; 1
    3f7c:	9c 93       	st	X, r25
    3f7e:	8e 93       	st	-X, r24
    3f80:	fe 01       	movw	r30, r28
    3f82:	ed 52       	subi	r30, 0x2D	; 45
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	80 81       	ld	r24, Z
    3f88:	91 81       	ldd	r25, Z+1	; 0x01
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	f1 f7       	brne	.-4      	; 0x3f8a <EXTI_System+0x50e>
    3f8e:	fe 01       	movw	r30, r28
    3f90:	ed 52       	subi	r30, 0x2D	; 45
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	91 83       	std	Z+1, r25	; 0x01
    3f96:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 4){
    3f98:	fe 01       	movw	r30, r28
    3f9a:	ea 5f       	subi	r30, 0xFA	; 250
    3f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f9e:	80 81       	ld	r24, Z
    3fa0:	84 30       	cpi	r24, 0x04	; 4
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <EXTI_System+0x52a>
    3fa4:	c5 c0       	rjmp	.+394    	; 0x4130 <EXTI_System+0x6b4>
				LCD_displayCharacter('*');
    3fa6:	8a e2       	ldi	r24, 0x2A	; 42
    3fa8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '4';
    3fac:	80 91 13 01 	lds	r24, 0x0113
    3fb0:	88 2f       	mov	r24, r24
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	eb 5e       	subi	r30, 0xEB	; 235
    3fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fba:	84 e3       	ldi	r24, 0x34	; 52
    3fbc:	80 83       	st	Z, r24
				c++;
    3fbe:	80 91 13 01 	lds	r24, 0x0113
    3fc2:	8f 5f       	subi	r24, 0xFF	; 255
    3fc4:	80 93 13 01 	sts	0x0113, r24
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e1 53       	subi	r30, 0x31	; 49
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	ac e0       	ldi	r26, 0x0C	; 12
    3fd4:	b2 e4       	ldi	r27, 0x42	; 66
    3fd6:	80 83       	st	Z, r24
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	a2 83       	std	Z+2, r26	; 0x02
    3fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fde:	8e 01       	movw	r16, r28
    3fe0:	05 53       	subi	r16, 0x35	; 53
    3fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e1 53       	subi	r30, 0x31	; 49
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	4a e7       	ldi	r20, 0x7A	; 122
    3ff8:	55 e4       	ldi	r21, 0x45	; 69
    3ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	f8 01       	movw	r30, r16
    4004:	80 83       	st	Z, r24
    4006:	91 83       	std	Z+1, r25	; 0x01
    4008:	a2 83       	std	Z+2, r26	; 0x02
    400a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    400c:	fe 01       	movw	r30, r28
    400e:	e5 53       	subi	r30, 0x35	; 53
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	60 81       	ld	r22, Z
    4014:	71 81       	ldd	r23, Z+1	; 0x01
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	40 e8       	ldi	r20, 0x80	; 128
    4020:	5f e3       	ldi	r21, 0x3F	; 63
    4022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4026:	88 23       	and	r24, r24
    4028:	44 f4       	brge	.+16     	; 0x403a <EXTI_System+0x5be>
		__ticks = 1;
    402a:	fe 01       	movw	r30, r28
    402c:	e7 53       	subi	r30, 0x37	; 55
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
    4038:	64 c0       	rjmp	.+200    	; 0x4102 <EXTI_System+0x686>
	else if (__tmp > 65535)
    403a:	fe 01       	movw	r30, r28
    403c:	e5 53       	subi	r30, 0x35	; 53
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	60 81       	ld	r22, Z
    4042:	71 81       	ldd	r23, Z+1	; 0x01
    4044:	82 81       	ldd	r24, Z+2	; 0x02
    4046:	93 81       	ldd	r25, Z+3	; 0x03
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	3f ef       	ldi	r19, 0xFF	; 255
    404c:	4f e7       	ldi	r20, 0x7F	; 127
    404e:	57 e4       	ldi	r21, 0x47	; 71
    4050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4054:	18 16       	cp	r1, r24
    4056:	0c f0       	brlt	.+2      	; 0x405a <EXTI_System+0x5de>
    4058:	43 c0       	rjmp	.+134    	; 0x40e0 <EXTI_System+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405a:	fe 01       	movw	r30, r28
    405c:	e1 53       	subi	r30, 0x31	; 49
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	82 81       	ldd	r24, Z+2	; 0x02
    4066:	93 81       	ldd	r25, Z+3	; 0x03
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e2       	ldi	r20, 0x20	; 32
    406e:	51 e4       	ldi	r21, 0x41	; 65
    4070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	8e 01       	movw	r16, r28
    407a:	07 53       	subi	r16, 0x37	; 55
    407c:	1f 4f       	sbci	r17, 0xFF	; 255
    407e:	bc 01       	movw	r22, r24
    4080:	cd 01       	movw	r24, r26
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	f8 01       	movw	r30, r16
    408c:	91 83       	std	Z+1, r25	; 0x01
    408e:	80 83       	st	Z, r24
    4090:	1f c0       	rjmp	.+62     	; 0x40d0 <EXTI_System+0x654>
    4092:	fe 01       	movw	r30, r28
    4094:	e9 53       	subi	r30, 0x39	; 57
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 e9       	ldi	r24, 0x90	; 144
    409a:	91 e0       	ldi	r25, 0x01	; 1
    409c:	91 83       	std	Z+1, r25	; 0x01
    409e:	80 83       	st	Z, r24
    40a0:	fe 01       	movw	r30, r28
    40a2:	e9 53       	subi	r30, 0x39	; 57
    40a4:	ff 4f       	sbci	r31, 0xFF	; 255
    40a6:	80 81       	ld	r24, Z
    40a8:	91 81       	ldd	r25, Z+1	; 0x01
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	f1 f7       	brne	.-4      	; 0x40aa <EXTI_System+0x62e>
    40ae:	fe 01       	movw	r30, r28
    40b0:	e9 53       	subi	r30, 0x39	; 57
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b8:	de 01       	movw	r26, r28
    40ba:	a7 53       	subi	r26, 0x37	; 55
    40bc:	bf 4f       	sbci	r27, 0xFF	; 255
    40be:	fe 01       	movw	r30, r28
    40c0:	e7 53       	subi	r30, 0x37	; 55
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	80 81       	ld	r24, Z
    40c6:	91 81       	ldd	r25, Z+1	; 0x01
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	11 96       	adiw	r26, 0x01	; 1
    40cc:	9c 93       	st	X, r25
    40ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d0:	fe 01       	movw	r30, r28
    40d2:	e7 53       	subi	r30, 0x37	; 55
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	80 81       	ld	r24, Z
    40d8:	91 81       	ldd	r25, Z+1	; 0x01
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	d1 f6       	brne	.-76     	; 0x4092 <EXTI_System+0x616>
    40de:	28 c0       	rjmp	.+80     	; 0x4130 <EXTI_System+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e0:	8e 01       	movw	r16, r28
    40e2:	07 53       	subi	r16, 0x37	; 55
    40e4:	1f 4f       	sbci	r17, 0xFF	; 255
    40e6:	fe 01       	movw	r30, r28
    40e8:	e5 53       	subi	r30, 0x35	; 53
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	60 81       	ld	r22, Z
    40ee:	71 81       	ldd	r23, Z+1	; 0x01
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	93 81       	ldd	r25, Z+3	; 0x03
    40f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f8:	dc 01       	movw	r26, r24
    40fa:	cb 01       	movw	r24, r22
    40fc:	f8 01       	movw	r30, r16
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	80 83       	st	Z, r24
    4102:	de 01       	movw	r26, r28
    4104:	ab 53       	subi	r26, 0x3B	; 59
    4106:	bf 4f       	sbci	r27, 0xFF	; 255
    4108:	fe 01       	movw	r30, r28
    410a:	e7 53       	subi	r30, 0x37	; 55
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	11 96       	adiw	r26, 0x01	; 1
    4114:	9c 93       	st	X, r25
    4116:	8e 93       	st	-X, r24
    4118:	fe 01       	movw	r30, r28
    411a:	eb 53       	subi	r30, 0x3B	; 59
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	80 81       	ld	r24, Z
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	f1 f7       	brne	.-4      	; 0x4122 <EXTI_System+0x6a6>
    4126:	fe 01       	movw	r30, r28
    4128:	eb 53       	subi	r30, 0x3B	; 59
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	91 83       	std	Z+1, r25	; 0x01
    412e:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 5){
    4130:	fe 01       	movw	r30, r28
    4132:	ea 5f       	subi	r30, 0xFA	; 250
    4134:	fe 4f       	sbci	r31, 0xFE	; 254
    4136:	80 81       	ld	r24, Z
    4138:	85 30       	cpi	r24, 0x05	; 5
    413a:	09 f0       	breq	.+2      	; 0x413e <EXTI_System+0x6c2>
    413c:	c5 c0       	rjmp	.+394    	; 0x42c8 <EXTI_System+0x84c>
				LCD_displayCharacter('*');
    413e:	8a e2       	ldi	r24, 0x2A	; 42
    4140:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '5';
    4144:	80 91 13 01 	lds	r24, 0x0113
    4148:	88 2f       	mov	r24, r24
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	fc 01       	movw	r30, r24
    414e:	eb 5e       	subi	r30, 0xEB	; 235
    4150:	fe 4f       	sbci	r31, 0xFE	; 254
    4152:	85 e3       	ldi	r24, 0x35	; 53
    4154:	80 83       	st	Z, r24
				c++;
    4156:	80 91 13 01 	lds	r24, 0x0113
    415a:	8f 5f       	subi	r24, 0xFF	; 255
    415c:	80 93 13 01 	sts	0x0113, r24
    4160:	fe 01       	movw	r30, r28
    4162:	ef 53       	subi	r30, 0x3F	; 63
    4164:	ff 4f       	sbci	r31, 0xFF	; 255
    4166:	80 e0       	ldi	r24, 0x00	; 0
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	ac e0       	ldi	r26, 0x0C	; 12
    416c:	b2 e4       	ldi	r27, 0x42	; 66
    416e:	80 83       	st	Z, r24
    4170:	91 83       	std	Z+1, r25	; 0x01
    4172:	a2 83       	std	Z+2, r26	; 0x02
    4174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4176:	8e 01       	movw	r16, r28
    4178:	03 54       	subi	r16, 0x43	; 67
    417a:	1f 4f       	sbci	r17, 0xFF	; 255
    417c:	fe 01       	movw	r30, r28
    417e:	ef 53       	subi	r30, 0x3F	; 63
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	60 81       	ld	r22, Z
    4184:	71 81       	ldd	r23, Z+1	; 0x01
    4186:	82 81       	ldd	r24, Z+2	; 0x02
    4188:	93 81       	ldd	r25, Z+3	; 0x03
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	4a e7       	ldi	r20, 0x7A	; 122
    4190:	55 e4       	ldi	r21, 0x45	; 69
    4192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	f8 01       	movw	r30, r16
    419c:	80 83       	st	Z, r24
    419e:	91 83       	std	Z+1, r25	; 0x01
    41a0:	a2 83       	std	Z+2, r26	; 0x02
    41a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41a4:	fe 01       	movw	r30, r28
    41a6:	e3 54       	subi	r30, 0x43	; 67
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e8       	ldi	r20, 0x80	; 128
    41b8:	5f e3       	ldi	r21, 0x3F	; 63
    41ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41be:	88 23       	and	r24, r24
    41c0:	44 f4       	brge	.+16     	; 0x41d2 <EXTI_System+0x756>
		__ticks = 1;
    41c2:	fe 01       	movw	r30, r28
    41c4:	e5 54       	subi	r30, 0x45	; 69
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	91 83       	std	Z+1, r25	; 0x01
    41ce:	80 83       	st	Z, r24
    41d0:	64 c0       	rjmp	.+200    	; 0x429a <EXTI_System+0x81e>
	else if (__tmp > 65535)
    41d2:	fe 01       	movw	r30, r28
    41d4:	e3 54       	subi	r30, 0x43	; 67
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	60 81       	ld	r22, Z
    41da:	71 81       	ldd	r23, Z+1	; 0x01
    41dc:	82 81       	ldd	r24, Z+2	; 0x02
    41de:	93 81       	ldd	r25, Z+3	; 0x03
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	3f ef       	ldi	r19, 0xFF	; 255
    41e4:	4f e7       	ldi	r20, 0x7F	; 127
    41e6:	57 e4       	ldi	r21, 0x47	; 71
    41e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41ec:	18 16       	cp	r1, r24
    41ee:	0c f0       	brlt	.+2      	; 0x41f2 <EXTI_System+0x776>
    41f0:	43 c0       	rjmp	.+134    	; 0x4278 <EXTI_System+0x7fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f2:	fe 01       	movw	r30, r28
    41f4:	ef 53       	subi	r30, 0x3F	; 63
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	60 81       	ld	r22, Z
    41fa:	71 81       	ldd	r23, Z+1	; 0x01
    41fc:	82 81       	ldd	r24, Z+2	; 0x02
    41fe:	93 81       	ldd	r25, Z+3	; 0x03
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e2       	ldi	r20, 0x20	; 32
    4206:	51 e4       	ldi	r21, 0x41	; 65
    4208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	8e 01       	movw	r16, r28
    4212:	05 54       	subi	r16, 0x45	; 69
    4214:	1f 4f       	sbci	r17, 0xFF	; 255
    4216:	bc 01       	movw	r22, r24
    4218:	cd 01       	movw	r24, r26
    421a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	f8 01       	movw	r30, r16
    4224:	91 83       	std	Z+1, r25	; 0x01
    4226:	80 83       	st	Z, r24
    4228:	1f c0       	rjmp	.+62     	; 0x4268 <EXTI_System+0x7ec>
    422a:	fe 01       	movw	r30, r28
    422c:	e7 54       	subi	r30, 0x47	; 71
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	80 e9       	ldi	r24, 0x90	; 144
    4232:	91 e0       	ldi	r25, 0x01	; 1
    4234:	91 83       	std	Z+1, r25	; 0x01
    4236:	80 83       	st	Z, r24
    4238:	fe 01       	movw	r30, r28
    423a:	e7 54       	subi	r30, 0x47	; 71
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	80 81       	ld	r24, Z
    4240:	91 81       	ldd	r25, Z+1	; 0x01
    4242:	01 97       	sbiw	r24, 0x01	; 1
    4244:	f1 f7       	brne	.-4      	; 0x4242 <EXTI_System+0x7c6>
    4246:	fe 01       	movw	r30, r28
    4248:	e7 54       	subi	r30, 0x47	; 71
    424a:	ff 4f       	sbci	r31, 0xFF	; 255
    424c:	91 83       	std	Z+1, r25	; 0x01
    424e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4250:	de 01       	movw	r26, r28
    4252:	a5 54       	subi	r26, 0x45	; 69
    4254:	bf 4f       	sbci	r27, 0xFF	; 255
    4256:	fe 01       	movw	r30, r28
    4258:	e5 54       	subi	r30, 0x45	; 69
    425a:	ff 4f       	sbci	r31, 0xFF	; 255
    425c:	80 81       	ld	r24, Z
    425e:	91 81       	ldd	r25, Z+1	; 0x01
    4260:	01 97       	sbiw	r24, 0x01	; 1
    4262:	11 96       	adiw	r26, 0x01	; 1
    4264:	9c 93       	st	X, r25
    4266:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4268:	fe 01       	movw	r30, r28
    426a:	e5 54       	subi	r30, 0x45	; 69
    426c:	ff 4f       	sbci	r31, 0xFF	; 255
    426e:	80 81       	ld	r24, Z
    4270:	91 81       	ldd	r25, Z+1	; 0x01
    4272:	00 97       	sbiw	r24, 0x00	; 0
    4274:	d1 f6       	brne	.-76     	; 0x422a <EXTI_System+0x7ae>
    4276:	28 c0       	rjmp	.+80     	; 0x42c8 <EXTI_System+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4278:	8e 01       	movw	r16, r28
    427a:	05 54       	subi	r16, 0x45	; 69
    427c:	1f 4f       	sbci	r17, 0xFF	; 255
    427e:	fe 01       	movw	r30, r28
    4280:	e3 54       	subi	r30, 0x43	; 67
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	60 81       	ld	r22, Z
    4286:	71 81       	ldd	r23, Z+1	; 0x01
    4288:	82 81       	ldd	r24, Z+2	; 0x02
    428a:	93 81       	ldd	r25, Z+3	; 0x03
    428c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	f8 01       	movw	r30, r16
    4296:	91 83       	std	Z+1, r25	; 0x01
    4298:	80 83       	st	Z, r24
    429a:	de 01       	movw	r26, r28
    429c:	a9 54       	subi	r26, 0x49	; 73
    429e:	bf 4f       	sbci	r27, 0xFF	; 255
    42a0:	fe 01       	movw	r30, r28
    42a2:	e5 54       	subi	r30, 0x45	; 69
    42a4:	ff 4f       	sbci	r31, 0xFF	; 255
    42a6:	80 81       	ld	r24, Z
    42a8:	91 81       	ldd	r25, Z+1	; 0x01
    42aa:	11 96       	adiw	r26, 0x01	; 1
    42ac:	9c 93       	st	X, r25
    42ae:	8e 93       	st	-X, r24
    42b0:	fe 01       	movw	r30, r28
    42b2:	e9 54       	subi	r30, 0x49	; 73
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <EXTI_System+0x83e>
    42be:	fe 01       	movw	r30, r28
    42c0:	e9 54       	subi	r30, 0x49	; 73
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	91 83       	std	Z+1, r25	; 0x01
    42c6:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 6){
    42c8:	fe 01       	movw	r30, r28
    42ca:	ea 5f       	subi	r30, 0xFA	; 250
    42cc:	fe 4f       	sbci	r31, 0xFE	; 254
    42ce:	80 81       	ld	r24, Z
    42d0:	86 30       	cpi	r24, 0x06	; 6
    42d2:	09 f0       	breq	.+2      	; 0x42d6 <EXTI_System+0x85a>
    42d4:	c5 c0       	rjmp	.+394    	; 0x4460 <EXTI_System+0x9e4>
				LCD_displayCharacter('*');
    42d6:	8a e2       	ldi	r24, 0x2A	; 42
    42d8:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '6';
    42dc:	80 91 13 01 	lds	r24, 0x0113
    42e0:	88 2f       	mov	r24, r24
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	fc 01       	movw	r30, r24
    42e6:	eb 5e       	subi	r30, 0xEB	; 235
    42e8:	fe 4f       	sbci	r31, 0xFE	; 254
    42ea:	86 e3       	ldi	r24, 0x36	; 54
    42ec:	80 83       	st	Z, r24
				c++;
    42ee:	80 91 13 01 	lds	r24, 0x0113
    42f2:	8f 5f       	subi	r24, 0xFF	; 255
    42f4:	80 93 13 01 	sts	0x0113, r24
    42f8:	fe 01       	movw	r30, r28
    42fa:	ed 54       	subi	r30, 0x4D	; 77
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	ac e0       	ldi	r26, 0x0C	; 12
    4304:	b2 e4       	ldi	r27, 0x42	; 66
    4306:	80 83       	st	Z, r24
    4308:	91 83       	std	Z+1, r25	; 0x01
    430a:	a2 83       	std	Z+2, r26	; 0x02
    430c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    430e:	8e 01       	movw	r16, r28
    4310:	01 55       	subi	r16, 0x51	; 81
    4312:	1f 4f       	sbci	r17, 0xFF	; 255
    4314:	fe 01       	movw	r30, r28
    4316:	ed 54       	subi	r30, 0x4D	; 77
    4318:	ff 4f       	sbci	r31, 0xFF	; 255
    431a:	60 81       	ld	r22, Z
    431c:	71 81       	ldd	r23, Z+1	; 0x01
    431e:	82 81       	ldd	r24, Z+2	; 0x02
    4320:	93 81       	ldd	r25, Z+3	; 0x03
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	4a e7       	ldi	r20, 0x7A	; 122
    4328:	55 e4       	ldi	r21, 0x45	; 69
    432a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	f8 01       	movw	r30, r16
    4334:	80 83       	st	Z, r24
    4336:	91 83       	std	Z+1, r25	; 0x01
    4338:	a2 83       	std	Z+2, r26	; 0x02
    433a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    433c:	fe 01       	movw	r30, r28
    433e:	e1 55       	subi	r30, 0x51	; 81
    4340:	ff 4f       	sbci	r31, 0xFF	; 255
    4342:	60 81       	ld	r22, Z
    4344:	71 81       	ldd	r23, Z+1	; 0x01
    4346:	82 81       	ldd	r24, Z+2	; 0x02
    4348:	93 81       	ldd	r25, Z+3	; 0x03
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	40 e8       	ldi	r20, 0x80	; 128
    4350:	5f e3       	ldi	r21, 0x3F	; 63
    4352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4356:	88 23       	and	r24, r24
    4358:	44 f4       	brge	.+16     	; 0x436a <EXTI_System+0x8ee>
		__ticks = 1;
    435a:	fe 01       	movw	r30, r28
    435c:	e3 55       	subi	r30, 0x53	; 83
    435e:	ff 4f       	sbci	r31, 0xFF	; 255
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	91 83       	std	Z+1, r25	; 0x01
    4366:	80 83       	st	Z, r24
    4368:	64 c0       	rjmp	.+200    	; 0x4432 <EXTI_System+0x9b6>
	else if (__tmp > 65535)
    436a:	fe 01       	movw	r30, r28
    436c:	e1 55       	subi	r30, 0x51	; 81
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	60 81       	ld	r22, Z
    4372:	71 81       	ldd	r23, Z+1	; 0x01
    4374:	82 81       	ldd	r24, Z+2	; 0x02
    4376:	93 81       	ldd	r25, Z+3	; 0x03
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	3f ef       	ldi	r19, 0xFF	; 255
    437c:	4f e7       	ldi	r20, 0x7F	; 127
    437e:	57 e4       	ldi	r21, 0x47	; 71
    4380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4384:	18 16       	cp	r1, r24
    4386:	0c f0       	brlt	.+2      	; 0x438a <EXTI_System+0x90e>
    4388:	43 c0       	rjmp	.+134    	; 0x4410 <EXTI_System+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    438a:	fe 01       	movw	r30, r28
    438c:	ed 54       	subi	r30, 0x4D	; 77
    438e:	ff 4f       	sbci	r31, 0xFF	; 255
    4390:	60 81       	ld	r22, Z
    4392:	71 81       	ldd	r23, Z+1	; 0x01
    4394:	82 81       	ldd	r24, Z+2	; 0x02
    4396:	93 81       	ldd	r25, Z+3	; 0x03
    4398:	20 e0       	ldi	r18, 0x00	; 0
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	40 e2       	ldi	r20, 0x20	; 32
    439e:	51 e4       	ldi	r21, 0x41	; 65
    43a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a4:	dc 01       	movw	r26, r24
    43a6:	cb 01       	movw	r24, r22
    43a8:	8e 01       	movw	r16, r28
    43aa:	03 55       	subi	r16, 0x53	; 83
    43ac:	1f 4f       	sbci	r17, 0xFF	; 255
    43ae:	bc 01       	movw	r22, r24
    43b0:	cd 01       	movw	r24, r26
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	f8 01       	movw	r30, r16
    43bc:	91 83       	std	Z+1, r25	; 0x01
    43be:	80 83       	st	Z, r24
    43c0:	1f c0       	rjmp	.+62     	; 0x4400 <EXTI_System+0x984>
    43c2:	fe 01       	movw	r30, r28
    43c4:	e5 55       	subi	r30, 0x55	; 85
    43c6:	ff 4f       	sbci	r31, 0xFF	; 255
    43c8:	80 e9       	ldi	r24, 0x90	; 144
    43ca:	91 e0       	ldi	r25, 0x01	; 1
    43cc:	91 83       	std	Z+1, r25	; 0x01
    43ce:	80 83       	st	Z, r24
    43d0:	fe 01       	movw	r30, r28
    43d2:	e5 55       	subi	r30, 0x55	; 85
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	80 81       	ld	r24, Z
    43d8:	91 81       	ldd	r25, Z+1	; 0x01
    43da:	01 97       	sbiw	r24, 0x01	; 1
    43dc:	f1 f7       	brne	.-4      	; 0x43da <EXTI_System+0x95e>
    43de:	fe 01       	movw	r30, r28
    43e0:	e5 55       	subi	r30, 0x55	; 85
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	91 83       	std	Z+1, r25	; 0x01
    43e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e8:	de 01       	movw	r26, r28
    43ea:	a3 55       	subi	r26, 0x53	; 83
    43ec:	bf 4f       	sbci	r27, 0xFF	; 255
    43ee:	fe 01       	movw	r30, r28
    43f0:	e3 55       	subi	r30, 0x53	; 83
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	80 81       	ld	r24, Z
    43f6:	91 81       	ldd	r25, Z+1	; 0x01
    43f8:	01 97       	sbiw	r24, 0x01	; 1
    43fa:	11 96       	adiw	r26, 0x01	; 1
    43fc:	9c 93       	st	X, r25
    43fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4400:	fe 01       	movw	r30, r28
    4402:	e3 55       	subi	r30, 0x53	; 83
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	80 81       	ld	r24, Z
    4408:	91 81       	ldd	r25, Z+1	; 0x01
    440a:	00 97       	sbiw	r24, 0x00	; 0
    440c:	d1 f6       	brne	.-76     	; 0x43c2 <EXTI_System+0x946>
    440e:	28 c0       	rjmp	.+80     	; 0x4460 <EXTI_System+0x9e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4410:	8e 01       	movw	r16, r28
    4412:	03 55       	subi	r16, 0x53	; 83
    4414:	1f 4f       	sbci	r17, 0xFF	; 255
    4416:	fe 01       	movw	r30, r28
    4418:	e1 55       	subi	r30, 0x51	; 81
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	60 81       	ld	r22, Z
    441e:	71 81       	ldd	r23, Z+1	; 0x01
    4420:	82 81       	ldd	r24, Z+2	; 0x02
    4422:	93 81       	ldd	r25, Z+3	; 0x03
    4424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4428:	dc 01       	movw	r26, r24
    442a:	cb 01       	movw	r24, r22
    442c:	f8 01       	movw	r30, r16
    442e:	91 83       	std	Z+1, r25	; 0x01
    4430:	80 83       	st	Z, r24
    4432:	de 01       	movw	r26, r28
    4434:	a7 55       	subi	r26, 0x57	; 87
    4436:	bf 4f       	sbci	r27, 0xFF	; 255
    4438:	fe 01       	movw	r30, r28
    443a:	e3 55       	subi	r30, 0x53	; 83
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	80 81       	ld	r24, Z
    4440:	91 81       	ldd	r25, Z+1	; 0x01
    4442:	11 96       	adiw	r26, 0x01	; 1
    4444:	9c 93       	st	X, r25
    4446:	8e 93       	st	-X, r24
    4448:	fe 01       	movw	r30, r28
    444a:	e7 55       	subi	r30, 0x57	; 87
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	80 81       	ld	r24, Z
    4450:	91 81       	ldd	r25, Z+1	; 0x01
    4452:	01 97       	sbiw	r24, 0x01	; 1
    4454:	f1 f7       	brne	.-4      	; 0x4452 <EXTI_System+0x9d6>
    4456:	fe 01       	movw	r30, r28
    4458:	e7 55       	subi	r30, 0x57	; 87
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	91 83       	std	Z+1, r25	; 0x01
    445e:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 7){
    4460:	fe 01       	movw	r30, r28
    4462:	ea 5f       	subi	r30, 0xFA	; 250
    4464:	fe 4f       	sbci	r31, 0xFE	; 254
    4466:	80 81       	ld	r24, Z
    4468:	87 30       	cpi	r24, 0x07	; 7
    446a:	09 f0       	breq	.+2      	; 0x446e <EXTI_System+0x9f2>
    446c:	c5 c0       	rjmp	.+394    	; 0x45f8 <EXTI_System+0xb7c>
				LCD_displayCharacter('*');
    446e:	8a e2       	ldi	r24, 0x2A	; 42
    4470:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '7';
    4474:	80 91 13 01 	lds	r24, 0x0113
    4478:	88 2f       	mov	r24, r24
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	fc 01       	movw	r30, r24
    447e:	eb 5e       	subi	r30, 0xEB	; 235
    4480:	fe 4f       	sbci	r31, 0xFE	; 254
    4482:	87 e3       	ldi	r24, 0x37	; 55
    4484:	80 83       	st	Z, r24
				c++;
    4486:	80 91 13 01 	lds	r24, 0x0113
    448a:	8f 5f       	subi	r24, 0xFF	; 255
    448c:	80 93 13 01 	sts	0x0113, r24
    4490:	fe 01       	movw	r30, r28
    4492:	eb 55       	subi	r30, 0x5B	; 91
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	80 e0       	ldi	r24, 0x00	; 0
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	ac e0       	ldi	r26, 0x0C	; 12
    449c:	b2 e4       	ldi	r27, 0x42	; 66
    449e:	80 83       	st	Z, r24
    44a0:	91 83       	std	Z+1, r25	; 0x01
    44a2:	a2 83       	std	Z+2, r26	; 0x02
    44a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a6:	8e 01       	movw	r16, r28
    44a8:	0f 55       	subi	r16, 0x5F	; 95
    44aa:	1f 4f       	sbci	r17, 0xFF	; 255
    44ac:	fe 01       	movw	r30, r28
    44ae:	eb 55       	subi	r30, 0x5B	; 91
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	60 81       	ld	r22, Z
    44b4:	71 81       	ldd	r23, Z+1	; 0x01
    44b6:	82 81       	ldd	r24, Z+2	; 0x02
    44b8:	93 81       	ldd	r25, Z+3	; 0x03
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	4a e7       	ldi	r20, 0x7A	; 122
    44c0:	55 e4       	ldi	r21, 0x45	; 69
    44c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c6:	dc 01       	movw	r26, r24
    44c8:	cb 01       	movw	r24, r22
    44ca:	f8 01       	movw	r30, r16
    44cc:	80 83       	st	Z, r24
    44ce:	91 83       	std	Z+1, r25	; 0x01
    44d0:	a2 83       	std	Z+2, r26	; 0x02
    44d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44d4:	fe 01       	movw	r30, r28
    44d6:	ef 55       	subi	r30, 0x5F	; 95
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	60 81       	ld	r22, Z
    44dc:	71 81       	ldd	r23, Z+1	; 0x01
    44de:	82 81       	ldd	r24, Z+2	; 0x02
    44e0:	93 81       	ldd	r25, Z+3	; 0x03
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e8       	ldi	r20, 0x80	; 128
    44e8:	5f e3       	ldi	r21, 0x3F	; 63
    44ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44ee:	88 23       	and	r24, r24
    44f0:	44 f4       	brge	.+16     	; 0x4502 <EXTI_System+0xa86>
		__ticks = 1;
    44f2:	fe 01       	movw	r30, r28
    44f4:	e1 56       	subi	r30, 0x61	; 97
    44f6:	ff 4f       	sbci	r31, 0xFF	; 255
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	91 83       	std	Z+1, r25	; 0x01
    44fe:	80 83       	st	Z, r24
    4500:	64 c0       	rjmp	.+200    	; 0x45ca <EXTI_System+0xb4e>
	else if (__tmp > 65535)
    4502:	fe 01       	movw	r30, r28
    4504:	ef 55       	subi	r30, 0x5F	; 95
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	60 81       	ld	r22, Z
    450a:	71 81       	ldd	r23, Z+1	; 0x01
    450c:	82 81       	ldd	r24, Z+2	; 0x02
    450e:	93 81       	ldd	r25, Z+3	; 0x03
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	3f ef       	ldi	r19, 0xFF	; 255
    4514:	4f e7       	ldi	r20, 0x7F	; 127
    4516:	57 e4       	ldi	r21, 0x47	; 71
    4518:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    451c:	18 16       	cp	r1, r24
    451e:	0c f0       	brlt	.+2      	; 0x4522 <EXTI_System+0xaa6>
    4520:	43 c0       	rjmp	.+134    	; 0x45a8 <EXTI_System+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4522:	fe 01       	movw	r30, r28
    4524:	eb 55       	subi	r30, 0x5B	; 91
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	60 81       	ld	r22, Z
    452a:	71 81       	ldd	r23, Z+1	; 0x01
    452c:	82 81       	ldd	r24, Z+2	; 0x02
    452e:	93 81       	ldd	r25, Z+3	; 0x03
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	40 e2       	ldi	r20, 0x20	; 32
    4536:	51 e4       	ldi	r21, 0x41	; 65
    4538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	8e 01       	movw	r16, r28
    4542:	01 56       	subi	r16, 0x61	; 97
    4544:	1f 4f       	sbci	r17, 0xFF	; 255
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	f8 01       	movw	r30, r16
    4554:	91 83       	std	Z+1, r25	; 0x01
    4556:	80 83       	st	Z, r24
    4558:	1f c0       	rjmp	.+62     	; 0x4598 <EXTI_System+0xb1c>
    455a:	fe 01       	movw	r30, r28
    455c:	e3 56       	subi	r30, 0x63	; 99
    455e:	ff 4f       	sbci	r31, 0xFF	; 255
    4560:	80 e9       	ldi	r24, 0x90	; 144
    4562:	91 e0       	ldi	r25, 0x01	; 1
    4564:	91 83       	std	Z+1, r25	; 0x01
    4566:	80 83       	st	Z, r24
    4568:	fe 01       	movw	r30, r28
    456a:	e3 56       	subi	r30, 0x63	; 99
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	80 81       	ld	r24, Z
    4570:	91 81       	ldd	r25, Z+1	; 0x01
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	f1 f7       	brne	.-4      	; 0x4572 <EXTI_System+0xaf6>
    4576:	fe 01       	movw	r30, r28
    4578:	e3 56       	subi	r30, 0x63	; 99
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	91 83       	std	Z+1, r25	; 0x01
    457e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4580:	de 01       	movw	r26, r28
    4582:	a1 56       	subi	r26, 0x61	; 97
    4584:	bf 4f       	sbci	r27, 0xFF	; 255
    4586:	fe 01       	movw	r30, r28
    4588:	e1 56       	subi	r30, 0x61	; 97
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	80 81       	ld	r24, Z
    458e:	91 81       	ldd	r25, Z+1	; 0x01
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	11 96       	adiw	r26, 0x01	; 1
    4594:	9c 93       	st	X, r25
    4596:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4598:	fe 01       	movw	r30, r28
    459a:	e1 56       	subi	r30, 0x61	; 97
    459c:	ff 4f       	sbci	r31, 0xFF	; 255
    459e:	80 81       	ld	r24, Z
    45a0:	91 81       	ldd	r25, Z+1	; 0x01
    45a2:	00 97       	sbiw	r24, 0x00	; 0
    45a4:	d1 f6       	brne	.-76     	; 0x455a <EXTI_System+0xade>
    45a6:	28 c0       	rjmp	.+80     	; 0x45f8 <EXTI_System+0xb7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a8:	8e 01       	movw	r16, r28
    45aa:	01 56       	subi	r16, 0x61	; 97
    45ac:	1f 4f       	sbci	r17, 0xFF	; 255
    45ae:	fe 01       	movw	r30, r28
    45b0:	ef 55       	subi	r30, 0x5F	; 95
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	60 81       	ld	r22, Z
    45b6:	71 81       	ldd	r23, Z+1	; 0x01
    45b8:	82 81       	ldd	r24, Z+2	; 0x02
    45ba:	93 81       	ldd	r25, Z+3	; 0x03
    45bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	f8 01       	movw	r30, r16
    45c6:	91 83       	std	Z+1, r25	; 0x01
    45c8:	80 83       	st	Z, r24
    45ca:	de 01       	movw	r26, r28
    45cc:	a5 56       	subi	r26, 0x65	; 101
    45ce:	bf 4f       	sbci	r27, 0xFF	; 255
    45d0:	fe 01       	movw	r30, r28
    45d2:	e1 56       	subi	r30, 0x61	; 97
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	80 81       	ld	r24, Z
    45d8:	91 81       	ldd	r25, Z+1	; 0x01
    45da:	11 96       	adiw	r26, 0x01	; 1
    45dc:	9c 93       	st	X, r25
    45de:	8e 93       	st	-X, r24
    45e0:	fe 01       	movw	r30, r28
    45e2:	e5 56       	subi	r30, 0x65	; 101
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	80 81       	ld	r24, Z
    45e8:	91 81       	ldd	r25, Z+1	; 0x01
    45ea:	01 97       	sbiw	r24, 0x01	; 1
    45ec:	f1 f7       	brne	.-4      	; 0x45ea <EXTI_System+0xb6e>
    45ee:	fe 01       	movw	r30, r28
    45f0:	e5 56       	subi	r30, 0x65	; 101
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	91 83       	std	Z+1, r25	; 0x01
    45f6:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 8){
    45f8:	fe 01       	movw	r30, r28
    45fa:	ea 5f       	subi	r30, 0xFA	; 250
    45fc:	fe 4f       	sbci	r31, 0xFE	; 254
    45fe:	80 81       	ld	r24, Z
    4600:	88 30       	cpi	r24, 0x08	; 8
    4602:	09 f0       	breq	.+2      	; 0x4606 <EXTI_System+0xb8a>
    4604:	c5 c0       	rjmp	.+394    	; 0x4790 <EXTI_System+0xd14>
				LCD_displayCharacter('*');
    4606:	8a e2       	ldi	r24, 0x2A	; 42
    4608:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '8';
    460c:	80 91 13 01 	lds	r24, 0x0113
    4610:	88 2f       	mov	r24, r24
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	fc 01       	movw	r30, r24
    4616:	eb 5e       	subi	r30, 0xEB	; 235
    4618:	fe 4f       	sbci	r31, 0xFE	; 254
    461a:	88 e3       	ldi	r24, 0x38	; 56
    461c:	80 83       	st	Z, r24
				c++;
    461e:	80 91 13 01 	lds	r24, 0x0113
    4622:	8f 5f       	subi	r24, 0xFF	; 255
    4624:	80 93 13 01 	sts	0x0113, r24
    4628:	fe 01       	movw	r30, r28
    462a:	e9 56       	subi	r30, 0x69	; 105
    462c:	ff 4f       	sbci	r31, 0xFF	; 255
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	ac e0       	ldi	r26, 0x0C	; 12
    4634:	b2 e4       	ldi	r27, 0x42	; 66
    4636:	80 83       	st	Z, r24
    4638:	91 83       	std	Z+1, r25	; 0x01
    463a:	a2 83       	std	Z+2, r26	; 0x02
    463c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    463e:	8e 01       	movw	r16, r28
    4640:	0d 56       	subi	r16, 0x6D	; 109
    4642:	1f 4f       	sbci	r17, 0xFF	; 255
    4644:	fe 01       	movw	r30, r28
    4646:	e9 56       	subi	r30, 0x69	; 105
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	60 81       	ld	r22, Z
    464c:	71 81       	ldd	r23, Z+1	; 0x01
    464e:	82 81       	ldd	r24, Z+2	; 0x02
    4650:	93 81       	ldd	r25, Z+3	; 0x03
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	4a e7       	ldi	r20, 0x7A	; 122
    4658:	55 e4       	ldi	r21, 0x45	; 69
    465a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    465e:	dc 01       	movw	r26, r24
    4660:	cb 01       	movw	r24, r22
    4662:	f8 01       	movw	r30, r16
    4664:	80 83       	st	Z, r24
    4666:	91 83       	std	Z+1, r25	; 0x01
    4668:	a2 83       	std	Z+2, r26	; 0x02
    466a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    466c:	fe 01       	movw	r30, r28
    466e:	ed 56       	subi	r30, 0x6D	; 109
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	60 81       	ld	r22, Z
    4674:	71 81       	ldd	r23, Z+1	; 0x01
    4676:	82 81       	ldd	r24, Z+2	; 0x02
    4678:	93 81       	ldd	r25, Z+3	; 0x03
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	40 e8       	ldi	r20, 0x80	; 128
    4680:	5f e3       	ldi	r21, 0x3F	; 63
    4682:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4686:	88 23       	and	r24, r24
    4688:	44 f4       	brge	.+16     	; 0x469a <EXTI_System+0xc1e>
		__ticks = 1;
    468a:	fe 01       	movw	r30, r28
    468c:	ef 56       	subi	r30, 0x6F	; 111
    468e:	ff 4f       	sbci	r31, 0xFF	; 255
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	91 83       	std	Z+1, r25	; 0x01
    4696:	80 83       	st	Z, r24
    4698:	64 c0       	rjmp	.+200    	; 0x4762 <EXTI_System+0xce6>
	else if (__tmp > 65535)
    469a:	fe 01       	movw	r30, r28
    469c:	ed 56       	subi	r30, 0x6D	; 109
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	60 81       	ld	r22, Z
    46a2:	71 81       	ldd	r23, Z+1	; 0x01
    46a4:	82 81       	ldd	r24, Z+2	; 0x02
    46a6:	93 81       	ldd	r25, Z+3	; 0x03
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	3f ef       	ldi	r19, 0xFF	; 255
    46ac:	4f e7       	ldi	r20, 0x7F	; 127
    46ae:	57 e4       	ldi	r21, 0x47	; 71
    46b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46b4:	18 16       	cp	r1, r24
    46b6:	0c f0       	brlt	.+2      	; 0x46ba <EXTI_System+0xc3e>
    46b8:	43 c0       	rjmp	.+134    	; 0x4740 <EXTI_System+0xcc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ba:	fe 01       	movw	r30, r28
    46bc:	e9 56       	subi	r30, 0x69	; 105
    46be:	ff 4f       	sbci	r31, 0xFF	; 255
    46c0:	60 81       	ld	r22, Z
    46c2:	71 81       	ldd	r23, Z+1	; 0x01
    46c4:	82 81       	ldd	r24, Z+2	; 0x02
    46c6:	93 81       	ldd	r25, Z+3	; 0x03
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	40 e2       	ldi	r20, 0x20	; 32
    46ce:	51 e4       	ldi	r21, 0x41	; 65
    46d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d4:	dc 01       	movw	r26, r24
    46d6:	cb 01       	movw	r24, r22
    46d8:	8e 01       	movw	r16, r28
    46da:	0f 56       	subi	r16, 0x6F	; 111
    46dc:	1f 4f       	sbci	r17, 0xFF	; 255
    46de:	bc 01       	movw	r22, r24
    46e0:	cd 01       	movw	r24, r26
    46e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e6:	dc 01       	movw	r26, r24
    46e8:	cb 01       	movw	r24, r22
    46ea:	f8 01       	movw	r30, r16
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	80 83       	st	Z, r24
    46f0:	1f c0       	rjmp	.+62     	; 0x4730 <EXTI_System+0xcb4>
    46f2:	fe 01       	movw	r30, r28
    46f4:	e1 57       	subi	r30, 0x71	; 113
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	80 e9       	ldi	r24, 0x90	; 144
    46fa:	91 e0       	ldi	r25, 0x01	; 1
    46fc:	91 83       	std	Z+1, r25	; 0x01
    46fe:	80 83       	st	Z, r24
    4700:	fe 01       	movw	r30, r28
    4702:	e1 57       	subi	r30, 0x71	; 113
    4704:	ff 4f       	sbci	r31, 0xFF	; 255
    4706:	80 81       	ld	r24, Z
    4708:	91 81       	ldd	r25, Z+1	; 0x01
    470a:	01 97       	sbiw	r24, 0x01	; 1
    470c:	f1 f7       	brne	.-4      	; 0x470a <EXTI_System+0xc8e>
    470e:	fe 01       	movw	r30, r28
    4710:	e1 57       	subi	r30, 0x71	; 113
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	91 83       	std	Z+1, r25	; 0x01
    4716:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4718:	de 01       	movw	r26, r28
    471a:	af 56       	subi	r26, 0x6F	; 111
    471c:	bf 4f       	sbci	r27, 0xFF	; 255
    471e:	fe 01       	movw	r30, r28
    4720:	ef 56       	subi	r30, 0x6F	; 111
    4722:	ff 4f       	sbci	r31, 0xFF	; 255
    4724:	80 81       	ld	r24, Z
    4726:	91 81       	ldd	r25, Z+1	; 0x01
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	11 96       	adiw	r26, 0x01	; 1
    472c:	9c 93       	st	X, r25
    472e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4730:	fe 01       	movw	r30, r28
    4732:	ef 56       	subi	r30, 0x6F	; 111
    4734:	ff 4f       	sbci	r31, 0xFF	; 255
    4736:	80 81       	ld	r24, Z
    4738:	91 81       	ldd	r25, Z+1	; 0x01
    473a:	00 97       	sbiw	r24, 0x00	; 0
    473c:	d1 f6       	brne	.-76     	; 0x46f2 <EXTI_System+0xc76>
    473e:	28 c0       	rjmp	.+80     	; 0x4790 <EXTI_System+0xd14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4740:	8e 01       	movw	r16, r28
    4742:	0f 56       	subi	r16, 0x6F	; 111
    4744:	1f 4f       	sbci	r17, 0xFF	; 255
    4746:	fe 01       	movw	r30, r28
    4748:	ed 56       	subi	r30, 0x6D	; 109
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	60 81       	ld	r22, Z
    474e:	71 81       	ldd	r23, Z+1	; 0x01
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	f8 01       	movw	r30, r16
    475e:	91 83       	std	Z+1, r25	; 0x01
    4760:	80 83       	st	Z, r24
    4762:	de 01       	movw	r26, r28
    4764:	a3 57       	subi	r26, 0x73	; 115
    4766:	bf 4f       	sbci	r27, 0xFF	; 255
    4768:	fe 01       	movw	r30, r28
    476a:	ef 56       	subi	r30, 0x6F	; 111
    476c:	ff 4f       	sbci	r31, 0xFF	; 255
    476e:	80 81       	ld	r24, Z
    4770:	91 81       	ldd	r25, Z+1	; 0x01
    4772:	11 96       	adiw	r26, 0x01	; 1
    4774:	9c 93       	st	X, r25
    4776:	8e 93       	st	-X, r24
    4778:	fe 01       	movw	r30, r28
    477a:	e3 57       	subi	r30, 0x73	; 115
    477c:	ff 4f       	sbci	r31, 0xFF	; 255
    477e:	80 81       	ld	r24, Z
    4780:	91 81       	ldd	r25, Z+1	; 0x01
    4782:	01 97       	sbiw	r24, 0x01	; 1
    4784:	f1 f7       	brne	.-4      	; 0x4782 <EXTI_System+0xd06>
    4786:	fe 01       	movw	r30, r28
    4788:	e3 57       	subi	r30, 0x73	; 115
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	91 83       	std	Z+1, r25	; 0x01
    478e:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 9){
    4790:	fe 01       	movw	r30, r28
    4792:	ea 5f       	subi	r30, 0xFA	; 250
    4794:	fe 4f       	sbci	r31, 0xFE	; 254
    4796:	80 81       	ld	r24, Z
    4798:	89 30       	cpi	r24, 0x09	; 9
    479a:	09 f0       	breq	.+2      	; 0x479e <EXTI_System+0xd22>
    479c:	c5 c0       	rjmp	.+394    	; 0x4928 <EXTI_System+0xeac>
				LCD_displayCharacter('*');
    479e:	8a e2       	ldi	r24, 0x2A	; 42
    47a0:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '9';
    47a4:	80 91 13 01 	lds	r24, 0x0113
    47a8:	88 2f       	mov	r24, r24
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	fc 01       	movw	r30, r24
    47ae:	eb 5e       	subi	r30, 0xEB	; 235
    47b0:	fe 4f       	sbci	r31, 0xFE	; 254
    47b2:	89 e3       	ldi	r24, 0x39	; 57
    47b4:	80 83       	st	Z, r24
				c++;
    47b6:	80 91 13 01 	lds	r24, 0x0113
    47ba:	8f 5f       	subi	r24, 0xFF	; 255
    47bc:	80 93 13 01 	sts	0x0113, r24
    47c0:	fe 01       	movw	r30, r28
    47c2:	e7 57       	subi	r30, 0x77	; 119
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	ac e0       	ldi	r26, 0x0C	; 12
    47cc:	b2 e4       	ldi	r27, 0x42	; 66
    47ce:	80 83       	st	Z, r24
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	a2 83       	std	Z+2, r26	; 0x02
    47d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d6:	8e 01       	movw	r16, r28
    47d8:	0b 57       	subi	r16, 0x7B	; 123
    47da:	1f 4f       	sbci	r17, 0xFF	; 255
    47dc:	fe 01       	movw	r30, r28
    47de:	e7 57       	subi	r30, 0x77	; 119
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	60 81       	ld	r22, Z
    47e4:	71 81       	ldd	r23, Z+1	; 0x01
    47e6:	82 81       	ldd	r24, Z+2	; 0x02
    47e8:	93 81       	ldd	r25, Z+3	; 0x03
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	4a e7       	ldi	r20, 0x7A	; 122
    47f0:	55 e4       	ldi	r21, 0x45	; 69
    47f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	f8 01       	movw	r30, r16
    47fc:	80 83       	st	Z, r24
    47fe:	91 83       	std	Z+1, r25	; 0x01
    4800:	a2 83       	std	Z+2, r26	; 0x02
    4802:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4804:	fe 01       	movw	r30, r28
    4806:	eb 57       	subi	r30, 0x7B	; 123
    4808:	ff 4f       	sbci	r31, 0xFF	; 255
    480a:	60 81       	ld	r22, Z
    480c:	71 81       	ldd	r23, Z+1	; 0x01
    480e:	82 81       	ldd	r24, Z+2	; 0x02
    4810:	93 81       	ldd	r25, Z+3	; 0x03
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e8       	ldi	r20, 0x80	; 128
    4818:	5f e3       	ldi	r21, 0x3F	; 63
    481a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    481e:	88 23       	and	r24, r24
    4820:	44 f4       	brge	.+16     	; 0x4832 <EXTI_System+0xdb6>
		__ticks = 1;
    4822:	fe 01       	movw	r30, r28
    4824:	ed 57       	subi	r30, 0x7D	; 125
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	91 83       	std	Z+1, r25	; 0x01
    482e:	80 83       	st	Z, r24
    4830:	64 c0       	rjmp	.+200    	; 0x48fa <EXTI_System+0xe7e>
	else if (__tmp > 65535)
    4832:	fe 01       	movw	r30, r28
    4834:	eb 57       	subi	r30, 0x7B	; 123
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	60 81       	ld	r22, Z
    483a:	71 81       	ldd	r23, Z+1	; 0x01
    483c:	82 81       	ldd	r24, Z+2	; 0x02
    483e:	93 81       	ldd	r25, Z+3	; 0x03
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	3f ef       	ldi	r19, 0xFF	; 255
    4844:	4f e7       	ldi	r20, 0x7F	; 127
    4846:	57 e4       	ldi	r21, 0x47	; 71
    4848:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    484c:	18 16       	cp	r1, r24
    484e:	0c f0       	brlt	.+2      	; 0x4852 <EXTI_System+0xdd6>
    4850:	43 c0       	rjmp	.+134    	; 0x48d8 <EXTI_System+0xe5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4852:	fe 01       	movw	r30, r28
    4854:	e7 57       	subi	r30, 0x77	; 119
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	60 81       	ld	r22, Z
    485a:	71 81       	ldd	r23, Z+1	; 0x01
    485c:	82 81       	ldd	r24, Z+2	; 0x02
    485e:	93 81       	ldd	r25, Z+3	; 0x03
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	40 e2       	ldi	r20, 0x20	; 32
    4866:	51 e4       	ldi	r21, 0x41	; 65
    4868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	8e 01       	movw	r16, r28
    4872:	0d 57       	subi	r16, 0x7D	; 125
    4874:	1f 4f       	sbci	r17, 0xFF	; 255
    4876:	bc 01       	movw	r22, r24
    4878:	cd 01       	movw	r24, r26
    487a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487e:	dc 01       	movw	r26, r24
    4880:	cb 01       	movw	r24, r22
    4882:	f8 01       	movw	r30, r16
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
    4888:	1f c0       	rjmp	.+62     	; 0x48c8 <EXTI_System+0xe4c>
    488a:	fe 01       	movw	r30, r28
    488c:	ef 57       	subi	r30, 0x7F	; 127
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 e9       	ldi	r24, 0x90	; 144
    4892:	91 e0       	ldi	r25, 0x01	; 1
    4894:	91 83       	std	Z+1, r25	; 0x01
    4896:	80 83       	st	Z, r24
    4898:	fe 01       	movw	r30, r28
    489a:	ef 57       	subi	r30, 0x7F	; 127
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	80 81       	ld	r24, Z
    48a0:	91 81       	ldd	r25, Z+1	; 0x01
    48a2:	01 97       	sbiw	r24, 0x01	; 1
    48a4:	f1 f7       	brne	.-4      	; 0x48a2 <EXTI_System+0xe26>
    48a6:	fe 01       	movw	r30, r28
    48a8:	ef 57       	subi	r30, 0x7F	; 127
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	91 83       	std	Z+1, r25	; 0x01
    48ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48b0:	de 01       	movw	r26, r28
    48b2:	ad 57       	subi	r26, 0x7D	; 125
    48b4:	bf 4f       	sbci	r27, 0xFF	; 255
    48b6:	fe 01       	movw	r30, r28
    48b8:	ed 57       	subi	r30, 0x7D	; 125
    48ba:	ff 4f       	sbci	r31, 0xFF	; 255
    48bc:	80 81       	ld	r24, Z
    48be:	91 81       	ldd	r25, Z+1	; 0x01
    48c0:	01 97       	sbiw	r24, 0x01	; 1
    48c2:	11 96       	adiw	r26, 0x01	; 1
    48c4:	9c 93       	st	X, r25
    48c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48c8:	fe 01       	movw	r30, r28
    48ca:	ed 57       	subi	r30, 0x7D	; 125
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	80 81       	ld	r24, Z
    48d0:	91 81       	ldd	r25, Z+1	; 0x01
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	d1 f6       	brne	.-76     	; 0x488a <EXTI_System+0xe0e>
    48d6:	28 c0       	rjmp	.+80     	; 0x4928 <EXTI_System+0xeac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48d8:	8e 01       	movw	r16, r28
    48da:	0d 57       	subi	r16, 0x7D	; 125
    48dc:	1f 4f       	sbci	r17, 0xFF	; 255
    48de:	fe 01       	movw	r30, r28
    48e0:	eb 57       	subi	r30, 0x7B	; 123
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	60 81       	ld	r22, Z
    48e6:	71 81       	ldd	r23, Z+1	; 0x01
    48e8:	82 81       	ldd	r24, Z+2	; 0x02
    48ea:	93 81       	ldd	r25, Z+3	; 0x03
    48ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	f8 01       	movw	r30, r16
    48f6:	91 83       	std	Z+1, r25	; 0x01
    48f8:	80 83       	st	Z, r24
    48fa:	de 01       	movw	r26, r28
    48fc:	a1 58       	subi	r26, 0x81	; 129
    48fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4900:	fe 01       	movw	r30, r28
    4902:	ed 57       	subi	r30, 0x7D	; 125
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	80 81       	ld	r24, Z
    4908:	91 81       	ldd	r25, Z+1	; 0x01
    490a:	11 96       	adiw	r26, 0x01	; 1
    490c:	9c 93       	st	X, r25
    490e:	8e 93       	st	-X, r24
    4910:	fe 01       	movw	r30, r28
    4912:	e1 58       	subi	r30, 0x81	; 129
    4914:	ff 4f       	sbci	r31, 0xFF	; 255
    4916:	80 81       	ld	r24, Z
    4918:	91 81       	ldd	r25, Z+1	; 0x01
    491a:	01 97       	sbiw	r24, 0x01	; 1
    491c:	f1 f7       	brne	.-4      	; 0x491a <EXTI_System+0xe9e>
    491e:	fe 01       	movw	r30, r28
    4920:	e1 58       	subi	r30, 0x81	; 129
    4922:	ff 4f       	sbci	r31, 0xFF	; 255
    4924:	91 83       	std	Z+1, r25	; 0x01
    4926:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == '*'){
    4928:	fe 01       	movw	r30, r28
    492a:	ea 5f       	subi	r30, 0xFA	; 250
    492c:	fe 4f       	sbci	r31, 0xFE	; 254
    492e:	80 81       	ld	r24, Z
    4930:	8a 32       	cpi	r24, 0x2A	; 42
    4932:	09 f0       	breq	.+2      	; 0x4936 <EXTI_System+0xeba>
    4934:	c5 c0       	rjmp	.+394    	; 0x4ac0 <EXTI_System+0x1044>
				LCD_displayCharacter('*');
    4936:	8a e2       	ldi	r24, 0x2A	; 42
    4938:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '*';
    493c:	80 91 13 01 	lds	r24, 0x0113
    4940:	88 2f       	mov	r24, r24
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	fc 01       	movw	r30, r24
    4946:	eb 5e       	subi	r30, 0xEB	; 235
    4948:	fe 4f       	sbci	r31, 0xFE	; 254
    494a:	8a e2       	ldi	r24, 0x2A	; 42
    494c:	80 83       	st	Z, r24
				c++;
    494e:	80 91 13 01 	lds	r24, 0x0113
    4952:	8f 5f       	subi	r24, 0xFF	; 255
    4954:	80 93 13 01 	sts	0x0113, r24
    4958:	fe 01       	movw	r30, r28
    495a:	e5 58       	subi	r30, 0x85	; 133
    495c:	ff 4f       	sbci	r31, 0xFF	; 255
    495e:	80 e0       	ldi	r24, 0x00	; 0
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	ac e0       	ldi	r26, 0x0C	; 12
    4964:	b2 e4       	ldi	r27, 0x42	; 66
    4966:	80 83       	st	Z, r24
    4968:	91 83       	std	Z+1, r25	; 0x01
    496a:	a2 83       	std	Z+2, r26	; 0x02
    496c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    496e:	8e 01       	movw	r16, r28
    4970:	09 58       	subi	r16, 0x89	; 137
    4972:	1f 4f       	sbci	r17, 0xFF	; 255
    4974:	fe 01       	movw	r30, r28
    4976:	e5 58       	subi	r30, 0x85	; 133
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	60 81       	ld	r22, Z
    497c:	71 81       	ldd	r23, Z+1	; 0x01
    497e:	82 81       	ldd	r24, Z+2	; 0x02
    4980:	93 81       	ldd	r25, Z+3	; 0x03
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	4a e7       	ldi	r20, 0x7A	; 122
    4988:	55 e4       	ldi	r21, 0x45	; 69
    498a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498e:	dc 01       	movw	r26, r24
    4990:	cb 01       	movw	r24, r22
    4992:	f8 01       	movw	r30, r16
    4994:	80 83       	st	Z, r24
    4996:	91 83       	std	Z+1, r25	; 0x01
    4998:	a2 83       	std	Z+2, r26	; 0x02
    499a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    499c:	fe 01       	movw	r30, r28
    499e:	e9 58       	subi	r30, 0x89	; 137
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	60 81       	ld	r22, Z
    49a4:	71 81       	ldd	r23, Z+1	; 0x01
    49a6:	82 81       	ldd	r24, Z+2	; 0x02
    49a8:	93 81       	ldd	r25, Z+3	; 0x03
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	40 e8       	ldi	r20, 0x80	; 128
    49b0:	5f e3       	ldi	r21, 0x3F	; 63
    49b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49b6:	88 23       	and	r24, r24
    49b8:	44 f4       	brge	.+16     	; 0x49ca <EXTI_System+0xf4e>
		__ticks = 1;
    49ba:	fe 01       	movw	r30, r28
    49bc:	eb 58       	subi	r30, 0x8B	; 139
    49be:	ff 4f       	sbci	r31, 0xFF	; 255
    49c0:	81 e0       	ldi	r24, 0x01	; 1
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	91 83       	std	Z+1, r25	; 0x01
    49c6:	80 83       	st	Z, r24
    49c8:	64 c0       	rjmp	.+200    	; 0x4a92 <EXTI_System+0x1016>
	else if (__tmp > 65535)
    49ca:	fe 01       	movw	r30, r28
    49cc:	e9 58       	subi	r30, 0x89	; 137
    49ce:	ff 4f       	sbci	r31, 0xFF	; 255
    49d0:	60 81       	ld	r22, Z
    49d2:	71 81       	ldd	r23, Z+1	; 0x01
    49d4:	82 81       	ldd	r24, Z+2	; 0x02
    49d6:	93 81       	ldd	r25, Z+3	; 0x03
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	3f ef       	ldi	r19, 0xFF	; 255
    49dc:	4f e7       	ldi	r20, 0x7F	; 127
    49de:	57 e4       	ldi	r21, 0x47	; 71
    49e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49e4:	18 16       	cp	r1, r24
    49e6:	0c f0       	brlt	.+2      	; 0x49ea <EXTI_System+0xf6e>
    49e8:	43 c0       	rjmp	.+134    	; 0x4a70 <EXTI_System+0xff4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ea:	fe 01       	movw	r30, r28
    49ec:	e5 58       	subi	r30, 0x85	; 133
    49ee:	ff 4f       	sbci	r31, 0xFF	; 255
    49f0:	60 81       	ld	r22, Z
    49f2:	71 81       	ldd	r23, Z+1	; 0x01
    49f4:	82 81       	ldd	r24, Z+2	; 0x02
    49f6:	93 81       	ldd	r25, Z+3	; 0x03
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	40 e2       	ldi	r20, 0x20	; 32
    49fe:	51 e4       	ldi	r21, 0x41	; 65
    4a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a04:	dc 01       	movw	r26, r24
    4a06:	cb 01       	movw	r24, r22
    4a08:	8e 01       	movw	r16, r28
    4a0a:	0b 58       	subi	r16, 0x8B	; 139
    4a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a0e:	bc 01       	movw	r22, r24
    4a10:	cd 01       	movw	r24, r26
    4a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a16:	dc 01       	movw	r26, r24
    4a18:	cb 01       	movw	r24, r22
    4a1a:	f8 01       	movw	r30, r16
    4a1c:	91 83       	std	Z+1, r25	; 0x01
    4a1e:	80 83       	st	Z, r24
    4a20:	1f c0       	rjmp	.+62     	; 0x4a60 <EXTI_System+0xfe4>
    4a22:	fe 01       	movw	r30, r28
    4a24:	ed 58       	subi	r30, 0x8D	; 141
    4a26:	ff 4f       	sbci	r31, 0xFF	; 255
    4a28:	80 e9       	ldi	r24, 0x90	; 144
    4a2a:	91 e0       	ldi	r25, 0x01	; 1
    4a2c:	91 83       	std	Z+1, r25	; 0x01
    4a2e:	80 83       	st	Z, r24
    4a30:	fe 01       	movw	r30, r28
    4a32:	ed 58       	subi	r30, 0x8D	; 141
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	80 81       	ld	r24, Z
    4a38:	91 81       	ldd	r25, Z+1	; 0x01
    4a3a:	01 97       	sbiw	r24, 0x01	; 1
    4a3c:	f1 f7       	brne	.-4      	; 0x4a3a <EXTI_System+0xfbe>
    4a3e:	fe 01       	movw	r30, r28
    4a40:	ed 58       	subi	r30, 0x8D	; 141
    4a42:	ff 4f       	sbci	r31, 0xFF	; 255
    4a44:	91 83       	std	Z+1, r25	; 0x01
    4a46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a48:	de 01       	movw	r26, r28
    4a4a:	ab 58       	subi	r26, 0x8B	; 139
    4a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a4e:	fe 01       	movw	r30, r28
    4a50:	eb 58       	subi	r30, 0x8B	; 139
    4a52:	ff 4f       	sbci	r31, 0xFF	; 255
    4a54:	80 81       	ld	r24, Z
    4a56:	91 81       	ldd	r25, Z+1	; 0x01
    4a58:	01 97       	sbiw	r24, 0x01	; 1
    4a5a:	11 96       	adiw	r26, 0x01	; 1
    4a5c:	9c 93       	st	X, r25
    4a5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a60:	fe 01       	movw	r30, r28
    4a62:	eb 58       	subi	r30, 0x8B	; 139
    4a64:	ff 4f       	sbci	r31, 0xFF	; 255
    4a66:	80 81       	ld	r24, Z
    4a68:	91 81       	ldd	r25, Z+1	; 0x01
    4a6a:	00 97       	sbiw	r24, 0x00	; 0
    4a6c:	d1 f6       	brne	.-76     	; 0x4a22 <EXTI_System+0xfa6>
    4a6e:	28 c0       	rjmp	.+80     	; 0x4ac0 <EXTI_System+0x1044>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a70:	8e 01       	movw	r16, r28
    4a72:	0b 58       	subi	r16, 0x8B	; 139
    4a74:	1f 4f       	sbci	r17, 0xFF	; 255
    4a76:	fe 01       	movw	r30, r28
    4a78:	e9 58       	subi	r30, 0x89	; 137
    4a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7c:	60 81       	ld	r22, Z
    4a7e:	71 81       	ldd	r23, Z+1	; 0x01
    4a80:	82 81       	ldd	r24, Z+2	; 0x02
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a88:	dc 01       	movw	r26, r24
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	f8 01       	movw	r30, r16
    4a8e:	91 83       	std	Z+1, r25	; 0x01
    4a90:	80 83       	st	Z, r24
    4a92:	de 01       	movw	r26, r28
    4a94:	af 58       	subi	r26, 0x8F	; 143
    4a96:	bf 4f       	sbci	r27, 0xFF	; 255
    4a98:	fe 01       	movw	r30, r28
    4a9a:	eb 58       	subi	r30, 0x8B	; 139
    4a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9e:	80 81       	ld	r24, Z
    4aa0:	91 81       	ldd	r25, Z+1	; 0x01
    4aa2:	11 96       	adiw	r26, 0x01	; 1
    4aa4:	9c 93       	st	X, r25
    4aa6:	8e 93       	st	-X, r24
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	ef 58       	subi	r30, 0x8F	; 143
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	80 81       	ld	r24, Z
    4ab0:	91 81       	ldd	r25, Z+1	; 0x01
    4ab2:	01 97       	sbiw	r24, 0x01	; 1
    4ab4:	f1 f7       	brne	.-4      	; 0x4ab2 <EXTI_System+0x1036>
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	ef 58       	subi	r30, 0x8F	; 143
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	91 83       	std	Z+1, r25	; 0x01
    4abe:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 0){
    4ac0:	fe 01       	movw	r30, r28
    4ac2:	ea 5f       	subi	r30, 0xFA	; 250
    4ac4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ac6:	80 81       	ld	r24, Z
    4ac8:	88 23       	and	r24, r24
    4aca:	09 f0       	breq	.+2      	; 0x4ace <EXTI_System+0x1052>
    4acc:	c5 c0       	rjmp	.+394    	; 0x4c58 <EXTI_System+0x11dc>
				LCD_displayCharacter('*');
    4ace:	8a e2       	ldi	r24, 0x2A	; 42
    4ad0:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '0';
    4ad4:	80 91 13 01 	lds	r24, 0x0113
    4ad8:	88 2f       	mov	r24, r24
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	fc 01       	movw	r30, r24
    4ade:	eb 5e       	subi	r30, 0xEB	; 235
    4ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ae2:	80 e3       	ldi	r24, 0x30	; 48
    4ae4:	80 83       	st	Z, r24
				c++;
    4ae6:	80 91 13 01 	lds	r24, 0x0113
    4aea:	8f 5f       	subi	r24, 0xFF	; 255
    4aec:	80 93 13 01 	sts	0x0113, r24
    4af0:	fe 01       	movw	r30, r28
    4af2:	e3 59       	subi	r30, 0x93	; 147
    4af4:	ff 4f       	sbci	r31, 0xFF	; 255
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	ac e0       	ldi	r26, 0x0C	; 12
    4afc:	b2 e4       	ldi	r27, 0x42	; 66
    4afe:	80 83       	st	Z, r24
    4b00:	91 83       	std	Z+1, r25	; 0x01
    4b02:	a2 83       	std	Z+2, r26	; 0x02
    4b04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b06:	8e 01       	movw	r16, r28
    4b08:	07 59       	subi	r16, 0x97	; 151
    4b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b0c:	fe 01       	movw	r30, r28
    4b0e:	e3 59       	subi	r30, 0x93	; 147
    4b10:	ff 4f       	sbci	r31, 0xFF	; 255
    4b12:	60 81       	ld	r22, Z
    4b14:	71 81       	ldd	r23, Z+1	; 0x01
    4b16:	82 81       	ldd	r24, Z+2	; 0x02
    4b18:	93 81       	ldd	r25, Z+3	; 0x03
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	4a e7       	ldi	r20, 0x7A	; 122
    4b20:	55 e4       	ldi	r21, 0x45	; 69
    4b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b26:	dc 01       	movw	r26, r24
    4b28:	cb 01       	movw	r24, r22
    4b2a:	f8 01       	movw	r30, r16
    4b2c:	80 83       	st	Z, r24
    4b2e:	91 83       	std	Z+1, r25	; 0x01
    4b30:	a2 83       	std	Z+2, r26	; 0x02
    4b32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b34:	fe 01       	movw	r30, r28
    4b36:	e7 59       	subi	r30, 0x97	; 151
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	60 81       	ld	r22, Z
    4b3c:	71 81       	ldd	r23, Z+1	; 0x01
    4b3e:	82 81       	ldd	r24, Z+2	; 0x02
    4b40:	93 81       	ldd	r25, Z+3	; 0x03
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e8       	ldi	r20, 0x80	; 128
    4b48:	5f e3       	ldi	r21, 0x3F	; 63
    4b4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b4e:	88 23       	and	r24, r24
    4b50:	44 f4       	brge	.+16     	; 0x4b62 <EXTI_System+0x10e6>
		__ticks = 1;
    4b52:	fe 01       	movw	r30, r28
    4b54:	e9 59       	subi	r30, 0x99	; 153
    4b56:	ff 4f       	sbci	r31, 0xFF	; 255
    4b58:	81 e0       	ldi	r24, 0x01	; 1
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	91 83       	std	Z+1, r25	; 0x01
    4b5e:	80 83       	st	Z, r24
    4b60:	64 c0       	rjmp	.+200    	; 0x4c2a <EXTI_System+0x11ae>
	else if (__tmp > 65535)
    4b62:	fe 01       	movw	r30, r28
    4b64:	e7 59       	subi	r30, 0x97	; 151
    4b66:	ff 4f       	sbci	r31, 0xFF	; 255
    4b68:	60 81       	ld	r22, Z
    4b6a:	71 81       	ldd	r23, Z+1	; 0x01
    4b6c:	82 81       	ldd	r24, Z+2	; 0x02
    4b6e:	93 81       	ldd	r25, Z+3	; 0x03
    4b70:	20 e0       	ldi	r18, 0x00	; 0
    4b72:	3f ef       	ldi	r19, 0xFF	; 255
    4b74:	4f e7       	ldi	r20, 0x7F	; 127
    4b76:	57 e4       	ldi	r21, 0x47	; 71
    4b78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b7c:	18 16       	cp	r1, r24
    4b7e:	0c f0       	brlt	.+2      	; 0x4b82 <EXTI_System+0x1106>
    4b80:	43 c0       	rjmp	.+134    	; 0x4c08 <EXTI_System+0x118c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b82:	fe 01       	movw	r30, r28
    4b84:	e3 59       	subi	r30, 0x93	; 147
    4b86:	ff 4f       	sbci	r31, 0xFF	; 255
    4b88:	60 81       	ld	r22, Z
    4b8a:	71 81       	ldd	r23, Z+1	; 0x01
    4b8c:	82 81       	ldd	r24, Z+2	; 0x02
    4b8e:	93 81       	ldd	r25, Z+3	; 0x03
    4b90:	20 e0       	ldi	r18, 0x00	; 0
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	40 e2       	ldi	r20, 0x20	; 32
    4b96:	51 e4       	ldi	r21, 0x41	; 65
    4b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	cb 01       	movw	r24, r22
    4ba0:	8e 01       	movw	r16, r28
    4ba2:	09 59       	subi	r16, 0x99	; 153
    4ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ba6:	bc 01       	movw	r22, r24
    4ba8:	cd 01       	movw	r24, r26
    4baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	f8 01       	movw	r30, r16
    4bb4:	91 83       	std	Z+1, r25	; 0x01
    4bb6:	80 83       	st	Z, r24
    4bb8:	1f c0       	rjmp	.+62     	; 0x4bf8 <EXTI_System+0x117c>
    4bba:	fe 01       	movw	r30, r28
    4bbc:	eb 59       	subi	r30, 0x9B	; 155
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	80 e9       	ldi	r24, 0x90	; 144
    4bc2:	91 e0       	ldi	r25, 0x01	; 1
    4bc4:	91 83       	std	Z+1, r25	; 0x01
    4bc6:	80 83       	st	Z, r24
    4bc8:	fe 01       	movw	r30, r28
    4bca:	eb 59       	subi	r30, 0x9B	; 155
    4bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bce:	80 81       	ld	r24, Z
    4bd0:	91 81       	ldd	r25, Z+1	; 0x01
    4bd2:	01 97       	sbiw	r24, 0x01	; 1
    4bd4:	f1 f7       	brne	.-4      	; 0x4bd2 <EXTI_System+0x1156>
    4bd6:	fe 01       	movw	r30, r28
    4bd8:	eb 59       	subi	r30, 0x9B	; 155
    4bda:	ff 4f       	sbci	r31, 0xFF	; 255
    4bdc:	91 83       	std	Z+1, r25	; 0x01
    4bde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4be0:	de 01       	movw	r26, r28
    4be2:	a9 59       	subi	r26, 0x99	; 153
    4be4:	bf 4f       	sbci	r27, 0xFF	; 255
    4be6:	fe 01       	movw	r30, r28
    4be8:	e9 59       	subi	r30, 0x99	; 153
    4bea:	ff 4f       	sbci	r31, 0xFF	; 255
    4bec:	80 81       	ld	r24, Z
    4bee:	91 81       	ldd	r25, Z+1	; 0x01
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	11 96       	adiw	r26, 0x01	; 1
    4bf4:	9c 93       	st	X, r25
    4bf6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	e9 59       	subi	r30, 0x99	; 153
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	80 81       	ld	r24, Z
    4c00:	91 81       	ldd	r25, Z+1	; 0x01
    4c02:	00 97       	sbiw	r24, 0x00	; 0
    4c04:	d1 f6       	brne	.-76     	; 0x4bba <EXTI_System+0x113e>
    4c06:	28 c0       	rjmp	.+80     	; 0x4c58 <EXTI_System+0x11dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c08:	8e 01       	movw	r16, r28
    4c0a:	09 59       	subi	r16, 0x99	; 153
    4c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c0e:	fe 01       	movw	r30, r28
    4c10:	e7 59       	subi	r30, 0x97	; 151
    4c12:	ff 4f       	sbci	r31, 0xFF	; 255
    4c14:	60 81       	ld	r22, Z
    4c16:	71 81       	ldd	r23, Z+1	; 0x01
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c20:	dc 01       	movw	r26, r24
    4c22:	cb 01       	movw	r24, r22
    4c24:	f8 01       	movw	r30, r16
    4c26:	91 83       	std	Z+1, r25	; 0x01
    4c28:	80 83       	st	Z, r24
    4c2a:	de 01       	movw	r26, r28
    4c2c:	ad 59       	subi	r26, 0x9D	; 157
    4c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4c30:	fe 01       	movw	r30, r28
    4c32:	e9 59       	subi	r30, 0x99	; 153
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	80 81       	ld	r24, Z
    4c38:	91 81       	ldd	r25, Z+1	; 0x01
    4c3a:	11 96       	adiw	r26, 0x01	; 1
    4c3c:	9c 93       	st	X, r25
    4c3e:	8e 93       	st	-X, r24
    4c40:	fe 01       	movw	r30, r28
    4c42:	ed 59       	subi	r30, 0x9D	; 157
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	80 81       	ld	r24, Z
    4c48:	91 81       	ldd	r25, Z+1	; 0x01
    4c4a:	01 97       	sbiw	r24, 0x01	; 1
    4c4c:	f1 f7       	brne	.-4      	; 0x4c4a <EXTI_System+0x11ce>
    4c4e:	fe 01       	movw	r30, r28
    4c50:	ed 59       	subi	r30, 0x9D	; 157
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	91 83       	std	Z+1, r25	; 0x01
    4c56:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == '#'){
    4c58:	fe 01       	movw	r30, r28
    4c5a:	ea 5f       	subi	r30, 0xFA	; 250
    4c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c5e:	80 81       	ld	r24, Z
    4c60:	83 32       	cpi	r24, 0x23	; 35
    4c62:	09 f0       	breq	.+2      	; 0x4c66 <EXTI_System+0x11ea>
    4c64:	c5 c0       	rjmp	.+394    	; 0x4df0 <EXTI_System+0x1374>
				LCD_displayCharacter('*');
    4c66:	8a e2       	ldi	r24, 0x2A	; 42
    4c68:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <LCD_displayCharacter>
				pressed_Keys[c] = '#';
    4c6c:	80 91 13 01 	lds	r24, 0x0113
    4c70:	88 2f       	mov	r24, r24
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	fc 01       	movw	r30, r24
    4c76:	eb 5e       	subi	r30, 0xEB	; 235
    4c78:	fe 4f       	sbci	r31, 0xFE	; 254
    4c7a:	83 e2       	ldi	r24, 0x23	; 35
    4c7c:	80 83       	st	Z, r24
				c++;
    4c7e:	80 91 13 01 	lds	r24, 0x0113
    4c82:	8f 5f       	subi	r24, 0xFF	; 255
    4c84:	80 93 13 01 	sts	0x0113, r24
    4c88:	fe 01       	movw	r30, r28
    4c8a:	e1 5a       	subi	r30, 0xA1	; 161
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	ac e0       	ldi	r26, 0x0C	; 12
    4c94:	b2 e4       	ldi	r27, 0x42	; 66
    4c96:	80 83       	st	Z, r24
    4c98:	91 83       	std	Z+1, r25	; 0x01
    4c9a:	a2 83       	std	Z+2, r26	; 0x02
    4c9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c9e:	8e 01       	movw	r16, r28
    4ca0:	05 5a       	subi	r16, 0xA5	; 165
    4ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca4:	fe 01       	movw	r30, r28
    4ca6:	e1 5a       	subi	r30, 0xA1	; 161
    4ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    4caa:	60 81       	ld	r22, Z
    4cac:	71 81       	ldd	r23, Z+1	; 0x01
    4cae:	82 81       	ldd	r24, Z+2	; 0x02
    4cb0:	93 81       	ldd	r25, Z+3	; 0x03
    4cb2:	20 e0       	ldi	r18, 0x00	; 0
    4cb4:	30 e0       	ldi	r19, 0x00	; 0
    4cb6:	4a e7       	ldi	r20, 0x7A	; 122
    4cb8:	55 e4       	ldi	r21, 0x45	; 69
    4cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cbe:	dc 01       	movw	r26, r24
    4cc0:	cb 01       	movw	r24, r22
    4cc2:	f8 01       	movw	r30, r16
    4cc4:	80 83       	st	Z, r24
    4cc6:	91 83       	std	Z+1, r25	; 0x01
    4cc8:	a2 83       	std	Z+2, r26	; 0x02
    4cca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ccc:	fe 01       	movw	r30, r28
    4cce:	e5 5a       	subi	r30, 0xA5	; 165
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	60 81       	ld	r22, Z
    4cd4:	71 81       	ldd	r23, Z+1	; 0x01
    4cd6:	82 81       	ldd	r24, Z+2	; 0x02
    4cd8:	93 81       	ldd	r25, Z+3	; 0x03
    4cda:	20 e0       	ldi	r18, 0x00	; 0
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	40 e8       	ldi	r20, 0x80	; 128
    4ce0:	5f e3       	ldi	r21, 0x3F	; 63
    4ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ce6:	88 23       	and	r24, r24
    4ce8:	44 f4       	brge	.+16     	; 0x4cfa <EXTI_System+0x127e>
		__ticks = 1;
    4cea:	fe 01       	movw	r30, r28
    4cec:	e7 5a       	subi	r30, 0xA7	; 167
    4cee:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	91 83       	std	Z+1, r25	; 0x01
    4cf6:	80 83       	st	Z, r24
    4cf8:	64 c0       	rjmp	.+200    	; 0x4dc2 <EXTI_System+0x1346>
	else if (__tmp > 65535)
    4cfa:	fe 01       	movw	r30, r28
    4cfc:	e5 5a       	subi	r30, 0xA5	; 165
    4cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4d00:	60 81       	ld	r22, Z
    4d02:	71 81       	ldd	r23, Z+1	; 0x01
    4d04:	82 81       	ldd	r24, Z+2	; 0x02
    4d06:	93 81       	ldd	r25, Z+3	; 0x03
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	3f ef       	ldi	r19, 0xFF	; 255
    4d0c:	4f e7       	ldi	r20, 0x7F	; 127
    4d0e:	57 e4       	ldi	r21, 0x47	; 71
    4d10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d14:	18 16       	cp	r1, r24
    4d16:	0c f0       	brlt	.+2      	; 0x4d1a <EXTI_System+0x129e>
    4d18:	43 c0       	rjmp	.+134    	; 0x4da0 <EXTI_System+0x1324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d1a:	fe 01       	movw	r30, r28
    4d1c:	e1 5a       	subi	r30, 0xA1	; 161
    4d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d20:	60 81       	ld	r22, Z
    4d22:	71 81       	ldd	r23, Z+1	; 0x01
    4d24:	82 81       	ldd	r24, Z+2	; 0x02
    4d26:	93 81       	ldd	r25, Z+3	; 0x03
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	40 e2       	ldi	r20, 0x20	; 32
    4d2e:	51 e4       	ldi	r21, 0x41	; 65
    4d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d34:	dc 01       	movw	r26, r24
    4d36:	cb 01       	movw	r24, r22
    4d38:	8e 01       	movw	r16, r28
    4d3a:	07 5a       	subi	r16, 0xA7	; 167
    4d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d3e:	bc 01       	movw	r22, r24
    4d40:	cd 01       	movw	r24, r26
    4d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d46:	dc 01       	movw	r26, r24
    4d48:	cb 01       	movw	r24, r22
    4d4a:	f8 01       	movw	r30, r16
    4d4c:	91 83       	std	Z+1, r25	; 0x01
    4d4e:	80 83       	st	Z, r24
    4d50:	1f c0       	rjmp	.+62     	; 0x4d90 <EXTI_System+0x1314>
    4d52:	fe 01       	movw	r30, r28
    4d54:	e9 5a       	subi	r30, 0xA9	; 169
    4d56:	ff 4f       	sbci	r31, 0xFF	; 255
    4d58:	80 e9       	ldi	r24, 0x90	; 144
    4d5a:	91 e0       	ldi	r25, 0x01	; 1
    4d5c:	91 83       	std	Z+1, r25	; 0x01
    4d5e:	80 83       	st	Z, r24
    4d60:	fe 01       	movw	r30, r28
    4d62:	e9 5a       	subi	r30, 0xA9	; 169
    4d64:	ff 4f       	sbci	r31, 0xFF	; 255
    4d66:	80 81       	ld	r24, Z
    4d68:	91 81       	ldd	r25, Z+1	; 0x01
    4d6a:	01 97       	sbiw	r24, 0x01	; 1
    4d6c:	f1 f7       	brne	.-4      	; 0x4d6a <EXTI_System+0x12ee>
    4d6e:	fe 01       	movw	r30, r28
    4d70:	e9 5a       	subi	r30, 0xA9	; 169
    4d72:	ff 4f       	sbci	r31, 0xFF	; 255
    4d74:	91 83       	std	Z+1, r25	; 0x01
    4d76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d78:	de 01       	movw	r26, r28
    4d7a:	a7 5a       	subi	r26, 0xA7	; 167
    4d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    4d7e:	fe 01       	movw	r30, r28
    4d80:	e7 5a       	subi	r30, 0xA7	; 167
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	80 81       	ld	r24, Z
    4d86:	91 81       	ldd	r25, Z+1	; 0x01
    4d88:	01 97       	sbiw	r24, 0x01	; 1
    4d8a:	11 96       	adiw	r26, 0x01	; 1
    4d8c:	9c 93       	st	X, r25
    4d8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d90:	fe 01       	movw	r30, r28
    4d92:	e7 5a       	subi	r30, 0xA7	; 167
    4d94:	ff 4f       	sbci	r31, 0xFF	; 255
    4d96:	80 81       	ld	r24, Z
    4d98:	91 81       	ldd	r25, Z+1	; 0x01
    4d9a:	00 97       	sbiw	r24, 0x00	; 0
    4d9c:	d1 f6       	brne	.-76     	; 0x4d52 <EXTI_System+0x12d6>
    4d9e:	28 c0       	rjmp	.+80     	; 0x4df0 <EXTI_System+0x1374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4da0:	8e 01       	movw	r16, r28
    4da2:	07 5a       	subi	r16, 0xA7	; 167
    4da4:	1f 4f       	sbci	r17, 0xFF	; 255
    4da6:	fe 01       	movw	r30, r28
    4da8:	e5 5a       	subi	r30, 0xA5	; 165
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	60 81       	ld	r22, Z
    4dae:	71 81       	ldd	r23, Z+1	; 0x01
    4db0:	82 81       	ldd	r24, Z+2	; 0x02
    4db2:	93 81       	ldd	r25, Z+3	; 0x03
    4db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db8:	dc 01       	movw	r26, r24
    4dba:	cb 01       	movw	r24, r22
    4dbc:	f8 01       	movw	r30, r16
    4dbe:	91 83       	std	Z+1, r25	; 0x01
    4dc0:	80 83       	st	Z, r24
    4dc2:	de 01       	movw	r26, r28
    4dc4:	ab 5a       	subi	r26, 0xAB	; 171
    4dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    4dc8:	fe 01       	movw	r30, r28
    4dca:	e7 5a       	subi	r30, 0xA7	; 167
    4dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dce:	80 81       	ld	r24, Z
    4dd0:	91 81       	ldd	r25, Z+1	; 0x01
    4dd2:	11 96       	adiw	r26, 0x01	; 1
    4dd4:	9c 93       	st	X, r25
    4dd6:	8e 93       	st	-X, r24
    4dd8:	fe 01       	movw	r30, r28
    4dda:	eb 5a       	subi	r30, 0xAB	; 171
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	80 81       	ld	r24, Z
    4de0:	91 81       	ldd	r25, Z+1	; 0x01
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	f1 f7       	brne	.-4      	; 0x4de2 <EXTI_System+0x1366>
    4de6:	fe 01       	movw	r30, r28
    4de8:	eb 5a       	subi	r30, 0xAB	; 171
    4dea:	ff 4f       	sbci	r31, 0xFF	; 255
    4dec:	91 83       	std	Z+1, r25	; 0x01
    4dee:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(c == Password_Length){
    4df0:	80 91 13 01 	lds	r24, 0x0113
    4df4:	86 30       	cpi	r24, 0x06	; 6
    4df6:	11 f0       	breq	.+4      	; 0x4dfc <EXTI_System+0x1380>
    4df8:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <EXTI_System+0x48>
				for(int i = 0; i < 5; i++){
    4dfc:	fe 01       	movw	r30, r28
    4dfe:	ec 5f       	subi	r30, 0xFC	; 252
    4e00:	fe 4f       	sbci	r31, 0xFE	; 254
    4e02:	11 82       	std	Z+1, r1	; 0x01
    4e04:	10 82       	st	Z, r1
    4e06:	fe 01       	movw	r30, r28
    4e08:	ec 5f       	subi	r30, 0xFC	; 252
    4e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e0c:	80 81       	ld	r24, Z
    4e0e:	91 81       	ldd	r25, Z+1	; 0x01
    4e10:	85 30       	cpi	r24, 0x05	; 5
    4e12:	91 05       	cpc	r25, r1
    4e14:	14 f0       	brlt	.+4      	; 0x4e1a <EXTI_System+0x139e>
    4e16:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <EXTI_System+0x48>
					if(pressed_Keys[i] == password[i]){
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	ec 5f       	subi	r30, 0xFC	; 252
    4e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e20:	80 81       	ld	r24, Z
    4e22:	91 81       	ldd	r25, Z+1	; 0x01
    4e24:	fc 01       	movw	r30, r24
    4e26:	eb 5e       	subi	r30, 0xEB	; 235
    4e28:	fe 4f       	sbci	r31, 0xFE	; 254
    4e2a:	20 81       	ld	r18, Z
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	ec 5f       	subi	r30, 0xFC	; 252
    4e30:	fe 4f       	sbci	r31, 0xFE	; 254
    4e32:	80 81       	ld	r24, Z
    4e34:	91 81       	ldd	r25, Z+1	; 0x01
    4e36:	fc 01       	movw	r30, r24
    4e38:	ee 5f       	subi	r30, 0xFE	; 254
    4e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e3c:	80 81       	ld	r24, Z
    4e3e:	28 17       	cp	r18, r24
    4e40:	09 f0       	breq	.+2      	; 0x4e44 <EXTI_System+0x13c8>
    4e42:	0a c4       	rjmp	.+2068   	; 0x5658 <EXTI_System+0x1bdc>
						LCD_ClearScreen();
    4e44:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
						LCD_displayString("Correct Password");
    4e48:	8f eb       	ldi	r24, 0xBF	; 191
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
    4e50:	fe 01       	movw	r30, r28
    4e52:	ef 5a       	subi	r30, 0xAF	; 175
    4e54:	ff 4f       	sbci	r31, 0xFF	; 255
    4e56:	80 e0       	ldi	r24, 0x00	; 0
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	ac e0       	ldi	r26, 0x0C	; 12
    4e5c:	b2 e4       	ldi	r27, 0x42	; 66
    4e5e:	80 83       	st	Z, r24
    4e60:	91 83       	std	Z+1, r25	; 0x01
    4e62:	a2 83       	std	Z+2, r26	; 0x02
    4e64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e66:	8e 01       	movw	r16, r28
    4e68:	03 5b       	subi	r16, 0xB3	; 179
    4e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	ef 5a       	subi	r30, 0xAF	; 175
    4e70:	ff 4f       	sbci	r31, 0xFF	; 255
    4e72:	60 81       	ld	r22, Z
    4e74:	71 81       	ldd	r23, Z+1	; 0x01
    4e76:	82 81       	ldd	r24, Z+2	; 0x02
    4e78:	93 81       	ldd	r25, Z+3	; 0x03
    4e7a:	20 e0       	ldi	r18, 0x00	; 0
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	4a e7       	ldi	r20, 0x7A	; 122
    4e80:	55 e4       	ldi	r21, 0x45	; 69
    4e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e86:	dc 01       	movw	r26, r24
    4e88:	cb 01       	movw	r24, r22
    4e8a:	f8 01       	movw	r30, r16
    4e8c:	80 83       	st	Z, r24
    4e8e:	91 83       	std	Z+1, r25	; 0x01
    4e90:	a2 83       	std	Z+2, r26	; 0x02
    4e92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e94:	fe 01       	movw	r30, r28
    4e96:	e3 5b       	subi	r30, 0xB3	; 179
    4e98:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9a:	60 81       	ld	r22, Z
    4e9c:	71 81       	ldd	r23, Z+1	; 0x01
    4e9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ea0:	93 81       	ldd	r25, Z+3	; 0x03
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	40 e8       	ldi	r20, 0x80	; 128
    4ea8:	5f e3       	ldi	r21, 0x3F	; 63
    4eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4eae:	88 23       	and	r24, r24
    4eb0:	44 f4       	brge	.+16     	; 0x4ec2 <EXTI_System+0x1446>
		__ticks = 1;
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	e5 5b       	subi	r30, 0xB5	; 181
    4eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb8:	81 e0       	ldi	r24, 0x01	; 1
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	91 83       	std	Z+1, r25	; 0x01
    4ebe:	80 83       	st	Z, r24
    4ec0:	64 c0       	rjmp	.+200    	; 0x4f8a <EXTI_System+0x150e>
	else if (__tmp > 65535)
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	e3 5b       	subi	r30, 0xB3	; 179
    4ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec8:	60 81       	ld	r22, Z
    4eca:	71 81       	ldd	r23, Z+1	; 0x01
    4ecc:	82 81       	ldd	r24, Z+2	; 0x02
    4ece:	93 81       	ldd	r25, Z+3	; 0x03
    4ed0:	20 e0       	ldi	r18, 0x00	; 0
    4ed2:	3f ef       	ldi	r19, 0xFF	; 255
    4ed4:	4f e7       	ldi	r20, 0x7F	; 127
    4ed6:	57 e4       	ldi	r21, 0x47	; 71
    4ed8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4edc:	18 16       	cp	r1, r24
    4ede:	0c f0       	brlt	.+2      	; 0x4ee2 <EXTI_System+0x1466>
    4ee0:	43 c0       	rjmp	.+134    	; 0x4f68 <EXTI_System+0x14ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ee2:	fe 01       	movw	r30, r28
    4ee4:	ef 5a       	subi	r30, 0xAF	; 175
    4ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee8:	60 81       	ld	r22, Z
    4eea:	71 81       	ldd	r23, Z+1	; 0x01
    4eec:	82 81       	ldd	r24, Z+2	; 0x02
    4eee:	93 81       	ldd	r25, Z+3	; 0x03
    4ef0:	20 e0       	ldi	r18, 0x00	; 0
    4ef2:	30 e0       	ldi	r19, 0x00	; 0
    4ef4:	40 e2       	ldi	r20, 0x20	; 32
    4ef6:	51 e4       	ldi	r21, 0x41	; 65
    4ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4efc:	dc 01       	movw	r26, r24
    4efe:	cb 01       	movw	r24, r22
    4f00:	8e 01       	movw	r16, r28
    4f02:	05 5b       	subi	r16, 0xB5	; 181
    4f04:	1f 4f       	sbci	r17, 0xFF	; 255
    4f06:	bc 01       	movw	r22, r24
    4f08:	cd 01       	movw	r24, r26
    4f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	f8 01       	movw	r30, r16
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	80 83       	st	Z, r24
    4f18:	1f c0       	rjmp	.+62     	; 0x4f58 <EXTI_System+0x14dc>
    4f1a:	fe 01       	movw	r30, r28
    4f1c:	e7 5b       	subi	r30, 0xB7	; 183
    4f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f20:	80 e9       	ldi	r24, 0x90	; 144
    4f22:	91 e0       	ldi	r25, 0x01	; 1
    4f24:	91 83       	std	Z+1, r25	; 0x01
    4f26:	80 83       	st	Z, r24
    4f28:	fe 01       	movw	r30, r28
    4f2a:	e7 5b       	subi	r30, 0xB7	; 183
    4f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2e:	80 81       	ld	r24, Z
    4f30:	91 81       	ldd	r25, Z+1	; 0x01
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	f1 f7       	brne	.-4      	; 0x4f32 <EXTI_System+0x14b6>
    4f36:	fe 01       	movw	r30, r28
    4f38:	e7 5b       	subi	r30, 0xB7	; 183
    4f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3c:	91 83       	std	Z+1, r25	; 0x01
    4f3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f40:	de 01       	movw	r26, r28
    4f42:	a5 5b       	subi	r26, 0xB5	; 181
    4f44:	bf 4f       	sbci	r27, 0xFF	; 255
    4f46:	fe 01       	movw	r30, r28
    4f48:	e5 5b       	subi	r30, 0xB5	; 181
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	80 81       	ld	r24, Z
    4f4e:	91 81       	ldd	r25, Z+1	; 0x01
    4f50:	01 97       	sbiw	r24, 0x01	; 1
    4f52:	11 96       	adiw	r26, 0x01	; 1
    4f54:	9c 93       	st	X, r25
    4f56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f58:	fe 01       	movw	r30, r28
    4f5a:	e5 5b       	subi	r30, 0xB5	; 181
    4f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5e:	80 81       	ld	r24, Z
    4f60:	91 81       	ldd	r25, Z+1	; 0x01
    4f62:	00 97       	sbiw	r24, 0x00	; 0
    4f64:	d1 f6       	brne	.-76     	; 0x4f1a <EXTI_System+0x149e>
    4f66:	27 c0       	rjmp	.+78     	; 0x4fb6 <EXTI_System+0x153a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f68:	8e 01       	movw	r16, r28
    4f6a:	05 5b       	subi	r16, 0xB5	; 181
    4f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f6e:	fe 01       	movw	r30, r28
    4f70:	e3 5b       	subi	r30, 0xB3	; 179
    4f72:	ff 4f       	sbci	r31, 0xFF	; 255
    4f74:	60 81       	ld	r22, Z
    4f76:	71 81       	ldd	r23, Z+1	; 0x01
    4f78:	82 81       	ldd	r24, Z+2	; 0x02
    4f7a:	93 81       	ldd	r25, Z+3	; 0x03
    4f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f80:	dc 01       	movw	r26, r24
    4f82:	cb 01       	movw	r24, r22
    4f84:	f8 01       	movw	r30, r16
    4f86:	91 83       	std	Z+1, r25	; 0x01
    4f88:	80 83       	st	Z, r24
    4f8a:	de 01       	movw	r26, r28
    4f8c:	a9 5b       	subi	r26, 0xB9	; 185
    4f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f90:	fe 01       	movw	r30, r28
    4f92:	e5 5b       	subi	r30, 0xB5	; 181
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	80 81       	ld	r24, Z
    4f98:	91 81       	ldd	r25, Z+1	; 0x01
    4f9a:	8d 93       	st	X+, r24
    4f9c:	9c 93       	st	X, r25
    4f9e:	fe 01       	movw	r30, r28
    4fa0:	e9 5b       	subi	r30, 0xB9	; 185
    4fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa4:	80 81       	ld	r24, Z
    4fa6:	91 81       	ldd	r25, Z+1	; 0x01
    4fa8:	01 97       	sbiw	r24, 0x01	; 1
    4faa:	f1 f7       	brne	.-4      	; 0x4fa8 <EXTI_System+0x152c>
    4fac:	fe 01       	movw	r30, r28
    4fae:	e9 5b       	subi	r30, 0xB9	; 185
    4fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb2:	91 83       	std	Z+1, r25	; 0x01
    4fb4:	80 83       	st	Z, r24
						_delay_ms(35);
						LCD_ClearScreen();
    4fb6:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>

						// Dc Motor

						LCD_displayString("Welcome to Motor");
    4fba:	80 ed       	ldi	r24, 0xD0	; 208
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
						LCD_GoToXY(1, 0);
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
    4fc6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LCD_GoToXY>
						LCD_displayString("DachBoard");
    4fca:	81 ee       	ldi	r24, 0xE1	; 225
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
						First_Screen();
    4fd2:	0e 94 03 1c 	call	0x3806	; 0x3806 <First_Screen>

						while(1){
							u8 key_Motor = Keypad_GetPressedKey();
    4fd6:	0e 94 96 1a 	call	0x352c	; 0x352c <Keypad_GetPressedKey>
    4fda:	fe 01       	movw	r30, r28
    4fdc:	ed 5f       	subi	r30, 0xFD	; 253
    4fde:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe0:	80 83       	st	Z, r24
							if(key_Motor == 1){
    4fe2:	fe 01       	movw	r30, r28
    4fe4:	ed 5f       	subi	r30, 0xFD	; 253
    4fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe8:	80 81       	ld	r24, Z
    4fea:	81 30       	cpi	r24, 0x01	; 1
    4fec:	09 f0       	breq	.+2      	; 0x4ff0 <EXTI_System+0x1574>
    4fee:	c8 c2       	rjmp	.+1424   	; 0x5580 <EXTI_System+0x1b04>
								Second_Screen();
    4ff0:	0e 94 9e 1c 	call	0x393c	; 0x393c <Second_Screen>
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	ed 5b       	subi	r30, 0xBD	; 189
    4ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	ac e0       	ldi	r26, 0x0C	; 12
    5000:	b2 e4       	ldi	r27, 0x42	; 66
    5002:	80 83       	st	Z, r24
    5004:	91 83       	std	Z+1, r25	; 0x01
    5006:	a2 83       	std	Z+2, r26	; 0x02
    5008:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    500a:	8e 01       	movw	r16, r28
    500c:	01 5c       	subi	r16, 0xC1	; 193
    500e:	1f 4f       	sbci	r17, 0xFF	; 255
    5010:	fe 01       	movw	r30, r28
    5012:	ed 5b       	subi	r30, 0xBD	; 189
    5014:	ff 4f       	sbci	r31, 0xFF	; 255
    5016:	60 81       	ld	r22, Z
    5018:	71 81       	ldd	r23, Z+1	; 0x01
    501a:	82 81       	ldd	r24, Z+2	; 0x02
    501c:	93 81       	ldd	r25, Z+3	; 0x03
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	4a e7       	ldi	r20, 0x7A	; 122
    5024:	55 e4       	ldi	r21, 0x45	; 69
    5026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    502a:	dc 01       	movw	r26, r24
    502c:	cb 01       	movw	r24, r22
    502e:	f8 01       	movw	r30, r16
    5030:	80 83       	st	Z, r24
    5032:	91 83       	std	Z+1, r25	; 0x01
    5034:	a2 83       	std	Z+2, r26	; 0x02
    5036:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5038:	fe 01       	movw	r30, r28
    503a:	ff 96       	adiw	r30, 0x3f	; 63
    503c:	60 81       	ld	r22, Z
    503e:	71 81       	ldd	r23, Z+1	; 0x01
    5040:	82 81       	ldd	r24, Z+2	; 0x02
    5042:	93 81       	ldd	r25, Z+3	; 0x03
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	40 e8       	ldi	r20, 0x80	; 128
    504a:	5f e3       	ldi	r21, 0x3F	; 63
    504c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5050:	88 23       	and	r24, r24
    5052:	2c f4       	brge	.+10     	; 0x505e <EXTI_System+0x15e2>
		__ticks = 1;
    5054:	81 e0       	ldi	r24, 0x01	; 1
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	9e af       	std	Y+62, r25	; 0x3e
    505a:	8d af       	std	Y+61, r24	; 0x3d
    505c:	46 c0       	rjmp	.+140    	; 0x50ea <EXTI_System+0x166e>
	else if (__tmp > 65535)
    505e:	fe 01       	movw	r30, r28
    5060:	ff 96       	adiw	r30, 0x3f	; 63
    5062:	60 81       	ld	r22, Z
    5064:	71 81       	ldd	r23, Z+1	; 0x01
    5066:	82 81       	ldd	r24, Z+2	; 0x02
    5068:	93 81       	ldd	r25, Z+3	; 0x03
    506a:	20 e0       	ldi	r18, 0x00	; 0
    506c:	3f ef       	ldi	r19, 0xFF	; 255
    506e:	4f e7       	ldi	r20, 0x7F	; 127
    5070:	57 e4       	ldi	r21, 0x47	; 71
    5072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5076:	18 16       	cp	r1, r24
    5078:	64 f5       	brge	.+88     	; 0x50d2 <EXTI_System+0x1656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    507a:	fe 01       	movw	r30, r28
    507c:	ed 5b       	subi	r30, 0xBD	; 189
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	60 81       	ld	r22, Z
    5082:	71 81       	ldd	r23, Z+1	; 0x01
    5084:	82 81       	ldd	r24, Z+2	; 0x02
    5086:	93 81       	ldd	r25, Z+3	; 0x03
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	30 e0       	ldi	r19, 0x00	; 0
    508c:	40 e2       	ldi	r20, 0x20	; 32
    508e:	51 e4       	ldi	r21, 0x41	; 65
    5090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	bc 01       	movw	r22, r24
    509a:	cd 01       	movw	r24, r26
    509c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	9e af       	std	Y+62, r25	; 0x3e
    50a6:	8d af       	std	Y+61, r24	; 0x3d
    50a8:	0f c0       	rjmp	.+30     	; 0x50c8 <EXTI_System+0x164c>
    50aa:	80 e9       	ldi	r24, 0x90	; 144
    50ac:	91 e0       	ldi	r25, 0x01	; 1
    50ae:	9c af       	std	Y+60, r25	; 0x3c
    50b0:	8b af       	std	Y+59, r24	; 0x3b
    50b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    50b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    50b6:	01 97       	sbiw	r24, 0x01	; 1
    50b8:	f1 f7       	brne	.-4      	; 0x50b6 <EXTI_System+0x163a>
    50ba:	9c af       	std	Y+60, r25	; 0x3c
    50bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50be:	8d ad       	ldd	r24, Y+61	; 0x3d
    50c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    50c2:	01 97       	sbiw	r24, 0x01	; 1
    50c4:	9e af       	std	Y+62, r25	; 0x3e
    50c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    50ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    50cc:	00 97       	sbiw	r24, 0x00	; 0
    50ce:	69 f7       	brne	.-38     	; 0x50aa <EXTI_System+0x162e>
    50d0:	16 c0       	rjmp	.+44     	; 0x50fe <EXTI_System+0x1682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50d2:	fe 01       	movw	r30, r28
    50d4:	ff 96       	adiw	r30, 0x3f	; 63
    50d6:	60 81       	ld	r22, Z
    50d8:	71 81       	ldd	r23, Z+1	; 0x01
    50da:	82 81       	ldd	r24, Z+2	; 0x02
    50dc:	93 81       	ldd	r25, Z+3	; 0x03
    50de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	9e af       	std	Y+62, r25	; 0x3e
    50e8:	8d af       	std	Y+61, r24	; 0x3d
    50ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    50ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    50ee:	9a af       	std	Y+58, r25	; 0x3a
    50f0:	89 af       	std	Y+57, r24	; 0x39
    50f2:	89 ad       	ldd	r24, Y+57	; 0x39
    50f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    50f6:	01 97       	sbiw	r24, 0x01	; 1
    50f8:	f1 f7       	brne	.-4      	; 0x50f6 <EXTI_System+0x167a>
    50fa:	9a af       	std	Y+58, r25	; 0x3a
    50fc:	89 af       	std	Y+57, r24	; 0x39
								_delay_ms(35);

								while(1){
									u8 Motor_Rotate = Keypad_GetPressedKey();
    50fe:	0e 94 96 1a 	call	0x352c	; 0x352c <Keypad_GetPressedKey>
    5102:	fe 01       	movw	r30, r28
    5104:	ee 5f       	subi	r30, 0xFE	; 254
    5106:	fe 4f       	sbci	r31, 0xFE	; 254
    5108:	80 83       	st	Z, r24
									if(Motor_Rotate == 1){
    510a:	fe 01       	movw	r30, r28
    510c:	ee 5f       	subi	r30, 0xFE	; 254
    510e:	fe 4f       	sbci	r31, 0xFE	; 254
    5110:	80 81       	ld	r24, Z
    5112:	81 30       	cpi	r24, 0x01	; 1
    5114:	09 f0       	breq	.+2      	; 0x5118 <EXTI_System+0x169c>
    5116:	7a c0       	rjmp	.+244    	; 0x520c <EXTI_System+0x1790>
										DC_Motor_Stop(0);
    5118:	80 e0       	ldi	r24, 0x00	; 0
    511a:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <DC_Motor_Stop>
    511e:	80 e0       	ldi	r24, 0x00	; 0
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	a0 ea       	ldi	r26, 0xA0	; 160
    5124:	b1 e4       	ldi	r27, 0x41	; 65
    5126:	8d ab       	std	Y+53, r24	; 0x35
    5128:	9e ab       	std	Y+54, r25	; 0x36
    512a:	af ab       	std	Y+55, r26	; 0x37
    512c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    512e:	6d a9       	ldd	r22, Y+53	; 0x35
    5130:	7e a9       	ldd	r23, Y+54	; 0x36
    5132:	8f a9       	ldd	r24, Y+55	; 0x37
    5134:	98 ad       	ldd	r25, Y+56	; 0x38
    5136:	20 e0       	ldi	r18, 0x00	; 0
    5138:	30 e0       	ldi	r19, 0x00	; 0
    513a:	4a e7       	ldi	r20, 0x7A	; 122
    513c:	55 e4       	ldi	r21, 0x45	; 69
    513e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5142:	dc 01       	movw	r26, r24
    5144:	cb 01       	movw	r24, r22
    5146:	89 ab       	std	Y+49, r24	; 0x31
    5148:	9a ab       	std	Y+50, r25	; 0x32
    514a:	ab ab       	std	Y+51, r26	; 0x33
    514c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    514e:	69 a9       	ldd	r22, Y+49	; 0x31
    5150:	7a a9       	ldd	r23, Y+50	; 0x32
    5152:	8b a9       	ldd	r24, Y+51	; 0x33
    5154:	9c a9       	ldd	r25, Y+52	; 0x34
    5156:	20 e0       	ldi	r18, 0x00	; 0
    5158:	30 e0       	ldi	r19, 0x00	; 0
    515a:	40 e8       	ldi	r20, 0x80	; 128
    515c:	5f e3       	ldi	r21, 0x3F	; 63
    515e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5162:	88 23       	and	r24, r24
    5164:	2c f4       	brge	.+10     	; 0x5170 <EXTI_System+0x16f4>
		__ticks = 1;
    5166:	81 e0       	ldi	r24, 0x01	; 1
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	98 ab       	std	Y+48, r25	; 0x30
    516c:	8f a7       	std	Y+47, r24	; 0x2f
    516e:	3f c0       	rjmp	.+126    	; 0x51ee <EXTI_System+0x1772>
	else if (__tmp > 65535)
    5170:	69 a9       	ldd	r22, Y+49	; 0x31
    5172:	7a a9       	ldd	r23, Y+50	; 0x32
    5174:	8b a9       	ldd	r24, Y+51	; 0x33
    5176:	9c a9       	ldd	r25, Y+52	; 0x34
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	3f ef       	ldi	r19, 0xFF	; 255
    517c:	4f e7       	ldi	r20, 0x7F	; 127
    517e:	57 e4       	ldi	r21, 0x47	; 71
    5180:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5184:	18 16       	cp	r1, r24
    5186:	4c f5       	brge	.+82     	; 0x51da <EXTI_System+0x175e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5188:	6d a9       	ldd	r22, Y+53	; 0x35
    518a:	7e a9       	ldd	r23, Y+54	; 0x36
    518c:	8f a9       	ldd	r24, Y+55	; 0x37
    518e:	98 ad       	ldd	r25, Y+56	; 0x38
    5190:	20 e0       	ldi	r18, 0x00	; 0
    5192:	30 e0       	ldi	r19, 0x00	; 0
    5194:	40 e2       	ldi	r20, 0x20	; 32
    5196:	51 e4       	ldi	r21, 0x41	; 65
    5198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    519c:	dc 01       	movw	r26, r24
    519e:	cb 01       	movw	r24, r22
    51a0:	bc 01       	movw	r22, r24
    51a2:	cd 01       	movw	r24, r26
    51a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	98 ab       	std	Y+48, r25	; 0x30
    51ae:	8f a7       	std	Y+47, r24	; 0x2f
    51b0:	0f c0       	rjmp	.+30     	; 0x51d0 <EXTI_System+0x1754>
    51b2:	80 e9       	ldi	r24, 0x90	; 144
    51b4:	91 e0       	ldi	r25, 0x01	; 1
    51b6:	9e a7       	std	Y+46, r25	; 0x2e
    51b8:	8d a7       	std	Y+45, r24	; 0x2d
    51ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    51bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    51be:	01 97       	sbiw	r24, 0x01	; 1
    51c0:	f1 f7       	brne	.-4      	; 0x51be <EXTI_System+0x1742>
    51c2:	9e a7       	std	Y+46, r25	; 0x2e
    51c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    51c8:	98 a9       	ldd	r25, Y+48	; 0x30
    51ca:	01 97       	sbiw	r24, 0x01	; 1
    51cc:	98 ab       	std	Y+48, r25	; 0x30
    51ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    51d2:	98 a9       	ldd	r25, Y+48	; 0x30
    51d4:	00 97       	sbiw	r24, 0x00	; 0
    51d6:	69 f7       	brne	.-38     	; 0x51b2 <EXTI_System+0x1736>
    51d8:	14 c0       	rjmp	.+40     	; 0x5202 <EXTI_System+0x1786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51da:	69 a9       	ldd	r22, Y+49	; 0x31
    51dc:	7a a9       	ldd	r23, Y+50	; 0x32
    51de:	8b a9       	ldd	r24, Y+51	; 0x33
    51e0:	9c a9       	ldd	r25, Y+52	; 0x34
    51e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e6:	dc 01       	movw	r26, r24
    51e8:	cb 01       	movw	r24, r22
    51ea:	98 ab       	std	Y+48, r25	; 0x30
    51ec:	8f a7       	std	Y+47, r24	; 0x2f
    51ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    51f0:	98 a9       	ldd	r25, Y+48	; 0x30
    51f2:	9c a7       	std	Y+44, r25	; 0x2c
    51f4:	8b a7       	std	Y+43, r24	; 0x2b
    51f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    51f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    51fa:	01 97       	sbiw	r24, 0x01	; 1
    51fc:	f1 f7       	brne	.-4      	; 0x51fa <EXTI_System+0x177e>
    51fe:	9c a7       	std	Y+44, r25	; 0x2c
    5200:	8b a7       	std	Y+43, r24	; 0x2b
										_delay_ms(20);
										DC_Motor_Rotate(0, 0);
    5202:	80 e0       	ldi	r24, 0x00	; 0
    5204:	60 e0       	ldi	r22, 0x00	; 0
    5206:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <DC_Motor_Rotate>
    520a:	79 cf       	rjmp	.-270    	; 0x50fe <EXTI_System+0x1682>
									}

									else if(Motor_Rotate == 2){
    520c:	fe 01       	movw	r30, r28
    520e:	ee 5f       	subi	r30, 0xFE	; 254
    5210:	fe 4f       	sbci	r31, 0xFE	; 254
    5212:	80 81       	ld	r24, Z
    5214:	82 30       	cpi	r24, 0x02	; 2
    5216:	09 f0       	breq	.+2      	; 0x521a <EXTI_System+0x179e>
    5218:	7a c0       	rjmp	.+244    	; 0x530e <EXTI_System+0x1892>
										DC_Motor_Stop(0);
    521a:	80 e0       	ldi	r24, 0x00	; 0
    521c:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <DC_Motor_Stop>
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	a0 ea       	ldi	r26, 0xA0	; 160
    5226:	b1 e4       	ldi	r27, 0x41	; 65
    5228:	8f a3       	std	Y+39, r24	; 0x27
    522a:	98 a7       	std	Y+40, r25	; 0x28
    522c:	a9 a7       	std	Y+41, r26	; 0x29
    522e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5230:	6f a1       	ldd	r22, Y+39	; 0x27
    5232:	78 a5       	ldd	r23, Y+40	; 0x28
    5234:	89 a5       	ldd	r24, Y+41	; 0x29
    5236:	9a a5       	ldd	r25, Y+42	; 0x2a
    5238:	20 e0       	ldi	r18, 0x00	; 0
    523a:	30 e0       	ldi	r19, 0x00	; 0
    523c:	4a e7       	ldi	r20, 0x7A	; 122
    523e:	55 e4       	ldi	r21, 0x45	; 69
    5240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5244:	dc 01       	movw	r26, r24
    5246:	cb 01       	movw	r24, r22
    5248:	8b a3       	std	Y+35, r24	; 0x23
    524a:	9c a3       	std	Y+36, r25	; 0x24
    524c:	ad a3       	std	Y+37, r26	; 0x25
    524e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5250:	6b a1       	ldd	r22, Y+35	; 0x23
    5252:	7c a1       	ldd	r23, Y+36	; 0x24
    5254:	8d a1       	ldd	r24, Y+37	; 0x25
    5256:	9e a1       	ldd	r25, Y+38	; 0x26
    5258:	20 e0       	ldi	r18, 0x00	; 0
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	40 e8       	ldi	r20, 0x80	; 128
    525e:	5f e3       	ldi	r21, 0x3F	; 63
    5260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5264:	88 23       	and	r24, r24
    5266:	2c f4       	brge	.+10     	; 0x5272 <EXTI_System+0x17f6>
		__ticks = 1;
    5268:	81 e0       	ldi	r24, 0x01	; 1
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	9a a3       	std	Y+34, r25	; 0x22
    526e:	89 a3       	std	Y+33, r24	; 0x21
    5270:	3f c0       	rjmp	.+126    	; 0x52f0 <EXTI_System+0x1874>
	else if (__tmp > 65535)
    5272:	6b a1       	ldd	r22, Y+35	; 0x23
    5274:	7c a1       	ldd	r23, Y+36	; 0x24
    5276:	8d a1       	ldd	r24, Y+37	; 0x25
    5278:	9e a1       	ldd	r25, Y+38	; 0x26
    527a:	20 e0       	ldi	r18, 0x00	; 0
    527c:	3f ef       	ldi	r19, 0xFF	; 255
    527e:	4f e7       	ldi	r20, 0x7F	; 127
    5280:	57 e4       	ldi	r21, 0x47	; 71
    5282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5286:	18 16       	cp	r1, r24
    5288:	4c f5       	brge	.+82     	; 0x52dc <EXTI_System+0x1860>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    528a:	6f a1       	ldd	r22, Y+39	; 0x27
    528c:	78 a5       	ldd	r23, Y+40	; 0x28
    528e:	89 a5       	ldd	r24, Y+41	; 0x29
    5290:	9a a5       	ldd	r25, Y+42	; 0x2a
    5292:	20 e0       	ldi	r18, 0x00	; 0
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	40 e2       	ldi	r20, 0x20	; 32
    5298:	51 e4       	ldi	r21, 0x41	; 65
    529a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    529e:	dc 01       	movw	r26, r24
    52a0:	cb 01       	movw	r24, r22
    52a2:	bc 01       	movw	r22, r24
    52a4:	cd 01       	movw	r24, r26
    52a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	9a a3       	std	Y+34, r25	; 0x22
    52b0:	89 a3       	std	Y+33, r24	; 0x21
    52b2:	0f c0       	rjmp	.+30     	; 0x52d2 <EXTI_System+0x1856>
    52b4:	80 e9       	ldi	r24, 0x90	; 144
    52b6:	91 e0       	ldi	r25, 0x01	; 1
    52b8:	98 a3       	std	Y+32, r25	; 0x20
    52ba:	8f 8f       	std	Y+31, r24	; 0x1f
    52bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52be:	98 a1       	ldd	r25, Y+32	; 0x20
    52c0:	01 97       	sbiw	r24, 0x01	; 1
    52c2:	f1 f7       	brne	.-4      	; 0x52c0 <EXTI_System+0x1844>
    52c4:	98 a3       	std	Y+32, r25	; 0x20
    52c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52c8:	89 a1       	ldd	r24, Y+33	; 0x21
    52ca:	9a a1       	ldd	r25, Y+34	; 0x22
    52cc:	01 97       	sbiw	r24, 0x01	; 1
    52ce:	9a a3       	std	Y+34, r25	; 0x22
    52d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52d2:	89 a1       	ldd	r24, Y+33	; 0x21
    52d4:	9a a1       	ldd	r25, Y+34	; 0x22
    52d6:	00 97       	sbiw	r24, 0x00	; 0
    52d8:	69 f7       	brne	.-38     	; 0x52b4 <EXTI_System+0x1838>
    52da:	14 c0       	rjmp	.+40     	; 0x5304 <EXTI_System+0x1888>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52dc:	6b a1       	ldd	r22, Y+35	; 0x23
    52de:	7c a1       	ldd	r23, Y+36	; 0x24
    52e0:	8d a1       	ldd	r24, Y+37	; 0x25
    52e2:	9e a1       	ldd	r25, Y+38	; 0x26
    52e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e8:	dc 01       	movw	r26, r24
    52ea:	cb 01       	movw	r24, r22
    52ec:	9a a3       	std	Y+34, r25	; 0x22
    52ee:	89 a3       	std	Y+33, r24	; 0x21
    52f0:	89 a1       	ldd	r24, Y+33	; 0x21
    52f2:	9a a1       	ldd	r25, Y+34	; 0x22
    52f4:	9e 8f       	std	Y+30, r25	; 0x1e
    52f6:	8d 8f       	std	Y+29, r24	; 0x1d
    52f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52fc:	01 97       	sbiw	r24, 0x01	; 1
    52fe:	f1 f7       	brne	.-4      	; 0x52fc <EXTI_System+0x1880>
    5300:	9e 8f       	std	Y+30, r25	; 0x1e
    5302:	8d 8f       	std	Y+29, r24	; 0x1d
										_delay_ms(20);
										DC_Motor_Rotate(0, 1);
    5304:	80 e0       	ldi	r24, 0x00	; 0
    5306:	61 e0       	ldi	r22, 0x01	; 1
    5308:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <DC_Motor_Rotate>
    530c:	f8 ce       	rjmp	.-528    	; 0x50fe <EXTI_System+0x1682>
									}

									else if(Motor_Rotate == 3){
    530e:	fe 01       	movw	r30, r28
    5310:	ee 5f       	subi	r30, 0xFE	; 254
    5312:	fe 4f       	sbci	r31, 0xFE	; 254
    5314:	80 81       	ld	r24, Z
    5316:	83 30       	cpi	r24, 0x03	; 3
    5318:	09 f0       	breq	.+2      	; 0x531c <EXTI_System+0x18a0>
    531a:	f1 ce       	rjmp	.-542    	; 0x50fe <EXTI_System+0x1682>
										DC_Motor_Stop(0);
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <DC_Motor_Stop>
										First_Screen();
    5322:	0e 94 03 1c 	call	0x3806	; 0x3806 <First_Screen>

										while(1){
											u8 Motor_Back = Keypad_GetPressedKey();
    5326:	0e 94 96 1a 	call	0x352c	; 0x352c <Keypad_GetPressedKey>
    532a:	fe 01       	movw	r30, r28
    532c:	ef 5f       	subi	r30, 0xFF	; 255
    532e:	fe 4f       	sbci	r31, 0xFE	; 254
    5330:	80 83       	st	Z, r24
											if(Motor_Back == 1){
    5332:	fe 01       	movw	r30, r28
    5334:	ef 5f       	subi	r30, 0xFF	; 255
    5336:	fe 4f       	sbci	r31, 0xFE	; 254
    5338:	80 81       	ld	r24, Z
    533a:	81 30       	cpi	r24, 0x01	; 1
    533c:	09 f0       	breq	.+2      	; 0x5340 <EXTI_System+0x18c4>
    533e:	13 c1       	rjmp	.+550    	; 0x5566 <EXTI_System+0x1aea>
												Second_Screen();
    5340:	0e 94 9e 1c 	call	0x393c	; 0x393c <Second_Screen>
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	ac e0       	ldi	r26, 0x0C	; 12
    534a:	b2 e4       	ldi	r27, 0x42	; 66
    534c:	89 8f       	std	Y+25, r24	; 0x19
    534e:	9a 8f       	std	Y+26, r25	; 0x1a
    5350:	ab 8f       	std	Y+27, r26	; 0x1b
    5352:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5354:	69 8d       	ldd	r22, Y+25	; 0x19
    5356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    535a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
    5360:	4a e7       	ldi	r20, 0x7A	; 122
    5362:	55 e4       	ldi	r21, 0x45	; 69
    5364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5368:	dc 01       	movw	r26, r24
    536a:	cb 01       	movw	r24, r22
    536c:	8d 8b       	std	Y+21, r24	; 0x15
    536e:	9e 8b       	std	Y+22, r25	; 0x16
    5370:	af 8b       	std	Y+23, r26	; 0x17
    5372:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5374:	6d 89       	ldd	r22, Y+21	; 0x15
    5376:	7e 89       	ldd	r23, Y+22	; 0x16
    5378:	8f 89       	ldd	r24, Y+23	; 0x17
    537a:	98 8d       	ldd	r25, Y+24	; 0x18
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	40 e8       	ldi	r20, 0x80	; 128
    5382:	5f e3       	ldi	r21, 0x3F	; 63
    5384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5388:	88 23       	and	r24, r24
    538a:	2c f4       	brge	.+10     	; 0x5396 <EXTI_System+0x191a>
		__ticks = 1;
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	9c 8b       	std	Y+20, r25	; 0x14
    5392:	8b 8b       	std	Y+19, r24	; 0x13
    5394:	3f c0       	rjmp	.+126    	; 0x5414 <EXTI_System+0x1998>
	else if (__tmp > 65535)
    5396:	6d 89       	ldd	r22, Y+21	; 0x15
    5398:	7e 89       	ldd	r23, Y+22	; 0x16
    539a:	8f 89       	ldd	r24, Y+23	; 0x17
    539c:	98 8d       	ldd	r25, Y+24	; 0x18
    539e:	20 e0       	ldi	r18, 0x00	; 0
    53a0:	3f ef       	ldi	r19, 0xFF	; 255
    53a2:	4f e7       	ldi	r20, 0x7F	; 127
    53a4:	57 e4       	ldi	r21, 0x47	; 71
    53a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    53aa:	18 16       	cp	r1, r24
    53ac:	4c f5       	brge	.+82     	; 0x5400 <EXTI_System+0x1984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53ae:	69 8d       	ldd	r22, Y+25	; 0x19
    53b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53b6:	20 e0       	ldi	r18, 0x00	; 0
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	40 e2       	ldi	r20, 0x20	; 32
    53bc:	51 e4       	ldi	r21, 0x41	; 65
    53be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53c2:	dc 01       	movw	r26, r24
    53c4:	cb 01       	movw	r24, r22
    53c6:	bc 01       	movw	r22, r24
    53c8:	cd 01       	movw	r24, r26
    53ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53ce:	dc 01       	movw	r26, r24
    53d0:	cb 01       	movw	r24, r22
    53d2:	9c 8b       	std	Y+20, r25	; 0x14
    53d4:	8b 8b       	std	Y+19, r24	; 0x13
    53d6:	0f c0       	rjmp	.+30     	; 0x53f6 <EXTI_System+0x197a>
    53d8:	80 e9       	ldi	r24, 0x90	; 144
    53da:	91 e0       	ldi	r25, 0x01	; 1
    53dc:	9a 8b       	std	Y+18, r25	; 0x12
    53de:	89 8b       	std	Y+17, r24	; 0x11
    53e0:	89 89       	ldd	r24, Y+17	; 0x11
    53e2:	9a 89       	ldd	r25, Y+18	; 0x12
    53e4:	01 97       	sbiw	r24, 0x01	; 1
    53e6:	f1 f7       	brne	.-4      	; 0x53e4 <EXTI_System+0x1968>
    53e8:	9a 8b       	std	Y+18, r25	; 0x12
    53ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53ec:	8b 89       	ldd	r24, Y+19	; 0x13
    53ee:	9c 89       	ldd	r25, Y+20	; 0x14
    53f0:	01 97       	sbiw	r24, 0x01	; 1
    53f2:	9c 8b       	std	Y+20, r25	; 0x14
    53f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53f6:	8b 89       	ldd	r24, Y+19	; 0x13
    53f8:	9c 89       	ldd	r25, Y+20	; 0x14
    53fa:	00 97       	sbiw	r24, 0x00	; 0
    53fc:	69 f7       	brne	.-38     	; 0x53d8 <EXTI_System+0x195c>
    53fe:	14 c0       	rjmp	.+40     	; 0x5428 <EXTI_System+0x19ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5400:	6d 89       	ldd	r22, Y+21	; 0x15
    5402:	7e 89       	ldd	r23, Y+22	; 0x16
    5404:	8f 89       	ldd	r24, Y+23	; 0x17
    5406:	98 8d       	ldd	r25, Y+24	; 0x18
    5408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	9c 8b       	std	Y+20, r25	; 0x14
    5412:	8b 8b       	std	Y+19, r24	; 0x13
    5414:	8b 89       	ldd	r24, Y+19	; 0x13
    5416:	9c 89       	ldd	r25, Y+20	; 0x14
    5418:	98 8b       	std	Y+16, r25	; 0x10
    541a:	8f 87       	std	Y+15, r24	; 0x0f
    541c:	8f 85       	ldd	r24, Y+15	; 0x0f
    541e:	98 89       	ldd	r25, Y+16	; 0x10
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	f1 f7       	brne	.-4      	; 0x5420 <EXTI_System+0x19a4>
    5424:	98 8b       	std	Y+16, r25	; 0x10
    5426:	8f 87       	std	Y+15, r24	; 0x0f
												_delay_ms(35);

												while(1){
													u8 new_System = Keypad_GetPressedKey;
    5428:	86 e9       	ldi	r24, 0x96	; 150
    542a:	9a e1       	ldi	r25, 0x1A	; 26
    542c:	fe 01       	movw	r30, r28
    542e:	e0 50       	subi	r30, 0x00	; 0
    5430:	ff 4f       	sbci	r31, 0xFF	; 255
    5432:	80 83       	st	Z, r24

													if(new_System == 1){
    5434:	fe 01       	movw	r30, r28
    5436:	e0 50       	subi	r30, 0x00	; 0
    5438:	ff 4f       	sbci	r31, 0xFF	; 255
    543a:	80 81       	ld	r24, Z
    543c:	81 30       	cpi	r24, 0x01	; 1
    543e:	29 f4       	brne	.+10     	; 0x544a <EXTI_System+0x19ce>
														DC_Motor_Rotate(0, 0);
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	60 e0       	ldi	r22, 0x00	; 0
    5444:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <DC_Motor_Rotate>
    5448:	ef cf       	rjmp	.-34     	; 0x5428 <EXTI_System+0x19ac>
													}

													else if(new_System == 2){
    544a:	fe 01       	movw	r30, r28
    544c:	e0 50       	subi	r30, 0x00	; 0
    544e:	ff 4f       	sbci	r31, 0xFF	; 255
    5450:	80 81       	ld	r24, Z
    5452:	82 30       	cpi	r24, 0x02	; 2
    5454:	09 f0       	breq	.+2      	; 0x5458 <EXTI_System+0x19dc>
    5456:	7a c0       	rjmp	.+244    	; 0x554c <EXTI_System+0x1ad0>
														DC_Motor_Stop(0);
    5458:	80 e0       	ldi	r24, 0x00	; 0
    545a:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <DC_Motor_Stop>
    545e:	80 e0       	ldi	r24, 0x00	; 0
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	ac e0       	ldi	r26, 0x0C	; 12
    5464:	b2 e4       	ldi	r27, 0x42	; 66
    5466:	8b 87       	std	Y+11, r24	; 0x0b
    5468:	9c 87       	std	Y+12, r25	; 0x0c
    546a:	ad 87       	std	Y+13, r26	; 0x0d
    546c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    546e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5470:	7c 85       	ldd	r23, Y+12	; 0x0c
    5472:	8d 85       	ldd	r24, Y+13	; 0x0d
    5474:	9e 85       	ldd	r25, Y+14	; 0x0e
    5476:	20 e0       	ldi	r18, 0x00	; 0
    5478:	30 e0       	ldi	r19, 0x00	; 0
    547a:	4a e7       	ldi	r20, 0x7A	; 122
    547c:	55 e4       	ldi	r21, 0x45	; 69
    547e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5482:	dc 01       	movw	r26, r24
    5484:	cb 01       	movw	r24, r22
    5486:	8f 83       	std	Y+7, r24	; 0x07
    5488:	98 87       	std	Y+8, r25	; 0x08
    548a:	a9 87       	std	Y+9, r26	; 0x09
    548c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    548e:	6f 81       	ldd	r22, Y+7	; 0x07
    5490:	78 85       	ldd	r23, Y+8	; 0x08
    5492:	89 85       	ldd	r24, Y+9	; 0x09
    5494:	9a 85       	ldd	r25, Y+10	; 0x0a
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	40 e8       	ldi	r20, 0x80	; 128
    549c:	5f e3       	ldi	r21, 0x3F	; 63
    549e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54a2:	88 23       	and	r24, r24
    54a4:	2c f4       	brge	.+10     	; 0x54b0 <EXTI_System+0x1a34>
		__ticks = 1;
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	9e 83       	std	Y+6, r25	; 0x06
    54ac:	8d 83       	std	Y+5, r24	; 0x05
    54ae:	3f c0       	rjmp	.+126    	; 0x552e <EXTI_System+0x1ab2>
	else if (__tmp > 65535)
    54b0:	6f 81       	ldd	r22, Y+7	; 0x07
    54b2:	78 85       	ldd	r23, Y+8	; 0x08
    54b4:	89 85       	ldd	r24, Y+9	; 0x09
    54b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	3f ef       	ldi	r19, 0xFF	; 255
    54bc:	4f e7       	ldi	r20, 0x7F	; 127
    54be:	57 e4       	ldi	r21, 0x47	; 71
    54c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54c4:	18 16       	cp	r1, r24
    54c6:	4c f5       	brge	.+82     	; 0x551a <EXTI_System+0x1a9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    54ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    54cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    54ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    54d0:	20 e0       	ldi	r18, 0x00	; 0
    54d2:	30 e0       	ldi	r19, 0x00	; 0
    54d4:	40 e2       	ldi	r20, 0x20	; 32
    54d6:	51 e4       	ldi	r21, 0x41	; 65
    54d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54dc:	dc 01       	movw	r26, r24
    54de:	cb 01       	movw	r24, r22
    54e0:	bc 01       	movw	r22, r24
    54e2:	cd 01       	movw	r24, r26
    54e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e8:	dc 01       	movw	r26, r24
    54ea:	cb 01       	movw	r24, r22
    54ec:	9e 83       	std	Y+6, r25	; 0x06
    54ee:	8d 83       	std	Y+5, r24	; 0x05
    54f0:	0f c0       	rjmp	.+30     	; 0x5510 <EXTI_System+0x1a94>
    54f2:	80 e9       	ldi	r24, 0x90	; 144
    54f4:	91 e0       	ldi	r25, 0x01	; 1
    54f6:	9c 83       	std	Y+4, r25	; 0x04
    54f8:	8b 83       	std	Y+3, r24	; 0x03
    54fa:	8b 81       	ldd	r24, Y+3	; 0x03
    54fc:	9c 81       	ldd	r25, Y+4	; 0x04
    54fe:	01 97       	sbiw	r24, 0x01	; 1
    5500:	f1 f7       	brne	.-4      	; 0x54fe <EXTI_System+0x1a82>
    5502:	9c 83       	std	Y+4, r25	; 0x04
    5504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5506:	8d 81       	ldd	r24, Y+5	; 0x05
    5508:	9e 81       	ldd	r25, Y+6	; 0x06
    550a:	01 97       	sbiw	r24, 0x01	; 1
    550c:	9e 83       	std	Y+6, r25	; 0x06
    550e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5510:	8d 81       	ldd	r24, Y+5	; 0x05
    5512:	9e 81       	ldd	r25, Y+6	; 0x06
    5514:	00 97       	sbiw	r24, 0x00	; 0
    5516:	69 f7       	brne	.-38     	; 0x54f2 <EXTI_System+0x1a76>
    5518:	14 c0       	rjmp	.+40     	; 0x5542 <EXTI_System+0x1ac6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    551a:	6f 81       	ldd	r22, Y+7	; 0x07
    551c:	78 85       	ldd	r23, Y+8	; 0x08
    551e:	89 85       	ldd	r24, Y+9	; 0x09
    5520:	9a 85       	ldd	r25, Y+10	; 0x0a
    5522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5526:	dc 01       	movw	r26, r24
    5528:	cb 01       	movw	r24, r22
    552a:	9e 83       	std	Y+6, r25	; 0x06
    552c:	8d 83       	std	Y+5, r24	; 0x05
    552e:	8d 81       	ldd	r24, Y+5	; 0x05
    5530:	9e 81       	ldd	r25, Y+6	; 0x06
    5532:	9a 83       	std	Y+2, r25	; 0x02
    5534:	89 83       	std	Y+1, r24	; 0x01
    5536:	89 81       	ldd	r24, Y+1	; 0x01
    5538:	9a 81       	ldd	r25, Y+2	; 0x02
    553a:	01 97       	sbiw	r24, 0x01	; 1
    553c:	f1 f7       	brne	.-4      	; 0x553a <EXTI_System+0x1abe>
    553e:	9a 83       	std	Y+2, r25	; 0x02
    5540:	89 83       	std	Y+1, r24	; 0x01
														_delay_ms(35);
														DC_Motor_Rotate(0, 1);
    5542:	80 e0       	ldi	r24, 0x00	; 0
    5544:	61 e0       	ldi	r22, 0x01	; 1
    5546:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <DC_Motor_Rotate>
    554a:	6e cf       	rjmp	.-292    	; 0x5428 <EXTI_System+0x19ac>
													}

													else if(new_System == 3){
    554c:	fe 01       	movw	r30, r28
    554e:	e0 50       	subi	r30, 0x00	; 0
    5550:	ff 4f       	sbci	r31, 0xFF	; 255
    5552:	80 81       	ld	r24, Z
    5554:	83 30       	cpi	r24, 0x03	; 3
    5556:	09 f0       	breq	.+2      	; 0x555a <EXTI_System+0x1ade>
    5558:	67 cf       	rjmp	.-306    	; 0x5428 <EXTI_System+0x19ac>
														DC_Motor_Stop(0);
    555a:	80 e0       	ldi	r24, 0x00	; 0
    555c:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <DC_Motor_Stop>
														First_Screen();
    5560:	0e 94 03 1c 	call	0x3806	; 0x3806 <First_Screen>
    5564:	61 cf       	rjmp	.-318    	; 0x5428 <EXTI_System+0x19ac>
													}
												}

											}

											else if(Motor_Back == 2){
    5566:	fe 01       	movw	r30, r28
    5568:	ef 5f       	subi	r30, 0xFF	; 255
    556a:	fe 4f       	sbci	r31, 0xFE	; 254
    556c:	80 81       	ld	r24, Z
    556e:	82 30       	cpi	r24, 0x02	; 2
    5570:	09 f0       	breq	.+2      	; 0x5574 <EXTI_System+0x1af8>
    5572:	d9 ce       	rjmp	.-590    	; 0x5326 <EXTI_System+0x18aa>
												DC_Motor_Stop(0);
    5574:	80 e0       	ldi	r24, 0x00	; 0
    5576:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <DC_Motor_Stop>
												LCD_ClearScreen();
    557a:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
    557e:	d3 ce       	rjmp	.-602    	; 0x5326 <EXTI_System+0x18aa>
										}
									}
								}
							}

							else if(key_Motor == 2){
    5580:	fe 01       	movw	r30, r28
    5582:	ed 5f       	subi	r30, 0xFD	; 253
    5584:	fe 4f       	sbci	r31, 0xFE	; 254
    5586:	80 81       	ld	r24, Z
    5588:	82 30       	cpi	r24, 0x02	; 2
    558a:	09 f0       	breq	.+2      	; 0x558e <EXTI_System+0x1b12>
    558c:	58 c0       	rjmp	.+176    	; 0x563e <EXTI_System+0x1bc2>
								StepperAngles_Screen();
    558e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <StepperAngles_Screen>
								while(1){
									u8 Stepper_angle = Keypad_GetPressedKey();
    5592:	0e 94 96 1a 	call	0x352c	; 0x352c <Keypad_GetPressedKey>
    5596:	fe 01       	movw	r30, r28
    5598:	e1 50       	subi	r30, 0x01	; 1
    559a:	ff 4f       	sbci	r31, 0xFF	; 255
    559c:	80 83       	st	Z, r24
									if(Stepper_angle == 1){
    559e:	fe 01       	movw	r30, r28
    55a0:	e1 50       	subi	r30, 0x01	; 1
    55a2:	ff 4f       	sbci	r31, 0xFF	; 255
    55a4:	80 81       	ld	r24, Z
    55a6:	81 30       	cpi	r24, 0x01	; 1
    55a8:	11 f5       	brne	.+68     	; 0x55ee <EXTI_System+0x1b72>
										StepperDirection_Screen();
    55aa:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <StepperDirection_Screen>
										while(1){
											u8 Stepper_Diection90 = Keypad_GetPressedKey();
    55ae:	0e 94 96 1a 	call	0x352c	; 0x352c <Keypad_GetPressedKey>
    55b2:	fe 01       	movw	r30, r28
    55b4:	e2 50       	subi	r30, 0x02	; 2
    55b6:	ff 4f       	sbci	r31, 0xFF	; 255
    55b8:	80 83       	st	Z, r24
											if(Stepper_Diection90 == 1){
    55ba:	fe 01       	movw	r30, r28
    55bc:	e2 50       	subi	r30, 0x02	; 2
    55be:	ff 4f       	sbci	r31, 0xFF	; 255
    55c0:	80 81       	ld	r24, Z
    55c2:	81 30       	cpi	r24, 0x01	; 1
    55c4:	39 f4       	brne	.+14     	; 0x55d4 <EXTI_System+0x1b58>
												SelectStepAngle(90, 0);
    55c6:	8a e5       	ldi	r24, 0x5A	; 90
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	60 e0       	ldi	r22, 0x00	; 0
    55cc:	70 e0       	ldi	r23, 0x00	; 0
    55ce:	0e 94 1e 13 	call	0x263c	; 0x263c <SelectStepAngle>
    55d2:	ed cf       	rjmp	.-38     	; 0x55ae <EXTI_System+0x1b32>
											}

											else if(Stepper_Diection90 == 2){
    55d4:	fe 01       	movw	r30, r28
    55d6:	e2 50       	subi	r30, 0x02	; 2
    55d8:	ff 4f       	sbci	r31, 0xFF	; 255
    55da:	80 81       	ld	r24, Z
    55dc:	82 30       	cpi	r24, 0x02	; 2
    55de:	39 f7       	brne	.-50     	; 0x55ae <EXTI_System+0x1b32>
												SelectStepAngle(90, 1);
    55e0:	8a e5       	ldi	r24, 0x5A	; 90
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	61 e0       	ldi	r22, 0x01	; 1
    55e6:	70 e0       	ldi	r23, 0x00	; 0
    55e8:	0e 94 1e 13 	call	0x263c	; 0x263c <SelectStepAngle>
    55ec:	e0 cf       	rjmp	.-64     	; 0x55ae <EXTI_System+0x1b32>
											}
										}
									}

									else if(Stepper_angle == 2){
    55ee:	fe 01       	movw	r30, r28
    55f0:	e1 50       	subi	r30, 0x01	; 1
    55f2:	ff 4f       	sbci	r31, 0xFF	; 255
    55f4:	80 81       	ld	r24, Z
    55f6:	82 30       	cpi	r24, 0x02	; 2
    55f8:	61 f6       	brne	.-104    	; 0x5592 <EXTI_System+0x1b16>
										StepperDirection_Screen();
    55fa:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <StepperDirection_Screen>
										while(1){
											u8 Stepper_Diection180 = Keypad_GetPressedKey();
    55fe:	0e 94 96 1a 	call	0x352c	; 0x352c <Keypad_GetPressedKey>
    5602:	fe 01       	movw	r30, r28
    5604:	e3 50       	subi	r30, 0x03	; 3
    5606:	ff 4f       	sbci	r31, 0xFF	; 255
    5608:	80 83       	st	Z, r24
											if(Stepper_Diection180 == 1){
    560a:	fe 01       	movw	r30, r28
    560c:	e3 50       	subi	r30, 0x03	; 3
    560e:	ff 4f       	sbci	r31, 0xFF	; 255
    5610:	80 81       	ld	r24, Z
    5612:	81 30       	cpi	r24, 0x01	; 1
    5614:	39 f4       	brne	.+14     	; 0x5624 <EXTI_System+0x1ba8>
												SelectStepAngle(180, 0);
    5616:	84 eb       	ldi	r24, 0xB4	; 180
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	60 e0       	ldi	r22, 0x00	; 0
    561c:	70 e0       	ldi	r23, 0x00	; 0
    561e:	0e 94 1e 13 	call	0x263c	; 0x263c <SelectStepAngle>
    5622:	ed cf       	rjmp	.-38     	; 0x55fe <EXTI_System+0x1b82>
											}

											else if(Stepper_Diection180 == 2){
    5624:	fe 01       	movw	r30, r28
    5626:	e3 50       	subi	r30, 0x03	; 3
    5628:	ff 4f       	sbci	r31, 0xFF	; 255
    562a:	80 81       	ld	r24, Z
    562c:	82 30       	cpi	r24, 0x02	; 2
    562e:	39 f7       	brne	.-50     	; 0x55fe <EXTI_System+0x1b82>
												SelectStepAngle(180, 1);
    5630:	84 eb       	ldi	r24, 0xB4	; 180
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	61 e0       	ldi	r22, 0x01	; 1
    5636:	70 e0       	ldi	r23, 0x00	; 0
    5638:	0e 94 1e 13 	call	0x263c	; 0x263c <SelectStepAngle>
    563c:	e0 cf       	rjmp	.-64     	; 0x55fe <EXTI_System+0x1b82>
										}
									}
								}
							}

							else if(key_Motor == 3){
    563e:	fe 01       	movw	r30, r28
    5640:	ed 5f       	subi	r30, 0xFD	; 253
    5642:	fe 4f       	sbci	r31, 0xFE	; 254
    5644:	80 81       	ld	r24, Z
    5646:	83 30       	cpi	r24, 0x03	; 3
    5648:	09 f0       	breq	.+2      	; 0x564c <EXTI_System+0x1bd0>
    564a:	c5 cc       	rjmp	.-1654   	; 0x4fd6 <EXTI_System+0x155a>
								DC_Motor_Stop(0);
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <DC_Motor_Stop>
								LCD_ClearScreen();
    5652:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
    5656:	bf cc       	rjmp	.-1666   	; 0x4fd6 <EXTI_System+0x155a>
							}
						}
						break;
					}
					else{
						LCD_ClearScreen();
    5658:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
						LCD_displayString("Wrong Password");
    565c:	8b ee       	ldi	r24, 0xEB	; 235
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	0e 94 20 18 	call	0x3040	; 0x3040 <LCD_displayString>
    5664:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <EXTI_System+0x48>
			}

		}

	}
	else if(Local_u8_Flag == 1){
    5668:	80 91 12 01 	lds	r24, 0x0112
    566c:	81 30       	cpi	r24, 0x01	; 1
    566e:	21 f4       	brne	.+8      	; 0x5678 <EXTI_System+0x1bfc>
		Local_u8_Flag = 0;
    5670:	10 92 12 01 	sts	0x0112, r1
		LCD_ClearScreen();
    5674:	0e 94 b6 18 	call	0x316c	; 0x316c <LCD_ClearScreen>
	}

}
    5678:	ca 5f       	subi	r28, 0xFA	; 250
    567a:	de 4f       	sbci	r29, 0xFE	; 254
    567c:	0f b6       	in	r0, 0x3f	; 63
    567e:	f8 94       	cli
    5680:	de bf       	out	0x3e, r29	; 62
    5682:	0f be       	out	0x3f, r0	; 63
    5684:	cd bf       	out	0x3d, r28	; 61
    5686:	cf 91       	pop	r28
    5688:	df 91       	pop	r29
    568a:	1f 91       	pop	r17
    568c:	0f 91       	pop	r16
    568e:	08 95       	ret

00005690 <__prologue_saves__>:
    5690:	2f 92       	push	r2
    5692:	3f 92       	push	r3
    5694:	4f 92       	push	r4
    5696:	5f 92       	push	r5
    5698:	6f 92       	push	r6
    569a:	7f 92       	push	r7
    569c:	8f 92       	push	r8
    569e:	9f 92       	push	r9
    56a0:	af 92       	push	r10
    56a2:	bf 92       	push	r11
    56a4:	cf 92       	push	r12
    56a6:	df 92       	push	r13
    56a8:	ef 92       	push	r14
    56aa:	ff 92       	push	r15
    56ac:	0f 93       	push	r16
    56ae:	1f 93       	push	r17
    56b0:	cf 93       	push	r28
    56b2:	df 93       	push	r29
    56b4:	cd b7       	in	r28, 0x3d	; 61
    56b6:	de b7       	in	r29, 0x3e	; 62
    56b8:	ca 1b       	sub	r28, r26
    56ba:	db 0b       	sbc	r29, r27
    56bc:	0f b6       	in	r0, 0x3f	; 63
    56be:	f8 94       	cli
    56c0:	de bf       	out	0x3e, r29	; 62
    56c2:	0f be       	out	0x3f, r0	; 63
    56c4:	cd bf       	out	0x3d, r28	; 61
    56c6:	09 94       	ijmp

000056c8 <__epilogue_restores__>:
    56c8:	2a 88       	ldd	r2, Y+18	; 0x12
    56ca:	39 88       	ldd	r3, Y+17	; 0x11
    56cc:	48 88       	ldd	r4, Y+16	; 0x10
    56ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    56d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    56d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    56d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    56d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    56d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    56da:	b9 84       	ldd	r11, Y+9	; 0x09
    56dc:	c8 84       	ldd	r12, Y+8	; 0x08
    56de:	df 80       	ldd	r13, Y+7	; 0x07
    56e0:	ee 80       	ldd	r14, Y+6	; 0x06
    56e2:	fd 80       	ldd	r15, Y+5	; 0x05
    56e4:	0c 81       	ldd	r16, Y+4	; 0x04
    56e6:	1b 81       	ldd	r17, Y+3	; 0x03
    56e8:	aa 81       	ldd	r26, Y+2	; 0x02
    56ea:	b9 81       	ldd	r27, Y+1	; 0x01
    56ec:	ce 0f       	add	r28, r30
    56ee:	d1 1d       	adc	r29, r1
    56f0:	0f b6       	in	r0, 0x3f	; 63
    56f2:	f8 94       	cli
    56f4:	de bf       	out	0x3e, r29	; 62
    56f6:	0f be       	out	0x3f, r0	; 63
    56f8:	cd bf       	out	0x3d, r28	; 61
    56fa:	ed 01       	movw	r28, r26
    56fc:	08 95       	ret

000056fe <_exit>:
    56fe:	f8 94       	cli

00005700 <__stop_program>:
    5700:	ff cf       	rjmp	.-2      	; 0x5700 <__stop_program>
