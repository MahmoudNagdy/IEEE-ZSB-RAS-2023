
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00005712  000057a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080010c  0080010c  00005852  2**0
                  ALLOC
  3 .stab         000050d0  00000000  00000000  00005854  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a28  00000000  00000000  0000a924  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c34c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c48c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e245  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000fee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000102cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010a9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__vector_1>
       8:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__vector_2>
       c:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <main>
      8a:	0c 94 87 2b 	jmp	0x570e	; 0x570e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 2b 	jmp	0x56d8	; 0x56d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 2b 	jmp	0x56a0	; 0x56a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 2b 	jmp	0x56d8	; 0x56d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5c 2b 	jmp	0x56b8	; 0x56b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 78 2b 	jmp	0x56f0	; 0x56f0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 60 2b 	jmp	0x56c0	; 0x56c0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7c 2b 	jmp	0x56f8	; 0x56f8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	63 e0       	ldi	r22, 0x03	; 3
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <ActivatePins1+0x6>
     b82:	00 d0       	rcall	.+0      	; 0xb84 <ActivatePins1+0x8>
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	6a 83       	std	Y+2, r22	; 0x02
     b8c:	4b 83       	std	Y+3, r20	; 0x03
     b8e:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	49 81       	ldd	r20, Y+1	; 0x01
     b96:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	4a 81       	ldd	r20, Y+2	; 0x02
     ba0:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	4b 81       	ldd	r20, Y+3	; 0x03
     baa:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	63 e0       	ldi	r22, 0x03	; 3
     bb2:	4c 81       	ldd	r20, Y+4	; 0x04
     bb4:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
}
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <ActivatePins2+0x6>
     bcc:	00 d0       	rcall	.+0      	; 0xbce <ActivatePins2+0x8>
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	6a 83       	std	Y+2, r22	; 0x02
     bd6:	4b 83       	std	Y+3, r20	; 0x03
     bd8:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
     bda:	83 e0       	ldi	r24, 0x03	; 3
     bdc:	63 e0       	ldi	r22, 0x03	; 3
     bde:	4c 81       	ldd	r20, Y+4	; 0x04
     be0:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	62 e0       	ldi	r22, 0x02	; 2
     be8:	4b 81       	ldd	r20, Y+3	; 0x03
     bea:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	4a 81       	ldd	r20, Y+2	; 0x02
     bf4:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	49 81       	ldd	r20, Y+1	; 0x01
     bfe:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
}
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	29 97       	sbiw	r28, 0x09	; 9
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
     c2a:	29 81       	ldd	r18, Y+1	; 0x01
     c2c:	3a 81       	ldd	r19, Y+2	; 0x02
     c2e:	39 87       	std	Y+9, r19	; 0x09
     c30:	28 87       	std	Y+8, r18	; 0x08
     c32:	88 85       	ldd	r24, Y+8	; 0x08
     c34:	99 85       	ldd	r25, Y+9	; 0x09
     c36:	8a 35       	cpi	r24, 0x5A	; 90
     c38:	91 05       	cpc	r25, r1
     c3a:	31 f0       	breq	.+12     	; 0xc48 <SelectStepAngle+0x38>
     c3c:	28 85       	ldd	r18, Y+8	; 0x08
     c3e:	39 85       	ldd	r19, Y+9	; 0x09
     c40:	24 3b       	cpi	r18, 0xB4	; 180
     c42:	31 05       	cpc	r19, r1
     c44:	f1 f0       	breq	.+60     	; 0xc82 <SelectStepAngle+0x72>
     c46:	39 c0       	rjmp	.+114    	; 0xcba <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	3f 83       	std	Y+7, r19	; 0x07
     c50:	2e 83       	std	Y+6, r18	; 0x06
     c52:	8e 81       	ldd	r24, Y+6	; 0x06
     c54:	9f 81       	ldd	r25, Y+7	; 0x07
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	31 f0       	breq	.+12     	; 0xc66 <SelectStepAngle+0x56>
     c5a:	2e 81       	ldd	r18, Y+6	; 0x06
     c5c:	3f 81       	ldd	r19, Y+7	; 0x07
     c5e:	21 30       	cpi	r18, 0x01	; 1
     c60:	31 05       	cpc	r19, r1
     c62:	41 f0       	breq	.+16     	; 0xc74 <SelectStepAngle+0x64>
     c64:	2a c0       	rjmp	.+84     	; 0xcba <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	0e 94 be 05 	call	0xb7c	; 0xb7c <ActivatePins1>
     c72:	23 c0       	rjmp	.+70     	; 0xcba <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ActivatePins2>
     c80:	1c c0       	rjmp	.+56     	; 0xcba <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	3d 83       	std	Y+5, r19	; 0x05
     c8a:	2c 83       	std	Y+4, r18	; 0x04
     c8c:	8c 81       	ldd	r24, Y+4	; 0x04
     c8e:	9d 81       	ldd	r25, Y+5	; 0x05
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	31 f0       	breq	.+12     	; 0xca0 <SelectStepAngle+0x90>
     c94:	2c 81       	ldd	r18, Y+4	; 0x04
     c96:	3d 81       	ldd	r19, Y+5	; 0x05
     c98:	21 30       	cpi	r18, 0x01	; 1
     c9a:	31 05       	cpc	r19, r1
     c9c:	41 f0       	breq	.+16     	; 0xcae <SelectStepAngle+0x9e>
     c9e:	0d c0       	rjmp	.+26     	; 0xcba <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ActivatePins2>
     cac:	06 c0       	rjmp	.+12     	; 0xcba <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	0e 94 be 05 	call	0xb7c	; 0xb7c <ActivatePins1>
						break;
				}
				break;
	}
}
     cba:	29 96       	adiw	r28, 0x09	; 9
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
     cd4:	ea e3       	ldi	r30, 0x3A	; 58
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
     cda:	e7 e3       	ldi	r30, 0x37	; 55
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
     ce0:	e4 e3       	ldi	r30, 0x34	; 52
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 e3       	ldi	r24, 0x30	; 48
     cee:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
     cf0:	eb e3       	ldi	r30, 0x3B	; 59
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
     cf6:	e8 e3       	ldi	r30, 0x38	; 56
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
     cfc:	e5 e3       	ldi	r30, 0x35	; 53
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
     d02:	e2 e3       	ldi	r30, 0x32	; 50
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	10 82       	st	Z, r1

}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	2e 97       	sbiw	r28, 0x0e	; 14
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	8a 83       	std	Y+2, r24	; 0x02
     d24:	6b 83       	std	Y+3, r22	; 0x03
     d26:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	08 f0       	brcs	.+2      	; 0xd34 <DIO_u8SetPinDirection+0x26>
     d32:	0c c1       	rjmp	.+536    	; 0xf4c <DIO_u8SetPinDirection+0x23e>
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	88 30       	cpi	r24, 0x08	; 8
     d38:	08 f0       	brcs	.+2      	; 0xd3c <DIO_u8SetPinDirection+0x2e>
     d3a:	08 c1       	rjmp	.+528    	; 0xf4c <DIO_u8SetPinDirection+0x23e>
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	21 f0       	breq	.+8      	; 0xd4a <DIO_u8SetPinDirection+0x3c>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	88 23       	and	r24, r24
     d46:	09 f0       	breq	.+2      	; 0xd4a <DIO_u8SetPinDirection+0x3c>
     d48:	01 c1       	rjmp	.+514    	; 0xf4c <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3e 87       	std	Y+14, r19	; 0x0e
     d52:	2d 87       	std	Y+13, r18	; 0x0d
     d54:	8d 85       	ldd	r24, Y+13	; 0x0d
     d56:	9e 85       	ldd	r25, Y+14	; 0x0e
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	91 05       	cpc	r25, r1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <DIO_u8SetPinDirection+0x52>
     d5e:	4f c0       	rjmp	.+158    	; 0xdfe <DIO_u8SetPinDirection+0xf0>
     d60:	2d 85       	ldd	r18, Y+13	; 0x0d
     d62:	3e 85       	ldd	r19, Y+14	; 0x0e
     d64:	22 30       	cpi	r18, 0x02	; 2
     d66:	31 05       	cpc	r19, r1
     d68:	2c f4       	brge	.+10     	; 0xd74 <DIO_u8SetPinDirection+0x66>
     d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	71 f0       	breq	.+28     	; 0xd8e <DIO_u8SetPinDirection+0x80>
     d72:	ed c0       	rjmp	.+474    	; 0xf4e <DIO_u8SetPinDirection+0x240>
     d74:	2d 85       	ldd	r18, Y+13	; 0x0d
     d76:	3e 85       	ldd	r19, Y+14	; 0x0e
     d78:	22 30       	cpi	r18, 0x02	; 2
     d7a:	31 05       	cpc	r19, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <DIO_u8SetPinDirection+0x72>
     d7e:	77 c0       	rjmp	.+238    	; 0xe6e <DIO_u8SetPinDirection+0x160>
     d80:	8d 85       	ldd	r24, Y+13	; 0x0d
     d82:	9e 85       	ldd	r25, Y+14	; 0x0e
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	91 05       	cpc	r25, r1
     d88:	09 f4       	brne	.+2      	; 0xd8c <DIO_u8SetPinDirection+0x7e>
     d8a:	a9 c0       	rjmp	.+338    	; 0xede <DIO_u8SetPinDirection+0x1d0>
     d8c:	e0 c0       	rjmp	.+448    	; 0xf4e <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	3c 87       	std	Y+12, r19	; 0x0c
     d96:	2b 87       	std	Y+11, r18	; 0x0b
     d98:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	d1 f0       	breq	.+52     	; 0xdd4 <DIO_u8SetPinDirection+0xc6>
     da0:	2b 85       	ldd	r18, Y+11	; 0x0b
     da2:	3c 85       	ldd	r19, Y+12	; 0x0c
     da4:	21 30       	cpi	r18, 0x01	; 1
     da6:	31 05       	cpc	r19, r1
     da8:	09 f0       	breq	.+2      	; 0xdac <DIO_u8SetPinDirection+0x9e>
     daa:	d1 c0       	rjmp	.+418    	; 0xf4e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     dac:	aa e3       	ldi	r26, 0x3A	; 58
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ea e3       	ldi	r30, 0x3A	; 58
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_u8SetPinDirection+0xbc>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_u8SetPinDirection+0xb8>
     dce:	84 2b       	or	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	bd c0       	rjmp	.+378    	; 0xf4e <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     dd4:	aa e3       	ldi	r26, 0x3A	; 58
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	ea e3       	ldi	r30, 0x3A	; 58
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_u8SetPinDirection+0xe4>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_u8SetPinDirection+0xe0>
     df6:	80 95       	com	r24
     df8:	84 23       	and	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	a8 c0       	rjmp	.+336    	; 0xf4e <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	3a 87       	std	Y+10, r19	; 0x0a
     e06:	29 87       	std	Y+9, r18	; 0x09
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	d1 f0       	breq	.+52     	; 0xe44 <DIO_u8SetPinDirection+0x136>
     e10:	29 85       	ldd	r18, Y+9	; 0x09
     e12:	3a 85       	ldd	r19, Y+10	; 0x0a
     e14:	21 30       	cpi	r18, 0x01	; 1
     e16:	31 05       	cpc	r19, r1
     e18:	09 f0       	breq	.+2      	; 0xe1c <DIO_u8SetPinDirection+0x10e>
     e1a:	99 c0       	rjmp	.+306    	; 0xf4e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     e1c:	a7 e3       	ldi	r26, 0x37	; 55
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e3       	ldi	r30, 0x37	; 55
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_u8SetPinDirection+0x12c>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_u8SetPinDirection+0x128>
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	85 c0       	rjmp	.+266    	; 0xf4e <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     e44:	a7 e3       	ldi	r26, 0x37	; 55
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e3       	ldi	r30, 0x37	; 55
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_u8SetPinDirection+0x154>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_u8SetPinDirection+0x150>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	70 c0       	rjmp	.+224    	; 0xf4e <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	38 87       	std	Y+8, r19	; 0x08
     e76:	2f 83       	std	Y+7, r18	; 0x07
     e78:	8f 81       	ldd	r24, Y+7	; 0x07
     e7a:	98 85       	ldd	r25, Y+8	; 0x08
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	d1 f0       	breq	.+52     	; 0xeb4 <DIO_u8SetPinDirection+0x1a6>
     e80:	2f 81       	ldd	r18, Y+7	; 0x07
     e82:	38 85       	ldd	r19, Y+8	; 0x08
     e84:	21 30       	cpi	r18, 0x01	; 1
     e86:	31 05       	cpc	r19, r1
     e88:	09 f0       	breq	.+2      	; 0xe8c <DIO_u8SetPinDirection+0x17e>
     e8a:	61 c0       	rjmp	.+194    	; 0xf4e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     e8c:	a4 e3       	ldi	r26, 0x34	; 52
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e4 e3       	ldi	r30, 0x34	; 52
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_u8SetPinDirection+0x19c>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_u8SetPinDirection+0x198>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	4d c0       	rjmp	.+154    	; 0xf4e <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     eb4:	a4 e3       	ldi	r26, 0x34	; 52
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e4 e3       	ldi	r30, 0x34	; 52
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_u8SetPinDirection+0x1c4>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_u8SetPinDirection+0x1c0>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	38 c0       	rjmp	.+112    	; 0xf4e <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3e 83       	std	Y+6, r19	; 0x06
     ee6:	2d 83       	std	Y+5, r18	; 0x05
     ee8:	8d 81       	ldd	r24, Y+5	; 0x05
     eea:	9e 81       	ldd	r25, Y+6	; 0x06
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	c9 f0       	breq	.+50     	; 0xf22 <DIO_u8SetPinDirection+0x214>
     ef0:	2d 81       	ldd	r18, Y+5	; 0x05
     ef2:	3e 81       	ldd	r19, Y+6	; 0x06
     ef4:	21 30       	cpi	r18, 0x01	; 1
     ef6:	31 05       	cpc	r19, r1
     ef8:	51 f5       	brne	.+84     	; 0xf4e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     efa:	a1 e3       	ldi	r26, 0x31	; 49
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e3       	ldi	r30, 0x31	; 49
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_u8SetPinDirection+0x20a>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_u8SetPinDirection+0x206>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	16 c0       	rjmp	.+44     	; 0xf4e <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     f22:	a1 e3       	ldi	r26, 0x31	; 49
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e1 e3       	ldi	r30, 0x31	; 49
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_u8SetPinDirection+0x232>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_u8SetPinDirection+0x22e>
     f44:	80 95       	com	r24
     f46:	84 23       	and	r24, r20
     f48:	8c 93       	st	X, r24
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f4c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f50:	2e 96       	adiw	r28, 0x0e	; 14
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	2f 97       	sbiw	r28, 0x0f	; 15
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	8b 83       	std	Y+3, r24	; 0x03
     f78:	6c 83       	std	Y+4, r22	; 0x04
     f7a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	84 30       	cpi	r24, 0x04	; 4
     f84:	08 f0       	brcs	.+2      	; 0xf88 <DIO_u8SetPinValue+0x26>
     f86:	13 c1       	rjmp	.+550    	; 0x11ae <DIO_u8SetPinValue+0x24c>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	88 30       	cpi	r24, 0x08	; 8
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <DIO_u8SetPinValue+0x2e>
     f8e:	0f c1       	rjmp	.+542    	; 0x11ae <DIO_u8SetPinValue+0x24c>
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	88 23       	and	r24, r24
     f94:	21 f0       	breq	.+8      	; 0xf9e <DIO_u8SetPinValue+0x3c>
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	09 f0       	breq	.+2      	; 0xf9e <DIO_u8SetPinValue+0x3c>
     f9c:	08 c1       	rjmp	.+528    	; 0x11ae <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	3f 87       	std	Y+15, r19	; 0x0f
     fa6:	2e 87       	std	Y+14, r18	; 0x0e
     fa8:	8e 85       	ldd	r24, Y+14	; 0x0e
     faa:	9f 85       	ldd	r25, Y+15	; 0x0f
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	91 05       	cpc	r25, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <DIO_u8SetPinValue+0x52>
     fb2:	50 c0       	rjmp	.+160    	; 0x1054 <DIO_u8SetPinValue+0xf2>
     fb4:	2e 85       	ldd	r18, Y+14	; 0x0e
     fb6:	3f 85       	ldd	r19, Y+15	; 0x0f
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	2c f4       	brge	.+10     	; 0xfc8 <DIO_u8SetPinValue+0x66>
     fbe:	8e 85       	ldd	r24, Y+14	; 0x0e
     fc0:	9f 85       	ldd	r25, Y+15	; 0x0f
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	71 f0       	breq	.+28     	; 0xfe2 <DIO_u8SetPinValue+0x80>
     fc6:	f4 c0       	rjmp	.+488    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
     fc8:	2e 85       	ldd	r18, Y+14	; 0x0e
     fca:	3f 85       	ldd	r19, Y+15	; 0x0f
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	31 05       	cpc	r19, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <DIO_u8SetPinValue+0x72>
     fd2:	79 c0       	rjmp	.+242    	; 0x10c6 <DIO_u8SetPinValue+0x164>
     fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd6:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	91 05       	cpc	r25, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <DIO_u8SetPinValue+0x7e>
     fde:	ad c0       	rjmp	.+346    	; 0x113a <DIO_u8SetPinValue+0x1d8>
     fe0:	e7 c0       	rjmp	.+462    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3d 87       	std	Y+13, r19	; 0x0d
     fea:	2c 87       	std	Y+12, r18	; 0x0c
     fec:	8c 85       	ldd	r24, Y+12	; 0x0c
     fee:	9d 85       	ldd	r25, Y+13	; 0x0d
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	c9 f0       	breq	.+50     	; 0x1026 <DIO_u8SetPinValue+0xc4>
     ff4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff6:	3d 85       	ldd	r19, Y+13	; 0x0d
     ff8:	21 30       	cpi	r18, 0x01	; 1
     ffa:	31 05       	cpc	r19, r1
     ffc:	49 f5       	brne	.+82     	; 0x1050 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
     ffe:	ab e3       	ldi	r26, 0x3B	; 59
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	eb e3       	ldi	r30, 0x3B	; 59
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_u8SetPinValue+0xba>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_u8SetPinValue+0xb6>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	c5 c0       	rjmp	.+394    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1026:	ab e3       	ldi	r26, 0x3B	; 59
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	eb e3       	ldi	r30, 0x3B	; 59
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_u8SetPinValue+0xe2>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_u8SetPinValue+0xde>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	b0 c0       	rjmp	.+352    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1050:	1a 82       	std	Y+2, r1	; 0x02
    1052:	ae c0       	rjmp	.+348    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1054:	8d 81       	ldd	r24, Y+5	; 0x05
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3b 87       	std	Y+11, r19	; 0x0b
    105c:	2a 87       	std	Y+10, r18	; 0x0a
    105e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1060:	9b 85       	ldd	r25, Y+11	; 0x0b
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	c9 f0       	breq	.+50     	; 0x1098 <DIO_u8SetPinValue+0x136>
    1066:	2a 85       	ldd	r18, Y+10	; 0x0a
    1068:	3b 85       	ldd	r19, Y+11	; 0x0b
    106a:	21 30       	cpi	r18, 0x01	; 1
    106c:	31 05       	cpc	r19, r1
    106e:	49 f5       	brne	.+82     	; 0x10c2 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1070:	a8 e3       	ldi	r26, 0x38	; 56
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e8 e3       	ldi	r30, 0x38	; 56
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_u8SetPinValue+0x12c>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_u8SetPinValue+0x128>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	8c c0       	rjmp	.+280    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1098:	a8 e3       	ldi	r26, 0x38	; 56
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e3       	ldi	r30, 0x38	; 56
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_u8SetPinValue+0x154>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_u8SetPinValue+0x150>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	77 c0       	rjmp	.+238    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    10c2:	1a 82       	std	Y+2, r1	; 0x02
    10c4:	75 c0       	rjmp	.+234    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    10c6:	8d 81       	ldd	r24, Y+5	; 0x05
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	39 87       	std	Y+9, r19	; 0x09
    10ce:	28 87       	std	Y+8, r18	; 0x08
    10d0:	88 85       	ldd	r24, Y+8	; 0x08
    10d2:	99 85       	ldd	r25, Y+9	; 0x09
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	31 f0       	breq	.+12     	; 0x10e4 <DIO_u8SetPinValue+0x182>
    10d8:	28 85       	ldd	r18, Y+8	; 0x08
    10da:	39 85       	ldd	r19, Y+9	; 0x09
    10dc:	21 30       	cpi	r18, 0x01	; 1
    10de:	31 05       	cpc	r19, r1
    10e0:	b1 f0       	breq	.+44     	; 0x110e <DIO_u8SetPinValue+0x1ac>
    10e2:	29 c0       	rjmp	.+82     	; 0x1136 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinValue+0x1a0>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinValue+0x19c>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	51 c0       	rjmp	.+162    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    110e:	a5 e3       	ldi	r26, 0x35	; 53
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e3       	ldi	r30, 0x35	; 53
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_u8SetPinValue+0x1ca>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_u8SetPinValue+0x1c6>
    1130:	84 2b       	or	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	3d c0       	rjmp	.+122    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1136:	1a 82       	std	Y+2, r1	; 0x02
    1138:	3b c0       	rjmp	.+118    	; 0x11b0 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3f 83       	std	Y+7, r19	; 0x07
    1142:	2e 83       	std	Y+6, r18	; 0x06
    1144:	8e 81       	ldd	r24, Y+6	; 0x06
    1146:	9f 81       	ldd	r25, Y+7	; 0x07
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	31 f0       	breq	.+12     	; 0x1158 <DIO_u8SetPinValue+0x1f6>
    114c:	2e 81       	ldd	r18, Y+6	; 0x06
    114e:	3f 81       	ldd	r19, Y+7	; 0x07
    1150:	21 30       	cpi	r18, 0x01	; 1
    1152:	31 05       	cpc	r19, r1
    1154:	b1 f0       	breq	.+44     	; 0x1182 <DIO_u8SetPinValue+0x220>
    1156:	29 c0       	rjmp	.+82     	; 0x11aa <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1158:	a5 e3       	ldi	r26, 0x35	; 53
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e3       	ldi	r30, 0x35	; 53
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_u8SetPinValue+0x214>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_u8SetPinValue+0x210>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	17 c0       	rjmp	.+46     	; 0x11b0 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1182:	a2 e3       	ldi	r26, 0x32	; 50
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e2 e3       	ldi	r30, 0x32	; 50
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_u8SetPinValue+0x23e>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <DIO_u8SetPinValue+0x23a>
    11a4:	84 2b       	or	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    11aa:	1a 82       	std	Y+2, r1	; 0x02
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    11ae:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11b2:	2f 96       	adiw	r28, 0x0f	; 15
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	28 97       	sbiw	r28, 0x08	; 8
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	6c 83       	std	Y+4, r22	; 0x04
    11dc:	5e 83       	std	Y+6, r21	; 0x06
    11de:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	84 30       	cpi	r24, 0x04	; 4
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <DIO_u8GetPinValue+0x28>
    11ea:	9f c0       	rjmp	.+318    	; 0x132a <DIO_u8GetPinValue+0x166>
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	88 30       	cpi	r24, 0x08	; 8
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <DIO_u8GetPinValue+0x30>
    11f2:	9b c0       	rjmp	.+310    	; 0x132a <DIO_u8GetPinValue+0x166>
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	09 f4       	brne	.+2      	; 0x11fe <DIO_u8GetPinValue+0x3a>
    11fc:	96 c0       	rjmp	.+300    	; 0x132a <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	38 87       	std	Y+8, r19	; 0x08
    1206:	2f 83       	std	Y+7, r18	; 0x07
    1208:	4f 81       	ldd	r20, Y+7	; 0x07
    120a:	58 85       	ldd	r21, Y+8	; 0x08
    120c:	41 30       	cpi	r20, 0x01	; 1
    120e:	51 05       	cpc	r21, r1
    1210:	a9 f1       	breq	.+106    	; 0x127c <DIO_u8GetPinValue+0xb8>
    1212:	8f 81       	ldd	r24, Y+7	; 0x07
    1214:	98 85       	ldd	r25, Y+8	; 0x08
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	91 05       	cpc	r25, r1
    121a:	34 f4       	brge	.+12     	; 0x1228 <DIO_u8GetPinValue+0x64>
    121c:	2f 81       	ldd	r18, Y+7	; 0x07
    121e:	38 85       	ldd	r19, Y+8	; 0x08
    1220:	21 15       	cp	r18, r1
    1222:	31 05       	cpc	r19, r1
    1224:	71 f0       	breq	.+28     	; 0x1242 <DIO_u8GetPinValue+0x7e>
    1226:	82 c0       	rjmp	.+260    	; 0x132c <DIO_u8GetPinValue+0x168>
    1228:	4f 81       	ldd	r20, Y+7	; 0x07
    122a:	58 85       	ldd	r21, Y+8	; 0x08
    122c:	42 30       	cpi	r20, 0x02	; 2
    122e:	51 05       	cpc	r21, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <DIO_u8GetPinValue+0x70>
    1232:	41 c0       	rjmp	.+130    	; 0x12b6 <DIO_u8GetPinValue+0xf2>
    1234:	8f 81       	ldd	r24, Y+7	; 0x07
    1236:	98 85       	ldd	r25, Y+8	; 0x08
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <DIO_u8GetPinValue+0x7c>
    123e:	58 c0       	rjmp	.+176    	; 0x12f0 <DIO_u8GetPinValue+0x12c>
    1240:	75 c0       	rjmp	.+234    	; 0x132c <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1242:	e9 e3       	ldi	r30, 0x39	; 57
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	a9 01       	movw	r20, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_u8GetPinValue+0x96>
    1256:	55 95       	asr	r21
    1258:	47 95       	ror	r20
    125a:	8a 95       	dec	r24
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_u8GetPinValue+0x92>
    125e:	ca 01       	movw	r24, r20
    1260:	81 70       	andi	r24, 0x01	; 1
    1262:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	88 23       	and	r24, r24
    1268:	21 f4       	brne	.+8      	; 0x1272 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    126a:	ed 81       	ldd	r30, Y+5	; 0x05
    126c:	fe 81       	ldd	r31, Y+6	; 0x06
    126e:	10 82       	st	Z, r1
    1270:	5d c0       	rjmp	.+186    	; 0x132c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1272:	ed 81       	ldd	r30, Y+5	; 0x05
    1274:	fe 81       	ldd	r31, Y+6	; 0x06
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 83       	st	Z, r24
    127a:	58 c0       	rjmp	.+176    	; 0x132c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    127c:	e6 e3       	ldi	r30, 0x36	; 54
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a9 01       	movw	r20, r18
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_u8GetPinValue+0xd0>
    1290:	55 95       	asr	r21
    1292:	47 95       	ror	r20
    1294:	8a 95       	dec	r24
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_u8GetPinValue+0xcc>
    1298:	ca 01       	movw	r24, r20
    129a:	81 70       	andi	r24, 0x01	; 1
    129c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	88 23       	and	r24, r24
    12a2:	21 f4       	brne	.+8      	; 0x12ac <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12a4:	ed 81       	ldd	r30, Y+5	; 0x05
    12a6:	fe 81       	ldd	r31, Y+6	; 0x06
    12a8:	10 82       	st	Z, r1
    12aa:	40 c0       	rjmp	.+128    	; 0x132c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12ac:	ed 81       	ldd	r30, Y+5	; 0x05
    12ae:	fe 81       	ldd	r31, Y+6	; 0x06
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 83       	st	Z, r24
    12b4:	3b c0       	rjmp	.+118    	; 0x132c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    12b6:	e3 e3       	ldi	r30, 0x33	; 51
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8GetPinValue+0x10a>
    12ca:	55 95       	asr	r21
    12cc:	47 95       	ror	r20
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_u8GetPinValue+0x106>
    12d2:	ca 01       	movw	r24, r20
    12d4:	81 70       	andi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	88 23       	and	r24, r24
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12de:	ed 81       	ldd	r30, Y+5	; 0x05
    12e0:	fe 81       	ldd	r31, Y+6	; 0x06
    12e2:	10 82       	st	Z, r1
    12e4:	23 c0       	rjmp	.+70     	; 0x132c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12e6:	ed 81       	ldd	r30, Y+5	; 0x05
    12e8:	fe 81       	ldd	r31, Y+6	; 0x06
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 83       	st	Z, r24
    12ee:	1e c0       	rjmp	.+60     	; 0x132c <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    12f0:	e0 e3       	ldi	r30, 0x30	; 48
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_u8GetPinValue+0x144>
    1304:	55 95       	asr	r21
    1306:	47 95       	ror	r20
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_u8GetPinValue+0x140>
    130c:	ca 01       	movw	r24, r20
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	88 23       	and	r24, r24
    1316:	21 f4       	brne	.+8      	; 0x1320 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1318:	ed 81       	ldd	r30, Y+5	; 0x05
    131a:	fe 81       	ldd	r31, Y+6	; 0x06
    131c:	10 82       	st	Z, r1
    131e:	06 c0       	rjmp	.+12     	; 0x132c <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1320:	ed 81       	ldd	r30, Y+5	; 0x05
    1322:	fe 81       	ldd	r31, Y+6	; 0x06
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	80 83       	st	Z, r24
    1328:	01 c0       	rjmp	.+2      	; 0x132c <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    132a:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    132e:	28 96       	adiw	r28, 0x08	; 8
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	2d 97       	sbiw	r28, 0x0d	; 13
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3c 87       	std	Y+12, r19	; 0x0c
    1360:	2b 87       	std	Y+11, r18	; 0x0b
    1362:	8b 85       	ldd	r24, Y+11	; 0x0b
    1364:	9c 85       	ldd	r25, Y+12	; 0x0c
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	71 f1       	breq	.+92     	; 0x13c8 <DIO_u8SetPortDirection+0x88>
    136c:	2b 85       	ldd	r18, Y+11	; 0x0b
    136e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <DIO_u8SetPortDirection+0x40>
    1376:	8b 85       	ldd	r24, Y+11	; 0x0b
    1378:	9c 85       	ldd	r25, Y+12	; 0x0c
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	69 f0       	breq	.+26     	; 0x1398 <DIO_u8SetPortDirection+0x58>
    137e:	6b c0       	rjmp	.+214    	; 0x1456 <DIO_u8SetPortDirection+0x116>
    1380:	2b 85       	ldd	r18, Y+11	; 0x0b
    1382:	3c 85       	ldd	r19, Y+12	; 0x0c
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	b9 f1       	breq	.+110    	; 0x13f8 <DIO_u8SetPortDirection+0xb8>
    138a:	8b 85       	ldd	r24, Y+11	; 0x0b
    138c:	9c 85       	ldd	r25, Y+12	; 0x0c
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <DIO_u8SetPortDirection+0x56>
    1394:	49 c0       	rjmp	.+146    	; 0x1428 <DIO_u8SetPortDirection+0xe8>
    1396:	5f c0       	rjmp	.+190    	; 0x1456 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3a 87       	std	Y+10, r19	; 0x0a
    13a0:	29 87       	std	Y+9, r18	; 0x09
    13a2:	89 85       	ldd	r24, Y+9	; 0x09
    13a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	31 f0       	breq	.+12     	; 0x13b6 <DIO_u8SetPortDirection+0x76>
    13aa:	29 85       	ldd	r18, Y+9	; 0x09
    13ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ae:	21 30       	cpi	r18, 0x01	; 1
    13b0:	31 05       	cpc	r19, r1
    13b2:	29 f0       	breq	.+10     	; 0x13be <DIO_u8SetPortDirection+0x7e>
    13b4:	50 c0       	rjmp	.+160    	; 0x1456 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    13b6:	ea e3       	ldi	r30, 0x3A	; 58
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	10 82       	st	Z, r1
    13bc:	4c c0       	rjmp	.+152    	; 0x1456 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    13be:	ea e3       	ldi	r30, 0x3A	; 58
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	80 83       	st	Z, r24
    13c6:	47 c0       	rjmp	.+142    	; 0x1456 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	38 87       	std	Y+8, r19	; 0x08
    13d0:	2f 83       	std	Y+7, r18	; 0x07
    13d2:	8f 81       	ldd	r24, Y+7	; 0x07
    13d4:	98 85       	ldd	r25, Y+8	; 0x08
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	31 f0       	breq	.+12     	; 0x13e6 <DIO_u8SetPortDirection+0xa6>
    13da:	2f 81       	ldd	r18, Y+7	; 0x07
    13dc:	38 85       	ldd	r19, Y+8	; 0x08
    13de:	21 30       	cpi	r18, 0x01	; 1
    13e0:	31 05       	cpc	r19, r1
    13e2:	29 f0       	breq	.+10     	; 0x13ee <DIO_u8SetPortDirection+0xae>
    13e4:	38 c0       	rjmp	.+112    	; 0x1456 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    13e6:	e7 e3       	ldi	r30, 0x37	; 55
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	10 82       	st	Z, r1
    13ec:	34 c0       	rjmp	.+104    	; 0x1456 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    13ee:	e7 e3       	ldi	r30, 0x37	; 55
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	80 83       	st	Z, r24
    13f6:	2f c0       	rjmp	.+94     	; 0x1456 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3e 83       	std	Y+6, r19	; 0x06
    1400:	2d 83       	std	Y+5, r18	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	31 f0       	breq	.+12     	; 0x1416 <DIO_u8SetPortDirection+0xd6>
    140a:	2d 81       	ldd	r18, Y+5	; 0x05
    140c:	3e 81       	ldd	r19, Y+6	; 0x06
    140e:	21 30       	cpi	r18, 0x01	; 1
    1410:	31 05       	cpc	r19, r1
    1412:	29 f0       	breq	.+10     	; 0x141e <DIO_u8SetPortDirection+0xde>
    1414:	20 c0       	rjmp	.+64     	; 0x1456 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1416:	e4 e3       	ldi	r30, 0x34	; 52
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	10 82       	st	Z, r1
    141c:	1c c0       	rjmp	.+56     	; 0x1456 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    141e:	e4 e3       	ldi	r30, 0x34	; 52
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	80 83       	st	Z, r24
    1426:	17 c0       	rjmp	.+46     	; 0x1456 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3c 83       	std	Y+4, r19	; 0x04
    1430:	2b 83       	std	Y+3, r18	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	31 f0       	breq	.+12     	; 0x1446 <DIO_u8SetPortDirection+0x106>
    143a:	2b 81       	ldd	r18, Y+3	; 0x03
    143c:	3c 81       	ldd	r19, Y+4	; 0x04
    143e:	21 30       	cpi	r18, 0x01	; 1
    1440:	31 05       	cpc	r19, r1
    1442:	29 f0       	breq	.+10     	; 0x144e <DIO_u8SetPortDirection+0x10e>
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    1446:	e1 e3       	ldi	r30, 0x31	; 49
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	10 82       	st	Z, r1
    144c:	04 c0       	rjmp	.+8      	; 0x1456 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    144e:	e1 e3       	ldi	r30, 0x31	; 49
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    1456:	2d 96       	adiw	r28, 0x0d	; 13
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	2d 97       	sbiw	r28, 0x0d	; 13
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	8a 83       	std	Y+2, r24	; 0x02
    147e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	84 30       	cpi	r24, 0x04	; 4
    1488:	08 f0       	brcs	.+2      	; 0x148c <DIO_u8SetPortValue+0x24>
    148a:	80 c0       	rjmp	.+256    	; 0x158c <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	3d 87       	std	Y+13, r19	; 0x0d
    1494:	2c 87       	std	Y+12, r18	; 0x0c
    1496:	8c 85       	ldd	r24, Y+12	; 0x0c
    1498:	9d 85       	ldd	r25, Y+13	; 0x0d
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	91 05       	cpc	r25, r1
    149e:	71 f1       	breq	.+92     	; 0x14fc <DIO_u8SetPortValue+0x94>
    14a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <DIO_u8SetPortValue+0x4c>
    14aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    14ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f0       	breq	.+26     	; 0x14cc <DIO_u8SetPortValue+0x64>
    14b2:	6d c0       	rjmp	.+218    	; 0x158e <DIO_u8SetPortValue+0x126>
    14b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14b6:	3d 85       	ldd	r19, Y+13	; 0x0d
    14b8:	22 30       	cpi	r18, 0x02	; 2
    14ba:	31 05       	cpc	r19, r1
    14bc:	b9 f1       	breq	.+110    	; 0x152c <DIO_u8SetPortValue+0xc4>
    14be:	8c 85       	ldd	r24, Y+12	; 0x0c
    14c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <DIO_u8SetPortValue+0x62>
    14c8:	49 c0       	rjmp	.+146    	; 0x155c <DIO_u8SetPortValue+0xf4>
    14ca:	61 c0       	rjmp	.+194    	; 0x158e <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3b 87       	std	Y+11, r19	; 0x0b
    14d4:	2a 87       	std	Y+10, r18	; 0x0a
    14d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	31 f0       	breq	.+12     	; 0x14ea <DIO_u8SetPortValue+0x82>
    14de:	2a 85       	ldd	r18, Y+10	; 0x0a
    14e0:	3b 85       	ldd	r19, Y+11	; 0x0b
    14e2:	21 30       	cpi	r18, 0x01	; 1
    14e4:	31 05       	cpc	r19, r1
    14e6:	29 f0       	breq	.+10     	; 0x14f2 <DIO_u8SetPortValue+0x8a>
    14e8:	52 c0       	rjmp	.+164    	; 0x158e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	10 82       	st	Z, r1
    14f0:	4e c0       	rjmp	.+156    	; 0x158e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    14f2:	eb e3       	ldi	r30, 0x3B	; 59
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	80 83       	st	Z, r24
    14fa:	49 c0       	rjmp	.+146    	; 0x158e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	39 87       	std	Y+9, r19	; 0x09
    1504:	28 87       	std	Y+8, r18	; 0x08
    1506:	88 85       	ldd	r24, Y+8	; 0x08
    1508:	99 85       	ldd	r25, Y+9	; 0x09
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	31 f0       	breq	.+12     	; 0x151a <DIO_u8SetPortValue+0xb2>
    150e:	28 85       	ldd	r18, Y+8	; 0x08
    1510:	39 85       	ldd	r19, Y+9	; 0x09
    1512:	21 30       	cpi	r18, 0x01	; 1
    1514:	31 05       	cpc	r19, r1
    1516:	29 f0       	breq	.+10     	; 0x1522 <DIO_u8SetPortValue+0xba>
    1518:	3a c0       	rjmp	.+116    	; 0x158e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    151a:	e8 e3       	ldi	r30, 0x38	; 56
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	10 82       	st	Z, r1
    1520:	36 c0       	rjmp	.+108    	; 0x158e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    1522:	e8 e3       	ldi	r30, 0x38	; 56
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	80 83       	st	Z, r24
    152a:	31 c0       	rjmp	.+98     	; 0x158e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3f 83       	std	Y+7, r19	; 0x07
    1534:	2e 83       	std	Y+6, r18	; 0x06
    1536:	8e 81       	ldd	r24, Y+6	; 0x06
    1538:	9f 81       	ldd	r25, Y+7	; 0x07
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	31 f0       	breq	.+12     	; 0x154a <DIO_u8SetPortValue+0xe2>
    153e:	2e 81       	ldd	r18, Y+6	; 0x06
    1540:	3f 81       	ldd	r19, Y+7	; 0x07
    1542:	21 30       	cpi	r18, 0x01	; 1
    1544:	31 05       	cpc	r19, r1
    1546:	29 f0       	breq	.+10     	; 0x1552 <DIO_u8SetPortValue+0xea>
    1548:	22 c0       	rjmp	.+68     	; 0x158e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    154a:	e5 e3       	ldi	r30, 0x35	; 53
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	10 82       	st	Z, r1
    1550:	1e c0       	rjmp	.+60     	; 0x158e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    1552:	e5 e3       	ldi	r30, 0x35	; 53
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	80 83       	st	Z, r24
    155a:	19 c0       	rjmp	.+50     	; 0x158e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3d 83       	std	Y+5, r19	; 0x05
    1564:	2c 83       	std	Y+4, r18	; 0x04
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	31 f0       	breq	.+12     	; 0x157a <DIO_u8SetPortValue+0x112>
    156e:	2c 81       	ldd	r18, Y+4	; 0x04
    1570:	3d 81       	ldd	r19, Y+5	; 0x05
    1572:	21 30       	cpi	r18, 0x01	; 1
    1574:	31 05       	cpc	r19, r1
    1576:	29 f0       	breq	.+10     	; 0x1582 <DIO_u8SetPortValue+0x11a>
    1578:	0a c0       	rjmp	.+20     	; 0x158e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    157a:	e2 e3       	ldi	r30, 0x32	; 50
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	10 82       	st	Z, r1
    1580:	06 c0       	rjmp	.+12     	; 0x158e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    1582:	e2 e3       	ldi	r30, 0x32	; 50
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	80 83       	st	Z, r24
    158a:	01 c0       	rjmp	.+2      	; 0x158e <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    158c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	2d 96       	adiw	r28, 0x0d	; 13
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_u8GetPortValue+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <DIO_u8GetPortValue+0x8>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <DIO_u8GetPortValue+0xa>
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	7c 83       	std	Y+4, r23	; 0x04
    15b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	84 30       	cpi	r24, 0x04	; 4
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <DIO_u8GetPortValue+0x20>
    15c0:	3f c0       	rjmp	.+126    	; 0x1640 <DIO_u8GetPortValue+0x9e>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	d9 f1       	breq	.+118    	; 0x1640 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	3e 83       	std	Y+6, r19	; 0x06
    15d2:	2d 83       	std	Y+5, r18	; 0x05
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	e1 f0       	breq	.+56     	; 0x1616 <DIO_u8GetPortValue+0x74>
    15de:	2d 81       	ldd	r18, Y+5	; 0x05
    15e0:	3e 81       	ldd	r19, Y+6	; 0x06
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <DIO_u8GetPortValue+0x50>
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	61 f0       	breq	.+24     	; 0x1608 <DIO_u8GetPortValue+0x66>
    15f0:	28 c0       	rjmp	.+80     	; 0x1642 <DIO_u8GetPortValue+0xa0>
    15f2:	2d 81       	ldd	r18, Y+5	; 0x05
    15f4:	3e 81       	ldd	r19, Y+6	; 0x06
    15f6:	22 30       	cpi	r18, 0x02	; 2
    15f8:	31 05       	cpc	r19, r1
    15fa:	a1 f0       	breq	.+40     	; 0x1624 <DIO_u8GetPortValue+0x82>
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	91 05       	cpc	r25, r1
    1604:	b1 f0       	breq	.+44     	; 0x1632 <DIO_u8GetPortValue+0x90>
    1606:	1d c0       	rjmp	.+58     	; 0x1642 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1608:	e9 e3       	ldi	r30, 0x39	; 57
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	eb 81       	ldd	r30, Y+3	; 0x03
    1610:	fc 81       	ldd	r31, Y+4	; 0x04
    1612:	80 83       	st	Z, r24
    1614:	16 c0       	rjmp	.+44     	; 0x1642 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1616:	e6 e3       	ldi	r30, 0x36	; 54
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	eb 81       	ldd	r30, Y+3	; 0x03
    161e:	fc 81       	ldd	r31, Y+4	; 0x04
    1620:	80 83       	st	Z, r24
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1624:	e3 e3       	ldi	r30, 0x33	; 51
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	eb 81       	ldd	r30, Y+3	; 0x03
    162c:	fc 81       	ldd	r31, Y+4	; 0x04
    162e:	80 83       	st	Z, r24
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1632:	e0 e3       	ldi	r30, 0x30	; 48
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	eb 81       	ldd	r30, Y+3	; 0x03
    163a:	fc 81       	ldd	r31, Y+4	; 0x04
    163c:	80 83       	st	Z, r24
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1640:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
}
    1644:	26 96       	adiw	r28, 0x06	; 6
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    1656:	8f 92       	push	r8
    1658:	af 92       	push	r10
    165a:	cf 92       	push	r12
    165c:	ef 92       	push	r14
    165e:	0f 93       	push	r16
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	2c 97       	sbiw	r28, 0x0c	; 12
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	6a 83       	std	Y+2, r22	; 0x02
    1678:	4b 83       	std	Y+3, r20	; 0x03
    167a:	2c 83       	std	Y+4, r18	; 0x04
    167c:	0d 83       	std	Y+5, r16	; 0x05
    167e:	ee 82       	std	Y+6, r14	; 0x06
    1680:	cf 82       	std	Y+7, r12	; 0x07
    1682:	a8 86       	std	Y+8, r10	; 0x08
    1684:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3b 87       	std	Y+11, r19	; 0x0b
    168e:	2a 87       	std	Y+10, r18	; 0x0a
    1690:	8a 85       	ldd	r24, Y+10	; 0x0a
    1692:	9b 85       	ldd	r25, Y+11	; 0x0b
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <DIO_u8SetValueToAllPins+0x46>
    169a:	a8 c0       	rjmp	.+336    	; 0x17ec <DIO_u8SetValueToAllPins+0x196>
    169c:	2a 85       	ldd	r18, Y+10	; 0x0a
    169e:	3b 85       	ldd	r19, Y+11	; 0x0b
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <DIO_u8SetValueToAllPins+0x5a>
    16a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	71 f0       	breq	.+28     	; 0x16ca <DIO_u8SetValueToAllPins+0x74>
    16ae:	50 c2       	rjmp	.+1184   	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
    16b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    16b2:	3b 85       	ldd	r19, Y+11	; 0x0b
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <DIO_u8SetValueToAllPins+0x66>
    16ba:	29 c1       	rjmp	.+594    	; 0x190e <DIO_u8SetValueToAllPins+0x2b8>
    16bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16be:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <DIO_u8SetValueToAllPins+0x72>
    16c6:	b4 c1       	rjmp	.+872    	; 0x1a30 <DIO_u8SetValueToAllPins+0x3da>
    16c8:	43 c2       	rjmp	.+1158   	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	41 f4       	brne	.+16     	; 0x16e0 <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    16d0:	ab e3       	ldi	r26, 0x3B	; 59
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	eb e3       	ldi	r30, 0x3B	; 59
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	81 60       	ori	r24, 0x01	; 1
    16dc:	8c 93       	st	X, r24
    16de:	07 c0       	rjmp	.+14     	; 0x16ee <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    16e0:	ab e3       	ldi	r26, 0x3B	; 59
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	eb e3       	ldi	r30, 0x3B	; 59
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8e 7f       	andi	r24, 0xFE	; 254
    16ec:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	41 f4       	brne	.+16     	; 0x1704 <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    16f4:	ab e3       	ldi	r26, 0x3B	; 59
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	eb e3       	ldi	r30, 0x3B	; 59
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	82 60       	ori	r24, 0x02	; 2
    1700:	8c 93       	st	X, r24
    1702:	07 c0       	rjmp	.+14     	; 0x1712 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    1704:	ab e3       	ldi	r26, 0x3B	; 59
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8d 7f       	andi	r24, 0xFD	; 253
    1710:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	41 f4       	brne	.+16     	; 0x1728 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1718:	ab e3       	ldi	r26, 0x3B	; 59
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	eb e3       	ldi	r30, 0x3B	; 59
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	84 60       	ori	r24, 0x04	; 4
    1724:	8c 93       	st	X, r24
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1728:	ab e3       	ldi	r26, 0x3B	; 59
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	eb e3       	ldi	r30, 0x3B	; 59
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8b 7f       	andi	r24, 0xFB	; 251
    1734:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	41 f4       	brne	.+16     	; 0x174c <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    173c:	ab e3       	ldi	r26, 0x3B	; 59
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	eb e3       	ldi	r30, 0x3B	; 59
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	88 60       	ori	r24, 0x08	; 8
    1748:	8c 93       	st	X, r24
    174a:	07 c0       	rjmp	.+14     	; 0x175a <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    174c:	ab e3       	ldi	r26, 0x3B	; 59
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	eb e3       	ldi	r30, 0x3B	; 59
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	87 7f       	andi	r24, 0xF7	; 247
    1758:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    175a:	8e 81       	ldd	r24, Y+6	; 0x06
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	41 f4       	brne	.+16     	; 0x1770 <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    1760:	ab e3       	ldi	r26, 0x3B	; 59
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	eb e3       	ldi	r30, 0x3B	; 59
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	80 61       	ori	r24, 0x10	; 16
    176c:	8c 93       	st	X, r24
    176e:	07 c0       	rjmp	.+14     	; 0x177e <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    1770:	ab e3       	ldi	r26, 0x3B	; 59
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	8f 7e       	andi	r24, 0xEF	; 239
    177c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    177e:	8f 81       	ldd	r24, Y+7	; 0x07
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	41 f4       	brne	.+16     	; 0x1794 <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1784:	ab e3       	ldi	r26, 0x3B	; 59
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	eb e3       	ldi	r30, 0x3B	; 59
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	80 62       	ori	r24, 0x20	; 32
    1790:	8c 93       	st	X, r24
    1792:	07 c0       	rjmp	.+14     	; 0x17a2 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1794:	ab e3       	ldi	r26, 0x3B	; 59
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	eb e3       	ldi	r30, 0x3B	; 59
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8f 7d       	andi	r24, 0xDF	; 223
    17a0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    17a2:	88 85       	ldd	r24, Y+8	; 0x08
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	41 f4       	brne	.+16     	; 0x17b8 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    17a8:	ab e3       	ldi	r26, 0x3B	; 59
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	eb e3       	ldi	r30, 0x3B	; 59
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	80 64       	ori	r24, 0x40	; 64
    17b4:	8c 93       	st	X, r24
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    17b8:	ab e3       	ldi	r26, 0x3B	; 59
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	eb e3       	ldi	r30, 0x3B	; 59
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 7b       	andi	r24, 0xBF	; 191
    17c4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	41 f4       	brne	.+16     	; 0x17dc <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    17cc:	ab e3       	ldi	r26, 0x3B	; 59
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	eb e3       	ldi	r30, 0x3B	; 59
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	80 68       	ori	r24, 0x80	; 128
    17d8:	8c 93       	st	X, r24
    17da:	ba c1       	rjmp	.+884    	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    17dc:	ab e3       	ldi	r26, 0x3B	; 59
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e3       	ldi	r30, 0x3B	; 59
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 77       	andi	r24, 0x7F	; 127
    17e8:	8c 93       	st	X, r24
    17ea:	b2 c1       	rjmp	.+868    	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	41 f4       	brne	.+16     	; 0x1802 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    17f2:	a8 e3       	ldi	r26, 0x38	; 56
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e8 e3       	ldi	r30, 0x38	; 56
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	81 60       	ori	r24, 0x01	; 1
    17fe:	8c 93       	st	X, r24
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    1802:	a8 e3       	ldi	r26, 0x38	; 56
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e8 e3       	ldi	r30, 0x38	; 56
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8e 7f       	andi	r24, 0xFE	; 254
    180e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	41 f4       	brne	.+16     	; 0x1826 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1816:	a8 e3       	ldi	r26, 0x38	; 56
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e8 e3       	ldi	r30, 0x38	; 56
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	8c 93       	st	X, r24
    1824:	07 c0       	rjmp	.+14     	; 0x1834 <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1826:	a8 e3       	ldi	r26, 0x38	; 56
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e8 e3       	ldi	r30, 0x38	; 56
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	8d 7f       	andi	r24, 0xFD	; 253
    1832:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	41 f4       	brne	.+16     	; 0x184a <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    183a:	a8 e3       	ldi	r26, 0x38	; 56
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e8 e3       	ldi	r30, 0x38	; 56
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	84 60       	ori	r24, 0x04	; 4
    1846:	8c 93       	st	X, r24
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    184a:	a8 e3       	ldi	r26, 0x38	; 56
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e8 e3       	ldi	r30, 0x38	; 56
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8b 7f       	andi	r24, 0xFB	; 251
    1856:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	41 f4       	brne	.+16     	; 0x186e <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    185e:	a8 e3       	ldi	r26, 0x38	; 56
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e8 e3       	ldi	r30, 0x38	; 56
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	88 60       	ori	r24, 0x08	; 8
    186a:	8c 93       	st	X, r24
    186c:	07 c0       	rjmp	.+14     	; 0x187c <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    186e:	a8 e3       	ldi	r26, 0x38	; 56
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e8 e3       	ldi	r30, 0x38	; 56
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	87 7f       	andi	r24, 0xF7	; 247
    187a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	41 f4       	brne	.+16     	; 0x1892 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    1882:	a8 e3       	ldi	r26, 0x38	; 56
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e8 e3       	ldi	r30, 0x38	; 56
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	80 61       	ori	r24, 0x10	; 16
    188e:	8c 93       	st	X, r24
    1890:	07 c0       	rjmp	.+14     	; 0x18a0 <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    1892:	a8 e3       	ldi	r26, 0x38	; 56
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e8 e3       	ldi	r30, 0x38	; 56
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 7e       	andi	r24, 0xEF	; 239
    189e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    18a0:	8f 81       	ldd	r24, Y+7	; 0x07
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	41 f4       	brne	.+16     	; 0x18b6 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    18a6:	a8 e3       	ldi	r26, 0x38	; 56
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e8 e3       	ldi	r30, 0x38	; 56
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 62       	ori	r24, 0x20	; 32
    18b2:	8c 93       	st	X, r24
    18b4:	07 c0       	rjmp	.+14     	; 0x18c4 <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    18b6:	a8 e3       	ldi	r26, 0x38	; 56
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e8 e3       	ldi	r30, 0x38	; 56
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8f 7d       	andi	r24, 0xDF	; 223
    18c2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    18c4:	88 85       	ldd	r24, Y+8	; 0x08
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	41 f4       	brne	.+16     	; 0x18da <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    18ca:	a8 e3       	ldi	r26, 0x38	; 56
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e8 e3       	ldi	r30, 0x38	; 56
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	80 64       	ori	r24, 0x40	; 64
    18d6:	8c 93       	st	X, r24
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    18da:	a8 e3       	ldi	r26, 0x38	; 56
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e8 e3       	ldi	r30, 0x38	; 56
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 7b       	andi	r24, 0xBF	; 191
    18e6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	41 f4       	brne	.+16     	; 0x18fe <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    18ee:	a8 e3       	ldi	r26, 0x38	; 56
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e8 e3       	ldi	r30, 0x38	; 56
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	8c 93       	st	X, r24
    18fc:	29 c1       	rjmp	.+594    	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    18fe:	a8 e3       	ldi	r26, 0x38	; 56
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e8 e3       	ldi	r30, 0x38	; 56
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8f 77       	andi	r24, 0x7F	; 127
    190a:	8c 93       	st	X, r24
    190c:	21 c1       	rjmp	.+578    	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	81 30       	cpi	r24, 0x01	; 1
    1912:	41 f4       	brne	.+16     	; 0x1924 <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    1914:	a5 e3       	ldi	r26, 0x35	; 53
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e5 e3       	ldi	r30, 0x35	; 53
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	81 60       	ori	r24, 0x01	; 1
    1920:	8c 93       	st	X, r24
    1922:	07 c0       	rjmp	.+14     	; 0x1932 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    1924:	a5 e3       	ldi	r26, 0x35	; 53
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e5 e3       	ldi	r30, 0x35	; 53
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8e 7f       	andi	r24, 0xFE	; 254
    1930:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	41 f4       	brne	.+16     	; 0x1948 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    1938:	a5 e3       	ldi	r26, 0x35	; 53
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e5 e3       	ldi	r30, 0x35	; 53
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	82 60       	ori	r24, 0x02	; 2
    1944:	8c 93       	st	X, r24
    1946:	07 c0       	rjmp	.+14     	; 0x1956 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    1948:	a5 e3       	ldi	r26, 0x35	; 53
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e5 e3       	ldi	r30, 0x35	; 53
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8d 7f       	andi	r24, 0xFD	; 253
    1954:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	41 f4       	brne	.+16     	; 0x196c <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    195c:	a5 e3       	ldi	r26, 0x35	; 53
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e3       	ldi	r30, 0x35	; 53
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	84 60       	ori	r24, 0x04	; 4
    1968:	8c 93       	st	X, r24
    196a:	07 c0       	rjmp	.+14     	; 0x197a <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    196c:	a5 e3       	ldi	r26, 0x35	; 53
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e3       	ldi	r30, 0x35	; 53
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8b 7f       	andi	r24, 0xFB	; 251
    1978:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	41 f4       	brne	.+16     	; 0x1990 <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    1980:	a5 e3       	ldi	r26, 0x35	; 53
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e3       	ldi	r30, 0x35	; 53
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	88 60       	ori	r24, 0x08	; 8
    198c:	8c 93       	st	X, r24
    198e:	07 c0       	rjmp	.+14     	; 0x199e <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    1990:	a5 e3       	ldi	r26, 0x35	; 53
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e5 e3       	ldi	r30, 0x35	; 53
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	87 7f       	andi	r24, 0xF7	; 247
    199c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	41 f4       	brne	.+16     	; 0x19b4 <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    19a4:	a5 e3       	ldi	r26, 0x35	; 53
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e5 e3       	ldi	r30, 0x35	; 53
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 61       	ori	r24, 0x10	; 16
    19b0:	8c 93       	st	X, r24
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    19b4:	a5 e3       	ldi	r26, 0x35	; 53
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e5 e3       	ldi	r30, 0x35	; 53
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	8f 7e       	andi	r24, 0xEF	; 239
    19c0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    19c2:	8f 81       	ldd	r24, Y+7	; 0x07
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	41 f4       	brne	.+16     	; 0x19d8 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    19c8:	a5 e3       	ldi	r26, 0x35	; 53
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e5 e3       	ldi	r30, 0x35	; 53
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	80 62       	ori	r24, 0x20	; 32
    19d4:	8c 93       	st	X, r24
    19d6:	07 c0       	rjmp	.+14     	; 0x19e6 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    19d8:	a5 e3       	ldi	r26, 0x35	; 53
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e3       	ldi	r30, 0x35	; 53
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8f 7d       	andi	r24, 0xDF	; 223
    19e4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    19e6:	88 85       	ldd	r24, Y+8	; 0x08
    19e8:	81 30       	cpi	r24, 0x01	; 1
    19ea:	41 f4       	brne	.+16     	; 0x19fc <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    19ec:	a5 e3       	ldi	r26, 0x35	; 53
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e5 e3       	ldi	r30, 0x35	; 53
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 64       	ori	r24, 0x40	; 64
    19f8:	8c 93       	st	X, r24
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    19fc:	a5 e3       	ldi	r26, 0x35	; 53
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e5 e3       	ldi	r30, 0x35	; 53
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8f 7b       	andi	r24, 0xBF	; 191
    1a08:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	41 f4       	brne	.+16     	; 0x1a20 <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    1a10:	a5 e3       	ldi	r26, 0x35	; 53
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e5 e3       	ldi	r30, 0x35	; 53
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 68       	ori	r24, 0x80	; 128
    1a1c:	8c 93       	st	X, r24
    1a1e:	98 c0       	rjmp	.+304    	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    1a20:	a5 e3       	ldi	r26, 0x35	; 53
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 77       	andi	r24, 0x7F	; 127
    1a2c:	8c 93       	st	X, r24
    1a2e:	90 c0       	rjmp	.+288    	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	41 f4       	brne	.+16     	; 0x1a46 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    1a36:	a2 e3       	ldi	r26, 0x32	; 50
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e2 e3       	ldi	r30, 0x32	; 50
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	8c 93       	st	X, r24
    1a44:	07 c0       	rjmp	.+14     	; 0x1a54 <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    1a46:	a2 e3       	ldi	r26, 0x32	; 50
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e2 e3       	ldi	r30, 0x32	; 50
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8e 7f       	andi	r24, 0xFE	; 254
    1a52:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	41 f4       	brne	.+16     	; 0x1a6a <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    1a5a:	a2 e3       	ldi	r26, 0x32	; 50
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e2 e3       	ldi	r30, 0x32	; 50
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	82 60       	ori	r24, 0x02	; 2
    1a66:	8c 93       	st	X, r24
    1a68:	07 c0       	rjmp	.+14     	; 0x1a78 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    1a6a:	a2 e3       	ldi	r26, 0x32	; 50
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e2 e3       	ldi	r30, 0x32	; 50
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	8d 7f       	andi	r24, 0xFD	; 253
    1a76:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	41 f4       	brne	.+16     	; 0x1a8e <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    1a7e:	a2 e3       	ldi	r26, 0x32	; 50
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e2 e3       	ldi	r30, 0x32	; 50
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	84 60       	ori	r24, 0x04	; 4
    1a8a:	8c 93       	st	X, r24
    1a8c:	07 c0       	rjmp	.+14     	; 0x1a9c <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    1a8e:	a2 e3       	ldi	r26, 0x32	; 50
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e2 e3       	ldi	r30, 0x32	; 50
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8b 7f       	andi	r24, 0xFB	; 251
    1a9a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	41 f4       	brne	.+16     	; 0x1ab2 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    1aa2:	a2 e3       	ldi	r26, 0x32	; 50
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e2 e3       	ldi	r30, 0x32	; 50
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	88 60       	ori	r24, 0x08	; 8
    1aae:	8c 93       	st	X, r24
    1ab0:	07 c0       	rjmp	.+14     	; 0x1ac0 <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    1ab2:	a2 e3       	ldi	r26, 0x32	; 50
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e2 e3       	ldi	r30, 0x32	; 50
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	87 7f       	andi	r24, 0xF7	; 247
    1abe:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	41 f4       	brne	.+16     	; 0x1ad6 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    1ac6:	a2 e3       	ldi	r26, 0x32	; 50
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e2 e3       	ldi	r30, 0x32	; 50
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	80 61       	ori	r24, 0x10	; 16
    1ad2:	8c 93       	st	X, r24
    1ad4:	07 c0       	rjmp	.+14     	; 0x1ae4 <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    1ad6:	a2 e3       	ldi	r26, 0x32	; 50
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e2 e3       	ldi	r30, 0x32	; 50
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 7e       	andi	r24, 0xEF	; 239
    1ae2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	41 f4       	brne	.+16     	; 0x1afa <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    1aea:	a2 e3       	ldi	r26, 0x32	; 50
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e2 e3       	ldi	r30, 0x32	; 50
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 62       	ori	r24, 0x20	; 32
    1af6:	8c 93       	st	X, r24
    1af8:	07 c0       	rjmp	.+14     	; 0x1b08 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    1afa:	a2 e3       	ldi	r26, 0x32	; 50
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e2 e3       	ldi	r30, 0x32	; 50
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	8f 7d       	andi	r24, 0xDF	; 223
    1b06:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1b08:	88 85       	ldd	r24, Y+8	; 0x08
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	41 f4       	brne	.+16     	; 0x1b1e <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    1b0e:	a2 e3       	ldi	r26, 0x32	; 50
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e2 e3       	ldi	r30, 0x32	; 50
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 64       	ori	r24, 0x40	; 64
    1b1a:	8c 93       	st	X, r24
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    1b1e:	a2 e3       	ldi	r26, 0x32	; 50
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e2 e3       	ldi	r30, 0x32	; 50
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8f 7b       	andi	r24, 0xBF	; 191
    1b2a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	41 f4       	brne	.+16     	; 0x1b42 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    1b32:	a2 e3       	ldi	r26, 0x32	; 50
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e2 e3       	ldi	r30, 0x32	; 50
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	80 68       	ori	r24, 0x80	; 128
    1b3e:	8c 93       	st	X, r24
    1b40:	07 c0       	rjmp	.+14     	; 0x1b50 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    1b42:	a2 e3       	ldi	r26, 0x32	; 50
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e2 e3       	ldi	r30, 0x32	; 50
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8f 77       	andi	r24, 0x7F	; 127
    1b4e:	8c 93       	st	X, r24
		}
		break;
	}
}
    1b50:	2c 96       	adiw	r28, 0x0c	; 12
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	0f 91       	pop	r16
    1b62:	ef 90       	pop	r14
    1b64:	cf 90       	pop	r12
    1b66:	af 90       	pop	r10
    1b68:	8f 90       	pop	r8
    1b6a:	08 95       	ret

00001b6c <EXTI_voidEnable_GIE>:
#include "LIB/BIT_MATH.h";
#include "LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1b74:	af e5       	ldi	r26, 0x5F	; 95
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	ef e5       	ldi	r30, 0x5F	; 95
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 68       	ori	r24, 0x80	; 128
    1b80:	8c 93       	st	X, r24
}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1b90:	af e5       	ldi	r26, 0x5F	; 95
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ef e5       	ldi	r30, 0x5F	; 95
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	8f 77       	andi	r24, 0x7F	; 127
    1b9c:	8c 93       	st	X, r24
}
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <setCallBack+0x6>
    1baa:	0f 92       	push	r0
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e4 5f       	subi	r30, 0xF4	; 244
    1bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	80 83       	st	Z, r24
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1be2:	a5 e5       	ldi	r26, 0x55	; 85
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e5 e5       	ldi	r30, 0x55	; 85
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8e 7f       	andi	r24, 0xFE	; 254
    1bee:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1bf0:	a5 e5       	ldi	r26, 0x55	; 85
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e5 e5       	ldi	r30, 0x55	; 85
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	8d 7f       	andi	r24, 0xFD	; 253
    1bfc:	8c 93       	st	X, r24
}
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1c0c:	a5 e5       	ldi	r26, 0x55	; 85
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e5 e5       	ldi	r30, 0x55	; 85
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	82 60       	ori	r24, 0x02	; 2
    1c18:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1c1a:	a5 e5       	ldi	r26, 0x55	; 85
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e5 e5       	ldi	r30, 0x55	; 85
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8e 7f       	andi	r24, 0xFE	; 254
    1c26:	8c 93       	st	X, r24
}
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1c36:	a5 e5       	ldi	r26, 0x55	; 85
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e5 e5       	ldi	r30, 0x55	; 85
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8d 7f       	andi	r24, 0xFD	; 253
    1c42:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1c44:	a5 e5       	ldi	r26, 0x55	; 85
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e5 e5       	ldi	r30, 0x55	; 85
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	81 60       	ori	r24, 0x01	; 1
    1c50:	8c 93       	st	X, r24
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1c60:	a5 e5       	ldi	r26, 0x55	; 85
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e5 e5       	ldi	r30, 0x55	; 85
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	82 60       	ori	r24, 0x02	; 2
    1c6c:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1c6e:	a5 e5       	ldi	r26, 0x55	; 85
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e5 e5       	ldi	r30, 0x55	; 85
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	81 60       	ori	r24, 0x01	; 1
    1c7a:	8c 93       	st	X, r24
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1c8a:	a5 e5       	ldi	r26, 0x55	; 85
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e5 e5       	ldi	r30, 0x55	; 85
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8b 7f       	andi	r24, 0xFB	; 251
    1c96:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1c98:	a5 e5       	ldi	r26, 0x55	; 85
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e5 e5       	ldi	r30, 0x55	; 85
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	87 7f       	andi	r24, 0xF7	; 247
    1ca4:	8c 93       	st	X, r24
}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1cb4:	a5 e5       	ldi	r26, 0x55	; 85
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e5 e5       	ldi	r30, 0x55	; 85
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 60       	ori	r24, 0x08	; 8
    1cc0:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1cc2:	a5 e5       	ldi	r26, 0x55	; 85
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e5 e5       	ldi	r30, 0x55	; 85
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8b 7f       	andi	r24, 0xFB	; 251
    1cce:	8c 93       	st	X, r24
}
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1cde:	a5 e5       	ldi	r26, 0x55	; 85
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e5 e5       	ldi	r30, 0x55	; 85
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	87 7f       	andi	r24, 0xF7	; 247
    1cea:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1cec:	a5 e5       	ldi	r26, 0x55	; 85
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e5 e5       	ldi	r30, 0x55	; 85
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	84 60       	ori	r24, 0x04	; 4
    1cf8:	8c 93       	st	X, r24
}
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1d08:	a5 e5       	ldi	r26, 0x55	; 85
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e5 e5       	ldi	r30, 0x55	; 85
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	88 60       	ori	r24, 0x08	; 8
    1d14:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1d16:	a5 e5       	ldi	r26, 0x55	; 85
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e5 e5       	ldi	r30, 0x55	; 85
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	84 60       	ori	r24, 0x04	; 4
    1d22:	8c 93       	st	X, r24
}
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1d32:	a4 e5       	ldi	r26, 0x54	; 84
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e4 e5       	ldi	r30, 0x54	; 84
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 64       	ori	r24, 0x40	; 64
    1d3e:	8c 93       	st	X, r24
}
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1d4e:	a4 e5       	ldi	r26, 0x54	; 84
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e4 e5       	ldi	r30, 0x54	; 84
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8f 7b       	andi	r24, 0xBF	; 191
    1d5a:	8c 93       	st	X, r24
}
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_AnyLogicalChange_MODE();
    1d6a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <EXTI0_AnyLogicalChange_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1d6e:	ab e5       	ldi	r26, 0x5B	; 91
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	eb e5       	ldi	r30, 0x5B	; 91
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 64       	ori	r24, 0x40	; 64
    1d7a:	8c 93       	st	X, r24
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    1d8a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1d8e:	ab e5       	ldi	r26, 0x5B	; 91
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	eb e5       	ldi	r30, 0x5B	; 91
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	80 68       	ori	r24, 0x80	; 128
    1d9a:	8c 93       	st	X, r24
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <EXTI_voidEnable>:


void EXTI_voidEnable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Mode){
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	2a 97       	sbiw	r28, 0x0a	; 10
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_EXTI_Index){
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	3a 87       	std	Y+10, r19	; 0x0a
    1dc2:	29 87       	std	Y+9, r18	; 0x09
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	91 05       	cpc	r25, r1
    1dcc:	e9 f1       	breq	.+122    	; 0x1e48 <EXTI_voidEnable+0xa6>
    1dce:	29 85       	ldd	r18, Y+9	; 0x09
    1dd0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <EXTI_voidEnable+0x38>
    1dd8:	69 c0       	rjmp	.+210    	; 0x1eac <EXTI_voidEnable+0x10a>
    1dda:	89 85       	ldd	r24, Y+9	; 0x09
    1ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <EXTI_voidEnable+0x42>
    1de2:	7f c0       	rjmp	.+254    	; 0x1ee2 <EXTI_voidEnable+0x140>
		case EXTI0_Index:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1de4:	ab e5       	ldi	r26, 0x5B	; 91
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	eb e5       	ldi	r30, 0x5B	; 91
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 64       	ori	r24, 0x40	; 64
    1df0:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	38 87       	std	Y+8, r19	; 0x08
    1dfa:	2f 83       	std	Y+7, r18	; 0x07
    1dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfe:	98 85       	ldd	r25, Y+8	; 0x08
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	91 05       	cpc	r25, r1
    1e04:	c1 f0       	breq	.+48     	; 0x1e36 <EXTI_voidEnable+0x94>
    1e06:	2f 81       	ldd	r18, Y+7	; 0x07
    1e08:	38 85       	ldd	r19, Y+8	; 0x08
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	2c f4       	brge	.+10     	; 0x1e1a <EXTI_voidEnable+0x78>
    1e10:	8f 81       	ldd	r24, Y+7	; 0x07
    1e12:	98 85       	ldd	r25, Y+8	; 0x08
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <EXTI_voidEnable+0x8e>
    1e18:	64 c0       	rjmp	.+200    	; 0x1ee2 <EXTI_voidEnable+0x140>
    1e1a:	2f 81       	ldd	r18, Y+7	; 0x07
    1e1c:	38 85       	ldd	r19, Y+8	; 0x08
    1e1e:	22 30       	cpi	r18, 0x02	; 2
    1e20:	31 05       	cpc	r19, r1
    1e22:	61 f0       	breq	.+24     	; 0x1e3c <EXTI_voidEnable+0x9a>
    1e24:	8f 81       	ldd	r24, Y+7	; 0x07
    1e26:	98 85       	ldd	r25, Y+8	; 0x08
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	51 f0       	breq	.+20     	; 0x1e42 <EXTI_voidEnable+0xa0>
    1e2e:	59 c0       	rjmp	.+178    	; 0x1ee2 <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    1e30:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <EXTI0_LowLevel_MODE>
    1e34:	56 c0       	rjmp	.+172    	; 0x1ee2 <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    1e36:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <EXTI0_FALLING_MODE>
    1e3a:	53 c0       	rjmp	.+166    	; 0x1ee2 <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    1e3c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <EXTI0_AnyLogicalChange_MODE>
    1e40:	50 c0       	rjmp	.+160    	; 0x1ee2 <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    1e42:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <EXTI0_RISING_MODE>
    1e46:	4d c0       	rjmp	.+154    	; 0x1ee2 <EXTI_voidEnable+0x140>
			}
			break;

		case EXTI1_Index:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1e48:	ab e5       	ldi	r26, 0x5B	; 91
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	eb e5       	ldi	r30, 0x5B	; 91
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 68       	ori	r24, 0x80	; 128
    1e54:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	3e 83       	std	Y+6, r19	; 0x06
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	91 05       	cpc	r25, r1
    1e68:	c1 f0       	breq	.+48     	; 0x1e9a <EXTI_voidEnable+0xf8>
    1e6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e6e:	22 30       	cpi	r18, 0x02	; 2
    1e70:	31 05       	cpc	r19, r1
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <EXTI_voidEnable+0xdc>
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	61 f0       	breq	.+24     	; 0x1e94 <EXTI_voidEnable+0xf2>
    1e7c:	32 c0       	rjmp	.+100    	; 0x1ee2 <EXTI_voidEnable+0x140>
    1e7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e80:	3e 81       	ldd	r19, Y+6	; 0x06
    1e82:	22 30       	cpi	r18, 0x02	; 2
    1e84:	31 05       	cpc	r19, r1
    1e86:	61 f0       	breq	.+24     	; 0x1ea0 <EXTI_voidEnable+0xfe>
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	91 05       	cpc	r25, r1
    1e90:	51 f0       	breq	.+20     	; 0x1ea6 <EXTI_voidEnable+0x104>
    1e92:	27 c0       	rjmp	.+78     	; 0x1ee2 <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    1e94:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <EXTI1_LowLevel_MODE>
    1e98:	24 c0       	rjmp	.+72     	; 0x1ee2 <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    1e9a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <EXTI1_FALLING_MODE>
    1e9e:	21 c0       	rjmp	.+66     	; 0x1ee2 <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    1ea0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <EXTI1_AnyLogicalChange_MODE>
    1ea4:	1e c0       	rjmp	.+60     	; 0x1ee2 <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1ea6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <EXTI1_RISING_MODE>
    1eaa:	1b c0       	rjmp	.+54     	; 0x1ee2 <EXTI_voidEnable+0x140>
					break;
			}
			break;
		case EXTI2_Index:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1eac:	ab e5       	ldi	r26, 0x5B	; 91
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	eb e5       	ldi	r30, 0x5B	; 91
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	80 62       	ori	r24, 0x20	; 32
    1eb8:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	3c 83       	std	Y+4, r19	; 0x04
    1ec2:	2b 83       	std	Y+3, r18	; 0x03
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	41 f0       	breq	.+16     	; 0x1ede <EXTI_voidEnable+0x13c>
    1ece:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed2:	23 30       	cpi	r18, 0x03	; 3
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	29 f4       	brne	.+10     	; 0x1ee2 <EXTI_voidEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1ed8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <EXTI2_RISING_MODE>
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <EXTI_voidEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    1ede:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    1ee2:	2a 96       	adiw	r28, 0x0a	; 10
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8_EXTI_Index){
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <EXTI_voidDisable+0x6>
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTI_Index){
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	3b 83       	std	Y+3, r19	; 0x03
    1f0a:	2a 83       	std	Y+2, r18	; 0x02
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	31 f0       	breq	.+12     	; 0x1f20 <EXTI_voidDisable+0x2c>
    1f14:	2a 81       	ldd	r18, Y+2	; 0x02
    1f16:	3b 81       	ldd	r19, Y+3	; 0x03
    1f18:	21 30       	cpi	r18, 0x01	; 1
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	49 f0       	breq	.+18     	; 0x1f30 <EXTI_voidDisable+0x3c>
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <EXTI_voidDisable+0x4a>
		case EXTI0_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1f20:	ab e5       	ldi	r26, 0x5B	; 91
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	eb e5       	ldi	r30, 0x5B	; 91
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	8f 7b       	andi	r24, 0xBF	; 191
    1f2c:	8c 93       	st	X, r24
    1f2e:	07 c0       	rjmp	.+14     	; 0x1f3e <EXTI_voidDisable+0x4a>
			break;

		case EXTI1_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1f30:	ab e5       	ldi	r26, 0x5B	; 91
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	eb e5       	ldi	r30, 0x5B	; 91
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8f 77       	andi	r24, 0x7F	; 127
    1f3c:	8c 93       	st	X, r24
			break;
	}
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    1f4a:	1f 92       	push	r1
    1f4c:	0f 92       	push	r0
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	0f 92       	push	r0
    1f52:	11 24       	eor	r1, r1
    1f54:	2f 93       	push	r18
    1f56:	3f 93       	push	r19
    1f58:	4f 93       	push	r20
    1f5a:	5f 93       	push	r21
    1f5c:	6f 93       	push	r22
    1f5e:	7f 93       	push	r23
    1f60:	8f 93       	push	r24
    1f62:	9f 93       	push	r25
    1f64:	af 93       	push	r26
    1f66:	bf 93       	push	r27
    1f68:	ef 93       	push	r30
    1f6a:	ff 93       	push	r31
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI0_Index] != NULL){
    1f74:	80 91 0c 01 	lds	r24, 0x010C
    1f78:	90 91 0d 01 	lds	r25, 0x010D
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	29 f0       	breq	.+10     	; 0x1f8a <__vector_1+0x40>
		EXTI[0]();
    1f80:	e0 91 0c 01 	lds	r30, 0x010C
    1f84:	f0 91 0d 01 	lds	r31, 0x010D
    1f88:	09 95       	icall
	}

}
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	ff 91       	pop	r31
    1f90:	ef 91       	pop	r30
    1f92:	bf 91       	pop	r27
    1f94:	af 91       	pop	r26
    1f96:	9f 91       	pop	r25
    1f98:	8f 91       	pop	r24
    1f9a:	7f 91       	pop	r23
    1f9c:	6f 91       	pop	r22
    1f9e:	5f 91       	pop	r21
    1fa0:	4f 91       	pop	r20
    1fa2:	3f 91       	pop	r19
    1fa4:	2f 91       	pop	r18
    1fa6:	0f 90       	pop	r0
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	0f 90       	pop	r0
    1fac:	1f 90       	pop	r1
    1fae:	18 95       	reti

00001fb0 <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    1fb0:	1f 92       	push	r1
    1fb2:	0f 92       	push	r0
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	0f 92       	push	r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	2f 93       	push	r18
    1fbc:	3f 93       	push	r19
    1fbe:	4f 93       	push	r20
    1fc0:	5f 93       	push	r21
    1fc2:	6f 93       	push	r22
    1fc4:	7f 93       	push	r23
    1fc6:	8f 93       	push	r24
    1fc8:	9f 93       	push	r25
    1fca:	af 93       	push	r26
    1fcc:	bf 93       	push	r27
    1fce:	ef 93       	push	r30
    1fd0:	ff 93       	push	r31
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI1_Index] != NULL){
    1fda:	80 91 0e 01 	lds	r24, 0x010E
    1fde:	90 91 0f 01 	lds	r25, 0x010F
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	29 f0       	breq	.+10     	; 0x1ff0 <__vector_2+0x40>
			EXTI[1]();
    1fe6:	e0 91 0e 01 	lds	r30, 0x010E
    1fea:	f0 91 0f 01 	lds	r31, 0x010F
    1fee:	09 95       	icall
	}

}
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	ff 91       	pop	r31
    1ff6:	ef 91       	pop	r30
    1ff8:	bf 91       	pop	r27
    1ffa:	af 91       	pop	r26
    1ffc:	9f 91       	pop	r25
    1ffe:	8f 91       	pop	r24
    2000:	7f 91       	pop	r23
    2002:	6f 91       	pop	r22
    2004:	5f 91       	pop	r21
    2006:	4f 91       	pop	r20
    2008:	3f 91       	pop	r19
    200a:	2f 91       	pop	r18
    200c:	0f 90       	pop	r0
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	0f 90       	pop	r0
    2012:	1f 90       	pop	r1
    2014:	18 95       	reti

00002016 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    2016:	1f 92       	push	r1
    2018:	0f 92       	push	r0
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	0f 92       	push	r0
    201e:	11 24       	eor	r1, r1
    2020:	2f 93       	push	r18
    2022:	3f 93       	push	r19
    2024:	4f 93       	push	r20
    2026:	5f 93       	push	r21
    2028:	6f 93       	push	r22
    202a:	7f 93       	push	r23
    202c:	8f 93       	push	r24
    202e:	9f 93       	push	r25
    2030:	af 93       	push	r26
    2032:	bf 93       	push	r27
    2034:	ef 93       	push	r30
    2036:	ff 93       	push	r31
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI2_Index] != NULL){
    2040:	80 91 10 01 	lds	r24, 0x0110
    2044:	90 91 11 01 	lds	r25, 0x0111
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	29 f0       	breq	.+10     	; 0x2056 <__vector_3+0x40>
			EXTI[2]();
    204c:	e0 91 10 01 	lds	r30, 0x0110
    2050:	f0 91 11 01 	lds	r31, 0x0111
    2054:	09 95       	icall
	}

}
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	ff 91       	pop	r31
    205c:	ef 91       	pop	r30
    205e:	bf 91       	pop	r27
    2060:	af 91       	pop	r26
    2062:	9f 91       	pop	r25
    2064:	8f 91       	pop	r24
    2066:	7f 91       	pop	r23
    2068:	6f 91       	pop	r22
    206a:	5f 91       	pop	r21
    206c:	4f 91       	pop	r20
    206e:	3f 91       	pop	r19
    2070:	2f 91       	pop	r18
    2072:	0f 90       	pop	r0
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	0f 90       	pop	r0
    2078:	1f 90       	pop	r1
    207a:	18 95       	reti

0000207c <DC_Motor_Init>:
#include "../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	00 d0       	rcall	.+0      	; 0x2082 <DC_Motor_Init+0x6>
    2082:	0f 92       	push	r0
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	8a 83       	std	Y+2, r24	; 0x02
    208a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	81 f4       	brne	.+32     	; 0x20b6 <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	63 e0       	ldi	r22, 0x03	; 3
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	65 e0       	ldi	r22, 0x05	; 5
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	64 e0       	ldi	r22, 0x04	; 4
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
    20b4:	14 c0       	rjmp	.+40     	; 0x20de <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	81 f4       	brne	.+32     	; 0x20dc <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	62 e0       	ldi	r22, 0x02	; 2
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	61 e0       	ldi	r22, 0x01	; 1
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
    20da:	01 c0       	rjmp	.+2      	; 0x20de <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    20dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    20de:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	29 97       	sbiw	r28, 0x09	; 9
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	8a 83       	std	Y+2, r24	; 0x02
    2102:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	39 87       	std	Y+9, r19	; 0x09
    2110:	28 87       	std	Y+8, r18	; 0x08
    2112:	88 85       	ldd	r24, Y+8	; 0x08
    2114:	99 85       	ldd	r25, Y+9	; 0x09
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	31 f0       	breq	.+12     	; 0x2126 <DC_Motor_Rotate+0x3a>
    211a:	28 85       	ldd	r18, Y+8	; 0x08
    211c:	39 85       	ldd	r19, Y+9	; 0x09
    211e:	21 30       	cpi	r18, 0x01	; 1
    2120:	31 05       	cpc	r19, r1
    2122:	89 f1       	breq	.+98     	; 0x2186 <DC_Motor_Rotate+0x9a>
    2124:	60 c0       	rjmp	.+192    	; 0x21e6 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	3f 83       	std	Y+7, r19	; 0x07
    212e:	2e 83       	std	Y+6, r18	; 0x06
    2130:	8e 81       	ldd	r24, Y+6	; 0x06
    2132:	9f 81       	ldd	r25, Y+7	; 0x07
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	a9 f0       	breq	.+42     	; 0x2162 <DC_Motor_Rotate+0x76>
    2138:	2e 81       	ldd	r18, Y+6	; 0x06
    213a:	3f 81       	ldd	r19, Y+7	; 0x07
    213c:	21 30       	cpi	r18, 0x01	; 1
    213e:	31 05       	cpc	r19, r1
    2140:	01 f5       	brne	.+64     	; 0x2182 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	63 e0       	ldi	r22, 0x03	; 3
    2146:	41 e0       	ldi	r20, 0x01	; 1
    2148:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	65 e0       	ldi	r22, 0x05	; 5
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	64 e0       	ldi	r22, 0x04	; 4
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
    2160:	43 c0       	rjmp	.+134    	; 0x21e8 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	63 e0       	ldi	r22, 0x03	; 3
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	65 e0       	ldi	r22, 0x05	; 5
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	64 e0       	ldi	r22, 0x04	; 4
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
    2180:	33 c0       	rjmp	.+102    	; 0x21e8 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    2182:	19 82       	std	Y+1, r1	; 0x01
    2184:	31 c0       	rjmp	.+98     	; 0x21e8 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	3d 83       	std	Y+5, r19	; 0x05
    218e:	2c 83       	std	Y+4, r18	; 0x04
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	a9 f0       	breq	.+42     	; 0x21c2 <DC_Motor_Rotate+0xd6>
    2198:	2c 81       	ldd	r18, Y+4	; 0x04
    219a:	3d 81       	ldd	r19, Y+5	; 0x05
    219c:	21 30       	cpi	r18, 0x01	; 1
    219e:	31 05       	cpc	r19, r1
    21a0:	01 f5       	brne	.+64     	; 0x21e2 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
    21c0:	13 c0       	rjmp	.+38     	; 0x21e8 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
    21e0:	03 c0       	rjmp	.+6      	; 0x21e8 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    21e2:	19 82       	std	Y+1, r1	; 0x01
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    21e6:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ea:	29 96       	adiw	r28, 0x09	; 9
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <DC_Motor_Stop+0x6>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	88 23       	and	r24, r24
    2210:	31 f4       	brne	.+12     	; 0x221e <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	63 e0       	ldi	r22, 0x03	; 3
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
    221c:	0a c0       	rjmp	.+20     	; 0x2232 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	31 f4       	brne	.+12     	; 0x2230 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	62 e0       	ldi	r22, 0x02	; 2
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_u8SetPinValue>
    222e:	01 c0       	rjmp	.+2      	; 0x2232 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    2230:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    2232:	89 81       	ldd	r24, Y+1	; 0x01
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <LCD_setPinDirection>:
#include "avr/io.h"

#include "BIT_MATH.h"
#include "Dio_Interface.h"
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	00 d0       	rcall	.+0      	; 0x2244 <LCD_setPinDirection+0x6>
    2244:	00 d0       	rcall	.+0      	; 0x2246 <LCD_setPinDirection+0x8>
    2246:	0f 92       	push	r0
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	6a 83       	std	Y+2, r22	; 0x02
    2250:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	88 30       	cpi	r24, 0x08	; 8
    2256:	08 f0       	brcs	.+2      	; 0x225a <LCD_setPinDirection+0x1c>
    2258:	d5 c0       	rjmp	.+426    	; 0x2404 <LCD_setPinDirection+0x1c6>
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	84 30       	cpi	r24, 0x04	; 4
    225e:	08 f0       	brcs	.+2      	; 0x2262 <LCD_setPinDirection+0x24>
    2260:	d1 c0       	rjmp	.+418    	; 0x2404 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	3d 83       	std	Y+5, r19	; 0x05
    226a:	2c 83       	std	Y+4, r18	; 0x04
    226c:	8c 81       	ldd	r24, Y+4	; 0x04
    226e:	9d 81       	ldd	r25, Y+5	; 0x05
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	91 05       	cpc	r25, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <LCD_setPinDirection+0x3a>
    2276:	43 c0       	rjmp	.+134    	; 0x22fe <LCD_setPinDirection+0xc0>
    2278:	2c 81       	ldd	r18, Y+4	; 0x04
    227a:	3d 81       	ldd	r19, Y+5	; 0x05
    227c:	22 30       	cpi	r18, 0x02	; 2
    227e:	31 05       	cpc	r19, r1
    2280:	2c f4       	brge	.+10     	; 0x228c <LCD_setPinDirection+0x4e>
    2282:	8c 81       	ldd	r24, Y+4	; 0x04
    2284:	9d 81       	ldd	r25, Y+5	; 0x05
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	71 f0       	breq	.+28     	; 0x22a6 <LCD_setPinDirection+0x68>
    228a:	bc c0       	rjmp	.+376    	; 0x2404 <LCD_setPinDirection+0x1c6>
    228c:	2c 81       	ldd	r18, Y+4	; 0x04
    228e:	3d 81       	ldd	r19, Y+5	; 0x05
    2290:	22 30       	cpi	r18, 0x02	; 2
    2292:	31 05       	cpc	r19, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <LCD_setPinDirection+0x5a>
    2296:	5f c0       	rjmp	.+190    	; 0x2356 <LCD_setPinDirection+0x118>
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	9d 81       	ldd	r25, Y+5	; 0x05
    229c:	83 30       	cpi	r24, 0x03	; 3
    229e:	91 05       	cpc	r25, r1
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <LCD_setPinDirection+0x66>
    22a2:	85 c0       	rjmp	.+266    	; 0x23ae <LCD_setPinDirection+0x170>
    22a4:	af c0       	rjmp	.+350    	; 0x2404 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == AVR_PIN_OUTPUT)
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	a1 f4       	brne	.+40     	; 0x22d4 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    22ac:	aa e3       	ldi	r26, 0x3A	; 58
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	ea e3       	ldi	r30, 0x3A	; 58
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <LCD_setPinDirection+0x8c>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <LCD_setPinDirection+0x88>
    22ce:	84 2b       	or	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	98 c0       	rjmp	.+304    	; 0x2404 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    22d4:	aa e3       	ldi	r26, 0x3A	; 58
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	ea e3       	ldi	r30, 0x3A	; 58
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <LCD_setPinDirection+0xb4>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <LCD_setPinDirection+0xb0>
    22f6:	80 95       	com	r24
    22f8:	84 23       	and	r24, r20
    22fa:	8c 93       	st	X, r24
    22fc:	83 c0       	rjmp	.+262    	; 0x2404 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == AVR_PIN_OUTPUT)
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	a1 f4       	brne	.+40     	; 0x232c <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2304:	a7 e3       	ldi	r26, 0x37	; 55
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e7 e3       	ldi	r30, 0x37	; 55
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	48 2f       	mov	r20, r24
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <LCD_setPinDirection+0xe4>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <LCD_setPinDirection+0xe0>
    2326:	84 2b       	or	r24, r20
    2328:	8c 93       	st	X, r24
    232a:	6c c0       	rjmp	.+216    	; 0x2404 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    232c:	a7 e3       	ldi	r26, 0x37	; 55
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e7 e3       	ldi	r30, 0x37	; 55
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	48 2f       	mov	r20, r24
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	02 2e       	mov	r0, r18
    2344:	02 c0       	rjmp	.+4      	; 0x234a <LCD_setPinDirection+0x10c>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	0a 94       	dec	r0
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <LCD_setPinDirection+0x108>
    234e:	80 95       	com	r24
    2350:	84 23       	and	r24, r20
    2352:	8c 93       	st	X, r24
    2354:	57 c0       	rjmp	.+174    	; 0x2404 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == AVR_PIN_OUTPUT)
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	a1 f4       	brne	.+40     	; 0x2384 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    235c:	a4 e3       	ldi	r26, 0x34	; 52
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e4 e3       	ldi	r30, 0x34	; 52
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	48 2f       	mov	r20, r24
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	02 2e       	mov	r0, r18
    2374:	02 c0       	rjmp	.+4      	; 0x237a <LCD_setPinDirection+0x13c>
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	0a 94       	dec	r0
    237c:	e2 f7       	brpl	.-8      	; 0x2376 <LCD_setPinDirection+0x138>
    237e:	84 2b       	or	r24, r20
    2380:	8c 93       	st	X, r24
    2382:	40 c0       	rjmp	.+128    	; 0x2404 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2384:	a4 e3       	ldi	r26, 0x34	; 52
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e4 e3       	ldi	r30, 0x34	; 52
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	48 2f       	mov	r20, r24
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	02 2e       	mov	r0, r18
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <LCD_setPinDirection+0x164>
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	0a 94       	dec	r0
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <LCD_setPinDirection+0x160>
    23a6:	80 95       	com	r24
    23a8:	84 23       	and	r24, r20
    23aa:	8c 93       	st	X, r24
    23ac:	2b c0       	rjmp	.+86     	; 0x2404 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == AVR_PIN_OUTPUT)
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	a1 f4       	brne	.+40     	; 0x23dc <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    23b4:	a1 e3       	ldi	r26, 0x31	; 49
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e1 e3       	ldi	r30, 0x31	; 49
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <LCD_setPinDirection+0x194>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <LCD_setPinDirection+0x190>
    23d6:	84 2b       	or	r24, r20
    23d8:	8c 93       	st	X, r24
    23da:	14 c0       	rjmp	.+40     	; 0x2404 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    23dc:	a1 e3       	ldi	r26, 0x31	; 49
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e1 e3       	ldi	r30, 0x31	; 49
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <LCD_setPinDirection+0x1bc>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <LCD_setPinDirection+0x1b8>
    23fe:	80 95       	com	r24
    2400:	84 23       	and	r24, r20
    2402:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	00 d0       	rcall	.+0      	; 0x241a <LCD_setPinValue+0x6>
    241a:	00 d0       	rcall	.+0      	; 0x241c <LCD_setPinValue+0x8>
    241c:	0f 92       	push	r0
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	6a 83       	std	Y+2, r22	; 0x02
    2426:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	88 30       	cpi	r24, 0x08	; 8
    242c:	08 f0       	brcs	.+2      	; 0x2430 <LCD_setPinValue+0x1c>
    242e:	d5 c0       	rjmp	.+426    	; 0x25da <LCD_setPinValue+0x1c6>
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	84 30       	cpi	r24, 0x04	; 4
    2434:	08 f0       	brcs	.+2      	; 0x2438 <LCD_setPinValue+0x24>
    2436:	d1 c0       	rjmp	.+418    	; 0x25da <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	3d 83       	std	Y+5, r19	; 0x05
    2440:	2c 83       	std	Y+4, r18	; 0x04
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	9d 81       	ldd	r25, Y+5	; 0x05
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	91 05       	cpc	r25, r1
    244a:	09 f4       	brne	.+2      	; 0x244e <LCD_setPinValue+0x3a>
    244c:	43 c0       	rjmp	.+134    	; 0x24d4 <LCD_setPinValue+0xc0>
    244e:	2c 81       	ldd	r18, Y+4	; 0x04
    2450:	3d 81       	ldd	r19, Y+5	; 0x05
    2452:	22 30       	cpi	r18, 0x02	; 2
    2454:	31 05       	cpc	r19, r1
    2456:	2c f4       	brge	.+10     	; 0x2462 <LCD_setPinValue+0x4e>
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	9d 81       	ldd	r25, Y+5	; 0x05
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	71 f0       	breq	.+28     	; 0x247c <LCD_setPinValue+0x68>
    2460:	bc c0       	rjmp	.+376    	; 0x25da <LCD_setPinValue+0x1c6>
    2462:	2c 81       	ldd	r18, Y+4	; 0x04
    2464:	3d 81       	ldd	r19, Y+5	; 0x05
    2466:	22 30       	cpi	r18, 0x02	; 2
    2468:	31 05       	cpc	r19, r1
    246a:	09 f4       	brne	.+2      	; 0x246e <LCD_setPinValue+0x5a>
    246c:	5f c0       	rjmp	.+190    	; 0x252c <LCD_setPinValue+0x118>
    246e:	8c 81       	ldd	r24, Y+4	; 0x04
    2470:	9d 81       	ldd	r25, Y+5	; 0x05
    2472:	83 30       	cpi	r24, 0x03	; 3
    2474:	91 05       	cpc	r25, r1
    2476:	09 f4       	brne	.+2      	; 0x247a <LCD_setPinValue+0x66>
    2478:	85 c0       	rjmp	.+266    	; 0x2584 <LCD_setPinValue+0x170>
    247a:	af c0       	rjmp	.+350    	; 0x25da <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	a1 f4       	brne	.+40     	; 0x24aa <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2482:	ab e3       	ldi	r26, 0x3B	; 59
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	eb e3       	ldi	r30, 0x3B	; 59
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	48 2f       	mov	r20, r24
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	02 2e       	mov	r0, r18
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <LCD_setPinValue+0x8c>
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	0a 94       	dec	r0
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <LCD_setPinValue+0x88>
    24a4:	84 2b       	or	r24, r20
    24a6:	8c 93       	st	X, r24
    24a8:	98 c0       	rjmp	.+304    	; 0x25da <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    24aa:	ab e3       	ldi	r26, 0x3B	; 59
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	eb e3       	ldi	r30, 0x3B	; 59
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	48 2f       	mov	r20, r24
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	02 2e       	mov	r0, r18
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <LCD_setPinValue+0xb4>
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	0a 94       	dec	r0
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <LCD_setPinValue+0xb0>
    24cc:	80 95       	com	r24
    24ce:	84 23       	and	r24, r20
    24d0:	8c 93       	st	X, r24
    24d2:	83 c0       	rjmp	.+262    	; 0x25da <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	a1 f4       	brne	.+40     	; 0x2502 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    24da:	a8 e3       	ldi	r26, 0x38	; 56
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e8 e3       	ldi	r30, 0x38	; 56
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	48 2f       	mov	r20, r24
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 2e       	mov	r0, r18
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <LCD_setPinValue+0xe4>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	0a 94       	dec	r0
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <LCD_setPinValue+0xe0>
    24fc:	84 2b       	or	r24, r20
    24fe:	8c 93       	st	X, r24
    2500:	6c c0       	rjmp	.+216    	; 0x25da <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2502:	a8 e3       	ldi	r26, 0x38	; 56
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e8 e3       	ldi	r30, 0x38	; 56
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	48 2f       	mov	r20, r24
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	02 2e       	mov	r0, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <LCD_setPinValue+0x10c>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	0a 94       	dec	r0
    2522:	e2 f7       	brpl	.-8      	; 0x251c <LCD_setPinValue+0x108>
    2524:	80 95       	com	r24
    2526:	84 23       	and	r24, r20
    2528:	8c 93       	st	X, r24
    252a:	57 c0       	rjmp	.+174    	; 0x25da <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	a1 f4       	brne	.+40     	; 0x255a <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2532:	a5 e3       	ldi	r26, 0x35	; 53
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e5 e3       	ldi	r30, 0x35	; 53
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	48 2f       	mov	r20, r24
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	02 2e       	mov	r0, r18
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <LCD_setPinValue+0x13c>
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	0a 94       	dec	r0
    2552:	e2 f7       	brpl	.-8      	; 0x254c <LCD_setPinValue+0x138>
    2554:	84 2b       	or	r24, r20
    2556:	8c 93       	st	X, r24
    2558:	40 c0       	rjmp	.+128    	; 0x25da <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    255a:	a5 e3       	ldi	r26, 0x35	; 53
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e5 e3       	ldi	r30, 0x35	; 53
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	48 2f       	mov	r20, r24
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 2e       	mov	r0, r18
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <LCD_setPinValue+0x164>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	0a 94       	dec	r0
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <LCD_setPinValue+0x160>
    257c:	80 95       	com	r24
    257e:	84 23       	and	r24, r20
    2580:	8c 93       	st	X, r24
    2582:	2b c0       	rjmp	.+86     	; 0x25da <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	a1 f4       	brne	.+40     	; 0x25b2 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    258a:	a2 e3       	ldi	r26, 0x32	; 50
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e2 e3       	ldi	r30, 0x32	; 50
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	48 2f       	mov	r20, r24
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	02 2e       	mov	r0, r18
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <LCD_setPinValue+0x194>
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	0a 94       	dec	r0
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <LCD_setPinValue+0x190>
    25ac:	84 2b       	or	r24, r20
    25ae:	8c 93       	st	X, r24
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    25b2:	a2 e3       	ldi	r26, 0x32	; 50
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e2 e3       	ldi	r30, 0x32	; 50
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	48 2f       	mov	r20, r24
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	02 2e       	mov	r0, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <LCD_setPinValue+0x1bc>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <LCD_setPinValue+0x1b8>
    25d4:	80 95       	com	r24
    25d6:	84 23       	and	r24, r20
    25d8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <LCD_getPinValue+0x6>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <LCD_getPinValue+0x8>
    25f2:	0f 92       	push	r0
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	8a 83       	std	Y+2, r24	; 0x02
    25fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    25fc:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	88 30       	cpi	r24, 0x08	; 8
    2602:	08 f0       	brcs	.+2      	; 0x2606 <LCD_getPinValue+0x1c>
    2604:	84 c0       	rjmp	.+264    	; 0x270e <LCD_getPinValue+0x124>
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	84 30       	cpi	r24, 0x04	; 4
    260a:	08 f0       	brcs	.+2      	; 0x260e <LCD_getPinValue+0x24>
    260c:	80 c0       	rjmp	.+256    	; 0x270e <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	3d 83       	std	Y+5, r19	; 0x05
    2616:	2c 83       	std	Y+4, r18	; 0x04
    2618:	4c 81       	ldd	r20, Y+4	; 0x04
    261a:	5d 81       	ldd	r21, Y+5	; 0x05
    261c:	41 30       	cpi	r20, 0x01	; 1
    261e:	51 05       	cpc	r21, r1
    2620:	79 f1       	breq	.+94     	; 0x2680 <LCD_getPinValue+0x96>
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	91 05       	cpc	r25, r1
    262a:	34 f4       	brge	.+12     	; 0x2638 <LCD_getPinValue+0x4e>
    262c:	2c 81       	ldd	r18, Y+4	; 0x04
    262e:	3d 81       	ldd	r19, Y+5	; 0x05
    2630:	21 15       	cp	r18, r1
    2632:	31 05       	cpc	r19, r1
    2634:	69 f0       	breq	.+26     	; 0x2650 <LCD_getPinValue+0x66>
    2636:	6b c0       	rjmp	.+214    	; 0x270e <LCD_getPinValue+0x124>
    2638:	4c 81       	ldd	r20, Y+4	; 0x04
    263a:	5d 81       	ldd	r21, Y+5	; 0x05
    263c:	42 30       	cpi	r20, 0x02	; 2
    263e:	51 05       	cpc	r21, r1
    2640:	b9 f1       	breq	.+110    	; 0x26b0 <LCD_getPinValue+0xc6>
    2642:	8c 81       	ldd	r24, Y+4	; 0x04
    2644:	9d 81       	ldd	r25, Y+5	; 0x05
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	91 05       	cpc	r25, r1
    264a:	09 f4       	brne	.+2      	; 0x264e <LCD_getPinValue+0x64>
    264c:	49 c0       	rjmp	.+146    	; 0x26e0 <LCD_getPinValue+0xf6>
    264e:	5f c0       	rjmp	.+190    	; 0x270e <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2650:	e9 e3       	ldi	r30, 0x39	; 57
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	88 2f       	mov	r24, r24
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	a9 01       	movw	r20, r18
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <LCD_getPinValue+0x7e>
    2664:	55 95       	asr	r21
    2666:	47 95       	ror	r20
    2668:	8a 95       	dec	r24
    266a:	e2 f7       	brpl	.-8      	; 0x2664 <LCD_getPinValue+0x7a>
    266c:	ca 01       	movw	r24, r20
    266e:	81 70       	andi	r24, 0x01	; 1
    2670:	90 70       	andi	r25, 0x00	; 0
    2672:	88 23       	and	r24, r24
    2674:	19 f0       	breq	.+6      	; 0x267c <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	49 c0       	rjmp	.+146    	; 0x270e <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    267c:	19 82       	std	Y+1, r1	; 0x01
    267e:	47 c0       	rjmp	.+142    	; 0x270e <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2680:	e6 e3       	ldi	r30, 0x36	; 54
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a9 01       	movw	r20, r18
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <LCD_getPinValue+0xae>
    2694:	55 95       	asr	r21
    2696:	47 95       	ror	r20
    2698:	8a 95       	dec	r24
    269a:	e2 f7       	brpl	.-8      	; 0x2694 <LCD_getPinValue+0xaa>
    269c:	ca 01       	movw	r24, r20
    269e:	81 70       	andi	r24, 0x01	; 1
    26a0:	90 70       	andi	r25, 0x00	; 0
    26a2:	88 23       	and	r24, r24
    26a4:	19 f0       	breq	.+6      	; 0x26ac <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	31 c0       	rjmp	.+98     	; 0x270e <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    26ac:	19 82       	std	Y+1, r1	; 0x01
    26ae:	2f c0       	rjmp	.+94     	; 0x270e <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    26b0:	e3 e3       	ldi	r30, 0x33	; 51
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	88 2f       	mov	r24, r24
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a9 01       	movw	r20, r18
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <LCD_getPinValue+0xde>
    26c4:	55 95       	asr	r21
    26c6:	47 95       	ror	r20
    26c8:	8a 95       	dec	r24
    26ca:	e2 f7       	brpl	.-8      	; 0x26c4 <LCD_getPinValue+0xda>
    26cc:	ca 01       	movw	r24, r20
    26ce:	81 70       	andi	r24, 0x01	; 1
    26d0:	90 70       	andi	r25, 0x00	; 0
    26d2:	88 23       	and	r24, r24
    26d4:	19 f0       	breq	.+6      	; 0x26dc <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	89 83       	std	Y+1, r24	; 0x01
    26da:	19 c0       	rjmp	.+50     	; 0x270e <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    26dc:	19 82       	std	Y+1, r1	; 0x01
    26de:	17 c0       	rjmp	.+46     	; 0x270e <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    26e0:	e0 e3       	ldi	r30, 0x30	; 48
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a9 01       	movw	r20, r18
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <LCD_getPinValue+0x10e>
    26f4:	55 95       	asr	r21
    26f6:	47 95       	ror	r20
    26f8:	8a 95       	dec	r24
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <LCD_getPinValue+0x10a>
    26fc:	ca 01       	movw	r24, r20
    26fe:	81 70       	andi	r24, 0x01	; 1
    2700:	90 70       	andi	r25, 0x00	; 0
    2702:	88 23       	and	r24, r24
    2704:	19 f0       	breq	.+6      	; 0x270c <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	01 c0       	rjmp	.+2      	; 0x270e <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    270c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    270e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	00 d0       	rcall	.+0      	; 0x2726 <LCD_setPortDirection+0x6>
    2726:	00 d0       	rcall	.+0      	; 0x2728 <LCD_setPortDirection+0x8>
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	84 30       	cpi	r24, 0x04	; 4
    2734:	90 f5       	brcc	.+100    	; 0x279a <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	3c 83       	std	Y+4, r19	; 0x04
    273e:	2b 83       	std	Y+3, r18	; 0x03
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	9c 81       	ldd	r25, Y+4	; 0x04
    2744:	81 30       	cpi	r24, 0x01	; 1
    2746:	91 05       	cpc	r25, r1
    2748:	d1 f0       	breq	.+52     	; 0x277e <LCD_setPortDirection+0x5e>
    274a:	2b 81       	ldd	r18, Y+3	; 0x03
    274c:	3c 81       	ldd	r19, Y+4	; 0x04
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	2c f4       	brge	.+10     	; 0x275e <LCD_setPortDirection+0x3e>
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	61 f0       	breq	.+24     	; 0x2774 <LCD_setPortDirection+0x54>
    275c:	1e c0       	rjmp	.+60     	; 0x279a <LCD_setPortDirection+0x7a>
    275e:	2b 81       	ldd	r18, Y+3	; 0x03
    2760:	3c 81       	ldd	r19, Y+4	; 0x04
    2762:	22 30       	cpi	r18, 0x02	; 2
    2764:	31 05       	cpc	r19, r1
    2766:	81 f0       	breq	.+32     	; 0x2788 <LCD_setPortDirection+0x68>
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	83 30       	cpi	r24, 0x03	; 3
    276e:	91 05       	cpc	r25, r1
    2770:	81 f0       	breq	.+32     	; 0x2792 <LCD_setPortDirection+0x72>
    2772:	13 c0       	rjmp	.+38     	; 0x279a <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2774:	ea e3       	ldi	r30, 0x3A	; 58
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	80 83       	st	Z, r24
    277c:	0e c0       	rjmp	.+28     	; 0x279a <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    277e:	e7 e3       	ldi	r30, 0x37	; 55
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	80 83       	st	Z, r24
    2786:	09 c0       	rjmp	.+18     	; 0x279a <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2788:	e4 e3       	ldi	r30, 0x34	; 52
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	80 83       	st	Z, r24
    2790:	04 c0       	rjmp	.+8      	; 0x279a <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2792:	e1 e3       	ldi	r30, 0x31	; 49
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	80 83       	st	Z, r24
			break;
		}
	}
}
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <LCD_setPortValue+0x6>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_setPortValue+0x8>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	84 30       	cpi	r24, 0x04	; 4
    27bc:	90 f5       	brcc	.+100    	; 0x2822 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	3c 83       	std	Y+4, r19	; 0x04
    27c6:	2b 83       	std	Y+3, r18	; 0x03
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	91 05       	cpc	r25, r1
    27d0:	d1 f0       	breq	.+52     	; 0x2806 <LCD_setPortValue+0x5e>
    27d2:	2b 81       	ldd	r18, Y+3	; 0x03
    27d4:	3c 81       	ldd	r19, Y+4	; 0x04
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	2c f4       	brge	.+10     	; 0x27e6 <LCD_setPortValue+0x3e>
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	61 f0       	breq	.+24     	; 0x27fc <LCD_setPortValue+0x54>
    27e4:	1e c0       	rjmp	.+60     	; 0x2822 <LCD_setPortValue+0x7a>
    27e6:	2b 81       	ldd	r18, Y+3	; 0x03
    27e8:	3c 81       	ldd	r19, Y+4	; 0x04
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	81 f0       	breq	.+32     	; 0x2810 <LCD_setPortValue+0x68>
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	91 05       	cpc	r25, r1
    27f8:	81 f0       	breq	.+32     	; 0x281a <LCD_setPortValue+0x72>
    27fa:	13 c0       	rjmp	.+38     	; 0x2822 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    27fc:	eb e3       	ldi	r30, 0x3B	; 59
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	80 83       	st	Z, r24
    2804:	0e c0       	rjmp	.+28     	; 0x2822 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2806:	e8 e3       	ldi	r30, 0x38	; 56
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	80 83       	st	Z, r24
    280e:	09 c0       	rjmp	.+18     	; 0x2822 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2810:	e5 e3       	ldi	r30, 0x35	; 53
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	80 83       	st	Z, r24
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    281a:	e2 e3       	ldi	r30, 0x32	; 50
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	80 83       	st	Z, r24
			break;
		}
	}
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <LCD_getPortValue+0x6>
    2836:	00 d0       	rcall	.+0      	; 0x2838 <LCD_getPortValue+0x8>
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    283e:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	84 30       	cpi	r24, 0x04	; 4
    2844:	90 f5       	brcc	.+100    	; 0x28aa <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	3c 83       	std	Y+4, r19	; 0x04
    284e:	2b 83       	std	Y+3, r18	; 0x03
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	91 05       	cpc	r25, r1
    2858:	d1 f0       	breq	.+52     	; 0x288e <LCD_getPortValue+0x5e>
    285a:	2b 81       	ldd	r18, Y+3	; 0x03
    285c:	3c 81       	ldd	r19, Y+4	; 0x04
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	2c f4       	brge	.+10     	; 0x286e <LCD_getPortValue+0x3e>
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	61 f0       	breq	.+24     	; 0x2884 <LCD_getPortValue+0x54>
    286c:	1e c0       	rjmp	.+60     	; 0x28aa <LCD_getPortValue+0x7a>
    286e:	2b 81       	ldd	r18, Y+3	; 0x03
    2870:	3c 81       	ldd	r19, Y+4	; 0x04
    2872:	22 30       	cpi	r18, 0x02	; 2
    2874:	31 05       	cpc	r19, r1
    2876:	81 f0       	breq	.+32     	; 0x2898 <LCD_getPortValue+0x68>
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	91 05       	cpc	r25, r1
    2880:	81 f0       	breq	.+32     	; 0x28a2 <LCD_getPortValue+0x72>
    2882:	13 c0       	rjmp	.+38     	; 0x28aa <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2884:	e9 e3       	ldi	r30, 0x39	; 57
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	0e c0       	rjmp	.+28     	; 0x28aa <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    288e:	e6 e3       	ldi	r30, 0x36	; 54
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	09 c0       	rjmp	.+18     	; 0x28aa <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2898:	e3 e3       	ldi	r30, 0x33	; 51
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	04 c0       	rjmp	.+8      	; 0x28aa <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    28a2:	e0 e3       	ldi	r30, 0x30	; 48
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <Keypad_GetPressedKey>:
 *      Author: Mohamed
 */
#include "Keypad.h";

u8 Keypad_GetPressedKey()
{
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <Keypad_GetPressedKey+0x6>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    28c4:	1a 82       	std	Y+2, r1	; 0x02
    28c6:	4d c0       	rjmp	.+154    	; 0x2962 <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    28c8:	ea e3       	ldi	r30, 0x3A	; 58
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	80 e1       	ldi	r24, 0x10	; 16
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <Keypad_GetPressedKey+0x22>
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	2a 95       	dec	r18
    28de:	e2 f7       	brpl	.-8      	; 0x28d8 <Keypad_GetPressedKey+0x1e>
    28e0:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    28e2:	eb e3       	ldi	r30, 0x3B	; 59
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	8a 81       	ldd	r24, Y+2	; 0x02
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	80 e1       	ldi	r24, 0x10	; 16
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	02 2e       	mov	r0, r18
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <Keypad_GetPressedKey+0x3e>
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	0a 94       	dec	r0
    28fa:	e2 f7       	brpl	.-8      	; 0x28f4 <Keypad_GetPressedKey+0x3a>
    28fc:	80 95       	com	r24
    28fe:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    2900:	19 82       	std	Y+1, r1	; 0x01
    2902:	29 c0       	rjmp	.+82     	; 0x2956 <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    2904:	e9 e3       	ldi	r30, 0x39	; 57
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	88 2f       	mov	r24, r24
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a9 01       	movw	r20, r18
    2916:	02 c0       	rjmp	.+4      	; 0x291c <Keypad_GetPressedKey+0x62>
    2918:	55 95       	asr	r21
    291a:	47 95       	ror	r20
    291c:	8a 95       	dec	r24
    291e:	e2 f7       	brpl	.-8      	; 0x2918 <Keypad_GetPressedKey+0x5e>
    2920:	ca 01       	movw	r24, r20
    2922:	81 70       	andi	r24, 0x01	; 1
    2924:	90 70       	andi	r25, 0x00	; 0
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	99 f4       	brne	.+38     	; 0x2950 <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	c9 01       	movw	r24, r18
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	82 0f       	add	r24, r18
    2938:	93 1f       	adc	r25, r19
    293a:	98 2f       	mov	r25, r24
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	89 0f       	add	r24, r25
    2940:	8f 5f       	subi	r24, 0xFF	; 255
    2942:	0e 94 b6 14 	call	0x296c	; 0x296c <Keypad_4x3>
				}
			}
		}
	}
}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	cf 91       	pop	r28
    294c:	df 91       	pop	r29
    294e:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	84 30       	cpi	r24, 0x04	; 4
    295a:	a0 f2       	brcs	.-88     	; 0x2904 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey()
{
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	8a 83       	std	Y+2, r24	; 0x02
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	83 30       	cpi	r24, 0x03	; 3
    2966:	08 f4       	brcc	.+2      	; 0x296a <Keypad_GetPressedKey+0xb0>
    2968:	af cf       	rjmp	.-162    	; 0x28c8 <Keypad_GetPressedKey+0xe>
    296a:	ac cf       	rjmp	.-168    	; 0x28c4 <Keypad_GetPressedKey+0xa>

0000296c <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <Keypad_4x3+0x6>
    2972:	00 d0       	rcall	.+0      	; 0x2974 <Keypad_4x3+0x8>
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    297a:	89 81       	ldd	r24, Y+1	; 0x01
    297c:	28 2f       	mov	r18, r24
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	3c 83       	std	Y+4, r19	; 0x04
    2982:	2b 83       	std	Y+3, r18	; 0x03
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	9c 81       	ldd	r25, Y+4	; 0x04
    2988:	8a 30       	cpi	r24, 0x0A	; 10
    298a:	91 05       	cpc	r25, r1
    298c:	81 f0       	breq	.+32     	; 0x29ae <Keypad_4x3+0x42>
    298e:	2b 81       	ldd	r18, Y+3	; 0x03
    2990:	3c 81       	ldd	r19, Y+4	; 0x04
    2992:	2a 30       	cpi	r18, 0x0A	; 10
    2994:	31 05       	cpc	r19, r1
    2996:	9c f0       	brlt	.+38     	; 0x29be <Keypad_4x3+0x52>
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	8b 30       	cpi	r24, 0x0B	; 11
    299e:	91 05       	cpc	r25, r1
    29a0:	49 f0       	breq	.+18     	; 0x29b4 <Keypad_4x3+0x48>
    29a2:	2b 81       	ldd	r18, Y+3	; 0x03
    29a4:	3c 81       	ldd	r19, Y+4	; 0x04
    29a6:	2c 30       	cpi	r18, 0x0C	; 12
    29a8:	31 05       	cpc	r19, r1
    29aa:	31 f0       	breq	.+12     	; 0x29b8 <Keypad_4x3+0x4c>
    29ac:	08 c0       	rjmp	.+16     	; 0x29be <Keypad_4x3+0x52>
	case 10:
		return '*';
    29ae:	3a e2       	ldi	r19, 0x2A	; 42
    29b0:	3a 83       	std	Y+2, r19	; 0x02
    29b2:	07 c0       	rjmp	.+14     	; 0x29c2 <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    29b4:	1a 82       	std	Y+2, r1	; 0x02
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    29b8:	83 e2       	ldi	r24, 0x23	; 35
    29ba:	8a 83       	std	Y+2, r24	; 0x02
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <Keypad_4x3+0x56>
	default:
		return Num;
    29be:	99 81       	ldd	r25, Y+1	; 0x01
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <LCD_sendCommand>:

#include "LIB/BIT_MATH.h"
#include "Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	e9 97       	sbiw	r28, 0x39	; 57
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    29e8:	83 e0       	ldi	r24, 0x03	; 3
    29ea:	64 e0       	ldi	r22, 0x04	; 4
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e8       	ldi	r26, 0x80	; 128
    29f8:	bf e3       	ldi	r27, 0x3F	; 63
    29fa:	8d ab       	std	Y+53, r24	; 0x35
    29fc:	9e ab       	std	Y+54, r25	; 0x36
    29fe:	af ab       	std	Y+55, r26	; 0x37
    2a00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a02:	6d a9       	ldd	r22, Y+53	; 0x35
    2a04:	7e a9       	ldd	r23, Y+54	; 0x36
    2a06:	8f a9       	ldd	r24, Y+55	; 0x37
    2a08:	98 ad       	ldd	r25, Y+56	; 0x38
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	4a e7       	ldi	r20, 0x7A	; 122
    2a10:	55 e4       	ldi	r21, 0x45	; 69
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	89 ab       	std	Y+49, r24	; 0x31
    2a1c:	9a ab       	std	Y+50, r25	; 0x32
    2a1e:	ab ab       	std	Y+51, r26	; 0x33
    2a20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a22:	69 a9       	ldd	r22, Y+49	; 0x31
    2a24:	7a a9       	ldd	r23, Y+50	; 0x32
    2a26:	8b a9       	ldd	r24, Y+51	; 0x33
    2a28:	9c a9       	ldd	r25, Y+52	; 0x34
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e8       	ldi	r20, 0x80	; 128
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a36:	88 23       	and	r24, r24
    2a38:	2c f4       	brge	.+10     	; 0x2a44 <LCD_sendCommand+0x72>
		__ticks = 1;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	98 ab       	std	Y+48, r25	; 0x30
    2a40:	8f a7       	std	Y+47, r24	; 0x2f
    2a42:	3f c0       	rjmp	.+126    	; 0x2ac2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2a44:	69 a9       	ldd	r22, Y+49	; 0x31
    2a46:	7a a9       	ldd	r23, Y+50	; 0x32
    2a48:	8b a9       	ldd	r24, Y+51	; 0x33
    2a4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	3f ef       	ldi	r19, 0xFF	; 255
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	57 e4       	ldi	r21, 0x47	; 71
    2a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	4c f5       	brge	.+82     	; 0x2aae <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a5e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a60:	8f a9       	ldd	r24, Y+55	; 0x37
    2a62:	98 ad       	ldd	r25, Y+56	; 0x38
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	98 ab       	std	Y+48, r25	; 0x30
    2a82:	8f a7       	std	Y+47, r24	; 0x2f
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <LCD_sendCommand+0xd2>
    2a86:	80 e9       	ldi	r24, 0x90	; 144
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	9e a7       	std	Y+46, r25	; 0x2e
    2a8c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a90:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <LCD_sendCommand+0xc0>
    2a96:	9e a7       	std	Y+46, r25	; 0x2e
    2a98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	98 ab       	std	Y+48, r25	; 0x30
    2aa2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	69 f7       	brne	.-38     	; 0x2a86 <LCD_sendCommand+0xb4>
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aae:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	98 ab       	std	Y+48, r25	; 0x30
    2ac0:	8f a7       	std	Y+47, r24	; 0x2f
    2ac2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac6:	9c a7       	std	Y+44, r25	; 0x2c
    2ac8:	8b a7       	std	Y+43, r24	; 0x2b
    2aca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2acc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <LCD_sendCommand+0xfc>
    2ad2:	9c a7       	std	Y+44, r25	; 0x2c
    2ad4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2ad6:	83 e0       	ldi	r24, 0x03	; 3
    2ad8:	65 e0       	ldi	r22, 0x05	; 5
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 e8       	ldi	r26, 0x80	; 128
    2ae6:	bf e3       	ldi	r27, 0x3F	; 63
    2ae8:	8f a3       	std	Y+39, r24	; 0x27
    2aea:	98 a7       	std	Y+40, r25	; 0x28
    2aec:	a9 a7       	std	Y+41, r26	; 0x29
    2aee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	6f a1       	ldd	r22, Y+39	; 0x27
    2af2:	78 a5       	ldd	r23, Y+40	; 0x28
    2af4:	89 a5       	ldd	r24, Y+41	; 0x29
    2af6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a e7       	ldi	r20, 0x7A	; 122
    2afe:	55 e4       	ldi	r21, 0x45	; 69
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8b a3       	std	Y+35, r24	; 0x23
    2b0a:	9c a3       	std	Y+36, r25	; 0x24
    2b0c:	ad a3       	std	Y+37, r26	; 0x25
    2b0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b10:	6b a1       	ldd	r22, Y+35	; 0x23
    2b12:	7c a1       	ldd	r23, Y+36	; 0x24
    2b14:	8d a1       	ldd	r24, Y+37	; 0x25
    2b16:	9e a1       	ldd	r25, Y+38	; 0x26
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <LCD_sendCommand+0x160>
		__ticks = 1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9a a3       	std	Y+34, r25	; 0x22
    2b2e:	89 a3       	std	Y+33, r24	; 0x21
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2b32:	6b a1       	ldd	r22, Y+35	; 0x23
    2b34:	7c a1       	ldd	r23, Y+36	; 0x24
    2b36:	8d a1       	ldd	r24, Y+37	; 0x25
    2b38:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	4c f5       	brge	.+82     	; 0x2b9c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9a a3       	std	Y+34, r25	; 0x22
    2b70:	89 a3       	std	Y+33, r24	; 0x21
    2b72:	0f c0       	rjmp	.+30     	; 0x2b92 <LCD_sendCommand+0x1c0>
    2b74:	80 e9       	ldi	r24, 0x90	; 144
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	98 a3       	std	Y+32, r25	; 0x20
    2b7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <LCD_sendCommand+0x1ae>
    2b84:	98 a3       	std	Y+32, r25	; 0x20
    2b86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	9a a3       	std	Y+34, r25	; 0x22
    2b90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b92:	89 a1       	ldd	r24, Y+33	; 0x21
    2b94:	9a a1       	ldd	r25, Y+34	; 0x22
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <LCD_sendCommand+0x1a2>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9a a3       	std	Y+34, r25	; 0x22
    2bae:	89 a3       	std	Y+33, r24	; 0x21
    2bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb6:	8d 8f       	std	Y+29, r24	; 0x1d
    2bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <LCD_sendCommand+0x1ea>
    2bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	69 ad       	ldd	r22, Y+57	; 0x39
    2bc8:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_setPortValue>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	a0 e8       	ldi	r26, 0x80	; 128
    2bd2:	bf e3       	ldi	r27, 0x3F	; 63
    2bd4:	89 8f       	std	Y+25, r24	; 0x19
    2bd6:	9a 8f       	std	Y+26, r25	; 0x1a
    2bd8:	ab 8f       	std	Y+27, r26	; 0x1b
    2bda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bdc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	4a e7       	ldi	r20, 0x7A	; 122
    2bea:	55 e4       	ldi	r21, 0x45	; 69
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	8d 8b       	std	Y+21, r24	; 0x15
    2bf6:	9e 8b       	std	Y+22, r25	; 0x16
    2bf8:	af 8b       	std	Y+23, r26	; 0x17
    2bfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2c00:	8f 89       	ldd	r24, Y+23	; 0x17
    2c02:	98 8d       	ldd	r25, Y+24	; 0x18
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	2c f4       	brge	.+10     	; 0x2c1e <LCD_sendCommand+0x24c>
		__ticks = 1;
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9c 8b       	std	Y+20, r25	; 0x14
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
    2c1c:	3f c0       	rjmp	.+126    	; 0x2c9c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c20:	7e 89       	ldd	r23, Y+22	; 0x16
    2c22:	8f 89       	ldd	r24, Y+23	; 0x17
    2c24:	98 8d       	ldd	r25, Y+24	; 0x18
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	4c f5       	brge	.+82     	; 0x2c88 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c36:	69 8d       	ldd	r22, Y+25	; 0x19
    2c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e2       	ldi	r20, 0x20	; 32
    2c44:	51 e4       	ldi	r21, 0x41	; 65
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9c 8b       	std	Y+20, r25	; 0x14
    2c5c:	8b 8b       	std	Y+19, r24	; 0x13
    2c5e:	0f c0       	rjmp	.+30     	; 0x2c7e <LCD_sendCommand+0x2ac>
    2c60:	80 e9       	ldi	r24, 0x90	; 144
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	9a 8b       	std	Y+18, r25	; 0x12
    2c66:	89 8b       	std	Y+17, r24	; 0x11
    2c68:	89 89       	ldd	r24, Y+17	; 0x11
    2c6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <LCD_sendCommand+0x29a>
    2c70:	9a 8b       	std	Y+18, r25	; 0x12
    2c72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c74:	8b 89       	ldd	r24, Y+19	; 0x13
    2c76:	9c 89       	ldd	r25, Y+20	; 0x14
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	9c 8b       	std	Y+20, r25	; 0x14
    2c7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c80:	9c 89       	ldd	r25, Y+20	; 0x14
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	69 f7       	brne	.-38     	; 0x2c60 <LCD_sendCommand+0x28e>
    2c86:	14 c0       	rjmp	.+40     	; 0x2cb0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c88:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9c 8b       	std	Y+20, r25	; 0x14
    2c9a:	8b 8b       	std	Y+19, r24	; 0x13
    2c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca0:	98 8b       	std	Y+16, r25	; 0x10
    2ca2:	8f 87       	std	Y+15, r24	; 0x0f
    2ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca6:	98 89       	ldd	r25, Y+16	; 0x10
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <LCD_sendCommand+0x2d6>
    2cac:	98 8b       	std	Y+16, r25	; 0x10
    2cae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	65 e0       	ldi	r22, 0x05	; 5
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a0 e8       	ldi	r26, 0x80	; 128
    2cc0:	bf e3       	ldi	r27, 0x3F	; 63
    2cc2:	8b 87       	std	Y+11, r24	; 0x0b
    2cc4:	9c 87       	std	Y+12, r25	; 0x0c
    2cc6:	ad 87       	std	Y+13, r26	; 0x0d
    2cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	4a e7       	ldi	r20, 0x7A	; 122
    2cd8:	55 e4       	ldi	r21, 0x45	; 69
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	8f 83       	std	Y+7, r24	; 0x07
    2ce4:	98 87       	std	Y+8, r25	; 0x08
    2ce6:	a9 87       	std	Y+9, r26	; 0x09
    2ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e8       	ldi	r20, 0x80	; 128
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cfe:	88 23       	and	r24, r24
    2d00:	2c f4       	brge	.+10     	; 0x2d0c <LCD_sendCommand+0x33a>
		__ticks = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	3f c0       	rjmp	.+126    	; 0x2d8a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	4c f5       	brge	.+82     	; 0x2d76 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	0f c0       	rjmp	.+30     	; 0x2d6c <LCD_sendCommand+0x39a>
    2d4e:	80 e9       	ldi	r24, 0x90	; 144
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	8b 83       	std	Y+3, r24	; 0x03
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <LCD_sendCommand+0x388>
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	69 f7       	brne	.-38     	; 0x2d4e <LCD_sendCommand+0x37c>
    2d74:	14 c0       	rjmp	.+40     	; 0x2d9e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	6f 81       	ldd	r22, Y+7	; 0x07
    2d78:	78 85       	ldd	r23, Y+8	; 0x08
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_sendCommand+0x3c4>
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2d9e:	e9 96       	adiw	r28, 0x39	; 57
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	e9 97       	sbiw	r28, 0x39	; 57
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2dc6:	83 e0       	ldi	r24, 0x03	; 3
    2dc8:	64 e0       	ldi	r22, 0x04	; 4
    2dca:	41 e0       	ldi	r20, 0x01	; 1
    2dcc:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	a0 e8       	ldi	r26, 0x80	; 128
    2dd6:	bf e3       	ldi	r27, 0x3F	; 63
    2dd8:	8d ab       	std	Y+53, r24	; 0x35
    2dda:	9e ab       	std	Y+54, r25	; 0x36
    2ddc:	af ab       	std	Y+55, r26	; 0x37
    2dde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de0:	6d a9       	ldd	r22, Y+53	; 0x35
    2de2:	7e a9       	ldd	r23, Y+54	; 0x36
    2de4:	8f a9       	ldd	r24, Y+55	; 0x37
    2de6:	98 ad       	ldd	r25, Y+56	; 0x38
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	4a e7       	ldi	r20, 0x7A	; 122
    2dee:	55 e4       	ldi	r21, 0x45	; 69
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	89 ab       	std	Y+49, r24	; 0x31
    2dfa:	9a ab       	std	Y+50, r25	; 0x32
    2dfc:	ab ab       	std	Y+51, r26	; 0x33
    2dfe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e00:	69 a9       	ldd	r22, Y+49	; 0x31
    2e02:	7a a9       	ldd	r23, Y+50	; 0x32
    2e04:	8b a9       	ldd	r24, Y+51	; 0x33
    2e06:	9c a9       	ldd	r25, Y+52	; 0x34
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e8       	ldi	r20, 0x80	; 128
    2e0e:	5f e3       	ldi	r21, 0x3F	; 63
    2e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	2c f4       	brge	.+10     	; 0x2e22 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	98 ab       	std	Y+48, r25	; 0x30
    2e1e:	8f a7       	std	Y+47, r24	; 0x2f
    2e20:	3f c0       	rjmp	.+126    	; 0x2ea0 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2e22:	69 a9       	ldd	r22, Y+49	; 0x31
    2e24:	7a a9       	ldd	r23, Y+50	; 0x32
    2e26:	8b a9       	ldd	r24, Y+51	; 0x33
    2e28:	9c a9       	ldd	r25, Y+52	; 0x34
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	3f ef       	ldi	r19, 0xFF	; 255
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	57 e4       	ldi	r21, 0x47	; 71
    2e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	4c f5       	brge	.+82     	; 0x2e8c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e3c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e3e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e40:	98 ad       	ldd	r25, Y+56	; 0x38
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e2       	ldi	r20, 0x20	; 32
    2e48:	51 e4       	ldi	r21, 0x41	; 65
    2e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	98 ab       	std	Y+48, r25	; 0x30
    2e60:	8f a7       	std	Y+47, r24	; 0x2f
    2e62:	0f c0       	rjmp	.+30     	; 0x2e82 <LCD_displayCharacter+0xd2>
    2e64:	80 e9       	ldi	r24, 0x90	; 144
    2e66:	91 e0       	ldi	r25, 0x01	; 1
    2e68:	9e a7       	std	Y+46, r25	; 0x2e
    2e6a:	8d a7       	std	Y+45, r24	; 0x2d
    2e6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <LCD_displayCharacter+0xc0>
    2e74:	9e a7       	std	Y+46, r25	; 0x2e
    2e76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	98 ab       	std	Y+48, r25	; 0x30
    2e80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e84:	98 a9       	ldd	r25, Y+48	; 0x30
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	69 f7       	brne	.-38     	; 0x2e64 <LCD_displayCharacter+0xb4>
    2e8a:	14 c0       	rjmp	.+40     	; 0x2eb4 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e90:	8b a9       	ldd	r24, Y+51	; 0x33
    2e92:	9c a9       	ldd	r25, Y+52	; 0x34
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	98 ab       	std	Y+48, r25	; 0x30
    2e9e:	8f a7       	std	Y+47, r24	; 0x2f
    2ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ea4:	9c a7       	std	Y+44, r25	; 0x2c
    2ea6:	8b a7       	std	Y+43, r24	; 0x2b
    2ea8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eaa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <LCD_displayCharacter+0xfc>
    2eb0:	9c a7       	std	Y+44, r25	; 0x2c
    2eb2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2eb4:	83 e0       	ldi	r24, 0x03	; 3
    2eb6:	65 e0       	ldi	r22, 0x05	; 5
    2eb8:	41 e0       	ldi	r20, 0x01	; 1
    2eba:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	a0 e8       	ldi	r26, 0x80	; 128
    2ec4:	bf e3       	ldi	r27, 0x3F	; 63
    2ec6:	8f a3       	std	Y+39, r24	; 0x27
    2ec8:	98 a7       	std	Y+40, r25	; 0x28
    2eca:	a9 a7       	std	Y+41, r26	; 0x29
    2ecc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ece:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ed2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ed4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	4a e7       	ldi	r20, 0x7A	; 122
    2edc:	55 e4       	ldi	r21, 0x45	; 69
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	8b a3       	std	Y+35, r24	; 0x23
    2ee8:	9c a3       	std	Y+36, r25	; 0x24
    2eea:	ad a3       	std	Y+37, r26	; 0x25
    2eec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eee:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e8       	ldi	r20, 0x80	; 128
    2efc:	5f e3       	ldi	r21, 0x3F	; 63
    2efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f02:	88 23       	and	r24, r24
    2f04:	2c f4       	brge	.+10     	; 0x2f10 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9a a3       	std	Y+34, r25	; 0x22
    2f0c:	89 a3       	std	Y+33, r24	; 0x21
    2f0e:	3f c0       	rjmp	.+126    	; 0x2f8e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2f10:	6b a1       	ldd	r22, Y+35	; 0x23
    2f12:	7c a1       	ldd	r23, Y+36	; 0x24
    2f14:	8d a1       	ldd	r24, Y+37	; 0x25
    2f16:	9e a1       	ldd	r25, Y+38	; 0x26
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	3f ef       	ldi	r19, 0xFF	; 255
    2f1c:	4f e7       	ldi	r20, 0x7F	; 127
    2f1e:	57 e4       	ldi	r21, 0x47	; 71
    2f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	4c f5       	brge	.+82     	; 0x2f7a <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f28:	6f a1       	ldd	r22, Y+39	; 0x27
    2f2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e2       	ldi	r20, 0x20	; 32
    2f36:	51 e4       	ldi	r21, 0x41	; 65
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	9a a3       	std	Y+34, r25	; 0x22
    2f4e:	89 a3       	std	Y+33, r24	; 0x21
    2f50:	0f c0       	rjmp	.+30     	; 0x2f70 <LCD_displayCharacter+0x1c0>
    2f52:	80 e9       	ldi	r24, 0x90	; 144
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    2f56:	98 a3       	std	Y+32, r25	; 0x20
    2f58:	8f 8f       	std	Y+31, r24	; 0x1f
    2f5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f5c:	98 a1       	ldd	r25, Y+32	; 0x20
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <LCD_displayCharacter+0x1ae>
    2f62:	98 a3       	std	Y+32, r25	; 0x20
    2f64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f66:	89 a1       	ldd	r24, Y+33	; 0x21
    2f68:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	9a a3       	std	Y+34, r25	; 0x22
    2f6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f70:	89 a1       	ldd	r24, Y+33	; 0x21
    2f72:	9a a1       	ldd	r25, Y+34	; 0x22
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	69 f7       	brne	.-38     	; 0x2f52 <LCD_displayCharacter+0x1a2>
    2f78:	14 c0       	rjmp	.+40     	; 0x2fa2 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f80:	9e a1       	ldd	r25, Y+38	; 0x26
    2f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	9a a3       	std	Y+34, r25	; 0x22
    2f8c:	89 a3       	std	Y+33, r24	; 0x21
    2f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f90:	9a a1       	ldd	r25, Y+34	; 0x22
    2f92:	9e 8f       	std	Y+30, r25	; 0x1e
    2f94:	8d 8f       	std	Y+29, r24	; 0x1d
    2f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <LCD_displayCharacter+0x1ea>
    2f9e:	9e 8f       	std	Y+30, r25	; 0x1e
    2fa0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    2fa2:	82 e0       	ldi	r24, 0x02	; 2
    2fa4:	69 ad       	ldd	r22, Y+57	; 0x39
    2fa6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_setPortValue>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 e8       	ldi	r26, 0x80	; 128
    2fb0:	bf e3       	ldi	r27, 0x3F	; 63
    2fb2:	89 8f       	std	Y+25, r24	; 0x19
    2fb4:	9a 8f       	std	Y+26, r25	; 0x1a
    2fb6:	ab 8f       	std	Y+27, r26	; 0x1b
    2fb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	69 8d       	ldd	r22, Y+25	; 0x19
    2fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4a e7       	ldi	r20, 0x7A	; 122
    2fc8:	55 e4       	ldi	r21, 0x45	; 69
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	8d 8b       	std	Y+21, r24	; 0x15
    2fd4:	9e 8b       	std	Y+22, r25	; 0x16
    2fd6:	af 8b       	std	Y+23, r26	; 0x17
    2fd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fda:	6d 89       	ldd	r22, Y+21	; 0x15
    2fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2fde:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e8       	ldi	r20, 0x80	; 128
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fee:	88 23       	and	r24, r24
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	9c 8b       	std	Y+20, r25	; 0x14
    2ff8:	8b 8b       	std	Y+19, r24	; 0x13
    2ffa:	3f c0       	rjmp	.+126    	; 0x307a <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    3000:	8f 89       	ldd	r24, Y+23	; 0x17
    3002:	98 8d       	ldd	r25, Y+24	; 0x18
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	3f ef       	ldi	r19, 0xFF	; 255
    3008:	4f e7       	ldi	r20, 0x7F	; 127
    300a:	57 e4       	ldi	r21, 0x47	; 71
    300c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3010:	18 16       	cp	r1, r24
    3012:	4c f5       	brge	.+82     	; 0x3066 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3014:	69 8d       	ldd	r22, Y+25	; 0x19
    3016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    301a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e2       	ldi	r20, 0x20	; 32
    3022:	51 e4       	ldi	r21, 0x41	; 65
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	9c 8b       	std	Y+20, r25	; 0x14
    303a:	8b 8b       	std	Y+19, r24	; 0x13
    303c:	0f c0       	rjmp	.+30     	; 0x305c <LCD_displayCharacter+0x2ac>
    303e:	80 e9       	ldi	r24, 0x90	; 144
    3040:	91 e0       	ldi	r25, 0x01	; 1
    3042:	9a 8b       	std	Y+18, r25	; 0x12
    3044:	89 8b       	std	Y+17, r24	; 0x11
    3046:	89 89       	ldd	r24, Y+17	; 0x11
    3048:	9a 89       	ldd	r25, Y+18	; 0x12
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <LCD_displayCharacter+0x29a>
    304e:	9a 8b       	std	Y+18, r25	; 0x12
    3050:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	8b 89       	ldd	r24, Y+19	; 0x13
    3054:	9c 89       	ldd	r25, Y+20	; 0x14
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	9c 8b       	std	Y+20, r25	; 0x14
    305a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305c:	8b 89       	ldd	r24, Y+19	; 0x13
    305e:	9c 89       	ldd	r25, Y+20	; 0x14
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	69 f7       	brne	.-38     	; 0x303e <LCD_displayCharacter+0x28e>
    3064:	14 c0       	rjmp	.+40     	; 0x308e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3066:	6d 89       	ldd	r22, Y+21	; 0x15
    3068:	7e 89       	ldd	r23, Y+22	; 0x16
    306a:	8f 89       	ldd	r24, Y+23	; 0x17
    306c:	98 8d       	ldd	r25, Y+24	; 0x18
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9c 8b       	std	Y+20, r25	; 0x14
    3078:	8b 8b       	std	Y+19, r24	; 0x13
    307a:	8b 89       	ldd	r24, Y+19	; 0x13
    307c:	9c 89       	ldd	r25, Y+20	; 0x14
    307e:	98 8b       	std	Y+16, r25	; 0x10
    3080:	8f 87       	std	Y+15, r24	; 0x0f
    3082:	8f 85       	ldd	r24, Y+15	; 0x0f
    3084:	98 89       	ldd	r25, Y+16	; 0x10
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <LCD_displayCharacter+0x2d6>
    308a:	98 8b       	std	Y+16, r25	; 0x10
    308c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    308e:	83 e0       	ldi	r24, 0x03	; 3
    3090:	65 e0       	ldi	r22, 0x05	; 5
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a0 e8       	ldi	r26, 0x80	; 128
    309e:	bf e3       	ldi	r27, 0x3F	; 63
    30a0:	8b 87       	std	Y+11, r24	; 0x0b
    30a2:	9c 87       	std	Y+12, r25	; 0x0c
    30a4:	ad 87       	std	Y+13, r26	; 0x0d
    30a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	4a e7       	ldi	r20, 0x7A	; 122
    30b6:	55 e4       	ldi	r21, 0x45	; 69
    30b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	8f 83       	std	Y+7, r24	; 0x07
    30c2:	98 87       	std	Y+8, r25	; 0x08
    30c4:	a9 87       	std	Y+9, r26	; 0x09
    30c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ca:	78 85       	ldd	r23, Y+8	; 0x08
    30cc:	89 85       	ldd	r24, Y+9	; 0x09
    30ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e8       	ldi	r20, 0x80	; 128
    30d6:	5f e3       	ldi	r21, 0x3F	; 63
    30d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30dc:	88 23       	and	r24, r24
    30de:	2c f4       	brge	.+10     	; 0x30ea <LCD_displayCharacter+0x33a>
		__ticks = 1;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	3f c0       	rjmp	.+126    	; 0x3168 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    30ea:	6f 81       	ldd	r22, Y+7	; 0x07
    30ec:	78 85       	ldd	r23, Y+8	; 0x08
    30ee:	89 85       	ldd	r24, Y+9	; 0x09
    30f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	3f ef       	ldi	r19, 0xFF	; 255
    30f6:	4f e7       	ldi	r20, 0x7F	; 127
    30f8:	57 e4       	ldi	r21, 0x47	; 71
    30fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fe:	18 16       	cp	r1, r24
    3100:	4c f5       	brge	.+82     	; 0x3154 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3102:	6b 85       	ldd	r22, Y+11	; 0x0b
    3104:	7c 85       	ldd	r23, Y+12	; 0x0c
    3106:	8d 85       	ldd	r24, Y+13	; 0x0d
    3108:	9e 85       	ldd	r25, Y+14	; 0x0e
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e2       	ldi	r20, 0x20	; 32
    3110:	51 e4       	ldi	r21, 0x41	; 65
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	bc 01       	movw	r22, r24
    311c:	cd 01       	movw	r24, r26
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	0f c0       	rjmp	.+30     	; 0x314a <LCD_displayCharacter+0x39a>
    312c:	80 e9       	ldi	r24, 0x90	; 144
    312e:	91 e0       	ldi	r25, 0x01	; 1
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	9c 81       	ldd	r25, Y+4	; 0x04
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <LCD_displayCharacter+0x388>
    313c:	9c 83       	std	Y+4, r25	; 0x04
    313e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	9e 81       	ldd	r25, Y+6	; 0x06
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	69 f7       	brne	.-38     	; 0x312c <LCD_displayCharacter+0x37c>
    3152:	14 c0       	rjmp	.+40     	; 0x317c <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3154:	6f 81       	ldd	r22, Y+7	; 0x07
    3156:	78 85       	ldd	r23, Y+8	; 0x08
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9e 83       	std	Y+6, r25	; 0x06
    3166:	8d 83       	std	Y+5, r24	; 0x05
    3168:	8d 81       	ldd	r24, Y+5	; 0x05
    316a:	9e 81       	ldd	r25, Y+6	; 0x06
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <LCD_displayCharacter+0x3c4>
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    317c:	e9 96       	adiw	r28, 0x39	; 57
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <LCD_init>:
void LCD_init(void)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	2e 97       	sbiw	r28, 0x0e	; 14
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, AVR_PIN_OUTPUT);
    31a2:	83 e0       	ldi	r24, 0x03	; 3
    31a4:	64 e0       	ldi	r22, 0x04	; 4
    31a6:	41 e0       	ldi	r20, 0x01	; 1
    31a8:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, AVR_PIN_OUTPUT);
    31ac:	83 e0       	ldi	r24, 0x03	; 3
    31ae:	65 e0       	ldi	r22, 0x05	; 5
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, AVR_PIN_OUTPUT);
    31b6:	82 e0       	ldi	r24, 0x02	; 2
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_setPortDirection>
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	a0 ea       	ldi	r26, 0xA0	; 160
    31c4:	b1 e4       	ldi	r27, 0x41	; 65
    31c6:	8b 87       	std	Y+11, r24	; 0x0b
    31c8:	9c 87       	std	Y+12, r25	; 0x0c
    31ca:	ad 87       	std	Y+13, r26	; 0x0d
    31cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	4a e7       	ldi	r20, 0x7A	; 122
    31dc:	55 e4       	ldi	r21, 0x45	; 69
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	8f 83       	std	Y+7, r24	; 0x07
    31e8:	98 87       	std	Y+8, r25	; 0x08
    31ea:	a9 87       	std	Y+9, r26	; 0x09
    31ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ee:	6f 81       	ldd	r22, Y+7	; 0x07
    31f0:	78 85       	ldd	r23, Y+8	; 0x08
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e8       	ldi	r20, 0x80	; 128
    31fc:	5f e3       	ldi	r21, 0x3F	; 63
    31fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3202:	88 23       	and	r24, r24
    3204:	2c f4       	brge	.+10     	; 0x3210 <LCD_init+0x82>
		__ticks = 1;
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	9e 83       	std	Y+6, r25	; 0x06
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	3f c0       	rjmp	.+126    	; 0x328e <LCD_init+0x100>
	else if (__tmp > 65535)
    3210:	6f 81       	ldd	r22, Y+7	; 0x07
    3212:	78 85       	ldd	r23, Y+8	; 0x08
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	3f ef       	ldi	r19, 0xFF	; 255
    321c:	4f e7       	ldi	r20, 0x7F	; 127
    321e:	57 e4       	ldi	r21, 0x47	; 71
    3220:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3224:	18 16       	cp	r1, r24
    3226:	4c f5       	brge	.+82     	; 0x327a <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3228:	6b 85       	ldd	r22, Y+11	; 0x0b
    322a:	7c 85       	ldd	r23, Y+12	; 0x0c
    322c:	8d 85       	ldd	r24, Y+13	; 0x0d
    322e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e2       	ldi	r20, 0x20	; 32
    3236:	51 e4       	ldi	r21, 0x41	; 65
    3238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	9e 83       	std	Y+6, r25	; 0x06
    324e:	8d 83       	std	Y+5, r24	; 0x05
    3250:	0f c0       	rjmp	.+30     	; 0x3270 <LCD_init+0xe2>
    3252:	80 e9       	ldi	r24, 0x90	; 144
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	9c 83       	std	Y+4, r25	; 0x04
    3258:	8b 83       	std	Y+3, r24	; 0x03
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	9c 81       	ldd	r25, Y+4	; 0x04
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <LCD_init+0xd0>
    3262:	9c 83       	std	Y+4, r25	; 0x04
    3264:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3266:	8d 81       	ldd	r24, Y+5	; 0x05
    3268:	9e 81       	ldd	r25, Y+6	; 0x06
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	9e 83       	std	Y+6, r25	; 0x06
    326e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	69 f7       	brne	.-38     	; 0x3252 <LCD_init+0xc4>
    3278:	14 c0       	rjmp	.+40     	; 0x32a2 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327a:	6f 81       	ldd	r22, Y+7	; 0x07
    327c:	78 85       	ldd	r23, Y+8	; 0x08
    327e:	89 85       	ldd	r24, Y+9	; 0x09
    3280:	9a 85       	ldd	r25, Y+10	; 0x0a
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	9a 83       	std	Y+2, r25	; 0x02
    3294:	89 83       	std	Y+1, r24	; 0x01
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	f1 f7       	brne	.-4      	; 0x329a <LCD_init+0x10c>
    329e:	9a 83       	std	Y+2, r25	; 0x02
    32a0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    32a2:	88 e3       	ldi	r24, 0x38	; 56
    32a4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    32a8:	8c e0       	ldi	r24, 0x0C	; 12
    32aa:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
}
    32b4:	2e 96       	adiw	r28, 0x0e	; 14
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <LCD_GoToXY+0x6>
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <LCD_GoToXY+0x8>
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	88 32       	cpi	r24, 0x28	; 40
    32da:	c0 f4       	brcc	.+48     	; 0x330c <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	28 2f       	mov	r18, r24
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	3c 83       	std	Y+4, r19	; 0x04
    32e4:	2b 83       	std	Y+3, r18	; 0x03
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	31 f0       	breq	.+12     	; 0x32fa <LCD_GoToXY+0x34>
    32ee:	2b 81       	ldd	r18, Y+3	; 0x03
    32f0:	3c 81       	ldd	r19, Y+4	; 0x04
    32f2:	21 30       	cpi	r18, 0x01	; 1
    32f4:	31 05       	cpc	r19, r1
    32f6:	31 f0       	breq	.+12     	; 0x3304 <LCD_GoToXY+0x3e>
    32f8:	09 c0       	rjmp	.+18     	; 0x330c <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    32fa:	8a 81       	ldd	r24, Y+2	; 0x02
    32fc:	80 58       	subi	r24, 0x80	; 128
    32fe:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
    3302:	04 c0       	rjmp	.+8      	; 0x330c <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	80 54       	subi	r24, 0x40	; 64
    3308:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
			break;
		}
	}
}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <LCD_displayString>:

void LCD_displayString(const char *str)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	00 d0       	rcall	.+0      	; 0x3320 <LCD_displayString+0x6>
    3320:	0f 92       	push	r0
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	9b 83       	std	Y+3, r25	; 0x03
    3328:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    332a:	19 82       	std	Y+1, r1	; 0x01
    332c:	0e c0       	rjmp	.+28     	; 0x334a <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	28 2f       	mov	r18, r24
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	9b 81       	ldd	r25, Y+3	; 0x03
    3338:	fc 01       	movw	r30, r24
    333a:	e2 0f       	add	r30, r18
    333c:	f3 1f       	adc	r31, r19
    333e:	80 81       	ld	r24, Z
    3340:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
		i++;
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	8f 5f       	subi	r24, 0xFF	; 255
    3348:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	28 2f       	mov	r18, r24
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	9b 81       	ldd	r25, Y+3	; 0x03
    3354:	fc 01       	movw	r30, r24
    3356:	e2 0f       	add	r30, r18
    3358:	f3 1f       	adc	r31, r19
    335a:	80 81       	ld	r24, Z
    335c:	88 23       	and	r24, r24
    335e:	39 f7       	brne	.-50     	; 0x332e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	28 97       	sbiw	r28, 0x08	; 8
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	8b 83       	std	Y+3, r24	; 0x03
    3382:	6c 83       	std	Y+4, r22	; 0x04
    3384:	5e 83       	std	Y+6, r21	; 0x06
    3386:	4d 83       	std	Y+5, r20	; 0x05
    3388:	38 87       	std	Y+8, r19	; 0x08
    338a:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    338c:	1a 82       	std	Y+2, r1	; 0x02
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    3392:	8b 81       	ldd	r24, Y+3	; 0x03
    3394:	88 23       	and	r24, r24
    3396:	49 f4       	brne	.+18     	; 0x33aa <LCD_String_xy+0x3e>
    3398:	8c 81       	ldd	r24, Y+4	; 0x04
    339a:	80 31       	cpi	r24, 0x10	; 16
    339c:	30 f4       	brcc	.+12     	; 0x33aa <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    339e:	8c 81       	ldd	r24, Y+4	; 0x04
    33a0:	8f 70       	andi	r24, 0x0F	; 15
    33a2:	80 68       	ori	r24, 0x80	; 128
    33a4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
    33a8:	3a c0       	rjmp	.+116    	; 0x341e <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	b9 f5       	brne	.+110    	; 0x341e <LCD_String_xy+0xb2>
    33b0:	8c 81       	ldd	r24, Y+4	; 0x04
    33b2:	80 31       	cpi	r24, 0x10	; 16
    33b4:	a0 f5       	brcc	.+104    	; 0x341e <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    33b6:	8c 81       	ldd	r24, Y+4	; 0x04
    33b8:	8f 70       	andi	r24, 0x0F	; 15
    33ba:	80 6c       	ori	r24, 0xC0	; 192
    33bc:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
    33c0:	2e c0       	rjmp	.+92     	; 0x341e <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ca:	9e 81       	ldd	r25, Y+6	; 0x06
    33cc:	fc 01       	movw	r30, r24
    33ce:	e2 0f       	add	r30, r18
    33d0:	f3 1f       	adc	r31, r19
    33d2:	80 81       	ld	r24, Z
    33d4:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
		i++;
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	8f 5f       	subi	r24, 0xFF	; 255
    33dc:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	88 23       	and	r24, r24
    33e2:	71 f4       	brne	.+28     	; 0x3400 <LCD_String_xy+0x94>
    33e4:	8c 81       	ldd	r24, Y+4	; 0x04
    33e6:	83 30       	cpi	r24, 0x03	; 3
    33e8:	58 f0       	brcs	.+22     	; 0x3400 <LCD_String_xy+0x94>
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	8b 30       	cpi	r24, 0x0B	; 11
    33ee:	41 f4       	brne	.+16     	; 0x3400 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	60 e0       	ldi	r22, 0x00	; 0
    33f4:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
			c++;
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	8f 5f       	subi	r24, 0xFF	; 255
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	0b c0       	rjmp	.+22     	; 0x3416 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	81 30       	cpi	r24, 0x01	; 1
    3404:	41 f4       	brne	.+16     	; 0x3416 <LCD_String_xy+0xaa>
    3406:	8c 81       	ldd	r24, Y+4	; 0x04
    3408:	83 30       	cpi	r24, 0x03	; 3
    340a:	28 f0       	brcs	.+10     	; 0x3416 <LCD_String_xy+0xaa>
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	8b 30       	cpi	r24, 0x0B	; 11
    3410:	11 f4       	brne	.+4      	; 0x3416 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3412:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>
		}

		*count = c;
    3416:	ef 81       	ldd	r30, Y+7	; 0x07
    3418:	f8 85       	ldd	r31, Y+8	; 0x08
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    341e:	8a 81       	ldd	r24, Y+2	; 0x02
    3420:	28 2f       	mov	r18, r24
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	8d 81       	ldd	r24, Y+5	; 0x05
    3426:	9e 81       	ldd	r25, Y+6	; 0x06
    3428:	fc 01       	movw	r30, r24
    342a:	e2 0f       	add	r30, r18
    342c:	f3 1f       	adc	r31, r19
    342e:	80 81       	ld	r24, Z
    3430:	88 23       	and	r24, r24
    3432:	39 f6       	brne	.-114    	; 0x33c2 <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3434:	28 96       	adiw	r28, 0x08	; 8
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret

00003446 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	2e 97       	sbiw	r28, 0x0e	; 14
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a0 e0       	ldi	r26, 0x00	; 0
    3466:	b0 e4       	ldi	r27, 0x40	; 64
    3468:	8b 87       	std	Y+11, r24	; 0x0b
    346a:	9c 87       	std	Y+12, r25	; 0x0c
    346c:	ad 87       	std	Y+13, r26	; 0x0d
    346e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3470:	6b 85       	ldd	r22, Y+11	; 0x0b
    3472:	7c 85       	ldd	r23, Y+12	; 0x0c
    3474:	8d 85       	ldd	r24, Y+13	; 0x0d
    3476:	9e 85       	ldd	r25, Y+14	; 0x0e
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4a e7       	ldi	r20, 0x7A	; 122
    347e:	55 e4       	ldi	r21, 0x45	; 69
    3480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8f 83       	std	Y+7, r24	; 0x07
    348a:	98 87       	std	Y+8, r25	; 0x08
    348c:	a9 87       	std	Y+9, r26	; 0x09
    348e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3490:	6f 81       	ldd	r22, Y+7	; 0x07
    3492:	78 85       	ldd	r23, Y+8	; 0x08
    3494:	89 85       	ldd	r24, Y+9	; 0x09
    3496:	9a 85       	ldd	r25, Y+10	; 0x0a
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e8       	ldi	r20, 0x80	; 128
    349e:	5f e3       	ldi	r21, 0x3F	; 63
    34a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a4:	88 23       	and	r24, r24
    34a6:	2c f4       	brge	.+10     	; 0x34b2 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9e 83       	std	Y+6, r25	; 0x06
    34ae:	8d 83       	std	Y+5, r24	; 0x05
    34b0:	3f c0       	rjmp	.+126    	; 0x3530 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    34b2:	6f 81       	ldd	r22, Y+7	; 0x07
    34b4:	78 85       	ldd	r23, Y+8	; 0x08
    34b6:	89 85       	ldd	r24, Y+9	; 0x09
    34b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	3f ef       	ldi	r19, 0xFF	; 255
    34be:	4f e7       	ldi	r20, 0x7F	; 127
    34c0:	57 e4       	ldi	r21, 0x47	; 71
    34c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c6:	18 16       	cp	r1, r24
    34c8:	4c f5       	brge	.+82     	; 0x351c <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    34cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e2       	ldi	r20, 0x20	; 32
    34d8:	51 e4       	ldi	r21, 0x41	; 65
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	9e 83       	std	Y+6, r25	; 0x06
    34f0:	8d 83       	std	Y+5, r24	; 0x05
    34f2:	0f c0       	rjmp	.+30     	; 0x3512 <LCD_ClearScreen+0xcc>
    34f4:	80 e9       	ldi	r24, 0x90	; 144
    34f6:	91 e0       	ldi	r25, 0x01	; 1
    34f8:	9c 83       	std	Y+4, r25	; 0x04
    34fa:	8b 83       	std	Y+3, r24	; 0x03
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	f1 f7       	brne	.-4      	; 0x3500 <LCD_ClearScreen+0xba>
    3504:	9c 83       	std	Y+4, r25	; 0x04
    3506:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3508:	8d 81       	ldd	r24, Y+5	; 0x05
    350a:	9e 81       	ldd	r25, Y+6	; 0x06
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	9e 83       	std	Y+6, r25	; 0x06
    3510:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	69 f7       	brne	.-38     	; 0x34f4 <LCD_ClearScreen+0xae>
    351a:	14 c0       	rjmp	.+40     	; 0x3544 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351c:	6f 81       	ldd	r22, Y+7	; 0x07
    351e:	78 85       	ldd	r23, Y+8	; 0x08
    3520:	89 85       	ldd	r24, Y+9	; 0x09
    3522:	9a 85       	ldd	r25, Y+10	; 0x0a
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
    3530:	8d 81       	ldd	r24, Y+5	; 0x05
    3532:	9e 81       	ldd	r25, Y+6	; 0x06
    3534:	9a 83       	std	Y+2, r25	; 0x02
    3536:	89 83       	std	Y+1, r24	; 0x01
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	9a 81       	ldd	r25, Y+2	; 0x02
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <LCD_ClearScreen+0xf6>
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3544:	2e 96       	adiw	r28, 0x0e	; 14
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	cf 91       	pop	r28
    3552:	df 91       	pop	r29
    3554:	08 95       	ret

00003556 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	2e 97       	sbiw	r28, 0x0e	; 14
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    356a:	88 e1       	ldi	r24, 0x18	; 24
    356c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	a0 ea       	ldi	r26, 0xA0	; 160
    3576:	b1 e4       	ldi	r27, 0x41	; 65
    3578:	8b 87       	std	Y+11, r24	; 0x0b
    357a:	9c 87       	std	Y+12, r25	; 0x0c
    357c:	ad 87       	std	Y+13, r26	; 0x0d
    357e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3580:	6b 85       	ldd	r22, Y+11	; 0x0b
    3582:	7c 85       	ldd	r23, Y+12	; 0x0c
    3584:	8d 85       	ldd	r24, Y+13	; 0x0d
    3586:	9e 85       	ldd	r25, Y+14	; 0x0e
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	4a e7       	ldi	r20, 0x7A	; 122
    358e:	55 e4       	ldi	r21, 0x45	; 69
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	8f 83       	std	Y+7, r24	; 0x07
    359a:	98 87       	std	Y+8, r25	; 0x08
    359c:	a9 87       	std	Y+9, r26	; 0x09
    359e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a0:	6f 81       	ldd	r22, Y+7	; 0x07
    35a2:	78 85       	ldd	r23, Y+8	; 0x08
    35a4:	89 85       	ldd	r24, Y+9	; 0x09
    35a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	40 e8       	ldi	r20, 0x80	; 128
    35ae:	5f e3       	ldi	r21, 0x3F	; 63
    35b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b4:	88 23       	and	r24, r24
    35b6:	2c f4       	brge	.+10     	; 0x35c2 <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	3f c0       	rjmp	.+126    	; 0x3640 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    35c2:	6f 81       	ldd	r22, Y+7	; 0x07
    35c4:	78 85       	ldd	r23, Y+8	; 0x08
    35c6:	89 85       	ldd	r24, Y+9	; 0x09
    35c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	3f ef       	ldi	r19, 0xFF	; 255
    35ce:	4f e7       	ldi	r20, 0x7F	; 127
    35d0:	57 e4       	ldi	r21, 0x47	; 71
    35d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d6:	18 16       	cp	r1, r24
    35d8:	4c f5       	brge	.+82     	; 0x362c <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35da:	6b 85       	ldd	r22, Y+11	; 0x0b
    35dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35de:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e2       	ldi	r20, 0x20	; 32
    35e8:	51 e4       	ldi	r21, 0x41	; 65
    35ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	bc 01       	movw	r22, r24
    35f4:	cd 01       	movw	r24, r26
    35f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	0f c0       	rjmp	.+30     	; 0x3622 <LCD_ShiftingLeft+0xcc>
    3604:	80 e9       	ldi	r24, 0x90	; 144
    3606:	91 e0       	ldi	r25, 0x01	; 1
    3608:	9c 83       	std	Y+4, r25	; 0x04
    360a:	8b 83       	std	Y+3, r24	; 0x03
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	9c 81       	ldd	r25, Y+4	; 0x04
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <LCD_ShiftingLeft+0xba>
    3614:	9c 83       	std	Y+4, r25	; 0x04
    3616:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3618:	8d 81       	ldd	r24, Y+5	; 0x05
    361a:	9e 81       	ldd	r25, Y+6	; 0x06
    361c:	01 97       	sbiw	r24, 0x01	; 1
    361e:	9e 83       	std	Y+6, r25	; 0x06
    3620:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3622:	8d 81       	ldd	r24, Y+5	; 0x05
    3624:	9e 81       	ldd	r25, Y+6	; 0x06
    3626:	00 97       	sbiw	r24, 0x00	; 0
    3628:	69 f7       	brne	.-38     	; 0x3604 <LCD_ShiftingLeft+0xae>
    362a:	14 c0       	rjmp	.+40     	; 0x3654 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362c:	6f 81       	ldd	r22, Y+7	; 0x07
    362e:	78 85       	ldd	r23, Y+8	; 0x08
    3630:	89 85       	ldd	r24, Y+9	; 0x09
    3632:	9a 85       	ldd	r25, Y+10	; 0x0a
    3634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	8d 83       	std	Y+5, r24	; 0x05
    3640:	8d 81       	ldd	r24, Y+5	; 0x05
    3642:	9e 81       	ldd	r25, Y+6	; 0x06
    3644:	9a 83       	std	Y+2, r25	; 0x02
    3646:	89 83       	std	Y+1, r24	; 0x01
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	9a 81       	ldd	r25, Y+2	; 0x02
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	f1 f7       	brne	.-4      	; 0x364c <LCD_ShiftingLeft+0xf6>
    3650:	9a 83       	std	Y+2, r25	; 0x02
    3652:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3654:	2e 96       	adiw	r28, 0x0e	; 14
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	2e 97       	sbiw	r28, 0x0e	; 14
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    367a:	8c e1       	ldi	r24, 0x1C	; 28
    367c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	a0 ea       	ldi	r26, 0xA0	; 160
    3686:	b1 e4       	ldi	r27, 0x41	; 65
    3688:	8b 87       	std	Y+11, r24	; 0x0b
    368a:	9c 87       	std	Y+12, r25	; 0x0c
    368c:	ad 87       	std	Y+13, r26	; 0x0d
    368e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3690:	6b 85       	ldd	r22, Y+11	; 0x0b
    3692:	7c 85       	ldd	r23, Y+12	; 0x0c
    3694:	8d 85       	ldd	r24, Y+13	; 0x0d
    3696:	9e 85       	ldd	r25, Y+14	; 0x0e
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	4a e7       	ldi	r20, 0x7A	; 122
    369e:	55 e4       	ldi	r21, 0x45	; 69
    36a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	8f 83       	std	Y+7, r24	; 0x07
    36aa:	98 87       	std	Y+8, r25	; 0x08
    36ac:	a9 87       	std	Y+9, r26	; 0x09
    36ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36b0:	6f 81       	ldd	r22, Y+7	; 0x07
    36b2:	78 85       	ldd	r23, Y+8	; 0x08
    36b4:	89 85       	ldd	r24, Y+9	; 0x09
    36b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 e8       	ldi	r20, 0x80	; 128
    36be:	5f e3       	ldi	r21, 0x3F	; 63
    36c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36c4:	88 23       	and	r24, r24
    36c6:	2c f4       	brge	.+10     	; 0x36d2 <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	9e 83       	std	Y+6, r25	; 0x06
    36ce:	8d 83       	std	Y+5, r24	; 0x05
    36d0:	3f c0       	rjmp	.+126    	; 0x3750 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    36d2:	6f 81       	ldd	r22, Y+7	; 0x07
    36d4:	78 85       	ldd	r23, Y+8	; 0x08
    36d6:	89 85       	ldd	r24, Y+9	; 0x09
    36d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	3f ef       	ldi	r19, 0xFF	; 255
    36de:	4f e7       	ldi	r20, 0x7F	; 127
    36e0:	57 e4       	ldi	r21, 0x47	; 71
    36e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36e6:	18 16       	cp	r1, r24
    36e8:	4c f5       	brge	.+82     	; 0x373c <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e2       	ldi	r20, 0x20	; 32
    36f8:	51 e4       	ldi	r21, 0x41	; 65
    36fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	bc 01       	movw	r22, r24
    3704:	cd 01       	movw	r24, r26
    3706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	9e 83       	std	Y+6, r25	; 0x06
    3710:	8d 83       	std	Y+5, r24	; 0x05
    3712:	0f c0       	rjmp	.+30     	; 0x3732 <LCD_ShiftingRight+0xcc>
    3714:	80 e9       	ldi	r24, 0x90	; 144
    3716:	91 e0       	ldi	r25, 0x01	; 1
    3718:	9c 83       	std	Y+4, r25	; 0x04
    371a:	8b 83       	std	Y+3, r24	; 0x03
    371c:	8b 81       	ldd	r24, Y+3	; 0x03
    371e:	9c 81       	ldd	r25, Y+4	; 0x04
    3720:	01 97       	sbiw	r24, 0x01	; 1
    3722:	f1 f7       	brne	.-4      	; 0x3720 <LCD_ShiftingRight+0xba>
    3724:	9c 83       	std	Y+4, r25	; 0x04
    3726:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3728:	8d 81       	ldd	r24, Y+5	; 0x05
    372a:	9e 81       	ldd	r25, Y+6	; 0x06
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	9e 83       	std	Y+6, r25	; 0x06
    3730:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3732:	8d 81       	ldd	r24, Y+5	; 0x05
    3734:	9e 81       	ldd	r25, Y+6	; 0x06
    3736:	00 97       	sbiw	r24, 0x00	; 0
    3738:	69 f7       	brne	.-38     	; 0x3714 <LCD_ShiftingRight+0xae>
    373a:	14 c0       	rjmp	.+40     	; 0x3764 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    373c:	6f 81       	ldd	r22, Y+7	; 0x07
    373e:	78 85       	ldd	r23, Y+8	; 0x08
    3740:	89 85       	ldd	r24, Y+9	; 0x09
    3742:	9a 85       	ldd	r25, Y+10	; 0x0a
    3744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	9e 83       	std	Y+6, r25	; 0x06
    374e:	8d 83       	std	Y+5, r24	; 0x05
    3750:	8d 81       	ldd	r24, Y+5	; 0x05
    3752:	9e 81       	ldd	r25, Y+6	; 0x06
    3754:	9a 83       	std	Y+2, r25	; 0x02
    3756:	89 83       	std	Y+1, r24	; 0x01
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <LCD_ShiftingRight+0xf6>
    3760:	9a 83       	std	Y+2, r25	; 0x02
    3762:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3764:	2e 96       	adiw	r28, 0x0e	; 14
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3776:	0f 93       	push	r16
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	28 97       	sbiw	r28, 0x08	; 8
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	8b 83       	std	Y+3, r24	; 0x03
    378e:	7d 83       	std	Y+5, r23	; 0x05
    3790:	6c 83       	std	Y+4, r22	; 0x04
    3792:	4e 83       	std	Y+6, r20	; 0x06
    3794:	2f 83       	std	Y+7, r18	; 0x07
    3796:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3798:	88 85       	ldd	r24, Y+8	; 0x08
    379a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    379e:	1a 82       	std	Y+2, r1	; 0x02
    37a0:	19 82       	std	Y+1, r1	; 0x01
    37a2:	0f c0       	rjmp	.+30     	; 0x37c2 <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    37a4:	29 81       	ldd	r18, Y+1	; 0x01
    37a6:	3a 81       	ldd	r19, Y+2	; 0x02
    37a8:	8c 81       	ldd	r24, Y+4	; 0x04
    37aa:	9d 81       	ldd	r25, Y+5	; 0x05
    37ac:	fc 01       	movw	r30, r24
    37ae:	e2 0f       	add	r30, r18
    37b0:	f3 1f       	adc	r31, r19
    37b2:	80 81       	ld	r24, Z
    37b4:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	9a 83       	std	Y+2, r25	; 0x02
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	88 30       	cpi	r24, 0x08	; 8
    37c8:	91 05       	cpc	r25, r1
    37ca:	64 f3       	brlt	.-40     	; 0x37a4 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    37cc:	8e 81       	ldd	r24, Y+6	; 0x06
    37ce:	6f 81       	ldd	r22, Y+7	; 0x07
    37d0:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    37d4:	8b 81       	ldd	r24, Y+3	; 0x03
    37d6:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    37da:	8f 81       	ldd	r24, Y+7	; 0x07
    37dc:	80 31       	cpi	r24, 0x10	; 16
    37de:	48 f0       	brcs	.+18     	; 0x37f2 <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    37e0:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    37ec:	8b 81       	ldd	r24, Y+3	; 0x03
    37ee:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
	}
}
    37f2:	28 96       	adiw	r28, 0x08	; 8
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	f8 94       	cli
    37f8:	de bf       	out	0x3e, r29	; 62
    37fa:	0f be       	out	0x3f, r0	; 63
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	0f 91       	pop	r16
    3804:	08 95       	ret

00003806 <First_Screen>:
#include<util/delay.h>
#define F_CPU 16000000UL

#define Password_Length	6

void First_Screen(){
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	2e 97       	sbiw	r28, 0x0e	; 14
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	ac e0       	ldi	r26, 0x0C	; 12
    3820:	b2 e4       	ldi	r27, 0x42	; 66
    3822:	8b 87       	std	Y+11, r24	; 0x0b
    3824:	9c 87       	std	Y+12, r25	; 0x0c
    3826:	ad 87       	std	Y+13, r26	; 0x0d
    3828:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    382a:	6b 85       	ldd	r22, Y+11	; 0x0b
    382c:	7c 85       	ldd	r23, Y+12	; 0x0c
    382e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3830:	9e 85       	ldd	r25, Y+14	; 0x0e
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	4a e7       	ldi	r20, 0x7A	; 122
    3838:	55 e4       	ldi	r21, 0x45	; 69
    383a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	8f 83       	std	Y+7, r24	; 0x07
    3844:	98 87       	std	Y+8, r25	; 0x08
    3846:	a9 87       	std	Y+9, r26	; 0x09
    3848:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    384a:	6f 81       	ldd	r22, Y+7	; 0x07
    384c:	78 85       	ldd	r23, Y+8	; 0x08
    384e:	89 85       	ldd	r24, Y+9	; 0x09
    3850:	9a 85       	ldd	r25, Y+10	; 0x0a
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e8       	ldi	r20, 0x80	; 128
    3858:	5f e3       	ldi	r21, 0x3F	; 63
    385a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    385e:	88 23       	and	r24, r24
    3860:	2c f4       	brge	.+10     	; 0x386c <First_Screen+0x66>
		__ticks = 1;
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	9e 83       	std	Y+6, r25	; 0x06
    3868:	8d 83       	std	Y+5, r24	; 0x05
    386a:	3f c0       	rjmp	.+126    	; 0x38ea <First_Screen+0xe4>
	else if (__tmp > 65535)
    386c:	6f 81       	ldd	r22, Y+7	; 0x07
    386e:	78 85       	ldd	r23, Y+8	; 0x08
    3870:	89 85       	ldd	r24, Y+9	; 0x09
    3872:	9a 85       	ldd	r25, Y+10	; 0x0a
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	3f ef       	ldi	r19, 0xFF	; 255
    3878:	4f e7       	ldi	r20, 0x7F	; 127
    387a:	57 e4       	ldi	r21, 0x47	; 71
    387c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3880:	18 16       	cp	r1, r24
    3882:	4c f5       	brge	.+82     	; 0x38d6 <First_Screen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3884:	6b 85       	ldd	r22, Y+11	; 0x0b
    3886:	7c 85       	ldd	r23, Y+12	; 0x0c
    3888:	8d 85       	ldd	r24, Y+13	; 0x0d
    388a:	9e 85       	ldd	r25, Y+14	; 0x0e
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 e2       	ldi	r20, 0x20	; 32
    3892:	51 e4       	ldi	r21, 0x41	; 65
    3894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	bc 01       	movw	r22, r24
    389e:	cd 01       	movw	r24, r26
    38a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
    38ac:	0f c0       	rjmp	.+30     	; 0x38cc <First_Screen+0xc6>
    38ae:	80 e9       	ldi	r24, 0x90	; 144
    38b0:	91 e0       	ldi	r25, 0x01	; 1
    38b2:	9c 83       	std	Y+4, r25	; 0x04
    38b4:	8b 83       	std	Y+3, r24	; 0x03
    38b6:	8b 81       	ldd	r24, Y+3	; 0x03
    38b8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	f1 f7       	brne	.-4      	; 0x38ba <First_Screen+0xb4>
    38be:	9c 83       	std	Y+4, r25	; 0x04
    38c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c2:	8d 81       	ldd	r24, Y+5	; 0x05
    38c4:	9e 81       	ldd	r25, Y+6	; 0x06
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	9e 83       	std	Y+6, r25	; 0x06
    38ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38cc:	8d 81       	ldd	r24, Y+5	; 0x05
    38ce:	9e 81       	ldd	r25, Y+6	; 0x06
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	69 f7       	brne	.-38     	; 0x38ae <First_Screen+0xa8>
    38d4:	14 c0       	rjmp	.+40     	; 0x38fe <First_Screen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d6:	6f 81       	ldd	r22, Y+7	; 0x07
    38d8:	78 85       	ldd	r23, Y+8	; 0x08
    38da:	89 85       	ldd	r24, Y+9	; 0x09
    38dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	9e 83       	std	Y+6, r25	; 0x06
    38e8:	8d 83       	std	Y+5, r24	; 0x05
    38ea:	8d 81       	ldd	r24, Y+5	; 0x05
    38ec:	9e 81       	ldd	r25, Y+6	; 0x06
    38ee:	9a 83       	std	Y+2, r25	; 0x02
    38f0:	89 83       	std	Y+1, r24	; 0x01
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
    38f6:	01 97       	sbiw	r24, 0x01	; 1
    38f8:	f1 f7       	brne	.-4      	; 0x38f6 <First_Screen+0xf0>
    38fa:	9a 83       	std	Y+2, r25	; 0x02
    38fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_ClearScreen();
    38fe:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>
	LCD_displayString("1-DC Motor");
    3902:	80 e6       	ldi	r24, 0x60	; 96
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
	LCD_GoToXY(1, 0);
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
	LCD_displayString("2-Stepper");
    3912:	8b e6       	ldi	r24, 0x6B	; 107
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
	LCD_GoToXY(1, 10);
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	6a e0       	ldi	r22, 0x0A	; 10
    391e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
	LCD_displayString("3-Exit");
    3922:	85 e7       	ldi	r24, 0x75	; 117
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
}
    392a:	2e 96       	adiw	r28, 0x0e	; 14
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	cf 91       	pop	r28
    3938:	df 91       	pop	r29
    393a:	08 95       	ret

0000393c <Second_Screen>:

void Second_Screen(){
    393c:	df 93       	push	r29
    393e:	cf 93       	push	r28
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    3944:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>
	LCD_displayString("1-CW Motor");
    3948:	8c e7       	ldi	r24, 0x7C	; 124
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
	LCD_GoToXY(1, 0);
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	60 e0       	ldi	r22, 0x00	; 0
    3954:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
	LCD_displayString("2-CCW Motor");
    3958:	87 e8       	ldi	r24, 0x87	; 135
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
	LCD_GoToXY(0, 10);
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	6a e0       	ldi	r22, 0x0A	; 10
    3964:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
	LCD_displayString("3-back");
    3968:	83 e9       	ldi	r24, 0x93	; 147
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
}
    3970:	cf 91       	pop	r28
    3972:	df 91       	pop	r29
    3974:	08 95       	ret

00003976 <StepperAngles_Screen>:

void StepperAngles_Screen(){
    3976:	df 93       	push	r29
    3978:	cf 93       	push	r28
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    397e:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>

	LCD_displayString("1-90");
    3982:	8a e9       	ldi	r24, 0x9A	; 154
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>

	LCD_GoToXY(1, 0);
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
	LCD_displayString("2-180");
    3992:	8f e9       	ldi	r24, 0x9F	; 159
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
}
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <StepperDirection_Screen>:

void StepperDirection_Screen(){
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    39a8:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>

	LCD_displayString("1-CW");
    39ac:	85 ea       	ldi	r24, 0xA5	; 165
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>

	LCD_GoToXY(1, 0);
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
	LCD_displayString("2-CCW");
    39bc:	8a ea       	ldi	r24, 0xAA	; 170
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
}
    39c4:	cf 91       	pop	r28
    39c6:	df 91       	pop	r29
    39c8:	08 95       	ret

000039ca <main>:


void Tog_Led(void);
void EXTI_System(void);

int main(){
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62

	DC_Motor_Init(1, 2);
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	62 e0       	ldi	r22, 0x02	; 2
    39d6:	0e 94 3e 10 	call	0x207c	; 0x207c <DC_Motor_Init>
	Stepper_Init();
    39da:	0e 94 a3 05 	call	0xb46	; 0xb46 <Stepper_Init>


	LCD_setPortDirection(0, 0);
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_setPortDirection>
	DIO_u8SetPinDirection(1, 2, 0);
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	62 e0       	ldi	r22, 0x02	; 2
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(1, 1);
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	61 e0       	ldi	r22, 0x01	; 1
    39f8:	0e 94 a0 09 	call	0x1340	; 0x1340 <DIO_u8SetPortDirection>
	LCD_setPortDirection(2, 1);
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	61 e0       	ldi	r22, 0x01	; 1
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_setPortDirection>
	LCD_setPortDirection(3, 1);
    3a08:	83 e0       	ldi	r24, 0x03	; 3
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	61 e0       	ldi	r22, 0x01	; 1
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_setPortDirection>
	DIO_u8SetPinDirection(3, 3, 0);
    3a14:	83 e0       	ldi	r24, 0x03	; 3
    3a16:	63 e0       	ldi	r22, 0x03	; 3
    3a18:	40 e0       	ldi	r20, 0x00	; 0
    3a1a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_u8SetPinDirection>
	LCD_init();
    3a1e:	0e 94 c7 18 	call	0x318e	; 0x318e <LCD_init>


	EXTI_voidEnable(1, 2);
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	62 e0       	ldi	r22, 0x02	; 2
    3a26:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <EXTI_voidEnable>
	EXTI_voidEnable_GIE();
    3a2a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <EXTI_voidEnable_GIE>

	setCallBack(&EXTI_System, 1);
    3a2e:	8e e3       	ldi	r24, 0x3E	; 62
    3a30:	9d e1       	ldi	r25, 0x1D	; 29
    3a32:	61 e0       	ldi	r22, 0x01	; 1
    3a34:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <setCallBack>
    3a38:	ff cf       	rjmp	.-2      	; 0x3a38 <main+0x6e>

00003a3a <Tog_Led>:
	while(1);
	return 0;
}


void Tog_Led(void){
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8_Flag = 0;
	if(Local_u8_Flag == 1){
    3a42:	80 91 13 01 	lds	r24, 0x0113
    3a46:	81 30       	cpi	r24, 0x01	; 1
    3a48:	59 f4       	brne	.+22     	; 0x3a60 <Tog_Led+0x26>
		LCD_setPinValue(1, 6, 1);
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	66 e0       	ldi	r22, 0x06	; 6
    3a50:	70 e0       	ldi	r23, 0x00	; 0
    3a52:	41 e0       	ldi	r20, 0x01	; 1
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
		Local_u8_Flag = 0;
    3a5a:	10 92 13 01 	sts	0x0113, r1
    3a5e:	0b c0       	rjmp	.+22     	; 0x3a76 <Tog_Led+0x3c>
	}
	else{
		LCD_setPinValue(1, 6, 0);
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	66 e0       	ldi	r22, 0x06	; 6
    3a66:	70 e0       	ldi	r23, 0x00	; 0
    3a68:	40 e0       	ldi	r20, 0x00	; 0
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
		Local_u8_Flag = 1;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	80 93 13 01 	sts	0x0113, r24
	}
}
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	08 95       	ret

00003a7c <EXTI_System>:


void EXTI_System(void){
    3a7c:	0f 93       	push	r16
    3a7e:	1f 93       	push	r17
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	c6 50       	subi	r28, 0x06	; 6
    3a8a:	d1 40       	sbci	r29, 0x01	; 1
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	de bf       	out	0x3e, r29	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	cd bf       	out	0x3d, r28	; 61
	static u8 Local_u8_Flag = 0;
	u8 key_Pressed;

	if(Local_u8_Flag == 1){
    3a96:	80 91 14 01 	lds	r24, 0x0114
    3a9a:	81 30       	cpi	r24, 0x01	; 1
    3a9c:	11 f0       	breq	.+4      	; 0x3aa2 <EXTI_System+0x26>
    3a9e:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <EXTI_System+0x1bf6>
		LCD_setPinValue(1, 6, 1);
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	66 e0       	ldi	r22, 0x06	; 6
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	50 e0       	ldi	r21, 0x00	; 0
    3aae:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
		LCD_String_xy(0, 0, "Enter Password", &count);
    3ab2:	20 eb       	ldi	r18, 0xB0	; 176
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	ef e1       	ldi	r30, 0x1F	; 31
    3ab8:	f1 e0       	ldi	r31, 0x01	; 1
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	60 e0       	ldi	r22, 0x00	; 0
    3abe:	a9 01       	movw	r20, r18
    3ac0:	9f 01       	movw	r18, r30
    3ac2:	0e 94 b6 19 	call	0x336c	; 0x336c <LCD_String_xy>
		LCD_GoToXY(1, 0);
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>

		while(1){
			key_Pressed = Keypad_GetPressedKey();
    3ace:	0e 94 5d 14 	call	0x28ba	; 0x28ba <Keypad_GetPressedKey>
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	ea 5f       	subi	r30, 0xFA	; 250
    3ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad8:	80 83       	st	Z, r24

			if(key_Pressed == 1){
    3ada:	fe 01       	movw	r30, r28
    3adc:	ea 5f       	subi	r30, 0xFA	; 250
    3ade:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae0:	80 81       	ld	r24, Z
    3ae2:	81 30       	cpi	r24, 0x01	; 1
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <EXTI_System+0x6c>
    3ae6:	c5 c0       	rjmp	.+394    	; 0x3c72 <EXTI_System+0x1f6>
				LCD_displayCharacter('*');
    3ae8:	8a e2       	ldi	r24, 0x2A	; 42
    3aea:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '1';
    3aee:	80 91 12 01 	lds	r24, 0x0112
    3af2:	88 2f       	mov	r24, r24
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	fc 01       	movw	r30, r24
    3af8:	eb 5e       	subi	r30, 0xEB	; 235
    3afa:	fe 4f       	sbci	r31, 0xFE	; 254
    3afc:	81 e3       	ldi	r24, 0x31	; 49
    3afe:	80 83       	st	Z, r24
				c++;
    3b00:	80 91 12 01 	lds	r24, 0x0112
    3b04:	8f 5f       	subi	r24, 0xFF	; 255
    3b06:	80 93 12 01 	sts	0x0112, r24
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e7 50       	subi	r30, 0x07	; 7
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	ac e0       	ldi	r26, 0x0C	; 12
    3b16:	b2 e4       	ldi	r27, 0x42	; 66
    3b18:	80 83       	st	Z, r24
    3b1a:	91 83       	std	Z+1, r25	; 0x01
    3b1c:	a2 83       	std	Z+2, r26	; 0x02
    3b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b20:	8e 01       	movw	r16, r28
    3b22:	0b 50       	subi	r16, 0x0B	; 11
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	fe 01       	movw	r30, r28
    3b28:	e7 50       	subi	r30, 0x07	; 7
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	4a e7       	ldi	r20, 0x7A	; 122
    3b3a:	55 e4       	ldi	r21, 0x45	; 69
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	f8 01       	movw	r30, r16
    3b46:	80 83       	st	Z, r24
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	a2 83       	std	Z+2, r26	; 0x02
    3b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b4e:	fe 01       	movw	r30, r28
    3b50:	eb 50       	subi	r30, 0x0B	; 11
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	60 81       	ld	r22, Z
    3b56:	71 81       	ldd	r23, Z+1	; 0x01
    3b58:	82 81       	ldd	r24, Z+2	; 0x02
    3b5a:	93 81       	ldd	r25, Z+3	; 0x03
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e8       	ldi	r20, 0x80	; 128
    3b62:	5f e3       	ldi	r21, 0x3F	; 63
    3b64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	44 f4       	brge	.+16     	; 0x3b7c <EXTI_System+0x100>
		__ticks = 1;
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	ed 50       	subi	r30, 0x0D	; 13
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	91 83       	std	Z+1, r25	; 0x01
    3b78:	80 83       	st	Z, r24
    3b7a:	64 c0       	rjmp	.+200    	; 0x3c44 <EXTI_System+0x1c8>
	else if (__tmp > 65535)
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	eb 50       	subi	r30, 0x0B	; 11
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	60 81       	ld	r22, Z
    3b84:	71 81       	ldd	r23, Z+1	; 0x01
    3b86:	82 81       	ldd	r24, Z+2	; 0x02
    3b88:	93 81       	ldd	r25, Z+3	; 0x03
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	3f ef       	ldi	r19, 0xFF	; 255
    3b8e:	4f e7       	ldi	r20, 0x7F	; 127
    3b90:	57 e4       	ldi	r21, 0x47	; 71
    3b92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b96:	18 16       	cp	r1, r24
    3b98:	0c f0       	brlt	.+2      	; 0x3b9c <EXTI_System+0x120>
    3b9a:	43 c0       	rjmp	.+134    	; 0x3c22 <EXTI_System+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e7 50       	subi	r30, 0x07	; 7
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	60 81       	ld	r22, Z
    3ba4:	71 81       	ldd	r23, Z+1	; 0x01
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	93 81       	ldd	r25, Z+3	; 0x03
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	40 e2       	ldi	r20, 0x20	; 32
    3bb0:	51 e4       	ldi	r21, 0x41	; 65
    3bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	8e 01       	movw	r16, r28
    3bbc:	0d 50       	subi	r16, 0x0D	; 13
    3bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc0:	bc 01       	movw	r22, r24
    3bc2:	cd 01       	movw	r24, r26
    3bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	f8 01       	movw	r30, r16
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	80 83       	st	Z, r24
    3bd2:	1f c0       	rjmp	.+62     	; 0x3c12 <EXTI_System+0x196>
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	ef 50       	subi	r30, 0x0F	; 15
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	80 e9       	ldi	r24, 0x90	; 144
    3bdc:	91 e0       	ldi	r25, 0x01	; 1
    3bde:	91 83       	std	Z+1, r25	; 0x01
    3be0:	80 83       	st	Z, r24
    3be2:	fe 01       	movw	r30, r28
    3be4:	ef 50       	subi	r30, 0x0F	; 15
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 81       	ld	r24, Z
    3bea:	91 81       	ldd	r25, Z+1	; 0x01
    3bec:	01 97       	sbiw	r24, 0x01	; 1
    3bee:	f1 f7       	brne	.-4      	; 0x3bec <EXTI_System+0x170>
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	ef 50       	subi	r30, 0x0F	; 15
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bfa:	de 01       	movw	r26, r28
    3bfc:	ad 50       	subi	r26, 0x0D	; 13
    3bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    3c00:	fe 01       	movw	r30, r28
    3c02:	ed 50       	subi	r30, 0x0D	; 13
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	80 81       	ld	r24, Z
    3c08:	91 81       	ldd	r25, Z+1	; 0x01
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	11 96       	adiw	r26, 0x01	; 1
    3c0e:	9c 93       	st	X, r25
    3c10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c12:	fe 01       	movw	r30, r28
    3c14:	ed 50       	subi	r30, 0x0D	; 13
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	80 81       	ld	r24, Z
    3c1a:	91 81       	ldd	r25, Z+1	; 0x01
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	d1 f6       	brne	.-76     	; 0x3bd4 <EXTI_System+0x158>
    3c20:	28 c0       	rjmp	.+80     	; 0x3c72 <EXTI_System+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c22:	8e 01       	movw	r16, r28
    3c24:	0d 50       	subi	r16, 0x0D	; 13
    3c26:	1f 4f       	sbci	r17, 0xFF	; 255
    3c28:	fe 01       	movw	r30, r28
    3c2a:	eb 50       	subi	r30, 0x0B	; 11
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	82 81       	ldd	r24, Z+2	; 0x02
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	f8 01       	movw	r30, r16
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	80 83       	st	Z, r24
    3c44:	de 01       	movw	r26, r28
    3c46:	a1 51       	subi	r26, 0x11	; 17
    3c48:	bf 4f       	sbci	r27, 0xFF	; 255
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	ed 50       	subi	r30, 0x0D	; 13
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	80 81       	ld	r24, Z
    3c52:	91 81       	ldd	r25, Z+1	; 0x01
    3c54:	11 96       	adiw	r26, 0x01	; 1
    3c56:	9c 93       	st	X, r25
    3c58:	8e 93       	st	-X, r24
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	e1 51       	subi	r30, 0x11	; 17
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	80 81       	ld	r24, Z
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <EXTI_System+0x1e8>
    3c68:	fe 01       	movw	r30, r28
    3c6a:	e1 51       	subi	r30, 0x11	; 17
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 2){
    3c72:	fe 01       	movw	r30, r28
    3c74:	ea 5f       	subi	r30, 0xFA	; 250
    3c76:	fe 4f       	sbci	r31, 0xFE	; 254
    3c78:	80 81       	ld	r24, Z
    3c7a:	82 30       	cpi	r24, 0x02	; 2
    3c7c:	09 f0       	breq	.+2      	; 0x3c80 <EXTI_System+0x204>
    3c7e:	c5 c0       	rjmp	.+394    	; 0x3e0a <EXTI_System+0x38e>
				LCD_displayCharacter('*');
    3c80:	8a e2       	ldi	r24, 0x2A	; 42
    3c82:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '2';
    3c86:	80 91 12 01 	lds	r24, 0x0112
    3c8a:	88 2f       	mov	r24, r24
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	fc 01       	movw	r30, r24
    3c90:	eb 5e       	subi	r30, 0xEB	; 235
    3c92:	fe 4f       	sbci	r31, 0xFE	; 254
    3c94:	82 e3       	ldi	r24, 0x32	; 50
    3c96:	80 83       	st	Z, r24
				c++;
    3c98:	80 91 12 01 	lds	r24, 0x0112
    3c9c:	8f 5f       	subi	r24, 0xFF	; 255
    3c9e:	80 93 12 01 	sts	0x0112, r24
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	e5 51       	subi	r30, 0x15	; 21
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	ac e0       	ldi	r26, 0x0C	; 12
    3cae:	b2 e4       	ldi	r27, 0x42	; 66
    3cb0:	80 83       	st	Z, r24
    3cb2:	91 83       	std	Z+1, r25	; 0x01
    3cb4:	a2 83       	std	Z+2, r26	; 0x02
    3cb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb8:	8e 01       	movw	r16, r28
    3cba:	09 51       	subi	r16, 0x19	; 25
    3cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	e5 51       	subi	r30, 0x15	; 21
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	60 81       	ld	r22, Z
    3cc6:	71 81       	ldd	r23, Z+1	; 0x01
    3cc8:	82 81       	ldd	r24, Z+2	; 0x02
    3cca:	93 81       	ldd	r25, Z+3	; 0x03
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	4a e7       	ldi	r20, 0x7A	; 122
    3cd2:	55 e4       	ldi	r21, 0x45	; 69
    3cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	f8 01       	movw	r30, r16
    3cde:	80 83       	st	Z, r24
    3ce0:	91 83       	std	Z+1, r25	; 0x01
    3ce2:	a2 83       	std	Z+2, r26	; 0x02
    3ce4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	e9 51       	subi	r30, 0x19	; 25
    3cea:	ff 4f       	sbci	r31, 0xFF	; 255
    3cec:	60 81       	ld	r22, Z
    3cee:	71 81       	ldd	r23, Z+1	; 0x01
    3cf0:	82 81       	ldd	r24, Z+2	; 0x02
    3cf2:	93 81       	ldd	r25, Z+3	; 0x03
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e8       	ldi	r20, 0x80	; 128
    3cfa:	5f e3       	ldi	r21, 0x3F	; 63
    3cfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d00:	88 23       	and	r24, r24
    3d02:	44 f4       	brge	.+16     	; 0x3d14 <EXTI_System+0x298>
		__ticks = 1;
    3d04:	fe 01       	movw	r30, r28
    3d06:	eb 51       	subi	r30, 0x1B	; 27
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	80 83       	st	Z, r24
    3d12:	64 c0       	rjmp	.+200    	; 0x3ddc <EXTI_System+0x360>
	else if (__tmp > 65535)
    3d14:	fe 01       	movw	r30, r28
    3d16:	e9 51       	subi	r30, 0x19	; 25
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	60 81       	ld	r22, Z
    3d1c:	71 81       	ldd	r23, Z+1	; 0x01
    3d1e:	82 81       	ldd	r24, Z+2	; 0x02
    3d20:	93 81       	ldd	r25, Z+3	; 0x03
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	3f ef       	ldi	r19, 0xFF	; 255
    3d26:	4f e7       	ldi	r20, 0x7F	; 127
    3d28:	57 e4       	ldi	r21, 0x47	; 71
    3d2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d2e:	18 16       	cp	r1, r24
    3d30:	0c f0       	brlt	.+2      	; 0x3d34 <EXTI_System+0x2b8>
    3d32:	43 c0       	rjmp	.+134    	; 0x3dba <EXTI_System+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d34:	fe 01       	movw	r30, r28
    3d36:	e5 51       	subi	r30, 0x15	; 21
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	60 81       	ld	r22, Z
    3d3c:	71 81       	ldd	r23, Z+1	; 0x01
    3d3e:	82 81       	ldd	r24, Z+2	; 0x02
    3d40:	93 81       	ldd	r25, Z+3	; 0x03
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e2       	ldi	r20, 0x20	; 32
    3d48:	51 e4       	ldi	r21, 0x41	; 65
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	8e 01       	movw	r16, r28
    3d54:	0b 51       	subi	r16, 0x1B	; 27
    3d56:	1f 4f       	sbci	r17, 0xFF	; 255
    3d58:	bc 01       	movw	r22, r24
    3d5a:	cd 01       	movw	r24, r26
    3d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	f8 01       	movw	r30, r16
    3d66:	91 83       	std	Z+1, r25	; 0x01
    3d68:	80 83       	st	Z, r24
    3d6a:	1f c0       	rjmp	.+62     	; 0x3daa <EXTI_System+0x32e>
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	ed 51       	subi	r30, 0x1D	; 29
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	80 e9       	ldi	r24, 0x90	; 144
    3d74:	91 e0       	ldi	r25, 0x01	; 1
    3d76:	91 83       	std	Z+1, r25	; 0x01
    3d78:	80 83       	st	Z, r24
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	ed 51       	subi	r30, 0x1D	; 29
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	80 81       	ld	r24, Z
    3d82:	91 81       	ldd	r25, Z+1	; 0x01
    3d84:	01 97       	sbiw	r24, 0x01	; 1
    3d86:	f1 f7       	brne	.-4      	; 0x3d84 <EXTI_System+0x308>
    3d88:	fe 01       	movw	r30, r28
    3d8a:	ed 51       	subi	r30, 0x1D	; 29
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d92:	de 01       	movw	r26, r28
    3d94:	ab 51       	subi	r26, 0x1B	; 27
    3d96:	bf 4f       	sbci	r27, 0xFF	; 255
    3d98:	fe 01       	movw	r30, r28
    3d9a:	eb 51       	subi	r30, 0x1B	; 27
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	01 97       	sbiw	r24, 0x01	; 1
    3da4:	11 96       	adiw	r26, 0x01	; 1
    3da6:	9c 93       	st	X, r25
    3da8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3daa:	fe 01       	movw	r30, r28
    3dac:	eb 51       	subi	r30, 0x1B	; 27
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	80 81       	ld	r24, Z
    3db2:	91 81       	ldd	r25, Z+1	; 0x01
    3db4:	00 97       	sbiw	r24, 0x00	; 0
    3db6:	d1 f6       	brne	.-76     	; 0x3d6c <EXTI_System+0x2f0>
    3db8:	28 c0       	rjmp	.+80     	; 0x3e0a <EXTI_System+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dba:	8e 01       	movw	r16, r28
    3dbc:	0b 51       	subi	r16, 0x1B	; 27
    3dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	e9 51       	subi	r30, 0x19	; 25
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	60 81       	ld	r22, Z
    3dc8:	71 81       	ldd	r23, Z+1	; 0x01
    3dca:	82 81       	ldd	r24, Z+2	; 0x02
    3dcc:	93 81       	ldd	r25, Z+3	; 0x03
    3dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	f8 01       	movw	r30, r16
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	80 83       	st	Z, r24
    3ddc:	de 01       	movw	r26, r28
    3dde:	af 51       	subi	r26, 0x1F	; 31
    3de0:	bf 4f       	sbci	r27, 0xFF	; 255
    3de2:	fe 01       	movw	r30, r28
    3de4:	eb 51       	subi	r30, 0x1B	; 27
    3de6:	ff 4f       	sbci	r31, 0xFF	; 255
    3de8:	80 81       	ld	r24, Z
    3dea:	91 81       	ldd	r25, Z+1	; 0x01
    3dec:	11 96       	adiw	r26, 0x01	; 1
    3dee:	9c 93       	st	X, r25
    3df0:	8e 93       	st	-X, r24
    3df2:	fe 01       	movw	r30, r28
    3df4:	ef 51       	subi	r30, 0x1F	; 31
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <EXTI_System+0x380>
    3e00:	fe 01       	movw	r30, r28
    3e02:	ef 51       	subi	r30, 0x1F	; 31
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 3){
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	ea 5f       	subi	r30, 0xFA	; 250
    3e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e10:	80 81       	ld	r24, Z
    3e12:	83 30       	cpi	r24, 0x03	; 3
    3e14:	09 f0       	breq	.+2      	; 0x3e18 <EXTI_System+0x39c>
    3e16:	c5 c0       	rjmp	.+394    	; 0x3fa2 <EXTI_System+0x526>
				LCD_displayCharacter('*');
    3e18:	8a e2       	ldi	r24, 0x2A	; 42
    3e1a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '3';
    3e1e:	80 91 12 01 	lds	r24, 0x0112
    3e22:	88 2f       	mov	r24, r24
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	fc 01       	movw	r30, r24
    3e28:	eb 5e       	subi	r30, 0xEB	; 235
    3e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e2c:	83 e3       	ldi	r24, 0x33	; 51
    3e2e:	80 83       	st	Z, r24
				c++;
    3e30:	80 91 12 01 	lds	r24, 0x0112
    3e34:	8f 5f       	subi	r24, 0xFF	; 255
    3e36:	80 93 12 01 	sts	0x0112, r24
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e3 52       	subi	r30, 0x23	; 35
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	ac e0       	ldi	r26, 0x0C	; 12
    3e46:	b2 e4       	ldi	r27, 0x42	; 66
    3e48:	80 83       	st	Z, r24
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	a2 83       	std	Z+2, r26	; 0x02
    3e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e50:	8e 01       	movw	r16, r28
    3e52:	07 52       	subi	r16, 0x27	; 39
    3e54:	1f 4f       	sbci	r17, 0xFF	; 255
    3e56:	fe 01       	movw	r30, r28
    3e58:	e3 52       	subi	r30, 0x23	; 35
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	82 81       	ldd	r24, Z+2	; 0x02
    3e62:	93 81       	ldd	r25, Z+3	; 0x03
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	4a e7       	ldi	r20, 0x7A	; 122
    3e6a:	55 e4       	ldi	r21, 0x45	; 69
    3e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	f8 01       	movw	r30, r16
    3e76:	80 83       	st	Z, r24
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	a2 83       	std	Z+2, r26	; 0x02
    3e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e7 52       	subi	r30, 0x27	; 39
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	60 81       	ld	r22, Z
    3e86:	71 81       	ldd	r23, Z+1	; 0x01
    3e88:	82 81       	ldd	r24, Z+2	; 0x02
    3e8a:	93 81       	ldd	r25, Z+3	; 0x03
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e8       	ldi	r20, 0x80	; 128
    3e92:	5f e3       	ldi	r21, 0x3F	; 63
    3e94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e98:	88 23       	and	r24, r24
    3e9a:	44 f4       	brge	.+16     	; 0x3eac <EXTI_System+0x430>
		__ticks = 1;
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e9 52       	subi	r30, 0x29	; 41
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	91 83       	std	Z+1, r25	; 0x01
    3ea8:	80 83       	st	Z, r24
    3eaa:	64 c0       	rjmp	.+200    	; 0x3f74 <EXTI_System+0x4f8>
	else if (__tmp > 65535)
    3eac:	fe 01       	movw	r30, r28
    3eae:	e7 52       	subi	r30, 0x27	; 39
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	60 81       	ld	r22, Z
    3eb4:	71 81       	ldd	r23, Z+1	; 0x01
    3eb6:	82 81       	ldd	r24, Z+2	; 0x02
    3eb8:	93 81       	ldd	r25, Z+3	; 0x03
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	3f ef       	ldi	r19, 0xFF	; 255
    3ebe:	4f e7       	ldi	r20, 0x7F	; 127
    3ec0:	57 e4       	ldi	r21, 0x47	; 71
    3ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ec6:	18 16       	cp	r1, r24
    3ec8:	0c f0       	brlt	.+2      	; 0x3ecc <EXTI_System+0x450>
    3eca:	43 c0       	rjmp	.+134    	; 0x3f52 <EXTI_System+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e3 52       	subi	r30, 0x23	; 35
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	60 81       	ld	r22, Z
    3ed4:	71 81       	ldd	r23, Z+1	; 0x01
    3ed6:	82 81       	ldd	r24, Z+2	; 0x02
    3ed8:	93 81       	ldd	r25, Z+3	; 0x03
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	40 e2       	ldi	r20, 0x20	; 32
    3ee0:	51 e4       	ldi	r21, 0x41	; 65
    3ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	8e 01       	movw	r16, r28
    3eec:	09 52       	subi	r16, 0x29	; 41
    3eee:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef0:	bc 01       	movw	r22, r24
    3ef2:	cd 01       	movw	r24, r26
    3ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	f8 01       	movw	r30, r16
    3efe:	91 83       	std	Z+1, r25	; 0x01
    3f00:	80 83       	st	Z, r24
    3f02:	1f c0       	rjmp	.+62     	; 0x3f42 <EXTI_System+0x4c6>
    3f04:	fe 01       	movw	r30, r28
    3f06:	eb 52       	subi	r30, 0x2B	; 43
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	80 e9       	ldi	r24, 0x90	; 144
    3f0c:	91 e0       	ldi	r25, 0x01	; 1
    3f0e:	91 83       	std	Z+1, r25	; 0x01
    3f10:	80 83       	st	Z, r24
    3f12:	fe 01       	movw	r30, r28
    3f14:	eb 52       	subi	r30, 0x2B	; 43
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	01 97       	sbiw	r24, 0x01	; 1
    3f1e:	f1 f7       	brne	.-4      	; 0x3f1c <EXTI_System+0x4a0>
    3f20:	fe 01       	movw	r30, r28
    3f22:	eb 52       	subi	r30, 0x2B	; 43
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f2a:	de 01       	movw	r26, r28
    3f2c:	a9 52       	subi	r26, 0x29	; 41
    3f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f30:	fe 01       	movw	r30, r28
    3f32:	e9 52       	subi	r30, 0x29	; 41
    3f34:	ff 4f       	sbci	r31, 0xFF	; 255
    3f36:	80 81       	ld	r24, Z
    3f38:	91 81       	ldd	r25, Z+1	; 0x01
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	11 96       	adiw	r26, 0x01	; 1
    3f3e:	9c 93       	st	X, r25
    3f40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f42:	fe 01       	movw	r30, r28
    3f44:	e9 52       	subi	r30, 0x29	; 41
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	80 81       	ld	r24, Z
    3f4a:	91 81       	ldd	r25, Z+1	; 0x01
    3f4c:	00 97       	sbiw	r24, 0x00	; 0
    3f4e:	d1 f6       	brne	.-76     	; 0x3f04 <EXTI_System+0x488>
    3f50:	28 c0       	rjmp	.+80     	; 0x3fa2 <EXTI_System+0x526>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f52:	8e 01       	movw	r16, r28
    3f54:	09 52       	subi	r16, 0x29	; 41
    3f56:	1f 4f       	sbci	r17, 0xFF	; 255
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e7 52       	subi	r30, 0x27	; 39
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	f8 01       	movw	r30, r16
    3f70:	91 83       	std	Z+1, r25	; 0x01
    3f72:	80 83       	st	Z, r24
    3f74:	de 01       	movw	r26, r28
    3f76:	ad 52       	subi	r26, 0x2D	; 45
    3f78:	bf 4f       	sbci	r27, 0xFF	; 255
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e9 52       	subi	r30, 0x29	; 41
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	80 81       	ld	r24, Z
    3f82:	91 81       	ldd	r25, Z+1	; 0x01
    3f84:	11 96       	adiw	r26, 0x01	; 1
    3f86:	9c 93       	st	X, r25
    3f88:	8e 93       	st	-X, r24
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	ed 52       	subi	r30, 0x2D	; 45
    3f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f90:	80 81       	ld	r24, Z
    3f92:	91 81       	ldd	r25, Z+1	; 0x01
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	f1 f7       	brne	.-4      	; 0x3f94 <EXTI_System+0x518>
    3f98:	fe 01       	movw	r30, r28
    3f9a:	ed 52       	subi	r30, 0x2D	; 45
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	91 83       	std	Z+1, r25	; 0x01
    3fa0:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 4){
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	ea 5f       	subi	r30, 0xFA	; 250
    3fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa8:	80 81       	ld	r24, Z
    3faa:	84 30       	cpi	r24, 0x04	; 4
    3fac:	09 f0       	breq	.+2      	; 0x3fb0 <EXTI_System+0x534>
    3fae:	c5 c0       	rjmp	.+394    	; 0x413a <EXTI_System+0x6be>
				LCD_displayCharacter('*');
    3fb0:	8a e2       	ldi	r24, 0x2A	; 42
    3fb2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '4';
    3fb6:	80 91 12 01 	lds	r24, 0x0112
    3fba:	88 2f       	mov	r24, r24
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	eb 5e       	subi	r30, 0xEB	; 235
    3fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc4:	84 e3       	ldi	r24, 0x34	; 52
    3fc6:	80 83       	st	Z, r24
				c++;
    3fc8:	80 91 12 01 	lds	r24, 0x0112
    3fcc:	8f 5f       	subi	r24, 0xFF	; 255
    3fce:	80 93 12 01 	sts	0x0112, r24
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	e1 53       	subi	r30, 0x31	; 49
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	ac e0       	ldi	r26, 0x0C	; 12
    3fde:	b2 e4       	ldi	r27, 0x42	; 66
    3fe0:	80 83       	st	Z, r24
    3fe2:	91 83       	std	Z+1, r25	; 0x01
    3fe4:	a2 83       	std	Z+2, r26	; 0x02
    3fe6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe8:	8e 01       	movw	r16, r28
    3fea:	05 53       	subi	r16, 0x35	; 53
    3fec:	1f 4f       	sbci	r17, 0xFF	; 255
    3fee:	fe 01       	movw	r30, r28
    3ff0:	e1 53       	subi	r30, 0x31	; 49
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	60 81       	ld	r22, Z
    3ff6:	71 81       	ldd	r23, Z+1	; 0x01
    3ff8:	82 81       	ldd	r24, Z+2	; 0x02
    3ffa:	93 81       	ldd	r25, Z+3	; 0x03
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	4a e7       	ldi	r20, 0x7A	; 122
    4002:	55 e4       	ldi	r21, 0x45	; 69
    4004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	f8 01       	movw	r30, r16
    400e:	80 83       	st	Z, r24
    4010:	91 83       	std	Z+1, r25	; 0x01
    4012:	a2 83       	std	Z+2, r26	; 0x02
    4014:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4016:	fe 01       	movw	r30, r28
    4018:	e5 53       	subi	r30, 0x35	; 53
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	60 81       	ld	r22, Z
    401e:	71 81       	ldd	r23, Z+1	; 0x01
    4020:	82 81       	ldd	r24, Z+2	; 0x02
    4022:	93 81       	ldd	r25, Z+3	; 0x03
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4030:	88 23       	and	r24, r24
    4032:	44 f4       	brge	.+16     	; 0x4044 <EXTI_System+0x5c8>
		__ticks = 1;
    4034:	fe 01       	movw	r30, r28
    4036:	e7 53       	subi	r30, 0x37	; 55
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	91 83       	std	Z+1, r25	; 0x01
    4040:	80 83       	st	Z, r24
    4042:	64 c0       	rjmp	.+200    	; 0x410c <EXTI_System+0x690>
	else if (__tmp > 65535)
    4044:	fe 01       	movw	r30, r28
    4046:	e5 53       	subi	r30, 0x35	; 53
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	3f ef       	ldi	r19, 0xFF	; 255
    4056:	4f e7       	ldi	r20, 0x7F	; 127
    4058:	57 e4       	ldi	r21, 0x47	; 71
    405a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    405e:	18 16       	cp	r1, r24
    4060:	0c f0       	brlt	.+2      	; 0x4064 <EXTI_System+0x5e8>
    4062:	43 c0       	rjmp	.+134    	; 0x40ea <EXTI_System+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4064:	fe 01       	movw	r30, r28
    4066:	e1 53       	subi	r30, 0x31	; 49
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	60 81       	ld	r22, Z
    406c:	71 81       	ldd	r23, Z+1	; 0x01
    406e:	82 81       	ldd	r24, Z+2	; 0x02
    4070:	93 81       	ldd	r25, Z+3	; 0x03
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	40 e2       	ldi	r20, 0x20	; 32
    4078:	51 e4       	ldi	r21, 0x41	; 65
    407a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	8e 01       	movw	r16, r28
    4084:	07 53       	subi	r16, 0x37	; 55
    4086:	1f 4f       	sbci	r17, 0xFF	; 255
    4088:	bc 01       	movw	r22, r24
    408a:	cd 01       	movw	r24, r26
    408c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	f8 01       	movw	r30, r16
    4096:	91 83       	std	Z+1, r25	; 0x01
    4098:	80 83       	st	Z, r24
    409a:	1f c0       	rjmp	.+62     	; 0x40da <EXTI_System+0x65e>
    409c:	fe 01       	movw	r30, r28
    409e:	e9 53       	subi	r30, 0x39	; 57
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	80 e9       	ldi	r24, 0x90	; 144
    40a4:	91 e0       	ldi	r25, 0x01	; 1
    40a6:	91 83       	std	Z+1, r25	; 0x01
    40a8:	80 83       	st	Z, r24
    40aa:	fe 01       	movw	r30, r28
    40ac:	e9 53       	subi	r30, 0x39	; 57
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	80 81       	ld	r24, Z
    40b2:	91 81       	ldd	r25, Z+1	; 0x01
    40b4:	01 97       	sbiw	r24, 0x01	; 1
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <EXTI_System+0x638>
    40b8:	fe 01       	movw	r30, r28
    40ba:	e9 53       	subi	r30, 0x39	; 57
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	91 83       	std	Z+1, r25	; 0x01
    40c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c2:	de 01       	movw	r26, r28
    40c4:	a7 53       	subi	r26, 0x37	; 55
    40c6:	bf 4f       	sbci	r27, 0xFF	; 255
    40c8:	fe 01       	movw	r30, r28
    40ca:	e7 53       	subi	r30, 0x37	; 55
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	80 81       	ld	r24, Z
    40d0:	91 81       	ldd	r25, Z+1	; 0x01
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	11 96       	adiw	r26, 0x01	; 1
    40d6:	9c 93       	st	X, r25
    40d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40da:	fe 01       	movw	r30, r28
    40dc:	e7 53       	subi	r30, 0x37	; 55
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	80 81       	ld	r24, Z
    40e2:	91 81       	ldd	r25, Z+1	; 0x01
    40e4:	00 97       	sbiw	r24, 0x00	; 0
    40e6:	d1 f6       	brne	.-76     	; 0x409c <EXTI_System+0x620>
    40e8:	28 c0       	rjmp	.+80     	; 0x413a <EXTI_System+0x6be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ea:	8e 01       	movw	r16, r28
    40ec:	07 53       	subi	r16, 0x37	; 55
    40ee:	1f 4f       	sbci	r17, 0xFF	; 255
    40f0:	fe 01       	movw	r30, r28
    40f2:	e5 53       	subi	r30, 0x35	; 53
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	60 81       	ld	r22, Z
    40f8:	71 81       	ldd	r23, Z+1	; 0x01
    40fa:	82 81       	ldd	r24, Z+2	; 0x02
    40fc:	93 81       	ldd	r25, Z+3	; 0x03
    40fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	f8 01       	movw	r30, r16
    4108:	91 83       	std	Z+1, r25	; 0x01
    410a:	80 83       	st	Z, r24
    410c:	de 01       	movw	r26, r28
    410e:	ab 53       	subi	r26, 0x3B	; 59
    4110:	bf 4f       	sbci	r27, 0xFF	; 255
    4112:	fe 01       	movw	r30, r28
    4114:	e7 53       	subi	r30, 0x37	; 55
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	80 81       	ld	r24, Z
    411a:	91 81       	ldd	r25, Z+1	; 0x01
    411c:	11 96       	adiw	r26, 0x01	; 1
    411e:	9c 93       	st	X, r25
    4120:	8e 93       	st	-X, r24
    4122:	fe 01       	movw	r30, r28
    4124:	eb 53       	subi	r30, 0x3B	; 59
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	f1 f7       	brne	.-4      	; 0x412c <EXTI_System+0x6b0>
    4130:	fe 01       	movw	r30, r28
    4132:	eb 53       	subi	r30, 0x3B	; 59
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	91 83       	std	Z+1, r25	; 0x01
    4138:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 5){
    413a:	fe 01       	movw	r30, r28
    413c:	ea 5f       	subi	r30, 0xFA	; 250
    413e:	fe 4f       	sbci	r31, 0xFE	; 254
    4140:	80 81       	ld	r24, Z
    4142:	85 30       	cpi	r24, 0x05	; 5
    4144:	09 f0       	breq	.+2      	; 0x4148 <EXTI_System+0x6cc>
    4146:	c5 c0       	rjmp	.+394    	; 0x42d2 <EXTI_System+0x856>
				LCD_displayCharacter('*');
    4148:	8a e2       	ldi	r24, 0x2A	; 42
    414a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '5';
    414e:	80 91 12 01 	lds	r24, 0x0112
    4152:	88 2f       	mov	r24, r24
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	fc 01       	movw	r30, r24
    4158:	eb 5e       	subi	r30, 0xEB	; 235
    415a:	fe 4f       	sbci	r31, 0xFE	; 254
    415c:	85 e3       	ldi	r24, 0x35	; 53
    415e:	80 83       	st	Z, r24
				c++;
    4160:	80 91 12 01 	lds	r24, 0x0112
    4164:	8f 5f       	subi	r24, 0xFF	; 255
    4166:	80 93 12 01 	sts	0x0112, r24
    416a:	fe 01       	movw	r30, r28
    416c:	ef 53       	subi	r30, 0x3F	; 63
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	ac e0       	ldi	r26, 0x0C	; 12
    4176:	b2 e4       	ldi	r27, 0x42	; 66
    4178:	80 83       	st	Z, r24
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	a2 83       	std	Z+2, r26	; 0x02
    417e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4180:	8e 01       	movw	r16, r28
    4182:	03 54       	subi	r16, 0x43	; 67
    4184:	1f 4f       	sbci	r17, 0xFF	; 255
    4186:	fe 01       	movw	r30, r28
    4188:	ef 53       	subi	r30, 0x3F	; 63
    418a:	ff 4f       	sbci	r31, 0xFF	; 255
    418c:	60 81       	ld	r22, Z
    418e:	71 81       	ldd	r23, Z+1	; 0x01
    4190:	82 81       	ldd	r24, Z+2	; 0x02
    4192:	93 81       	ldd	r25, Z+3	; 0x03
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	4a e7       	ldi	r20, 0x7A	; 122
    419a:	55 e4       	ldi	r21, 0x45	; 69
    419c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a0:	dc 01       	movw	r26, r24
    41a2:	cb 01       	movw	r24, r22
    41a4:	f8 01       	movw	r30, r16
    41a6:	80 83       	st	Z, r24
    41a8:	91 83       	std	Z+1, r25	; 0x01
    41aa:	a2 83       	std	Z+2, r26	; 0x02
    41ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41ae:	fe 01       	movw	r30, r28
    41b0:	e3 54       	subi	r30, 0x43	; 67
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	60 81       	ld	r22, Z
    41b6:	71 81       	ldd	r23, Z+1	; 0x01
    41b8:	82 81       	ldd	r24, Z+2	; 0x02
    41ba:	93 81       	ldd	r25, Z+3	; 0x03
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	40 e8       	ldi	r20, 0x80	; 128
    41c2:	5f e3       	ldi	r21, 0x3F	; 63
    41c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41c8:	88 23       	and	r24, r24
    41ca:	44 f4       	brge	.+16     	; 0x41dc <EXTI_System+0x760>
		__ticks = 1;
    41cc:	fe 01       	movw	r30, r28
    41ce:	e5 54       	subi	r30, 0x45	; 69
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	91 83       	std	Z+1, r25	; 0x01
    41d8:	80 83       	st	Z, r24
    41da:	64 c0       	rjmp	.+200    	; 0x42a4 <EXTI_System+0x828>
	else if (__tmp > 65535)
    41dc:	fe 01       	movw	r30, r28
    41de:	e3 54       	subi	r30, 0x43	; 67
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	60 81       	ld	r22, Z
    41e4:	71 81       	ldd	r23, Z+1	; 0x01
    41e6:	82 81       	ldd	r24, Z+2	; 0x02
    41e8:	93 81       	ldd	r25, Z+3	; 0x03
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	3f ef       	ldi	r19, 0xFF	; 255
    41ee:	4f e7       	ldi	r20, 0x7F	; 127
    41f0:	57 e4       	ldi	r21, 0x47	; 71
    41f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41f6:	18 16       	cp	r1, r24
    41f8:	0c f0       	brlt	.+2      	; 0x41fc <EXTI_System+0x780>
    41fa:	43 c0       	rjmp	.+134    	; 0x4282 <EXTI_System+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fc:	fe 01       	movw	r30, r28
    41fe:	ef 53       	subi	r30, 0x3F	; 63
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	60 81       	ld	r22, Z
    4204:	71 81       	ldd	r23, Z+1	; 0x01
    4206:	82 81       	ldd	r24, Z+2	; 0x02
    4208:	93 81       	ldd	r25, Z+3	; 0x03
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	40 e2       	ldi	r20, 0x20	; 32
    4210:	51 e4       	ldi	r21, 0x41	; 65
    4212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	8e 01       	movw	r16, r28
    421c:	05 54       	subi	r16, 0x45	; 69
    421e:	1f 4f       	sbci	r17, 0xFF	; 255
    4220:	bc 01       	movw	r22, r24
    4222:	cd 01       	movw	r24, r26
    4224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	f8 01       	movw	r30, r16
    422e:	91 83       	std	Z+1, r25	; 0x01
    4230:	80 83       	st	Z, r24
    4232:	1f c0       	rjmp	.+62     	; 0x4272 <EXTI_System+0x7f6>
    4234:	fe 01       	movw	r30, r28
    4236:	e7 54       	subi	r30, 0x47	; 71
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 e9       	ldi	r24, 0x90	; 144
    423c:	91 e0       	ldi	r25, 0x01	; 1
    423e:	91 83       	std	Z+1, r25	; 0x01
    4240:	80 83       	st	Z, r24
    4242:	fe 01       	movw	r30, r28
    4244:	e7 54       	subi	r30, 0x47	; 71
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	80 81       	ld	r24, Z
    424a:	91 81       	ldd	r25, Z+1	; 0x01
    424c:	01 97       	sbiw	r24, 0x01	; 1
    424e:	f1 f7       	brne	.-4      	; 0x424c <EXTI_System+0x7d0>
    4250:	fe 01       	movw	r30, r28
    4252:	e7 54       	subi	r30, 0x47	; 71
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	91 83       	std	Z+1, r25	; 0x01
    4258:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    425a:	de 01       	movw	r26, r28
    425c:	a5 54       	subi	r26, 0x45	; 69
    425e:	bf 4f       	sbci	r27, 0xFF	; 255
    4260:	fe 01       	movw	r30, r28
    4262:	e5 54       	subi	r30, 0x45	; 69
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	80 81       	ld	r24, Z
    4268:	91 81       	ldd	r25, Z+1	; 0x01
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	11 96       	adiw	r26, 0x01	; 1
    426e:	9c 93       	st	X, r25
    4270:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4272:	fe 01       	movw	r30, r28
    4274:	e5 54       	subi	r30, 0x45	; 69
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	80 81       	ld	r24, Z
    427a:	91 81       	ldd	r25, Z+1	; 0x01
    427c:	00 97       	sbiw	r24, 0x00	; 0
    427e:	d1 f6       	brne	.-76     	; 0x4234 <EXTI_System+0x7b8>
    4280:	28 c0       	rjmp	.+80     	; 0x42d2 <EXTI_System+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4282:	8e 01       	movw	r16, r28
    4284:	05 54       	subi	r16, 0x45	; 69
    4286:	1f 4f       	sbci	r17, 0xFF	; 255
    4288:	fe 01       	movw	r30, r28
    428a:	e3 54       	subi	r30, 0x43	; 67
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	60 81       	ld	r22, Z
    4290:	71 81       	ldd	r23, Z+1	; 0x01
    4292:	82 81       	ldd	r24, Z+2	; 0x02
    4294:	93 81       	ldd	r25, Z+3	; 0x03
    4296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429a:	dc 01       	movw	r26, r24
    429c:	cb 01       	movw	r24, r22
    429e:	f8 01       	movw	r30, r16
    42a0:	91 83       	std	Z+1, r25	; 0x01
    42a2:	80 83       	st	Z, r24
    42a4:	de 01       	movw	r26, r28
    42a6:	a9 54       	subi	r26, 0x49	; 73
    42a8:	bf 4f       	sbci	r27, 0xFF	; 255
    42aa:	fe 01       	movw	r30, r28
    42ac:	e5 54       	subi	r30, 0x45	; 69
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	11 96       	adiw	r26, 0x01	; 1
    42b6:	9c 93       	st	X, r25
    42b8:	8e 93       	st	-X, r24
    42ba:	fe 01       	movw	r30, r28
    42bc:	e9 54       	subi	r30, 0x49	; 73
    42be:	ff 4f       	sbci	r31, 0xFF	; 255
    42c0:	80 81       	ld	r24, Z
    42c2:	91 81       	ldd	r25, Z+1	; 0x01
    42c4:	01 97       	sbiw	r24, 0x01	; 1
    42c6:	f1 f7       	brne	.-4      	; 0x42c4 <EXTI_System+0x848>
    42c8:	fe 01       	movw	r30, r28
    42ca:	e9 54       	subi	r30, 0x49	; 73
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	91 83       	std	Z+1, r25	; 0x01
    42d0:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 6){
    42d2:	fe 01       	movw	r30, r28
    42d4:	ea 5f       	subi	r30, 0xFA	; 250
    42d6:	fe 4f       	sbci	r31, 0xFE	; 254
    42d8:	80 81       	ld	r24, Z
    42da:	86 30       	cpi	r24, 0x06	; 6
    42dc:	09 f0       	breq	.+2      	; 0x42e0 <EXTI_System+0x864>
    42de:	c5 c0       	rjmp	.+394    	; 0x446a <EXTI_System+0x9ee>
				LCD_displayCharacter('*');
    42e0:	8a e2       	ldi	r24, 0x2A	; 42
    42e2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '6';
    42e6:	80 91 12 01 	lds	r24, 0x0112
    42ea:	88 2f       	mov	r24, r24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	fc 01       	movw	r30, r24
    42f0:	eb 5e       	subi	r30, 0xEB	; 235
    42f2:	fe 4f       	sbci	r31, 0xFE	; 254
    42f4:	86 e3       	ldi	r24, 0x36	; 54
    42f6:	80 83       	st	Z, r24
				c++;
    42f8:	80 91 12 01 	lds	r24, 0x0112
    42fc:	8f 5f       	subi	r24, 0xFF	; 255
    42fe:	80 93 12 01 	sts	0x0112, r24
    4302:	fe 01       	movw	r30, r28
    4304:	ed 54       	subi	r30, 0x4D	; 77
    4306:	ff 4f       	sbci	r31, 0xFF	; 255
    4308:	80 e0       	ldi	r24, 0x00	; 0
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	ac e0       	ldi	r26, 0x0C	; 12
    430e:	b2 e4       	ldi	r27, 0x42	; 66
    4310:	80 83       	st	Z, r24
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	a2 83       	std	Z+2, r26	; 0x02
    4316:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4318:	8e 01       	movw	r16, r28
    431a:	01 55       	subi	r16, 0x51	; 81
    431c:	1f 4f       	sbci	r17, 0xFF	; 255
    431e:	fe 01       	movw	r30, r28
    4320:	ed 54       	subi	r30, 0x4D	; 77
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	60 81       	ld	r22, Z
    4326:	71 81       	ldd	r23, Z+1	; 0x01
    4328:	82 81       	ldd	r24, Z+2	; 0x02
    432a:	93 81       	ldd	r25, Z+3	; 0x03
    432c:	20 e0       	ldi	r18, 0x00	; 0
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	4a e7       	ldi	r20, 0x7A	; 122
    4332:	55 e4       	ldi	r21, 0x45	; 69
    4334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4338:	dc 01       	movw	r26, r24
    433a:	cb 01       	movw	r24, r22
    433c:	f8 01       	movw	r30, r16
    433e:	80 83       	st	Z, r24
    4340:	91 83       	std	Z+1, r25	; 0x01
    4342:	a2 83       	std	Z+2, r26	; 0x02
    4344:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4346:	fe 01       	movw	r30, r28
    4348:	e1 55       	subi	r30, 0x51	; 81
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	60 81       	ld	r22, Z
    434e:	71 81       	ldd	r23, Z+1	; 0x01
    4350:	82 81       	ldd	r24, Z+2	; 0x02
    4352:	93 81       	ldd	r25, Z+3	; 0x03
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e8       	ldi	r20, 0x80	; 128
    435a:	5f e3       	ldi	r21, 0x3F	; 63
    435c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4360:	88 23       	and	r24, r24
    4362:	44 f4       	brge	.+16     	; 0x4374 <EXTI_System+0x8f8>
		__ticks = 1;
    4364:	fe 01       	movw	r30, r28
    4366:	e3 55       	subi	r30, 0x53	; 83
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	91 83       	std	Z+1, r25	; 0x01
    4370:	80 83       	st	Z, r24
    4372:	64 c0       	rjmp	.+200    	; 0x443c <EXTI_System+0x9c0>
	else if (__tmp > 65535)
    4374:	fe 01       	movw	r30, r28
    4376:	e1 55       	subi	r30, 0x51	; 81
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	60 81       	ld	r22, Z
    437c:	71 81       	ldd	r23, Z+1	; 0x01
    437e:	82 81       	ldd	r24, Z+2	; 0x02
    4380:	93 81       	ldd	r25, Z+3	; 0x03
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	3f ef       	ldi	r19, 0xFF	; 255
    4386:	4f e7       	ldi	r20, 0x7F	; 127
    4388:	57 e4       	ldi	r21, 0x47	; 71
    438a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    438e:	18 16       	cp	r1, r24
    4390:	0c f0       	brlt	.+2      	; 0x4394 <EXTI_System+0x918>
    4392:	43 c0       	rjmp	.+134    	; 0x441a <EXTI_System+0x99e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4394:	fe 01       	movw	r30, r28
    4396:	ed 54       	subi	r30, 0x4D	; 77
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	60 81       	ld	r22, Z
    439c:	71 81       	ldd	r23, Z+1	; 0x01
    439e:	82 81       	ldd	r24, Z+2	; 0x02
    43a0:	93 81       	ldd	r25, Z+3	; 0x03
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	40 e2       	ldi	r20, 0x20	; 32
    43a8:	51 e4       	ldi	r21, 0x41	; 65
    43aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	8e 01       	movw	r16, r28
    43b4:	03 55       	subi	r16, 0x53	; 83
    43b6:	1f 4f       	sbci	r17, 0xFF	; 255
    43b8:	bc 01       	movw	r22, r24
    43ba:	cd 01       	movw	r24, r26
    43bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c0:	dc 01       	movw	r26, r24
    43c2:	cb 01       	movw	r24, r22
    43c4:	f8 01       	movw	r30, r16
    43c6:	91 83       	std	Z+1, r25	; 0x01
    43c8:	80 83       	st	Z, r24
    43ca:	1f c0       	rjmp	.+62     	; 0x440a <EXTI_System+0x98e>
    43cc:	fe 01       	movw	r30, r28
    43ce:	e5 55       	subi	r30, 0x55	; 85
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	80 e9       	ldi	r24, 0x90	; 144
    43d4:	91 e0       	ldi	r25, 0x01	; 1
    43d6:	91 83       	std	Z+1, r25	; 0x01
    43d8:	80 83       	st	Z, r24
    43da:	fe 01       	movw	r30, r28
    43dc:	e5 55       	subi	r30, 0x55	; 85
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	80 81       	ld	r24, Z
    43e2:	91 81       	ldd	r25, Z+1	; 0x01
    43e4:	01 97       	sbiw	r24, 0x01	; 1
    43e6:	f1 f7       	brne	.-4      	; 0x43e4 <EXTI_System+0x968>
    43e8:	fe 01       	movw	r30, r28
    43ea:	e5 55       	subi	r30, 0x55	; 85
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	91 83       	std	Z+1, r25	; 0x01
    43f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f2:	de 01       	movw	r26, r28
    43f4:	a3 55       	subi	r26, 0x53	; 83
    43f6:	bf 4f       	sbci	r27, 0xFF	; 255
    43f8:	fe 01       	movw	r30, r28
    43fa:	e3 55       	subi	r30, 0x53	; 83
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	80 81       	ld	r24, Z
    4400:	91 81       	ldd	r25, Z+1	; 0x01
    4402:	01 97       	sbiw	r24, 0x01	; 1
    4404:	11 96       	adiw	r26, 0x01	; 1
    4406:	9c 93       	st	X, r25
    4408:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    440a:	fe 01       	movw	r30, r28
    440c:	e3 55       	subi	r30, 0x53	; 83
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	80 81       	ld	r24, Z
    4412:	91 81       	ldd	r25, Z+1	; 0x01
    4414:	00 97       	sbiw	r24, 0x00	; 0
    4416:	d1 f6       	brne	.-76     	; 0x43cc <EXTI_System+0x950>
    4418:	28 c0       	rjmp	.+80     	; 0x446a <EXTI_System+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441a:	8e 01       	movw	r16, r28
    441c:	03 55       	subi	r16, 0x53	; 83
    441e:	1f 4f       	sbci	r17, 0xFF	; 255
    4420:	fe 01       	movw	r30, r28
    4422:	e1 55       	subi	r30, 0x51	; 81
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	60 81       	ld	r22, Z
    4428:	71 81       	ldd	r23, Z+1	; 0x01
    442a:	82 81       	ldd	r24, Z+2	; 0x02
    442c:	93 81       	ldd	r25, Z+3	; 0x03
    442e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	f8 01       	movw	r30, r16
    4438:	91 83       	std	Z+1, r25	; 0x01
    443a:	80 83       	st	Z, r24
    443c:	de 01       	movw	r26, r28
    443e:	a7 55       	subi	r26, 0x57	; 87
    4440:	bf 4f       	sbci	r27, 0xFF	; 255
    4442:	fe 01       	movw	r30, r28
    4444:	e3 55       	subi	r30, 0x53	; 83
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	80 81       	ld	r24, Z
    444a:	91 81       	ldd	r25, Z+1	; 0x01
    444c:	11 96       	adiw	r26, 0x01	; 1
    444e:	9c 93       	st	X, r25
    4450:	8e 93       	st	-X, r24
    4452:	fe 01       	movw	r30, r28
    4454:	e7 55       	subi	r30, 0x57	; 87
    4456:	ff 4f       	sbci	r31, 0xFF	; 255
    4458:	80 81       	ld	r24, Z
    445a:	91 81       	ldd	r25, Z+1	; 0x01
    445c:	01 97       	sbiw	r24, 0x01	; 1
    445e:	f1 f7       	brne	.-4      	; 0x445c <EXTI_System+0x9e0>
    4460:	fe 01       	movw	r30, r28
    4462:	e7 55       	subi	r30, 0x57	; 87
    4464:	ff 4f       	sbci	r31, 0xFF	; 255
    4466:	91 83       	std	Z+1, r25	; 0x01
    4468:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 7){
    446a:	fe 01       	movw	r30, r28
    446c:	ea 5f       	subi	r30, 0xFA	; 250
    446e:	fe 4f       	sbci	r31, 0xFE	; 254
    4470:	80 81       	ld	r24, Z
    4472:	87 30       	cpi	r24, 0x07	; 7
    4474:	09 f0       	breq	.+2      	; 0x4478 <EXTI_System+0x9fc>
    4476:	c5 c0       	rjmp	.+394    	; 0x4602 <EXTI_System+0xb86>
				LCD_displayCharacter('*');
    4478:	8a e2       	ldi	r24, 0x2A	; 42
    447a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '7';
    447e:	80 91 12 01 	lds	r24, 0x0112
    4482:	88 2f       	mov	r24, r24
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	fc 01       	movw	r30, r24
    4488:	eb 5e       	subi	r30, 0xEB	; 235
    448a:	fe 4f       	sbci	r31, 0xFE	; 254
    448c:	87 e3       	ldi	r24, 0x37	; 55
    448e:	80 83       	st	Z, r24
				c++;
    4490:	80 91 12 01 	lds	r24, 0x0112
    4494:	8f 5f       	subi	r24, 0xFF	; 255
    4496:	80 93 12 01 	sts	0x0112, r24
    449a:	fe 01       	movw	r30, r28
    449c:	eb 55       	subi	r30, 0x5B	; 91
    449e:	ff 4f       	sbci	r31, 0xFF	; 255
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	ac e0       	ldi	r26, 0x0C	; 12
    44a6:	b2 e4       	ldi	r27, 0x42	; 66
    44a8:	80 83       	st	Z, r24
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	a2 83       	std	Z+2, r26	; 0x02
    44ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44b0:	8e 01       	movw	r16, r28
    44b2:	0f 55       	subi	r16, 0x5F	; 95
    44b4:	1f 4f       	sbci	r17, 0xFF	; 255
    44b6:	fe 01       	movw	r30, r28
    44b8:	eb 55       	subi	r30, 0x5B	; 91
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	60 81       	ld	r22, Z
    44be:	71 81       	ldd	r23, Z+1	; 0x01
    44c0:	82 81       	ldd	r24, Z+2	; 0x02
    44c2:	93 81       	ldd	r25, Z+3	; 0x03
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	4a e7       	ldi	r20, 0x7A	; 122
    44ca:	55 e4       	ldi	r21, 0x45	; 69
    44cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	f8 01       	movw	r30, r16
    44d6:	80 83       	st	Z, r24
    44d8:	91 83       	std	Z+1, r25	; 0x01
    44da:	a2 83       	std	Z+2, r26	; 0x02
    44dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44de:	fe 01       	movw	r30, r28
    44e0:	ef 55       	subi	r30, 0x5F	; 95
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	40 e8       	ldi	r20, 0x80	; 128
    44f2:	5f e3       	ldi	r21, 0x3F	; 63
    44f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44f8:	88 23       	and	r24, r24
    44fa:	44 f4       	brge	.+16     	; 0x450c <EXTI_System+0xa90>
		__ticks = 1;
    44fc:	fe 01       	movw	r30, r28
    44fe:	e1 56       	subi	r30, 0x61	; 97
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	91 83       	std	Z+1, r25	; 0x01
    4508:	80 83       	st	Z, r24
    450a:	64 c0       	rjmp	.+200    	; 0x45d4 <EXTI_System+0xb58>
	else if (__tmp > 65535)
    450c:	fe 01       	movw	r30, r28
    450e:	ef 55       	subi	r30, 0x5F	; 95
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	60 81       	ld	r22, Z
    4514:	71 81       	ldd	r23, Z+1	; 0x01
    4516:	82 81       	ldd	r24, Z+2	; 0x02
    4518:	93 81       	ldd	r25, Z+3	; 0x03
    451a:	20 e0       	ldi	r18, 0x00	; 0
    451c:	3f ef       	ldi	r19, 0xFF	; 255
    451e:	4f e7       	ldi	r20, 0x7F	; 127
    4520:	57 e4       	ldi	r21, 0x47	; 71
    4522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4526:	18 16       	cp	r1, r24
    4528:	0c f0       	brlt	.+2      	; 0x452c <EXTI_System+0xab0>
    452a:	43 c0       	rjmp	.+134    	; 0x45b2 <EXTI_System+0xb36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    452c:	fe 01       	movw	r30, r28
    452e:	eb 55       	subi	r30, 0x5B	; 91
    4530:	ff 4f       	sbci	r31, 0xFF	; 255
    4532:	60 81       	ld	r22, Z
    4534:	71 81       	ldd	r23, Z+1	; 0x01
    4536:	82 81       	ldd	r24, Z+2	; 0x02
    4538:	93 81       	ldd	r25, Z+3	; 0x03
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	40 e2       	ldi	r20, 0x20	; 32
    4540:	51 e4       	ldi	r21, 0x41	; 65
    4542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	8e 01       	movw	r16, r28
    454c:	01 56       	subi	r16, 0x61	; 97
    454e:	1f 4f       	sbci	r17, 0xFF	; 255
    4550:	bc 01       	movw	r22, r24
    4552:	cd 01       	movw	r24, r26
    4554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4558:	dc 01       	movw	r26, r24
    455a:	cb 01       	movw	r24, r22
    455c:	f8 01       	movw	r30, r16
    455e:	91 83       	std	Z+1, r25	; 0x01
    4560:	80 83       	st	Z, r24
    4562:	1f c0       	rjmp	.+62     	; 0x45a2 <EXTI_System+0xb26>
    4564:	fe 01       	movw	r30, r28
    4566:	e3 56       	subi	r30, 0x63	; 99
    4568:	ff 4f       	sbci	r31, 0xFF	; 255
    456a:	80 e9       	ldi	r24, 0x90	; 144
    456c:	91 e0       	ldi	r25, 0x01	; 1
    456e:	91 83       	std	Z+1, r25	; 0x01
    4570:	80 83       	st	Z, r24
    4572:	fe 01       	movw	r30, r28
    4574:	e3 56       	subi	r30, 0x63	; 99
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	80 81       	ld	r24, Z
    457a:	91 81       	ldd	r25, Z+1	; 0x01
    457c:	01 97       	sbiw	r24, 0x01	; 1
    457e:	f1 f7       	brne	.-4      	; 0x457c <EXTI_System+0xb00>
    4580:	fe 01       	movw	r30, r28
    4582:	e3 56       	subi	r30, 0x63	; 99
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	91 83       	std	Z+1, r25	; 0x01
    4588:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458a:	de 01       	movw	r26, r28
    458c:	a1 56       	subi	r26, 0x61	; 97
    458e:	bf 4f       	sbci	r27, 0xFF	; 255
    4590:	fe 01       	movw	r30, r28
    4592:	e1 56       	subi	r30, 0x61	; 97
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	01 97       	sbiw	r24, 0x01	; 1
    459c:	11 96       	adiw	r26, 0x01	; 1
    459e:	9c 93       	st	X, r25
    45a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45a2:	fe 01       	movw	r30, r28
    45a4:	e1 56       	subi	r30, 0x61	; 97
    45a6:	ff 4f       	sbci	r31, 0xFF	; 255
    45a8:	80 81       	ld	r24, Z
    45aa:	91 81       	ldd	r25, Z+1	; 0x01
    45ac:	00 97       	sbiw	r24, 0x00	; 0
    45ae:	d1 f6       	brne	.-76     	; 0x4564 <EXTI_System+0xae8>
    45b0:	28 c0       	rjmp	.+80     	; 0x4602 <EXTI_System+0xb86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b2:	8e 01       	movw	r16, r28
    45b4:	01 56       	subi	r16, 0x61	; 97
    45b6:	1f 4f       	sbci	r17, 0xFF	; 255
    45b8:	fe 01       	movw	r30, r28
    45ba:	ef 55       	subi	r30, 0x5F	; 95
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	60 81       	ld	r22, Z
    45c0:	71 81       	ldd	r23, Z+1	; 0x01
    45c2:	82 81       	ldd	r24, Z+2	; 0x02
    45c4:	93 81       	ldd	r25, Z+3	; 0x03
    45c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	f8 01       	movw	r30, r16
    45d0:	91 83       	std	Z+1, r25	; 0x01
    45d2:	80 83       	st	Z, r24
    45d4:	de 01       	movw	r26, r28
    45d6:	a5 56       	subi	r26, 0x65	; 101
    45d8:	bf 4f       	sbci	r27, 0xFF	; 255
    45da:	fe 01       	movw	r30, r28
    45dc:	e1 56       	subi	r30, 0x61	; 97
    45de:	ff 4f       	sbci	r31, 0xFF	; 255
    45e0:	80 81       	ld	r24, Z
    45e2:	91 81       	ldd	r25, Z+1	; 0x01
    45e4:	11 96       	adiw	r26, 0x01	; 1
    45e6:	9c 93       	st	X, r25
    45e8:	8e 93       	st	-X, r24
    45ea:	fe 01       	movw	r30, r28
    45ec:	e5 56       	subi	r30, 0x65	; 101
    45ee:	ff 4f       	sbci	r31, 0xFF	; 255
    45f0:	80 81       	ld	r24, Z
    45f2:	91 81       	ldd	r25, Z+1	; 0x01
    45f4:	01 97       	sbiw	r24, 0x01	; 1
    45f6:	f1 f7       	brne	.-4      	; 0x45f4 <EXTI_System+0xb78>
    45f8:	fe 01       	movw	r30, r28
    45fa:	e5 56       	subi	r30, 0x65	; 101
    45fc:	ff 4f       	sbci	r31, 0xFF	; 255
    45fe:	91 83       	std	Z+1, r25	; 0x01
    4600:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 8){
    4602:	fe 01       	movw	r30, r28
    4604:	ea 5f       	subi	r30, 0xFA	; 250
    4606:	fe 4f       	sbci	r31, 0xFE	; 254
    4608:	80 81       	ld	r24, Z
    460a:	88 30       	cpi	r24, 0x08	; 8
    460c:	09 f0       	breq	.+2      	; 0x4610 <EXTI_System+0xb94>
    460e:	c5 c0       	rjmp	.+394    	; 0x479a <EXTI_System+0xd1e>
				LCD_displayCharacter('*');
    4610:	8a e2       	ldi	r24, 0x2A	; 42
    4612:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '8';
    4616:	80 91 12 01 	lds	r24, 0x0112
    461a:	88 2f       	mov	r24, r24
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	fc 01       	movw	r30, r24
    4620:	eb 5e       	subi	r30, 0xEB	; 235
    4622:	fe 4f       	sbci	r31, 0xFE	; 254
    4624:	88 e3       	ldi	r24, 0x38	; 56
    4626:	80 83       	st	Z, r24
				c++;
    4628:	80 91 12 01 	lds	r24, 0x0112
    462c:	8f 5f       	subi	r24, 0xFF	; 255
    462e:	80 93 12 01 	sts	0x0112, r24
    4632:	fe 01       	movw	r30, r28
    4634:	e9 56       	subi	r30, 0x69	; 105
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	ac e0       	ldi	r26, 0x0C	; 12
    463e:	b2 e4       	ldi	r27, 0x42	; 66
    4640:	80 83       	st	Z, r24
    4642:	91 83       	std	Z+1, r25	; 0x01
    4644:	a2 83       	std	Z+2, r26	; 0x02
    4646:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4648:	8e 01       	movw	r16, r28
    464a:	0d 56       	subi	r16, 0x6D	; 109
    464c:	1f 4f       	sbci	r17, 0xFF	; 255
    464e:	fe 01       	movw	r30, r28
    4650:	e9 56       	subi	r30, 0x69	; 105
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	60 81       	ld	r22, Z
    4656:	71 81       	ldd	r23, Z+1	; 0x01
    4658:	82 81       	ldd	r24, Z+2	; 0x02
    465a:	93 81       	ldd	r25, Z+3	; 0x03
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	4a e7       	ldi	r20, 0x7A	; 122
    4662:	55 e4       	ldi	r21, 0x45	; 69
    4664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	f8 01       	movw	r30, r16
    466e:	80 83       	st	Z, r24
    4670:	91 83       	std	Z+1, r25	; 0x01
    4672:	a2 83       	std	Z+2, r26	; 0x02
    4674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4676:	fe 01       	movw	r30, r28
    4678:	ed 56       	subi	r30, 0x6D	; 109
    467a:	ff 4f       	sbci	r31, 0xFF	; 255
    467c:	60 81       	ld	r22, Z
    467e:	71 81       	ldd	r23, Z+1	; 0x01
    4680:	82 81       	ldd	r24, Z+2	; 0x02
    4682:	93 81       	ldd	r25, Z+3	; 0x03
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	40 e8       	ldi	r20, 0x80	; 128
    468a:	5f e3       	ldi	r21, 0x3F	; 63
    468c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4690:	88 23       	and	r24, r24
    4692:	44 f4       	brge	.+16     	; 0x46a4 <EXTI_System+0xc28>
		__ticks = 1;
    4694:	fe 01       	movw	r30, r28
    4696:	ef 56       	subi	r30, 0x6F	; 111
    4698:	ff 4f       	sbci	r31, 0xFF	; 255
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	80 83       	st	Z, r24
    46a2:	64 c0       	rjmp	.+200    	; 0x476c <EXTI_System+0xcf0>
	else if (__tmp > 65535)
    46a4:	fe 01       	movw	r30, r28
    46a6:	ed 56       	subi	r30, 0x6D	; 109
    46a8:	ff 4f       	sbci	r31, 0xFF	; 255
    46aa:	60 81       	ld	r22, Z
    46ac:	71 81       	ldd	r23, Z+1	; 0x01
    46ae:	82 81       	ldd	r24, Z+2	; 0x02
    46b0:	93 81       	ldd	r25, Z+3	; 0x03
    46b2:	20 e0       	ldi	r18, 0x00	; 0
    46b4:	3f ef       	ldi	r19, 0xFF	; 255
    46b6:	4f e7       	ldi	r20, 0x7F	; 127
    46b8:	57 e4       	ldi	r21, 0x47	; 71
    46ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46be:	18 16       	cp	r1, r24
    46c0:	0c f0       	brlt	.+2      	; 0x46c4 <EXTI_System+0xc48>
    46c2:	43 c0       	rjmp	.+134    	; 0x474a <EXTI_System+0xcce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c4:	fe 01       	movw	r30, r28
    46c6:	e9 56       	subi	r30, 0x69	; 105
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	60 81       	ld	r22, Z
    46cc:	71 81       	ldd	r23, Z+1	; 0x01
    46ce:	82 81       	ldd	r24, Z+2	; 0x02
    46d0:	93 81       	ldd	r25, Z+3	; 0x03
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	40 e2       	ldi	r20, 0x20	; 32
    46d8:	51 e4       	ldi	r21, 0x41	; 65
    46da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	8e 01       	movw	r16, r28
    46e4:	0f 56       	subi	r16, 0x6F	; 111
    46e6:	1f 4f       	sbci	r17, 0xFF	; 255
    46e8:	bc 01       	movw	r22, r24
    46ea:	cd 01       	movw	r24, r26
    46ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	f8 01       	movw	r30, r16
    46f6:	91 83       	std	Z+1, r25	; 0x01
    46f8:	80 83       	st	Z, r24
    46fa:	1f c0       	rjmp	.+62     	; 0x473a <EXTI_System+0xcbe>
    46fc:	fe 01       	movw	r30, r28
    46fe:	e1 57       	subi	r30, 0x71	; 113
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	80 e9       	ldi	r24, 0x90	; 144
    4704:	91 e0       	ldi	r25, 0x01	; 1
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	80 83       	st	Z, r24
    470a:	fe 01       	movw	r30, r28
    470c:	e1 57       	subi	r30, 0x71	; 113
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	80 81       	ld	r24, Z
    4712:	91 81       	ldd	r25, Z+1	; 0x01
    4714:	01 97       	sbiw	r24, 0x01	; 1
    4716:	f1 f7       	brne	.-4      	; 0x4714 <EXTI_System+0xc98>
    4718:	fe 01       	movw	r30, r28
    471a:	e1 57       	subi	r30, 0x71	; 113
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	91 83       	std	Z+1, r25	; 0x01
    4720:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4722:	de 01       	movw	r26, r28
    4724:	af 56       	subi	r26, 0x6F	; 111
    4726:	bf 4f       	sbci	r27, 0xFF	; 255
    4728:	fe 01       	movw	r30, r28
    472a:	ef 56       	subi	r30, 0x6F	; 111
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	80 81       	ld	r24, Z
    4730:	91 81       	ldd	r25, Z+1	; 0x01
    4732:	01 97       	sbiw	r24, 0x01	; 1
    4734:	11 96       	adiw	r26, 0x01	; 1
    4736:	9c 93       	st	X, r25
    4738:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    473a:	fe 01       	movw	r30, r28
    473c:	ef 56       	subi	r30, 0x6F	; 111
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	00 97       	sbiw	r24, 0x00	; 0
    4746:	d1 f6       	brne	.-76     	; 0x46fc <EXTI_System+0xc80>
    4748:	28 c0       	rjmp	.+80     	; 0x479a <EXTI_System+0xd1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    474a:	8e 01       	movw	r16, r28
    474c:	0f 56       	subi	r16, 0x6F	; 111
    474e:	1f 4f       	sbci	r17, 0xFF	; 255
    4750:	fe 01       	movw	r30, r28
    4752:	ed 56       	subi	r30, 0x6D	; 109
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	60 81       	ld	r22, Z
    4758:	71 81       	ldd	r23, Z+1	; 0x01
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	f8 01       	movw	r30, r16
    4768:	91 83       	std	Z+1, r25	; 0x01
    476a:	80 83       	st	Z, r24
    476c:	de 01       	movw	r26, r28
    476e:	a3 57       	subi	r26, 0x73	; 115
    4770:	bf 4f       	sbci	r27, 0xFF	; 255
    4772:	fe 01       	movw	r30, r28
    4774:	ef 56       	subi	r30, 0x6F	; 111
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	80 81       	ld	r24, Z
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	11 96       	adiw	r26, 0x01	; 1
    477e:	9c 93       	st	X, r25
    4780:	8e 93       	st	-X, r24
    4782:	fe 01       	movw	r30, r28
    4784:	e3 57       	subi	r30, 0x73	; 115
    4786:	ff 4f       	sbci	r31, 0xFF	; 255
    4788:	80 81       	ld	r24, Z
    478a:	91 81       	ldd	r25, Z+1	; 0x01
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <EXTI_System+0xd10>
    4790:	fe 01       	movw	r30, r28
    4792:	e3 57       	subi	r30, 0x73	; 115
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	91 83       	std	Z+1, r25	; 0x01
    4798:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 9){
    479a:	fe 01       	movw	r30, r28
    479c:	ea 5f       	subi	r30, 0xFA	; 250
    479e:	fe 4f       	sbci	r31, 0xFE	; 254
    47a0:	80 81       	ld	r24, Z
    47a2:	89 30       	cpi	r24, 0x09	; 9
    47a4:	09 f0       	breq	.+2      	; 0x47a8 <EXTI_System+0xd2c>
    47a6:	c5 c0       	rjmp	.+394    	; 0x4932 <EXTI_System+0xeb6>
				LCD_displayCharacter('*');
    47a8:	8a e2       	ldi	r24, 0x2A	; 42
    47aa:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '9';
    47ae:	80 91 12 01 	lds	r24, 0x0112
    47b2:	88 2f       	mov	r24, r24
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	fc 01       	movw	r30, r24
    47b8:	eb 5e       	subi	r30, 0xEB	; 235
    47ba:	fe 4f       	sbci	r31, 0xFE	; 254
    47bc:	89 e3       	ldi	r24, 0x39	; 57
    47be:	80 83       	st	Z, r24
				c++;
    47c0:	80 91 12 01 	lds	r24, 0x0112
    47c4:	8f 5f       	subi	r24, 0xFF	; 255
    47c6:	80 93 12 01 	sts	0x0112, r24
    47ca:	fe 01       	movw	r30, r28
    47cc:	e7 57       	subi	r30, 0x77	; 119
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	ac e0       	ldi	r26, 0x0C	; 12
    47d6:	b2 e4       	ldi	r27, 0x42	; 66
    47d8:	80 83       	st	Z, r24
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	a2 83       	std	Z+2, r26	; 0x02
    47de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e0:	8e 01       	movw	r16, r28
    47e2:	0b 57       	subi	r16, 0x7B	; 123
    47e4:	1f 4f       	sbci	r17, 0xFF	; 255
    47e6:	fe 01       	movw	r30, r28
    47e8:	e7 57       	subi	r30, 0x77	; 119
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	60 81       	ld	r22, Z
    47ee:	71 81       	ldd	r23, Z+1	; 0x01
    47f0:	82 81       	ldd	r24, Z+2	; 0x02
    47f2:	93 81       	ldd	r25, Z+3	; 0x03
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	4a e7       	ldi	r20, 0x7A	; 122
    47fa:	55 e4       	ldi	r21, 0x45	; 69
    47fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	f8 01       	movw	r30, r16
    4806:	80 83       	st	Z, r24
    4808:	91 83       	std	Z+1, r25	; 0x01
    480a:	a2 83       	std	Z+2, r26	; 0x02
    480c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    480e:	fe 01       	movw	r30, r28
    4810:	eb 57       	subi	r30, 0x7B	; 123
    4812:	ff 4f       	sbci	r31, 0xFF	; 255
    4814:	60 81       	ld	r22, Z
    4816:	71 81       	ldd	r23, Z+1	; 0x01
    4818:	82 81       	ldd	r24, Z+2	; 0x02
    481a:	93 81       	ldd	r25, Z+3	; 0x03
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	40 e8       	ldi	r20, 0x80	; 128
    4822:	5f e3       	ldi	r21, 0x3F	; 63
    4824:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4828:	88 23       	and	r24, r24
    482a:	44 f4       	brge	.+16     	; 0x483c <EXTI_System+0xdc0>
		__ticks = 1;
    482c:	fe 01       	movw	r30, r28
    482e:	ed 57       	subi	r30, 0x7D	; 125
    4830:	ff 4f       	sbci	r31, 0xFF	; 255
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	91 83       	std	Z+1, r25	; 0x01
    4838:	80 83       	st	Z, r24
    483a:	64 c0       	rjmp	.+200    	; 0x4904 <EXTI_System+0xe88>
	else if (__tmp > 65535)
    483c:	fe 01       	movw	r30, r28
    483e:	eb 57       	subi	r30, 0x7B	; 123
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	60 81       	ld	r22, Z
    4844:	71 81       	ldd	r23, Z+1	; 0x01
    4846:	82 81       	ldd	r24, Z+2	; 0x02
    4848:	93 81       	ldd	r25, Z+3	; 0x03
    484a:	20 e0       	ldi	r18, 0x00	; 0
    484c:	3f ef       	ldi	r19, 0xFF	; 255
    484e:	4f e7       	ldi	r20, 0x7F	; 127
    4850:	57 e4       	ldi	r21, 0x47	; 71
    4852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4856:	18 16       	cp	r1, r24
    4858:	0c f0       	brlt	.+2      	; 0x485c <EXTI_System+0xde0>
    485a:	43 c0       	rjmp	.+134    	; 0x48e2 <EXTI_System+0xe66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    485c:	fe 01       	movw	r30, r28
    485e:	e7 57       	subi	r30, 0x77	; 119
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	60 81       	ld	r22, Z
    4864:	71 81       	ldd	r23, Z+1	; 0x01
    4866:	82 81       	ldd	r24, Z+2	; 0x02
    4868:	93 81       	ldd	r25, Z+3	; 0x03
    486a:	20 e0       	ldi	r18, 0x00	; 0
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	40 e2       	ldi	r20, 0x20	; 32
    4870:	51 e4       	ldi	r21, 0x41	; 65
    4872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4876:	dc 01       	movw	r26, r24
    4878:	cb 01       	movw	r24, r22
    487a:	8e 01       	movw	r16, r28
    487c:	0d 57       	subi	r16, 0x7D	; 125
    487e:	1f 4f       	sbci	r17, 0xFF	; 255
    4880:	bc 01       	movw	r22, r24
    4882:	cd 01       	movw	r24, r26
    4884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4888:	dc 01       	movw	r26, r24
    488a:	cb 01       	movw	r24, r22
    488c:	f8 01       	movw	r30, r16
    488e:	91 83       	std	Z+1, r25	; 0x01
    4890:	80 83       	st	Z, r24
    4892:	1f c0       	rjmp	.+62     	; 0x48d2 <EXTI_System+0xe56>
    4894:	fe 01       	movw	r30, r28
    4896:	ef 57       	subi	r30, 0x7F	; 127
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	80 e9       	ldi	r24, 0x90	; 144
    489c:	91 e0       	ldi	r25, 0x01	; 1
    489e:	91 83       	std	Z+1, r25	; 0x01
    48a0:	80 83       	st	Z, r24
    48a2:	fe 01       	movw	r30, r28
    48a4:	ef 57       	subi	r30, 0x7F	; 127
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	80 81       	ld	r24, Z
    48aa:	91 81       	ldd	r25, Z+1	; 0x01
    48ac:	01 97       	sbiw	r24, 0x01	; 1
    48ae:	f1 f7       	brne	.-4      	; 0x48ac <EXTI_System+0xe30>
    48b0:	fe 01       	movw	r30, r28
    48b2:	ef 57       	subi	r30, 0x7F	; 127
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	91 83       	std	Z+1, r25	; 0x01
    48b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ba:	de 01       	movw	r26, r28
    48bc:	ad 57       	subi	r26, 0x7D	; 125
    48be:	bf 4f       	sbci	r27, 0xFF	; 255
    48c0:	fe 01       	movw	r30, r28
    48c2:	ed 57       	subi	r30, 0x7D	; 125
    48c4:	ff 4f       	sbci	r31, 0xFF	; 255
    48c6:	80 81       	ld	r24, Z
    48c8:	91 81       	ldd	r25, Z+1	; 0x01
    48ca:	01 97       	sbiw	r24, 0x01	; 1
    48cc:	11 96       	adiw	r26, 0x01	; 1
    48ce:	9c 93       	st	X, r25
    48d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48d2:	fe 01       	movw	r30, r28
    48d4:	ed 57       	subi	r30, 0x7D	; 125
    48d6:	ff 4f       	sbci	r31, 0xFF	; 255
    48d8:	80 81       	ld	r24, Z
    48da:	91 81       	ldd	r25, Z+1	; 0x01
    48dc:	00 97       	sbiw	r24, 0x00	; 0
    48de:	d1 f6       	brne	.-76     	; 0x4894 <EXTI_System+0xe18>
    48e0:	28 c0       	rjmp	.+80     	; 0x4932 <EXTI_System+0xeb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48e2:	8e 01       	movw	r16, r28
    48e4:	0d 57       	subi	r16, 0x7D	; 125
    48e6:	1f 4f       	sbci	r17, 0xFF	; 255
    48e8:	fe 01       	movw	r30, r28
    48ea:	eb 57       	subi	r30, 0x7B	; 123
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	60 81       	ld	r22, Z
    48f0:	71 81       	ldd	r23, Z+1	; 0x01
    48f2:	82 81       	ldd	r24, Z+2	; 0x02
    48f4:	93 81       	ldd	r25, Z+3	; 0x03
    48f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48fa:	dc 01       	movw	r26, r24
    48fc:	cb 01       	movw	r24, r22
    48fe:	f8 01       	movw	r30, r16
    4900:	91 83       	std	Z+1, r25	; 0x01
    4902:	80 83       	st	Z, r24
    4904:	de 01       	movw	r26, r28
    4906:	a1 58       	subi	r26, 0x81	; 129
    4908:	bf 4f       	sbci	r27, 0xFF	; 255
    490a:	fe 01       	movw	r30, r28
    490c:	ed 57       	subi	r30, 0x7D	; 125
    490e:	ff 4f       	sbci	r31, 0xFF	; 255
    4910:	80 81       	ld	r24, Z
    4912:	91 81       	ldd	r25, Z+1	; 0x01
    4914:	11 96       	adiw	r26, 0x01	; 1
    4916:	9c 93       	st	X, r25
    4918:	8e 93       	st	-X, r24
    491a:	fe 01       	movw	r30, r28
    491c:	e1 58       	subi	r30, 0x81	; 129
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	80 81       	ld	r24, Z
    4922:	91 81       	ldd	r25, Z+1	; 0x01
    4924:	01 97       	sbiw	r24, 0x01	; 1
    4926:	f1 f7       	brne	.-4      	; 0x4924 <EXTI_System+0xea8>
    4928:	fe 01       	movw	r30, r28
    492a:	e1 58       	subi	r30, 0x81	; 129
    492c:	ff 4f       	sbci	r31, 0xFF	; 255
    492e:	91 83       	std	Z+1, r25	; 0x01
    4930:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == '*'){
    4932:	fe 01       	movw	r30, r28
    4934:	ea 5f       	subi	r30, 0xFA	; 250
    4936:	fe 4f       	sbci	r31, 0xFE	; 254
    4938:	80 81       	ld	r24, Z
    493a:	8a 32       	cpi	r24, 0x2A	; 42
    493c:	09 f0       	breq	.+2      	; 0x4940 <EXTI_System+0xec4>
    493e:	c5 c0       	rjmp	.+394    	; 0x4aca <EXTI_System+0x104e>
				LCD_displayCharacter('*');
    4940:	8a e2       	ldi	r24, 0x2A	; 42
    4942:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '*';
    4946:	80 91 12 01 	lds	r24, 0x0112
    494a:	88 2f       	mov	r24, r24
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	fc 01       	movw	r30, r24
    4950:	eb 5e       	subi	r30, 0xEB	; 235
    4952:	fe 4f       	sbci	r31, 0xFE	; 254
    4954:	8a e2       	ldi	r24, 0x2A	; 42
    4956:	80 83       	st	Z, r24
				c++;
    4958:	80 91 12 01 	lds	r24, 0x0112
    495c:	8f 5f       	subi	r24, 0xFF	; 255
    495e:	80 93 12 01 	sts	0x0112, r24
    4962:	fe 01       	movw	r30, r28
    4964:	e5 58       	subi	r30, 0x85	; 133
    4966:	ff 4f       	sbci	r31, 0xFF	; 255
    4968:	80 e0       	ldi	r24, 0x00	; 0
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	ac e0       	ldi	r26, 0x0C	; 12
    496e:	b2 e4       	ldi	r27, 0x42	; 66
    4970:	80 83       	st	Z, r24
    4972:	91 83       	std	Z+1, r25	; 0x01
    4974:	a2 83       	std	Z+2, r26	; 0x02
    4976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4978:	8e 01       	movw	r16, r28
    497a:	09 58       	subi	r16, 0x89	; 137
    497c:	1f 4f       	sbci	r17, 0xFF	; 255
    497e:	fe 01       	movw	r30, r28
    4980:	e5 58       	subi	r30, 0x85	; 133
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	60 81       	ld	r22, Z
    4986:	71 81       	ldd	r23, Z+1	; 0x01
    4988:	82 81       	ldd	r24, Z+2	; 0x02
    498a:	93 81       	ldd	r25, Z+3	; 0x03
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	4a e7       	ldi	r20, 0x7A	; 122
    4992:	55 e4       	ldi	r21, 0x45	; 69
    4994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	f8 01       	movw	r30, r16
    499e:	80 83       	st	Z, r24
    49a0:	91 83       	std	Z+1, r25	; 0x01
    49a2:	a2 83       	std	Z+2, r26	; 0x02
    49a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49a6:	fe 01       	movw	r30, r28
    49a8:	e9 58       	subi	r30, 0x89	; 137
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	60 81       	ld	r22, Z
    49ae:	71 81       	ldd	r23, Z+1	; 0x01
    49b0:	82 81       	ldd	r24, Z+2	; 0x02
    49b2:	93 81       	ldd	r25, Z+3	; 0x03
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	40 e8       	ldi	r20, 0x80	; 128
    49ba:	5f e3       	ldi	r21, 0x3F	; 63
    49bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49c0:	88 23       	and	r24, r24
    49c2:	44 f4       	brge	.+16     	; 0x49d4 <EXTI_System+0xf58>
		__ticks = 1;
    49c4:	fe 01       	movw	r30, r28
    49c6:	eb 58       	subi	r30, 0x8B	; 139
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	91 83       	std	Z+1, r25	; 0x01
    49d0:	80 83       	st	Z, r24
    49d2:	64 c0       	rjmp	.+200    	; 0x4a9c <EXTI_System+0x1020>
	else if (__tmp > 65535)
    49d4:	fe 01       	movw	r30, r28
    49d6:	e9 58       	subi	r30, 0x89	; 137
    49d8:	ff 4f       	sbci	r31, 0xFF	; 255
    49da:	60 81       	ld	r22, Z
    49dc:	71 81       	ldd	r23, Z+1	; 0x01
    49de:	82 81       	ldd	r24, Z+2	; 0x02
    49e0:	93 81       	ldd	r25, Z+3	; 0x03
    49e2:	20 e0       	ldi	r18, 0x00	; 0
    49e4:	3f ef       	ldi	r19, 0xFF	; 255
    49e6:	4f e7       	ldi	r20, 0x7F	; 127
    49e8:	57 e4       	ldi	r21, 0x47	; 71
    49ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49ee:	18 16       	cp	r1, r24
    49f0:	0c f0       	brlt	.+2      	; 0x49f4 <EXTI_System+0xf78>
    49f2:	43 c0       	rjmp	.+134    	; 0x4a7a <EXTI_System+0xffe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49f4:	fe 01       	movw	r30, r28
    49f6:	e5 58       	subi	r30, 0x85	; 133
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	60 81       	ld	r22, Z
    49fc:	71 81       	ldd	r23, Z+1	; 0x01
    49fe:	82 81       	ldd	r24, Z+2	; 0x02
    4a00:	93 81       	ldd	r25, Z+3	; 0x03
    4a02:	20 e0       	ldi	r18, 0x00	; 0
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	40 e2       	ldi	r20, 0x20	; 32
    4a08:	51 e4       	ldi	r21, 0x41	; 65
    4a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a0e:	dc 01       	movw	r26, r24
    4a10:	cb 01       	movw	r24, r22
    4a12:	8e 01       	movw	r16, r28
    4a14:	0b 58       	subi	r16, 0x8B	; 139
    4a16:	1f 4f       	sbci	r17, 0xFF	; 255
    4a18:	bc 01       	movw	r22, r24
    4a1a:	cd 01       	movw	r24, r26
    4a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a20:	dc 01       	movw	r26, r24
    4a22:	cb 01       	movw	r24, r22
    4a24:	f8 01       	movw	r30, r16
    4a26:	91 83       	std	Z+1, r25	; 0x01
    4a28:	80 83       	st	Z, r24
    4a2a:	1f c0       	rjmp	.+62     	; 0x4a6a <EXTI_System+0xfee>
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	ed 58       	subi	r30, 0x8D	; 141
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	80 e9       	ldi	r24, 0x90	; 144
    4a34:	91 e0       	ldi	r25, 0x01	; 1
    4a36:	91 83       	std	Z+1, r25	; 0x01
    4a38:	80 83       	st	Z, r24
    4a3a:	fe 01       	movw	r30, r28
    4a3c:	ed 58       	subi	r30, 0x8D	; 141
    4a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a40:	80 81       	ld	r24, Z
    4a42:	91 81       	ldd	r25, Z+1	; 0x01
    4a44:	01 97       	sbiw	r24, 0x01	; 1
    4a46:	f1 f7       	brne	.-4      	; 0x4a44 <EXTI_System+0xfc8>
    4a48:	fe 01       	movw	r30, r28
    4a4a:	ed 58       	subi	r30, 0x8D	; 141
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	91 83       	std	Z+1, r25	; 0x01
    4a50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a52:	de 01       	movw	r26, r28
    4a54:	ab 58       	subi	r26, 0x8B	; 139
    4a56:	bf 4f       	sbci	r27, 0xFF	; 255
    4a58:	fe 01       	movw	r30, r28
    4a5a:	eb 58       	subi	r30, 0x8B	; 139
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	80 81       	ld	r24, Z
    4a60:	91 81       	ldd	r25, Z+1	; 0x01
    4a62:	01 97       	sbiw	r24, 0x01	; 1
    4a64:	11 96       	adiw	r26, 0x01	; 1
    4a66:	9c 93       	st	X, r25
    4a68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	eb 58       	subi	r30, 0x8B	; 139
    4a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a70:	80 81       	ld	r24, Z
    4a72:	91 81       	ldd	r25, Z+1	; 0x01
    4a74:	00 97       	sbiw	r24, 0x00	; 0
    4a76:	d1 f6       	brne	.-76     	; 0x4a2c <EXTI_System+0xfb0>
    4a78:	28 c0       	rjmp	.+80     	; 0x4aca <EXTI_System+0x104e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a7a:	8e 01       	movw	r16, r28
    4a7c:	0b 58       	subi	r16, 0x8B	; 139
    4a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a80:	fe 01       	movw	r30, r28
    4a82:	e9 58       	subi	r30, 0x89	; 137
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	60 81       	ld	r22, Z
    4a88:	71 81       	ldd	r23, Z+1	; 0x01
    4a8a:	82 81       	ldd	r24, Z+2	; 0x02
    4a8c:	93 81       	ldd	r25, Z+3	; 0x03
    4a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	f8 01       	movw	r30, r16
    4a98:	91 83       	std	Z+1, r25	; 0x01
    4a9a:	80 83       	st	Z, r24
    4a9c:	de 01       	movw	r26, r28
    4a9e:	af 58       	subi	r26, 0x8F	; 143
    4aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    4aa2:	fe 01       	movw	r30, r28
    4aa4:	eb 58       	subi	r30, 0x8B	; 139
    4aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa8:	80 81       	ld	r24, Z
    4aaa:	91 81       	ldd	r25, Z+1	; 0x01
    4aac:	11 96       	adiw	r26, 0x01	; 1
    4aae:	9c 93       	st	X, r25
    4ab0:	8e 93       	st	-X, r24
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	ef 58       	subi	r30, 0x8F	; 143
    4ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab8:	80 81       	ld	r24, Z
    4aba:	91 81       	ldd	r25, Z+1	; 0x01
    4abc:	01 97       	sbiw	r24, 0x01	; 1
    4abe:	f1 f7       	brne	.-4      	; 0x4abc <EXTI_System+0x1040>
    4ac0:	fe 01       	movw	r30, r28
    4ac2:	ef 58       	subi	r30, 0x8F	; 143
    4ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac6:	91 83       	std	Z+1, r25	; 0x01
    4ac8:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 0){
    4aca:	fe 01       	movw	r30, r28
    4acc:	ea 5f       	subi	r30, 0xFA	; 250
    4ace:	fe 4f       	sbci	r31, 0xFE	; 254
    4ad0:	80 81       	ld	r24, Z
    4ad2:	88 23       	and	r24, r24
    4ad4:	09 f0       	breq	.+2      	; 0x4ad8 <EXTI_System+0x105c>
    4ad6:	c5 c0       	rjmp	.+394    	; 0x4c62 <EXTI_System+0x11e6>
				LCD_displayCharacter('*');
    4ad8:	8a e2       	ldi	r24, 0x2A	; 42
    4ada:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '0';
    4ade:	80 91 12 01 	lds	r24, 0x0112
    4ae2:	88 2f       	mov	r24, r24
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	eb 5e       	subi	r30, 0xEB	; 235
    4aea:	fe 4f       	sbci	r31, 0xFE	; 254
    4aec:	80 e3       	ldi	r24, 0x30	; 48
    4aee:	80 83       	st	Z, r24
				c++;
    4af0:	80 91 12 01 	lds	r24, 0x0112
    4af4:	8f 5f       	subi	r24, 0xFF	; 255
    4af6:	80 93 12 01 	sts	0x0112, r24
    4afa:	fe 01       	movw	r30, r28
    4afc:	e3 59       	subi	r30, 0x93	; 147
    4afe:	ff 4f       	sbci	r31, 0xFF	; 255
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	90 e0       	ldi	r25, 0x00	; 0
    4b04:	ac e0       	ldi	r26, 0x0C	; 12
    4b06:	b2 e4       	ldi	r27, 0x42	; 66
    4b08:	80 83       	st	Z, r24
    4b0a:	91 83       	std	Z+1, r25	; 0x01
    4b0c:	a2 83       	std	Z+2, r26	; 0x02
    4b0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b10:	8e 01       	movw	r16, r28
    4b12:	07 59       	subi	r16, 0x97	; 151
    4b14:	1f 4f       	sbci	r17, 0xFF	; 255
    4b16:	fe 01       	movw	r30, r28
    4b18:	e3 59       	subi	r30, 0x93	; 147
    4b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1c:	60 81       	ld	r22, Z
    4b1e:	71 81       	ldd	r23, Z+1	; 0x01
    4b20:	82 81       	ldd	r24, Z+2	; 0x02
    4b22:	93 81       	ldd	r25, Z+3	; 0x03
    4b24:	20 e0       	ldi	r18, 0x00	; 0
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	4a e7       	ldi	r20, 0x7A	; 122
    4b2a:	55 e4       	ldi	r21, 0x45	; 69
    4b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b30:	dc 01       	movw	r26, r24
    4b32:	cb 01       	movw	r24, r22
    4b34:	f8 01       	movw	r30, r16
    4b36:	80 83       	st	Z, r24
    4b38:	91 83       	std	Z+1, r25	; 0x01
    4b3a:	a2 83       	std	Z+2, r26	; 0x02
    4b3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b3e:	fe 01       	movw	r30, r28
    4b40:	e7 59       	subi	r30, 0x97	; 151
    4b42:	ff 4f       	sbci	r31, 0xFF	; 255
    4b44:	60 81       	ld	r22, Z
    4b46:	71 81       	ldd	r23, Z+1	; 0x01
    4b48:	82 81       	ldd	r24, Z+2	; 0x02
    4b4a:	93 81       	ldd	r25, Z+3	; 0x03
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	40 e8       	ldi	r20, 0x80	; 128
    4b52:	5f e3       	ldi	r21, 0x3F	; 63
    4b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b58:	88 23       	and	r24, r24
    4b5a:	44 f4       	brge	.+16     	; 0x4b6c <EXTI_System+0x10f0>
		__ticks = 1;
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	e9 59       	subi	r30, 0x99	; 153
    4b60:	ff 4f       	sbci	r31, 0xFF	; 255
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	91 83       	std	Z+1, r25	; 0x01
    4b68:	80 83       	st	Z, r24
    4b6a:	64 c0       	rjmp	.+200    	; 0x4c34 <EXTI_System+0x11b8>
	else if (__tmp > 65535)
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	e7 59       	subi	r30, 0x97	; 151
    4b70:	ff 4f       	sbci	r31, 0xFF	; 255
    4b72:	60 81       	ld	r22, Z
    4b74:	71 81       	ldd	r23, Z+1	; 0x01
    4b76:	82 81       	ldd	r24, Z+2	; 0x02
    4b78:	93 81       	ldd	r25, Z+3	; 0x03
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	3f ef       	ldi	r19, 0xFF	; 255
    4b7e:	4f e7       	ldi	r20, 0x7F	; 127
    4b80:	57 e4       	ldi	r21, 0x47	; 71
    4b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b86:	18 16       	cp	r1, r24
    4b88:	0c f0       	brlt	.+2      	; 0x4b8c <EXTI_System+0x1110>
    4b8a:	43 c0       	rjmp	.+134    	; 0x4c12 <EXTI_System+0x1196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e3 59       	subi	r30, 0x93	; 147
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	60 81       	ld	r22, Z
    4b94:	71 81       	ldd	r23, Z+1	; 0x01
    4b96:	82 81       	ldd	r24, Z+2	; 0x02
    4b98:	93 81       	ldd	r25, Z+3	; 0x03
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	40 e2       	ldi	r20, 0x20	; 32
    4ba0:	51 e4       	ldi	r21, 0x41	; 65
    4ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	8e 01       	movw	r16, r28
    4bac:	09 59       	subi	r16, 0x99	; 153
    4bae:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb0:	bc 01       	movw	r22, r24
    4bb2:	cd 01       	movw	r24, r26
    4bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb8:	dc 01       	movw	r26, r24
    4bba:	cb 01       	movw	r24, r22
    4bbc:	f8 01       	movw	r30, r16
    4bbe:	91 83       	std	Z+1, r25	; 0x01
    4bc0:	80 83       	st	Z, r24
    4bc2:	1f c0       	rjmp	.+62     	; 0x4c02 <EXTI_System+0x1186>
    4bc4:	fe 01       	movw	r30, r28
    4bc6:	eb 59       	subi	r30, 0x9B	; 155
    4bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bca:	80 e9       	ldi	r24, 0x90	; 144
    4bcc:	91 e0       	ldi	r25, 0x01	; 1
    4bce:	91 83       	std	Z+1, r25	; 0x01
    4bd0:	80 83       	st	Z, r24
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	eb 59       	subi	r30, 0x9B	; 155
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	80 81       	ld	r24, Z
    4bda:	91 81       	ldd	r25, Z+1	; 0x01
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	f1 f7       	brne	.-4      	; 0x4bdc <EXTI_System+0x1160>
    4be0:	fe 01       	movw	r30, r28
    4be2:	eb 59       	subi	r30, 0x9B	; 155
    4be4:	ff 4f       	sbci	r31, 0xFF	; 255
    4be6:	91 83       	std	Z+1, r25	; 0x01
    4be8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bea:	de 01       	movw	r26, r28
    4bec:	a9 59       	subi	r26, 0x99	; 153
    4bee:	bf 4f       	sbci	r27, 0xFF	; 255
    4bf0:	fe 01       	movw	r30, r28
    4bf2:	e9 59       	subi	r30, 0x99	; 153
    4bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf6:	80 81       	ld	r24, Z
    4bf8:	91 81       	ldd	r25, Z+1	; 0x01
    4bfa:	01 97       	sbiw	r24, 0x01	; 1
    4bfc:	11 96       	adiw	r26, 0x01	; 1
    4bfe:	9c 93       	st	X, r25
    4c00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c02:	fe 01       	movw	r30, r28
    4c04:	e9 59       	subi	r30, 0x99	; 153
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	80 81       	ld	r24, Z
    4c0a:	91 81       	ldd	r25, Z+1	; 0x01
    4c0c:	00 97       	sbiw	r24, 0x00	; 0
    4c0e:	d1 f6       	brne	.-76     	; 0x4bc4 <EXTI_System+0x1148>
    4c10:	28 c0       	rjmp	.+80     	; 0x4c62 <EXTI_System+0x11e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c12:	8e 01       	movw	r16, r28
    4c14:	09 59       	subi	r16, 0x99	; 153
    4c16:	1f 4f       	sbci	r17, 0xFF	; 255
    4c18:	fe 01       	movw	r30, r28
    4c1a:	e7 59       	subi	r30, 0x97	; 151
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	60 81       	ld	r22, Z
    4c20:	71 81       	ldd	r23, Z+1	; 0x01
    4c22:	82 81       	ldd	r24, Z+2	; 0x02
    4c24:	93 81       	ldd	r25, Z+3	; 0x03
    4c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2a:	dc 01       	movw	r26, r24
    4c2c:	cb 01       	movw	r24, r22
    4c2e:	f8 01       	movw	r30, r16
    4c30:	91 83       	std	Z+1, r25	; 0x01
    4c32:	80 83       	st	Z, r24
    4c34:	de 01       	movw	r26, r28
    4c36:	ad 59       	subi	r26, 0x9D	; 157
    4c38:	bf 4f       	sbci	r27, 0xFF	; 255
    4c3a:	fe 01       	movw	r30, r28
    4c3c:	e9 59       	subi	r30, 0x99	; 153
    4c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c40:	80 81       	ld	r24, Z
    4c42:	91 81       	ldd	r25, Z+1	; 0x01
    4c44:	11 96       	adiw	r26, 0x01	; 1
    4c46:	9c 93       	st	X, r25
    4c48:	8e 93       	st	-X, r24
    4c4a:	fe 01       	movw	r30, r28
    4c4c:	ed 59       	subi	r30, 0x9D	; 157
    4c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c50:	80 81       	ld	r24, Z
    4c52:	91 81       	ldd	r25, Z+1	; 0x01
    4c54:	01 97       	sbiw	r24, 0x01	; 1
    4c56:	f1 f7       	brne	.-4      	; 0x4c54 <EXTI_System+0x11d8>
    4c58:	fe 01       	movw	r30, r28
    4c5a:	ed 59       	subi	r30, 0x9D	; 157
    4c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5e:	91 83       	std	Z+1, r25	; 0x01
    4c60:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == '#'){
    4c62:	fe 01       	movw	r30, r28
    4c64:	ea 5f       	subi	r30, 0xFA	; 250
    4c66:	fe 4f       	sbci	r31, 0xFE	; 254
    4c68:	80 81       	ld	r24, Z
    4c6a:	83 32       	cpi	r24, 0x23	; 35
    4c6c:	09 f0       	breq	.+2      	; 0x4c70 <EXTI_System+0x11f4>
    4c6e:	c5 c0       	rjmp	.+394    	; 0x4dfa <EXTI_System+0x137e>
				LCD_displayCharacter('*');
    4c70:	8a e2       	ldi	r24, 0x2A	; 42
    4c72:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayCharacter>
				pressed_Keys[c] = '#';
    4c76:	80 91 12 01 	lds	r24, 0x0112
    4c7a:	88 2f       	mov	r24, r24
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	fc 01       	movw	r30, r24
    4c80:	eb 5e       	subi	r30, 0xEB	; 235
    4c82:	fe 4f       	sbci	r31, 0xFE	; 254
    4c84:	83 e2       	ldi	r24, 0x23	; 35
    4c86:	80 83       	st	Z, r24
				c++;
    4c88:	80 91 12 01 	lds	r24, 0x0112
    4c8c:	8f 5f       	subi	r24, 0xFF	; 255
    4c8e:	80 93 12 01 	sts	0x0112, r24
    4c92:	fe 01       	movw	r30, r28
    4c94:	e1 5a       	subi	r30, 0xA1	; 161
    4c96:	ff 4f       	sbci	r31, 0xFF	; 255
    4c98:	80 e0       	ldi	r24, 0x00	; 0
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	ac e0       	ldi	r26, 0x0C	; 12
    4c9e:	b2 e4       	ldi	r27, 0x42	; 66
    4ca0:	80 83       	st	Z, r24
    4ca2:	91 83       	std	Z+1, r25	; 0x01
    4ca4:	a2 83       	std	Z+2, r26	; 0x02
    4ca6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ca8:	8e 01       	movw	r16, r28
    4caa:	05 5a       	subi	r16, 0xA5	; 165
    4cac:	1f 4f       	sbci	r17, 0xFF	; 255
    4cae:	fe 01       	movw	r30, r28
    4cb0:	e1 5a       	subi	r30, 0xA1	; 161
    4cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb4:	60 81       	ld	r22, Z
    4cb6:	71 81       	ldd	r23, Z+1	; 0x01
    4cb8:	82 81       	ldd	r24, Z+2	; 0x02
    4cba:	93 81       	ldd	r25, Z+3	; 0x03
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	4a e7       	ldi	r20, 0x7A	; 122
    4cc2:	55 e4       	ldi	r21, 0x45	; 69
    4cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	f8 01       	movw	r30, r16
    4cce:	80 83       	st	Z, r24
    4cd0:	91 83       	std	Z+1, r25	; 0x01
    4cd2:	a2 83       	std	Z+2, r26	; 0x02
    4cd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	e5 5a       	subi	r30, 0xA5	; 165
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	60 81       	ld	r22, Z
    4cde:	71 81       	ldd	r23, Z+1	; 0x01
    4ce0:	82 81       	ldd	r24, Z+2	; 0x02
    4ce2:	93 81       	ldd	r25, Z+3	; 0x03
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	40 e8       	ldi	r20, 0x80	; 128
    4cea:	5f e3       	ldi	r21, 0x3F	; 63
    4cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cf0:	88 23       	and	r24, r24
    4cf2:	44 f4       	brge	.+16     	; 0x4d04 <EXTI_System+0x1288>
		__ticks = 1;
    4cf4:	fe 01       	movw	r30, r28
    4cf6:	e7 5a       	subi	r30, 0xA7	; 167
    4cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfa:	81 e0       	ldi	r24, 0x01	; 1
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	91 83       	std	Z+1, r25	; 0x01
    4d00:	80 83       	st	Z, r24
    4d02:	64 c0       	rjmp	.+200    	; 0x4dcc <EXTI_System+0x1350>
	else if (__tmp > 65535)
    4d04:	fe 01       	movw	r30, r28
    4d06:	e5 5a       	subi	r30, 0xA5	; 165
    4d08:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0a:	60 81       	ld	r22, Z
    4d0c:	71 81       	ldd	r23, Z+1	; 0x01
    4d0e:	82 81       	ldd	r24, Z+2	; 0x02
    4d10:	93 81       	ldd	r25, Z+3	; 0x03
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	3f ef       	ldi	r19, 0xFF	; 255
    4d16:	4f e7       	ldi	r20, 0x7F	; 127
    4d18:	57 e4       	ldi	r21, 0x47	; 71
    4d1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d1e:	18 16       	cp	r1, r24
    4d20:	0c f0       	brlt	.+2      	; 0x4d24 <EXTI_System+0x12a8>
    4d22:	43 c0       	rjmp	.+134    	; 0x4daa <EXTI_System+0x132e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d24:	fe 01       	movw	r30, r28
    4d26:	e1 5a       	subi	r30, 0xA1	; 161
    4d28:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2a:	60 81       	ld	r22, Z
    4d2c:	71 81       	ldd	r23, Z+1	; 0x01
    4d2e:	82 81       	ldd	r24, Z+2	; 0x02
    4d30:	93 81       	ldd	r25, Z+3	; 0x03
    4d32:	20 e0       	ldi	r18, 0x00	; 0
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	40 e2       	ldi	r20, 0x20	; 32
    4d38:	51 e4       	ldi	r21, 0x41	; 65
    4d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d3e:	dc 01       	movw	r26, r24
    4d40:	cb 01       	movw	r24, r22
    4d42:	8e 01       	movw	r16, r28
    4d44:	07 5a       	subi	r16, 0xA7	; 167
    4d46:	1f 4f       	sbci	r17, 0xFF	; 255
    4d48:	bc 01       	movw	r22, r24
    4d4a:	cd 01       	movw	r24, r26
    4d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d50:	dc 01       	movw	r26, r24
    4d52:	cb 01       	movw	r24, r22
    4d54:	f8 01       	movw	r30, r16
    4d56:	91 83       	std	Z+1, r25	; 0x01
    4d58:	80 83       	st	Z, r24
    4d5a:	1f c0       	rjmp	.+62     	; 0x4d9a <EXTI_System+0x131e>
    4d5c:	fe 01       	movw	r30, r28
    4d5e:	e9 5a       	subi	r30, 0xA9	; 169
    4d60:	ff 4f       	sbci	r31, 0xFF	; 255
    4d62:	80 e9       	ldi	r24, 0x90	; 144
    4d64:	91 e0       	ldi	r25, 0x01	; 1
    4d66:	91 83       	std	Z+1, r25	; 0x01
    4d68:	80 83       	st	Z, r24
    4d6a:	fe 01       	movw	r30, r28
    4d6c:	e9 5a       	subi	r30, 0xA9	; 169
    4d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d70:	80 81       	ld	r24, Z
    4d72:	91 81       	ldd	r25, Z+1	; 0x01
    4d74:	01 97       	sbiw	r24, 0x01	; 1
    4d76:	f1 f7       	brne	.-4      	; 0x4d74 <EXTI_System+0x12f8>
    4d78:	fe 01       	movw	r30, r28
    4d7a:	e9 5a       	subi	r30, 0xA9	; 169
    4d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7e:	91 83       	std	Z+1, r25	; 0x01
    4d80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d82:	de 01       	movw	r26, r28
    4d84:	a7 5a       	subi	r26, 0xA7	; 167
    4d86:	bf 4f       	sbci	r27, 0xFF	; 255
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e7 5a       	subi	r30, 0xA7	; 167
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 81       	ld	r24, Z
    4d90:	91 81       	ldd	r25, Z+1	; 0x01
    4d92:	01 97       	sbiw	r24, 0x01	; 1
    4d94:	11 96       	adiw	r26, 0x01	; 1
    4d96:	9c 93       	st	X, r25
    4d98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d9a:	fe 01       	movw	r30, r28
    4d9c:	e7 5a       	subi	r30, 0xA7	; 167
    4d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4da0:	80 81       	ld	r24, Z
    4da2:	91 81       	ldd	r25, Z+1	; 0x01
    4da4:	00 97       	sbiw	r24, 0x00	; 0
    4da6:	d1 f6       	brne	.-76     	; 0x4d5c <EXTI_System+0x12e0>
    4da8:	28 c0       	rjmp	.+80     	; 0x4dfa <EXTI_System+0x137e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4daa:	8e 01       	movw	r16, r28
    4dac:	07 5a       	subi	r16, 0xA7	; 167
    4dae:	1f 4f       	sbci	r17, 0xFF	; 255
    4db0:	fe 01       	movw	r30, r28
    4db2:	e5 5a       	subi	r30, 0xA5	; 165
    4db4:	ff 4f       	sbci	r31, 0xFF	; 255
    4db6:	60 81       	ld	r22, Z
    4db8:	71 81       	ldd	r23, Z+1	; 0x01
    4dba:	82 81       	ldd	r24, Z+2	; 0x02
    4dbc:	93 81       	ldd	r25, Z+3	; 0x03
    4dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	f8 01       	movw	r30, r16
    4dc8:	91 83       	std	Z+1, r25	; 0x01
    4dca:	80 83       	st	Z, r24
    4dcc:	de 01       	movw	r26, r28
    4dce:	ab 5a       	subi	r26, 0xAB	; 171
    4dd0:	bf 4f       	sbci	r27, 0xFF	; 255
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	e7 5a       	subi	r30, 0xA7	; 167
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	80 81       	ld	r24, Z
    4dda:	91 81       	ldd	r25, Z+1	; 0x01
    4ddc:	11 96       	adiw	r26, 0x01	; 1
    4dde:	9c 93       	st	X, r25
    4de0:	8e 93       	st	-X, r24
    4de2:	fe 01       	movw	r30, r28
    4de4:	eb 5a       	subi	r30, 0xAB	; 171
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	80 81       	ld	r24, Z
    4dea:	91 81       	ldd	r25, Z+1	; 0x01
    4dec:	01 97       	sbiw	r24, 0x01	; 1
    4dee:	f1 f7       	brne	.-4      	; 0x4dec <EXTI_System+0x1370>
    4df0:	fe 01       	movw	r30, r28
    4df2:	eb 5a       	subi	r30, 0xAB	; 171
    4df4:	ff 4f       	sbci	r31, 0xFF	; 255
    4df6:	91 83       	std	Z+1, r25	; 0x01
    4df8:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(c == Password_Length){
    4dfa:	80 91 12 01 	lds	r24, 0x0112
    4dfe:	86 30       	cpi	r24, 0x06	; 6
    4e00:	11 f0       	breq	.+4      	; 0x4e06 <EXTI_System+0x138a>
    4e02:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <EXTI_System+0x52>
				for(int i = 0; i < 5; i++){
    4e06:	fe 01       	movw	r30, r28
    4e08:	ec 5f       	subi	r30, 0xFC	; 252
    4e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e0c:	11 82       	std	Z+1, r1	; 0x01
    4e0e:	10 82       	st	Z, r1
    4e10:	fe 01       	movw	r30, r28
    4e12:	ec 5f       	subi	r30, 0xFC	; 252
    4e14:	fe 4f       	sbci	r31, 0xFE	; 254
    4e16:	80 81       	ld	r24, Z
    4e18:	91 81       	ldd	r25, Z+1	; 0x01
    4e1a:	85 30       	cpi	r24, 0x05	; 5
    4e1c:	91 05       	cpc	r25, r1
    4e1e:	14 f0       	brlt	.+4      	; 0x4e24 <EXTI_System+0x13a8>
    4e20:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <EXTI_System+0x52>
					if(pressed_Keys[i] == password[i]){
    4e24:	fe 01       	movw	r30, r28
    4e26:	ec 5f       	subi	r30, 0xFC	; 252
    4e28:	fe 4f       	sbci	r31, 0xFE	; 254
    4e2a:	80 81       	ld	r24, Z
    4e2c:	91 81       	ldd	r25, Z+1	; 0x01
    4e2e:	fc 01       	movw	r30, r24
    4e30:	eb 5e       	subi	r30, 0xEB	; 235
    4e32:	fe 4f       	sbci	r31, 0xFE	; 254
    4e34:	20 81       	ld	r18, Z
    4e36:	fe 01       	movw	r30, r28
    4e38:	ec 5f       	subi	r30, 0xFC	; 252
    4e3a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e3c:	80 81       	ld	r24, Z
    4e3e:	91 81       	ldd	r25, Z+1	; 0x01
    4e40:	fc 01       	movw	r30, r24
    4e42:	ee 5f       	subi	r30, 0xFE	; 254
    4e44:	fe 4f       	sbci	r31, 0xFE	; 254
    4e46:	80 81       	ld	r24, Z
    4e48:	28 17       	cp	r18, r24
    4e4a:	09 f0       	breq	.+2      	; 0x4e4e <EXTI_System+0x13d2>
    4e4c:	0a c4       	rjmp	.+2068   	; 0x5662 <EXTI_System+0x1be6>
						LCD_ClearScreen();
    4e4e:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>
						LCD_displayString("Correct Password");
    4e52:	8f eb       	ldi	r24, 0xBF	; 191
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
    4e5a:	fe 01       	movw	r30, r28
    4e5c:	ef 5a       	subi	r30, 0xAF	; 175
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	ac e0       	ldi	r26, 0x0C	; 12
    4e66:	b2 e4       	ldi	r27, 0x42	; 66
    4e68:	80 83       	st	Z, r24
    4e6a:	91 83       	std	Z+1, r25	; 0x01
    4e6c:	a2 83       	std	Z+2, r26	; 0x02
    4e6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e70:	8e 01       	movw	r16, r28
    4e72:	03 5b       	subi	r16, 0xB3	; 179
    4e74:	1f 4f       	sbci	r17, 0xFF	; 255
    4e76:	fe 01       	movw	r30, r28
    4e78:	ef 5a       	subi	r30, 0xAF	; 175
    4e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7c:	60 81       	ld	r22, Z
    4e7e:	71 81       	ldd	r23, Z+1	; 0x01
    4e80:	82 81       	ldd	r24, Z+2	; 0x02
    4e82:	93 81       	ldd	r25, Z+3	; 0x03
    4e84:	20 e0       	ldi	r18, 0x00	; 0
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	4a e7       	ldi	r20, 0x7A	; 122
    4e8a:	55 e4       	ldi	r21, 0x45	; 69
    4e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e90:	dc 01       	movw	r26, r24
    4e92:	cb 01       	movw	r24, r22
    4e94:	f8 01       	movw	r30, r16
    4e96:	80 83       	st	Z, r24
    4e98:	91 83       	std	Z+1, r25	; 0x01
    4e9a:	a2 83       	std	Z+2, r26	; 0x02
    4e9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e9e:	fe 01       	movw	r30, r28
    4ea0:	e3 5b       	subi	r30, 0xB3	; 179
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	60 81       	ld	r22, Z
    4ea6:	71 81       	ldd	r23, Z+1	; 0x01
    4ea8:	82 81       	ldd	r24, Z+2	; 0x02
    4eaa:	93 81       	ldd	r25, Z+3	; 0x03
    4eac:	20 e0       	ldi	r18, 0x00	; 0
    4eae:	30 e0       	ldi	r19, 0x00	; 0
    4eb0:	40 e8       	ldi	r20, 0x80	; 128
    4eb2:	5f e3       	ldi	r21, 0x3F	; 63
    4eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4eb8:	88 23       	and	r24, r24
    4eba:	44 f4       	brge	.+16     	; 0x4ecc <EXTI_System+0x1450>
		__ticks = 1;
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	e5 5b       	subi	r30, 0xB5	; 181
    4ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec2:	81 e0       	ldi	r24, 0x01	; 1
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	91 83       	std	Z+1, r25	; 0x01
    4ec8:	80 83       	st	Z, r24
    4eca:	64 c0       	rjmp	.+200    	; 0x4f94 <EXTI_System+0x1518>
	else if (__tmp > 65535)
    4ecc:	fe 01       	movw	r30, r28
    4ece:	e3 5b       	subi	r30, 0xB3	; 179
    4ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed2:	60 81       	ld	r22, Z
    4ed4:	71 81       	ldd	r23, Z+1	; 0x01
    4ed6:	82 81       	ldd	r24, Z+2	; 0x02
    4ed8:	93 81       	ldd	r25, Z+3	; 0x03
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	3f ef       	ldi	r19, 0xFF	; 255
    4ede:	4f e7       	ldi	r20, 0x7F	; 127
    4ee0:	57 e4       	ldi	r21, 0x47	; 71
    4ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ee6:	18 16       	cp	r1, r24
    4ee8:	0c f0       	brlt	.+2      	; 0x4eec <EXTI_System+0x1470>
    4eea:	43 c0       	rjmp	.+134    	; 0x4f72 <EXTI_System+0x14f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eec:	fe 01       	movw	r30, r28
    4eee:	ef 5a       	subi	r30, 0xAF	; 175
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	60 81       	ld	r22, Z
    4ef4:	71 81       	ldd	r23, Z+1	; 0x01
    4ef6:	82 81       	ldd	r24, Z+2	; 0x02
    4ef8:	93 81       	ldd	r25, Z+3	; 0x03
    4efa:	20 e0       	ldi	r18, 0x00	; 0
    4efc:	30 e0       	ldi	r19, 0x00	; 0
    4efe:	40 e2       	ldi	r20, 0x20	; 32
    4f00:	51 e4       	ldi	r21, 0x41	; 65
    4f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f06:	dc 01       	movw	r26, r24
    4f08:	cb 01       	movw	r24, r22
    4f0a:	8e 01       	movw	r16, r28
    4f0c:	05 5b       	subi	r16, 0xB5	; 181
    4f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f10:	bc 01       	movw	r22, r24
    4f12:	cd 01       	movw	r24, r26
    4f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f18:	dc 01       	movw	r26, r24
    4f1a:	cb 01       	movw	r24, r22
    4f1c:	f8 01       	movw	r30, r16
    4f1e:	91 83       	std	Z+1, r25	; 0x01
    4f20:	80 83       	st	Z, r24
    4f22:	1f c0       	rjmp	.+62     	; 0x4f62 <EXTI_System+0x14e6>
    4f24:	fe 01       	movw	r30, r28
    4f26:	e7 5b       	subi	r30, 0xB7	; 183
    4f28:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2a:	80 e9       	ldi	r24, 0x90	; 144
    4f2c:	91 e0       	ldi	r25, 0x01	; 1
    4f2e:	91 83       	std	Z+1, r25	; 0x01
    4f30:	80 83       	st	Z, r24
    4f32:	fe 01       	movw	r30, r28
    4f34:	e7 5b       	subi	r30, 0xB7	; 183
    4f36:	ff 4f       	sbci	r31, 0xFF	; 255
    4f38:	80 81       	ld	r24, Z
    4f3a:	91 81       	ldd	r25, Z+1	; 0x01
    4f3c:	01 97       	sbiw	r24, 0x01	; 1
    4f3e:	f1 f7       	brne	.-4      	; 0x4f3c <EXTI_System+0x14c0>
    4f40:	fe 01       	movw	r30, r28
    4f42:	e7 5b       	subi	r30, 0xB7	; 183
    4f44:	ff 4f       	sbci	r31, 0xFF	; 255
    4f46:	91 83       	std	Z+1, r25	; 0x01
    4f48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f4a:	de 01       	movw	r26, r28
    4f4c:	a5 5b       	subi	r26, 0xB5	; 181
    4f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    4f50:	fe 01       	movw	r30, r28
    4f52:	e5 5b       	subi	r30, 0xB5	; 181
    4f54:	ff 4f       	sbci	r31, 0xFF	; 255
    4f56:	80 81       	ld	r24, Z
    4f58:	91 81       	ldd	r25, Z+1	; 0x01
    4f5a:	01 97       	sbiw	r24, 0x01	; 1
    4f5c:	11 96       	adiw	r26, 0x01	; 1
    4f5e:	9c 93       	st	X, r25
    4f60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f62:	fe 01       	movw	r30, r28
    4f64:	e5 5b       	subi	r30, 0xB5	; 181
    4f66:	ff 4f       	sbci	r31, 0xFF	; 255
    4f68:	80 81       	ld	r24, Z
    4f6a:	91 81       	ldd	r25, Z+1	; 0x01
    4f6c:	00 97       	sbiw	r24, 0x00	; 0
    4f6e:	d1 f6       	brne	.-76     	; 0x4f24 <EXTI_System+0x14a8>
    4f70:	27 c0       	rjmp	.+78     	; 0x4fc0 <EXTI_System+0x1544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f72:	8e 01       	movw	r16, r28
    4f74:	05 5b       	subi	r16, 0xB5	; 181
    4f76:	1f 4f       	sbci	r17, 0xFF	; 255
    4f78:	fe 01       	movw	r30, r28
    4f7a:	e3 5b       	subi	r30, 0xB3	; 179
    4f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7e:	60 81       	ld	r22, Z
    4f80:	71 81       	ldd	r23, Z+1	; 0x01
    4f82:	82 81       	ldd	r24, Z+2	; 0x02
    4f84:	93 81       	ldd	r25, Z+3	; 0x03
    4f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	f8 01       	movw	r30, r16
    4f90:	91 83       	std	Z+1, r25	; 0x01
    4f92:	80 83       	st	Z, r24
    4f94:	de 01       	movw	r26, r28
    4f96:	a9 5b       	subi	r26, 0xB9	; 185
    4f98:	bf 4f       	sbci	r27, 0xFF	; 255
    4f9a:	fe 01       	movw	r30, r28
    4f9c:	e5 5b       	subi	r30, 0xB5	; 181
    4f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa0:	80 81       	ld	r24, Z
    4fa2:	91 81       	ldd	r25, Z+1	; 0x01
    4fa4:	8d 93       	st	X+, r24
    4fa6:	9c 93       	st	X, r25
    4fa8:	fe 01       	movw	r30, r28
    4faa:	e9 5b       	subi	r30, 0xB9	; 185
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	80 81       	ld	r24, Z
    4fb0:	91 81       	ldd	r25, Z+1	; 0x01
    4fb2:	01 97       	sbiw	r24, 0x01	; 1
    4fb4:	f1 f7       	brne	.-4      	; 0x4fb2 <EXTI_System+0x1536>
    4fb6:	fe 01       	movw	r30, r28
    4fb8:	e9 5b       	subi	r30, 0xB9	; 185
    4fba:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbc:	91 83       	std	Z+1, r25	; 0x01
    4fbe:	80 83       	st	Z, r24
						_delay_ms(35);
						LCD_ClearScreen();
    4fc0:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>

						// Dc Motor

						LCD_displayString("Welcome to Motor");
    4fc4:	80 ed       	ldi	r24, 0xD0	; 208
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
						LCD_GoToXY(1, 0);
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	60 e0       	ldi	r22, 0x00	; 0
    4fd0:	0e 94 63 19 	call	0x32c6	; 0x32c6 <LCD_GoToXY>
						LCD_displayString("DachBoard");
    4fd4:	81 ee       	ldi	r24, 0xE1	; 225
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
						First_Screen();
    4fdc:	0e 94 03 1c 	call	0x3806	; 0x3806 <First_Screen>

						while(1){
							u8 key_Motor = Keypad_GetPressedKey();
    4fe0:	0e 94 5d 14 	call	0x28ba	; 0x28ba <Keypad_GetPressedKey>
    4fe4:	fe 01       	movw	r30, r28
    4fe6:	ed 5f       	subi	r30, 0xFD	; 253
    4fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    4fea:	80 83       	st	Z, r24
							if(key_Motor == 1){
    4fec:	fe 01       	movw	r30, r28
    4fee:	ed 5f       	subi	r30, 0xFD	; 253
    4ff0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ff2:	80 81       	ld	r24, Z
    4ff4:	81 30       	cpi	r24, 0x01	; 1
    4ff6:	09 f0       	breq	.+2      	; 0x4ffa <EXTI_System+0x157e>
    4ff8:	c8 c2       	rjmp	.+1424   	; 0x558a <EXTI_System+0x1b0e>
								Second_Screen();
    4ffa:	0e 94 9e 1c 	call	0x393c	; 0x393c <Second_Screen>
    4ffe:	fe 01       	movw	r30, r28
    5000:	ed 5b       	subi	r30, 0xBD	; 189
    5002:	ff 4f       	sbci	r31, 0xFF	; 255
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	ac e0       	ldi	r26, 0x0C	; 12
    500a:	b2 e4       	ldi	r27, 0x42	; 66
    500c:	80 83       	st	Z, r24
    500e:	91 83       	std	Z+1, r25	; 0x01
    5010:	a2 83       	std	Z+2, r26	; 0x02
    5012:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5014:	8e 01       	movw	r16, r28
    5016:	01 5c       	subi	r16, 0xC1	; 193
    5018:	1f 4f       	sbci	r17, 0xFF	; 255
    501a:	fe 01       	movw	r30, r28
    501c:	ed 5b       	subi	r30, 0xBD	; 189
    501e:	ff 4f       	sbci	r31, 0xFF	; 255
    5020:	60 81       	ld	r22, Z
    5022:	71 81       	ldd	r23, Z+1	; 0x01
    5024:	82 81       	ldd	r24, Z+2	; 0x02
    5026:	93 81       	ldd	r25, Z+3	; 0x03
    5028:	20 e0       	ldi	r18, 0x00	; 0
    502a:	30 e0       	ldi	r19, 0x00	; 0
    502c:	4a e7       	ldi	r20, 0x7A	; 122
    502e:	55 e4       	ldi	r21, 0x45	; 69
    5030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5034:	dc 01       	movw	r26, r24
    5036:	cb 01       	movw	r24, r22
    5038:	f8 01       	movw	r30, r16
    503a:	80 83       	st	Z, r24
    503c:	91 83       	std	Z+1, r25	; 0x01
    503e:	a2 83       	std	Z+2, r26	; 0x02
    5040:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5042:	fe 01       	movw	r30, r28
    5044:	ff 96       	adiw	r30, 0x3f	; 63
    5046:	60 81       	ld	r22, Z
    5048:	71 81       	ldd	r23, Z+1	; 0x01
    504a:	82 81       	ldd	r24, Z+2	; 0x02
    504c:	93 81       	ldd	r25, Z+3	; 0x03
    504e:	20 e0       	ldi	r18, 0x00	; 0
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	40 e8       	ldi	r20, 0x80	; 128
    5054:	5f e3       	ldi	r21, 0x3F	; 63
    5056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    505a:	88 23       	and	r24, r24
    505c:	2c f4       	brge	.+10     	; 0x5068 <EXTI_System+0x15ec>
		__ticks = 1;
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	9e af       	std	Y+62, r25	; 0x3e
    5064:	8d af       	std	Y+61, r24	; 0x3d
    5066:	46 c0       	rjmp	.+140    	; 0x50f4 <EXTI_System+0x1678>
	else if (__tmp > 65535)
    5068:	fe 01       	movw	r30, r28
    506a:	ff 96       	adiw	r30, 0x3f	; 63
    506c:	60 81       	ld	r22, Z
    506e:	71 81       	ldd	r23, Z+1	; 0x01
    5070:	82 81       	ldd	r24, Z+2	; 0x02
    5072:	93 81       	ldd	r25, Z+3	; 0x03
    5074:	20 e0       	ldi	r18, 0x00	; 0
    5076:	3f ef       	ldi	r19, 0xFF	; 255
    5078:	4f e7       	ldi	r20, 0x7F	; 127
    507a:	57 e4       	ldi	r21, 0x47	; 71
    507c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5080:	18 16       	cp	r1, r24
    5082:	64 f5       	brge	.+88     	; 0x50dc <EXTI_System+0x1660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5084:	fe 01       	movw	r30, r28
    5086:	ed 5b       	subi	r30, 0xBD	; 189
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	60 81       	ld	r22, Z
    508c:	71 81       	ldd	r23, Z+1	; 0x01
    508e:	82 81       	ldd	r24, Z+2	; 0x02
    5090:	93 81       	ldd	r25, Z+3	; 0x03
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	40 e2       	ldi	r20, 0x20	; 32
    5098:	51 e4       	ldi	r21, 0x41	; 65
    509a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	bc 01       	movw	r22, r24
    50a4:	cd 01       	movw	r24, r26
    50a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	9e af       	std	Y+62, r25	; 0x3e
    50b0:	8d af       	std	Y+61, r24	; 0x3d
    50b2:	0f c0       	rjmp	.+30     	; 0x50d2 <EXTI_System+0x1656>
    50b4:	80 e9       	ldi	r24, 0x90	; 144
    50b6:	91 e0       	ldi	r25, 0x01	; 1
    50b8:	9c af       	std	Y+60, r25	; 0x3c
    50ba:	8b af       	std	Y+59, r24	; 0x3b
    50bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    50be:	9c ad       	ldd	r25, Y+60	; 0x3c
    50c0:	01 97       	sbiw	r24, 0x01	; 1
    50c2:	f1 f7       	brne	.-4      	; 0x50c0 <EXTI_System+0x1644>
    50c4:	9c af       	std	Y+60, r25	; 0x3c
    50c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    50ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    50cc:	01 97       	sbiw	r24, 0x01	; 1
    50ce:	9e af       	std	Y+62, r25	; 0x3e
    50d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    50d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    50d6:	00 97       	sbiw	r24, 0x00	; 0
    50d8:	69 f7       	brne	.-38     	; 0x50b4 <EXTI_System+0x1638>
    50da:	16 c0       	rjmp	.+44     	; 0x5108 <EXTI_System+0x168c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50dc:	fe 01       	movw	r30, r28
    50de:	ff 96       	adiw	r30, 0x3f	; 63
    50e0:	60 81       	ld	r22, Z
    50e2:	71 81       	ldd	r23, Z+1	; 0x01
    50e4:	82 81       	ldd	r24, Z+2	; 0x02
    50e6:	93 81       	ldd	r25, Z+3	; 0x03
    50e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ec:	dc 01       	movw	r26, r24
    50ee:	cb 01       	movw	r24, r22
    50f0:	9e af       	std	Y+62, r25	; 0x3e
    50f2:	8d af       	std	Y+61, r24	; 0x3d
    50f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    50f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    50f8:	9a af       	std	Y+58, r25	; 0x3a
    50fa:	89 af       	std	Y+57, r24	; 0x39
    50fc:	89 ad       	ldd	r24, Y+57	; 0x39
    50fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    5100:	01 97       	sbiw	r24, 0x01	; 1
    5102:	f1 f7       	brne	.-4      	; 0x5100 <EXTI_System+0x1684>
    5104:	9a af       	std	Y+58, r25	; 0x3a
    5106:	89 af       	std	Y+57, r24	; 0x39
								_delay_ms(35);

								while(1){
									u8 Motor_Rotate = Keypad_GetPressedKey();
    5108:	0e 94 5d 14 	call	0x28ba	; 0x28ba <Keypad_GetPressedKey>
    510c:	fe 01       	movw	r30, r28
    510e:	ee 5f       	subi	r30, 0xFE	; 254
    5110:	fe 4f       	sbci	r31, 0xFE	; 254
    5112:	80 83       	st	Z, r24
									if(Motor_Rotate == 1){
    5114:	fe 01       	movw	r30, r28
    5116:	ee 5f       	subi	r30, 0xFE	; 254
    5118:	fe 4f       	sbci	r31, 0xFE	; 254
    511a:	80 81       	ld	r24, Z
    511c:	81 30       	cpi	r24, 0x01	; 1
    511e:	09 f0       	breq	.+2      	; 0x5122 <EXTI_System+0x16a6>
    5120:	7a c0       	rjmp	.+244    	; 0x5216 <EXTI_System+0x179a>
										DC_Motor_Stop(0);
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DC_Motor_Stop>
    5128:	80 e0       	ldi	r24, 0x00	; 0
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	a0 ea       	ldi	r26, 0xA0	; 160
    512e:	b1 e4       	ldi	r27, 0x41	; 65
    5130:	8d ab       	std	Y+53, r24	; 0x35
    5132:	9e ab       	std	Y+54, r25	; 0x36
    5134:	af ab       	std	Y+55, r26	; 0x37
    5136:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5138:	6d a9       	ldd	r22, Y+53	; 0x35
    513a:	7e a9       	ldd	r23, Y+54	; 0x36
    513c:	8f a9       	ldd	r24, Y+55	; 0x37
    513e:	98 ad       	ldd	r25, Y+56	; 0x38
    5140:	20 e0       	ldi	r18, 0x00	; 0
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	4a e7       	ldi	r20, 0x7A	; 122
    5146:	55 e4       	ldi	r21, 0x45	; 69
    5148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    514c:	dc 01       	movw	r26, r24
    514e:	cb 01       	movw	r24, r22
    5150:	89 ab       	std	Y+49, r24	; 0x31
    5152:	9a ab       	std	Y+50, r25	; 0x32
    5154:	ab ab       	std	Y+51, r26	; 0x33
    5156:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5158:	69 a9       	ldd	r22, Y+49	; 0x31
    515a:	7a a9       	ldd	r23, Y+50	; 0x32
    515c:	8b a9       	ldd	r24, Y+51	; 0x33
    515e:	9c a9       	ldd	r25, Y+52	; 0x34
    5160:	20 e0       	ldi	r18, 0x00	; 0
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	40 e8       	ldi	r20, 0x80	; 128
    5166:	5f e3       	ldi	r21, 0x3F	; 63
    5168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    516c:	88 23       	and	r24, r24
    516e:	2c f4       	brge	.+10     	; 0x517a <EXTI_System+0x16fe>
		__ticks = 1;
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	98 ab       	std	Y+48, r25	; 0x30
    5176:	8f a7       	std	Y+47, r24	; 0x2f
    5178:	3f c0       	rjmp	.+126    	; 0x51f8 <EXTI_System+0x177c>
	else if (__tmp > 65535)
    517a:	69 a9       	ldd	r22, Y+49	; 0x31
    517c:	7a a9       	ldd	r23, Y+50	; 0x32
    517e:	8b a9       	ldd	r24, Y+51	; 0x33
    5180:	9c a9       	ldd	r25, Y+52	; 0x34
    5182:	20 e0       	ldi	r18, 0x00	; 0
    5184:	3f ef       	ldi	r19, 0xFF	; 255
    5186:	4f e7       	ldi	r20, 0x7F	; 127
    5188:	57 e4       	ldi	r21, 0x47	; 71
    518a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    518e:	18 16       	cp	r1, r24
    5190:	4c f5       	brge	.+82     	; 0x51e4 <EXTI_System+0x1768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5192:	6d a9       	ldd	r22, Y+53	; 0x35
    5194:	7e a9       	ldd	r23, Y+54	; 0x36
    5196:	8f a9       	ldd	r24, Y+55	; 0x37
    5198:	98 ad       	ldd	r25, Y+56	; 0x38
    519a:	20 e0       	ldi	r18, 0x00	; 0
    519c:	30 e0       	ldi	r19, 0x00	; 0
    519e:	40 e2       	ldi	r20, 0x20	; 32
    51a0:	51 e4       	ldi	r21, 0x41	; 65
    51a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51a6:	dc 01       	movw	r26, r24
    51a8:	cb 01       	movw	r24, r22
    51aa:	bc 01       	movw	r22, r24
    51ac:	cd 01       	movw	r24, r26
    51ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51b2:	dc 01       	movw	r26, r24
    51b4:	cb 01       	movw	r24, r22
    51b6:	98 ab       	std	Y+48, r25	; 0x30
    51b8:	8f a7       	std	Y+47, r24	; 0x2f
    51ba:	0f c0       	rjmp	.+30     	; 0x51da <EXTI_System+0x175e>
    51bc:	80 e9       	ldi	r24, 0x90	; 144
    51be:	91 e0       	ldi	r25, 0x01	; 1
    51c0:	9e a7       	std	Y+46, r25	; 0x2e
    51c2:	8d a7       	std	Y+45, r24	; 0x2d
    51c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    51c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    51c8:	01 97       	sbiw	r24, 0x01	; 1
    51ca:	f1 f7       	brne	.-4      	; 0x51c8 <EXTI_System+0x174c>
    51cc:	9e a7       	std	Y+46, r25	; 0x2e
    51ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    51d2:	98 a9       	ldd	r25, Y+48	; 0x30
    51d4:	01 97       	sbiw	r24, 0x01	; 1
    51d6:	98 ab       	std	Y+48, r25	; 0x30
    51d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51da:	8f a5       	ldd	r24, Y+47	; 0x2f
    51dc:	98 a9       	ldd	r25, Y+48	; 0x30
    51de:	00 97       	sbiw	r24, 0x00	; 0
    51e0:	69 f7       	brne	.-38     	; 0x51bc <EXTI_System+0x1740>
    51e2:	14 c0       	rjmp	.+40     	; 0x520c <EXTI_System+0x1790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51e4:	69 a9       	ldd	r22, Y+49	; 0x31
    51e6:	7a a9       	ldd	r23, Y+50	; 0x32
    51e8:	8b a9       	ldd	r24, Y+51	; 0x33
    51ea:	9c a9       	ldd	r25, Y+52	; 0x34
    51ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51f0:	dc 01       	movw	r26, r24
    51f2:	cb 01       	movw	r24, r22
    51f4:	98 ab       	std	Y+48, r25	; 0x30
    51f6:	8f a7       	std	Y+47, r24	; 0x2f
    51f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    51fa:	98 a9       	ldd	r25, Y+48	; 0x30
    51fc:	9c a7       	std	Y+44, r25	; 0x2c
    51fe:	8b a7       	std	Y+43, r24	; 0x2b
    5200:	8b a5       	ldd	r24, Y+43	; 0x2b
    5202:	9c a5       	ldd	r25, Y+44	; 0x2c
    5204:	01 97       	sbiw	r24, 0x01	; 1
    5206:	f1 f7       	brne	.-4      	; 0x5204 <EXTI_System+0x1788>
    5208:	9c a7       	std	Y+44, r25	; 0x2c
    520a:	8b a7       	std	Y+43, r24	; 0x2b
										_delay_ms(20);
										DC_Motor_Rotate(0, 0);
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	60 e0       	ldi	r22, 0x00	; 0
    5210:	0e 94 76 10 	call	0x20ec	; 0x20ec <DC_Motor_Rotate>
    5214:	79 cf       	rjmp	.-270    	; 0x5108 <EXTI_System+0x168c>
									}

									else if(Motor_Rotate == 2){
    5216:	fe 01       	movw	r30, r28
    5218:	ee 5f       	subi	r30, 0xFE	; 254
    521a:	fe 4f       	sbci	r31, 0xFE	; 254
    521c:	80 81       	ld	r24, Z
    521e:	82 30       	cpi	r24, 0x02	; 2
    5220:	09 f0       	breq	.+2      	; 0x5224 <EXTI_System+0x17a8>
    5222:	7a c0       	rjmp	.+244    	; 0x5318 <EXTI_System+0x189c>
										DC_Motor_Stop(0);
    5224:	80 e0       	ldi	r24, 0x00	; 0
    5226:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DC_Motor_Stop>
    522a:	80 e0       	ldi	r24, 0x00	; 0
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	a0 ea       	ldi	r26, 0xA0	; 160
    5230:	b1 e4       	ldi	r27, 0x41	; 65
    5232:	8f a3       	std	Y+39, r24	; 0x27
    5234:	98 a7       	std	Y+40, r25	; 0x28
    5236:	a9 a7       	std	Y+41, r26	; 0x29
    5238:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    523a:	6f a1       	ldd	r22, Y+39	; 0x27
    523c:	78 a5       	ldd	r23, Y+40	; 0x28
    523e:	89 a5       	ldd	r24, Y+41	; 0x29
    5240:	9a a5       	ldd	r25, Y+42	; 0x2a
    5242:	20 e0       	ldi	r18, 0x00	; 0
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	4a e7       	ldi	r20, 0x7A	; 122
    5248:	55 e4       	ldi	r21, 0x45	; 69
    524a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    524e:	dc 01       	movw	r26, r24
    5250:	cb 01       	movw	r24, r22
    5252:	8b a3       	std	Y+35, r24	; 0x23
    5254:	9c a3       	std	Y+36, r25	; 0x24
    5256:	ad a3       	std	Y+37, r26	; 0x25
    5258:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    525a:	6b a1       	ldd	r22, Y+35	; 0x23
    525c:	7c a1       	ldd	r23, Y+36	; 0x24
    525e:	8d a1       	ldd	r24, Y+37	; 0x25
    5260:	9e a1       	ldd	r25, Y+38	; 0x26
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	40 e8       	ldi	r20, 0x80	; 128
    5268:	5f e3       	ldi	r21, 0x3F	; 63
    526a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    526e:	88 23       	and	r24, r24
    5270:	2c f4       	brge	.+10     	; 0x527c <EXTI_System+0x1800>
		__ticks = 1;
    5272:	81 e0       	ldi	r24, 0x01	; 1
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	9a a3       	std	Y+34, r25	; 0x22
    5278:	89 a3       	std	Y+33, r24	; 0x21
    527a:	3f c0       	rjmp	.+126    	; 0x52fa <EXTI_System+0x187e>
	else if (__tmp > 65535)
    527c:	6b a1       	ldd	r22, Y+35	; 0x23
    527e:	7c a1       	ldd	r23, Y+36	; 0x24
    5280:	8d a1       	ldd	r24, Y+37	; 0x25
    5282:	9e a1       	ldd	r25, Y+38	; 0x26
    5284:	20 e0       	ldi	r18, 0x00	; 0
    5286:	3f ef       	ldi	r19, 0xFF	; 255
    5288:	4f e7       	ldi	r20, 0x7F	; 127
    528a:	57 e4       	ldi	r21, 0x47	; 71
    528c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5290:	18 16       	cp	r1, r24
    5292:	4c f5       	brge	.+82     	; 0x52e6 <EXTI_System+0x186a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5294:	6f a1       	ldd	r22, Y+39	; 0x27
    5296:	78 a5       	ldd	r23, Y+40	; 0x28
    5298:	89 a5       	ldd	r24, Y+41	; 0x29
    529a:	9a a5       	ldd	r25, Y+42	; 0x2a
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	40 e2       	ldi	r20, 0x20	; 32
    52a2:	51 e4       	ldi	r21, 0x41	; 65
    52a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a8:	dc 01       	movw	r26, r24
    52aa:	cb 01       	movw	r24, r22
    52ac:	bc 01       	movw	r22, r24
    52ae:	cd 01       	movw	r24, r26
    52b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52b4:	dc 01       	movw	r26, r24
    52b6:	cb 01       	movw	r24, r22
    52b8:	9a a3       	std	Y+34, r25	; 0x22
    52ba:	89 a3       	std	Y+33, r24	; 0x21
    52bc:	0f c0       	rjmp	.+30     	; 0x52dc <EXTI_System+0x1860>
    52be:	80 e9       	ldi	r24, 0x90	; 144
    52c0:	91 e0       	ldi	r25, 0x01	; 1
    52c2:	98 a3       	std	Y+32, r25	; 0x20
    52c4:	8f 8f       	std	Y+31, r24	; 0x1f
    52c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52c8:	98 a1       	ldd	r25, Y+32	; 0x20
    52ca:	01 97       	sbiw	r24, 0x01	; 1
    52cc:	f1 f7       	brne	.-4      	; 0x52ca <EXTI_System+0x184e>
    52ce:	98 a3       	std	Y+32, r25	; 0x20
    52d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52d2:	89 a1       	ldd	r24, Y+33	; 0x21
    52d4:	9a a1       	ldd	r25, Y+34	; 0x22
    52d6:	01 97       	sbiw	r24, 0x01	; 1
    52d8:	9a a3       	std	Y+34, r25	; 0x22
    52da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52dc:	89 a1       	ldd	r24, Y+33	; 0x21
    52de:	9a a1       	ldd	r25, Y+34	; 0x22
    52e0:	00 97       	sbiw	r24, 0x00	; 0
    52e2:	69 f7       	brne	.-38     	; 0x52be <EXTI_System+0x1842>
    52e4:	14 c0       	rjmp	.+40     	; 0x530e <EXTI_System+0x1892>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52e6:	6b a1       	ldd	r22, Y+35	; 0x23
    52e8:	7c a1       	ldd	r23, Y+36	; 0x24
    52ea:	8d a1       	ldd	r24, Y+37	; 0x25
    52ec:	9e a1       	ldd	r25, Y+38	; 0x26
    52ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52f2:	dc 01       	movw	r26, r24
    52f4:	cb 01       	movw	r24, r22
    52f6:	9a a3       	std	Y+34, r25	; 0x22
    52f8:	89 a3       	std	Y+33, r24	; 0x21
    52fa:	89 a1       	ldd	r24, Y+33	; 0x21
    52fc:	9a a1       	ldd	r25, Y+34	; 0x22
    52fe:	9e 8f       	std	Y+30, r25	; 0x1e
    5300:	8d 8f       	std	Y+29, r24	; 0x1d
    5302:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5304:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5306:	01 97       	sbiw	r24, 0x01	; 1
    5308:	f1 f7       	brne	.-4      	; 0x5306 <EXTI_System+0x188a>
    530a:	9e 8f       	std	Y+30, r25	; 0x1e
    530c:	8d 8f       	std	Y+29, r24	; 0x1d
										_delay_ms(20);
										DC_Motor_Rotate(0, 1);
    530e:	80 e0       	ldi	r24, 0x00	; 0
    5310:	61 e0       	ldi	r22, 0x01	; 1
    5312:	0e 94 76 10 	call	0x20ec	; 0x20ec <DC_Motor_Rotate>
    5316:	f8 ce       	rjmp	.-528    	; 0x5108 <EXTI_System+0x168c>
									}

									else if(Motor_Rotate == 3){
    5318:	fe 01       	movw	r30, r28
    531a:	ee 5f       	subi	r30, 0xFE	; 254
    531c:	fe 4f       	sbci	r31, 0xFE	; 254
    531e:	80 81       	ld	r24, Z
    5320:	83 30       	cpi	r24, 0x03	; 3
    5322:	09 f0       	breq	.+2      	; 0x5326 <EXTI_System+0x18aa>
    5324:	f1 ce       	rjmp	.-542    	; 0x5108 <EXTI_System+0x168c>
										DC_Motor_Stop(0);
    5326:	80 e0       	ldi	r24, 0x00	; 0
    5328:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DC_Motor_Stop>
										First_Screen();
    532c:	0e 94 03 1c 	call	0x3806	; 0x3806 <First_Screen>

										while(1){
											u8 Motor_Back = Keypad_GetPressedKey();
    5330:	0e 94 5d 14 	call	0x28ba	; 0x28ba <Keypad_GetPressedKey>
    5334:	fe 01       	movw	r30, r28
    5336:	ef 5f       	subi	r30, 0xFF	; 255
    5338:	fe 4f       	sbci	r31, 0xFE	; 254
    533a:	80 83       	st	Z, r24
											if(Motor_Back == 1){
    533c:	fe 01       	movw	r30, r28
    533e:	ef 5f       	subi	r30, 0xFF	; 255
    5340:	fe 4f       	sbci	r31, 0xFE	; 254
    5342:	80 81       	ld	r24, Z
    5344:	81 30       	cpi	r24, 0x01	; 1
    5346:	09 f0       	breq	.+2      	; 0x534a <EXTI_System+0x18ce>
    5348:	13 c1       	rjmp	.+550    	; 0x5570 <EXTI_System+0x1af4>
												Second_Screen();
    534a:	0e 94 9e 1c 	call	0x393c	; 0x393c <Second_Screen>
    534e:	80 e0       	ldi	r24, 0x00	; 0
    5350:	90 e0       	ldi	r25, 0x00	; 0
    5352:	ac e0       	ldi	r26, 0x0C	; 12
    5354:	b2 e4       	ldi	r27, 0x42	; 66
    5356:	89 8f       	std	Y+25, r24	; 0x19
    5358:	9a 8f       	std	Y+26, r25	; 0x1a
    535a:	ab 8f       	std	Y+27, r26	; 0x1b
    535c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    535e:	69 8d       	ldd	r22, Y+25	; 0x19
    5360:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	4a e7       	ldi	r20, 0x7A	; 122
    536c:	55 e4       	ldi	r21, 0x45	; 69
    536e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5372:	dc 01       	movw	r26, r24
    5374:	cb 01       	movw	r24, r22
    5376:	8d 8b       	std	Y+21, r24	; 0x15
    5378:	9e 8b       	std	Y+22, r25	; 0x16
    537a:	af 8b       	std	Y+23, r26	; 0x17
    537c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    537e:	6d 89       	ldd	r22, Y+21	; 0x15
    5380:	7e 89       	ldd	r23, Y+22	; 0x16
    5382:	8f 89       	ldd	r24, Y+23	; 0x17
    5384:	98 8d       	ldd	r25, Y+24	; 0x18
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	40 e8       	ldi	r20, 0x80	; 128
    538c:	5f e3       	ldi	r21, 0x3F	; 63
    538e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5392:	88 23       	and	r24, r24
    5394:	2c f4       	brge	.+10     	; 0x53a0 <EXTI_System+0x1924>
		__ticks = 1;
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	9c 8b       	std	Y+20, r25	; 0x14
    539c:	8b 8b       	std	Y+19, r24	; 0x13
    539e:	3f c0       	rjmp	.+126    	; 0x541e <EXTI_System+0x19a2>
	else if (__tmp > 65535)
    53a0:	6d 89       	ldd	r22, Y+21	; 0x15
    53a2:	7e 89       	ldd	r23, Y+22	; 0x16
    53a4:	8f 89       	ldd	r24, Y+23	; 0x17
    53a6:	98 8d       	ldd	r25, Y+24	; 0x18
    53a8:	20 e0       	ldi	r18, 0x00	; 0
    53aa:	3f ef       	ldi	r19, 0xFF	; 255
    53ac:	4f e7       	ldi	r20, 0x7F	; 127
    53ae:	57 e4       	ldi	r21, 0x47	; 71
    53b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    53b4:	18 16       	cp	r1, r24
    53b6:	4c f5       	brge	.+82     	; 0x540a <EXTI_System+0x198e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53b8:	69 8d       	ldd	r22, Y+25	; 0x19
    53ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	40 e2       	ldi	r20, 0x20	; 32
    53c6:	51 e4       	ldi	r21, 0x41	; 65
    53c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	bc 01       	movw	r22, r24
    53d2:	cd 01       	movw	r24, r26
    53d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53d8:	dc 01       	movw	r26, r24
    53da:	cb 01       	movw	r24, r22
    53dc:	9c 8b       	std	Y+20, r25	; 0x14
    53de:	8b 8b       	std	Y+19, r24	; 0x13
    53e0:	0f c0       	rjmp	.+30     	; 0x5400 <EXTI_System+0x1984>
    53e2:	80 e9       	ldi	r24, 0x90	; 144
    53e4:	91 e0       	ldi	r25, 0x01	; 1
    53e6:	9a 8b       	std	Y+18, r25	; 0x12
    53e8:	89 8b       	std	Y+17, r24	; 0x11
    53ea:	89 89       	ldd	r24, Y+17	; 0x11
    53ec:	9a 89       	ldd	r25, Y+18	; 0x12
    53ee:	01 97       	sbiw	r24, 0x01	; 1
    53f0:	f1 f7       	brne	.-4      	; 0x53ee <EXTI_System+0x1972>
    53f2:	9a 8b       	std	Y+18, r25	; 0x12
    53f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53f6:	8b 89       	ldd	r24, Y+19	; 0x13
    53f8:	9c 89       	ldd	r25, Y+20	; 0x14
    53fa:	01 97       	sbiw	r24, 0x01	; 1
    53fc:	9c 8b       	std	Y+20, r25	; 0x14
    53fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5400:	8b 89       	ldd	r24, Y+19	; 0x13
    5402:	9c 89       	ldd	r25, Y+20	; 0x14
    5404:	00 97       	sbiw	r24, 0x00	; 0
    5406:	69 f7       	brne	.-38     	; 0x53e2 <EXTI_System+0x1966>
    5408:	14 c0       	rjmp	.+40     	; 0x5432 <EXTI_System+0x19b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    540a:	6d 89       	ldd	r22, Y+21	; 0x15
    540c:	7e 89       	ldd	r23, Y+22	; 0x16
    540e:	8f 89       	ldd	r24, Y+23	; 0x17
    5410:	98 8d       	ldd	r25, Y+24	; 0x18
    5412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5416:	dc 01       	movw	r26, r24
    5418:	cb 01       	movw	r24, r22
    541a:	9c 8b       	std	Y+20, r25	; 0x14
    541c:	8b 8b       	std	Y+19, r24	; 0x13
    541e:	8b 89       	ldd	r24, Y+19	; 0x13
    5420:	9c 89       	ldd	r25, Y+20	; 0x14
    5422:	98 8b       	std	Y+16, r25	; 0x10
    5424:	8f 87       	std	Y+15, r24	; 0x0f
    5426:	8f 85       	ldd	r24, Y+15	; 0x0f
    5428:	98 89       	ldd	r25, Y+16	; 0x10
    542a:	01 97       	sbiw	r24, 0x01	; 1
    542c:	f1 f7       	brne	.-4      	; 0x542a <EXTI_System+0x19ae>
    542e:	98 8b       	std	Y+16, r25	; 0x10
    5430:	8f 87       	std	Y+15, r24	; 0x0f
												_delay_ms(35);

												while(1){
													u8 new_System = Keypad_GetPressedKey;
    5432:	8d e5       	ldi	r24, 0x5D	; 93
    5434:	94 e1       	ldi	r25, 0x14	; 20
    5436:	fe 01       	movw	r30, r28
    5438:	e0 50       	subi	r30, 0x00	; 0
    543a:	ff 4f       	sbci	r31, 0xFF	; 255
    543c:	80 83       	st	Z, r24

													if(new_System == 1){
    543e:	fe 01       	movw	r30, r28
    5440:	e0 50       	subi	r30, 0x00	; 0
    5442:	ff 4f       	sbci	r31, 0xFF	; 255
    5444:	80 81       	ld	r24, Z
    5446:	81 30       	cpi	r24, 0x01	; 1
    5448:	29 f4       	brne	.+10     	; 0x5454 <EXTI_System+0x19d8>
														DC_Motor_Rotate(0, 0);
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	60 e0       	ldi	r22, 0x00	; 0
    544e:	0e 94 76 10 	call	0x20ec	; 0x20ec <DC_Motor_Rotate>
    5452:	ef cf       	rjmp	.-34     	; 0x5432 <EXTI_System+0x19b6>
													}

													else if(new_System == 2){
    5454:	fe 01       	movw	r30, r28
    5456:	e0 50       	subi	r30, 0x00	; 0
    5458:	ff 4f       	sbci	r31, 0xFF	; 255
    545a:	80 81       	ld	r24, Z
    545c:	82 30       	cpi	r24, 0x02	; 2
    545e:	09 f0       	breq	.+2      	; 0x5462 <EXTI_System+0x19e6>
    5460:	7a c0       	rjmp	.+244    	; 0x5556 <EXTI_System+0x1ada>
														DC_Motor_Stop(0);
    5462:	80 e0       	ldi	r24, 0x00	; 0
    5464:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DC_Motor_Stop>
    5468:	80 e0       	ldi	r24, 0x00	; 0
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	ac e0       	ldi	r26, 0x0C	; 12
    546e:	b2 e4       	ldi	r27, 0x42	; 66
    5470:	8b 87       	std	Y+11, r24	; 0x0b
    5472:	9c 87       	std	Y+12, r25	; 0x0c
    5474:	ad 87       	std	Y+13, r26	; 0x0d
    5476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5478:	6b 85       	ldd	r22, Y+11	; 0x0b
    547a:	7c 85       	ldd	r23, Y+12	; 0x0c
    547c:	8d 85       	ldd	r24, Y+13	; 0x0d
    547e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5480:	20 e0       	ldi	r18, 0x00	; 0
    5482:	30 e0       	ldi	r19, 0x00	; 0
    5484:	4a e7       	ldi	r20, 0x7A	; 122
    5486:	55 e4       	ldi	r21, 0x45	; 69
    5488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    548c:	dc 01       	movw	r26, r24
    548e:	cb 01       	movw	r24, r22
    5490:	8f 83       	std	Y+7, r24	; 0x07
    5492:	98 87       	std	Y+8, r25	; 0x08
    5494:	a9 87       	std	Y+9, r26	; 0x09
    5496:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5498:	6f 81       	ldd	r22, Y+7	; 0x07
    549a:	78 85       	ldd	r23, Y+8	; 0x08
    549c:	89 85       	ldd	r24, Y+9	; 0x09
    549e:	9a 85       	ldd	r25, Y+10	; 0x0a
    54a0:	20 e0       	ldi	r18, 0x00	; 0
    54a2:	30 e0       	ldi	r19, 0x00	; 0
    54a4:	40 e8       	ldi	r20, 0x80	; 128
    54a6:	5f e3       	ldi	r21, 0x3F	; 63
    54a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54ac:	88 23       	and	r24, r24
    54ae:	2c f4       	brge	.+10     	; 0x54ba <EXTI_System+0x1a3e>
		__ticks = 1;
    54b0:	81 e0       	ldi	r24, 0x01	; 1
    54b2:	90 e0       	ldi	r25, 0x00	; 0
    54b4:	9e 83       	std	Y+6, r25	; 0x06
    54b6:	8d 83       	std	Y+5, r24	; 0x05
    54b8:	3f c0       	rjmp	.+126    	; 0x5538 <EXTI_System+0x1abc>
	else if (__tmp > 65535)
    54ba:	6f 81       	ldd	r22, Y+7	; 0x07
    54bc:	78 85       	ldd	r23, Y+8	; 0x08
    54be:	89 85       	ldd	r24, Y+9	; 0x09
    54c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	3f ef       	ldi	r19, 0xFF	; 255
    54c6:	4f e7       	ldi	r20, 0x7F	; 127
    54c8:	57 e4       	ldi	r21, 0x47	; 71
    54ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54ce:	18 16       	cp	r1, r24
    54d0:	4c f5       	brge	.+82     	; 0x5524 <EXTI_System+0x1aa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    54d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    54d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    54d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    54da:	20 e0       	ldi	r18, 0x00	; 0
    54dc:	30 e0       	ldi	r19, 0x00	; 0
    54de:	40 e2       	ldi	r20, 0x20	; 32
    54e0:	51 e4       	ldi	r21, 0x41	; 65
    54e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54e6:	dc 01       	movw	r26, r24
    54e8:	cb 01       	movw	r24, r22
    54ea:	bc 01       	movw	r22, r24
    54ec:	cd 01       	movw	r24, r26
    54ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54f2:	dc 01       	movw	r26, r24
    54f4:	cb 01       	movw	r24, r22
    54f6:	9e 83       	std	Y+6, r25	; 0x06
    54f8:	8d 83       	std	Y+5, r24	; 0x05
    54fa:	0f c0       	rjmp	.+30     	; 0x551a <EXTI_System+0x1a9e>
    54fc:	80 e9       	ldi	r24, 0x90	; 144
    54fe:	91 e0       	ldi	r25, 0x01	; 1
    5500:	9c 83       	std	Y+4, r25	; 0x04
    5502:	8b 83       	std	Y+3, r24	; 0x03
    5504:	8b 81       	ldd	r24, Y+3	; 0x03
    5506:	9c 81       	ldd	r25, Y+4	; 0x04
    5508:	01 97       	sbiw	r24, 0x01	; 1
    550a:	f1 f7       	brne	.-4      	; 0x5508 <EXTI_System+0x1a8c>
    550c:	9c 83       	std	Y+4, r25	; 0x04
    550e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5510:	8d 81       	ldd	r24, Y+5	; 0x05
    5512:	9e 81       	ldd	r25, Y+6	; 0x06
    5514:	01 97       	sbiw	r24, 0x01	; 1
    5516:	9e 83       	std	Y+6, r25	; 0x06
    5518:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    551a:	8d 81       	ldd	r24, Y+5	; 0x05
    551c:	9e 81       	ldd	r25, Y+6	; 0x06
    551e:	00 97       	sbiw	r24, 0x00	; 0
    5520:	69 f7       	brne	.-38     	; 0x54fc <EXTI_System+0x1a80>
    5522:	14 c0       	rjmp	.+40     	; 0x554c <EXTI_System+0x1ad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5524:	6f 81       	ldd	r22, Y+7	; 0x07
    5526:	78 85       	ldd	r23, Y+8	; 0x08
    5528:	89 85       	ldd	r24, Y+9	; 0x09
    552a:	9a 85       	ldd	r25, Y+10	; 0x0a
    552c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	9e 83       	std	Y+6, r25	; 0x06
    5536:	8d 83       	std	Y+5, r24	; 0x05
    5538:	8d 81       	ldd	r24, Y+5	; 0x05
    553a:	9e 81       	ldd	r25, Y+6	; 0x06
    553c:	9a 83       	std	Y+2, r25	; 0x02
    553e:	89 83       	std	Y+1, r24	; 0x01
    5540:	89 81       	ldd	r24, Y+1	; 0x01
    5542:	9a 81       	ldd	r25, Y+2	; 0x02
    5544:	01 97       	sbiw	r24, 0x01	; 1
    5546:	f1 f7       	brne	.-4      	; 0x5544 <EXTI_System+0x1ac8>
    5548:	9a 83       	std	Y+2, r25	; 0x02
    554a:	89 83       	std	Y+1, r24	; 0x01
														_delay_ms(35);
														DC_Motor_Rotate(0, 1);
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	61 e0       	ldi	r22, 0x01	; 1
    5550:	0e 94 76 10 	call	0x20ec	; 0x20ec <DC_Motor_Rotate>
    5554:	6e cf       	rjmp	.-292    	; 0x5432 <EXTI_System+0x19b6>
													}

													else if(new_System == 3){
    5556:	fe 01       	movw	r30, r28
    5558:	e0 50       	subi	r30, 0x00	; 0
    555a:	ff 4f       	sbci	r31, 0xFF	; 255
    555c:	80 81       	ld	r24, Z
    555e:	83 30       	cpi	r24, 0x03	; 3
    5560:	09 f0       	breq	.+2      	; 0x5564 <EXTI_System+0x1ae8>
    5562:	67 cf       	rjmp	.-306    	; 0x5432 <EXTI_System+0x19b6>
														DC_Motor_Stop(0);
    5564:	80 e0       	ldi	r24, 0x00	; 0
    5566:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DC_Motor_Stop>
														First_Screen();
    556a:	0e 94 03 1c 	call	0x3806	; 0x3806 <First_Screen>
    556e:	61 cf       	rjmp	.-318    	; 0x5432 <EXTI_System+0x19b6>
													}
												}

											}

											else if(Motor_Back == 2){
    5570:	fe 01       	movw	r30, r28
    5572:	ef 5f       	subi	r30, 0xFF	; 255
    5574:	fe 4f       	sbci	r31, 0xFE	; 254
    5576:	80 81       	ld	r24, Z
    5578:	82 30       	cpi	r24, 0x02	; 2
    557a:	09 f0       	breq	.+2      	; 0x557e <EXTI_System+0x1b02>
    557c:	d9 ce       	rjmp	.-590    	; 0x5330 <EXTI_System+0x18b4>
												DC_Motor_Stop(0);
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DC_Motor_Stop>
												LCD_ClearScreen();
    5584:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>
    5588:	d3 ce       	rjmp	.-602    	; 0x5330 <EXTI_System+0x18b4>
										}
									}
								}
							}

							else if(key_Motor == 2){
    558a:	fe 01       	movw	r30, r28
    558c:	ed 5f       	subi	r30, 0xFD	; 253
    558e:	fe 4f       	sbci	r31, 0xFE	; 254
    5590:	80 81       	ld	r24, Z
    5592:	82 30       	cpi	r24, 0x02	; 2
    5594:	09 f0       	breq	.+2      	; 0x5598 <EXTI_System+0x1b1c>
    5596:	58 c0       	rjmp	.+176    	; 0x5648 <EXTI_System+0x1bcc>
								StepperAngles_Screen();
    5598:	0e 94 bb 1c 	call	0x3976	; 0x3976 <StepperAngles_Screen>
								while(1){
									u8 Stepper_angle = Keypad_GetPressedKey();
    559c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <Keypad_GetPressedKey>
    55a0:	fe 01       	movw	r30, r28
    55a2:	e1 50       	subi	r30, 0x01	; 1
    55a4:	ff 4f       	sbci	r31, 0xFF	; 255
    55a6:	80 83       	st	Z, r24
									if(Stepper_angle == 1){
    55a8:	fe 01       	movw	r30, r28
    55aa:	e1 50       	subi	r30, 0x01	; 1
    55ac:	ff 4f       	sbci	r31, 0xFF	; 255
    55ae:	80 81       	ld	r24, Z
    55b0:	81 30       	cpi	r24, 0x01	; 1
    55b2:	11 f5       	brne	.+68     	; 0x55f8 <EXTI_System+0x1b7c>
										StepperDirection_Screen();
    55b4:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <StepperDirection_Screen>
										while(1){
											u8 Stepper_Diection90 = Keypad_GetPressedKey();
    55b8:	0e 94 5d 14 	call	0x28ba	; 0x28ba <Keypad_GetPressedKey>
    55bc:	fe 01       	movw	r30, r28
    55be:	e2 50       	subi	r30, 0x02	; 2
    55c0:	ff 4f       	sbci	r31, 0xFF	; 255
    55c2:	80 83       	st	Z, r24
											if(Stepper_Diection90 == 1){
    55c4:	fe 01       	movw	r30, r28
    55c6:	e2 50       	subi	r30, 0x02	; 2
    55c8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ca:	80 81       	ld	r24, Z
    55cc:	81 30       	cpi	r24, 0x01	; 1
    55ce:	39 f4       	brne	.+14     	; 0x55de <EXTI_System+0x1b62>
												SelectStepAngle(90, 0);
    55d0:	8a e5       	ldi	r24, 0x5A	; 90
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	60 e0       	ldi	r22, 0x00	; 0
    55d6:	70 e0       	ldi	r23, 0x00	; 0
    55d8:	0e 94 08 06 	call	0xc10	; 0xc10 <SelectStepAngle>
    55dc:	ed cf       	rjmp	.-38     	; 0x55b8 <EXTI_System+0x1b3c>
											}

											else if(Stepper_Diection90 == 2){
    55de:	fe 01       	movw	r30, r28
    55e0:	e2 50       	subi	r30, 0x02	; 2
    55e2:	ff 4f       	sbci	r31, 0xFF	; 255
    55e4:	80 81       	ld	r24, Z
    55e6:	82 30       	cpi	r24, 0x02	; 2
    55e8:	39 f7       	brne	.-50     	; 0x55b8 <EXTI_System+0x1b3c>
												SelectStepAngle(90, 1);
    55ea:	8a e5       	ldi	r24, 0x5A	; 90
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	61 e0       	ldi	r22, 0x01	; 1
    55f0:	70 e0       	ldi	r23, 0x00	; 0
    55f2:	0e 94 08 06 	call	0xc10	; 0xc10 <SelectStepAngle>
    55f6:	e0 cf       	rjmp	.-64     	; 0x55b8 <EXTI_System+0x1b3c>
											}
										}
									}

									else if(Stepper_angle == 2){
    55f8:	fe 01       	movw	r30, r28
    55fa:	e1 50       	subi	r30, 0x01	; 1
    55fc:	ff 4f       	sbci	r31, 0xFF	; 255
    55fe:	80 81       	ld	r24, Z
    5600:	82 30       	cpi	r24, 0x02	; 2
    5602:	61 f6       	brne	.-104    	; 0x559c <EXTI_System+0x1b20>
										StepperDirection_Screen();
    5604:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <StepperDirection_Screen>
										while(1){
											u8 Stepper_Diection180 = Keypad_GetPressedKey();
    5608:	0e 94 5d 14 	call	0x28ba	; 0x28ba <Keypad_GetPressedKey>
    560c:	fe 01       	movw	r30, r28
    560e:	e3 50       	subi	r30, 0x03	; 3
    5610:	ff 4f       	sbci	r31, 0xFF	; 255
    5612:	80 83       	st	Z, r24
											if(Stepper_Diection180 == 1){
    5614:	fe 01       	movw	r30, r28
    5616:	e3 50       	subi	r30, 0x03	; 3
    5618:	ff 4f       	sbci	r31, 0xFF	; 255
    561a:	80 81       	ld	r24, Z
    561c:	81 30       	cpi	r24, 0x01	; 1
    561e:	39 f4       	brne	.+14     	; 0x562e <EXTI_System+0x1bb2>
												SelectStepAngle(180, 0);
    5620:	84 eb       	ldi	r24, 0xB4	; 180
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	60 e0       	ldi	r22, 0x00	; 0
    5626:	70 e0       	ldi	r23, 0x00	; 0
    5628:	0e 94 08 06 	call	0xc10	; 0xc10 <SelectStepAngle>
    562c:	ed cf       	rjmp	.-38     	; 0x5608 <EXTI_System+0x1b8c>
											}

											else if(Stepper_Diection180 == 2){
    562e:	fe 01       	movw	r30, r28
    5630:	e3 50       	subi	r30, 0x03	; 3
    5632:	ff 4f       	sbci	r31, 0xFF	; 255
    5634:	80 81       	ld	r24, Z
    5636:	82 30       	cpi	r24, 0x02	; 2
    5638:	39 f7       	brne	.-50     	; 0x5608 <EXTI_System+0x1b8c>
												SelectStepAngle(180, 1);
    563a:	84 eb       	ldi	r24, 0xB4	; 180
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	61 e0       	ldi	r22, 0x01	; 1
    5640:	70 e0       	ldi	r23, 0x00	; 0
    5642:	0e 94 08 06 	call	0xc10	; 0xc10 <SelectStepAngle>
    5646:	e0 cf       	rjmp	.-64     	; 0x5608 <EXTI_System+0x1b8c>
										}
									}
								}
							}

							else if(key_Motor == 3){
    5648:	fe 01       	movw	r30, r28
    564a:	ed 5f       	subi	r30, 0xFD	; 253
    564c:	fe 4f       	sbci	r31, 0xFE	; 254
    564e:	80 81       	ld	r24, Z
    5650:	83 30       	cpi	r24, 0x03	; 3
    5652:	09 f0       	breq	.+2      	; 0x5656 <EXTI_System+0x1bda>
    5654:	c5 cc       	rjmp	.-1654   	; 0x4fe0 <EXTI_System+0x1564>
								DC_Motor_Stop(0);
    5656:	80 e0       	ldi	r24, 0x00	; 0
    5658:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DC_Motor_Stop>
								LCD_ClearScreen();
    565c:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>
    5660:	bf cc       	rjmp	.-1666   	; 0x4fe0 <EXTI_System+0x1564>
							}
						}
						break;
					}
					else{
						LCD_ClearScreen();
    5662:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_ClearScreen>
						LCD_displayString("Wrong Password");
    5666:	8b ee       	ldi	r24, 0xEB	; 235
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_displayString>
    566e:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <EXTI_System+0x52>

		}
		Local_u8_Flag = 0;
	}
	else{
		LCD_setPinValue(1, 6, 0);
    5672:	81 e0       	ldi	r24, 0x01	; 1
    5674:	90 e0       	ldi	r25, 0x00	; 0
    5676:	66 e0       	ldi	r22, 0x06	; 6
    5678:	70 e0       	ldi	r23, 0x00	; 0
    567a:	40 e0       	ldi	r20, 0x00	; 0
    567c:	50 e0       	ldi	r21, 0x00	; 0
    567e:	0e 94 0a 12 	call	0x2414	; 0x2414 <LCD_setPinValue>
		Local_u8_Flag = 1;
    5682:	81 e0       	ldi	r24, 0x01	; 1
    5684:	80 93 14 01 	sts	0x0114, r24
	}

}
    5688:	ca 5f       	subi	r28, 0xFA	; 250
    568a:	de 4f       	sbci	r29, 0xFE	; 254
    568c:	0f b6       	in	r0, 0x3f	; 63
    568e:	f8 94       	cli
    5690:	de bf       	out	0x3e, r29	; 62
    5692:	0f be       	out	0x3f, r0	; 63
    5694:	cd bf       	out	0x3d, r28	; 61
    5696:	cf 91       	pop	r28
    5698:	df 91       	pop	r29
    569a:	1f 91       	pop	r17
    569c:	0f 91       	pop	r16
    569e:	08 95       	ret

000056a0 <__prologue_saves__>:
    56a0:	2f 92       	push	r2
    56a2:	3f 92       	push	r3
    56a4:	4f 92       	push	r4
    56a6:	5f 92       	push	r5
    56a8:	6f 92       	push	r6
    56aa:	7f 92       	push	r7
    56ac:	8f 92       	push	r8
    56ae:	9f 92       	push	r9
    56b0:	af 92       	push	r10
    56b2:	bf 92       	push	r11
    56b4:	cf 92       	push	r12
    56b6:	df 92       	push	r13
    56b8:	ef 92       	push	r14
    56ba:	ff 92       	push	r15
    56bc:	0f 93       	push	r16
    56be:	1f 93       	push	r17
    56c0:	cf 93       	push	r28
    56c2:	df 93       	push	r29
    56c4:	cd b7       	in	r28, 0x3d	; 61
    56c6:	de b7       	in	r29, 0x3e	; 62
    56c8:	ca 1b       	sub	r28, r26
    56ca:	db 0b       	sbc	r29, r27
    56cc:	0f b6       	in	r0, 0x3f	; 63
    56ce:	f8 94       	cli
    56d0:	de bf       	out	0x3e, r29	; 62
    56d2:	0f be       	out	0x3f, r0	; 63
    56d4:	cd bf       	out	0x3d, r28	; 61
    56d6:	09 94       	ijmp

000056d8 <__epilogue_restores__>:
    56d8:	2a 88       	ldd	r2, Y+18	; 0x12
    56da:	39 88       	ldd	r3, Y+17	; 0x11
    56dc:	48 88       	ldd	r4, Y+16	; 0x10
    56de:	5f 84       	ldd	r5, Y+15	; 0x0f
    56e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    56e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    56e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    56e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    56e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    56ea:	b9 84       	ldd	r11, Y+9	; 0x09
    56ec:	c8 84       	ldd	r12, Y+8	; 0x08
    56ee:	df 80       	ldd	r13, Y+7	; 0x07
    56f0:	ee 80       	ldd	r14, Y+6	; 0x06
    56f2:	fd 80       	ldd	r15, Y+5	; 0x05
    56f4:	0c 81       	ldd	r16, Y+4	; 0x04
    56f6:	1b 81       	ldd	r17, Y+3	; 0x03
    56f8:	aa 81       	ldd	r26, Y+2	; 0x02
    56fa:	b9 81       	ldd	r27, Y+1	; 0x01
    56fc:	ce 0f       	add	r28, r30
    56fe:	d1 1d       	adc	r29, r1
    5700:	0f b6       	in	r0, 0x3f	; 63
    5702:	f8 94       	cli
    5704:	de bf       	out	0x3e, r29	; 62
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	cd bf       	out	0x3d, r28	; 61
    570a:	ed 01       	movw	r28, r26
    570c:	08 95       	ret

0000570e <_exit>:
    570e:	f8 94       	cli

00005710 <__stop_program>:
    5710:	ff cf       	rjmp	.-2      	; 0x5710 <__stop_program>
