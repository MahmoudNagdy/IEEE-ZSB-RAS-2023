
DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000519a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  0000519a  0000520e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00004620  00000000  00000000  000052b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001604  00000000  00000000  000098d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000aed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000cdd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000dcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000ea6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ebcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ee59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f627  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <main>
      7a:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 94 28 	jmp	0x5128	; 0x5128 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab ef       	ldi	r26, 0xFB	; 251
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 94 28 	jmp	0x5128	; 0x5128 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b ef       	ldi	r24, 0xFB	; 251
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 a0 28 	jmp	0x5140	; 0x5140 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 a4 28 	jmp	0x5148	; 0x5148 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 c0 28 	jmp	0x5180	; 0x5180 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Stepper_Init>:

#include "Stepper_Config.h";
#include "Stepper_Private.h";


void Stepper_Init(){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	41 e0       	ldi	r20, 0x01	; 1
     b4e:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	62 e0       	ldi	r22, 0x02	; 2
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	63 e0       	ldi	r22, 0x03	; 3
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
}
     b66:	cf 91       	pop	r28
     b68:	df 91       	pop	r29
     b6a:	08 95       	ret

00000b6c <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	00 d0       	rcall	.+0      	; 0xb72 <ActivatePins1+0x6>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <ActivatePins1+0x8>
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	6a 83       	std	Y+2, r22	; 0x02
     b7c:	4b 83       	std	Y+3, r20	; 0x03
     b7e:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
     b80:	83 e0       	ldi	r24, 0x03	; 3
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	49 81       	ldd	r20, Y+1	; 0x01
     b86:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	4a 81       	ldd	r20, Y+2	; 0x02
     b90:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	62 e0       	ldi	r22, 0x02	; 2
     b98:	4b 81       	ldd	r20, Y+3	; 0x03
     b9a:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	63 e0       	ldi	r22, 0x03	; 3
     ba2:	4c 81       	ldd	r20, Y+4	; 0x04
     ba4:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
}
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ActivatePins2+0x6>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <ActivatePins2+0x8>
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	6a 83       	std	Y+2, r22	; 0x02
     bc6:	4b 83       	std	Y+3, r20	; 0x03
     bc8:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	63 e0       	ldi	r22, 0x03	; 3
     bce:	4c 81       	ldd	r20, Y+4	; 0x04
     bd0:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	62 e0       	ldi	r22, 0x02	; 2
     bd8:	4b 81       	ldd	r20, Y+3	; 0x03
     bda:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	4a 81       	ldd	r20, Y+2	; 0x02
     be4:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	49 81       	ldd	r20, Y+1	; 0x01
     bee:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
}
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	29 97       	sbiw	r28, 0x09	; 9
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	9a 83       	std	Y+2, r25	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
     c1a:	29 81       	ldd	r18, Y+1	; 0x01
     c1c:	3a 81       	ldd	r19, Y+2	; 0x02
     c1e:	39 87       	std	Y+9, r19	; 0x09
     c20:	28 87       	std	Y+8, r18	; 0x08
     c22:	88 85       	ldd	r24, Y+8	; 0x08
     c24:	99 85       	ldd	r25, Y+9	; 0x09
     c26:	8a 35       	cpi	r24, 0x5A	; 90
     c28:	91 05       	cpc	r25, r1
     c2a:	31 f0       	breq	.+12     	; 0xc38 <SelectStepAngle+0x38>
     c2c:	28 85       	ldd	r18, Y+8	; 0x08
     c2e:	39 85       	ldd	r19, Y+9	; 0x09
     c30:	24 3b       	cpi	r18, 0xB4	; 180
     c32:	31 05       	cpc	r19, r1
     c34:	21 f1       	breq	.+72     	; 0xc7e <SelectStepAngle+0x7e>
     c36:	3f c0       	rjmp	.+126    	; 0xcb6 <SelectStepAngle+0xb6>
		case 90:
			switch(Direction){
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	3f 83       	std	Y+7, r19	; 0x07
     c40:	2e 83       	std	Y+6, r18	; 0x06
     c42:	8e 81       	ldd	r24, Y+6	; 0x06
     c44:	9f 81       	ldd	r25, Y+7	; 0x07
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	31 f0       	breq	.+12     	; 0xc56 <SelectStepAngle+0x56>
     c4a:	2e 81       	ldd	r18, Y+6	; 0x06
     c4c:	3f 81       	ldd	r19, Y+7	; 0x07
     c4e:	21 30       	cpi	r18, 0x01	; 1
     c50:	31 05       	cpc	r19, r1
     c52:	41 f0       	breq	.+16     	; 0xc64 <SelectStepAngle+0x64>
     c54:	30 c0       	rjmp	.+96     	; 0xcb6 <SelectStepAngle+0xb6>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <ActivatePins1>
     c62:	29 c0       	rjmp	.+82     	; 0xcb6 <SelectStepAngle+0xb6>
					break;

				case CCW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_LOW, DIO_u8_LOW);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <ActivatePins1>
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ActivatePins2>
     c7c:	1c c0       	rjmp	.+56     	; 0xcb6 <SelectStepAngle+0xb6>
					break;
			}
			break;

			case 180:
				switch(Direction){
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	3d 83       	std	Y+5, r19	; 0x05
     c86:	2c 83       	std	Y+4, r18	; 0x04
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	9d 81       	ldd	r25, Y+5	; 0x05
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	31 f0       	breq	.+12     	; 0xc9c <SelectStepAngle+0x9c>
     c90:	2c 81       	ldd	r18, Y+4	; 0x04
     c92:	3d 81       	ldd	r19, Y+5	; 0x05
     c94:	21 30       	cpi	r18, 0x01	; 1
     c96:	31 05       	cpc	r19, r1
     c98:	41 f0       	breq	.+16     	; 0xcaa <SelectStepAngle+0xaa>
     c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <SelectStepAngle+0xb6>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ActivatePins2>
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <SelectStepAngle+0xb6>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <ActivatePins1>
						break;
				}
				break;
	}
}
     cb6:	29 96       	adiw	r28, 0x09	; 9
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
     cd0:	ea e3       	ldi	r30, 0x3A	; 58
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
     cd6:	e7 e3       	ldi	r30, 0x37	; 55
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
     cdc:	e4 e3       	ldi	r30, 0x34	; 52
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
     ce4:	e1 e3       	ldi	r30, 0x31	; 49
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 e3       	ldi	r24, 0x30	; 48
     cea:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
     cec:	eb e3       	ldi	r30, 0x3B	; 59
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
     cf2:	e8 e3       	ldi	r30, 0x38	; 56
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
     cf8:	e5 e3       	ldi	r30, 0x35	; 53
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
     cfe:	e2 e3       	ldi	r30, 0x32	; 50
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	10 82       	st	Z, r1

}
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	2e 97       	sbiw	r28, 0x0e	; 14
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	8a 83       	std	Y+2, r24	; 0x02
     d20:	6b 83       	std	Y+3, r22	; 0x03
     d22:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <DIO_u8SetPinDirection+0x26>
     d2e:	0c c1       	rjmp	.+536    	; 0xf48 <DIO_u8SetPinDirection+0x23e>
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <DIO_u8SetPinDirection+0x2e>
     d36:	08 c1       	rjmp	.+528    	; 0xf48 <DIO_u8SetPinDirection+0x23e>
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	21 f0       	breq	.+8      	; 0xd46 <DIO_u8SetPinDirection+0x3c>
     d3e:	8c 81       	ldd	r24, Y+4	; 0x04
     d40:	88 23       	and	r24, r24
     d42:	09 f0       	breq	.+2      	; 0xd46 <DIO_u8SetPinDirection+0x3c>
     d44:	01 c1       	rjmp	.+514    	; 0xf48 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3e 87       	std	Y+14, r19	; 0x0e
     d4e:	2d 87       	std	Y+13, r18	; 0x0d
     d50:	8d 85       	ldd	r24, Y+13	; 0x0d
     d52:	9e 85       	ldd	r25, Y+14	; 0x0e
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	91 05       	cpc	r25, r1
     d58:	09 f4       	brne	.+2      	; 0xd5c <DIO_u8SetPinDirection+0x52>
     d5a:	4f c0       	rjmp	.+158    	; 0xdfa <DIO_u8SetPinDirection+0xf0>
     d5c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d5e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	2c f4       	brge	.+10     	; 0xd70 <DIO_u8SetPinDirection+0x66>
     d66:	8d 85       	ldd	r24, Y+13	; 0x0d
     d68:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	71 f0       	breq	.+28     	; 0xd8a <DIO_u8SetPinDirection+0x80>
     d6e:	ed c0       	rjmp	.+474    	; 0xf4a <DIO_u8SetPinDirection+0x240>
     d70:	2d 85       	ldd	r18, Y+13	; 0x0d
     d72:	3e 85       	ldd	r19, Y+14	; 0x0e
     d74:	22 30       	cpi	r18, 0x02	; 2
     d76:	31 05       	cpc	r19, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <DIO_u8SetPinDirection+0x72>
     d7a:	77 c0       	rjmp	.+238    	; 0xe6a <DIO_u8SetPinDirection+0x160>
     d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	09 f4       	brne	.+2      	; 0xd88 <DIO_u8SetPinDirection+0x7e>
     d86:	a9 c0       	rjmp	.+338    	; 0xeda <DIO_u8SetPinDirection+0x1d0>
     d88:	e0 c0       	rjmp	.+448    	; 0xf4a <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	3c 87       	std	Y+12, r19	; 0x0c
     d92:	2b 87       	std	Y+11, r18	; 0x0b
     d94:	8b 85       	ldd	r24, Y+11	; 0x0b
     d96:	9c 85       	ldd	r25, Y+12	; 0x0c
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	d1 f0       	breq	.+52     	; 0xdd0 <DIO_u8SetPinDirection+0xc6>
     d9c:	2b 85       	ldd	r18, Y+11	; 0x0b
     d9e:	3c 85       	ldd	r19, Y+12	; 0x0c
     da0:	21 30       	cpi	r18, 0x01	; 1
     da2:	31 05       	cpc	r19, r1
     da4:	09 f0       	breq	.+2      	; 0xda8 <DIO_u8SetPinDirection+0x9e>
     da6:	d1 c0       	rjmp	.+418    	; 0xf4a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     da8:	aa e3       	ldi	r26, 0x3A	; 58
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e3       	ldi	r30, 0x3A	; 58
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_u8SetPinDirection+0xbc>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_u8SetPinDirection+0xb8>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	bd c0       	rjmp	.+378    	; 0xf4a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     dd0:	aa e3       	ldi	r26, 0x3A	; 58
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ea e3       	ldi	r30, 0x3A	; 58
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_u8SetPinDirection+0xe4>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_u8SetPinDirection+0xe0>
     df2:	80 95       	com	r24
     df4:	84 23       	and	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	a8 c0       	rjmp	.+336    	; 0xf4a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	3a 87       	std	Y+10, r19	; 0x0a
     e02:	29 87       	std	Y+9, r18	; 0x09
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	d1 f0       	breq	.+52     	; 0xe40 <DIO_u8SetPinDirection+0x136>
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	21 30       	cpi	r18, 0x01	; 1
     e12:	31 05       	cpc	r19, r1
     e14:	09 f0       	breq	.+2      	; 0xe18 <DIO_u8SetPinDirection+0x10e>
     e16:	99 c0       	rjmp	.+306    	; 0xf4a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     e18:	a7 e3       	ldi	r26, 0x37	; 55
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e7 e3       	ldi	r30, 0x37	; 55
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_u8SetPinDirection+0x12c>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_u8SetPinDirection+0x128>
     e3a:	84 2b       	or	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	85 c0       	rjmp	.+266    	; 0xf4a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     e40:	a7 e3       	ldi	r26, 0x37	; 55
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e7 e3       	ldi	r30, 0x37	; 55
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_u8SetPinDirection+0x154>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_u8SetPinDirection+0x150>
     e62:	80 95       	com	r24
     e64:	84 23       	and	r24, r20
     e66:	8c 93       	st	X, r24
     e68:	70 c0       	rjmp	.+224    	; 0xf4a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	38 87       	std	Y+8, r19	; 0x08
     e72:	2f 83       	std	Y+7, r18	; 0x07
     e74:	8f 81       	ldd	r24, Y+7	; 0x07
     e76:	98 85       	ldd	r25, Y+8	; 0x08
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	d1 f0       	breq	.+52     	; 0xeb0 <DIO_u8SetPinDirection+0x1a6>
     e7c:	2f 81       	ldd	r18, Y+7	; 0x07
     e7e:	38 85       	ldd	r19, Y+8	; 0x08
     e80:	21 30       	cpi	r18, 0x01	; 1
     e82:	31 05       	cpc	r19, r1
     e84:	09 f0       	breq	.+2      	; 0xe88 <DIO_u8SetPinDirection+0x17e>
     e86:	61 c0       	rjmp	.+194    	; 0xf4a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     e88:	a4 e3       	ldi	r26, 0x34	; 52
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e4 e3       	ldi	r30, 0x34	; 52
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_u8SetPinDirection+0x19c>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_u8SetPinDirection+0x198>
     eaa:	84 2b       	or	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	4d c0       	rjmp	.+154    	; 0xf4a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     eb0:	a4 e3       	ldi	r26, 0x34	; 52
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e4 e3       	ldi	r30, 0x34	; 52
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_u8SetPinDirection+0x1c4>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_u8SetPinDirection+0x1c0>
     ed2:	80 95       	com	r24
     ed4:	84 23       	and	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	38 c0       	rjmp	.+112    	; 0xf4a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	3e 83       	std	Y+6, r19	; 0x06
     ee2:	2d 83       	std	Y+5, r18	; 0x05
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	c9 f0       	breq	.+50     	; 0xf1e <DIO_u8SetPinDirection+0x214>
     eec:	2d 81       	ldd	r18, Y+5	; 0x05
     eee:	3e 81       	ldd	r19, Y+6	; 0x06
     ef0:	21 30       	cpi	r18, 0x01	; 1
     ef2:	31 05       	cpc	r19, r1
     ef4:	51 f5       	brne	.+84     	; 0xf4a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     ef6:	a1 e3       	ldi	r26, 0x31	; 49
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <DIO_u8SetPinDirection+0x20a>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <DIO_u8SetPinDirection+0x206>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	16 c0       	rjmp	.+44     	; 0xf4a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     f1e:	a1 e3       	ldi	r26, 0x31	; 49
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e1 e3       	ldi	r30, 0x31	; 49
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_u8SetPinDirection+0x232>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_u8SetPinDirection+0x22e>
     f40:	80 95       	com	r24
     f42:	84 23       	and	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f48:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4c:	2e 96       	adiw	r28, 0x0e	; 14
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	2f 97       	sbiw	r28, 0x0f	; 15
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	8b 83       	std	Y+3, r24	; 0x03
     f74:	6c 83       	std	Y+4, r22	; 0x04
     f76:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	84 30       	cpi	r24, 0x04	; 4
     f80:	08 f0       	brcs	.+2      	; 0xf84 <DIO_u8SetPinValue+0x26>
     f82:	13 c1       	rjmp	.+550    	; 0x11aa <DIO_u8SetPinValue+0x24c>
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	88 30       	cpi	r24, 0x08	; 8
     f88:	08 f0       	brcs	.+2      	; 0xf8c <DIO_u8SetPinValue+0x2e>
     f8a:	0f c1       	rjmp	.+542    	; 0x11aa <DIO_u8SetPinValue+0x24c>
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	88 23       	and	r24, r24
     f90:	21 f0       	breq	.+8      	; 0xf9a <DIO_u8SetPinValue+0x3c>
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	09 f0       	breq	.+2      	; 0xf9a <DIO_u8SetPinValue+0x3c>
     f98:	08 c1       	rjmp	.+528    	; 0x11aa <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3f 87       	std	Y+15, r19	; 0x0f
     fa2:	2e 87       	std	Y+14, r18	; 0x0e
     fa4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa6:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	91 05       	cpc	r25, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <DIO_u8SetPinValue+0x52>
     fae:	50 c0       	rjmp	.+160    	; 0x1050 <DIO_u8SetPinValue+0xf2>
     fb0:	2e 85       	ldd	r18, Y+14	; 0x0e
     fb2:	3f 85       	ldd	r19, Y+15	; 0x0f
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <DIO_u8SetPinValue+0x66>
     fba:	8e 85       	ldd	r24, Y+14	; 0x0e
     fbc:	9f 85       	ldd	r25, Y+15	; 0x0f
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	71 f0       	breq	.+28     	; 0xfde <DIO_u8SetPinValue+0x80>
     fc2:	f4 c0       	rjmp	.+488    	; 0x11ac <DIO_u8SetPinValue+0x24e>
     fc4:	2e 85       	ldd	r18, Y+14	; 0x0e
     fc6:	3f 85       	ldd	r19, Y+15	; 0x0f
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <DIO_u8SetPinValue+0x72>
     fce:	79 c0       	rjmp	.+242    	; 0x10c2 <DIO_u8SetPinValue+0x164>
     fd0:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd2:	9f 85       	ldd	r25, Y+15	; 0x0f
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	91 05       	cpc	r25, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <DIO_u8SetPinValue+0x7e>
     fda:	ad c0       	rjmp	.+346    	; 0x1136 <DIO_u8SetPinValue+0x1d8>
     fdc:	e7 c0       	rjmp	.+462    	; 0x11ac <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3d 87       	std	Y+13, r19	; 0x0d
     fe6:	2c 87       	std	Y+12, r18	; 0x0c
     fe8:	8c 85       	ldd	r24, Y+12	; 0x0c
     fea:	9d 85       	ldd	r25, Y+13	; 0x0d
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	c9 f0       	breq	.+50     	; 0x1022 <DIO_u8SetPinValue+0xc4>
     ff0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff2:	3d 85       	ldd	r19, Y+13	; 0x0d
     ff4:	21 30       	cpi	r18, 0x01	; 1
     ff6:	31 05       	cpc	r19, r1
     ff8:	49 f5       	brne	.+82     	; 0x104c <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
     ffa:	ab e3       	ldi	r26, 0x3B	; 59
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	eb e3       	ldi	r30, 0x3B	; 59
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_u8SetPinValue+0xba>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_u8SetPinValue+0xb6>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	c5 c0       	rjmp	.+394    	; 0x11ac <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1022:	ab e3       	ldi	r26, 0x3B	; 59
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	eb e3       	ldi	r30, 0x3B	; 59
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_u8SetPinValue+0xe2>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_u8SetPinValue+0xde>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	b0 c0       	rjmp	.+352    	; 0x11ac <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    104c:	1a 82       	std	Y+2, r1	; 0x02
    104e:	ae c0       	rjmp	.+348    	; 0x11ac <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3b 87       	std	Y+11, r19	; 0x0b
    1058:	2a 87       	std	Y+10, r18	; 0x0a
    105a:	8a 85       	ldd	r24, Y+10	; 0x0a
    105c:	9b 85       	ldd	r25, Y+11	; 0x0b
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	c9 f0       	breq	.+50     	; 0x1094 <DIO_u8SetPinValue+0x136>
    1062:	2a 85       	ldd	r18, Y+10	; 0x0a
    1064:	3b 85       	ldd	r19, Y+11	; 0x0b
    1066:	21 30       	cpi	r18, 0x01	; 1
    1068:	31 05       	cpc	r19, r1
    106a:	49 f5       	brne	.+82     	; 0x10be <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    106c:	a8 e3       	ldi	r26, 0x38	; 56
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e3       	ldi	r30, 0x38	; 56
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_u8SetPinValue+0x12c>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_u8SetPinValue+0x128>
    108e:	84 2b       	or	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	8c c0       	rjmp	.+280    	; 0x11ac <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1094:	a8 e3       	ldi	r26, 0x38	; 56
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e8 e3       	ldi	r30, 0x38	; 56
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_u8SetPinValue+0x154>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_u8SetPinValue+0x150>
    10b6:	80 95       	com	r24
    10b8:	84 23       	and	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	77 c0       	rjmp	.+238    	; 0x11ac <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    10be:	1a 82       	std	Y+2, r1	; 0x02
    10c0:	75 c0       	rjmp	.+234    	; 0x11ac <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	39 87       	std	Y+9, r19	; 0x09
    10ca:	28 87       	std	Y+8, r18	; 0x08
    10cc:	88 85       	ldd	r24, Y+8	; 0x08
    10ce:	99 85       	ldd	r25, Y+9	; 0x09
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	31 f0       	breq	.+12     	; 0x10e0 <DIO_u8SetPinValue+0x182>
    10d4:	28 85       	ldd	r18, Y+8	; 0x08
    10d6:	39 85       	ldd	r19, Y+9	; 0x09
    10d8:	21 30       	cpi	r18, 0x01	; 1
    10da:	31 05       	cpc	r19, r1
    10dc:	b1 f0       	breq	.+44     	; 0x110a <DIO_u8SetPinValue+0x1ac>
    10de:	29 c0       	rjmp	.+82     	; 0x1132 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    10e0:	a5 e3       	ldi	r26, 0x35	; 53
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e3       	ldi	r30, 0x35	; 53
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_u8SetPinValue+0x1a0>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_u8SetPinValue+0x19c>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	51 c0       	rjmp	.+162    	; 0x11ac <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    110a:	a5 e3       	ldi	r26, 0x35	; 53
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e3       	ldi	r30, 0x35	; 53
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_u8SetPinValue+0x1ca>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_u8SetPinValue+0x1c6>
    112c:	84 2b       	or	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	3d c0       	rjmp	.+122    	; 0x11ac <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1132:	1a 82       	std	Y+2, r1	; 0x02
    1134:	3b c0       	rjmp	.+118    	; 0x11ac <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3f 83       	std	Y+7, r19	; 0x07
    113e:	2e 83       	std	Y+6, r18	; 0x06
    1140:	8e 81       	ldd	r24, Y+6	; 0x06
    1142:	9f 81       	ldd	r25, Y+7	; 0x07
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	31 f0       	breq	.+12     	; 0x1154 <DIO_u8SetPinValue+0x1f6>
    1148:	2e 81       	ldd	r18, Y+6	; 0x06
    114a:	3f 81       	ldd	r19, Y+7	; 0x07
    114c:	21 30       	cpi	r18, 0x01	; 1
    114e:	31 05       	cpc	r19, r1
    1150:	b1 f0       	breq	.+44     	; 0x117e <DIO_u8SetPinValue+0x220>
    1152:	29 c0       	rjmp	.+82     	; 0x11a6 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1154:	a5 e3       	ldi	r26, 0x35	; 53
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e3       	ldi	r30, 0x35	; 53
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8SetPinValue+0x214>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8SetPinValue+0x210>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	17 c0       	rjmp	.+46     	; 0x11ac <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    117e:	a2 e3       	ldi	r26, 0x32	; 50
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_u8SetPinValue+0x23e>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_u8SetPinValue+0x23a>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    11a6:	1a 82       	std	Y+2, r1	; 0x02
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    11aa:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11ae:	2f 96       	adiw	r28, 0x0f	; 15
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	28 97       	sbiw	r28, 0x08	; 8
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	8b 83       	std	Y+3, r24	; 0x03
    11d6:	6c 83       	std	Y+4, r22	; 0x04
    11d8:	5e 83       	std	Y+6, r21	; 0x06
    11da:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	84 30       	cpi	r24, 0x04	; 4
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <DIO_u8GetPinValue+0x28>
    11e6:	9f c0       	rjmp	.+318    	; 0x1326 <DIO_u8GetPinValue+0x166>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	88 30       	cpi	r24, 0x08	; 8
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <DIO_u8GetPinValue+0x30>
    11ee:	9b c0       	rjmp	.+310    	; 0x1326 <DIO_u8GetPinValue+0x166>
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	9e 81       	ldd	r25, Y+6	; 0x06
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	09 f4       	brne	.+2      	; 0x11fa <DIO_u8GetPinValue+0x3a>
    11f8:	96 c0       	rjmp	.+300    	; 0x1326 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	38 87       	std	Y+8, r19	; 0x08
    1202:	2f 83       	std	Y+7, r18	; 0x07
    1204:	4f 81       	ldd	r20, Y+7	; 0x07
    1206:	58 85       	ldd	r21, Y+8	; 0x08
    1208:	41 30       	cpi	r20, 0x01	; 1
    120a:	51 05       	cpc	r21, r1
    120c:	a9 f1       	breq	.+106    	; 0x1278 <DIO_u8GetPinValue+0xb8>
    120e:	8f 81       	ldd	r24, Y+7	; 0x07
    1210:	98 85       	ldd	r25, Y+8	; 0x08
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	34 f4       	brge	.+12     	; 0x1224 <DIO_u8GetPinValue+0x64>
    1218:	2f 81       	ldd	r18, Y+7	; 0x07
    121a:	38 85       	ldd	r19, Y+8	; 0x08
    121c:	21 15       	cp	r18, r1
    121e:	31 05       	cpc	r19, r1
    1220:	71 f0       	breq	.+28     	; 0x123e <DIO_u8GetPinValue+0x7e>
    1222:	82 c0       	rjmp	.+260    	; 0x1328 <DIO_u8GetPinValue+0x168>
    1224:	4f 81       	ldd	r20, Y+7	; 0x07
    1226:	58 85       	ldd	r21, Y+8	; 0x08
    1228:	42 30       	cpi	r20, 0x02	; 2
    122a:	51 05       	cpc	r21, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <DIO_u8GetPinValue+0x70>
    122e:	41 c0       	rjmp	.+130    	; 0x12b2 <DIO_u8GetPinValue+0xf2>
    1230:	8f 81       	ldd	r24, Y+7	; 0x07
    1232:	98 85       	ldd	r25, Y+8	; 0x08
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <DIO_u8GetPinValue+0x7c>
    123a:	58 c0       	rjmp	.+176    	; 0x12ec <DIO_u8GetPinValue+0x12c>
    123c:	75 c0       	rjmp	.+234    	; 0x1328 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    123e:	e9 e3       	ldi	r30, 0x39	; 57
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_u8GetPinValue+0x96>
    1252:	55 95       	asr	r21
    1254:	47 95       	ror	r20
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_u8GetPinValue+0x92>
    125a:	ca 01       	movw	r24, r20
    125c:	81 70       	andi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	88 23       	and	r24, r24
    1264:	21 f4       	brne	.+8      	; 0x126e <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1266:	ed 81       	ldd	r30, Y+5	; 0x05
    1268:	fe 81       	ldd	r31, Y+6	; 0x06
    126a:	10 82       	st	Z, r1
    126c:	5d c0       	rjmp	.+186    	; 0x1328 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    126e:	ed 81       	ldd	r30, Y+5	; 0x05
    1270:	fe 81       	ldd	r31, Y+6	; 0x06
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	80 83       	st	Z, r24
    1276:	58 c0       	rjmp	.+176    	; 0x1328 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1278:	e6 e3       	ldi	r30, 0x36	; 54
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	8c 81       	ldd	r24, Y+4	; 0x04
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_u8GetPinValue+0xd0>
    128c:	55 95       	asr	r21
    128e:	47 95       	ror	r20
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_u8GetPinValue+0xcc>
    1294:	ca 01       	movw	r24, r20
    1296:	81 70       	andi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	88 23       	and	r24, r24
    129e:	21 f4       	brne	.+8      	; 0x12a8 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12a0:	ed 81       	ldd	r30, Y+5	; 0x05
    12a2:	fe 81       	ldd	r31, Y+6	; 0x06
    12a4:	10 82       	st	Z, r1
    12a6:	40 c0       	rjmp	.+128    	; 0x1328 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12a8:	ed 81       	ldd	r30, Y+5	; 0x05
    12aa:	fe 81       	ldd	r31, Y+6	; 0x06
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 83       	st	Z, r24
    12b0:	3b c0       	rjmp	.+118    	; 0x1328 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    12b2:	e3 e3       	ldi	r30, 0x33	; 51
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a9 01       	movw	r20, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_u8GetPinValue+0x10a>
    12c6:	55 95       	asr	r21
    12c8:	47 95       	ror	r20
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_u8GetPinValue+0x106>
    12ce:	ca 01       	movw	r24, r20
    12d0:	81 70       	andi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	88 23       	and	r24, r24
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12da:	ed 81       	ldd	r30, Y+5	; 0x05
    12dc:	fe 81       	ldd	r31, Y+6	; 0x06
    12de:	10 82       	st	Z, r1
    12e0:	23 c0       	rjmp	.+70     	; 0x1328 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12e2:	ed 81       	ldd	r30, Y+5	; 0x05
    12e4:	fe 81       	ldd	r31, Y+6	; 0x06
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 83       	st	Z, r24
    12ea:	1e c0       	rjmp	.+60     	; 0x1328 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    12ec:	e0 e3       	ldi	r30, 0x30	; 48
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a9 01       	movw	r20, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_u8GetPinValue+0x144>
    1300:	55 95       	asr	r21
    1302:	47 95       	ror	r20
    1304:	8a 95       	dec	r24
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_u8GetPinValue+0x140>
    1308:	ca 01       	movw	r24, r20
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	88 23       	and	r24, r24
    1312:	21 f4       	brne	.+8      	; 0x131c <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1314:	ed 81       	ldd	r30, Y+5	; 0x05
    1316:	fe 81       	ldd	r31, Y+6	; 0x06
    1318:	10 82       	st	Z, r1
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    131c:	ed 81       	ldd	r30, Y+5	; 0x05
    131e:	fe 81       	ldd	r31, Y+6	; 0x06
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	80 83       	st	Z, r24
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1326:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
}
    132a:	28 96       	adiw	r28, 0x08	; 8
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	2d 97       	sbiw	r28, 0x0d	; 13
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3c 87       	std	Y+12, r19	; 0x0c
    135c:	2b 87       	std	Y+11, r18	; 0x0b
    135e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1360:	9c 85       	ldd	r25, Y+12	; 0x0c
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	91 05       	cpc	r25, r1
    1366:	71 f1       	breq	.+92     	; 0x13c4 <DIO_u8SetPortDirection+0x88>
    1368:	2b 85       	ldd	r18, Y+11	; 0x0b
    136a:	3c 85       	ldd	r19, Y+12	; 0x0c
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	2c f4       	brge	.+10     	; 0x137c <DIO_u8SetPortDirection+0x40>
    1372:	8b 85       	ldd	r24, Y+11	; 0x0b
    1374:	9c 85       	ldd	r25, Y+12	; 0x0c
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	69 f0       	breq	.+26     	; 0x1394 <DIO_u8SetPortDirection+0x58>
    137a:	6b c0       	rjmp	.+214    	; 0x1452 <DIO_u8SetPortDirection+0x116>
    137c:	2b 85       	ldd	r18, Y+11	; 0x0b
    137e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	b9 f1       	breq	.+110    	; 0x13f4 <DIO_u8SetPortDirection+0xb8>
    1386:	8b 85       	ldd	r24, Y+11	; 0x0b
    1388:	9c 85       	ldd	r25, Y+12	; 0x0c
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	91 05       	cpc	r25, r1
    138e:	09 f4       	brne	.+2      	; 0x1392 <DIO_u8SetPortDirection+0x56>
    1390:	49 c0       	rjmp	.+146    	; 0x1424 <DIO_u8SetPortDirection+0xe8>
    1392:	5f c0       	rjmp	.+190    	; 0x1452 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3a 87       	std	Y+10, r19	; 0x0a
    139c:	29 87       	std	Y+9, r18	; 0x09
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <DIO_u8SetPortDirection+0x76>
    13a6:	29 85       	ldd	r18, Y+9	; 0x09
    13a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    13aa:	21 30       	cpi	r18, 0x01	; 1
    13ac:	31 05       	cpc	r19, r1
    13ae:	29 f0       	breq	.+10     	; 0x13ba <DIO_u8SetPortDirection+0x7e>
    13b0:	50 c0       	rjmp	.+160    	; 0x1452 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    13b2:	ea e3       	ldi	r30, 0x3A	; 58
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	10 82       	st	Z, r1
    13b8:	4c c0       	rjmp	.+152    	; 0x1452 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    13ba:	ea e3       	ldi	r30, 0x3A	; 58
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
    13c2:	47 c0       	rjmp	.+142    	; 0x1452 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	38 87       	std	Y+8, r19	; 0x08
    13cc:	2f 83       	std	Y+7, r18	; 0x07
    13ce:	8f 81       	ldd	r24, Y+7	; 0x07
    13d0:	98 85       	ldd	r25, Y+8	; 0x08
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <DIO_u8SetPortDirection+0xa6>
    13d6:	2f 81       	ldd	r18, Y+7	; 0x07
    13d8:	38 85       	ldd	r19, Y+8	; 0x08
    13da:	21 30       	cpi	r18, 0x01	; 1
    13dc:	31 05       	cpc	r19, r1
    13de:	29 f0       	breq	.+10     	; 0x13ea <DIO_u8SetPortDirection+0xae>
    13e0:	38 c0       	rjmp	.+112    	; 0x1452 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    13e2:	e7 e3       	ldi	r30, 0x37	; 55
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	10 82       	st	Z, r1
    13e8:	34 c0       	rjmp	.+104    	; 0x1452 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    13ea:	e7 e3       	ldi	r30, 0x37	; 55
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	80 83       	st	Z, r24
    13f2:	2f c0       	rjmp	.+94     	; 0x1452 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3e 83       	std	Y+6, r19	; 0x06
    13fc:	2d 83       	std	Y+5, r18	; 0x05
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	31 f0       	breq	.+12     	; 0x1412 <DIO_u8SetPortDirection+0xd6>
    1406:	2d 81       	ldd	r18, Y+5	; 0x05
    1408:	3e 81       	ldd	r19, Y+6	; 0x06
    140a:	21 30       	cpi	r18, 0x01	; 1
    140c:	31 05       	cpc	r19, r1
    140e:	29 f0       	breq	.+10     	; 0x141a <DIO_u8SetPortDirection+0xde>
    1410:	20 c0       	rjmp	.+64     	; 0x1452 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1412:	e4 e3       	ldi	r30, 0x34	; 52
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	10 82       	st	Z, r1
    1418:	1c c0       	rjmp	.+56     	; 0x1452 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    141a:	e4 e3       	ldi	r30, 0x34	; 52
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	80 83       	st	Z, r24
    1422:	17 c0       	rjmp	.+46     	; 0x1452 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3c 83       	std	Y+4, r19	; 0x04
    142c:	2b 83       	std	Y+3, r18	; 0x03
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	31 f0       	breq	.+12     	; 0x1442 <DIO_u8SetPortDirection+0x106>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	21 30       	cpi	r18, 0x01	; 1
    143c:	31 05       	cpc	r19, r1
    143e:	29 f0       	breq	.+10     	; 0x144a <DIO_u8SetPortDirection+0x10e>
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    1442:	e1 e3       	ldi	r30, 0x31	; 49
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	10 82       	st	Z, r1
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    144a:	e1 e3       	ldi	r30, 0x31	; 49
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    1452:	2d 96       	adiw	r28, 0x0d	; 13
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	2d 97       	sbiw	r28, 0x0d	; 13
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	8a 83       	std	Y+2, r24	; 0x02
    147a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	08 f0       	brcs	.+2      	; 0x1488 <DIO_u8SetPortValue+0x24>
    1486:	80 c0       	rjmp	.+256    	; 0x1588 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3d 87       	std	Y+13, r19	; 0x0d
    1490:	2c 87       	std	Y+12, r18	; 0x0c
    1492:	8c 85       	ldd	r24, Y+12	; 0x0c
    1494:	9d 85       	ldd	r25, Y+13	; 0x0d
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 05       	cpc	r25, r1
    149a:	71 f1       	breq	.+92     	; 0x14f8 <DIO_u8SetPortValue+0x94>
    149c:	2c 85       	ldd	r18, Y+12	; 0x0c
    149e:	3d 85       	ldd	r19, Y+13	; 0x0d
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <DIO_u8SetPortValue+0x4c>
    14a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    14a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	69 f0       	breq	.+26     	; 0x14c8 <DIO_u8SetPortValue+0x64>
    14ae:	6d c0       	rjmp	.+218    	; 0x158a <DIO_u8SetPortValue+0x126>
    14b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	b9 f1       	breq	.+110    	; 0x1528 <DIO_u8SetPortValue+0xc4>
    14ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    14bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <DIO_u8SetPortValue+0x62>
    14c4:	49 c0       	rjmp	.+146    	; 0x1558 <DIO_u8SetPortValue+0xf4>
    14c6:	61 c0       	rjmp	.+194    	; 0x158a <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	3b 87       	std	Y+11, r19	; 0x0b
    14d0:	2a 87       	std	Y+10, r18	; 0x0a
    14d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    14d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	31 f0       	breq	.+12     	; 0x14e6 <DIO_u8SetPortValue+0x82>
    14da:	2a 85       	ldd	r18, Y+10	; 0x0a
    14dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    14de:	21 30       	cpi	r18, 0x01	; 1
    14e0:	31 05       	cpc	r19, r1
    14e2:	29 f0       	breq	.+10     	; 0x14ee <DIO_u8SetPortValue+0x8a>
    14e4:	52 c0       	rjmp	.+164    	; 0x158a <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    14e6:	eb e3       	ldi	r30, 0x3B	; 59
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	10 82       	st	Z, r1
    14ec:	4e c0       	rjmp	.+156    	; 0x158a <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    14ee:	eb e3       	ldi	r30, 0x3B	; 59
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	80 83       	st	Z, r24
    14f6:	49 c0       	rjmp	.+146    	; 0x158a <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	39 87       	std	Y+9, r19	; 0x09
    1500:	28 87       	std	Y+8, r18	; 0x08
    1502:	88 85       	ldd	r24, Y+8	; 0x08
    1504:	99 85       	ldd	r25, Y+9	; 0x09
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	31 f0       	breq	.+12     	; 0x1516 <DIO_u8SetPortValue+0xb2>
    150a:	28 85       	ldd	r18, Y+8	; 0x08
    150c:	39 85       	ldd	r19, Y+9	; 0x09
    150e:	21 30       	cpi	r18, 0x01	; 1
    1510:	31 05       	cpc	r19, r1
    1512:	29 f0       	breq	.+10     	; 0x151e <DIO_u8SetPortValue+0xba>
    1514:	3a c0       	rjmp	.+116    	; 0x158a <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    1516:	e8 e3       	ldi	r30, 0x38	; 56
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	10 82       	st	Z, r1
    151c:	36 c0       	rjmp	.+108    	; 0x158a <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    151e:	e8 e3       	ldi	r30, 0x38	; 56
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	80 83       	st	Z, r24
    1526:	31 c0       	rjmp	.+98     	; 0x158a <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3f 83       	std	Y+7, r19	; 0x07
    1530:	2e 83       	std	Y+6, r18	; 0x06
    1532:	8e 81       	ldd	r24, Y+6	; 0x06
    1534:	9f 81       	ldd	r25, Y+7	; 0x07
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	31 f0       	breq	.+12     	; 0x1546 <DIO_u8SetPortValue+0xe2>
    153a:	2e 81       	ldd	r18, Y+6	; 0x06
    153c:	3f 81       	ldd	r19, Y+7	; 0x07
    153e:	21 30       	cpi	r18, 0x01	; 1
    1540:	31 05       	cpc	r19, r1
    1542:	29 f0       	breq	.+10     	; 0x154e <DIO_u8SetPortValue+0xea>
    1544:	22 c0       	rjmp	.+68     	; 0x158a <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	10 82       	st	Z, r1
    154c:	1e c0       	rjmp	.+60     	; 0x158a <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    154e:	e5 e3       	ldi	r30, 0x35	; 53
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	80 83       	st	Z, r24
    1556:	19 c0       	rjmp	.+50     	; 0x158a <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	3d 83       	std	Y+5, r19	; 0x05
    1560:	2c 83       	std	Y+4, r18	; 0x04
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	31 f0       	breq	.+12     	; 0x1576 <DIO_u8SetPortValue+0x112>
    156a:	2c 81       	ldd	r18, Y+4	; 0x04
    156c:	3d 81       	ldd	r19, Y+5	; 0x05
    156e:	21 30       	cpi	r18, 0x01	; 1
    1570:	31 05       	cpc	r19, r1
    1572:	29 f0       	breq	.+10     	; 0x157e <DIO_u8SetPortValue+0x11a>
    1574:	0a c0       	rjmp	.+20     	; 0x158a <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    1576:	e2 e3       	ldi	r30, 0x32	; 50
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
    157c:	06 c0       	rjmp	.+12     	; 0x158a <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    157e:	e2 e3       	ldi	r30, 0x32	; 50
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	80 83       	st	Z, r24
    1586:	01 c0       	rjmp	.+2      	; 0x158a <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1588:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
}
    158c:	2d 96       	adiw	r28, 0x0d	; 13
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <DIO_u8GetPortValue+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <DIO_u8GetPortValue+0x8>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_u8GetPortValue+0xa>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	8a 83       	std	Y+2, r24	; 0x02
    15ae:	7c 83       	std	Y+4, r23	; 0x04
    15b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	08 f0       	brcs	.+2      	; 0x15be <DIO_u8GetPortValue+0x20>
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <DIO_u8GetPortValue+0x9e>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	d9 f1       	breq	.+118    	; 0x163c <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3e 83       	std	Y+6, r19	; 0x06
    15ce:	2d 83       	std	Y+5, r18	; 0x05
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	e1 f0       	breq	.+56     	; 0x1612 <DIO_u8GetPortValue+0x74>
    15da:	2d 81       	ldd	r18, Y+5	; 0x05
    15dc:	3e 81       	ldd	r19, Y+6	; 0x06
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	2c f4       	brge	.+10     	; 0x15ee <DIO_u8GetPortValue+0x50>
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	61 f0       	breq	.+24     	; 0x1604 <DIO_u8GetPortValue+0x66>
    15ec:	28 c0       	rjmp	.+80     	; 0x163e <DIO_u8GetPortValue+0xa0>
    15ee:	2d 81       	ldd	r18, Y+5	; 0x05
    15f0:	3e 81       	ldd	r19, Y+6	; 0x06
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	a1 f0       	breq	.+40     	; 0x1620 <DIO_u8GetPortValue+0x82>
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	b1 f0       	breq	.+44     	; 0x162e <DIO_u8GetPortValue+0x90>
    1602:	1d c0       	rjmp	.+58     	; 0x163e <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1604:	e9 e3       	ldi	r30, 0x39	; 57
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	eb 81       	ldd	r30, Y+3	; 0x03
    160c:	fc 81       	ldd	r31, Y+4	; 0x04
    160e:	80 83       	st	Z, r24
    1610:	16 c0       	rjmp	.+44     	; 0x163e <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1612:	e6 e3       	ldi	r30, 0x36	; 54
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	eb 81       	ldd	r30, Y+3	; 0x03
    161a:	fc 81       	ldd	r31, Y+4	; 0x04
    161c:	80 83       	st	Z, r24
    161e:	0f c0       	rjmp	.+30     	; 0x163e <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1620:	e3 e3       	ldi	r30, 0x33	; 51
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	eb 81       	ldd	r30, Y+3	; 0x03
    1628:	fc 81       	ldd	r31, Y+4	; 0x04
    162a:	80 83       	st	Z, r24
    162c:	08 c0       	rjmp	.+16     	; 0x163e <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    162e:	e0 e3       	ldi	r30, 0x30	; 48
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	eb 81       	ldd	r30, Y+3	; 0x03
    1636:	fc 81       	ldd	r31, Y+4	; 0x04
    1638:	80 83       	st	Z, r24
    163a:	01 c0       	rjmp	.+2      	; 0x163e <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    163c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	26 96       	adiw	r28, 0x06	; 6
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    1652:	8f 92       	push	r8
    1654:	af 92       	push	r10
    1656:	cf 92       	push	r12
    1658:	ef 92       	push	r14
    165a:	0f 93       	push	r16
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	2c 97       	sbiw	r28, 0x0c	; 12
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	6a 83       	std	Y+2, r22	; 0x02
    1674:	4b 83       	std	Y+3, r20	; 0x03
    1676:	2c 83       	std	Y+4, r18	; 0x04
    1678:	0d 83       	std	Y+5, r16	; 0x05
    167a:	ee 82       	std	Y+6, r14	; 0x06
    167c:	cf 82       	std	Y+7, r12	; 0x07
    167e:	a8 86       	std	Y+8, r10	; 0x08
    1680:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	3b 87       	std	Y+11, r19	; 0x0b
    168a:	2a 87       	std	Y+10, r18	; 0x0a
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	91 05       	cpc	r25, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <DIO_u8SetValueToAllPins+0x46>
    1696:	a8 c0       	rjmp	.+336    	; 0x17e8 <DIO_u8SetValueToAllPins+0x196>
    1698:	2a 85       	ldd	r18, Y+10	; 0x0a
    169a:	3b 85       	ldd	r19, Y+11	; 0x0b
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	2c f4       	brge	.+10     	; 0x16ac <DIO_u8SetValueToAllPins+0x5a>
    16a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <DIO_u8SetValueToAllPins+0x74>
    16aa:	50 c2       	rjmp	.+1184   	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
    16ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    16ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <DIO_u8SetValueToAllPins+0x66>
    16b6:	29 c1       	rjmp	.+594    	; 0x190a <DIO_u8SetValueToAllPins+0x2b8>
    16b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	91 05       	cpc	r25, r1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <DIO_u8SetValueToAllPins+0x72>
    16c2:	b4 c1       	rjmp	.+872    	; 0x1a2c <DIO_u8SetValueToAllPins+0x3da>
    16c4:	43 c2       	rjmp	.+1158   	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	41 f4       	brne	.+16     	; 0x16dc <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    16cc:	ab e3       	ldi	r26, 0x3B	; 59
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	eb e3       	ldi	r30, 0x3B	; 59
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	81 60       	ori	r24, 0x01	; 1
    16d8:	8c 93       	st	X, r24
    16da:	07 c0       	rjmp	.+14     	; 0x16ea <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    16dc:	ab e3       	ldi	r26, 0x3B	; 59
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	eb e3       	ldi	r30, 0x3B	; 59
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	8e 7f       	andi	r24, 0xFE	; 254
    16e8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	41 f4       	brne	.+16     	; 0x1700 <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    16f0:	ab e3       	ldi	r26, 0x3B	; 59
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	eb e3       	ldi	r30, 0x3B	; 59
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	82 60       	ori	r24, 0x02	; 2
    16fc:	8c 93       	st	X, r24
    16fe:	07 c0       	rjmp	.+14     	; 0x170e <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    1700:	ab e3       	ldi	r26, 0x3B	; 59
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e3       	ldi	r30, 0x3B	; 59
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8d 7f       	andi	r24, 0xFD	; 253
    170c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	41 f4       	brne	.+16     	; 0x1724 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1714:	ab e3       	ldi	r26, 0x3B	; 59
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	eb e3       	ldi	r30, 0x3B	; 59
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	84 60       	ori	r24, 0x04	; 4
    1720:	8c 93       	st	X, r24
    1722:	07 c0       	rjmp	.+14     	; 0x1732 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1724:	ab e3       	ldi	r26, 0x3B	; 59
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	eb e3       	ldi	r30, 0x3B	; 59
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8b 7f       	andi	r24, 0xFB	; 251
    1730:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	41 f4       	brne	.+16     	; 0x1748 <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    1738:	ab e3       	ldi	r26, 0x3B	; 59
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	eb e3       	ldi	r30, 0x3B	; 59
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	88 60       	ori	r24, 0x08	; 8
    1744:	8c 93       	st	X, r24
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    1748:	ab e3       	ldi	r26, 0x3B	; 59
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	eb e3       	ldi	r30, 0x3B	; 59
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	87 7f       	andi	r24, 0xF7	; 247
    1754:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1756:	8e 81       	ldd	r24, Y+6	; 0x06
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	41 f4       	brne	.+16     	; 0x176c <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    175c:	ab e3       	ldi	r26, 0x3B	; 59
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	eb e3       	ldi	r30, 0x3B	; 59
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	80 61       	ori	r24, 0x10	; 16
    1768:	8c 93       	st	X, r24
    176a:	07 c0       	rjmp	.+14     	; 0x177a <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    176c:	ab e3       	ldi	r26, 0x3B	; 59
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	eb e3       	ldi	r30, 0x3B	; 59
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 7e       	andi	r24, 0xEF	; 239
    1778:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    177a:	8f 81       	ldd	r24, Y+7	; 0x07
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	41 f4       	brne	.+16     	; 0x1790 <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1780:	ab e3       	ldi	r26, 0x3B	; 59
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	eb e3       	ldi	r30, 0x3B	; 59
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 62       	ori	r24, 0x20	; 32
    178c:	8c 93       	st	X, r24
    178e:	07 c0       	rjmp	.+14     	; 0x179e <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1790:	ab e3       	ldi	r26, 0x3B	; 59
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e3       	ldi	r30, 0x3B	; 59
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 7d       	andi	r24, 0xDF	; 223
    179c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    179e:	88 85       	ldd	r24, Y+8	; 0x08
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	41 f4       	brne	.+16     	; 0x17b4 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    17a4:	ab e3       	ldi	r26, 0x3B	; 59
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	eb e3       	ldi	r30, 0x3B	; 59
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	80 64       	ori	r24, 0x40	; 64
    17b0:	8c 93       	st	X, r24
    17b2:	07 c0       	rjmp	.+14     	; 0x17c2 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    17b4:	ab e3       	ldi	r26, 0x3B	; 59
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	eb e3       	ldi	r30, 0x3B	; 59
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8f 7b       	andi	r24, 0xBF	; 191
    17c0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	41 f4       	brne	.+16     	; 0x17d8 <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    17c8:	ab e3       	ldi	r26, 0x3B	; 59
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	eb e3       	ldi	r30, 0x3B	; 59
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	80 68       	ori	r24, 0x80	; 128
    17d4:	8c 93       	st	X, r24
    17d6:	ba c1       	rjmp	.+884    	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    17d8:	ab e3       	ldi	r26, 0x3B	; 59
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	eb e3       	ldi	r30, 0x3B	; 59
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 77       	andi	r24, 0x7F	; 127
    17e4:	8c 93       	st	X, r24
    17e6:	b2 c1       	rjmp	.+868    	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	41 f4       	brne	.+16     	; 0x17fe <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    17ee:	a8 e3       	ldi	r26, 0x38	; 56
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e8 e3       	ldi	r30, 0x38	; 56
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	81 60       	ori	r24, 0x01	; 1
    17fa:	8c 93       	st	X, r24
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    17fe:	a8 e3       	ldi	r26, 0x38	; 56
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e8 e3       	ldi	r30, 0x38	; 56
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8e 7f       	andi	r24, 0xFE	; 254
    180a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	41 f4       	brne	.+16     	; 0x1822 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1812:	a8 e3       	ldi	r26, 0x38	; 56
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e8 e3       	ldi	r30, 0x38	; 56
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	82 60       	ori	r24, 0x02	; 2
    181e:	8c 93       	st	X, r24
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1822:	a8 e3       	ldi	r26, 0x38	; 56
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e8 e3       	ldi	r30, 0x38	; 56
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8d 7f       	andi	r24, 0xFD	; 253
    182e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	41 f4       	brne	.+16     	; 0x1846 <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    1836:	a8 e3       	ldi	r26, 0x38	; 56
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e8 e3       	ldi	r30, 0x38	; 56
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	84 60       	ori	r24, 0x04	; 4
    1842:	8c 93       	st	X, r24
    1844:	07 c0       	rjmp	.+14     	; 0x1854 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    1846:	a8 e3       	ldi	r26, 0x38	; 56
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e8 e3       	ldi	r30, 0x38	; 56
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	8b 7f       	andi	r24, 0xFB	; 251
    1852:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	41 f4       	brne	.+16     	; 0x186a <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    185a:	a8 e3       	ldi	r26, 0x38	; 56
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	88 60       	ori	r24, 0x08	; 8
    1866:	8c 93       	st	X, r24
    1868:	07 c0       	rjmp	.+14     	; 0x1878 <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    186a:	a8 e3       	ldi	r26, 0x38	; 56
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e8 e3       	ldi	r30, 0x38	; 56
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	87 7f       	andi	r24, 0xF7	; 247
    1876:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1878:	8e 81       	ldd	r24, Y+6	; 0x06
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	41 f4       	brne	.+16     	; 0x188e <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    187e:	a8 e3       	ldi	r26, 0x38	; 56
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e8 e3       	ldi	r30, 0x38	; 56
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	80 61       	ori	r24, 0x10	; 16
    188a:	8c 93       	st	X, r24
    188c:	07 c0       	rjmp	.+14     	; 0x189c <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    188e:	a8 e3       	ldi	r26, 0x38	; 56
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e8 e3       	ldi	r30, 0x38	; 56
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	8f 7e       	andi	r24, 0xEF	; 239
    189a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    189c:	8f 81       	ldd	r24, Y+7	; 0x07
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	41 f4       	brne	.+16     	; 0x18b2 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    18a2:	a8 e3       	ldi	r26, 0x38	; 56
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e8 e3       	ldi	r30, 0x38	; 56
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	80 62       	ori	r24, 0x20	; 32
    18ae:	8c 93       	st	X, r24
    18b0:	07 c0       	rjmp	.+14     	; 0x18c0 <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    18b2:	a8 e3       	ldi	r26, 0x38	; 56
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e8 e3       	ldi	r30, 0x38	; 56
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7d       	andi	r24, 0xDF	; 223
    18be:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    18c0:	88 85       	ldd	r24, Y+8	; 0x08
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	41 f4       	brne	.+16     	; 0x18d6 <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    18c6:	a8 e3       	ldi	r26, 0x38	; 56
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e8 e3       	ldi	r30, 0x38	; 56
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 64       	ori	r24, 0x40	; 64
    18d2:	8c 93       	st	X, r24
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    18d6:	a8 e3       	ldi	r26, 0x38	; 56
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e8 e3       	ldi	r30, 0x38	; 56
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8f 7b       	andi	r24, 0xBF	; 191
    18e2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	41 f4       	brne	.+16     	; 0x18fa <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    18ea:	a8 e3       	ldi	r26, 0x38	; 56
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e8 e3       	ldi	r30, 0x38	; 56
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	80 68       	ori	r24, 0x80	; 128
    18f6:	8c 93       	st	X, r24
    18f8:	29 c1       	rjmp	.+594    	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    18fa:	a8 e3       	ldi	r26, 0x38	; 56
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e8 e3       	ldi	r30, 0x38	; 56
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8f 77       	andi	r24, 0x7F	; 127
    1906:	8c 93       	st	X, r24
    1908:	21 c1       	rjmp	.+578    	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	41 f4       	brne	.+16     	; 0x1920 <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    1910:	a5 e3       	ldi	r26, 0x35	; 53
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e5 e3       	ldi	r30, 0x35	; 53
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	81 60       	ori	r24, 0x01	; 1
    191c:	8c 93       	st	X, r24
    191e:	07 c0       	rjmp	.+14     	; 0x192e <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    1920:	a5 e3       	ldi	r26, 0x35	; 53
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e3       	ldi	r30, 0x35	; 53
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8e 7f       	andi	r24, 0xFE	; 254
    192c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	41 f4       	brne	.+16     	; 0x1944 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    1934:	a5 e3       	ldi	r26, 0x35	; 53
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e5 e3       	ldi	r30, 0x35	; 53
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	82 60       	ori	r24, 0x02	; 2
    1940:	8c 93       	st	X, r24
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    1944:	a5 e3       	ldi	r26, 0x35	; 53
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e3       	ldi	r30, 0x35	; 53
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8d 7f       	andi	r24, 0xFD	; 253
    1950:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	41 f4       	brne	.+16     	; 0x1968 <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    1958:	a5 e3       	ldi	r26, 0x35	; 53
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e3       	ldi	r30, 0x35	; 53
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	84 60       	ori	r24, 0x04	; 4
    1964:	8c 93       	st	X, r24
    1966:	07 c0       	rjmp	.+14     	; 0x1976 <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    1968:	a5 e3       	ldi	r26, 0x35	; 53
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e5 e3       	ldi	r30, 0x35	; 53
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8b 7f       	andi	r24, 0xFB	; 251
    1974:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	41 f4       	brne	.+16     	; 0x198c <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    197c:	a5 e3       	ldi	r26, 0x35	; 53
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e3       	ldi	r30, 0x35	; 53
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	88 60       	ori	r24, 0x08	; 8
    1988:	8c 93       	st	X, r24
    198a:	07 c0       	rjmp	.+14     	; 0x199a <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    198c:	a5 e3       	ldi	r26, 0x35	; 53
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	87 7f       	andi	r24, 0xF7	; 247
    1998:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    199a:	8e 81       	ldd	r24, Y+6	; 0x06
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	41 f4       	brne	.+16     	; 0x19b0 <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    19a0:	a5 e3       	ldi	r26, 0x35	; 53
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e5 e3       	ldi	r30, 0x35	; 53
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	80 61       	ori	r24, 0x10	; 16
    19ac:	8c 93       	st	X, r24
    19ae:	07 c0       	rjmp	.+14     	; 0x19be <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    19b0:	a5 e3       	ldi	r26, 0x35	; 53
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e5 e3       	ldi	r30, 0x35	; 53
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	8f 7e       	andi	r24, 0xEF	; 239
    19bc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    19be:	8f 81       	ldd	r24, Y+7	; 0x07
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	41 f4       	brne	.+16     	; 0x19d4 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    19c4:	a5 e3       	ldi	r26, 0x35	; 53
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e5 e3       	ldi	r30, 0x35	; 53
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 62       	ori	r24, 0x20	; 32
    19d0:	8c 93       	st	X, r24
    19d2:	07 c0       	rjmp	.+14     	; 0x19e2 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    19d4:	a5 e3       	ldi	r26, 0x35	; 53
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e3       	ldi	r30, 0x35	; 53
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8f 7d       	andi	r24, 0xDF	; 223
    19e0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    19e2:	88 85       	ldd	r24, Y+8	; 0x08
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	41 f4       	brne	.+16     	; 0x19f8 <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    19e8:	a5 e3       	ldi	r26, 0x35	; 53
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e5 e3       	ldi	r30, 0x35	; 53
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	80 64       	ori	r24, 0x40	; 64
    19f4:	8c 93       	st	X, r24
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    19f8:	a5 e3       	ldi	r26, 0x35	; 53
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e5 e3       	ldi	r30, 0x35	; 53
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	8f 7b       	andi	r24, 0xBF	; 191
    1a04:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	41 f4       	brne	.+16     	; 0x1a1c <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    1a0c:	a5 e3       	ldi	r26, 0x35	; 53
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e5 e3       	ldi	r30, 0x35	; 53
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	8c 93       	st	X, r24
    1a1a:	98 c0       	rjmp	.+304    	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    1a1c:	a5 e3       	ldi	r26, 0x35	; 53
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e5 e3       	ldi	r30, 0x35	; 53
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 77       	andi	r24, 0x7F	; 127
    1a28:	8c 93       	st	X, r24
    1a2a:	90 c0       	rjmp	.+288    	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	41 f4       	brne	.+16     	; 0x1a42 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    1a32:	a2 e3       	ldi	r26, 0x32	; 50
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e2 e3       	ldi	r30, 0x32	; 50
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	81 60       	ori	r24, 0x01	; 1
    1a3e:	8c 93       	st	X, r24
    1a40:	07 c0       	rjmp	.+14     	; 0x1a50 <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    1a42:	a2 e3       	ldi	r26, 0x32	; 50
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e2 e3       	ldi	r30, 0x32	; 50
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8e 7f       	andi	r24, 0xFE	; 254
    1a4e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	41 f4       	brne	.+16     	; 0x1a66 <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    1a56:	a2 e3       	ldi	r26, 0x32	; 50
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e2 e3       	ldi	r30, 0x32	; 50
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	82 60       	ori	r24, 0x02	; 2
    1a62:	8c 93       	st	X, r24
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    1a66:	a2 e3       	ldi	r26, 0x32	; 50
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e2 e3       	ldi	r30, 0x32	; 50
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8d 7f       	andi	r24, 0xFD	; 253
    1a72:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	41 f4       	brne	.+16     	; 0x1a8a <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    1a7a:	a2 e3       	ldi	r26, 0x32	; 50
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e2 e3       	ldi	r30, 0x32	; 50
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	84 60       	ori	r24, 0x04	; 4
    1a86:	8c 93       	st	X, r24
    1a88:	07 c0       	rjmp	.+14     	; 0x1a98 <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    1a8a:	a2 e3       	ldi	r26, 0x32	; 50
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e2 e3       	ldi	r30, 0x32	; 50
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8b 7f       	andi	r24, 0xFB	; 251
    1a96:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	41 f4       	brne	.+16     	; 0x1aae <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    1a9e:	a2 e3       	ldi	r26, 0x32	; 50
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e2 e3       	ldi	r30, 0x32	; 50
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 60       	ori	r24, 0x08	; 8
    1aaa:	8c 93       	st	X, r24
    1aac:	07 c0       	rjmp	.+14     	; 0x1abc <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    1aae:	a2 e3       	ldi	r26, 0x32	; 50
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e2 e3       	ldi	r30, 0x32	; 50
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	87 7f       	andi	r24, 0xF7	; 247
    1aba:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1abc:	8e 81       	ldd	r24, Y+6	; 0x06
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	41 f4       	brne	.+16     	; 0x1ad2 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    1ac2:	a2 e3       	ldi	r26, 0x32	; 50
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e2 e3       	ldi	r30, 0x32	; 50
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	80 61       	ori	r24, 0x10	; 16
    1ace:	8c 93       	st	X, r24
    1ad0:	07 c0       	rjmp	.+14     	; 0x1ae0 <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    1ad2:	a2 e3       	ldi	r26, 0x32	; 50
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e2 e3       	ldi	r30, 0x32	; 50
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8f 7e       	andi	r24, 0xEF	; 239
    1ade:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	41 f4       	brne	.+16     	; 0x1af6 <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    1ae6:	a2 e3       	ldi	r26, 0x32	; 50
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e2 e3       	ldi	r30, 0x32	; 50
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	80 62       	ori	r24, 0x20	; 32
    1af2:	8c 93       	st	X, r24
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    1af6:	a2 e3       	ldi	r26, 0x32	; 50
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e2 e3       	ldi	r30, 0x32	; 50
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	8f 7d       	andi	r24, 0xDF	; 223
    1b02:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1b04:	88 85       	ldd	r24, Y+8	; 0x08
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	41 f4       	brne	.+16     	; 0x1b1a <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    1b0a:	a2 e3       	ldi	r26, 0x32	; 50
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e2 e3       	ldi	r30, 0x32	; 50
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 64       	ori	r24, 0x40	; 64
    1b16:	8c 93       	st	X, r24
    1b18:	07 c0       	rjmp	.+14     	; 0x1b28 <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    1b1a:	a2 e3       	ldi	r26, 0x32	; 50
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8f 7b       	andi	r24, 0xBF	; 191
    1b26:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	41 f4       	brne	.+16     	; 0x1b3e <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    1b2e:	a2 e3       	ldi	r26, 0x32	; 50
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e2 e3       	ldi	r30, 0x32	; 50
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 68       	ori	r24, 0x80	; 128
    1b3a:	8c 93       	st	X, r24
    1b3c:	07 c0       	rjmp	.+14     	; 0x1b4c <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    1b3e:	a2 e3       	ldi	r26, 0x32	; 50
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e2 e3       	ldi	r30, 0x32	; 50
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 77       	andi	r24, 0x7F	; 127
    1b4a:	8c 93       	st	X, r24
		}
		break;
	}
}
    1b4c:	2c 96       	adiw	r28, 0x0c	; 12
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	0f 91       	pop	r16
    1b5e:	ef 90       	pop	r14
    1b60:	cf 90       	pop	r12
    1b62:	af 90       	pop	r10
    1b64:	8f 90       	pop	r8
    1b66:	08 95       	ret

00001b68 <DC_Motor_Init>:
#include "../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <DC_Motor_Init+0x6>
    1b6e:	0f 92       	push	r0
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	8a 83       	std	Y+2, r24	; 0x02
    1b76:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	81 f4       	brne	.+32     	; 0x1ba2 <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	63 e0       	ldi	r22, 0x03	; 3
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	65 e0       	ldi	r22, 0x05	; 5
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	64 e0       	ldi	r22, 0x04	; 4
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	81 f4       	brne	.+32     	; 0x1bc8 <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	62 e0       	ldi	r22, 0x02	; 2
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_u8SetPinDirection>
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    1bc8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	29 97       	sbiw	r28, 0x09	; 9
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	8a 83       	std	Y+2, r24	; 0x02
    1bee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	39 87       	std	Y+9, r19	; 0x09
    1bfc:	28 87       	std	Y+8, r18	; 0x08
    1bfe:	88 85       	ldd	r24, Y+8	; 0x08
    1c00:	99 85       	ldd	r25, Y+9	; 0x09
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	31 f0       	breq	.+12     	; 0x1c12 <DC_Motor_Rotate+0x3a>
    1c06:	28 85       	ldd	r18, Y+8	; 0x08
    1c08:	39 85       	ldd	r19, Y+9	; 0x09
    1c0a:	21 30       	cpi	r18, 0x01	; 1
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	89 f1       	breq	.+98     	; 0x1c72 <DC_Motor_Rotate+0x9a>
    1c10:	60 c0       	rjmp	.+192    	; 0x1cd2 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	3f 83       	std	Y+7, r19	; 0x07
    1c1a:	2e 83       	std	Y+6, r18	; 0x06
    1c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	a9 f0       	breq	.+42     	; 0x1c4e <DC_Motor_Rotate+0x76>
    1c24:	2e 81       	ldd	r18, Y+6	; 0x06
    1c26:	3f 81       	ldd	r19, Y+7	; 0x07
    1c28:	21 30       	cpi	r18, 0x01	; 1
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	01 f5       	brne	.+64     	; 0x1c6e <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	63 e0       	ldi	r22, 0x03	; 3
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	65 e0       	ldi	r22, 0x05	; 5
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	64 e0       	ldi	r22, 0x04	; 4
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
    1c4c:	43 c0       	rjmp	.+134    	; 0x1cd4 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	63 e0       	ldi	r22, 0x03	; 3
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	65 e0       	ldi	r22, 0x05	; 5
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	64 e0       	ldi	r22, 0x04	; 4
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
    1c6c:	33 c0       	rjmp	.+102    	; 0x1cd4 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    1c6e:	19 82       	std	Y+1, r1	; 0x01
    1c70:	31 c0       	rjmp	.+98     	; 0x1cd4 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3d 83       	std	Y+5, r19	; 0x05
    1c7a:	2c 83       	std	Y+4, r18	; 0x04
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	a9 f0       	breq	.+42     	; 0x1cae <DC_Motor_Rotate+0xd6>
    1c84:	2c 81       	ldd	r18, Y+4	; 0x04
    1c86:	3d 81       	ldd	r19, Y+5	; 0x05
    1c88:	21 30       	cpi	r18, 0x01	; 1
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	01 f5       	brne	.+64     	; 0x1cce <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	62 e0       	ldi	r22, 0x02	; 2
    1c92:	41 e0       	ldi	r20, 0x01	; 1
    1c94:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
    1ccc:	03 c0       	rjmp	.+6      	; 0x1cd4 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    1cce:	19 82       	std	Y+1, r1	; 0x01
    1cd0:	01 c0       	rjmp	.+2      	; 0x1cd4 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    1cd2:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd6:	29 96       	adiw	r28, 0x09	; 9
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <DC_Motor_Stop+0x6>
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	88 23       	and	r24, r24
    1cfc:	31 f4       	brne	.+12     	; 0x1d0a <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	63 e0       	ldi	r22, 0x03	; 3
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
    1d08:	0a c0       	rjmp	.+20     	; 0x1d1e <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	31 f4       	brne	.+12     	; 0x1d1c <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	62 e0       	ldi	r22, 0x02	; 2
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 af 07 	call	0xf5e	; 0xf5e <DIO_u8SetPinValue>
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <LCD_setPinDirection>:
#include "avr/io.h"

#include "BIT_MATH.h"
#include "Dio_Interface.h"
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <LCD_setPinDirection+0x6>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <LCD_setPinDirection+0x8>
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	6a 83       	std	Y+2, r22	; 0x02
    1d3c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	88 30       	cpi	r24, 0x08	; 8
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <LCD_setPinDirection+0x1c>
    1d44:	d5 c0       	rjmp	.+426    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	84 30       	cpi	r24, 0x04	; 4
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <LCD_setPinDirection+0x24>
    1d4c:	d1 c0       	rjmp	.+418    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	3d 83       	std	Y+5, r19	; 0x05
    1d56:	2c 83       	std	Y+4, r18	; 0x04
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <LCD_setPinDirection+0x3a>
    1d62:	43 c0       	rjmp	.+134    	; 0x1dea <LCD_setPinDirection+0xc0>
    1d64:	2c 81       	ldd	r18, Y+4	; 0x04
    1d66:	3d 81       	ldd	r19, Y+5	; 0x05
    1d68:	22 30       	cpi	r18, 0x02	; 2
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <LCD_setPinDirection+0x4e>
    1d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d70:	9d 81       	ldd	r25, Y+5	; 0x05
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	71 f0       	breq	.+28     	; 0x1d92 <LCD_setPinDirection+0x68>
    1d76:	bc c0       	rjmp	.+376    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
    1d78:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7c:	22 30       	cpi	r18, 0x02	; 2
    1d7e:	31 05       	cpc	r19, r1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <LCD_setPinDirection+0x5a>
    1d82:	5f c0       	rjmp	.+190    	; 0x1e42 <LCD_setPinDirection+0x118>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <LCD_setPinDirection+0x66>
    1d8e:	85 c0       	rjmp	.+266    	; 0x1e9a <LCD_setPinDirection+0x170>
    1d90:	af c0       	rjmp	.+350    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == AVR_PIN_OUTPUT)
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	a1 f4       	brne	.+40     	; 0x1dc0 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d98:	aa e3       	ldi	r26, 0x3A	; 58
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ea e3       	ldi	r30, 0x3A	; 58
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <LCD_setPinDirection+0x8c>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <LCD_setPinDirection+0x88>
    1dba:	84 2b       	or	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	98 c0       	rjmp	.+304    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1dc0:	aa e3       	ldi	r26, 0x3A	; 58
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ea e3       	ldi	r30, 0x3A	; 58
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <LCD_setPinDirection+0xb4>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <LCD_setPinDirection+0xb0>
    1de2:	80 95       	com	r24
    1de4:	84 23       	and	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	83 c0       	rjmp	.+262    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == AVR_PIN_OUTPUT)
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	a1 f4       	brne	.+40     	; 0x1e18 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1df0:	a7 e3       	ldi	r26, 0x37	; 55
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e7 e3       	ldi	r30, 0x37	; 55
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <LCD_setPinDirection+0xe4>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <LCD_setPinDirection+0xe0>
    1e12:	84 2b       	or	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	6c c0       	rjmp	.+216    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e18:	a7 e3       	ldi	r26, 0x37	; 55
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e7 e3       	ldi	r30, 0x37	; 55
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <LCD_setPinDirection+0x10c>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <LCD_setPinDirection+0x108>
    1e3a:	80 95       	com	r24
    1e3c:	84 23       	and	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	57 c0       	rjmp	.+174    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == AVR_PIN_OUTPUT)
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	a1 f4       	brne	.+40     	; 0x1e70 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e48:	a4 e3       	ldi	r26, 0x34	; 52
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e4 e3       	ldi	r30, 0x34	; 52
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	48 2f       	mov	r20, r24
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 2e       	mov	r0, r18
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <LCD_setPinDirection+0x13c>
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	0a 94       	dec	r0
    1e68:	e2 f7       	brpl	.-8      	; 0x1e62 <LCD_setPinDirection+0x138>
    1e6a:	84 2b       	or	r24, r20
    1e6c:	8c 93       	st	X, r24
    1e6e:	40 c0       	rjmp	.+128    	; 0x1ef0 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e70:	a4 e3       	ldi	r26, 0x34	; 52
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e4 e3       	ldi	r30, 0x34	; 52
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	48 2f       	mov	r20, r24
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 2e       	mov	r0, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <LCD_setPinDirection+0x164>
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <LCD_setPinDirection+0x160>
    1e92:	80 95       	com	r24
    1e94:	84 23       	and	r24, r20
    1e96:	8c 93       	st	X, r24
    1e98:	2b c0       	rjmp	.+86     	; 0x1ef0 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == AVR_PIN_OUTPUT)
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	a1 f4       	brne	.+40     	; 0x1ec8 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ea0:	a1 e3       	ldi	r26, 0x31	; 49
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e1 e3       	ldi	r30, 0x31	; 49
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <LCD_setPinDirection+0x194>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <LCD_setPinDirection+0x190>
    1ec2:	84 2b       	or	r24, r20
    1ec4:	8c 93       	st	X, r24
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ec8:	a1 e3       	ldi	r26, 0x31	; 49
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e1 e3       	ldi	r30, 0x31	; 49
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 2e       	mov	r0, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <LCD_setPinDirection+0x1bc>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	0a 94       	dec	r0
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <LCD_setPinDirection+0x1b8>
    1eea:	80 95       	com	r24
    1eec:	84 23       	and	r24, r20
    1eee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <LCD_setPinValue+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <LCD_setPinValue+0x8>
    1f08:	0f 92       	push	r0
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	6a 83       	std	Y+2, r22	; 0x02
    1f12:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	88 30       	cpi	r24, 0x08	; 8
    1f18:	08 f0       	brcs	.+2      	; 0x1f1c <LCD_setPinValue+0x1c>
    1f1a:	d5 c0       	rjmp	.+426    	; 0x20c6 <LCD_setPinValue+0x1c6>
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	84 30       	cpi	r24, 0x04	; 4
    1f20:	08 f0       	brcs	.+2      	; 0x1f24 <LCD_setPinValue+0x24>
    1f22:	d1 c0       	rjmp	.+418    	; 0x20c6 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	3d 83       	std	Y+5, r19	; 0x05
    1f2c:	2c 83       	std	Y+4, r18	; 0x04
    1f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f30:	9d 81       	ldd	r25, Y+5	; 0x05
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	91 05       	cpc	r25, r1
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <LCD_setPinValue+0x3a>
    1f38:	43 c0       	rjmp	.+134    	; 0x1fc0 <LCD_setPinValue+0xc0>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	22 30       	cpi	r18, 0x02	; 2
    1f40:	31 05       	cpc	r19, r1
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <LCD_setPinValue+0x4e>
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	9d 81       	ldd	r25, Y+5	; 0x05
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	71 f0       	breq	.+28     	; 0x1f68 <LCD_setPinValue+0x68>
    1f4c:	bc c0       	rjmp	.+376    	; 0x20c6 <LCD_setPinValue+0x1c6>
    1f4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f50:	3d 81       	ldd	r19, Y+5	; 0x05
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	31 05       	cpc	r19, r1
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <LCD_setPinValue+0x5a>
    1f58:	5f c0       	rjmp	.+190    	; 0x2018 <LCD_setPinValue+0x118>
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5e:	83 30       	cpi	r24, 0x03	; 3
    1f60:	91 05       	cpc	r25, r1
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <LCD_setPinValue+0x66>
    1f64:	85 c0       	rjmp	.+266    	; 0x2070 <LCD_setPinValue+0x170>
    1f66:	af c0       	rjmp	.+350    	; 0x20c6 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	a1 f4       	brne	.+40     	; 0x1f96 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f6e:	ab e3       	ldi	r26, 0x3B	; 59
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	eb e3       	ldi	r30, 0x3B	; 59
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	48 2f       	mov	r20, r24
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	02 2e       	mov	r0, r18
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <LCD_setPinValue+0x8c>
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	0a 94       	dec	r0
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <LCD_setPinValue+0x88>
    1f90:	84 2b       	or	r24, r20
    1f92:	8c 93       	st	X, r24
    1f94:	98 c0       	rjmp	.+304    	; 0x20c6 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f96:	ab e3       	ldi	r26, 0x3B	; 59
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	eb e3       	ldi	r30, 0x3B	; 59
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	48 2f       	mov	r20, r24
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 2e       	mov	r0, r18
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <LCD_setPinValue+0xb4>
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	0a 94       	dec	r0
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <LCD_setPinValue+0xb0>
    1fb8:	80 95       	com	r24
    1fba:	84 23       	and	r24, r20
    1fbc:	8c 93       	st	X, r24
    1fbe:	83 c0       	rjmp	.+262    	; 0x20c6 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	a1 f4       	brne	.+40     	; 0x1fee <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1fc6:	a8 e3       	ldi	r26, 0x38	; 56
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e8 e3       	ldi	r30, 0x38	; 56
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	02 2e       	mov	r0, r18
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <LCD_setPinValue+0xe4>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	0a 94       	dec	r0
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <LCD_setPinValue+0xe0>
    1fe8:	84 2b       	or	r24, r20
    1fea:	8c 93       	st	X, r24
    1fec:	6c c0       	rjmp	.+216    	; 0x20c6 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fee:	a8 e3       	ldi	r26, 0x38	; 56
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e8 e3       	ldi	r30, 0x38	; 56
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	48 2f       	mov	r20, r24
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	02 2e       	mov	r0, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <LCD_setPinValue+0x10c>
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	0a 94       	dec	r0
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <LCD_setPinValue+0x108>
    2010:	80 95       	com	r24
    2012:	84 23       	and	r24, r20
    2014:	8c 93       	st	X, r24
    2016:	57 c0       	rjmp	.+174    	; 0x20c6 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	a1 f4       	brne	.+40     	; 0x2046 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    201e:	a5 e3       	ldi	r26, 0x35	; 53
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e5 e3       	ldi	r30, 0x35	; 53
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	48 2f       	mov	r20, r24
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <LCD_setPinValue+0x13c>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <LCD_setPinValue+0x138>
    2040:	84 2b       	or	r24, r20
    2042:	8c 93       	st	X, r24
    2044:	40 c0       	rjmp	.+128    	; 0x20c6 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2046:	a5 e3       	ldi	r26, 0x35	; 53
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e5 e3       	ldi	r30, 0x35	; 53
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	48 2f       	mov	r20, r24
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	02 2e       	mov	r0, r18
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <LCD_setPinValue+0x164>
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	0a 94       	dec	r0
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <LCD_setPinValue+0x160>
    2068:	80 95       	com	r24
    206a:	84 23       	and	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	2b c0       	rjmp	.+86     	; 0x20c6 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	a1 f4       	brne	.+40     	; 0x209e <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2076:	a2 e3       	ldi	r26, 0x32	; 50
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e2 e3       	ldi	r30, 0x32	; 50
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	48 2f       	mov	r20, r24
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 2e       	mov	r0, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <LCD_setPinValue+0x194>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <LCD_setPinValue+0x190>
    2098:	84 2b       	or	r24, r20
    209a:	8c 93       	st	X, r24
    209c:	14 c0       	rjmp	.+40     	; 0x20c6 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    209e:	a2 e3       	ldi	r26, 0x32	; 50
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e2 e3       	ldi	r30, 0x32	; 50
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	48 2f       	mov	r20, r24
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	02 2e       	mov	r0, r18
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <LCD_setPinValue+0x1bc>
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	0a 94       	dec	r0
    20be:	e2 f7       	brpl	.-8      	; 0x20b8 <LCD_setPinValue+0x1b8>
    20c0:	80 95       	com	r24
    20c2:	84 23       	and	r24, r20
    20c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <LCD_getPinValue+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <LCD_getPinValue+0x8>
    20de:	0f 92       	push	r0
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    20e8:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
    20ec:	88 30       	cpi	r24, 0x08	; 8
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <LCD_getPinValue+0x1c>
    20f0:	84 c0       	rjmp	.+264    	; 0x21fa <LCD_getPinValue+0x124>
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	84 30       	cpi	r24, 0x04	; 4
    20f6:	08 f0       	brcs	.+2      	; 0x20fa <LCD_getPinValue+0x24>
    20f8:	80 c0       	rjmp	.+256    	; 0x21fa <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	3d 83       	std	Y+5, r19	; 0x05
    2102:	2c 83       	std	Y+4, r18	; 0x04
    2104:	4c 81       	ldd	r20, Y+4	; 0x04
    2106:	5d 81       	ldd	r21, Y+5	; 0x05
    2108:	41 30       	cpi	r20, 0x01	; 1
    210a:	51 05       	cpc	r21, r1
    210c:	79 f1       	breq	.+94     	; 0x216c <LCD_getPinValue+0x96>
    210e:	8c 81       	ldd	r24, Y+4	; 0x04
    2110:	9d 81       	ldd	r25, Y+5	; 0x05
    2112:	82 30       	cpi	r24, 0x02	; 2
    2114:	91 05       	cpc	r25, r1
    2116:	34 f4       	brge	.+12     	; 0x2124 <LCD_getPinValue+0x4e>
    2118:	2c 81       	ldd	r18, Y+4	; 0x04
    211a:	3d 81       	ldd	r19, Y+5	; 0x05
    211c:	21 15       	cp	r18, r1
    211e:	31 05       	cpc	r19, r1
    2120:	69 f0       	breq	.+26     	; 0x213c <LCD_getPinValue+0x66>
    2122:	6b c0       	rjmp	.+214    	; 0x21fa <LCD_getPinValue+0x124>
    2124:	4c 81       	ldd	r20, Y+4	; 0x04
    2126:	5d 81       	ldd	r21, Y+5	; 0x05
    2128:	42 30       	cpi	r20, 0x02	; 2
    212a:	51 05       	cpc	r21, r1
    212c:	b9 f1       	breq	.+110    	; 0x219c <LCD_getPinValue+0xc6>
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	9d 81       	ldd	r25, Y+5	; 0x05
    2132:	83 30       	cpi	r24, 0x03	; 3
    2134:	91 05       	cpc	r25, r1
    2136:	09 f4       	brne	.+2      	; 0x213a <LCD_getPinValue+0x64>
    2138:	49 c0       	rjmp	.+146    	; 0x21cc <LCD_getPinValue+0xf6>
    213a:	5f c0       	rjmp	.+190    	; 0x21fa <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    213c:	e9 e3       	ldi	r30, 0x39	; 57
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a9 01       	movw	r20, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <LCD_getPinValue+0x7e>
    2150:	55 95       	asr	r21
    2152:	47 95       	ror	r20
    2154:	8a 95       	dec	r24
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <LCD_getPinValue+0x7a>
    2158:	ca 01       	movw	r24, r20
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	90 70       	andi	r25, 0x00	; 0
    215e:	88 23       	and	r24, r24
    2160:	19 f0       	breq	.+6      	; 0x2168 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	49 c0       	rjmp	.+146    	; 0x21fa <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2168:	19 82       	std	Y+1, r1	; 0x01
    216a:	47 c0       	rjmp	.+142    	; 0x21fa <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    216c:	e6 e3       	ldi	r30, 0x36	; 54
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a9 01       	movw	r20, r18
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <LCD_getPinValue+0xae>
    2180:	55 95       	asr	r21
    2182:	47 95       	ror	r20
    2184:	8a 95       	dec	r24
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <LCD_getPinValue+0xaa>
    2188:	ca 01       	movw	r24, r20
    218a:	81 70       	andi	r24, 0x01	; 1
    218c:	90 70       	andi	r25, 0x00	; 0
    218e:	88 23       	and	r24, r24
    2190:	19 f0       	breq	.+6      	; 0x2198 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	31 c0       	rjmp	.+98     	; 0x21fa <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	2f c0       	rjmp	.+94     	; 0x21fa <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    219c:	e3 e3       	ldi	r30, 0x33	; 51
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a9 01       	movw	r20, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <LCD_getPinValue+0xde>
    21b0:	55 95       	asr	r21
    21b2:	47 95       	ror	r20
    21b4:	8a 95       	dec	r24
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <LCD_getPinValue+0xda>
    21b8:	ca 01       	movw	r24, r20
    21ba:	81 70       	andi	r24, 0x01	; 1
    21bc:	90 70       	andi	r25, 0x00	; 0
    21be:	88 23       	and	r24, r24
    21c0:	19 f0       	breq	.+6      	; 0x21c8 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	19 c0       	rjmp	.+50     	; 0x21fa <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	17 c0       	rjmp	.+46     	; 0x21fa <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    21cc:	e0 e3       	ldi	r30, 0x30	; 48
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a9 01       	movw	r20, r18
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <LCD_getPinValue+0x10e>
    21e0:	55 95       	asr	r21
    21e2:	47 95       	ror	r20
    21e4:	8a 95       	dec	r24
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <LCD_getPinValue+0x10a>
    21e8:	ca 01       	movw	r24, r20
    21ea:	81 70       	andi	r24, 0x01	; 1
    21ec:	90 70       	andi	r25, 0x00	; 0
    21ee:	88 23       	and	r24, r24
    21f0:	19 f0       	breq	.+6      	; 0x21f8 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	01 c0       	rjmp	.+2      	; 0x21fa <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21f8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	00 d0       	rcall	.+0      	; 0x2212 <LCD_setPortDirection+0x6>
    2212:	00 d0       	rcall	.+0      	; 0x2214 <LCD_setPortDirection+0x8>
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	84 30       	cpi	r24, 0x04	; 4
    2220:	90 f5       	brcc	.+100    	; 0x2286 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	3c 83       	std	Y+4, r19	; 0x04
    222a:	2b 83       	std	Y+3, r18	; 0x03
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	91 05       	cpc	r25, r1
    2234:	d1 f0       	breq	.+52     	; 0x226a <LCD_setPortDirection+0x5e>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	22 30       	cpi	r18, 0x02	; 2
    223c:	31 05       	cpc	r19, r1
    223e:	2c f4       	brge	.+10     	; 0x224a <LCD_setPortDirection+0x3e>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	61 f0       	breq	.+24     	; 0x2260 <LCD_setPortDirection+0x54>
    2248:	1e c0       	rjmp	.+60     	; 0x2286 <LCD_setPortDirection+0x7a>
    224a:	2b 81       	ldd	r18, Y+3	; 0x03
    224c:	3c 81       	ldd	r19, Y+4	; 0x04
    224e:	22 30       	cpi	r18, 0x02	; 2
    2250:	31 05       	cpc	r19, r1
    2252:	81 f0       	breq	.+32     	; 0x2274 <LCD_setPortDirection+0x68>
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	83 30       	cpi	r24, 0x03	; 3
    225a:	91 05       	cpc	r25, r1
    225c:	81 f0       	breq	.+32     	; 0x227e <LCD_setPortDirection+0x72>
    225e:	13 c0       	rjmp	.+38     	; 0x2286 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2260:	ea e3       	ldi	r30, 0x3A	; 58
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	80 83       	st	Z, r24
    2268:	0e c0       	rjmp	.+28     	; 0x2286 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    226a:	e7 e3       	ldi	r30, 0x37	; 55
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	80 83       	st	Z, r24
    2272:	09 c0       	rjmp	.+18     	; 0x2286 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2274:	e4 e3       	ldi	r30, 0x34	; 52
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	80 83       	st	Z, r24
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    227e:	e1 e3       	ldi	r30, 0x31	; 49
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	80 83       	st	Z, r24
			break;
		}
	}
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	00 d0       	rcall	.+0      	; 0x229a <LCD_setPortValue+0x6>
    229a:	00 d0       	rcall	.+0      	; 0x229c <LCD_setPortValue+0x8>
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	84 30       	cpi	r24, 0x04	; 4
    22a8:	90 f5       	brcc	.+100    	; 0x230e <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3c 83       	std	Y+4, r19	; 0x04
    22b2:	2b 83       	std	Y+3, r18	; 0x03
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	91 05       	cpc	r25, r1
    22bc:	d1 f0       	breq	.+52     	; 0x22f2 <LCD_setPortValue+0x5e>
    22be:	2b 81       	ldd	r18, Y+3	; 0x03
    22c0:	3c 81       	ldd	r19, Y+4	; 0x04
    22c2:	22 30       	cpi	r18, 0x02	; 2
    22c4:	31 05       	cpc	r19, r1
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <LCD_setPortValue+0x3e>
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	61 f0       	breq	.+24     	; 0x22e8 <LCD_setPortValue+0x54>
    22d0:	1e c0       	rjmp	.+60     	; 0x230e <LCD_setPortValue+0x7a>
    22d2:	2b 81       	ldd	r18, Y+3	; 0x03
    22d4:	3c 81       	ldd	r19, Y+4	; 0x04
    22d6:	22 30       	cpi	r18, 0x02	; 2
    22d8:	31 05       	cpc	r19, r1
    22da:	81 f0       	breq	.+32     	; 0x22fc <LCD_setPortValue+0x68>
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	91 05       	cpc	r25, r1
    22e4:	81 f0       	breq	.+32     	; 0x2306 <LCD_setPortValue+0x72>
    22e6:	13 c0       	rjmp	.+38     	; 0x230e <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22e8:	eb e3       	ldi	r30, 0x3B	; 59
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	80 83       	st	Z, r24
    22f0:	0e c0       	rjmp	.+28     	; 0x230e <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22f2:	e8 e3       	ldi	r30, 0x38	; 56
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	80 83       	st	Z, r24
    22fa:	09 c0       	rjmp	.+18     	; 0x230e <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22fc:	e5 e3       	ldi	r30, 0x35	; 53
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	80 83       	st	Z, r24
    2304:	04 c0       	rjmp	.+8      	; 0x230e <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2306:	e2 e3       	ldi	r30, 0x32	; 50
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	80 83       	st	Z, r24
			break;
		}
	}
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <LCD_getPortValue+0x6>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <LCD_getPortValue+0x8>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    232a:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	84 30       	cpi	r24, 0x04	; 4
    2330:	90 f5       	brcc	.+100    	; 0x2396 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3c 83       	std	Y+4, r19	; 0x04
    233a:	2b 83       	std	Y+3, r18	; 0x03
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	91 05       	cpc	r25, r1
    2344:	d1 f0       	breq	.+52     	; 0x237a <LCD_getPortValue+0x5e>
    2346:	2b 81       	ldd	r18, Y+3	; 0x03
    2348:	3c 81       	ldd	r19, Y+4	; 0x04
    234a:	22 30       	cpi	r18, 0x02	; 2
    234c:	31 05       	cpc	r19, r1
    234e:	2c f4       	brge	.+10     	; 0x235a <LCD_getPortValue+0x3e>
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	61 f0       	breq	.+24     	; 0x2370 <LCD_getPortValue+0x54>
    2358:	1e c0       	rjmp	.+60     	; 0x2396 <LCD_getPortValue+0x7a>
    235a:	2b 81       	ldd	r18, Y+3	; 0x03
    235c:	3c 81       	ldd	r19, Y+4	; 0x04
    235e:	22 30       	cpi	r18, 0x02	; 2
    2360:	31 05       	cpc	r19, r1
    2362:	81 f0       	breq	.+32     	; 0x2384 <LCD_getPortValue+0x68>
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	83 30       	cpi	r24, 0x03	; 3
    236a:	91 05       	cpc	r25, r1
    236c:	81 f0       	breq	.+32     	; 0x238e <LCD_getPortValue+0x72>
    236e:	13 c0       	rjmp	.+38     	; 0x2396 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2370:	e9 e3       	ldi	r30, 0x39	; 57
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	0e c0       	rjmp	.+28     	; 0x2396 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    237a:	e6 e3       	ldi	r30, 0x36	; 54
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	09 c0       	rjmp	.+18     	; 0x2396 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2384:	e3 e3       	ldi	r30, 0x33	; 51
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    238e:	e0 e3       	ldi	r30, 0x30	; 48
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2396:	89 81       	ldd	r24, Y+1	; 0x01
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <Keypad_GetPressedKey>:
 *      Author: Mohamed
 */
#include "Keypad.h";

u8 Keypad_GetPressedKey()
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <Keypad_GetPressedKey+0x6>
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    23b0:	1a 82       	std	Y+2, r1	; 0x02
    23b2:	4d c0       	rjmp	.+154    	; 0x244e <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    23b4:	ea e3       	ldi	r30, 0x3A	; 58
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	80 e1       	ldi	r24, 0x10	; 16
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <Keypad_GetPressedKey+0x22>
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	2a 95       	dec	r18
    23ca:	e2 f7       	brpl	.-8      	; 0x23c4 <Keypad_GetPressedKey+0x1e>
    23cc:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    23ce:	eb e3       	ldi	r30, 0x3B	; 59
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	80 e1       	ldi	r24, 0x10	; 16
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	02 2e       	mov	r0, r18
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <Keypad_GetPressedKey+0x3e>
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	0a 94       	dec	r0
    23e6:	e2 f7       	brpl	.-8      	; 0x23e0 <Keypad_GetPressedKey+0x3a>
    23e8:	80 95       	com	r24
    23ea:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    23ec:	19 82       	std	Y+1, r1	; 0x01
    23ee:	29 c0       	rjmp	.+82     	; 0x2442 <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    23f0:	e9 e3       	ldi	r30, 0x39	; 57
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a9 01       	movw	r20, r18
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <Keypad_GetPressedKey+0x62>
    2404:	55 95       	asr	r21
    2406:	47 95       	ror	r20
    2408:	8a 95       	dec	r24
    240a:	e2 f7       	brpl	.-8      	; 0x2404 <Keypad_GetPressedKey+0x5e>
    240c:	ca 01       	movw	r24, r20
    240e:	81 70       	andi	r24, 0x01	; 1
    2410:	90 70       	andi	r25, 0x00	; 0
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	99 f4       	brne	.+38     	; 0x243c <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	c9 01       	movw	r24, r18
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	82 0f       	add	r24, r18
    2424:	93 1f       	adc	r25, r19
    2426:	98 2f       	mov	r25, r24
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	89 0f       	add	r24, r25
    242c:	8f 5f       	subi	r24, 0xFF	; 255
    242e:	0e 94 2c 12 	call	0x2458	; 0x2458 <Keypad_4x3>
				}
			}
		}
	}
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	8f 5f       	subi	r24, 0xFF	; 255
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	84 30       	cpi	r24, 0x04	; 4
    2446:	a0 f2       	brcs	.-88     	; 0x23f0 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey()
{
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	83 30       	cpi	r24, 0x03	; 3
    2452:	08 f4       	brcc	.+2      	; 0x2456 <Keypad_GetPressedKey+0xb0>
    2454:	af cf       	rjmp	.-162    	; 0x23b4 <Keypad_GetPressedKey+0xe>
    2456:	ac cf       	rjmp	.-168    	; 0x23b0 <Keypad_GetPressedKey+0xa>

00002458 <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <Keypad_4x3+0x6>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <Keypad_4x3+0x8>
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	3c 83       	std	Y+4, r19	; 0x04
    246e:	2b 83       	std	Y+3, r18	; 0x03
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	8a 30       	cpi	r24, 0x0A	; 10
    2476:	91 05       	cpc	r25, r1
    2478:	81 f0       	breq	.+32     	; 0x249a <Keypad_4x3+0x42>
    247a:	2b 81       	ldd	r18, Y+3	; 0x03
    247c:	3c 81       	ldd	r19, Y+4	; 0x04
    247e:	2a 30       	cpi	r18, 0x0A	; 10
    2480:	31 05       	cpc	r19, r1
    2482:	9c f0       	brlt	.+38     	; 0x24aa <Keypad_4x3+0x52>
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	8b 30       	cpi	r24, 0x0B	; 11
    248a:	91 05       	cpc	r25, r1
    248c:	49 f0       	breq	.+18     	; 0x24a0 <Keypad_4x3+0x48>
    248e:	2b 81       	ldd	r18, Y+3	; 0x03
    2490:	3c 81       	ldd	r19, Y+4	; 0x04
    2492:	2c 30       	cpi	r18, 0x0C	; 12
    2494:	31 05       	cpc	r19, r1
    2496:	31 f0       	breq	.+12     	; 0x24a4 <Keypad_4x3+0x4c>
    2498:	08 c0       	rjmp	.+16     	; 0x24aa <Keypad_4x3+0x52>
	case 10:
		return '*';
    249a:	3a e2       	ldi	r19, 0x2A	; 42
    249c:	3a 83       	std	Y+2, r19	; 0x02
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    24a0:	1a 82       	std	Y+2, r1	; 0x02
    24a2:	05 c0       	rjmp	.+10     	; 0x24ae <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    24a4:	83 e2       	ldi	r24, 0x23	; 35
    24a6:	8a 83       	std	Y+2, r24	; 0x02
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <Keypad_4x3+0x56>
	default:
		return Num;
    24aa:	99 81       	ldd	r25, Y+1	; 0x01
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <LCD_sendCommand>:

#include "LIB/BIT_MATH.h"
#include "Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	e9 97       	sbiw	r28, 0x39	; 57
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	f8 94       	cli
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	0f be       	out	0x3f, r0	; 63
    24d0:	cd bf       	out	0x3d, r28	; 61
    24d2:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	64 e0       	ldi	r22, 0x04	; 4
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_setPinValue>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a0 e8       	ldi	r26, 0x80	; 128
    24e4:	bf e3       	ldi	r27, 0x3F	; 63
    24e6:	8d ab       	std	Y+53, r24	; 0x35
    24e8:	9e ab       	std	Y+54, r25	; 0x36
    24ea:	af ab       	std	Y+55, r26	; 0x37
    24ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ee:	6d a9       	ldd	r22, Y+53	; 0x35
    24f0:	7e a9       	ldd	r23, Y+54	; 0x36
    24f2:	8f a9       	ldd	r24, Y+55	; 0x37
    24f4:	98 ad       	ldd	r25, Y+56	; 0x38
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4a e7       	ldi	r20, 0x7A	; 122
    24fc:	55 e4       	ldi	r21, 0x45	; 69
    24fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	89 ab       	std	Y+49, r24	; 0x31
    2508:	9a ab       	std	Y+50, r25	; 0x32
    250a:	ab ab       	std	Y+51, r26	; 0x33
    250c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    250e:	69 a9       	ldd	r22, Y+49	; 0x31
    2510:	7a a9       	ldd	r23, Y+50	; 0x32
    2512:	8b a9       	ldd	r24, Y+51	; 0x33
    2514:	9c a9       	ldd	r25, Y+52	; 0x34
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	2c f4       	brge	.+10     	; 0x2530 <LCD_sendCommand+0x72>
		__ticks = 1;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	98 ab       	std	Y+48, r25	; 0x30
    252c:	8f a7       	std	Y+47, r24	; 0x2f
    252e:	3f c0       	rjmp	.+126    	; 0x25ae <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2530:	69 a9       	ldd	r22, Y+49	; 0x31
    2532:	7a a9       	ldd	r23, Y+50	; 0x32
    2534:	8b a9       	ldd	r24, Y+51	; 0x33
    2536:	9c a9       	ldd	r25, Y+52	; 0x34
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	4c f5       	brge	.+82     	; 0x259a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2548:	6d a9       	ldd	r22, Y+53	; 0x35
    254a:	7e a9       	ldd	r23, Y+54	; 0x36
    254c:	8f a9       	ldd	r24, Y+55	; 0x37
    254e:	98 ad       	ldd	r25, Y+56	; 0x38
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	51 e4       	ldi	r21, 0x41	; 65
    2558:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	98 ab       	std	Y+48, r25	; 0x30
    256e:	8f a7       	std	Y+47, r24	; 0x2f
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <LCD_sendCommand+0xd2>
    2572:	80 e9       	ldi	r24, 0x90	; 144
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	9e a7       	std	Y+46, r25	; 0x2e
    2578:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    257a:	8d a5       	ldd	r24, Y+45	; 0x2d
    257c:	9e a5       	ldd	r25, Y+46	; 0x2e
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_sendCommand+0xc0>
    2582:	9e a7       	std	Y+46, r25	; 0x2e
    2584:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	8f a5       	ldd	r24, Y+47	; 0x2f
    2588:	98 a9       	ldd	r25, Y+48	; 0x30
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	98 ab       	std	Y+48, r25	; 0x30
    258e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	8f a5       	ldd	r24, Y+47	; 0x2f
    2592:	98 a9       	ldd	r25, Y+48	; 0x30
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	69 f7       	brne	.-38     	; 0x2572 <LCD_sendCommand+0xb4>
    2598:	14 c0       	rjmp	.+40     	; 0x25c2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	69 a9       	ldd	r22, Y+49	; 0x31
    259c:	7a a9       	ldd	r23, Y+50	; 0x32
    259e:	8b a9       	ldd	r24, Y+51	; 0x33
    25a0:	9c a9       	ldd	r25, Y+52	; 0x34
    25a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	98 ab       	std	Y+48, r25	; 0x30
    25ac:	8f a7       	std	Y+47, r24	; 0x2f
    25ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b0:	98 a9       	ldd	r25, Y+48	; 0x30
    25b2:	9c a7       	std	Y+44, r25	; 0x2c
    25b4:	8b a7       	std	Y+43, r24	; 0x2b
    25b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_sendCommand+0xfc>
    25be:	9c a7       	std	Y+44, r25	; 0x2c
    25c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	65 e0       	ldi	r22, 0x05	; 5
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_setPinValue>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 e8       	ldi	r26, 0x80	; 128
    25d2:	bf e3       	ldi	r27, 0x3F	; 63
    25d4:	8f a3       	std	Y+39, r24	; 0x27
    25d6:	98 a7       	std	Y+40, r25	; 0x28
    25d8:	a9 a7       	std	Y+41, r26	; 0x29
    25da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25dc:	6f a1       	ldd	r22, Y+39	; 0x27
    25de:	78 a5       	ldd	r23, Y+40	; 0x28
    25e0:	89 a5       	ldd	r24, Y+41	; 0x29
    25e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	4a e7       	ldi	r20, 0x7A	; 122
    25ea:	55 e4       	ldi	r21, 0x45	; 69
    25ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	8b a3       	std	Y+35, r24	; 0x23
    25f6:	9c a3       	std	Y+36, r25	; 0x24
    25f8:	ad a3       	std	Y+37, r26	; 0x25
    25fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25fc:	6b a1       	ldd	r22, Y+35	; 0x23
    25fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2600:	8d a1       	ldd	r24, Y+37	; 0x25
    2602:	9e a1       	ldd	r25, Y+38	; 0x26
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e8       	ldi	r20, 0x80	; 128
    260a:	5f e3       	ldi	r21, 0x3F	; 63
    260c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2610:	88 23       	and	r24, r24
    2612:	2c f4       	brge	.+10     	; 0x261e <LCD_sendCommand+0x160>
		__ticks = 1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9a a3       	std	Y+34, r25	; 0x22
    261a:	89 a3       	std	Y+33, r24	; 0x21
    261c:	3f c0       	rjmp	.+126    	; 0x269c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    261e:	6b a1       	ldd	r22, Y+35	; 0x23
    2620:	7c a1       	ldd	r23, Y+36	; 0x24
    2622:	8d a1       	ldd	r24, Y+37	; 0x25
    2624:	9e a1       	ldd	r25, Y+38	; 0x26
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	3f ef       	ldi	r19, 0xFF	; 255
    262a:	4f e7       	ldi	r20, 0x7F	; 127
    262c:	57 e4       	ldi	r21, 0x47	; 71
    262e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2632:	18 16       	cp	r1, r24
    2634:	4c f5       	brge	.+82     	; 0x2688 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2636:	6f a1       	ldd	r22, Y+39	; 0x27
    2638:	78 a5       	ldd	r23, Y+40	; 0x28
    263a:	89 a5       	ldd	r24, Y+41	; 0x29
    263c:	9a a5       	ldd	r25, Y+42	; 0x2a
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e2       	ldi	r20, 0x20	; 32
    2644:	51 e4       	ldi	r21, 0x41	; 65
    2646:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9a a3       	std	Y+34, r25	; 0x22
    265c:	89 a3       	std	Y+33, r24	; 0x21
    265e:	0f c0       	rjmp	.+30     	; 0x267e <LCD_sendCommand+0x1c0>
    2660:	80 e9       	ldi	r24, 0x90	; 144
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	98 a3       	std	Y+32, r25	; 0x20
    2666:	8f 8f       	std	Y+31, r24	; 0x1f
    2668:	8f 8d       	ldd	r24, Y+31	; 0x1f
    266a:	98 a1       	ldd	r25, Y+32	; 0x20
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_sendCommand+0x1ae>
    2670:	98 a3       	std	Y+32, r25	; 0x20
    2672:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2674:	89 a1       	ldd	r24, Y+33	; 0x21
    2676:	9a a1       	ldd	r25, Y+34	; 0x22
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	9a a3       	std	Y+34, r25	; 0x22
    267c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267e:	89 a1       	ldd	r24, Y+33	; 0x21
    2680:	9a a1       	ldd	r25, Y+34	; 0x22
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	69 f7       	brne	.-38     	; 0x2660 <LCD_sendCommand+0x1a2>
    2686:	14 c0       	rjmp	.+40     	; 0x26b0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2688:	6b a1       	ldd	r22, Y+35	; 0x23
    268a:	7c a1       	ldd	r23, Y+36	; 0x24
    268c:	8d a1       	ldd	r24, Y+37	; 0x25
    268e:	9e a1       	ldd	r25, Y+38	; 0x26
    2690:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9a a3       	std	Y+34, r25	; 0x22
    269a:	89 a3       	std	Y+33, r24	; 0x21
    269c:	89 a1       	ldd	r24, Y+33	; 0x21
    269e:	9a a1       	ldd	r25, Y+34	; 0x22
    26a0:	9e 8f       	std	Y+30, r25	; 0x1e
    26a2:	8d 8f       	std	Y+29, r24	; 0x1d
    26a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <LCD_sendCommand+0x1ea>
    26ac:	9e 8f       	std	Y+30, r25	; 0x1e
    26ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    26b0:	82 e0       	ldi	r24, 0x02	; 2
    26b2:	69 ad       	ldd	r22, Y+57	; 0x39
    26b4:	0e 94 4a 11 	call	0x2294	; 0x2294 <LCD_setPortValue>
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e8       	ldi	r26, 0x80	; 128
    26be:	bf e3       	ldi	r27, 0x3F	; 63
    26c0:	89 8f       	std	Y+25, r24	; 0x19
    26c2:	9a 8f       	std	Y+26, r25	; 0x1a
    26c4:	ab 8f       	std	Y+27, r26	; 0x1b
    26c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4a e7       	ldi	r20, 0x7A	; 122
    26d6:	55 e4       	ldi	r21, 0x45	; 69
    26d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	8d 8b       	std	Y+21, r24	; 0x15
    26e2:	9e 8b       	std	Y+22, r25	; 0x16
    26e4:	af 8b       	std	Y+23, r26	; 0x17
    26e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26e8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ea:	7e 89       	ldd	r23, Y+22	; 0x16
    26ec:	8f 89       	ldd	r24, Y+23	; 0x17
    26ee:	98 8d       	ldd	r25, Y+24	; 0x18
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e8       	ldi	r20, 0x80	; 128
    26f6:	5f e3       	ldi	r21, 0x3F	; 63
    26f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26fc:	88 23       	and	r24, r24
    26fe:	2c f4       	brge	.+10     	; 0x270a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9c 8b       	std	Y+20, r25	; 0x14
    2706:	8b 8b       	std	Y+19, r24	; 0x13
    2708:	3f c0       	rjmp	.+126    	; 0x2788 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    270a:	6d 89       	ldd	r22, Y+21	; 0x15
    270c:	7e 89       	ldd	r23, Y+22	; 0x16
    270e:	8f 89       	ldd	r24, Y+23	; 0x17
    2710:	98 8d       	ldd	r25, Y+24	; 0x18
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	4f e7       	ldi	r20, 0x7F	; 127
    2718:	57 e4       	ldi	r21, 0x47	; 71
    271a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    271e:	18 16       	cp	r1, r24
    2720:	4c f5       	brge	.+82     	; 0x2774 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2722:	69 8d       	ldd	r22, Y+25	; 0x19
    2724:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2726:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2728:	9c 8d       	ldd	r25, Y+28	; 0x1c
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e2       	ldi	r20, 0x20	; 32
    2730:	51 e4       	ldi	r21, 0x41	; 65
    2732:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	bc 01       	movw	r22, r24
    273c:	cd 01       	movw	r24, r26
    273e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9c 8b       	std	Y+20, r25	; 0x14
    2748:	8b 8b       	std	Y+19, r24	; 0x13
    274a:	0f c0       	rjmp	.+30     	; 0x276a <LCD_sendCommand+0x2ac>
    274c:	80 e9       	ldi	r24, 0x90	; 144
    274e:	91 e0       	ldi	r25, 0x01	; 1
    2750:	9a 8b       	std	Y+18, r25	; 0x12
    2752:	89 8b       	std	Y+17, r24	; 0x11
    2754:	89 89       	ldd	r24, Y+17	; 0x11
    2756:	9a 89       	ldd	r25, Y+18	; 0x12
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <LCD_sendCommand+0x29a>
    275c:	9a 8b       	std	Y+18, r25	; 0x12
    275e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2760:	8b 89       	ldd	r24, Y+19	; 0x13
    2762:	9c 89       	ldd	r25, Y+20	; 0x14
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	9c 8b       	std	Y+20, r25	; 0x14
    2768:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276a:	8b 89       	ldd	r24, Y+19	; 0x13
    276c:	9c 89       	ldd	r25, Y+20	; 0x14
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	69 f7       	brne	.-38     	; 0x274c <LCD_sendCommand+0x28e>
    2772:	14 c0       	rjmp	.+40     	; 0x279c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2774:	6d 89       	ldd	r22, Y+21	; 0x15
    2776:	7e 89       	ldd	r23, Y+22	; 0x16
    2778:	8f 89       	ldd	r24, Y+23	; 0x17
    277a:	98 8d       	ldd	r25, Y+24	; 0x18
    277c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9c 8b       	std	Y+20, r25	; 0x14
    2786:	8b 8b       	std	Y+19, r24	; 0x13
    2788:	8b 89       	ldd	r24, Y+19	; 0x13
    278a:	9c 89       	ldd	r25, Y+20	; 0x14
    278c:	98 8b       	std	Y+16, r25	; 0x10
    278e:	8f 87       	std	Y+15, r24	; 0x0f
    2790:	8f 85       	ldd	r24, Y+15	; 0x0f
    2792:	98 89       	ldd	r25, Y+16	; 0x10
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_sendCommand+0x2d6>
    2798:	98 8b       	std	Y+16, r25	; 0x10
    279a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    279c:	83 e0       	ldi	r24, 0x03	; 3
    279e:	65 e0       	ldi	r22, 0x05	; 5
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_setPinValue>
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e8       	ldi	r26, 0x80	; 128
    27ac:	bf e3       	ldi	r27, 0x3F	; 63
    27ae:	8b 87       	std	Y+11, r24	; 0x0b
    27b0:	9c 87       	std	Y+12, r25	; 0x0c
    27b2:	ad 87       	std	Y+13, r26	; 0x0d
    27b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    27bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	4a e7       	ldi	r20, 0x7A	; 122
    27c4:	55 e4       	ldi	r21, 0x45	; 69
    27c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	8f 83       	std	Y+7, r24	; 0x07
    27d0:	98 87       	std	Y+8, r25	; 0x08
    27d2:	a9 87       	std	Y+9, r26	; 0x09
    27d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d6:	6f 81       	ldd	r22, Y+7	; 0x07
    27d8:	78 85       	ldd	r23, Y+8	; 0x08
    27da:	89 85       	ldd	r24, Y+9	; 0x09
    27dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e8       	ldi	r20, 0x80	; 128
    27e4:	5f e3       	ldi	r21, 0x3F	; 63
    27e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27ea:	88 23       	and	r24, r24
    27ec:	2c f4       	brge	.+10     	; 0x27f8 <LCD_sendCommand+0x33a>
		__ticks = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
    27f6:	3f c0       	rjmp	.+126    	; 0x2876 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    27f8:	6f 81       	ldd	r22, Y+7	; 0x07
    27fa:	78 85       	ldd	r23, Y+8	; 0x08
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	4c f5       	brge	.+82     	; 0x2862 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2810:	6b 85       	ldd	r22, Y+11	; 0x0b
    2812:	7c 85       	ldd	r23, Y+12	; 0x0c
    2814:	8d 85       	ldd	r24, Y+13	; 0x0d
    2816:	9e 85       	ldd	r25, Y+14	; 0x0e
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	51 e4       	ldi	r21, 0x41	; 65
    2820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <LCD_sendCommand+0x39a>
    283a:	80 e9       	ldi	r24, 0x90	; 144
    283c:	91 e0       	ldi	r25, 0x01	; 1
    283e:	9c 83       	std	Y+4, r25	; 0x04
    2840:	8b 83       	std	Y+3, r24	; 0x03
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	9c 81       	ldd	r25, Y+4	; 0x04
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_sendCommand+0x388>
    284a:	9c 83       	std	Y+4, r25	; 0x04
    284c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	9e 81       	ldd	r25, Y+6	; 0x06
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	69 f7       	brne	.-38     	; 0x283a <LCD_sendCommand+0x37c>
    2860:	14 c0       	rjmp	.+40     	; 0x288a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_sendCommand+0x3c4>
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    288a:	e9 96       	adiw	r28, 0x39	; 57
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	e9 97       	sbiw	r28, 0x39	; 57
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    28b2:	83 e0       	ldi	r24, 0x03	; 3
    28b4:	64 e0       	ldi	r22, 0x04	; 4
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_setPinValue>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e8       	ldi	r26, 0x80	; 128
    28c2:	bf e3       	ldi	r27, 0x3F	; 63
    28c4:	8d ab       	std	Y+53, r24	; 0x35
    28c6:	9e ab       	std	Y+54, r25	; 0x36
    28c8:	af ab       	std	Y+55, r26	; 0x37
    28ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	6d a9       	ldd	r22, Y+53	; 0x35
    28ce:	7e a9       	ldd	r23, Y+54	; 0x36
    28d0:	8f a9       	ldd	r24, Y+55	; 0x37
    28d2:	98 ad       	ldd	r25, Y+56	; 0x38
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a e7       	ldi	r20, 0x7A	; 122
    28da:	55 e4       	ldi	r21, 0x45	; 69
    28dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	89 ab       	std	Y+49, r24	; 0x31
    28e6:	9a ab       	std	Y+50, r25	; 0x32
    28e8:	ab ab       	std	Y+51, r26	; 0x33
    28ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ec:	69 a9       	ldd	r22, Y+49	; 0x31
    28ee:	7a a9       	ldd	r23, Y+50	; 0x32
    28f0:	8b a9       	ldd	r24, Y+51	; 0x33
    28f2:	9c a9       	ldd	r25, Y+52	; 0x34
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	98 ab       	std	Y+48, r25	; 0x30
    290a:	8f a7       	std	Y+47, r24	; 0x2f
    290c:	3f c0       	rjmp	.+126    	; 0x298c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    290e:	69 a9       	ldd	r22, Y+49	; 0x31
    2910:	7a a9       	ldd	r23, Y+50	; 0x32
    2912:	8b a9       	ldd	r24, Y+51	; 0x33
    2914:	9c a9       	ldd	r25, Y+52	; 0x34
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	6d a9       	ldd	r22, Y+53	; 0x35
    2928:	7e a9       	ldd	r23, Y+54	; 0x36
    292a:	8f a9       	ldd	r24, Y+55	; 0x37
    292c:	98 ad       	ldd	r25, Y+56	; 0x38
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	98 ab       	std	Y+48, r25	; 0x30
    294c:	8f a7       	std	Y+47, r24	; 0x2f
    294e:	0f c0       	rjmp	.+30     	; 0x296e <LCD_displayCharacter+0xd2>
    2950:	80 e9       	ldi	r24, 0x90	; 144
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	9e a7       	std	Y+46, r25	; 0x2e
    2956:	8d a7       	std	Y+45, r24	; 0x2d
    2958:	8d a5       	ldd	r24, Y+45	; 0x2d
    295a:	9e a5       	ldd	r25, Y+46	; 0x2e
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <LCD_displayCharacter+0xc0>
    2960:	9e a7       	std	Y+46, r25	; 0x2e
    2962:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8f a5       	ldd	r24, Y+47	; 0x2f
    2966:	98 a9       	ldd	r25, Y+48	; 0x30
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	98 ab       	std	Y+48, r25	; 0x30
    296c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2970:	98 a9       	ldd	r25, Y+48	; 0x30
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <LCD_displayCharacter+0xb4>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	69 a9       	ldd	r22, Y+49	; 0x31
    297a:	7a a9       	ldd	r23, Y+50	; 0x32
    297c:	8b a9       	ldd	r24, Y+51	; 0x33
    297e:	9c a9       	ldd	r25, Y+52	; 0x34
    2980:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	98 ab       	std	Y+48, r25	; 0x30
    298a:	8f a7       	std	Y+47, r24	; 0x2f
    298c:	8f a5       	ldd	r24, Y+47	; 0x2f
    298e:	98 a9       	ldd	r25, Y+48	; 0x30
    2990:	9c a7       	std	Y+44, r25	; 0x2c
    2992:	8b a7       	std	Y+43, r24	; 0x2b
    2994:	8b a5       	ldd	r24, Y+43	; 0x2b
    2996:	9c a5       	ldd	r25, Y+44	; 0x2c
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_displayCharacter+0xfc>
    299c:	9c a7       	std	Y+44, r25	; 0x2c
    299e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    29a0:	83 e0       	ldi	r24, 0x03	; 3
    29a2:	65 e0       	ldi	r22, 0x05	; 5
    29a4:	41 e0       	ldi	r20, 0x01	; 1
    29a6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_setPinValue>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e8       	ldi	r26, 0x80	; 128
    29b0:	bf e3       	ldi	r27, 0x3F	; 63
    29b2:	8f a3       	std	Y+39, r24	; 0x27
    29b4:	98 a7       	std	Y+40, r25	; 0x28
    29b6:	a9 a7       	std	Y+41, r26	; 0x29
    29b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	6f a1       	ldd	r22, Y+39	; 0x27
    29bc:	78 a5       	ldd	r23, Y+40	; 0x28
    29be:	89 a5       	ldd	r24, Y+41	; 0x29
    29c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a e7       	ldi	r20, 0x7A	; 122
    29c8:	55 e4       	ldi	r21, 0x45	; 69
    29ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8b a3       	std	Y+35, r24	; 0x23
    29d4:	9c a3       	std	Y+36, r25	; 0x24
    29d6:	ad a3       	std	Y+37, r26	; 0x25
    29d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29da:	6b a1       	ldd	r22, Y+35	; 0x23
    29dc:	7c a1       	ldd	r23, Y+36	; 0x24
    29de:	8d a1       	ldd	r24, Y+37	; 0x25
    29e0:	9e a1       	ldd	r25, Y+38	; 0x26
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <LCD_displayCharacter+0x160>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9a a3       	std	Y+34, r25	; 0x22
    29f8:	89 a3       	std	Y+33, r24	; 0x21
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    29fc:	6b a1       	ldd	r22, Y+35	; 0x23
    29fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2a00:	8d a1       	ldd	r24, Y+37	; 0x25
    2a02:	9e a1       	ldd	r25, Y+38	; 0x26
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	6f a1       	ldd	r22, Y+39	; 0x27
    2a16:	78 a5       	ldd	r23, Y+40	; 0x28
    2a18:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9a a3       	std	Y+34, r25	; 0x22
    2a3a:	89 a3       	std	Y+33, r24	; 0x21
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_displayCharacter+0x1c0>
    2a3e:	80 e9       	ldi	r24, 0x90	; 144
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	98 a3       	std	Y+32, r25	; 0x20
    2a44:	8f 8f       	std	Y+31, r24	; 0x1f
    2a46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a48:	98 a1       	ldd	r25, Y+32	; 0x20
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_displayCharacter+0x1ae>
    2a4e:	98 a3       	std	Y+32, r25	; 0x20
    2a50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	89 a1       	ldd	r24, Y+33	; 0x21
    2a54:	9a a1       	ldd	r25, Y+34	; 0x22
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9a a3       	std	Y+34, r25	; 0x22
    2a5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <LCD_displayCharacter+0x1a2>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	6b a1       	ldd	r22, Y+35	; 0x23
    2a68:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9a a3       	std	Y+34, r25	; 0x22
    2a78:	89 a3       	std	Y+33, r24	; 0x21
    2a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a80:	8d 8f       	std	Y+29, r24	; 0x1d
    2a82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_displayCharacter+0x1ea>
    2a8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	69 ad       	ldd	r22, Y+57	; 0x39
    2a92:	0e 94 4a 11 	call	0x2294	; 0x2294 <LCD_setPortValue>
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e8       	ldi	r26, 0x80	; 128
    2a9c:	bf e3       	ldi	r27, 0x3F	; 63
    2a9e:	89 8f       	std	Y+25, r24	; 0x19
    2aa0:	9a 8f       	std	Y+26, r25	; 0x1a
    2aa2:	ab 8f       	std	Y+27, r26	; 0x1b
    2aa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa6:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a e7       	ldi	r20, 0x7A	; 122
    2ab4:	55 e4       	ldi	r21, 0x45	; 69
    2ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8d 8b       	std	Y+21, r24	; 0x15
    2ac0:	9e 8b       	std	Y+22, r25	; 0x16
    2ac2:	af 8b       	std	Y+23, r26	; 0x17
    2ac4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aca:	8f 89       	ldd	r24, Y+23	; 0x17
    2acc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e8       	ldi	r20, 0x80	; 128
    2ad4:	5f e3       	ldi	r21, 0x3F	; 63
    2ad6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ada:	88 23       	and	r24, r24
    2adc:	2c f4       	brge	.+10     	; 0x2ae8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9c 8b       	std	Y+20, r25	; 0x14
    2ae4:	8b 8b       	std	Y+19, r24	; 0x13
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aea:	7e 89       	ldd	r23, Y+22	; 0x16
    2aec:	8f 89       	ldd	r24, Y+23	; 0x17
    2aee:	98 8d       	ldd	r25, Y+24	; 0x18
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	3f ef       	ldi	r19, 0xFF	; 255
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	57 e4       	ldi	r21, 0x47	; 71
    2af8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	4c f5       	brge	.+82     	; 0x2b52 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b00:	69 8d       	ldd	r22, Y+25	; 0x19
    2b02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e2       	ldi	r20, 0x20	; 32
    2b0e:	51 e4       	ldi	r21, 0x41	; 65
    2b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9c 8b       	std	Y+20, r25	; 0x14
    2b26:	8b 8b       	std	Y+19, r24	; 0x13
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <LCD_displayCharacter+0x2ac>
    2b2a:	80 e9       	ldi	r24, 0x90	; 144
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	9a 8b       	std	Y+18, r25	; 0x12
    2b30:	89 8b       	std	Y+17, r24	; 0x11
    2b32:	89 89       	ldd	r24, Y+17	; 0x11
    2b34:	9a 89       	ldd	r25, Y+18	; 0x12
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_displayCharacter+0x29a>
    2b3a:	9a 8b       	std	Y+18, r25	; 0x12
    2b3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b40:	9c 89       	ldd	r25, Y+20	; 0x14
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	9c 8b       	std	Y+20, r25	; 0x14
    2b46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b48:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	69 f7       	brne	.-38     	; 0x2b2a <LCD_displayCharacter+0x28e>
    2b50:	14 c0       	rjmp	.+40     	; 0x2b7a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	6d 89       	ldd	r22, Y+21	; 0x15
    2b54:	7e 89       	ldd	r23, Y+22	; 0x16
    2b56:	8f 89       	ldd	r24, Y+23	; 0x17
    2b58:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9c 8b       	std	Y+20, r25	; 0x14
    2b64:	8b 8b       	std	Y+19, r24	; 0x13
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	98 8b       	std	Y+16, r25	; 0x10
    2b6c:	8f 87       	std	Y+15, r24	; 0x0f
    2b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b70:	98 89       	ldd	r25, Y+16	; 0x10
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_displayCharacter+0x2d6>
    2b76:	98 8b       	std	Y+16, r25	; 0x10
    2b78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2b7a:	83 e0       	ldi	r24, 0x03	; 3
    2b7c:	65 e0       	ldi	r22, 0x05	; 5
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <LCD_setPinValue>
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a0 e8       	ldi	r26, 0x80	; 128
    2b8a:	bf e3       	ldi	r27, 0x3F	; 63
    2b8c:	8b 87       	std	Y+11, r24	; 0x0b
    2b8e:	9c 87       	std	Y+12, r25	; 0x0c
    2b90:	ad 87       	std	Y+13, r26	; 0x0d
    2b92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	4a e7       	ldi	r20, 0x7A	; 122
    2ba2:	55 e4       	ldi	r21, 0x45	; 69
    2ba4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	8f 83       	std	Y+7, r24	; 0x07
    2bae:	98 87       	std	Y+8, r25	; 0x08
    2bb0:	a9 87       	std	Y+9, r26	; 0x09
    2bb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb6:	78 85       	ldd	r23, Y+8	; 0x08
    2bb8:	89 85       	ldd	r24, Y+9	; 0x09
    2bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e8       	ldi	r20, 0x80	; 128
    2bc2:	5f e3       	ldi	r21, 0x3F	; 63
    2bc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bc8:	88 23       	and	r24, r24
    2bca:	2c f4       	brge	.+10     	; 0x2bd6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	9e 83       	std	Y+6, r25	; 0x06
    2bd2:	8d 83       	std	Y+5, r24	; 0x05
    2bd4:	3f c0       	rjmp	.+126    	; 0x2c54 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd8:	78 85       	ldd	r23, Y+8	; 0x08
    2bda:	89 85       	ldd	r24, Y+9	; 0x09
    2bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	3f ef       	ldi	r19, 0xFF	; 255
    2be2:	4f e7       	ldi	r20, 0x7F	; 127
    2be4:	57 e4       	ldi	r21, 0x47	; 71
    2be6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bea:	18 16       	cp	r1, r24
    2bec:	4c f5       	brge	.+82     	; 0x2c40 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e2       	ldi	r20, 0x20	; 32
    2bfc:	51 e4       	ldi	r21, 0x41	; 65
    2bfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	0f c0       	rjmp	.+30     	; 0x2c36 <LCD_displayCharacter+0x39a>
    2c18:	80 e9       	ldi	r24, 0x90	; 144
    2c1a:	91 e0       	ldi	r25, 0x01	; 1
    2c1c:	9c 83       	std	Y+4, r25	; 0x04
    2c1e:	8b 83       	std	Y+3, r24	; 0x03
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	9c 81       	ldd	r25, Y+4	; 0x04
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <LCD_displayCharacter+0x388>
    2c28:	9c 83       	std	Y+4, r25	; 0x04
    2c2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	9e 83       	std	Y+6, r25	; 0x06
    2c34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c36:	8d 81       	ldd	r24, Y+5	; 0x05
    2c38:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	69 f7       	brne	.-38     	; 0x2c18 <LCD_displayCharacter+0x37c>
    2c3e:	14 c0       	rjmp	.+40     	; 0x2c68 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c40:	6f 81       	ldd	r22, Y+7	; 0x07
    2c42:	78 85       	ldd	r23, Y+8	; 0x08
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	9e 83       	std	Y+6, r25	; 0x06
    2c52:	8d 83       	std	Y+5, r24	; 0x05
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	9e 81       	ldd	r25, Y+6	; 0x06
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <LCD_displayCharacter+0x3c4>
    2c64:	9a 83       	std	Y+2, r25	; 0x02
    2c66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2c68:	e9 96       	adiw	r28, 0x39	; 57
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <LCD_init>:
void LCD_init(void)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	2e 97       	sbiw	r28, 0x0e	; 14
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, AVR_PIN_OUTPUT);
    2c8e:	83 e0       	ldi	r24, 0x03	; 3
    2c90:	64 e0       	ldi	r22, 0x04	; 4
    2c92:	41 e0       	ldi	r20, 0x01	; 1
    2c94:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, AVR_PIN_OUTPUT);
    2c98:	83 e0       	ldi	r24, 0x03	; 3
    2c9a:	65 e0       	ldi	r22, 0x05	; 5
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, AVR_PIN_OUTPUT);
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	61 e0       	ldi	r22, 0x01	; 1
    2ca6:	0e 94 06 11 	call	0x220c	; 0x220c <LCD_setPortDirection>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 ea       	ldi	r26, 0xA0	; 160
    2cb0:	b1 e4       	ldi	r27, 0x41	; 65
    2cb2:	8b 87       	std	Y+11, r24	; 0x0b
    2cb4:	9c 87       	std	Y+12, r25	; 0x0c
    2cb6:	ad 87       	std	Y+13, r26	; 0x0d
    2cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a e7       	ldi	r20, 0x7A	; 122
    2cc8:	55 e4       	ldi	r21, 0x45	; 69
    2cca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8f 83       	std	Y+7, r24	; 0x07
    2cd4:	98 87       	std	Y+8, r25	; 0x08
    2cd6:	a9 87       	std	Y+9, r26	; 0x09
    2cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <LCD_init+0x82>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	3f c0       	rjmp	.+126    	; 0x2d7a <LCD_init+0x100>
	else if (__tmp > 65535)
    2cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfe:	78 85       	ldd	r23, Y+8	; 0x08
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	4c f5       	brge	.+82     	; 0x2d66 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9e 83       	std	Y+6, r25	; 0x06
    2d3a:	8d 83       	std	Y+5, r24	; 0x05
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <LCD_init+0xe2>
    2d3e:	80 e9       	ldi	r24, 0x90	; 144
    2d40:	91 e0       	ldi	r25, 0x01	; 1
    2d42:	9c 83       	std	Y+4, r25	; 0x04
    2d44:	8b 83       	std	Y+3, r24	; 0x03
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <LCD_init+0xd0>
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	8d 81       	ldd	r24, Y+5	; 0x05
    2d54:	9e 81       	ldd	r25, Y+6	; 0x06
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <LCD_init+0xc4>
    2d64:	14 c0       	rjmp	.+40     	; 0x2d8e <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	6f 81       	ldd	r22, Y+7	; 0x07
    2d68:	78 85       	ldd	r23, Y+8	; 0x08
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <LCD_init+0x10c>
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2d8e:	88 e3       	ldi	r24, 0x38	; 56
    2d90:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    2d94:	8c e0       	ldi	r24, 0x0C	; 12
    2d96:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
}
    2da0:	2e 96       	adiw	r28, 0x0e	; 14
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <LCD_GoToXY+0x6>
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <LCD_GoToXY+0x8>
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	89 83       	std	Y+1, r24	; 0x01
    2dc0:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	88 32       	cpi	r24, 0x28	; 40
    2dc6:	c0 f4       	brcc	.+48     	; 0x2df8 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	3c 83       	std	Y+4, r19	; 0x04
    2dd0:	2b 83       	std	Y+3, r18	; 0x03
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	31 f0       	breq	.+12     	; 0x2de6 <LCD_GoToXY+0x34>
    2dda:	2b 81       	ldd	r18, Y+3	; 0x03
    2ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dde:	21 30       	cpi	r18, 0x01	; 1
    2de0:	31 05       	cpc	r19, r1
    2de2:	31 f0       	breq	.+12     	; 0x2df0 <LCD_GoToXY+0x3e>
    2de4:	09 c0       	rjmp	.+18     	; 0x2df8 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	80 58       	subi	r24, 0x80	; 128
    2dea:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
    2dee:	04 c0       	rjmp	.+8      	; 0x2df8 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	80 54       	subi	r24, 0x40	; 64
    2df4:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
			break;
		}
	}
}
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <LCD_displayString+0x6>
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	9b 83       	std	Y+3, r25	; 0x03
    2e14:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2e16:	19 82       	std	Y+1, r1	; 0x01
    2e18:	0e c0       	rjmp	.+28     	; 0x2e36 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	fc 01       	movw	r30, r24
    2e26:	e2 0f       	add	r30, r18
    2e28:	f3 1f       	adc	r31, r19
    2e2a:	80 81       	ld	r24, Z
    2e2c:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
		i++;
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	8f 5f       	subi	r24, 0xFF	; 255
    2e34:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e40:	fc 01       	movw	r30, r24
    2e42:	e2 0f       	add	r30, r18
    2e44:	f3 1f       	adc	r31, r19
    2e46:	80 81       	ld	r24, Z
    2e48:	88 23       	and	r24, r24
    2e4a:	39 f7       	brne	.-50     	; 0x2e1a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	28 97       	sbiw	r28, 0x08	; 8
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	8b 83       	std	Y+3, r24	; 0x03
    2e6e:	6c 83       	std	Y+4, r22	; 0x04
    2e70:	5e 83       	std	Y+6, r21	; 0x06
    2e72:	4d 83       	std	Y+5, r20	; 0x05
    2e74:	38 87       	std	Y+8, r19	; 0x08
    2e76:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    2e78:	1a 82       	std	Y+2, r1	; 0x02
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	88 23       	and	r24, r24
    2e82:	49 f4       	brne	.+18     	; 0x2e96 <LCD_String_xy+0x3e>
    2e84:	8c 81       	ldd	r24, Y+4	; 0x04
    2e86:	80 31       	cpi	r24, 0x10	; 16
    2e88:	30 f4       	brcc	.+12     	; 0x2e96 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    2e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8c:	8f 70       	andi	r24, 0x0F	; 15
    2e8e:	80 68       	ori	r24, 0x80	; 128
    2e90:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
    2e94:	3a c0       	rjmp	.+116    	; 0x2f0a <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    2e96:	8b 81       	ldd	r24, Y+3	; 0x03
    2e98:	81 30       	cpi	r24, 0x01	; 1
    2e9a:	b9 f5       	brne	.+110    	; 0x2f0a <LCD_String_xy+0xb2>
    2e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9e:	80 31       	cpi	r24, 0x10	; 16
    2ea0:	a0 f5       	brcc	.+104    	; 0x2f0a <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    2ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea4:	8f 70       	andi	r24, 0x0F	; 15
    2ea6:	80 6c       	ori	r24, 0xC0	; 192
    2ea8:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
    2eac:	2e c0       	rjmp	.+92     	; 0x2f0a <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2eae:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	fc 01       	movw	r30, r24
    2eba:	e2 0f       	add	r30, r18
    2ebc:	f3 1f       	adc	r31, r19
    2ebe:	80 81       	ld	r24, Z
    2ec0:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
		i++;
    2ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec6:	8f 5f       	subi	r24, 0xFF	; 255
    2ec8:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	88 23       	and	r24, r24
    2ece:	71 f4       	brne	.+28     	; 0x2eec <LCD_String_xy+0x94>
    2ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed2:	83 30       	cpi	r24, 0x03	; 3
    2ed4:	58 f0       	brcs	.+22     	; 0x2eec <LCD_String_xy+0x94>
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	8b 30       	cpi	r24, 0x0B	; 11
    2eda:	41 f4       	brne	.+16     	; 0x2eec <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
			c++;
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	8f 5f       	subi	r24, 0xFF	; 255
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	0b c0       	rjmp	.+22     	; 0x2f02 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    2eec:	8b 81       	ldd	r24, Y+3	; 0x03
    2eee:	81 30       	cpi	r24, 0x01	; 1
    2ef0:	41 f4       	brne	.+16     	; 0x2f02 <LCD_String_xy+0xaa>
    2ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef4:	83 30       	cpi	r24, 0x03	; 3
    2ef6:	28 f0       	brcs	.+10     	; 0x2f02 <LCD_String_xy+0xaa>
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	8b 30       	cpi	r24, 0x0B	; 11
    2efc:	11 f4       	brne	.+4      	; 0x2f02 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    2efe:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>
		}

		*count = c;
    2f02:	ef 81       	ldd	r30, Y+7	; 0x07
    2f04:	f8 85       	ldd	r31, Y+8	; 0x08
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	8d 81       	ldd	r24, Y+5	; 0x05
    2f12:	9e 81       	ldd	r25, Y+6	; 0x06
    2f14:	fc 01       	movw	r30, r24
    2f16:	e2 0f       	add	r30, r18
    2f18:	f3 1f       	adc	r31, r19
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 23       	and	r24, r24
    2f1e:	39 f6       	brne	.-114    	; 0x2eae <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    2f20:	28 96       	adiw	r28, 0x08	; 8
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	2e 97       	sbiw	r28, 0x0e	; 14
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	a0 e0       	ldi	r26, 0x00	; 0
    2f52:	b0 e4       	ldi	r27, 0x40	; 64
    2f54:	8b 87       	std	Y+11, r24	; 0x0b
    2f56:	9c 87       	std	Y+12, r25	; 0x0c
    2f58:	ad 87       	std	Y+13, r26	; 0x0d
    2f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	4a e7       	ldi	r20, 0x7A	; 122
    2f6a:	55 e4       	ldi	r21, 0x45	; 69
    2f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	8f 83       	std	Y+7, r24	; 0x07
    2f76:	98 87       	std	Y+8, r25	; 0x08
    2f78:	a9 87       	std	Y+9, r26	; 0x09
    2f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7e:	78 85       	ldd	r23, Y+8	; 0x08
    2f80:	89 85       	ldd	r24, Y+9	; 0x09
    2f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e8       	ldi	r20, 0x80	; 128
    2f8a:	5f e3       	ldi	r21, 0x3F	; 63
    2f8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f90:	88 23       	and	r24, r24
    2f92:	2c f4       	brge	.+10     	; 0x2f9e <LCD_ClearScreen+0x6c>
		__ticks = 1;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	3f c0       	rjmp	.+126    	; 0x301c <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    2f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa0:	78 85       	ldd	r23, Y+8	; 0x08
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	3f ef       	ldi	r19, 0xFF	; 255
    2faa:	4f e7       	ldi	r20, 0x7F	; 127
    2fac:	57 e4       	ldi	r21, 0x47	; 71
    2fae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fb2:	18 16       	cp	r1, r24
    2fb4:	4c f5       	brge	.+82     	; 0x3008 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e2       	ldi	r20, 0x20	; 32
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	bc 01       	movw	r22, r24
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	0f c0       	rjmp	.+30     	; 0x2ffe <LCD_ClearScreen+0xcc>
    2fe0:	80 e9       	ldi	r24, 0x90	; 144
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	9c 83       	std	Y+4, r25	; 0x04
    2fe6:	8b 83       	std	Y+3, r24	; 0x03
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	9c 81       	ldd	r25, Y+4	; 0x04
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <LCD_ClearScreen+0xba>
    2ff0:	9c 83       	std	Y+4, r25	; 0x04
    2ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	69 f7       	brne	.-38     	; 0x2fe0 <LCD_ClearScreen+0xae>
    3006:	14 c0       	rjmp	.+40     	; 0x3030 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3008:	6f 81       	ldd	r22, Y+7	; 0x07
    300a:	78 85       	ldd	r23, Y+8	; 0x08
    300c:	89 85       	ldd	r24, Y+9	; 0x09
    300e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3010:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	9e 83       	std	Y+6, r25	; 0x06
    301a:	8d 83       	std	Y+5, r24	; 0x05
    301c:	8d 81       	ldd	r24, Y+5	; 0x05
    301e:	9e 81       	ldd	r25, Y+6	; 0x06
    3020:	9a 83       	std	Y+2, r25	; 0x02
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <LCD_ClearScreen+0xf6>
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3030:	2e 96       	adiw	r28, 0x0e	; 14
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	2e 97       	sbiw	r28, 0x0e	; 14
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3056:	88 e1       	ldi	r24, 0x18	; 24
    3058:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	a0 ea       	ldi	r26, 0xA0	; 160
    3062:	b1 e4       	ldi	r27, 0x41	; 65
    3064:	8b 87       	std	Y+11, r24	; 0x0b
    3066:	9c 87       	std	Y+12, r25	; 0x0c
    3068:	ad 87       	std	Y+13, r26	; 0x0d
    306a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306c:	6b 85       	ldd	r22, Y+11	; 0x0b
    306e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3070:	8d 85       	ldd	r24, Y+13	; 0x0d
    3072:	9e 85       	ldd	r25, Y+14	; 0x0e
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	4a e7       	ldi	r20, 0x7A	; 122
    307a:	55 e4       	ldi	r21, 0x45	; 69
    307c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	8f 83       	std	Y+7, r24	; 0x07
    3086:	98 87       	std	Y+8, r25	; 0x08
    3088:	a9 87       	std	Y+9, r26	; 0x09
    308a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    308c:	6f 81       	ldd	r22, Y+7	; 0x07
    308e:	78 85       	ldd	r23, Y+8	; 0x08
    3090:	89 85       	ldd	r24, Y+9	; 0x09
    3092:	9a 85       	ldd	r25, Y+10	; 0x0a
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e8       	ldi	r20, 0x80	; 128
    309a:	5f e3       	ldi	r21, 0x3F	; 63
    309c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30a0:	88 23       	and	r24, r24
    30a2:	2c f4       	brge	.+10     	; 0x30ae <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	9e 83       	std	Y+6, r25	; 0x06
    30aa:	8d 83       	std	Y+5, r24	; 0x05
    30ac:	3f c0       	rjmp	.+126    	; 0x312c <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    30ae:	6f 81       	ldd	r22, Y+7	; 0x07
    30b0:	78 85       	ldd	r23, Y+8	; 0x08
    30b2:	89 85       	ldd	r24, Y+9	; 0x09
    30b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	3f ef       	ldi	r19, 0xFF	; 255
    30ba:	4f e7       	ldi	r20, 0x7F	; 127
    30bc:	57 e4       	ldi	r21, 0x47	; 71
    30be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30c2:	18 16       	cp	r1, r24
    30c4:	4c f5       	brge	.+82     	; 0x3118 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    30cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e2       	ldi	r20, 0x20	; 32
    30d4:	51 e4       	ldi	r21, 0x41	; 65
    30d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	9e 83       	std	Y+6, r25	; 0x06
    30ec:	8d 83       	std	Y+5, r24	; 0x05
    30ee:	0f c0       	rjmp	.+30     	; 0x310e <LCD_ShiftingLeft+0xcc>
    30f0:	80 e9       	ldi	r24, 0x90	; 144
    30f2:	91 e0       	ldi	r25, 0x01	; 1
    30f4:	9c 83       	std	Y+4, r25	; 0x04
    30f6:	8b 83       	std	Y+3, r24	; 0x03
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9c 81       	ldd	r25, Y+4	; 0x04
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <LCD_ShiftingLeft+0xba>
    3100:	9c 83       	std	Y+4, r25	; 0x04
    3102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3104:	8d 81       	ldd	r24, Y+5	; 0x05
    3106:	9e 81       	ldd	r25, Y+6	; 0x06
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	9e 83       	std	Y+6, r25	; 0x06
    310c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	9e 81       	ldd	r25, Y+6	; 0x06
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	69 f7       	brne	.-38     	; 0x30f0 <LCD_ShiftingLeft+0xae>
    3116:	14 c0       	rjmp	.+40     	; 0x3140 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3118:	6f 81       	ldd	r22, Y+7	; 0x07
    311a:	78 85       	ldd	r23, Y+8	; 0x08
    311c:	89 85       	ldd	r24, Y+9	; 0x09
    311e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	9e 83       	std	Y+6, r25	; 0x06
    312a:	8d 83       	std	Y+5, r24	; 0x05
    312c:	8d 81       	ldd	r24, Y+5	; 0x05
    312e:	9e 81       	ldd	r25, Y+6	; 0x06
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	89 83       	std	Y+1, r24	; 0x01
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	9a 81       	ldd	r25, Y+2	; 0x02
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <LCD_ShiftingLeft+0xf6>
    313c:	9a 83       	std	Y+2, r25	; 0x02
    313e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3140:	2e 96       	adiw	r28, 0x0e	; 14
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	2e 97       	sbiw	r28, 0x0e	; 14
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3166:	8c e1       	ldi	r24, 0x1C	; 28
    3168:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a0 ea       	ldi	r26, 0xA0	; 160
    3172:	b1 e4       	ldi	r27, 0x41	; 65
    3174:	8b 87       	std	Y+11, r24	; 0x0b
    3176:	9c 87       	std	Y+12, r25	; 0x0c
    3178:	ad 87       	std	Y+13, r26	; 0x0d
    317a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317c:	6b 85       	ldd	r22, Y+11	; 0x0b
    317e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3180:	8d 85       	ldd	r24, Y+13	; 0x0d
    3182:	9e 85       	ldd	r25, Y+14	; 0x0e
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4a e7       	ldi	r20, 0x7A	; 122
    318a:	55 e4       	ldi	r21, 0x45	; 69
    318c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	8f 83       	std	Y+7, r24	; 0x07
    3196:	98 87       	std	Y+8, r25	; 0x08
    3198:	a9 87       	std	Y+9, r26	; 0x09
    319a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    319c:	6f 81       	ldd	r22, Y+7	; 0x07
    319e:	78 85       	ldd	r23, Y+8	; 0x08
    31a0:	89 85       	ldd	r24, Y+9	; 0x09
    31a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e8       	ldi	r20, 0x80	; 128
    31aa:	5f e3       	ldi	r21, 0x3F	; 63
    31ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31b0:	88 23       	and	r24, r24
    31b2:	2c f4       	brge	.+10     	; 0x31be <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	3f c0       	rjmp	.+126    	; 0x323c <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    31be:	6f 81       	ldd	r22, Y+7	; 0x07
    31c0:	78 85       	ldd	r23, Y+8	; 0x08
    31c2:	89 85       	ldd	r24, Y+9	; 0x09
    31c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	3f ef       	ldi	r19, 0xFF	; 255
    31ca:	4f e7       	ldi	r20, 0x7F	; 127
    31cc:	57 e4       	ldi	r21, 0x47	; 71
    31ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31d2:	18 16       	cp	r1, r24
    31d4:	4c f5       	brge	.+82     	; 0x3228 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31da:	8d 85       	ldd	r24, Y+13	; 0x0d
    31dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e2       	ldi	r20, 0x20	; 32
    31e4:	51 e4       	ldi	r21, 0x41	; 65
    31e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	bc 01       	movw	r22, r24
    31f0:	cd 01       	movw	r24, r26
    31f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	9e 83       	std	Y+6, r25	; 0x06
    31fc:	8d 83       	std	Y+5, r24	; 0x05
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <LCD_ShiftingRight+0xcc>
    3200:	80 e9       	ldi	r24, 0x90	; 144
    3202:	91 e0       	ldi	r25, 0x01	; 1
    3204:	9c 83       	std	Y+4, r25	; 0x04
    3206:	8b 83       	std	Y+3, r24	; 0x03
    3208:	8b 81       	ldd	r24, Y+3	; 0x03
    320a:	9c 81       	ldd	r25, Y+4	; 0x04
    320c:	01 97       	sbiw	r24, 0x01	; 1
    320e:	f1 f7       	brne	.-4      	; 0x320c <LCD_ShiftingRight+0xba>
    3210:	9c 83       	std	Y+4, r25	; 0x04
    3212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	9e 83       	std	Y+6, r25	; 0x06
    321c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	69 f7       	brne	.-38     	; 0x3200 <LCD_ShiftingRight+0xae>
    3226:	14 c0       	rjmp	.+40     	; 0x3250 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3228:	6f 81       	ldd	r22, Y+7	; 0x07
    322a:	78 85       	ldd	r23, Y+8	; 0x08
    322c:	89 85       	ldd	r24, Y+9	; 0x09
    322e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9e 83       	std	Y+6, r25	; 0x06
    323a:	8d 83       	std	Y+5, r24	; 0x05
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	9a 81       	ldd	r25, Y+2	; 0x02
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <LCD_ShiftingRight+0xf6>
    324c:	9a 83       	std	Y+2, r25	; 0x02
    324e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3250:	2e 96       	adiw	r28, 0x0e	; 14
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	08 95       	ret

00003262 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3262:	0f 93       	push	r16
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	28 97       	sbiw	r28, 0x08	; 8
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
    3278:	8b 83       	std	Y+3, r24	; 0x03
    327a:	7d 83       	std	Y+5, r23	; 0x05
    327c:	6c 83       	std	Y+4, r22	; 0x04
    327e:	4e 83       	std	Y+6, r20	; 0x06
    3280:	2f 83       	std	Y+7, r18	; 0x07
    3282:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3284:	88 85       	ldd	r24, Y+8	; 0x08
    3286:	0e 94 5f 12 	call	0x24be	; 0x24be <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    328a:	1a 82       	std	Y+2, r1	; 0x02
    328c:	19 82       	std	Y+1, r1	; 0x01
    328e:	0f c0       	rjmp	.+30     	; 0x32ae <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3290:	29 81       	ldd	r18, Y+1	; 0x01
    3292:	3a 81       	ldd	r19, Y+2	; 0x02
    3294:	8c 81       	ldd	r24, Y+4	; 0x04
    3296:	9d 81       	ldd	r25, Y+5	; 0x05
    3298:	fc 01       	movw	r30, r24
    329a:	e2 0f       	add	r30, r18
    329c:	f3 1f       	adc	r31, r19
    329e:	80 81       	ld	r24, Z
    32a0:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	01 96       	adiw	r24, 0x01	; 1
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	88 30       	cpi	r24, 0x08	; 8
    32b4:	91 05       	cpc	r25, r1
    32b6:	64 f3       	brlt	.-40     	; 0x3290 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    32b8:	8e 81       	ldd	r24, Y+6	; 0x06
    32ba:	6f 81       	ldd	r22, Y+7	; 0x07
    32bc:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    32c6:	8f 81       	ldd	r24, Y+7	; 0x07
    32c8:	80 31       	cpi	r24, 0x10	; 16
    32ca:	48 f0       	brcs	.+18     	; 0x32de <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    32cc:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
	}
}
    32de:	28 96       	adiw	r28, 0x08	; 8
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	0f 91       	pop	r16
    32f0:	08 95       	ret

000032f2 <First_Screen>:
#include<util/delay.h>
#define F_CPU 16000000UL

#define Password_Length	6

void First_Screen(){
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	2e 97       	sbiw	r28, 0x0e	; 14
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	f8 94       	cli
    3300:	de bf       	out	0x3e, r29	; 62
    3302:	0f be       	out	0x3f, r0	; 63
    3304:	cd bf       	out	0x3d, r28	; 61
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	ac e0       	ldi	r26, 0x0C	; 12
    330c:	b2 e4       	ldi	r27, 0x42	; 66
    330e:	8b 87       	std	Y+11, r24	; 0x0b
    3310:	9c 87       	std	Y+12, r25	; 0x0c
    3312:	ad 87       	std	Y+13, r26	; 0x0d
    3314:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3316:	6b 85       	ldd	r22, Y+11	; 0x0b
    3318:	7c 85       	ldd	r23, Y+12	; 0x0c
    331a:	8d 85       	ldd	r24, Y+13	; 0x0d
    331c:	9e 85       	ldd	r25, Y+14	; 0x0e
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	4a e7       	ldi	r20, 0x7A	; 122
    3324:	55 e4       	ldi	r21, 0x45	; 69
    3326:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	8f 83       	std	Y+7, r24	; 0x07
    3330:	98 87       	std	Y+8, r25	; 0x08
    3332:	a9 87       	std	Y+9, r26	; 0x09
    3334:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3336:	6f 81       	ldd	r22, Y+7	; 0x07
    3338:	78 85       	ldd	r23, Y+8	; 0x08
    333a:	89 85       	ldd	r24, Y+9	; 0x09
    333c:	9a 85       	ldd	r25, Y+10	; 0x0a
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e8       	ldi	r20, 0x80	; 128
    3344:	5f e3       	ldi	r21, 0x3F	; 63
    3346:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    334a:	88 23       	and	r24, r24
    334c:	2c f4       	brge	.+10     	; 0x3358 <First_Screen+0x66>
		__ticks = 1;
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	8d 83       	std	Y+5, r24	; 0x05
    3356:	3f c0       	rjmp	.+126    	; 0x33d6 <First_Screen+0xe4>
	else if (__tmp > 65535)
    3358:	6f 81       	ldd	r22, Y+7	; 0x07
    335a:	78 85       	ldd	r23, Y+8	; 0x08
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	3f ef       	ldi	r19, 0xFF	; 255
    3364:	4f e7       	ldi	r20, 0x7F	; 127
    3366:	57 e4       	ldi	r21, 0x47	; 71
    3368:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    336c:	18 16       	cp	r1, r24
    336e:	4c f5       	brge	.+82     	; 0x33c2 <First_Screen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3370:	6b 85       	ldd	r22, Y+11	; 0x0b
    3372:	7c 85       	ldd	r23, Y+12	; 0x0c
    3374:	8d 85       	ldd	r24, Y+13	; 0x0d
    3376:	9e 85       	ldd	r25, Y+14	; 0x0e
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	9e 83       	std	Y+6, r25	; 0x06
    3396:	8d 83       	std	Y+5, r24	; 0x05
    3398:	0f c0       	rjmp	.+30     	; 0x33b8 <First_Screen+0xc6>
    339a:	80 e9       	ldi	r24, 0x90	; 144
    339c:	91 e0       	ldi	r25, 0x01	; 1
    339e:	9c 83       	std	Y+4, r25	; 0x04
    33a0:	8b 83       	std	Y+3, r24	; 0x03
    33a2:	8b 81       	ldd	r24, Y+3	; 0x03
    33a4:	9c 81       	ldd	r25, Y+4	; 0x04
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <First_Screen+0xb4>
    33aa:	9c 83       	std	Y+4, r25	; 0x04
    33ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ae:	8d 81       	ldd	r24, Y+5	; 0x05
    33b0:	9e 81       	ldd	r25, Y+6	; 0x06
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	9e 83       	std	Y+6, r25	; 0x06
    33b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ba:	9e 81       	ldd	r25, Y+6	; 0x06
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	69 f7       	brne	.-38     	; 0x339a <First_Screen+0xa8>
    33c0:	14 c0       	rjmp	.+40     	; 0x33ea <First_Screen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c2:	6f 81       	ldd	r22, Y+7	; 0x07
    33c4:	78 85       	ldd	r23, Y+8	; 0x08
    33c6:	89 85       	ldd	r24, Y+9	; 0x09
    33c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	8d 81       	ldd	r24, Y+5	; 0x05
    33d8:	9e 81       	ldd	r25, Y+6	; 0x06
    33da:	9a 83       	std	Y+2, r25	; 0x02
    33dc:	89 83       	std	Y+1, r24	; 0x01
    33de:	89 81       	ldd	r24, Y+1	; 0x01
    33e0:	9a 81       	ldd	r25, Y+2	; 0x02
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <First_Screen+0xf0>
    33e6:	9a 83       	std	Y+2, r25	; 0x02
    33e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_ClearScreen();
    33ea:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>
	LCD_displayString("1-DC Motor");
    33ee:	80 e6       	ldi	r24, 0x60	; 96
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
	LCD_GoToXY(1, 0);
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	60 e0       	ldi	r22, 0x00	; 0
    33fa:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
	LCD_displayString("2-Stepper");
    33fe:	8b e6       	ldi	r24, 0x6B	; 107
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
	LCD_GoToXY(1, 10);
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	6a e0       	ldi	r22, 0x0A	; 10
    340a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
	LCD_displayString("3-Exit");
    340e:	85 e7       	ldi	r24, 0x75	; 117
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
}
    3416:	2e 96       	adiw	r28, 0x0e	; 14
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <Second_Screen>:

void Second_Screen(){
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    3430:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>
	LCD_displayString("1-CW Motor");
    3434:	8c e7       	ldi	r24, 0x7C	; 124
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
	LCD_GoToXY(1, 0);
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	60 e0       	ldi	r22, 0x00	; 0
    3440:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
	LCD_displayString("2-CCW Motor");
    3444:	87 e8       	ldi	r24, 0x87	; 135
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
	LCD_GoToXY(0, 10);
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	6a e0       	ldi	r22, 0x0A	; 10
    3450:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
	LCD_displayString("3-back");
    3454:	83 e9       	ldi	r24, 0x93	; 147
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
}
    345c:	cf 91       	pop	r28
    345e:	df 91       	pop	r29
    3460:	08 95       	ret

00003462 <StepperAngles_Screen>:

void StepperAngles_Screen(){
    3462:	df 93       	push	r29
    3464:	cf 93       	push	r28
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    346a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>

	LCD_displayString("1-90");
    346e:	8a e9       	ldi	r24, 0x9A	; 154
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>

	LCD_GoToXY(1, 0);
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
	LCD_displayString("2-180");
    347e:	8f e9       	ldi	r24, 0x9F	; 159
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
}
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	08 95       	ret

0000348c <StepperDirection_Screen>:

void StepperDirection_Screen(){
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    3494:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>

	LCD_displayString("1-CW");
    3498:	85 ea       	ldi	r24, 0xA5	; 165
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>

	LCD_GoToXY(1, 0);
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
	LCD_displayString("2-CCW");
    34a8:	8a ea       	ldi	r24, 0xAA	; 170
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
}
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <main>:

int main(){
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	c5 51       	subi	r28, 0x15	; 21
    34c4:	d1 40       	sbci	r29, 0x01	; 1
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(1, 1);
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	70 e0       	ldi	r23, 0x00	; 0
    34d8:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_u8SetPortDirection>
	DC_Motor_Init(1, 1);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	61 e0       	ldi	r22, 0x01	; 1
    34e0:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <DC_Motor_Init>

	Stepper_Init();
    34e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <Stepper_Init>


	u8 count;
	u8 c = 0;
    34e8:	fe 01       	movw	r30, r28
    34ea:	e7 50       	subi	r30, 0x07	; 7
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	10 82       	st	Z, r1
	LCD_setPortDirection(0, 0);
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	0e 94 06 11 	call	0x220c	; 0x220c <LCD_setPortDirection>
	LCD_setPortDirection(2, 1);
    34fc:	82 e0       	ldi	r24, 0x02	; 2
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	61 e0       	ldi	r22, 0x01	; 1
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	0e 94 06 11 	call	0x220c	; 0x220c <LCD_setPortDirection>
	LCD_setPortDirection(3, 1);
    3508:	83 e0       	ldi	r24, 0x03	; 3
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	61 e0       	ldi	r22, 0x01	; 1
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	0e 94 06 11 	call	0x220c	; 0x220c <LCD_setPortDirection>
	LCD_init();
    3514:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LCD_init>

	u8 pressed_Keys[10];
	u8 password[10] = "#2020#";
    3518:	ce 01       	movw	r24, r28
    351a:	8b 5f       	subi	r24, 0xFB	; 251
    351c:	9e 4f       	sbci	r25, 0xFE	; 254
    351e:	c1 5f       	subi	r28, 0xF1	; 241
    3520:	de 4f       	sbci	r29, 0xFE	; 254
    3522:	99 83       	std	Y+1, r25	; 0x01
    3524:	88 83       	st	Y, r24
    3526:	cf 50       	subi	r28, 0x0F	; 15
    3528:	d1 40       	sbci	r29, 0x01	; 1
    352a:	c1 5f       	subi	r28, 0xF1	; 241
    352c:	de 4f       	sbci	r29, 0xFE	; 254
    352e:	a8 81       	ld	r26, Y
    3530:	b9 81       	ldd	r27, Y+1	; 0x01
    3532:	cf 50       	subi	r28, 0x0F	; 15
    3534:	d1 40       	sbci	r29, 0x01	; 1
    3536:	cf 5e       	subi	r28, 0xEF	; 239
    3538:	de 4f       	sbci	r29, 0xFE	; 254
    353a:	b9 83       	std	Y+1, r27	; 0x01
    353c:	a8 83       	st	Y, r26
    353e:	c1 51       	subi	r28, 0x11	; 17
    3540:	d1 40       	sbci	r29, 0x01	; 1
    3542:	e1 ef       	ldi	r30, 0xF1	; 241
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	cd 5e       	subi	r28, 0xED	; 237
    3548:	de 4f       	sbci	r29, 0xFE	; 254
    354a:	f9 83       	std	Y+1, r31	; 0x01
    354c:	e8 83       	st	Y, r30
    354e:	c3 51       	subi	r28, 0x13	; 19
    3550:	d1 40       	sbci	r29, 0x01	; 1
    3552:	f7 e0       	ldi	r31, 0x07	; 7
    3554:	cb 5e       	subi	r28, 0xEB	; 235
    3556:	de 4f       	sbci	r29, 0xFE	; 254
    3558:	f8 83       	st	Y, r31
    355a:	c5 51       	subi	r28, 0x15	; 21
    355c:	d1 40       	sbci	r29, 0x01	; 1
    355e:	cd 5e       	subi	r28, 0xED	; 237
    3560:	de 4f       	sbci	r29, 0xFE	; 254
    3562:	a8 81       	ld	r26, Y
    3564:	b9 81       	ldd	r27, Y+1	; 0x01
    3566:	c3 51       	subi	r28, 0x13	; 19
    3568:	d1 40       	sbci	r29, 0x01	; 1
    356a:	0c 90       	ld	r0, X
    356c:	cd 5e       	subi	r28, 0xED	; 237
    356e:	de 4f       	sbci	r29, 0xFE	; 254
    3570:	e8 81       	ld	r30, Y
    3572:	f9 81       	ldd	r31, Y+1	; 0x01
    3574:	c3 51       	subi	r28, 0x13	; 19
    3576:	d1 40       	sbci	r29, 0x01	; 1
    3578:	31 96       	adiw	r30, 0x01	; 1
    357a:	cd 5e       	subi	r28, 0xED	; 237
    357c:	de 4f       	sbci	r29, 0xFE	; 254
    357e:	f9 83       	std	Y+1, r31	; 0x01
    3580:	e8 83       	st	Y, r30
    3582:	c3 51       	subi	r28, 0x13	; 19
    3584:	d1 40       	sbci	r29, 0x01	; 1
    3586:	cf 5e       	subi	r28, 0xEF	; 239
    3588:	de 4f       	sbci	r29, 0xFE	; 254
    358a:	a8 81       	ld	r26, Y
    358c:	b9 81       	ldd	r27, Y+1	; 0x01
    358e:	c1 51       	subi	r28, 0x11	; 17
    3590:	d1 40       	sbci	r29, 0x01	; 1
    3592:	0c 92       	st	X, r0
    3594:	cf 5e       	subi	r28, 0xEF	; 239
    3596:	de 4f       	sbci	r29, 0xFE	; 254
    3598:	e8 81       	ld	r30, Y
    359a:	f9 81       	ldd	r31, Y+1	; 0x01
    359c:	c1 51       	subi	r28, 0x11	; 17
    359e:	d1 40       	sbci	r29, 0x01	; 1
    35a0:	31 96       	adiw	r30, 0x01	; 1
    35a2:	cf 5e       	subi	r28, 0xEF	; 239
    35a4:	de 4f       	sbci	r29, 0xFE	; 254
    35a6:	f9 83       	std	Y+1, r31	; 0x01
    35a8:	e8 83       	st	Y, r30
    35aa:	c1 51       	subi	r28, 0x11	; 17
    35ac:	d1 40       	sbci	r29, 0x01	; 1
    35ae:	cb 5e       	subi	r28, 0xEB	; 235
    35b0:	de 4f       	sbci	r29, 0xFE	; 254
    35b2:	f8 81       	ld	r31, Y
    35b4:	c5 51       	subi	r28, 0x15	; 21
    35b6:	d1 40       	sbci	r29, 0x01	; 1
    35b8:	f1 50       	subi	r31, 0x01	; 1
    35ba:	cb 5e       	subi	r28, 0xEB	; 235
    35bc:	de 4f       	sbci	r29, 0xFE	; 254
    35be:	f8 83       	st	Y, r31
    35c0:	c5 51       	subi	r28, 0x15	; 21
    35c2:	d1 40       	sbci	r29, 0x01	; 1
    35c4:	cb 5e       	subi	r28, 0xEB	; 235
    35c6:	de 4f       	sbci	r29, 0xFE	; 254
    35c8:	88 81       	ld	r24, Y
    35ca:	c5 51       	subi	r28, 0x15	; 21
    35cc:	d1 40       	sbci	r29, 0x01	; 1
    35ce:	88 23       	and	r24, r24
    35d0:	31 f6       	brne	.-116    	; 0x355e <main+0xa8>
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	c1 5f       	subi	r28, 0xF1	; 241
    35d6:	de 4f       	sbci	r29, 0xFE	; 254
    35d8:	e8 81       	ld	r30, Y
    35da:	f9 81       	ldd	r31, Y+1	; 0x01
    35dc:	cf 50       	subi	r28, 0x0F	; 15
    35de:	d1 40       	sbci	r29, 0x01	; 1
    35e0:	37 96       	adiw	r30, 0x07	; 7
    35e2:	df 01       	movw	r26, r30
    35e4:	98 2f       	mov	r25, r24
    35e6:	1d 92       	st	X+, r1
    35e8:	9a 95       	dec	r25
    35ea:	e9 f7       	brne	.-6      	; 0x35e6 <main+0x130>

	LCD_String_xy(0, 0, "Enter Password", &count);
    35ec:	20 eb       	ldi	r18, 0xB0	; 176
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	fe 01       	movw	r30, r28
    35f2:	e6 50       	subi	r30, 0x06	; 6
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	a9 01       	movw	r20, r18
    35fc:	9f 01       	movw	r18, r30
    35fe:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <LCD_String_xy>
	LCD_GoToXY(1, 0);
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>


	while(1){
		u8 key_Pressed = Keypad_GetPressedKey();
    360a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Keypad_GetPressedKey>
    360e:	fe 01       	movw	r30, r28
    3610:	e8 50       	subi	r30, 0x08	; 8
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 83       	st	Z, r24

		if(key_Pressed == 1){
    3616:	fe 01       	movw	r30, r28
    3618:	e8 50       	subi	r30, 0x08	; 8
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	80 81       	ld	r24, Z
    361e:	81 30       	cpi	r24, 0x01	; 1
    3620:	09 f0       	breq	.+2      	; 0x3624 <main+0x16e>
    3622:	ce c0       	rjmp	.+412    	; 0x37c0 <main+0x30a>
			LCD_displayCharacter('*');
    3624:	8a e2       	ldi	r24, 0x2A	; 42
    3626:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '1';
    362a:	fe 01       	movw	r30, r28
    362c:	e7 50       	subi	r30, 0x07	; 7
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	80 81       	ld	r24, Z
    3632:	28 2f       	mov	r18, r24
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	ce 01       	movw	r24, r28
    3638:	85 50       	subi	r24, 0x05	; 5
    363a:	9f 4f       	sbci	r25, 0xFF	; 255
    363c:	fc 01       	movw	r30, r24
    363e:	e2 0f       	add	r30, r18
    3640:	f3 1f       	adc	r31, r19
    3642:	81 e3       	ldi	r24, 0x31	; 49
    3644:	80 83       	st	Z, r24
			c++;
    3646:	de 01       	movw	r26, r28
    3648:	a7 50       	subi	r26, 0x07	; 7
    364a:	bf 4f       	sbci	r27, 0xFF	; 255
    364c:	fe 01       	movw	r30, r28
    364e:	e7 50       	subi	r30, 0x07	; 7
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	80 81       	ld	r24, Z
    3654:	8f 5f       	subi	r24, 0xFF	; 255
    3656:	8c 93       	st	X, r24
    3658:	fe 01       	movw	r30, r28
    365a:	e5 51       	subi	r30, 0x15	; 21
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	ac e0       	ldi	r26, 0x0C	; 12
    3664:	b2 e4       	ldi	r27, 0x42	; 66
    3666:	80 83       	st	Z, r24
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	a2 83       	std	Z+2, r26	; 0x02
    366c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    366e:	8e 01       	movw	r16, r28
    3670:	09 51       	subi	r16, 0x19	; 25
    3672:	1f 4f       	sbci	r17, 0xFF	; 255
    3674:	fe 01       	movw	r30, r28
    3676:	e5 51       	subi	r30, 0x15	; 21
    3678:	ff 4f       	sbci	r31, 0xFF	; 255
    367a:	60 81       	ld	r22, Z
    367c:	71 81       	ldd	r23, Z+1	; 0x01
    367e:	82 81       	ldd	r24, Z+2	; 0x02
    3680:	93 81       	ldd	r25, Z+3	; 0x03
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	4a e7       	ldi	r20, 0x7A	; 122
    3688:	55 e4       	ldi	r21, 0x45	; 69
    368a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	f8 01       	movw	r30, r16
    3694:	80 83       	st	Z, r24
    3696:	91 83       	std	Z+1, r25	; 0x01
    3698:	a2 83       	std	Z+2, r26	; 0x02
    369a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    369c:	fe 01       	movw	r30, r28
    369e:	e9 51       	subi	r30, 0x19	; 25
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	60 81       	ld	r22, Z
    36a4:	71 81       	ldd	r23, Z+1	; 0x01
    36a6:	82 81       	ldd	r24, Z+2	; 0x02
    36a8:	93 81       	ldd	r25, Z+3	; 0x03
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	5f e3       	ldi	r21, 0x3F	; 63
    36b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    36b6:	88 23       	and	r24, r24
    36b8:	44 f4       	brge	.+16     	; 0x36ca <main+0x214>
		__ticks = 1;
    36ba:	fe 01       	movw	r30, r28
    36bc:	eb 51       	subi	r30, 0x1B	; 27
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	91 83       	std	Z+1, r25	; 0x01
    36c6:	80 83       	st	Z, r24
    36c8:	64 c0       	rjmp	.+200    	; 0x3792 <main+0x2dc>
	else if (__tmp > 65535)
    36ca:	fe 01       	movw	r30, r28
    36cc:	e9 51       	subi	r30, 0x19	; 25
    36ce:	ff 4f       	sbci	r31, 0xFF	; 255
    36d0:	60 81       	ld	r22, Z
    36d2:	71 81       	ldd	r23, Z+1	; 0x01
    36d4:	82 81       	ldd	r24, Z+2	; 0x02
    36d6:	93 81       	ldd	r25, Z+3	; 0x03
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	3f ef       	ldi	r19, 0xFF	; 255
    36dc:	4f e7       	ldi	r20, 0x7F	; 127
    36de:	57 e4       	ldi	r21, 0x47	; 71
    36e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    36e4:	18 16       	cp	r1, r24
    36e6:	0c f0       	brlt	.+2      	; 0x36ea <main+0x234>
    36e8:	43 c0       	rjmp	.+134    	; 0x3770 <main+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ea:	fe 01       	movw	r30, r28
    36ec:	e5 51       	subi	r30, 0x15	; 21
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	82 81       	ldd	r24, Z+2	; 0x02
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e2       	ldi	r20, 0x20	; 32
    36fe:	51 e4       	ldi	r21, 0x41	; 65
    3700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	8e 01       	movw	r16, r28
    370a:	0b 51       	subi	r16, 0x1B	; 27
    370c:	1f 4f       	sbci	r17, 0xFF	; 255
    370e:	bc 01       	movw	r22, r24
    3710:	cd 01       	movw	r24, r26
    3712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	f8 01       	movw	r30, r16
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	80 83       	st	Z, r24
    3720:	1f c0       	rjmp	.+62     	; 0x3760 <main+0x2aa>
    3722:	fe 01       	movw	r30, r28
    3724:	ed 51       	subi	r30, 0x1D	; 29
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	80 e9       	ldi	r24, 0x90	; 144
    372a:	91 e0       	ldi	r25, 0x01	; 1
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	80 83       	st	Z, r24
    3730:	fe 01       	movw	r30, r28
    3732:	ed 51       	subi	r30, 0x1D	; 29
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 81       	ld	r24, Z
    3738:	91 81       	ldd	r25, Z+1	; 0x01
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <main+0x284>
    373e:	fe 01       	movw	r30, r28
    3740:	ed 51       	subi	r30, 0x1D	; 29
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3748:	de 01       	movw	r26, r28
    374a:	ab 51       	subi	r26, 0x1B	; 27
    374c:	bf 4f       	sbci	r27, 0xFF	; 255
    374e:	fe 01       	movw	r30, r28
    3750:	eb 51       	subi	r30, 0x1B	; 27
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	11 96       	adiw	r26, 0x01	; 1
    375c:	9c 93       	st	X, r25
    375e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3760:	fe 01       	movw	r30, r28
    3762:	eb 51       	subi	r30, 0x1B	; 27
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	80 81       	ld	r24, Z
    3768:	91 81       	ldd	r25, Z+1	; 0x01
    376a:	00 97       	sbiw	r24, 0x00	; 0
    376c:	d1 f6       	brne	.-76     	; 0x3722 <main+0x26c>
    376e:	28 c0       	rjmp	.+80     	; 0x37c0 <main+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3770:	8e 01       	movw	r16, r28
    3772:	0b 51       	subi	r16, 0x1B	; 27
    3774:	1f 4f       	sbci	r17, 0xFF	; 255
    3776:	fe 01       	movw	r30, r28
    3778:	e9 51       	subi	r30, 0x19	; 25
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	60 81       	ld	r22, Z
    377e:	71 81       	ldd	r23, Z+1	; 0x01
    3780:	82 81       	ldd	r24, Z+2	; 0x02
    3782:	93 81       	ldd	r25, Z+3	; 0x03
    3784:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	f8 01       	movw	r30, r16
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	80 83       	st	Z, r24
    3792:	de 01       	movw	r26, r28
    3794:	af 51       	subi	r26, 0x1F	; 31
    3796:	bf 4f       	sbci	r27, 0xFF	; 255
    3798:	fe 01       	movw	r30, r28
    379a:	eb 51       	subi	r30, 0x1B	; 27
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	80 81       	ld	r24, Z
    37a0:	91 81       	ldd	r25, Z+1	; 0x01
    37a2:	11 96       	adiw	r26, 0x01	; 1
    37a4:	9c 93       	st	X, r25
    37a6:	8e 93       	st	-X, r24
    37a8:	fe 01       	movw	r30, r28
    37aa:	ef 51       	subi	r30, 0x1F	; 31
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	80 81       	ld	r24, Z
    37b0:	91 81       	ldd	r25, Z+1	; 0x01
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <main+0x2fc>
    37b6:	fe 01       	movw	r30, r28
    37b8:	ef 51       	subi	r30, 0x1F	; 31
    37ba:	ff 4f       	sbci	r31, 0xFF	; 255
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 2){
    37c0:	fe 01       	movw	r30, r28
    37c2:	e8 50       	subi	r30, 0x08	; 8
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	80 81       	ld	r24, Z
    37c8:	82 30       	cpi	r24, 0x02	; 2
    37ca:	09 f0       	breq	.+2      	; 0x37ce <main+0x318>
    37cc:	ce c0       	rjmp	.+412    	; 0x396a <main+0x4b4>
			LCD_displayCharacter('*');
    37ce:	8a e2       	ldi	r24, 0x2A	; 42
    37d0:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '2';
    37d4:	fe 01       	movw	r30, r28
    37d6:	e7 50       	subi	r30, 0x07	; 7
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	28 2f       	mov	r18, r24
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	ce 01       	movw	r24, r28
    37e2:	85 50       	subi	r24, 0x05	; 5
    37e4:	9f 4f       	sbci	r25, 0xFF	; 255
    37e6:	fc 01       	movw	r30, r24
    37e8:	e2 0f       	add	r30, r18
    37ea:	f3 1f       	adc	r31, r19
    37ec:	82 e3       	ldi	r24, 0x32	; 50
    37ee:	80 83       	st	Z, r24
			c++;
    37f0:	de 01       	movw	r26, r28
    37f2:	a7 50       	subi	r26, 0x07	; 7
    37f4:	bf 4f       	sbci	r27, 0xFF	; 255
    37f6:	fe 01       	movw	r30, r28
    37f8:	e7 50       	subi	r30, 0x07	; 7
    37fa:	ff 4f       	sbci	r31, 0xFF	; 255
    37fc:	80 81       	ld	r24, Z
    37fe:	8f 5f       	subi	r24, 0xFF	; 255
    3800:	8c 93       	st	X, r24
    3802:	fe 01       	movw	r30, r28
    3804:	e3 52       	subi	r30, 0x23	; 35
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	ac e0       	ldi	r26, 0x0C	; 12
    380e:	b2 e4       	ldi	r27, 0x42	; 66
    3810:	80 83       	st	Z, r24
    3812:	91 83       	std	Z+1, r25	; 0x01
    3814:	a2 83       	std	Z+2, r26	; 0x02
    3816:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3818:	8e 01       	movw	r16, r28
    381a:	07 52       	subi	r16, 0x27	; 39
    381c:	1f 4f       	sbci	r17, 0xFF	; 255
    381e:	fe 01       	movw	r30, r28
    3820:	e3 52       	subi	r30, 0x23	; 35
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	60 81       	ld	r22, Z
    3826:	71 81       	ldd	r23, Z+1	; 0x01
    3828:	82 81       	ldd	r24, Z+2	; 0x02
    382a:	93 81       	ldd	r25, Z+3	; 0x03
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	4a e7       	ldi	r20, 0x7A	; 122
    3832:	55 e4       	ldi	r21, 0x45	; 69
    3834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	f8 01       	movw	r30, r16
    383e:	80 83       	st	Z, r24
    3840:	91 83       	std	Z+1, r25	; 0x01
    3842:	a2 83       	std	Z+2, r26	; 0x02
    3844:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3846:	fe 01       	movw	r30, r28
    3848:	e7 52       	subi	r30, 0x27	; 39
    384a:	ff 4f       	sbci	r31, 0xFF	; 255
    384c:	60 81       	ld	r22, Z
    384e:	71 81       	ldd	r23, Z+1	; 0x01
    3850:	82 81       	ldd	r24, Z+2	; 0x02
    3852:	93 81       	ldd	r25, Z+3	; 0x03
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	40 e8       	ldi	r20, 0x80	; 128
    385a:	5f e3       	ldi	r21, 0x3F	; 63
    385c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3860:	88 23       	and	r24, r24
    3862:	44 f4       	brge	.+16     	; 0x3874 <main+0x3be>
		__ticks = 1;
    3864:	fe 01       	movw	r30, r28
    3866:	e9 52       	subi	r30, 0x29	; 41
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	80 83       	st	Z, r24
    3872:	64 c0       	rjmp	.+200    	; 0x393c <main+0x486>
	else if (__tmp > 65535)
    3874:	fe 01       	movw	r30, r28
    3876:	e7 52       	subi	r30, 0x27	; 39
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	60 81       	ld	r22, Z
    387c:	71 81       	ldd	r23, Z+1	; 0x01
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	93 81       	ldd	r25, Z+3	; 0x03
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	3f ef       	ldi	r19, 0xFF	; 255
    3886:	4f e7       	ldi	r20, 0x7F	; 127
    3888:	57 e4       	ldi	r21, 0x47	; 71
    388a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    388e:	18 16       	cp	r1, r24
    3890:	0c f0       	brlt	.+2      	; 0x3894 <main+0x3de>
    3892:	43 c0       	rjmp	.+134    	; 0x391a <main+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3894:	fe 01       	movw	r30, r28
    3896:	e3 52       	subi	r30, 0x23	; 35
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	40 e2       	ldi	r20, 0x20	; 32
    38a8:	51 e4       	ldi	r21, 0x41	; 65
    38aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	8e 01       	movw	r16, r28
    38b4:	09 52       	subi	r16, 0x29	; 41
    38b6:	1f 4f       	sbci	r17, 0xFF	; 255
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	f8 01       	movw	r30, r16
    38c6:	91 83       	std	Z+1, r25	; 0x01
    38c8:	80 83       	st	Z, r24
    38ca:	1f c0       	rjmp	.+62     	; 0x390a <main+0x454>
    38cc:	fe 01       	movw	r30, r28
    38ce:	eb 52       	subi	r30, 0x2B	; 43
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	80 e9       	ldi	r24, 0x90	; 144
    38d4:	91 e0       	ldi	r25, 0x01	; 1
    38d6:	91 83       	std	Z+1, r25	; 0x01
    38d8:	80 83       	st	Z, r24
    38da:	fe 01       	movw	r30, r28
    38dc:	eb 52       	subi	r30, 0x2B	; 43
    38de:	ff 4f       	sbci	r31, 0xFF	; 255
    38e0:	80 81       	ld	r24, Z
    38e2:	91 81       	ldd	r25, Z+1	; 0x01
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <main+0x42e>
    38e8:	fe 01       	movw	r30, r28
    38ea:	eb 52       	subi	r30, 0x2B	; 43
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	91 83       	std	Z+1, r25	; 0x01
    38f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f2:	de 01       	movw	r26, r28
    38f4:	a9 52       	subi	r26, 0x29	; 41
    38f6:	bf 4f       	sbci	r27, 0xFF	; 255
    38f8:	fe 01       	movw	r30, r28
    38fa:	e9 52       	subi	r30, 0x29	; 41
    38fc:	ff 4f       	sbci	r31, 0xFF	; 255
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	01 97       	sbiw	r24, 0x01	; 1
    3904:	11 96       	adiw	r26, 0x01	; 1
    3906:	9c 93       	st	X, r25
    3908:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390a:	fe 01       	movw	r30, r28
    390c:	e9 52       	subi	r30, 0x29	; 41
    390e:	ff 4f       	sbci	r31, 0xFF	; 255
    3910:	80 81       	ld	r24, Z
    3912:	91 81       	ldd	r25, Z+1	; 0x01
    3914:	00 97       	sbiw	r24, 0x00	; 0
    3916:	d1 f6       	brne	.-76     	; 0x38cc <main+0x416>
    3918:	28 c0       	rjmp	.+80     	; 0x396a <main+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391a:	8e 01       	movw	r16, r28
    391c:	09 52       	subi	r16, 0x29	; 41
    391e:	1f 4f       	sbci	r17, 0xFF	; 255
    3920:	fe 01       	movw	r30, r28
    3922:	e7 52       	subi	r30, 0x27	; 39
    3924:	ff 4f       	sbci	r31, 0xFF	; 255
    3926:	60 81       	ld	r22, Z
    3928:	71 81       	ldd	r23, Z+1	; 0x01
    392a:	82 81       	ldd	r24, Z+2	; 0x02
    392c:	93 81       	ldd	r25, Z+3	; 0x03
    392e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	f8 01       	movw	r30, r16
    3938:	91 83       	std	Z+1, r25	; 0x01
    393a:	80 83       	st	Z, r24
    393c:	de 01       	movw	r26, r28
    393e:	ad 52       	subi	r26, 0x2D	; 45
    3940:	bf 4f       	sbci	r27, 0xFF	; 255
    3942:	fe 01       	movw	r30, r28
    3944:	e9 52       	subi	r30, 0x29	; 41
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	80 81       	ld	r24, Z
    394a:	91 81       	ldd	r25, Z+1	; 0x01
    394c:	11 96       	adiw	r26, 0x01	; 1
    394e:	9c 93       	st	X, r25
    3950:	8e 93       	st	-X, r24
    3952:	fe 01       	movw	r30, r28
    3954:	ed 52       	subi	r30, 0x2D	; 45
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	80 81       	ld	r24, Z
    395a:	91 81       	ldd	r25, Z+1	; 0x01
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	f1 f7       	brne	.-4      	; 0x395c <main+0x4a6>
    3960:	fe 01       	movw	r30, r28
    3962:	ed 52       	subi	r30, 0x2D	; 45
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	91 83       	std	Z+1, r25	; 0x01
    3968:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 3){
    396a:	fe 01       	movw	r30, r28
    396c:	e8 50       	subi	r30, 0x08	; 8
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	83 30       	cpi	r24, 0x03	; 3
    3974:	09 f0       	breq	.+2      	; 0x3978 <main+0x4c2>
    3976:	ce c0       	rjmp	.+412    	; 0x3b14 <main+0x65e>
			LCD_displayCharacter('*');
    3978:	8a e2       	ldi	r24, 0x2A	; 42
    397a:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '3';
    397e:	fe 01       	movw	r30, r28
    3980:	e7 50       	subi	r30, 0x07	; 7
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	80 81       	ld	r24, Z
    3986:	28 2f       	mov	r18, r24
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	ce 01       	movw	r24, r28
    398c:	85 50       	subi	r24, 0x05	; 5
    398e:	9f 4f       	sbci	r25, 0xFF	; 255
    3990:	fc 01       	movw	r30, r24
    3992:	e2 0f       	add	r30, r18
    3994:	f3 1f       	adc	r31, r19
    3996:	83 e3       	ldi	r24, 0x33	; 51
    3998:	80 83       	st	Z, r24
			c++;
    399a:	de 01       	movw	r26, r28
    399c:	a7 50       	subi	r26, 0x07	; 7
    399e:	bf 4f       	sbci	r27, 0xFF	; 255
    39a0:	fe 01       	movw	r30, r28
    39a2:	e7 50       	subi	r30, 0x07	; 7
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	80 81       	ld	r24, Z
    39a8:	8f 5f       	subi	r24, 0xFF	; 255
    39aa:	8c 93       	st	X, r24
    39ac:	fe 01       	movw	r30, r28
    39ae:	e1 53       	subi	r30, 0x31	; 49
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	ac e0       	ldi	r26, 0x0C	; 12
    39b8:	b2 e4       	ldi	r27, 0x42	; 66
    39ba:	80 83       	st	Z, r24
    39bc:	91 83       	std	Z+1, r25	; 0x01
    39be:	a2 83       	std	Z+2, r26	; 0x02
    39c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c2:	8e 01       	movw	r16, r28
    39c4:	05 53       	subi	r16, 0x35	; 53
    39c6:	1f 4f       	sbci	r17, 0xFF	; 255
    39c8:	fe 01       	movw	r30, r28
    39ca:	e1 53       	subi	r30, 0x31	; 49
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	60 81       	ld	r22, Z
    39d0:	71 81       	ldd	r23, Z+1	; 0x01
    39d2:	82 81       	ldd	r24, Z+2	; 0x02
    39d4:	93 81       	ldd	r25, Z+3	; 0x03
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	4a e7       	ldi	r20, 0x7A	; 122
    39dc:	55 e4       	ldi	r21, 0x45	; 69
    39de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	f8 01       	movw	r30, r16
    39e8:	80 83       	st	Z, r24
    39ea:	91 83       	std	Z+1, r25	; 0x01
    39ec:	a2 83       	std	Z+2, r26	; 0x02
    39ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f0:	fe 01       	movw	r30, r28
    39f2:	e5 53       	subi	r30, 0x35	; 53
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e8       	ldi	r20, 0x80	; 128
    3a04:	5f e3       	ldi	r21, 0x3F	; 63
    3a06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a0a:	88 23       	and	r24, r24
    3a0c:	44 f4       	brge	.+16     	; 0x3a1e <main+0x568>
		__ticks = 1;
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e7 53       	subi	r30, 0x37	; 55
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	80 83       	st	Z, r24
    3a1c:	64 c0       	rjmp	.+200    	; 0x3ae6 <main+0x630>
	else if (__tmp > 65535)
    3a1e:	fe 01       	movw	r30, r28
    3a20:	e5 53       	subi	r30, 0x35	; 53
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	60 81       	ld	r22, Z
    3a26:	71 81       	ldd	r23, Z+1	; 0x01
    3a28:	82 81       	ldd	r24, Z+2	; 0x02
    3a2a:	93 81       	ldd	r25, Z+3	; 0x03
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	3f ef       	ldi	r19, 0xFF	; 255
    3a30:	4f e7       	ldi	r20, 0x7F	; 127
    3a32:	57 e4       	ldi	r21, 0x47	; 71
    3a34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a38:	18 16       	cp	r1, r24
    3a3a:	0c f0       	brlt	.+2      	; 0x3a3e <main+0x588>
    3a3c:	43 c0       	rjmp	.+134    	; 0x3ac4 <main+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e1 53       	subi	r30, 0x31	; 49
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	60 81       	ld	r22, Z
    3a46:	71 81       	ldd	r23, Z+1	; 0x01
    3a48:	82 81       	ldd	r24, Z+2	; 0x02
    3a4a:	93 81       	ldd	r25, Z+3	; 0x03
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	51 e4       	ldi	r21, 0x41	; 65
    3a54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	8e 01       	movw	r16, r28
    3a5e:	07 53       	subi	r16, 0x37	; 55
    3a60:	1f 4f       	sbci	r17, 0xFF	; 255
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	f8 01       	movw	r30, r16
    3a70:	91 83       	std	Z+1, r25	; 0x01
    3a72:	80 83       	st	Z, r24
    3a74:	1f c0       	rjmp	.+62     	; 0x3ab4 <main+0x5fe>
    3a76:	fe 01       	movw	r30, r28
    3a78:	e9 53       	subi	r30, 0x39	; 57
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	80 e9       	ldi	r24, 0x90	; 144
    3a7e:	91 e0       	ldi	r25, 0x01	; 1
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	80 83       	st	Z, r24
    3a84:	fe 01       	movw	r30, r28
    3a86:	e9 53       	subi	r30, 0x39	; 57
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <main+0x5d8>
    3a92:	fe 01       	movw	r30, r28
    3a94:	e9 53       	subi	r30, 0x39	; 57
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	91 83       	std	Z+1, r25	; 0x01
    3a9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9c:	de 01       	movw	r26, r28
    3a9e:	a7 53       	subi	r26, 0x37	; 55
    3aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	e7 53       	subi	r30, 0x37	; 55
    3aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa8:	80 81       	ld	r24, Z
    3aaa:	91 81       	ldd	r25, Z+1	; 0x01
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	11 96       	adiw	r26, 0x01	; 1
    3ab0:	9c 93       	st	X, r25
    3ab2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e7 53       	subi	r30, 0x37	; 55
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	80 81       	ld	r24, Z
    3abc:	91 81       	ldd	r25, Z+1	; 0x01
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	d1 f6       	brne	.-76     	; 0x3a76 <main+0x5c0>
    3ac2:	28 c0       	rjmp	.+80     	; 0x3b14 <main+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac4:	8e 01       	movw	r16, r28
    3ac6:	07 53       	subi	r16, 0x37	; 55
    3ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aca:	fe 01       	movw	r30, r28
    3acc:	e5 53       	subi	r30, 0x35	; 53
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	60 81       	ld	r22, Z
    3ad2:	71 81       	ldd	r23, Z+1	; 0x01
    3ad4:	82 81       	ldd	r24, Z+2	; 0x02
    3ad6:	93 81       	ldd	r25, Z+3	; 0x03
    3ad8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	f8 01       	movw	r30, r16
    3ae2:	91 83       	std	Z+1, r25	; 0x01
    3ae4:	80 83       	st	Z, r24
    3ae6:	de 01       	movw	r26, r28
    3ae8:	ab 53       	subi	r26, 0x3B	; 59
    3aea:	bf 4f       	sbci	r27, 0xFF	; 255
    3aec:	fe 01       	movw	r30, r28
    3aee:	e7 53       	subi	r30, 0x37	; 55
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	80 81       	ld	r24, Z
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	11 96       	adiw	r26, 0x01	; 1
    3af8:	9c 93       	st	X, r25
    3afa:	8e 93       	st	-X, r24
    3afc:	fe 01       	movw	r30, r28
    3afe:	eb 53       	subi	r30, 0x3B	; 59
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <main+0x650>
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	eb 53       	subi	r30, 0x3B	; 59
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	91 83       	std	Z+1, r25	; 0x01
    3b12:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 4){
    3b14:	fe 01       	movw	r30, r28
    3b16:	e8 50       	subi	r30, 0x08	; 8
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	80 81       	ld	r24, Z
    3b1c:	84 30       	cpi	r24, 0x04	; 4
    3b1e:	09 f0       	breq	.+2      	; 0x3b22 <main+0x66c>
    3b20:	ce c0       	rjmp	.+412    	; 0x3cbe <main+0x808>
			LCD_displayCharacter('*');
    3b22:	8a e2       	ldi	r24, 0x2A	; 42
    3b24:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '4';
    3b28:	fe 01       	movw	r30, r28
    3b2a:	e7 50       	subi	r30, 0x07	; 7
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	80 81       	ld	r24, Z
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	ce 01       	movw	r24, r28
    3b36:	85 50       	subi	r24, 0x05	; 5
    3b38:	9f 4f       	sbci	r25, 0xFF	; 255
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	e2 0f       	add	r30, r18
    3b3e:	f3 1f       	adc	r31, r19
    3b40:	84 e3       	ldi	r24, 0x34	; 52
    3b42:	80 83       	st	Z, r24
			c++;
    3b44:	de 01       	movw	r26, r28
    3b46:	a7 50       	subi	r26, 0x07	; 7
    3b48:	bf 4f       	sbci	r27, 0xFF	; 255
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e7 50       	subi	r30, 0x07	; 7
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	80 81       	ld	r24, Z
    3b52:	8f 5f       	subi	r24, 0xFF	; 255
    3b54:	8c 93       	st	X, r24
    3b56:	fe 01       	movw	r30, r28
    3b58:	ef 53       	subi	r30, 0x3F	; 63
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	ac e0       	ldi	r26, 0x0C	; 12
    3b62:	b2 e4       	ldi	r27, 0x42	; 66
    3b64:	80 83       	st	Z, r24
    3b66:	91 83       	std	Z+1, r25	; 0x01
    3b68:	a2 83       	std	Z+2, r26	; 0x02
    3b6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b6c:	8e 01       	movw	r16, r28
    3b6e:	03 54       	subi	r16, 0x43	; 67
    3b70:	1f 4f       	sbci	r17, 0xFF	; 255
    3b72:	fe 01       	movw	r30, r28
    3b74:	ef 53       	subi	r30, 0x3F	; 63
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	60 81       	ld	r22, Z
    3b7a:	71 81       	ldd	r23, Z+1	; 0x01
    3b7c:	82 81       	ldd	r24, Z+2	; 0x02
    3b7e:	93 81       	ldd	r25, Z+3	; 0x03
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	4a e7       	ldi	r20, 0x7A	; 122
    3b86:	55 e4       	ldi	r21, 0x45	; 69
    3b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	f8 01       	movw	r30, r16
    3b92:	80 83       	st	Z, r24
    3b94:	91 83       	std	Z+1, r25	; 0x01
    3b96:	a2 83       	std	Z+2, r26	; 0x02
    3b98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	e3 54       	subi	r30, 0x43	; 67
    3b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba0:	60 81       	ld	r22, Z
    3ba2:	71 81       	ldd	r23, Z+1	; 0x01
    3ba4:	82 81       	ldd	r24, Z+2	; 0x02
    3ba6:	93 81       	ldd	r25, Z+3	; 0x03
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	40 e8       	ldi	r20, 0x80	; 128
    3bae:	5f e3       	ldi	r21, 0x3F	; 63
    3bb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3bb4:	88 23       	and	r24, r24
    3bb6:	44 f4       	brge	.+16     	; 0x3bc8 <main+0x712>
		__ticks = 1;
    3bb8:	fe 01       	movw	r30, r28
    3bba:	e5 54       	subi	r30, 0x45	; 69
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
    3bc6:	64 c0       	rjmp	.+200    	; 0x3c90 <main+0x7da>
	else if (__tmp > 65535)
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e3 54       	subi	r30, 0x43	; 67
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	60 81       	ld	r22, Z
    3bd0:	71 81       	ldd	r23, Z+1	; 0x01
    3bd2:	82 81       	ldd	r24, Z+2	; 0x02
    3bd4:	93 81       	ldd	r25, Z+3	; 0x03
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	3f ef       	ldi	r19, 0xFF	; 255
    3bda:	4f e7       	ldi	r20, 0x7F	; 127
    3bdc:	57 e4       	ldi	r21, 0x47	; 71
    3bde:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3be2:	18 16       	cp	r1, r24
    3be4:	0c f0       	brlt	.+2      	; 0x3be8 <main+0x732>
    3be6:	43 c0       	rjmp	.+134    	; 0x3c6e <main+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be8:	fe 01       	movw	r30, r28
    3bea:	ef 53       	subi	r30, 0x3F	; 63
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	60 81       	ld	r22, Z
    3bf0:	71 81       	ldd	r23, Z+1	; 0x01
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	93 81       	ldd	r25, Z+3	; 0x03
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	40 e2       	ldi	r20, 0x20	; 32
    3bfc:	51 e4       	ldi	r21, 0x41	; 65
    3bfe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	8e 01       	movw	r16, r28
    3c08:	05 54       	subi	r16, 0x45	; 69
    3c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c0c:	bc 01       	movw	r22, r24
    3c0e:	cd 01       	movw	r24, r26
    3c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	f8 01       	movw	r30, r16
    3c1a:	91 83       	std	Z+1, r25	; 0x01
    3c1c:	80 83       	st	Z, r24
    3c1e:	1f c0       	rjmp	.+62     	; 0x3c5e <main+0x7a8>
    3c20:	fe 01       	movw	r30, r28
    3c22:	e7 54       	subi	r30, 0x47	; 71
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	80 e9       	ldi	r24, 0x90	; 144
    3c28:	91 e0       	ldi	r25, 0x01	; 1
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	80 83       	st	Z, r24
    3c2e:	fe 01       	movw	r30, r28
    3c30:	e7 54       	subi	r30, 0x47	; 71
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	80 81       	ld	r24, Z
    3c36:	91 81       	ldd	r25, Z+1	; 0x01
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	f1 f7       	brne	.-4      	; 0x3c38 <main+0x782>
    3c3c:	fe 01       	movw	r30, r28
    3c3e:	e7 54       	subi	r30, 0x47	; 71
    3c40:	ff 4f       	sbci	r31, 0xFF	; 255
    3c42:	91 83       	std	Z+1, r25	; 0x01
    3c44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c46:	de 01       	movw	r26, r28
    3c48:	a5 54       	subi	r26, 0x45	; 69
    3c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	e5 54       	subi	r30, 0x45	; 69
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	80 81       	ld	r24, Z
    3c54:	91 81       	ldd	r25, Z+1	; 0x01
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	11 96       	adiw	r26, 0x01	; 1
    3c5a:	9c 93       	st	X, r25
    3c5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e5 54       	subi	r30, 0x45	; 69
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	80 81       	ld	r24, Z
    3c66:	91 81       	ldd	r25, Z+1	; 0x01
    3c68:	00 97       	sbiw	r24, 0x00	; 0
    3c6a:	d1 f6       	brne	.-76     	; 0x3c20 <main+0x76a>
    3c6c:	28 c0       	rjmp	.+80     	; 0x3cbe <main+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c6e:	8e 01       	movw	r16, r28
    3c70:	05 54       	subi	r16, 0x45	; 69
    3c72:	1f 4f       	sbci	r17, 0xFF	; 255
    3c74:	fe 01       	movw	r30, r28
    3c76:	e3 54       	subi	r30, 0x43	; 67
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	60 81       	ld	r22, Z
    3c7c:	71 81       	ldd	r23, Z+1	; 0x01
    3c7e:	82 81       	ldd	r24, Z+2	; 0x02
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	91 83       	std	Z+1, r25	; 0x01
    3c8e:	80 83       	st	Z, r24
    3c90:	de 01       	movw	r26, r28
    3c92:	a9 54       	subi	r26, 0x49	; 73
    3c94:	bf 4f       	sbci	r27, 0xFF	; 255
    3c96:	fe 01       	movw	r30, r28
    3c98:	e5 54       	subi	r30, 0x45	; 69
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	80 81       	ld	r24, Z
    3c9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ca0:	11 96       	adiw	r26, 0x01	; 1
    3ca2:	9c 93       	st	X, r25
    3ca4:	8e 93       	st	-X, r24
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	e9 54       	subi	r30, 0x49	; 73
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	80 81       	ld	r24, Z
    3cae:	91 81       	ldd	r25, Z+1	; 0x01
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	f1 f7       	brne	.-4      	; 0x3cb0 <main+0x7fa>
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	e9 54       	subi	r30, 0x49	; 73
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	91 83       	std	Z+1, r25	; 0x01
    3cbc:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 5){
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	e8 50       	subi	r30, 0x08	; 8
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 81       	ld	r24, Z
    3cc6:	85 30       	cpi	r24, 0x05	; 5
    3cc8:	09 f0       	breq	.+2      	; 0x3ccc <main+0x816>
    3cca:	ce c0       	rjmp	.+412    	; 0x3e68 <main+0x9b2>
			LCD_displayCharacter('*');
    3ccc:	8a e2       	ldi	r24, 0x2A	; 42
    3cce:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '5';
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	e7 50       	subi	r30, 0x07	; 7
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	28 2f       	mov	r18, r24
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	ce 01       	movw	r24, r28
    3ce0:	85 50       	subi	r24, 0x05	; 5
    3ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	e2 0f       	add	r30, r18
    3ce8:	f3 1f       	adc	r31, r19
    3cea:	85 e3       	ldi	r24, 0x35	; 53
    3cec:	80 83       	st	Z, r24
			c++;
    3cee:	de 01       	movw	r26, r28
    3cf0:	a7 50       	subi	r26, 0x07	; 7
    3cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e7 50       	subi	r30, 0x07	; 7
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	80 81       	ld	r24, Z
    3cfc:	8f 5f       	subi	r24, 0xFF	; 255
    3cfe:	8c 93       	st	X, r24
    3d00:	fe 01       	movw	r30, r28
    3d02:	ed 54       	subi	r30, 0x4D	; 77
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	ac e0       	ldi	r26, 0x0C	; 12
    3d0c:	b2 e4       	ldi	r27, 0x42	; 66
    3d0e:	80 83       	st	Z, r24
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	a2 83       	std	Z+2, r26	; 0x02
    3d14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d16:	8e 01       	movw	r16, r28
    3d18:	01 55       	subi	r16, 0x51	; 81
    3d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	ed 54       	subi	r30, 0x4D	; 77
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	60 81       	ld	r22, Z
    3d24:	71 81       	ldd	r23, Z+1	; 0x01
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	93 81       	ldd	r25, Z+3	; 0x03
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	4a e7       	ldi	r20, 0x7A	; 122
    3d30:	55 e4       	ldi	r21, 0x45	; 69
    3d32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	f8 01       	movw	r30, r16
    3d3c:	80 83       	st	Z, r24
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	a2 83       	std	Z+2, r26	; 0x02
    3d42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d44:	fe 01       	movw	r30, r28
    3d46:	e1 55       	subi	r30, 0x51	; 81
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	60 81       	ld	r22, Z
    3d4c:	71 81       	ldd	r23, Z+1	; 0x01
    3d4e:	82 81       	ldd	r24, Z+2	; 0x02
    3d50:	93 81       	ldd	r25, Z+3	; 0x03
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	40 e8       	ldi	r20, 0x80	; 128
    3d58:	5f e3       	ldi	r21, 0x3F	; 63
    3d5a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d5e:	88 23       	and	r24, r24
    3d60:	44 f4       	brge	.+16     	; 0x3d72 <main+0x8bc>
		__ticks = 1;
    3d62:	fe 01       	movw	r30, r28
    3d64:	e3 55       	subi	r30, 0x53	; 83
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	81 e0       	ldi	r24, 0x01	; 1
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	80 83       	st	Z, r24
    3d70:	64 c0       	rjmp	.+200    	; 0x3e3a <main+0x984>
	else if (__tmp > 65535)
    3d72:	fe 01       	movw	r30, r28
    3d74:	e1 55       	subi	r30, 0x51	; 81
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	60 81       	ld	r22, Z
    3d7a:	71 81       	ldd	r23, Z+1	; 0x01
    3d7c:	82 81       	ldd	r24, Z+2	; 0x02
    3d7e:	93 81       	ldd	r25, Z+3	; 0x03
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	3f ef       	ldi	r19, 0xFF	; 255
    3d84:	4f e7       	ldi	r20, 0x7F	; 127
    3d86:	57 e4       	ldi	r21, 0x47	; 71
    3d88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d8c:	18 16       	cp	r1, r24
    3d8e:	0c f0       	brlt	.+2      	; 0x3d92 <main+0x8dc>
    3d90:	43 c0       	rjmp	.+134    	; 0x3e18 <main+0x962>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d92:	fe 01       	movw	r30, r28
    3d94:	ed 54       	subi	r30, 0x4D	; 77
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	60 81       	ld	r22, Z
    3d9a:	71 81       	ldd	r23, Z+1	; 0x01
    3d9c:	82 81       	ldd	r24, Z+2	; 0x02
    3d9e:	93 81       	ldd	r25, Z+3	; 0x03
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	40 e2       	ldi	r20, 0x20	; 32
    3da6:	51 e4       	ldi	r21, 0x41	; 65
    3da8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	8e 01       	movw	r16, r28
    3db2:	03 55       	subi	r16, 0x53	; 83
    3db4:	1f 4f       	sbci	r17, 0xFF	; 255
    3db6:	bc 01       	movw	r22, r24
    3db8:	cd 01       	movw	r24, r26
    3dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	f8 01       	movw	r30, r16
    3dc4:	91 83       	std	Z+1, r25	; 0x01
    3dc6:	80 83       	st	Z, r24
    3dc8:	1f c0       	rjmp	.+62     	; 0x3e08 <main+0x952>
    3dca:	fe 01       	movw	r30, r28
    3dcc:	e5 55       	subi	r30, 0x55	; 85
    3dce:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd0:	80 e9       	ldi	r24, 0x90	; 144
    3dd2:	91 e0       	ldi	r25, 0x01	; 1
    3dd4:	91 83       	std	Z+1, r25	; 0x01
    3dd6:	80 83       	st	Z, r24
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e5 55       	subi	r30, 0x55	; 85
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	80 81       	ld	r24, Z
    3de0:	91 81       	ldd	r25, Z+1	; 0x01
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <main+0x92c>
    3de6:	fe 01       	movw	r30, r28
    3de8:	e5 55       	subi	r30, 0x55	; 85
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	91 83       	std	Z+1, r25	; 0x01
    3dee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df0:	de 01       	movw	r26, r28
    3df2:	a3 55       	subi	r26, 0x53	; 83
    3df4:	bf 4f       	sbci	r27, 0xFF	; 255
    3df6:	fe 01       	movw	r30, r28
    3df8:	e3 55       	subi	r30, 0x53	; 83
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	80 81       	ld	r24, Z
    3dfe:	91 81       	ldd	r25, Z+1	; 0x01
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	11 96       	adiw	r26, 0x01	; 1
    3e04:	9c 93       	st	X, r25
    3e06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e08:	fe 01       	movw	r30, r28
    3e0a:	e3 55       	subi	r30, 0x53	; 83
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	80 81       	ld	r24, Z
    3e10:	91 81       	ldd	r25, Z+1	; 0x01
    3e12:	00 97       	sbiw	r24, 0x00	; 0
    3e14:	d1 f6       	brne	.-76     	; 0x3dca <main+0x914>
    3e16:	28 c0       	rjmp	.+80     	; 0x3e68 <main+0x9b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e18:	8e 01       	movw	r16, r28
    3e1a:	03 55       	subi	r16, 0x53	; 83
    3e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e1 55       	subi	r30, 0x51	; 81
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	60 81       	ld	r22, Z
    3e26:	71 81       	ldd	r23, Z+1	; 0x01
    3e28:	82 81       	ldd	r24, Z+2	; 0x02
    3e2a:	93 81       	ldd	r25, Z+3	; 0x03
    3e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	f8 01       	movw	r30, r16
    3e36:	91 83       	std	Z+1, r25	; 0x01
    3e38:	80 83       	st	Z, r24
    3e3a:	de 01       	movw	r26, r28
    3e3c:	a7 55       	subi	r26, 0x57	; 87
    3e3e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e40:	fe 01       	movw	r30, r28
    3e42:	e3 55       	subi	r30, 0x53	; 83
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	80 81       	ld	r24, Z
    3e48:	91 81       	ldd	r25, Z+1	; 0x01
    3e4a:	11 96       	adiw	r26, 0x01	; 1
    3e4c:	9c 93       	st	X, r25
    3e4e:	8e 93       	st	-X, r24
    3e50:	fe 01       	movw	r30, r28
    3e52:	e7 55       	subi	r30, 0x57	; 87
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	80 81       	ld	r24, Z
    3e58:	91 81       	ldd	r25, Z+1	; 0x01
    3e5a:	01 97       	sbiw	r24, 0x01	; 1
    3e5c:	f1 f7       	brne	.-4      	; 0x3e5a <main+0x9a4>
    3e5e:	fe 01       	movw	r30, r28
    3e60:	e7 55       	subi	r30, 0x57	; 87
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	91 83       	std	Z+1, r25	; 0x01
    3e66:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 6){
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e8 50       	subi	r30, 0x08	; 8
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	80 81       	ld	r24, Z
    3e70:	86 30       	cpi	r24, 0x06	; 6
    3e72:	09 f0       	breq	.+2      	; 0x3e76 <main+0x9c0>
    3e74:	ce c0       	rjmp	.+412    	; 0x4012 <main+0xb5c>
			LCD_displayCharacter('*');
    3e76:	8a e2       	ldi	r24, 0x2A	; 42
    3e78:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '6';
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e7 50       	subi	r30, 0x07	; 7
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 81       	ld	r24, Z
    3e84:	28 2f       	mov	r18, r24
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	ce 01       	movw	r24, r28
    3e8a:	85 50       	subi	r24, 0x05	; 5
    3e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8e:	fc 01       	movw	r30, r24
    3e90:	e2 0f       	add	r30, r18
    3e92:	f3 1f       	adc	r31, r19
    3e94:	86 e3       	ldi	r24, 0x36	; 54
    3e96:	80 83       	st	Z, r24
			c++;
    3e98:	de 01       	movw	r26, r28
    3e9a:	a7 50       	subi	r26, 0x07	; 7
    3e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	e7 50       	subi	r30, 0x07	; 7
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	80 81       	ld	r24, Z
    3ea6:	8f 5f       	subi	r24, 0xFF	; 255
    3ea8:	8c 93       	st	X, r24
    3eaa:	fe 01       	movw	r30, r28
    3eac:	eb 55       	subi	r30, 0x5B	; 91
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	ac e0       	ldi	r26, 0x0C	; 12
    3eb6:	b2 e4       	ldi	r27, 0x42	; 66
    3eb8:	80 83       	st	Z, r24
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	a2 83       	std	Z+2, r26	; 0x02
    3ebe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec0:	8e 01       	movw	r16, r28
    3ec2:	0f 55       	subi	r16, 0x5F	; 95
    3ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	eb 55       	subi	r30, 0x5B	; 91
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	60 81       	ld	r22, Z
    3ece:	71 81       	ldd	r23, Z+1	; 0x01
    3ed0:	82 81       	ldd	r24, Z+2	; 0x02
    3ed2:	93 81       	ldd	r25, Z+3	; 0x03
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	4a e7       	ldi	r20, 0x7A	; 122
    3eda:	55 e4       	ldi	r21, 0x45	; 69
    3edc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	f8 01       	movw	r30, r16
    3ee6:	80 83       	st	Z, r24
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	a2 83       	std	Z+2, r26	; 0x02
    3eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eee:	fe 01       	movw	r30, r28
    3ef0:	ef 55       	subi	r30, 0x5F	; 95
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	60 81       	ld	r22, Z
    3ef6:	71 81       	ldd	r23, Z+1	; 0x01
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e8       	ldi	r20, 0x80	; 128
    3f02:	5f e3       	ldi	r21, 0x3F	; 63
    3f04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3f08:	88 23       	and	r24, r24
    3f0a:	44 f4       	brge	.+16     	; 0x3f1c <main+0xa66>
		__ticks = 1;
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e1 56       	subi	r30, 0x61	; 97
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	80 83       	st	Z, r24
    3f1a:	64 c0       	rjmp	.+200    	; 0x3fe4 <main+0xb2e>
	else if (__tmp > 65535)
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	ef 55       	subi	r30, 0x5F	; 95
    3f20:	ff 4f       	sbci	r31, 0xFF	; 255
    3f22:	60 81       	ld	r22, Z
    3f24:	71 81       	ldd	r23, Z+1	; 0x01
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	3f ef       	ldi	r19, 0xFF	; 255
    3f2e:	4f e7       	ldi	r20, 0x7F	; 127
    3f30:	57 e4       	ldi	r21, 0x47	; 71
    3f32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3f36:	18 16       	cp	r1, r24
    3f38:	0c f0       	brlt	.+2      	; 0x3f3c <main+0xa86>
    3f3a:	43 c0       	rjmp	.+134    	; 0x3fc2 <main+0xb0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	eb 55       	subi	r30, 0x5B	; 91
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	60 81       	ld	r22, Z
    3f44:	71 81       	ldd	r23, Z+1	; 0x01
    3f46:	82 81       	ldd	r24, Z+2	; 0x02
    3f48:	93 81       	ldd	r25, Z+3	; 0x03
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	40 e2       	ldi	r20, 0x20	; 32
    3f50:	51 e4       	ldi	r21, 0x41	; 65
    3f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	8e 01       	movw	r16, r28
    3f5c:	01 56       	subi	r16, 0x61	; 97
    3f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f60:	bc 01       	movw	r22, r24
    3f62:	cd 01       	movw	r24, r26
    3f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	f8 01       	movw	r30, r16
    3f6e:	91 83       	std	Z+1, r25	; 0x01
    3f70:	80 83       	st	Z, r24
    3f72:	1f c0       	rjmp	.+62     	; 0x3fb2 <main+0xafc>
    3f74:	fe 01       	movw	r30, r28
    3f76:	e3 56       	subi	r30, 0x63	; 99
    3f78:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7a:	80 e9       	ldi	r24, 0x90	; 144
    3f7c:	91 e0       	ldi	r25, 0x01	; 1
    3f7e:	91 83       	std	Z+1, r25	; 0x01
    3f80:	80 83       	st	Z, r24
    3f82:	fe 01       	movw	r30, r28
    3f84:	e3 56       	subi	r30, 0x63	; 99
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	80 81       	ld	r24, Z
    3f8a:	91 81       	ldd	r25, Z+1	; 0x01
    3f8c:	01 97       	sbiw	r24, 0x01	; 1
    3f8e:	f1 f7       	brne	.-4      	; 0x3f8c <main+0xad6>
    3f90:	fe 01       	movw	r30, r28
    3f92:	e3 56       	subi	r30, 0x63	; 99
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	91 83       	std	Z+1, r25	; 0x01
    3f98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f9a:	de 01       	movw	r26, r28
    3f9c:	a1 56       	subi	r26, 0x61	; 97
    3f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	e1 56       	subi	r30, 0x61	; 97
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	80 81       	ld	r24, Z
    3fa8:	91 81       	ldd	r25, Z+1	; 0x01
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	11 96       	adiw	r26, 0x01	; 1
    3fae:	9c 93       	st	X, r25
    3fb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	e1 56       	subi	r30, 0x61	; 97
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	80 81       	ld	r24, Z
    3fba:	91 81       	ldd	r25, Z+1	; 0x01
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	d1 f6       	brne	.-76     	; 0x3f74 <main+0xabe>
    3fc0:	28 c0       	rjmp	.+80     	; 0x4012 <main+0xb5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc2:	8e 01       	movw	r16, r28
    3fc4:	01 56       	subi	r16, 0x61	; 97
    3fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc8:	fe 01       	movw	r30, r28
    3fca:	ef 55       	subi	r30, 0x5F	; 95
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	60 81       	ld	r22, Z
    3fd0:	71 81       	ldd	r23, Z+1	; 0x01
    3fd2:	82 81       	ldd	r24, Z+2	; 0x02
    3fd4:	93 81       	ldd	r25, Z+3	; 0x03
    3fd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	f8 01       	movw	r30, r16
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	80 83       	st	Z, r24
    3fe4:	de 01       	movw	r26, r28
    3fe6:	a5 56       	subi	r26, 0x65	; 101
    3fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fea:	fe 01       	movw	r30, r28
    3fec:	e1 56       	subi	r30, 0x61	; 97
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	80 81       	ld	r24, Z
    3ff2:	91 81       	ldd	r25, Z+1	; 0x01
    3ff4:	11 96       	adiw	r26, 0x01	; 1
    3ff6:	9c 93       	st	X, r25
    3ff8:	8e 93       	st	-X, r24
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e5 56       	subi	r30, 0x65	; 101
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	f1 f7       	brne	.-4      	; 0x4004 <main+0xb4e>
    4008:	fe 01       	movw	r30, r28
    400a:	e5 56       	subi	r30, 0x65	; 101
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 7){
    4012:	fe 01       	movw	r30, r28
    4014:	e8 50       	subi	r30, 0x08	; 8
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 81       	ld	r24, Z
    401a:	87 30       	cpi	r24, 0x07	; 7
    401c:	09 f0       	breq	.+2      	; 0x4020 <main+0xb6a>
    401e:	ce c0       	rjmp	.+412    	; 0x41bc <main+0xd06>
			LCD_displayCharacter('*');
    4020:	8a e2       	ldi	r24, 0x2A	; 42
    4022:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '7';
    4026:	fe 01       	movw	r30, r28
    4028:	e7 50       	subi	r30, 0x07	; 7
    402a:	ff 4f       	sbci	r31, 0xFF	; 255
    402c:	80 81       	ld	r24, Z
    402e:	28 2f       	mov	r18, r24
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	ce 01       	movw	r24, r28
    4034:	85 50       	subi	r24, 0x05	; 5
    4036:	9f 4f       	sbci	r25, 0xFF	; 255
    4038:	fc 01       	movw	r30, r24
    403a:	e2 0f       	add	r30, r18
    403c:	f3 1f       	adc	r31, r19
    403e:	87 e3       	ldi	r24, 0x37	; 55
    4040:	80 83       	st	Z, r24
			c++;
    4042:	de 01       	movw	r26, r28
    4044:	a7 50       	subi	r26, 0x07	; 7
    4046:	bf 4f       	sbci	r27, 0xFF	; 255
    4048:	fe 01       	movw	r30, r28
    404a:	e7 50       	subi	r30, 0x07	; 7
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	80 81       	ld	r24, Z
    4050:	8f 5f       	subi	r24, 0xFF	; 255
    4052:	8c 93       	st	X, r24
    4054:	fe 01       	movw	r30, r28
    4056:	e9 56       	subi	r30, 0x69	; 105
    4058:	ff 4f       	sbci	r31, 0xFF	; 255
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	ac e0       	ldi	r26, 0x0C	; 12
    4060:	b2 e4       	ldi	r27, 0x42	; 66
    4062:	80 83       	st	Z, r24
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	a2 83       	std	Z+2, r26	; 0x02
    4068:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    406a:	8e 01       	movw	r16, r28
    406c:	0d 56       	subi	r16, 0x6D	; 109
    406e:	1f 4f       	sbci	r17, 0xFF	; 255
    4070:	fe 01       	movw	r30, r28
    4072:	e9 56       	subi	r30, 0x69	; 105
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	60 81       	ld	r22, Z
    4078:	71 81       	ldd	r23, Z+1	; 0x01
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	93 81       	ldd	r25, Z+3	; 0x03
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	4a e7       	ldi	r20, 0x7A	; 122
    4084:	55 e4       	ldi	r21, 0x45	; 69
    4086:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    408a:	dc 01       	movw	r26, r24
    408c:	cb 01       	movw	r24, r22
    408e:	f8 01       	movw	r30, r16
    4090:	80 83       	st	Z, r24
    4092:	91 83       	std	Z+1, r25	; 0x01
    4094:	a2 83       	std	Z+2, r26	; 0x02
    4096:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4098:	fe 01       	movw	r30, r28
    409a:	ed 56       	subi	r30, 0x6D	; 109
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	60 81       	ld	r22, Z
    40a0:	71 81       	ldd	r23, Z+1	; 0x01
    40a2:	82 81       	ldd	r24, Z+2	; 0x02
    40a4:	93 81       	ldd	r25, Z+3	; 0x03
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e8       	ldi	r20, 0x80	; 128
    40ac:	5f e3       	ldi	r21, 0x3F	; 63
    40ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    40b2:	88 23       	and	r24, r24
    40b4:	44 f4       	brge	.+16     	; 0x40c6 <main+0xc10>
		__ticks = 1;
    40b6:	fe 01       	movw	r30, r28
    40b8:	ef 56       	subi	r30, 0x6F	; 111
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	91 83       	std	Z+1, r25	; 0x01
    40c2:	80 83       	st	Z, r24
    40c4:	64 c0       	rjmp	.+200    	; 0x418e <main+0xcd8>
	else if (__tmp > 65535)
    40c6:	fe 01       	movw	r30, r28
    40c8:	ed 56       	subi	r30, 0x6D	; 109
    40ca:	ff 4f       	sbci	r31, 0xFF	; 255
    40cc:	60 81       	ld	r22, Z
    40ce:	71 81       	ldd	r23, Z+1	; 0x01
    40d0:	82 81       	ldd	r24, Z+2	; 0x02
    40d2:	93 81       	ldd	r25, Z+3	; 0x03
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	3f ef       	ldi	r19, 0xFF	; 255
    40d8:	4f e7       	ldi	r20, 0x7F	; 127
    40da:	57 e4       	ldi	r21, 0x47	; 71
    40dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    40e0:	18 16       	cp	r1, r24
    40e2:	0c f0       	brlt	.+2      	; 0x40e6 <main+0xc30>
    40e4:	43 c0       	rjmp	.+134    	; 0x416c <main+0xcb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e6:	fe 01       	movw	r30, r28
    40e8:	e9 56       	subi	r30, 0x69	; 105
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	60 81       	ld	r22, Z
    40ee:	71 81       	ldd	r23, Z+1	; 0x01
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	93 81       	ldd	r25, Z+3	; 0x03
    40f4:	20 e0       	ldi	r18, 0x00	; 0
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	40 e2       	ldi	r20, 0x20	; 32
    40fa:	51 e4       	ldi	r21, 0x41	; 65
    40fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	8e 01       	movw	r16, r28
    4106:	0f 56       	subi	r16, 0x6F	; 111
    4108:	1f 4f       	sbci	r17, 0xFF	; 255
    410a:	bc 01       	movw	r22, r24
    410c:	cd 01       	movw	r24, r26
    410e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	f8 01       	movw	r30, r16
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	80 83       	st	Z, r24
    411c:	1f c0       	rjmp	.+62     	; 0x415c <main+0xca6>
    411e:	fe 01       	movw	r30, r28
    4120:	e1 57       	subi	r30, 0x71	; 113
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	80 e9       	ldi	r24, 0x90	; 144
    4126:	91 e0       	ldi	r25, 0x01	; 1
    4128:	91 83       	std	Z+1, r25	; 0x01
    412a:	80 83       	st	Z, r24
    412c:	fe 01       	movw	r30, r28
    412e:	e1 57       	subi	r30, 0x71	; 113
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	80 81       	ld	r24, Z
    4134:	91 81       	ldd	r25, Z+1	; 0x01
    4136:	01 97       	sbiw	r24, 0x01	; 1
    4138:	f1 f7       	brne	.-4      	; 0x4136 <main+0xc80>
    413a:	fe 01       	movw	r30, r28
    413c:	e1 57       	subi	r30, 0x71	; 113
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	91 83       	std	Z+1, r25	; 0x01
    4142:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4144:	de 01       	movw	r26, r28
    4146:	af 56       	subi	r26, 0x6F	; 111
    4148:	bf 4f       	sbci	r27, 0xFF	; 255
    414a:	fe 01       	movw	r30, r28
    414c:	ef 56       	subi	r30, 0x6F	; 111
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	80 81       	ld	r24, Z
    4152:	91 81       	ldd	r25, Z+1	; 0x01
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	11 96       	adiw	r26, 0x01	; 1
    4158:	9c 93       	st	X, r25
    415a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415c:	fe 01       	movw	r30, r28
    415e:	ef 56       	subi	r30, 0x6F	; 111
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	80 81       	ld	r24, Z
    4164:	91 81       	ldd	r25, Z+1	; 0x01
    4166:	00 97       	sbiw	r24, 0x00	; 0
    4168:	d1 f6       	brne	.-76     	; 0x411e <main+0xc68>
    416a:	28 c0       	rjmp	.+80     	; 0x41bc <main+0xd06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    416c:	8e 01       	movw	r16, r28
    416e:	0f 56       	subi	r16, 0x6F	; 111
    4170:	1f 4f       	sbci	r17, 0xFF	; 255
    4172:	fe 01       	movw	r30, r28
    4174:	ed 56       	subi	r30, 0x6D	; 109
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	60 81       	ld	r22, Z
    417a:	71 81       	ldd	r23, Z+1	; 0x01
    417c:	82 81       	ldd	r24, Z+2	; 0x02
    417e:	93 81       	ldd	r25, Z+3	; 0x03
    4180:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	f8 01       	movw	r30, r16
    418a:	91 83       	std	Z+1, r25	; 0x01
    418c:	80 83       	st	Z, r24
    418e:	de 01       	movw	r26, r28
    4190:	a3 57       	subi	r26, 0x73	; 115
    4192:	bf 4f       	sbci	r27, 0xFF	; 255
    4194:	fe 01       	movw	r30, r28
    4196:	ef 56       	subi	r30, 0x6F	; 111
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	80 81       	ld	r24, Z
    419c:	91 81       	ldd	r25, Z+1	; 0x01
    419e:	11 96       	adiw	r26, 0x01	; 1
    41a0:	9c 93       	st	X, r25
    41a2:	8e 93       	st	-X, r24
    41a4:	fe 01       	movw	r30, r28
    41a6:	e3 57       	subi	r30, 0x73	; 115
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	80 81       	ld	r24, Z
    41ac:	91 81       	ldd	r25, Z+1	; 0x01
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <main+0xcf8>
    41b2:	fe 01       	movw	r30, r28
    41b4:	e3 57       	subi	r30, 0x73	; 115
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	91 83       	std	Z+1, r25	; 0x01
    41ba:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 8){
    41bc:	fe 01       	movw	r30, r28
    41be:	e8 50       	subi	r30, 0x08	; 8
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	80 81       	ld	r24, Z
    41c4:	88 30       	cpi	r24, 0x08	; 8
    41c6:	09 f0       	breq	.+2      	; 0x41ca <main+0xd14>
    41c8:	ce c0       	rjmp	.+412    	; 0x4366 <main+0xeb0>
			LCD_displayCharacter('*');
    41ca:	8a e2       	ldi	r24, 0x2A	; 42
    41cc:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '8';
    41d0:	fe 01       	movw	r30, r28
    41d2:	e7 50       	subi	r30, 0x07	; 7
    41d4:	ff 4f       	sbci	r31, 0xFF	; 255
    41d6:	80 81       	ld	r24, Z
    41d8:	28 2f       	mov	r18, r24
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	ce 01       	movw	r24, r28
    41de:	85 50       	subi	r24, 0x05	; 5
    41e0:	9f 4f       	sbci	r25, 0xFF	; 255
    41e2:	fc 01       	movw	r30, r24
    41e4:	e2 0f       	add	r30, r18
    41e6:	f3 1f       	adc	r31, r19
    41e8:	88 e3       	ldi	r24, 0x38	; 56
    41ea:	80 83       	st	Z, r24
			c++;
    41ec:	de 01       	movw	r26, r28
    41ee:	a7 50       	subi	r26, 0x07	; 7
    41f0:	bf 4f       	sbci	r27, 0xFF	; 255
    41f2:	fe 01       	movw	r30, r28
    41f4:	e7 50       	subi	r30, 0x07	; 7
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	80 81       	ld	r24, Z
    41fa:	8f 5f       	subi	r24, 0xFF	; 255
    41fc:	8c 93       	st	X, r24
    41fe:	fe 01       	movw	r30, r28
    4200:	e7 57       	subi	r30, 0x77	; 119
    4202:	ff 4f       	sbci	r31, 0xFF	; 255
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	ac e0       	ldi	r26, 0x0C	; 12
    420a:	b2 e4       	ldi	r27, 0x42	; 66
    420c:	80 83       	st	Z, r24
    420e:	91 83       	std	Z+1, r25	; 0x01
    4210:	a2 83       	std	Z+2, r26	; 0x02
    4212:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4214:	8e 01       	movw	r16, r28
    4216:	0b 57       	subi	r16, 0x7B	; 123
    4218:	1f 4f       	sbci	r17, 0xFF	; 255
    421a:	fe 01       	movw	r30, r28
    421c:	e7 57       	subi	r30, 0x77	; 119
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	60 81       	ld	r22, Z
    4222:	71 81       	ldd	r23, Z+1	; 0x01
    4224:	82 81       	ldd	r24, Z+2	; 0x02
    4226:	93 81       	ldd	r25, Z+3	; 0x03
    4228:	20 e0       	ldi	r18, 0x00	; 0
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	4a e7       	ldi	r20, 0x7A	; 122
    422e:	55 e4       	ldi	r21, 0x45	; 69
    4230:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	f8 01       	movw	r30, r16
    423a:	80 83       	st	Z, r24
    423c:	91 83       	std	Z+1, r25	; 0x01
    423e:	a2 83       	std	Z+2, r26	; 0x02
    4240:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4242:	fe 01       	movw	r30, r28
    4244:	eb 57       	subi	r30, 0x7B	; 123
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	60 81       	ld	r22, Z
    424a:	71 81       	ldd	r23, Z+1	; 0x01
    424c:	82 81       	ldd	r24, Z+2	; 0x02
    424e:	93 81       	ldd	r25, Z+3	; 0x03
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	40 e8       	ldi	r20, 0x80	; 128
    4256:	5f e3       	ldi	r21, 0x3F	; 63
    4258:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    425c:	88 23       	and	r24, r24
    425e:	44 f4       	brge	.+16     	; 0x4270 <main+0xdba>
		__ticks = 1;
    4260:	fe 01       	movw	r30, r28
    4262:	ed 57       	subi	r30, 0x7D	; 125
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	91 83       	std	Z+1, r25	; 0x01
    426c:	80 83       	st	Z, r24
    426e:	64 c0       	rjmp	.+200    	; 0x4338 <main+0xe82>
	else if (__tmp > 65535)
    4270:	fe 01       	movw	r30, r28
    4272:	eb 57       	subi	r30, 0x7B	; 123
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	60 81       	ld	r22, Z
    4278:	71 81       	ldd	r23, Z+1	; 0x01
    427a:	82 81       	ldd	r24, Z+2	; 0x02
    427c:	93 81       	ldd	r25, Z+3	; 0x03
    427e:	20 e0       	ldi	r18, 0x00	; 0
    4280:	3f ef       	ldi	r19, 0xFF	; 255
    4282:	4f e7       	ldi	r20, 0x7F	; 127
    4284:	57 e4       	ldi	r21, 0x47	; 71
    4286:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    428a:	18 16       	cp	r1, r24
    428c:	0c f0       	brlt	.+2      	; 0x4290 <main+0xdda>
    428e:	43 c0       	rjmp	.+134    	; 0x4316 <main+0xe60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4290:	fe 01       	movw	r30, r28
    4292:	e7 57       	subi	r30, 0x77	; 119
    4294:	ff 4f       	sbci	r31, 0xFF	; 255
    4296:	60 81       	ld	r22, Z
    4298:	71 81       	ldd	r23, Z+1	; 0x01
    429a:	82 81       	ldd	r24, Z+2	; 0x02
    429c:	93 81       	ldd	r25, Z+3	; 0x03
    429e:	20 e0       	ldi	r18, 0x00	; 0
    42a0:	30 e0       	ldi	r19, 0x00	; 0
    42a2:	40 e2       	ldi	r20, 0x20	; 32
    42a4:	51 e4       	ldi	r21, 0x41	; 65
    42a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	8e 01       	movw	r16, r28
    42b0:	0d 57       	subi	r16, 0x7D	; 125
    42b2:	1f 4f       	sbci	r17, 0xFF	; 255
    42b4:	bc 01       	movw	r22, r24
    42b6:	cd 01       	movw	r24, r26
    42b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	f8 01       	movw	r30, r16
    42c2:	91 83       	std	Z+1, r25	; 0x01
    42c4:	80 83       	st	Z, r24
    42c6:	1f c0       	rjmp	.+62     	; 0x4306 <main+0xe50>
    42c8:	fe 01       	movw	r30, r28
    42ca:	ef 57       	subi	r30, 0x7F	; 127
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	80 e9       	ldi	r24, 0x90	; 144
    42d0:	91 e0       	ldi	r25, 0x01	; 1
    42d2:	91 83       	std	Z+1, r25	; 0x01
    42d4:	80 83       	st	Z, r24
    42d6:	fe 01       	movw	r30, r28
    42d8:	ef 57       	subi	r30, 0x7F	; 127
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	80 81       	ld	r24, Z
    42de:	91 81       	ldd	r25, Z+1	; 0x01
    42e0:	01 97       	sbiw	r24, 0x01	; 1
    42e2:	f1 f7       	brne	.-4      	; 0x42e0 <main+0xe2a>
    42e4:	fe 01       	movw	r30, r28
    42e6:	ef 57       	subi	r30, 0x7F	; 127
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	91 83       	std	Z+1, r25	; 0x01
    42ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ee:	de 01       	movw	r26, r28
    42f0:	ad 57       	subi	r26, 0x7D	; 125
    42f2:	bf 4f       	sbci	r27, 0xFF	; 255
    42f4:	fe 01       	movw	r30, r28
    42f6:	ed 57       	subi	r30, 0x7D	; 125
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	80 81       	ld	r24, Z
    42fc:	91 81       	ldd	r25, Z+1	; 0x01
    42fe:	01 97       	sbiw	r24, 0x01	; 1
    4300:	11 96       	adiw	r26, 0x01	; 1
    4302:	9c 93       	st	X, r25
    4304:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4306:	fe 01       	movw	r30, r28
    4308:	ed 57       	subi	r30, 0x7D	; 125
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	80 81       	ld	r24, Z
    430e:	91 81       	ldd	r25, Z+1	; 0x01
    4310:	00 97       	sbiw	r24, 0x00	; 0
    4312:	d1 f6       	brne	.-76     	; 0x42c8 <main+0xe12>
    4314:	28 c0       	rjmp	.+80     	; 0x4366 <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4316:	8e 01       	movw	r16, r28
    4318:	0d 57       	subi	r16, 0x7D	; 125
    431a:	1f 4f       	sbci	r17, 0xFF	; 255
    431c:	fe 01       	movw	r30, r28
    431e:	eb 57       	subi	r30, 0x7B	; 123
    4320:	ff 4f       	sbci	r31, 0xFF	; 255
    4322:	60 81       	ld	r22, Z
    4324:	71 81       	ldd	r23, Z+1	; 0x01
    4326:	82 81       	ldd	r24, Z+2	; 0x02
    4328:	93 81       	ldd	r25, Z+3	; 0x03
    432a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	f8 01       	movw	r30, r16
    4334:	91 83       	std	Z+1, r25	; 0x01
    4336:	80 83       	st	Z, r24
    4338:	de 01       	movw	r26, r28
    433a:	a1 58       	subi	r26, 0x81	; 129
    433c:	bf 4f       	sbci	r27, 0xFF	; 255
    433e:	fe 01       	movw	r30, r28
    4340:	ed 57       	subi	r30, 0x7D	; 125
    4342:	ff 4f       	sbci	r31, 0xFF	; 255
    4344:	80 81       	ld	r24, Z
    4346:	91 81       	ldd	r25, Z+1	; 0x01
    4348:	11 96       	adiw	r26, 0x01	; 1
    434a:	9c 93       	st	X, r25
    434c:	8e 93       	st	-X, r24
    434e:	fe 01       	movw	r30, r28
    4350:	e1 58       	subi	r30, 0x81	; 129
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	80 81       	ld	r24, Z
    4356:	91 81       	ldd	r25, Z+1	; 0x01
    4358:	01 97       	sbiw	r24, 0x01	; 1
    435a:	f1 f7       	brne	.-4      	; 0x4358 <main+0xea2>
    435c:	fe 01       	movw	r30, r28
    435e:	e1 58       	subi	r30, 0x81	; 129
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	91 83       	std	Z+1, r25	; 0x01
    4364:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 9){
    4366:	fe 01       	movw	r30, r28
    4368:	e8 50       	subi	r30, 0x08	; 8
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	80 81       	ld	r24, Z
    436e:	89 30       	cpi	r24, 0x09	; 9
    4370:	09 f0       	breq	.+2      	; 0x4374 <main+0xebe>
    4372:	ce c0       	rjmp	.+412    	; 0x4510 <main+0x105a>
			LCD_displayCharacter('*');
    4374:	8a e2       	ldi	r24, 0x2A	; 42
    4376:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '9';
    437a:	fe 01       	movw	r30, r28
    437c:	e7 50       	subi	r30, 0x07	; 7
    437e:	ff 4f       	sbci	r31, 0xFF	; 255
    4380:	80 81       	ld	r24, Z
    4382:	28 2f       	mov	r18, r24
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	ce 01       	movw	r24, r28
    4388:	85 50       	subi	r24, 0x05	; 5
    438a:	9f 4f       	sbci	r25, 0xFF	; 255
    438c:	fc 01       	movw	r30, r24
    438e:	e2 0f       	add	r30, r18
    4390:	f3 1f       	adc	r31, r19
    4392:	89 e3       	ldi	r24, 0x39	; 57
    4394:	80 83       	st	Z, r24
			c++;
    4396:	de 01       	movw	r26, r28
    4398:	a7 50       	subi	r26, 0x07	; 7
    439a:	bf 4f       	sbci	r27, 0xFF	; 255
    439c:	fe 01       	movw	r30, r28
    439e:	e7 50       	subi	r30, 0x07	; 7
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	80 81       	ld	r24, Z
    43a4:	8f 5f       	subi	r24, 0xFF	; 255
    43a6:	8c 93       	st	X, r24
    43a8:	fe 01       	movw	r30, r28
    43aa:	e5 58       	subi	r30, 0x85	; 133
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	ac e0       	ldi	r26, 0x0C	; 12
    43b4:	b2 e4       	ldi	r27, 0x42	; 66
    43b6:	80 83       	st	Z, r24
    43b8:	91 83       	std	Z+1, r25	; 0x01
    43ba:	a2 83       	std	Z+2, r26	; 0x02
    43bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43be:	8e 01       	movw	r16, r28
    43c0:	09 58       	subi	r16, 0x89	; 137
    43c2:	1f 4f       	sbci	r17, 0xFF	; 255
    43c4:	fe 01       	movw	r30, r28
    43c6:	e5 58       	subi	r30, 0x85	; 133
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	60 81       	ld	r22, Z
    43cc:	71 81       	ldd	r23, Z+1	; 0x01
    43ce:	82 81       	ldd	r24, Z+2	; 0x02
    43d0:	93 81       	ldd	r25, Z+3	; 0x03
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	4a e7       	ldi	r20, 0x7A	; 122
    43d8:	55 e4       	ldi	r21, 0x45	; 69
    43da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43de:	dc 01       	movw	r26, r24
    43e0:	cb 01       	movw	r24, r22
    43e2:	f8 01       	movw	r30, r16
    43e4:	80 83       	st	Z, r24
    43e6:	91 83       	std	Z+1, r25	; 0x01
    43e8:	a2 83       	std	Z+2, r26	; 0x02
    43ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43ec:	fe 01       	movw	r30, r28
    43ee:	e9 58       	subi	r30, 0x89	; 137
    43f0:	ff 4f       	sbci	r31, 0xFF	; 255
    43f2:	60 81       	ld	r22, Z
    43f4:	71 81       	ldd	r23, Z+1	; 0x01
    43f6:	82 81       	ldd	r24, Z+2	; 0x02
    43f8:	93 81       	ldd	r25, Z+3	; 0x03
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	40 e8       	ldi	r20, 0x80	; 128
    4400:	5f e3       	ldi	r21, 0x3F	; 63
    4402:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4406:	88 23       	and	r24, r24
    4408:	44 f4       	brge	.+16     	; 0x441a <main+0xf64>
		__ticks = 1;
    440a:	fe 01       	movw	r30, r28
    440c:	eb 58       	subi	r30, 0x8B	; 139
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	91 83       	std	Z+1, r25	; 0x01
    4416:	80 83       	st	Z, r24
    4418:	64 c0       	rjmp	.+200    	; 0x44e2 <main+0x102c>
	else if (__tmp > 65535)
    441a:	fe 01       	movw	r30, r28
    441c:	e9 58       	subi	r30, 0x89	; 137
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	60 81       	ld	r22, Z
    4422:	71 81       	ldd	r23, Z+1	; 0x01
    4424:	82 81       	ldd	r24, Z+2	; 0x02
    4426:	93 81       	ldd	r25, Z+3	; 0x03
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	3f ef       	ldi	r19, 0xFF	; 255
    442c:	4f e7       	ldi	r20, 0x7F	; 127
    442e:	57 e4       	ldi	r21, 0x47	; 71
    4430:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4434:	18 16       	cp	r1, r24
    4436:	0c f0       	brlt	.+2      	; 0x443a <main+0xf84>
    4438:	43 c0       	rjmp	.+134    	; 0x44c0 <main+0x100a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    443a:	fe 01       	movw	r30, r28
    443c:	e5 58       	subi	r30, 0x85	; 133
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	60 81       	ld	r22, Z
    4442:	71 81       	ldd	r23, Z+1	; 0x01
    4444:	82 81       	ldd	r24, Z+2	; 0x02
    4446:	93 81       	ldd	r25, Z+3	; 0x03
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e2       	ldi	r20, 0x20	; 32
    444e:	51 e4       	ldi	r21, 0x41	; 65
    4450:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	8e 01       	movw	r16, r28
    445a:	0b 58       	subi	r16, 0x8B	; 139
    445c:	1f 4f       	sbci	r17, 0xFF	; 255
    445e:	bc 01       	movw	r22, r24
    4460:	cd 01       	movw	r24, r26
    4462:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4466:	dc 01       	movw	r26, r24
    4468:	cb 01       	movw	r24, r22
    446a:	f8 01       	movw	r30, r16
    446c:	91 83       	std	Z+1, r25	; 0x01
    446e:	80 83       	st	Z, r24
    4470:	1f c0       	rjmp	.+62     	; 0x44b0 <main+0xffa>
    4472:	fe 01       	movw	r30, r28
    4474:	ed 58       	subi	r30, 0x8D	; 141
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	80 e9       	ldi	r24, 0x90	; 144
    447a:	91 e0       	ldi	r25, 0x01	; 1
    447c:	91 83       	std	Z+1, r25	; 0x01
    447e:	80 83       	st	Z, r24
    4480:	fe 01       	movw	r30, r28
    4482:	ed 58       	subi	r30, 0x8D	; 141
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	80 81       	ld	r24, Z
    4488:	91 81       	ldd	r25, Z+1	; 0x01
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	f1 f7       	brne	.-4      	; 0x448a <main+0xfd4>
    448e:	fe 01       	movw	r30, r28
    4490:	ed 58       	subi	r30, 0x8D	; 141
    4492:	ff 4f       	sbci	r31, 0xFF	; 255
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4498:	de 01       	movw	r26, r28
    449a:	ab 58       	subi	r26, 0x8B	; 139
    449c:	bf 4f       	sbci	r27, 0xFF	; 255
    449e:	fe 01       	movw	r30, r28
    44a0:	eb 58       	subi	r30, 0x8B	; 139
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	80 81       	ld	r24, Z
    44a6:	91 81       	ldd	r25, Z+1	; 0x01
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	11 96       	adiw	r26, 0x01	; 1
    44ac:	9c 93       	st	X, r25
    44ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44b0:	fe 01       	movw	r30, r28
    44b2:	eb 58       	subi	r30, 0x8B	; 139
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	80 81       	ld	r24, Z
    44b8:	91 81       	ldd	r25, Z+1	; 0x01
    44ba:	00 97       	sbiw	r24, 0x00	; 0
    44bc:	d1 f6       	brne	.-76     	; 0x4472 <main+0xfbc>
    44be:	28 c0       	rjmp	.+80     	; 0x4510 <main+0x105a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c0:	8e 01       	movw	r16, r28
    44c2:	0b 58       	subi	r16, 0x8B	; 139
    44c4:	1f 4f       	sbci	r17, 0xFF	; 255
    44c6:	fe 01       	movw	r30, r28
    44c8:	e9 58       	subi	r30, 0x89	; 137
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	60 81       	ld	r22, Z
    44ce:	71 81       	ldd	r23, Z+1	; 0x01
    44d0:	82 81       	ldd	r24, Z+2	; 0x02
    44d2:	93 81       	ldd	r25, Z+3	; 0x03
    44d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	f8 01       	movw	r30, r16
    44de:	91 83       	std	Z+1, r25	; 0x01
    44e0:	80 83       	st	Z, r24
    44e2:	de 01       	movw	r26, r28
    44e4:	af 58       	subi	r26, 0x8F	; 143
    44e6:	bf 4f       	sbci	r27, 0xFF	; 255
    44e8:	fe 01       	movw	r30, r28
    44ea:	eb 58       	subi	r30, 0x8B	; 139
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	80 81       	ld	r24, Z
    44f0:	91 81       	ldd	r25, Z+1	; 0x01
    44f2:	11 96       	adiw	r26, 0x01	; 1
    44f4:	9c 93       	st	X, r25
    44f6:	8e 93       	st	-X, r24
    44f8:	fe 01       	movw	r30, r28
    44fa:	ef 58       	subi	r30, 0x8F	; 143
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	80 81       	ld	r24, Z
    4500:	91 81       	ldd	r25, Z+1	; 0x01
    4502:	01 97       	sbiw	r24, 0x01	; 1
    4504:	f1 f7       	brne	.-4      	; 0x4502 <main+0x104c>
    4506:	fe 01       	movw	r30, r28
    4508:	ef 58       	subi	r30, 0x8F	; 143
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	91 83       	std	Z+1, r25	; 0x01
    450e:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == '*'){
    4510:	fe 01       	movw	r30, r28
    4512:	e8 50       	subi	r30, 0x08	; 8
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	80 81       	ld	r24, Z
    4518:	8a 32       	cpi	r24, 0x2A	; 42
    451a:	09 f0       	breq	.+2      	; 0x451e <main+0x1068>
    451c:	ce c0       	rjmp	.+412    	; 0x46ba <main+0x1204>
			LCD_displayCharacter('*');
    451e:	8a e2       	ldi	r24, 0x2A	; 42
    4520:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '*';
    4524:	fe 01       	movw	r30, r28
    4526:	e7 50       	subi	r30, 0x07	; 7
    4528:	ff 4f       	sbci	r31, 0xFF	; 255
    452a:	80 81       	ld	r24, Z
    452c:	28 2f       	mov	r18, r24
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	ce 01       	movw	r24, r28
    4532:	85 50       	subi	r24, 0x05	; 5
    4534:	9f 4f       	sbci	r25, 0xFF	; 255
    4536:	fc 01       	movw	r30, r24
    4538:	e2 0f       	add	r30, r18
    453a:	f3 1f       	adc	r31, r19
    453c:	8a e2       	ldi	r24, 0x2A	; 42
    453e:	80 83       	st	Z, r24
			c++;
    4540:	de 01       	movw	r26, r28
    4542:	a7 50       	subi	r26, 0x07	; 7
    4544:	bf 4f       	sbci	r27, 0xFF	; 255
    4546:	fe 01       	movw	r30, r28
    4548:	e7 50       	subi	r30, 0x07	; 7
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 81       	ld	r24, Z
    454e:	8f 5f       	subi	r24, 0xFF	; 255
    4550:	8c 93       	st	X, r24
    4552:	fe 01       	movw	r30, r28
    4554:	e3 59       	subi	r30, 0x93	; 147
    4556:	ff 4f       	sbci	r31, 0xFF	; 255
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	ac e0       	ldi	r26, 0x0C	; 12
    455e:	b2 e4       	ldi	r27, 0x42	; 66
    4560:	80 83       	st	Z, r24
    4562:	91 83       	std	Z+1, r25	; 0x01
    4564:	a2 83       	std	Z+2, r26	; 0x02
    4566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4568:	8e 01       	movw	r16, r28
    456a:	07 59       	subi	r16, 0x97	; 151
    456c:	1f 4f       	sbci	r17, 0xFF	; 255
    456e:	fe 01       	movw	r30, r28
    4570:	e3 59       	subi	r30, 0x93	; 147
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	60 81       	ld	r22, Z
    4576:	71 81       	ldd	r23, Z+1	; 0x01
    4578:	82 81       	ldd	r24, Z+2	; 0x02
    457a:	93 81       	ldd	r25, Z+3	; 0x03
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	4a e7       	ldi	r20, 0x7A	; 122
    4582:	55 e4       	ldi	r21, 0x45	; 69
    4584:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	f8 01       	movw	r30, r16
    458e:	80 83       	st	Z, r24
    4590:	91 83       	std	Z+1, r25	; 0x01
    4592:	a2 83       	std	Z+2, r26	; 0x02
    4594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4596:	fe 01       	movw	r30, r28
    4598:	e7 59       	subi	r30, 0x97	; 151
    459a:	ff 4f       	sbci	r31, 0xFF	; 255
    459c:	60 81       	ld	r22, Z
    459e:	71 81       	ldd	r23, Z+1	; 0x01
    45a0:	82 81       	ldd	r24, Z+2	; 0x02
    45a2:	93 81       	ldd	r25, Z+3	; 0x03
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e8       	ldi	r20, 0x80	; 128
    45aa:	5f e3       	ldi	r21, 0x3F	; 63
    45ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    45b0:	88 23       	and	r24, r24
    45b2:	44 f4       	brge	.+16     	; 0x45c4 <main+0x110e>
		__ticks = 1;
    45b4:	fe 01       	movw	r30, r28
    45b6:	e9 59       	subi	r30, 0x99	; 153
    45b8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	91 83       	std	Z+1, r25	; 0x01
    45c0:	80 83       	st	Z, r24
    45c2:	64 c0       	rjmp	.+200    	; 0x468c <main+0x11d6>
	else if (__tmp > 65535)
    45c4:	fe 01       	movw	r30, r28
    45c6:	e7 59       	subi	r30, 0x97	; 151
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	60 81       	ld	r22, Z
    45cc:	71 81       	ldd	r23, Z+1	; 0x01
    45ce:	82 81       	ldd	r24, Z+2	; 0x02
    45d0:	93 81       	ldd	r25, Z+3	; 0x03
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	3f ef       	ldi	r19, 0xFF	; 255
    45d6:	4f e7       	ldi	r20, 0x7F	; 127
    45d8:	57 e4       	ldi	r21, 0x47	; 71
    45da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    45de:	18 16       	cp	r1, r24
    45e0:	0c f0       	brlt	.+2      	; 0x45e4 <main+0x112e>
    45e2:	43 c0       	rjmp	.+134    	; 0x466a <main+0x11b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45e4:	fe 01       	movw	r30, r28
    45e6:	e3 59       	subi	r30, 0x93	; 147
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	60 81       	ld	r22, Z
    45ec:	71 81       	ldd	r23, Z+1	; 0x01
    45ee:	82 81       	ldd	r24, Z+2	; 0x02
    45f0:	93 81       	ldd	r25, Z+3	; 0x03
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 e2       	ldi	r20, 0x20	; 32
    45f8:	51 e4       	ldi	r21, 0x41	; 65
    45fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	8e 01       	movw	r16, r28
    4604:	09 59       	subi	r16, 0x99	; 153
    4606:	1f 4f       	sbci	r17, 0xFF	; 255
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	f8 01       	movw	r30, r16
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	80 83       	st	Z, r24
    461a:	1f c0       	rjmp	.+62     	; 0x465a <main+0x11a4>
    461c:	fe 01       	movw	r30, r28
    461e:	eb 59       	subi	r30, 0x9B	; 155
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	80 e9       	ldi	r24, 0x90	; 144
    4624:	91 e0       	ldi	r25, 0x01	; 1
    4626:	91 83       	std	Z+1, r25	; 0x01
    4628:	80 83       	st	Z, r24
    462a:	fe 01       	movw	r30, r28
    462c:	eb 59       	subi	r30, 0x9B	; 155
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	80 81       	ld	r24, Z
    4632:	91 81       	ldd	r25, Z+1	; 0x01
    4634:	01 97       	sbiw	r24, 0x01	; 1
    4636:	f1 f7       	brne	.-4      	; 0x4634 <main+0x117e>
    4638:	fe 01       	movw	r30, r28
    463a:	eb 59       	subi	r30, 0x9B	; 155
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4642:	de 01       	movw	r26, r28
    4644:	a9 59       	subi	r26, 0x99	; 153
    4646:	bf 4f       	sbci	r27, 0xFF	; 255
    4648:	fe 01       	movw	r30, r28
    464a:	e9 59       	subi	r30, 0x99	; 153
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 81       	ld	r24, Z
    4650:	91 81       	ldd	r25, Z+1	; 0x01
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	11 96       	adiw	r26, 0x01	; 1
    4656:	9c 93       	st	X, r25
    4658:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    465a:	fe 01       	movw	r30, r28
    465c:	e9 59       	subi	r30, 0x99	; 153
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	80 81       	ld	r24, Z
    4662:	91 81       	ldd	r25, Z+1	; 0x01
    4664:	00 97       	sbiw	r24, 0x00	; 0
    4666:	d1 f6       	brne	.-76     	; 0x461c <main+0x1166>
    4668:	28 c0       	rjmp	.+80     	; 0x46ba <main+0x1204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466a:	8e 01       	movw	r16, r28
    466c:	09 59       	subi	r16, 0x99	; 153
    466e:	1f 4f       	sbci	r17, 0xFF	; 255
    4670:	fe 01       	movw	r30, r28
    4672:	e7 59       	subi	r30, 0x97	; 151
    4674:	ff 4f       	sbci	r31, 0xFF	; 255
    4676:	60 81       	ld	r22, Z
    4678:	71 81       	ldd	r23, Z+1	; 0x01
    467a:	82 81       	ldd	r24, Z+2	; 0x02
    467c:	93 81       	ldd	r25, Z+3	; 0x03
    467e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	f8 01       	movw	r30, r16
    4688:	91 83       	std	Z+1, r25	; 0x01
    468a:	80 83       	st	Z, r24
    468c:	de 01       	movw	r26, r28
    468e:	ad 59       	subi	r26, 0x9D	; 157
    4690:	bf 4f       	sbci	r27, 0xFF	; 255
    4692:	fe 01       	movw	r30, r28
    4694:	e9 59       	subi	r30, 0x99	; 153
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	80 81       	ld	r24, Z
    469a:	91 81       	ldd	r25, Z+1	; 0x01
    469c:	11 96       	adiw	r26, 0x01	; 1
    469e:	9c 93       	st	X, r25
    46a0:	8e 93       	st	-X, r24
    46a2:	fe 01       	movw	r30, r28
    46a4:	ed 59       	subi	r30, 0x9D	; 157
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	80 81       	ld	r24, Z
    46aa:	91 81       	ldd	r25, Z+1	; 0x01
    46ac:	01 97       	sbiw	r24, 0x01	; 1
    46ae:	f1 f7       	brne	.-4      	; 0x46ac <main+0x11f6>
    46b0:	fe 01       	movw	r30, r28
    46b2:	ed 59       	subi	r30, 0x9D	; 157
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	91 83       	std	Z+1, r25	; 0x01
    46b8:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 0){
    46ba:	fe 01       	movw	r30, r28
    46bc:	e8 50       	subi	r30, 0x08	; 8
    46be:	ff 4f       	sbci	r31, 0xFF	; 255
    46c0:	80 81       	ld	r24, Z
    46c2:	88 23       	and	r24, r24
    46c4:	09 f0       	breq	.+2      	; 0x46c8 <main+0x1212>
    46c6:	ce c0       	rjmp	.+412    	; 0x4864 <main+0x13ae>
			LCD_displayCharacter('*');
    46c8:	8a e2       	ldi	r24, 0x2A	; 42
    46ca:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '0';
    46ce:	fe 01       	movw	r30, r28
    46d0:	e7 50       	subi	r30, 0x07	; 7
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	80 81       	ld	r24, Z
    46d6:	28 2f       	mov	r18, r24
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	ce 01       	movw	r24, r28
    46dc:	85 50       	subi	r24, 0x05	; 5
    46de:	9f 4f       	sbci	r25, 0xFF	; 255
    46e0:	fc 01       	movw	r30, r24
    46e2:	e2 0f       	add	r30, r18
    46e4:	f3 1f       	adc	r31, r19
    46e6:	80 e3       	ldi	r24, 0x30	; 48
    46e8:	80 83       	st	Z, r24
			c++;
    46ea:	de 01       	movw	r26, r28
    46ec:	a7 50       	subi	r26, 0x07	; 7
    46ee:	bf 4f       	sbci	r27, 0xFF	; 255
    46f0:	fe 01       	movw	r30, r28
    46f2:	e7 50       	subi	r30, 0x07	; 7
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	80 81       	ld	r24, Z
    46f8:	8f 5f       	subi	r24, 0xFF	; 255
    46fa:	8c 93       	st	X, r24
    46fc:	fe 01       	movw	r30, r28
    46fe:	e1 5a       	subi	r30, 0xA1	; 161
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	ac e0       	ldi	r26, 0x0C	; 12
    4708:	b2 e4       	ldi	r27, 0x42	; 66
    470a:	80 83       	st	Z, r24
    470c:	91 83       	std	Z+1, r25	; 0x01
    470e:	a2 83       	std	Z+2, r26	; 0x02
    4710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4712:	8e 01       	movw	r16, r28
    4714:	05 5a       	subi	r16, 0xA5	; 165
    4716:	1f 4f       	sbci	r17, 0xFF	; 255
    4718:	fe 01       	movw	r30, r28
    471a:	e1 5a       	subi	r30, 0xA1	; 161
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	60 81       	ld	r22, Z
    4720:	71 81       	ldd	r23, Z+1	; 0x01
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	4a e7       	ldi	r20, 0x7A	; 122
    472c:	55 e4       	ldi	r21, 0x45	; 69
    472e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	f8 01       	movw	r30, r16
    4738:	80 83       	st	Z, r24
    473a:	91 83       	std	Z+1, r25	; 0x01
    473c:	a2 83       	std	Z+2, r26	; 0x02
    473e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4740:	fe 01       	movw	r30, r28
    4742:	e5 5a       	subi	r30, 0xA5	; 165
    4744:	ff 4f       	sbci	r31, 0xFF	; 255
    4746:	60 81       	ld	r22, Z
    4748:	71 81       	ldd	r23, Z+1	; 0x01
    474a:	82 81       	ldd	r24, Z+2	; 0x02
    474c:	93 81       	ldd	r25, Z+3	; 0x03
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	40 e8       	ldi	r20, 0x80	; 128
    4754:	5f e3       	ldi	r21, 0x3F	; 63
    4756:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    475a:	88 23       	and	r24, r24
    475c:	44 f4       	brge	.+16     	; 0x476e <main+0x12b8>
		__ticks = 1;
    475e:	fe 01       	movw	r30, r28
    4760:	e7 5a       	subi	r30, 0xA7	; 167
    4762:	ff 4f       	sbci	r31, 0xFF	; 255
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	91 83       	std	Z+1, r25	; 0x01
    476a:	80 83       	st	Z, r24
    476c:	64 c0       	rjmp	.+200    	; 0x4836 <main+0x1380>
	else if (__tmp > 65535)
    476e:	fe 01       	movw	r30, r28
    4770:	e5 5a       	subi	r30, 0xA5	; 165
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	60 81       	ld	r22, Z
    4776:	71 81       	ldd	r23, Z+1	; 0x01
    4778:	82 81       	ldd	r24, Z+2	; 0x02
    477a:	93 81       	ldd	r25, Z+3	; 0x03
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	3f ef       	ldi	r19, 0xFF	; 255
    4780:	4f e7       	ldi	r20, 0x7F	; 127
    4782:	57 e4       	ldi	r21, 0x47	; 71
    4784:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4788:	18 16       	cp	r1, r24
    478a:	0c f0       	brlt	.+2      	; 0x478e <main+0x12d8>
    478c:	43 c0       	rjmp	.+134    	; 0x4814 <main+0x135e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    478e:	fe 01       	movw	r30, r28
    4790:	e1 5a       	subi	r30, 0xA1	; 161
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	60 81       	ld	r22, Z
    4796:	71 81       	ldd	r23, Z+1	; 0x01
    4798:	82 81       	ldd	r24, Z+2	; 0x02
    479a:	93 81       	ldd	r25, Z+3	; 0x03
    479c:	20 e0       	ldi	r18, 0x00	; 0
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	40 e2       	ldi	r20, 0x20	; 32
    47a2:	51 e4       	ldi	r21, 0x41	; 65
    47a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47a8:	dc 01       	movw	r26, r24
    47aa:	cb 01       	movw	r24, r22
    47ac:	8e 01       	movw	r16, r28
    47ae:	07 5a       	subi	r16, 0xA7	; 167
    47b0:	1f 4f       	sbci	r17, 0xFF	; 255
    47b2:	bc 01       	movw	r22, r24
    47b4:	cd 01       	movw	r24, r26
    47b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	f8 01       	movw	r30, r16
    47c0:	91 83       	std	Z+1, r25	; 0x01
    47c2:	80 83       	st	Z, r24
    47c4:	1f c0       	rjmp	.+62     	; 0x4804 <main+0x134e>
    47c6:	fe 01       	movw	r30, r28
    47c8:	e9 5a       	subi	r30, 0xA9	; 169
    47ca:	ff 4f       	sbci	r31, 0xFF	; 255
    47cc:	80 e9       	ldi	r24, 0x90	; 144
    47ce:	91 e0       	ldi	r25, 0x01	; 1
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	80 83       	st	Z, r24
    47d4:	fe 01       	movw	r30, r28
    47d6:	e9 5a       	subi	r30, 0xA9	; 169
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	80 81       	ld	r24, Z
    47dc:	91 81       	ldd	r25, Z+1	; 0x01
    47de:	01 97       	sbiw	r24, 0x01	; 1
    47e0:	f1 f7       	brne	.-4      	; 0x47de <main+0x1328>
    47e2:	fe 01       	movw	r30, r28
    47e4:	e9 5a       	subi	r30, 0xA9	; 169
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	91 83       	std	Z+1, r25	; 0x01
    47ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ec:	de 01       	movw	r26, r28
    47ee:	a7 5a       	subi	r26, 0xA7	; 167
    47f0:	bf 4f       	sbci	r27, 0xFF	; 255
    47f2:	fe 01       	movw	r30, r28
    47f4:	e7 5a       	subi	r30, 0xA7	; 167
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	80 81       	ld	r24, Z
    47fa:	91 81       	ldd	r25, Z+1	; 0x01
    47fc:	01 97       	sbiw	r24, 0x01	; 1
    47fe:	11 96       	adiw	r26, 0x01	; 1
    4800:	9c 93       	st	X, r25
    4802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4804:	fe 01       	movw	r30, r28
    4806:	e7 5a       	subi	r30, 0xA7	; 167
    4808:	ff 4f       	sbci	r31, 0xFF	; 255
    480a:	80 81       	ld	r24, Z
    480c:	91 81       	ldd	r25, Z+1	; 0x01
    480e:	00 97       	sbiw	r24, 0x00	; 0
    4810:	d1 f6       	brne	.-76     	; 0x47c6 <main+0x1310>
    4812:	28 c0       	rjmp	.+80     	; 0x4864 <main+0x13ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4814:	8e 01       	movw	r16, r28
    4816:	07 5a       	subi	r16, 0xA7	; 167
    4818:	1f 4f       	sbci	r17, 0xFF	; 255
    481a:	fe 01       	movw	r30, r28
    481c:	e5 5a       	subi	r30, 0xA5	; 165
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	60 81       	ld	r22, Z
    4822:	71 81       	ldd	r23, Z+1	; 0x01
    4824:	82 81       	ldd	r24, Z+2	; 0x02
    4826:	93 81       	ldd	r25, Z+3	; 0x03
    4828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	f8 01       	movw	r30, r16
    4832:	91 83       	std	Z+1, r25	; 0x01
    4834:	80 83       	st	Z, r24
    4836:	de 01       	movw	r26, r28
    4838:	ab 5a       	subi	r26, 0xAB	; 171
    483a:	bf 4f       	sbci	r27, 0xFF	; 255
    483c:	fe 01       	movw	r30, r28
    483e:	e7 5a       	subi	r30, 0xA7	; 167
    4840:	ff 4f       	sbci	r31, 0xFF	; 255
    4842:	80 81       	ld	r24, Z
    4844:	91 81       	ldd	r25, Z+1	; 0x01
    4846:	11 96       	adiw	r26, 0x01	; 1
    4848:	9c 93       	st	X, r25
    484a:	8e 93       	st	-X, r24
    484c:	fe 01       	movw	r30, r28
    484e:	eb 5a       	subi	r30, 0xAB	; 171
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	80 81       	ld	r24, Z
    4854:	91 81       	ldd	r25, Z+1	; 0x01
    4856:	01 97       	sbiw	r24, 0x01	; 1
    4858:	f1 f7       	brne	.-4      	; 0x4856 <main+0x13a0>
    485a:	fe 01       	movw	r30, r28
    485c:	eb 5a       	subi	r30, 0xAB	; 171
    485e:	ff 4f       	sbci	r31, 0xFF	; 255
    4860:	91 83       	std	Z+1, r25	; 0x01
    4862:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == '#'){
    4864:	fe 01       	movw	r30, r28
    4866:	e8 50       	subi	r30, 0x08	; 8
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	80 81       	ld	r24, Z
    486c:	83 32       	cpi	r24, 0x23	; 35
    486e:	09 f0       	breq	.+2      	; 0x4872 <main+0x13bc>
    4870:	ce c0       	rjmp	.+412    	; 0x4a0e <main+0x1558>
			LCD_displayCharacter('*');
    4872:	8a e2       	ldi	r24, 0x2A	; 42
    4874:	0e 94 4e 14 	call	0x289c	; 0x289c <LCD_displayCharacter>
			pressed_Keys[c] = '#';
    4878:	fe 01       	movw	r30, r28
    487a:	e7 50       	subi	r30, 0x07	; 7
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	80 81       	ld	r24, Z
    4880:	28 2f       	mov	r18, r24
    4882:	30 e0       	ldi	r19, 0x00	; 0
    4884:	ce 01       	movw	r24, r28
    4886:	85 50       	subi	r24, 0x05	; 5
    4888:	9f 4f       	sbci	r25, 0xFF	; 255
    488a:	fc 01       	movw	r30, r24
    488c:	e2 0f       	add	r30, r18
    488e:	f3 1f       	adc	r31, r19
    4890:	83 e2       	ldi	r24, 0x23	; 35
    4892:	80 83       	st	Z, r24
			c++;
    4894:	de 01       	movw	r26, r28
    4896:	a7 50       	subi	r26, 0x07	; 7
    4898:	bf 4f       	sbci	r27, 0xFF	; 255
    489a:	fe 01       	movw	r30, r28
    489c:	e7 50       	subi	r30, 0x07	; 7
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	80 81       	ld	r24, Z
    48a2:	8f 5f       	subi	r24, 0xFF	; 255
    48a4:	8c 93       	st	X, r24
    48a6:	fe 01       	movw	r30, r28
    48a8:	ef 5a       	subi	r30, 0xAF	; 175
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	ac e0       	ldi	r26, 0x0C	; 12
    48b2:	b2 e4       	ldi	r27, 0x42	; 66
    48b4:	80 83       	st	Z, r24
    48b6:	91 83       	std	Z+1, r25	; 0x01
    48b8:	a2 83       	std	Z+2, r26	; 0x02
    48ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48bc:	8e 01       	movw	r16, r28
    48be:	03 5b       	subi	r16, 0xB3	; 179
    48c0:	1f 4f       	sbci	r17, 0xFF	; 255
    48c2:	fe 01       	movw	r30, r28
    48c4:	ef 5a       	subi	r30, 0xAF	; 175
    48c6:	ff 4f       	sbci	r31, 0xFF	; 255
    48c8:	60 81       	ld	r22, Z
    48ca:	71 81       	ldd	r23, Z+1	; 0x01
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	93 81       	ldd	r25, Z+3	; 0x03
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	4a e7       	ldi	r20, 0x7A	; 122
    48d6:	55 e4       	ldi	r21, 0x45	; 69
    48d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	f8 01       	movw	r30, r16
    48e2:	80 83       	st	Z, r24
    48e4:	91 83       	std	Z+1, r25	; 0x01
    48e6:	a2 83       	std	Z+2, r26	; 0x02
    48e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48ea:	fe 01       	movw	r30, r28
    48ec:	e3 5b       	subi	r30, 0xB3	; 179
    48ee:	ff 4f       	sbci	r31, 0xFF	; 255
    48f0:	60 81       	ld	r22, Z
    48f2:	71 81       	ldd	r23, Z+1	; 0x01
    48f4:	82 81       	ldd	r24, Z+2	; 0x02
    48f6:	93 81       	ldd	r25, Z+3	; 0x03
    48f8:	20 e0       	ldi	r18, 0x00	; 0
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	40 e8       	ldi	r20, 0x80	; 128
    48fe:	5f e3       	ldi	r21, 0x3F	; 63
    4900:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4904:	88 23       	and	r24, r24
    4906:	44 f4       	brge	.+16     	; 0x4918 <main+0x1462>
		__ticks = 1;
    4908:	fe 01       	movw	r30, r28
    490a:	e5 5b       	subi	r30, 0xB5	; 181
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	91 83       	std	Z+1, r25	; 0x01
    4914:	80 83       	st	Z, r24
    4916:	64 c0       	rjmp	.+200    	; 0x49e0 <main+0x152a>
	else if (__tmp > 65535)
    4918:	fe 01       	movw	r30, r28
    491a:	e3 5b       	subi	r30, 0xB3	; 179
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	60 81       	ld	r22, Z
    4920:	71 81       	ldd	r23, Z+1	; 0x01
    4922:	82 81       	ldd	r24, Z+2	; 0x02
    4924:	93 81       	ldd	r25, Z+3	; 0x03
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	3f ef       	ldi	r19, 0xFF	; 255
    492a:	4f e7       	ldi	r20, 0x7F	; 127
    492c:	57 e4       	ldi	r21, 0x47	; 71
    492e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4932:	18 16       	cp	r1, r24
    4934:	0c f0       	brlt	.+2      	; 0x4938 <main+0x1482>
    4936:	43 c0       	rjmp	.+134    	; 0x49be <main+0x1508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4938:	fe 01       	movw	r30, r28
    493a:	ef 5a       	subi	r30, 0xAF	; 175
    493c:	ff 4f       	sbci	r31, 0xFF	; 255
    493e:	60 81       	ld	r22, Z
    4940:	71 81       	ldd	r23, Z+1	; 0x01
    4942:	82 81       	ldd	r24, Z+2	; 0x02
    4944:	93 81       	ldd	r25, Z+3	; 0x03
    4946:	20 e0       	ldi	r18, 0x00	; 0
    4948:	30 e0       	ldi	r19, 0x00	; 0
    494a:	40 e2       	ldi	r20, 0x20	; 32
    494c:	51 e4       	ldi	r21, 0x41	; 65
    494e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	8e 01       	movw	r16, r28
    4958:	05 5b       	subi	r16, 0xB5	; 181
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	bc 01       	movw	r22, r24
    495e:	cd 01       	movw	r24, r26
    4960:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	f8 01       	movw	r30, r16
    496a:	91 83       	std	Z+1, r25	; 0x01
    496c:	80 83       	st	Z, r24
    496e:	1f c0       	rjmp	.+62     	; 0x49ae <main+0x14f8>
    4970:	fe 01       	movw	r30, r28
    4972:	e7 5b       	subi	r30, 0xB7	; 183
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	80 e9       	ldi	r24, 0x90	; 144
    4978:	91 e0       	ldi	r25, 0x01	; 1
    497a:	91 83       	std	Z+1, r25	; 0x01
    497c:	80 83       	st	Z, r24
    497e:	fe 01       	movw	r30, r28
    4980:	e7 5b       	subi	r30, 0xB7	; 183
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	80 81       	ld	r24, Z
    4986:	91 81       	ldd	r25, Z+1	; 0x01
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <main+0x14d2>
    498c:	fe 01       	movw	r30, r28
    498e:	e7 5b       	subi	r30, 0xB7	; 183
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4996:	de 01       	movw	r26, r28
    4998:	a5 5b       	subi	r26, 0xB5	; 181
    499a:	bf 4f       	sbci	r27, 0xFF	; 255
    499c:	fe 01       	movw	r30, r28
    499e:	e5 5b       	subi	r30, 0xB5	; 181
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	80 81       	ld	r24, Z
    49a4:	91 81       	ldd	r25, Z+1	; 0x01
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	11 96       	adiw	r26, 0x01	; 1
    49aa:	9c 93       	st	X, r25
    49ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49ae:	fe 01       	movw	r30, r28
    49b0:	e5 5b       	subi	r30, 0xB5	; 181
    49b2:	ff 4f       	sbci	r31, 0xFF	; 255
    49b4:	80 81       	ld	r24, Z
    49b6:	91 81       	ldd	r25, Z+1	; 0x01
    49b8:	00 97       	sbiw	r24, 0x00	; 0
    49ba:	d1 f6       	brne	.-76     	; 0x4970 <main+0x14ba>
    49bc:	28 c0       	rjmp	.+80     	; 0x4a0e <main+0x1558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49be:	8e 01       	movw	r16, r28
    49c0:	05 5b       	subi	r16, 0xB5	; 181
    49c2:	1f 4f       	sbci	r17, 0xFF	; 255
    49c4:	fe 01       	movw	r30, r28
    49c6:	e3 5b       	subi	r30, 0xB3	; 179
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	60 81       	ld	r22, Z
    49cc:	71 81       	ldd	r23, Z+1	; 0x01
    49ce:	82 81       	ldd	r24, Z+2	; 0x02
    49d0:	93 81       	ldd	r25, Z+3	; 0x03
    49d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	f8 01       	movw	r30, r16
    49dc:	91 83       	std	Z+1, r25	; 0x01
    49de:	80 83       	st	Z, r24
    49e0:	de 01       	movw	r26, r28
    49e2:	a9 5b       	subi	r26, 0xB9	; 185
    49e4:	bf 4f       	sbci	r27, 0xFF	; 255
    49e6:	fe 01       	movw	r30, r28
    49e8:	e5 5b       	subi	r30, 0xB5	; 181
    49ea:	ff 4f       	sbci	r31, 0xFF	; 255
    49ec:	80 81       	ld	r24, Z
    49ee:	91 81       	ldd	r25, Z+1	; 0x01
    49f0:	11 96       	adiw	r26, 0x01	; 1
    49f2:	9c 93       	st	X, r25
    49f4:	8e 93       	st	-X, r24
    49f6:	fe 01       	movw	r30, r28
    49f8:	e9 5b       	subi	r30, 0xB9	; 185
    49fa:	ff 4f       	sbci	r31, 0xFF	; 255
    49fc:	80 81       	ld	r24, Z
    49fe:	91 81       	ldd	r25, Z+1	; 0x01
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	f1 f7       	brne	.-4      	; 0x4a00 <main+0x154a>
    4a04:	fe 01       	movw	r30, r28
    4a06:	e9 5b       	subi	r30, 0xB9	; 185
    4a08:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0a:	91 83       	std	Z+1, r25	; 0x01
    4a0c:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(c == Password_Length){
    4a0e:	fe 01       	movw	r30, r28
    4a10:	e7 50       	subi	r30, 0x07	; 7
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	80 81       	ld	r24, Z
    4a16:	86 30       	cpi	r24, 0x06	; 6
    4a18:	11 f0       	breq	.+4      	; 0x4a1e <main+0x1568>
    4a1a:	0c 94 05 1b 	jmp	0x360a	; 0x360a <main+0x154>
			for(int i = 0; i < 5; i++){
    4a1e:	fe 01       	movw	r30, r28
    4a20:	ea 50       	subi	r30, 0x0A	; 10
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	11 82       	std	Z+1, r1	; 0x01
    4a26:	10 82       	st	Z, r1
    4a28:	fe 01       	movw	r30, r28
    4a2a:	ea 50       	subi	r30, 0x0A	; 10
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	80 81       	ld	r24, Z
    4a30:	91 81       	ldd	r25, Z+1	; 0x01
    4a32:	85 30       	cpi	r24, 0x05	; 5
    4a34:	91 05       	cpc	r25, r1
    4a36:	14 f0       	brlt	.+4      	; 0x4a3c <main+0x1586>
    4a38:	0c 94 05 1b 	jmp	0x360a	; 0x360a <main+0x154>
				if(pressed_Keys[i] == password[i]){
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	ea 50       	subi	r30, 0x0A	; 10
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	20 81       	ld	r18, Z
    4a44:	31 81       	ldd	r19, Z+1	; 0x01
    4a46:	ce 01       	movw	r24, r28
    4a48:	85 50       	subi	r24, 0x05	; 5
    4a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4c:	fc 01       	movw	r30, r24
    4a4e:	e2 0f       	add	r30, r18
    4a50:	f3 1f       	adc	r31, r19
    4a52:	40 81       	ld	r20, Z
    4a54:	fe 01       	movw	r30, r28
    4a56:	ea 50       	subi	r30, 0x0A	; 10
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	20 81       	ld	r18, Z
    4a5c:	31 81       	ldd	r19, Z+1	; 0x01
    4a5e:	ce 01       	movw	r24, r28
    4a60:	8b 5f       	subi	r24, 0xFB	; 251
    4a62:	9e 4f       	sbci	r25, 0xFE	; 254
    4a64:	fc 01       	movw	r30, r24
    4a66:	e2 0f       	add	r30, r18
    4a68:	f3 1f       	adc	r31, r19
    4a6a:	80 81       	ld	r24, Z
    4a6c:	48 17       	cp	r20, r24
    4a6e:	09 f0       	breq	.+2      	; 0x4a72 <main+0x15bc>
    4a70:	53 c3       	rjmp	.+1702   	; 0x5118 <main+0x1c62>
					LCD_ClearScreen();
    4a72:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>
					LCD_displayString("Correct Password");
    4a76:	8f eb       	ldi	r24, 0xBF	; 191
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
    4a7e:	fe 01       	movw	r30, r28
    4a80:	ed 5b       	subi	r30, 0xBD	; 189
    4a82:	ff 4f       	sbci	r31, 0xFF	; 255
    4a84:	80 e0       	ldi	r24, 0x00	; 0
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	ac e0       	ldi	r26, 0x0C	; 12
    4a8a:	b2 e4       	ldi	r27, 0x42	; 66
    4a8c:	80 83       	st	Z, r24
    4a8e:	91 83       	std	Z+1, r25	; 0x01
    4a90:	a2 83       	std	Z+2, r26	; 0x02
    4a92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a94:	8e 01       	movw	r16, r28
    4a96:	01 5c       	subi	r16, 0xC1	; 193
    4a98:	1f 4f       	sbci	r17, 0xFF	; 255
    4a9a:	fe 01       	movw	r30, r28
    4a9c:	ed 5b       	subi	r30, 0xBD	; 189
    4a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa0:	60 81       	ld	r22, Z
    4aa2:	71 81       	ldd	r23, Z+1	; 0x01
    4aa4:	82 81       	ldd	r24, Z+2	; 0x02
    4aa6:	93 81       	ldd	r25, Z+3	; 0x03
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	4a e7       	ldi	r20, 0x7A	; 122
    4aae:	55 e4       	ldi	r21, 0x45	; 69
    4ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	cb 01       	movw	r24, r22
    4ab8:	f8 01       	movw	r30, r16
    4aba:	80 83       	st	Z, r24
    4abc:	91 83       	std	Z+1, r25	; 0x01
    4abe:	a2 83       	std	Z+2, r26	; 0x02
    4ac0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	ff 96       	adiw	r30, 0x3f	; 63
    4ac6:	60 81       	ld	r22, Z
    4ac8:	71 81       	ldd	r23, Z+1	; 0x01
    4aca:	82 81       	ldd	r24, Z+2	; 0x02
    4acc:	93 81       	ldd	r25, Z+3	; 0x03
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	40 e8       	ldi	r20, 0x80	; 128
    4ad4:	5f e3       	ldi	r21, 0x3F	; 63
    4ad6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4ada:	88 23       	and	r24, r24
    4adc:	2c f4       	brge	.+10     	; 0x4ae8 <main+0x1632>
		__ticks = 1;
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	9e af       	std	Y+62, r25	; 0x3e
    4ae4:	8d af       	std	Y+61, r24	; 0x3d
    4ae6:	46 c0       	rjmp	.+140    	; 0x4b74 <main+0x16be>
	else if (__tmp > 65535)
    4ae8:	fe 01       	movw	r30, r28
    4aea:	ff 96       	adiw	r30, 0x3f	; 63
    4aec:	60 81       	ld	r22, Z
    4aee:	71 81       	ldd	r23, Z+1	; 0x01
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	3f ef       	ldi	r19, 0xFF	; 255
    4af8:	4f e7       	ldi	r20, 0x7F	; 127
    4afa:	57 e4       	ldi	r21, 0x47	; 71
    4afc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4b00:	18 16       	cp	r1, r24
    4b02:	64 f5       	brge	.+88     	; 0x4b5c <main+0x16a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b04:	fe 01       	movw	r30, r28
    4b06:	ed 5b       	subi	r30, 0xBD	; 189
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	60 81       	ld	r22, Z
    4b0c:	71 81       	ldd	r23, Z+1	; 0x01
    4b0e:	82 81       	ldd	r24, Z+2	; 0x02
    4b10:	93 81       	ldd	r25, Z+3	; 0x03
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e2       	ldi	r20, 0x20	; 32
    4b18:	51 e4       	ldi	r21, 0x41	; 65
    4b1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	bc 01       	movw	r22, r24
    4b24:	cd 01       	movw	r24, r26
    4b26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b2a:	dc 01       	movw	r26, r24
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	9e af       	std	Y+62, r25	; 0x3e
    4b30:	8d af       	std	Y+61, r24	; 0x3d
    4b32:	0f c0       	rjmp	.+30     	; 0x4b52 <main+0x169c>
    4b34:	80 e9       	ldi	r24, 0x90	; 144
    4b36:	91 e0       	ldi	r25, 0x01	; 1
    4b38:	9c af       	std	Y+60, r25	; 0x3c
    4b3a:	8b af       	std	Y+59, r24	; 0x3b
    4b3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b40:	01 97       	sbiw	r24, 0x01	; 1
    4b42:	f1 f7       	brne	.-4      	; 0x4b40 <main+0x168a>
    4b44:	9c af       	std	Y+60, r25	; 0x3c
    4b46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b48:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b4c:	01 97       	sbiw	r24, 0x01	; 1
    4b4e:	9e af       	std	Y+62, r25	; 0x3e
    4b50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b52:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b54:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b56:	00 97       	sbiw	r24, 0x00	; 0
    4b58:	69 f7       	brne	.-38     	; 0x4b34 <main+0x167e>
    4b5a:	16 c0       	rjmp	.+44     	; 0x4b88 <main+0x16d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b5c:	fe 01       	movw	r30, r28
    4b5e:	ff 96       	adiw	r30, 0x3f	; 63
    4b60:	60 81       	ld	r22, Z
    4b62:	71 81       	ldd	r23, Z+1	; 0x01
    4b64:	82 81       	ldd	r24, Z+2	; 0x02
    4b66:	93 81       	ldd	r25, Z+3	; 0x03
    4b68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	9e af       	std	Y+62, r25	; 0x3e
    4b72:	8d af       	std	Y+61, r24	; 0x3d
    4b74:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b76:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b78:	9a af       	std	Y+58, r25	; 0x3a
    4b7a:	89 af       	std	Y+57, r24	; 0x39
    4b7c:	89 ad       	ldd	r24, Y+57	; 0x39
    4b7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	f1 f7       	brne	.-4      	; 0x4b80 <main+0x16ca>
    4b84:	9a af       	std	Y+58, r25	; 0x3a
    4b86:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(35);
					LCD_ClearScreen();
    4b88:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>

					// Dc Motor

					LCD_displayString("Welcome to Motor");
    4b8c:	80 ed       	ldi	r24, 0xD0	; 208
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
					LCD_GoToXY(1, 0);
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	60 e0       	ldi	r22, 0x00	; 0
    4b98:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_GoToXY>
					LCD_displayString("DachBoard");
    4b9c:	81 ee       	ldi	r24, 0xE1	; 225
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
					First_Screen();
    4ba4:	0e 94 79 19 	call	0x32f2	; 0x32f2 <First_Screen>

					while(1){
						u8 key_Motor = Keypad_GetPressedKey();
    4ba8:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Keypad_GetPressedKey>
    4bac:	fe 01       	movw	r30, r28
    4bae:	eb 50       	subi	r30, 0x0B	; 11
    4bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb2:	80 83       	st	Z, r24
						if(key_Motor == 1){
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	eb 50       	subi	r30, 0x0B	; 11
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bba:	80 81       	ld	r24, Z
    4bbc:	81 30       	cpi	r24, 0x01	; 1
    4bbe:	09 f0       	breq	.+2      	; 0x4bc2 <main+0x170c>
    4bc0:	3f c2       	rjmp	.+1150   	; 0x5040 <main+0x1b8a>
							Second_Screen();
    4bc2:	0e 94 14 1a 	call	0x3428	; 0x3428 <Second_Screen>
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	ac e0       	ldi	r26, 0x0C	; 12
    4bcc:	b2 e4       	ldi	r27, 0x42	; 66
    4bce:	8d ab       	std	Y+53, r24	; 0x35
    4bd0:	9e ab       	std	Y+54, r25	; 0x36
    4bd2:	af ab       	std	Y+55, r26	; 0x37
    4bd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bd6:	6d a9       	ldd	r22, Y+53	; 0x35
    4bd8:	7e a9       	ldd	r23, Y+54	; 0x36
    4bda:	8f a9       	ldd	r24, Y+55	; 0x37
    4bdc:	98 ad       	ldd	r25, Y+56	; 0x38
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	4a e7       	ldi	r20, 0x7A	; 122
    4be4:	55 e4       	ldi	r21, 0x45	; 69
    4be6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	89 ab       	std	Y+49, r24	; 0x31
    4bf0:	9a ab       	std	Y+50, r25	; 0x32
    4bf2:	ab ab       	std	Y+51, r26	; 0x33
    4bf4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4bf6:	69 a9       	ldd	r22, Y+49	; 0x31
    4bf8:	7a a9       	ldd	r23, Y+50	; 0x32
    4bfa:	8b a9       	ldd	r24, Y+51	; 0x33
    4bfc:	9c a9       	ldd	r25, Y+52	; 0x34
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	40 e8       	ldi	r20, 0x80	; 128
    4c04:	5f e3       	ldi	r21, 0x3F	; 63
    4c06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4c0a:	88 23       	and	r24, r24
    4c0c:	2c f4       	brge	.+10     	; 0x4c18 <main+0x1762>
		__ticks = 1;
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	98 ab       	std	Y+48, r25	; 0x30
    4c14:	8f a7       	std	Y+47, r24	; 0x2f
    4c16:	3f c0       	rjmp	.+126    	; 0x4c96 <main+0x17e0>
	else if (__tmp > 65535)
    4c18:	69 a9       	ldd	r22, Y+49	; 0x31
    4c1a:	7a a9       	ldd	r23, Y+50	; 0x32
    4c1c:	8b a9       	ldd	r24, Y+51	; 0x33
    4c1e:	9c a9       	ldd	r25, Y+52	; 0x34
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	3f ef       	ldi	r19, 0xFF	; 255
    4c24:	4f e7       	ldi	r20, 0x7F	; 127
    4c26:	57 e4       	ldi	r21, 0x47	; 71
    4c28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4c2c:	18 16       	cp	r1, r24
    4c2e:	4c f5       	brge	.+82     	; 0x4c82 <main+0x17cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c30:	6d a9       	ldd	r22, Y+53	; 0x35
    4c32:	7e a9       	ldd	r23, Y+54	; 0x36
    4c34:	8f a9       	ldd	r24, Y+55	; 0x37
    4c36:	98 ad       	ldd	r25, Y+56	; 0x38
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	40 e2       	ldi	r20, 0x20	; 32
    4c3e:	51 e4       	ldi	r21, 0x41	; 65
    4c40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	bc 01       	movw	r22, r24
    4c4a:	cd 01       	movw	r24, r26
    4c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	98 ab       	std	Y+48, r25	; 0x30
    4c56:	8f a7       	std	Y+47, r24	; 0x2f
    4c58:	0f c0       	rjmp	.+30     	; 0x4c78 <main+0x17c2>
    4c5a:	80 e9       	ldi	r24, 0x90	; 144
    4c5c:	91 e0       	ldi	r25, 0x01	; 1
    4c5e:	9e a7       	std	Y+46, r25	; 0x2e
    4c60:	8d a7       	std	Y+45, r24	; 0x2d
    4c62:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c64:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c66:	01 97       	sbiw	r24, 0x01	; 1
    4c68:	f1 f7       	brne	.-4      	; 0x4c66 <main+0x17b0>
    4c6a:	9e a7       	std	Y+46, r25	; 0x2e
    4c6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c70:	98 a9       	ldd	r25, Y+48	; 0x30
    4c72:	01 97       	sbiw	r24, 0x01	; 1
    4c74:	98 ab       	std	Y+48, r25	; 0x30
    4c76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c78:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c7a:	98 a9       	ldd	r25, Y+48	; 0x30
    4c7c:	00 97       	sbiw	r24, 0x00	; 0
    4c7e:	69 f7       	brne	.-38     	; 0x4c5a <main+0x17a4>
    4c80:	14 c0       	rjmp	.+40     	; 0x4caa <main+0x17f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c82:	69 a9       	ldd	r22, Y+49	; 0x31
    4c84:	7a a9       	ldd	r23, Y+50	; 0x32
    4c86:	8b a9       	ldd	r24, Y+51	; 0x33
    4c88:	9c a9       	ldd	r25, Y+52	; 0x34
    4c8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	98 ab       	std	Y+48, r25	; 0x30
    4c94:	8f a7       	std	Y+47, r24	; 0x2f
    4c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c98:	98 a9       	ldd	r25, Y+48	; 0x30
    4c9a:	9c a7       	std	Y+44, r25	; 0x2c
    4c9c:	8b a7       	std	Y+43, r24	; 0x2b
    4c9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ca0:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ca2:	01 97       	sbiw	r24, 0x01	; 1
    4ca4:	f1 f7       	brne	.-4      	; 0x4ca2 <main+0x17ec>
    4ca6:	9c a7       	std	Y+44, r25	; 0x2c
    4ca8:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(35);

							while(1){
								u8 Motor_Rotate = Keypad_GetPressedKey();
    4caa:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Keypad_GetPressedKey>
    4cae:	fe 01       	movw	r30, r28
    4cb0:	ec 50       	subi	r30, 0x0C	; 12
    4cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb4:	80 83       	st	Z, r24
								if(Motor_Rotate == 1){
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	ec 50       	subi	r30, 0x0C	; 12
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	80 81       	ld	r24, Z
    4cbe:	81 30       	cpi	r24, 0x01	; 1
    4cc0:	29 f4       	brne	.+10     	; 0x4ccc <main+0x1816>
									DC_Motor_Rotate(0, 0);
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	60 e0       	ldi	r22, 0x00	; 0
    4cc6:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <DC_Motor_Rotate>
    4cca:	ef cf       	rjmp	.-34     	; 0x4caa <main+0x17f4>
								}

								else if(Motor_Rotate == 2){
    4ccc:	fe 01       	movw	r30, r28
    4cce:	ec 50       	subi	r30, 0x0C	; 12
    4cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd2:	80 81       	ld	r24, Z
    4cd4:	82 30       	cpi	r24, 0x02	; 2
    4cd6:	09 f0       	breq	.+2      	; 0x4cda <main+0x1824>
    4cd8:	7a c0       	rjmp	.+244    	; 0x4dce <main+0x1918>
									DC_Motor_Stop(0);
    4cda:	80 e0       	ldi	r24, 0x00	; 0
    4cdc:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <DC_Motor_Stop>
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	ac e0       	ldi	r26, 0x0C	; 12
    4ce6:	b2 e4       	ldi	r27, 0x42	; 66
    4ce8:	8f a3       	std	Y+39, r24	; 0x27
    4cea:	98 a7       	std	Y+40, r25	; 0x28
    4cec:	a9 a7       	std	Y+41, r26	; 0x29
    4cee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cf0:	6f a1       	ldd	r22, Y+39	; 0x27
    4cf2:	78 a5       	ldd	r23, Y+40	; 0x28
    4cf4:	89 a5       	ldd	r24, Y+41	; 0x29
    4cf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cf8:	20 e0       	ldi	r18, 0x00	; 0
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
    4cfc:	4a e7       	ldi	r20, 0x7A	; 122
    4cfe:	55 e4       	ldi	r21, 0x45	; 69
    4d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d04:	dc 01       	movw	r26, r24
    4d06:	cb 01       	movw	r24, r22
    4d08:	8b a3       	std	Y+35, r24	; 0x23
    4d0a:	9c a3       	std	Y+36, r25	; 0x24
    4d0c:	ad a3       	std	Y+37, r26	; 0x25
    4d0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d10:	6b a1       	ldd	r22, Y+35	; 0x23
    4d12:	7c a1       	ldd	r23, Y+36	; 0x24
    4d14:	8d a1       	ldd	r24, Y+37	; 0x25
    4d16:	9e a1       	ldd	r25, Y+38	; 0x26
    4d18:	20 e0       	ldi	r18, 0x00	; 0
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	40 e8       	ldi	r20, 0x80	; 128
    4d1e:	5f e3       	ldi	r21, 0x3F	; 63
    4d20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4d24:	88 23       	and	r24, r24
    4d26:	2c f4       	brge	.+10     	; 0x4d32 <main+0x187c>
		__ticks = 1;
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	9a a3       	std	Y+34, r25	; 0x22
    4d2e:	89 a3       	std	Y+33, r24	; 0x21
    4d30:	3f c0       	rjmp	.+126    	; 0x4db0 <main+0x18fa>
	else if (__tmp > 65535)
    4d32:	6b a1       	ldd	r22, Y+35	; 0x23
    4d34:	7c a1       	ldd	r23, Y+36	; 0x24
    4d36:	8d a1       	ldd	r24, Y+37	; 0x25
    4d38:	9e a1       	ldd	r25, Y+38	; 0x26
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	3f ef       	ldi	r19, 0xFF	; 255
    4d3e:	4f e7       	ldi	r20, 0x7F	; 127
    4d40:	57 e4       	ldi	r21, 0x47	; 71
    4d42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4d46:	18 16       	cp	r1, r24
    4d48:	4c f5       	brge	.+82     	; 0x4d9c <main+0x18e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d4a:	6f a1       	ldd	r22, Y+39	; 0x27
    4d4c:	78 a5       	ldd	r23, Y+40	; 0x28
    4d4e:	89 a5       	ldd	r24, Y+41	; 0x29
    4d50:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	40 e2       	ldi	r20, 0x20	; 32
    4d58:	51 e4       	ldi	r21, 0x41	; 65
    4d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d5e:	dc 01       	movw	r26, r24
    4d60:	cb 01       	movw	r24, r22
    4d62:	bc 01       	movw	r22, r24
    4d64:	cd 01       	movw	r24, r26
    4d66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	9a a3       	std	Y+34, r25	; 0x22
    4d70:	89 a3       	std	Y+33, r24	; 0x21
    4d72:	0f c0       	rjmp	.+30     	; 0x4d92 <main+0x18dc>
    4d74:	80 e9       	ldi	r24, 0x90	; 144
    4d76:	91 e0       	ldi	r25, 0x01	; 1
    4d78:	98 a3       	std	Y+32, r25	; 0x20
    4d7a:	8f 8f       	std	Y+31, r24	; 0x1f
    4d7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d7e:	98 a1       	ldd	r25, Y+32	; 0x20
    4d80:	01 97       	sbiw	r24, 0x01	; 1
    4d82:	f1 f7       	brne	.-4      	; 0x4d80 <main+0x18ca>
    4d84:	98 a3       	std	Y+32, r25	; 0x20
    4d86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d88:	89 a1       	ldd	r24, Y+33	; 0x21
    4d8a:	9a a1       	ldd	r25, Y+34	; 0x22
    4d8c:	01 97       	sbiw	r24, 0x01	; 1
    4d8e:	9a a3       	std	Y+34, r25	; 0x22
    4d90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d92:	89 a1       	ldd	r24, Y+33	; 0x21
    4d94:	9a a1       	ldd	r25, Y+34	; 0x22
    4d96:	00 97       	sbiw	r24, 0x00	; 0
    4d98:	69 f7       	brne	.-38     	; 0x4d74 <main+0x18be>
    4d9a:	14 c0       	rjmp	.+40     	; 0x4dc4 <main+0x190e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d9c:	6b a1       	ldd	r22, Y+35	; 0x23
    4d9e:	7c a1       	ldd	r23, Y+36	; 0x24
    4da0:	8d a1       	ldd	r24, Y+37	; 0x25
    4da2:	9e a1       	ldd	r25, Y+38	; 0x26
    4da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4da8:	dc 01       	movw	r26, r24
    4daa:	cb 01       	movw	r24, r22
    4dac:	9a a3       	std	Y+34, r25	; 0x22
    4dae:	89 a3       	std	Y+33, r24	; 0x21
    4db0:	89 a1       	ldd	r24, Y+33	; 0x21
    4db2:	9a a1       	ldd	r25, Y+34	; 0x22
    4db4:	9e 8f       	std	Y+30, r25	; 0x1e
    4db6:	8d 8f       	std	Y+29, r24	; 0x1d
    4db8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4dbc:	01 97       	sbiw	r24, 0x01	; 1
    4dbe:	f1 f7       	brne	.-4      	; 0x4dbc <main+0x1906>
    4dc0:	9e 8f       	std	Y+30, r25	; 0x1e
    4dc2:	8d 8f       	std	Y+29, r24	; 0x1d
									_delay_ms(35);
									DC_Motor_Rotate(0, 1);
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	61 e0       	ldi	r22, 0x01	; 1
    4dc8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <DC_Motor_Rotate>
    4dcc:	6e cf       	rjmp	.-292    	; 0x4caa <main+0x17f4>
								}

								else if(Motor_Rotate == 3){
    4dce:	fe 01       	movw	r30, r28
    4dd0:	ec 50       	subi	r30, 0x0C	; 12
    4dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd4:	80 81       	ld	r24, Z
    4dd6:	83 30       	cpi	r24, 0x03	; 3
    4dd8:	09 f0       	breq	.+2      	; 0x4ddc <main+0x1926>
    4dda:	67 cf       	rjmp	.-306    	; 0x4caa <main+0x17f4>
									DC_Motor_Stop(0);
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <DC_Motor_Stop>
									First_Screen();
    4de2:	0e 94 79 19 	call	0x32f2	; 0x32f2 <First_Screen>

									while(1){
										u8 Motor_Back = Keypad_GetPressedKey();
    4de6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Keypad_GetPressedKey>
    4dea:	fe 01       	movw	r30, r28
    4dec:	ed 50       	subi	r30, 0x0D	; 13
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	80 83       	st	Z, r24
										if(Motor_Back == 1){
    4df2:	fe 01       	movw	r30, r28
    4df4:	ed 50       	subi	r30, 0x0D	; 13
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	80 81       	ld	r24, Z
    4dfa:	81 30       	cpi	r24, 0x01	; 1
    4dfc:	09 f0       	breq	.+2      	; 0x4e00 <main+0x194a>
    4dfe:	13 c1       	rjmp	.+550    	; 0x5026 <main+0x1b70>
											Second_Screen();
    4e00:	0e 94 14 1a 	call	0x3428	; 0x3428 <Second_Screen>
    4e04:	80 e0       	ldi	r24, 0x00	; 0
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	ac e0       	ldi	r26, 0x0C	; 12
    4e0a:	b2 e4       	ldi	r27, 0x42	; 66
    4e0c:	89 8f       	std	Y+25, r24	; 0x19
    4e0e:	9a 8f       	std	Y+26, r25	; 0x1a
    4e10:	ab 8f       	std	Y+27, r26	; 0x1b
    4e12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e14:	69 8d       	ldd	r22, Y+25	; 0x19
    4e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e1c:	20 e0       	ldi	r18, 0x00	; 0
    4e1e:	30 e0       	ldi	r19, 0x00	; 0
    4e20:	4a e7       	ldi	r20, 0x7A	; 122
    4e22:	55 e4       	ldi	r21, 0x45	; 69
    4e24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e28:	dc 01       	movw	r26, r24
    4e2a:	cb 01       	movw	r24, r22
    4e2c:	8d 8b       	std	Y+21, r24	; 0x15
    4e2e:	9e 8b       	std	Y+22, r25	; 0x16
    4e30:	af 8b       	std	Y+23, r26	; 0x17
    4e32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e34:	6d 89       	ldd	r22, Y+21	; 0x15
    4e36:	7e 89       	ldd	r23, Y+22	; 0x16
    4e38:	8f 89       	ldd	r24, Y+23	; 0x17
    4e3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e3c:	20 e0       	ldi	r18, 0x00	; 0
    4e3e:	30 e0       	ldi	r19, 0x00	; 0
    4e40:	40 e8       	ldi	r20, 0x80	; 128
    4e42:	5f e3       	ldi	r21, 0x3F	; 63
    4e44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4e48:	88 23       	and	r24, r24
    4e4a:	2c f4       	brge	.+10     	; 0x4e56 <main+0x19a0>
		__ticks = 1;
    4e4c:	81 e0       	ldi	r24, 0x01	; 1
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	9c 8b       	std	Y+20, r25	; 0x14
    4e52:	8b 8b       	std	Y+19, r24	; 0x13
    4e54:	3f c0       	rjmp	.+126    	; 0x4ed4 <main+0x1a1e>
	else if (__tmp > 65535)
    4e56:	6d 89       	ldd	r22, Y+21	; 0x15
    4e58:	7e 89       	ldd	r23, Y+22	; 0x16
    4e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	3f ef       	ldi	r19, 0xFF	; 255
    4e62:	4f e7       	ldi	r20, 0x7F	; 127
    4e64:	57 e4       	ldi	r21, 0x47	; 71
    4e66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4e6a:	18 16       	cp	r1, r24
    4e6c:	4c f5       	brge	.+82     	; 0x4ec0 <main+0x1a0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e6e:	69 8d       	ldd	r22, Y+25	; 0x19
    4e70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e76:	20 e0       	ldi	r18, 0x00	; 0
    4e78:	30 e0       	ldi	r19, 0x00	; 0
    4e7a:	40 e2       	ldi	r20, 0x20	; 32
    4e7c:	51 e4       	ldi	r21, 0x41	; 65
    4e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e82:	dc 01       	movw	r26, r24
    4e84:	cb 01       	movw	r24, r22
    4e86:	bc 01       	movw	r22, r24
    4e88:	cd 01       	movw	r24, r26
    4e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e8e:	dc 01       	movw	r26, r24
    4e90:	cb 01       	movw	r24, r22
    4e92:	9c 8b       	std	Y+20, r25	; 0x14
    4e94:	8b 8b       	std	Y+19, r24	; 0x13
    4e96:	0f c0       	rjmp	.+30     	; 0x4eb6 <main+0x1a00>
    4e98:	80 e9       	ldi	r24, 0x90	; 144
    4e9a:	91 e0       	ldi	r25, 0x01	; 1
    4e9c:	9a 8b       	std	Y+18, r25	; 0x12
    4e9e:	89 8b       	std	Y+17, r24	; 0x11
    4ea0:	89 89       	ldd	r24, Y+17	; 0x11
    4ea2:	9a 89       	ldd	r25, Y+18	; 0x12
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	f1 f7       	brne	.-4      	; 0x4ea4 <main+0x19ee>
    4ea8:	9a 8b       	std	Y+18, r25	; 0x12
    4eaa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eac:	8b 89       	ldd	r24, Y+19	; 0x13
    4eae:	9c 89       	ldd	r25, Y+20	; 0x14
    4eb0:	01 97       	sbiw	r24, 0x01	; 1
    4eb2:	9c 8b       	std	Y+20, r25	; 0x14
    4eb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    4eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    4eba:	00 97       	sbiw	r24, 0x00	; 0
    4ebc:	69 f7       	brne	.-38     	; 0x4e98 <main+0x19e2>
    4ebe:	14 c0       	rjmp	.+40     	; 0x4ee8 <main+0x1a32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ec0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ec2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ec8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ecc:	dc 01       	movw	r26, r24
    4ece:	cb 01       	movw	r24, r22
    4ed0:	9c 8b       	std	Y+20, r25	; 0x14
    4ed2:	8b 8b       	std	Y+19, r24	; 0x13
    4ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ed8:	98 8b       	std	Y+16, r25	; 0x10
    4eda:	8f 87       	std	Y+15, r24	; 0x0f
    4edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ede:	98 89       	ldd	r25, Y+16	; 0x10
    4ee0:	01 97       	sbiw	r24, 0x01	; 1
    4ee2:	f1 f7       	brne	.-4      	; 0x4ee0 <main+0x1a2a>
    4ee4:	98 8b       	std	Y+16, r25	; 0x10
    4ee6:	8f 87       	std	Y+15, r24	; 0x0f
											_delay_ms(35);

											while(1){
												u8 new_System = Keypad_GetPressedKey;
    4ee8:	83 ed       	ldi	r24, 0xD3	; 211
    4eea:	91 e1       	ldi	r25, 0x11	; 17
    4eec:	fe 01       	movw	r30, r28
    4eee:	ee 50       	subi	r30, 0x0E	; 14
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	80 83       	st	Z, r24

												if(new_System == 1){
    4ef4:	fe 01       	movw	r30, r28
    4ef6:	ee 50       	subi	r30, 0x0E	; 14
    4ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    4efa:	80 81       	ld	r24, Z
    4efc:	81 30       	cpi	r24, 0x01	; 1
    4efe:	29 f4       	brne	.+10     	; 0x4f0a <main+0x1a54>
													DC_Motor_Rotate(0, 0);
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	60 e0       	ldi	r22, 0x00	; 0
    4f04:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <DC_Motor_Rotate>
    4f08:	ef cf       	rjmp	.-34     	; 0x4ee8 <main+0x1a32>
												}

												else if(new_System == 2){
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	ee 50       	subi	r30, 0x0E	; 14
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	80 81       	ld	r24, Z
    4f12:	82 30       	cpi	r24, 0x02	; 2
    4f14:	09 f0       	breq	.+2      	; 0x4f18 <main+0x1a62>
    4f16:	7a c0       	rjmp	.+244    	; 0x500c <main+0x1b56>
													DC_Motor_Stop(0);
    4f18:	80 e0       	ldi	r24, 0x00	; 0
    4f1a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <DC_Motor_Stop>
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	ac e0       	ldi	r26, 0x0C	; 12
    4f24:	b2 e4       	ldi	r27, 0x42	; 66
    4f26:	8b 87       	std	Y+11, r24	; 0x0b
    4f28:	9c 87       	std	Y+12, r25	; 0x0c
    4f2a:	ad 87       	std	Y+13, r26	; 0x0d
    4f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f36:	20 e0       	ldi	r18, 0x00	; 0
    4f38:	30 e0       	ldi	r19, 0x00	; 0
    4f3a:	4a e7       	ldi	r20, 0x7A	; 122
    4f3c:	55 e4       	ldi	r21, 0x45	; 69
    4f3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f42:	dc 01       	movw	r26, r24
    4f44:	cb 01       	movw	r24, r22
    4f46:	8f 83       	std	Y+7, r24	; 0x07
    4f48:	98 87       	std	Y+8, r25	; 0x08
    4f4a:	a9 87       	std	Y+9, r26	; 0x09
    4f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f50:	78 85       	ldd	r23, Y+8	; 0x08
    4f52:	89 85       	ldd	r24, Y+9	; 0x09
    4f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f56:	20 e0       	ldi	r18, 0x00	; 0
    4f58:	30 e0       	ldi	r19, 0x00	; 0
    4f5a:	40 e8       	ldi	r20, 0x80	; 128
    4f5c:	5f e3       	ldi	r21, 0x3F	; 63
    4f5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4f62:	88 23       	and	r24, r24
    4f64:	2c f4       	brge	.+10     	; 0x4f70 <main+0x1aba>
		__ticks = 1;
    4f66:	81 e0       	ldi	r24, 0x01	; 1
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	9e 83       	std	Y+6, r25	; 0x06
    4f6c:	8d 83       	std	Y+5, r24	; 0x05
    4f6e:	3f c0       	rjmp	.+126    	; 0x4fee <main+0x1b38>
	else if (__tmp > 65535)
    4f70:	6f 81       	ldd	r22, Y+7	; 0x07
    4f72:	78 85       	ldd	r23, Y+8	; 0x08
    4f74:	89 85       	ldd	r24, Y+9	; 0x09
    4f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f78:	20 e0       	ldi	r18, 0x00	; 0
    4f7a:	3f ef       	ldi	r19, 0xFF	; 255
    4f7c:	4f e7       	ldi	r20, 0x7F	; 127
    4f7e:	57 e4       	ldi	r21, 0x47	; 71
    4f80:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4f84:	18 16       	cp	r1, r24
    4f86:	4c f5       	brge	.+82     	; 0x4fda <main+0x1b24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	40 e2       	ldi	r20, 0x20	; 32
    4f96:	51 e4       	ldi	r21, 0x41	; 65
    4f98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	cb 01       	movw	r24, r22
    4fa0:	bc 01       	movw	r22, r24
    4fa2:	cd 01       	movw	r24, r26
    4fa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4fa8:	dc 01       	movw	r26, r24
    4faa:	cb 01       	movw	r24, r22
    4fac:	9e 83       	std	Y+6, r25	; 0x06
    4fae:	8d 83       	std	Y+5, r24	; 0x05
    4fb0:	0f c0       	rjmp	.+30     	; 0x4fd0 <main+0x1b1a>
    4fb2:	80 e9       	ldi	r24, 0x90	; 144
    4fb4:	91 e0       	ldi	r25, 0x01	; 1
    4fb6:	9c 83       	std	Y+4, r25	; 0x04
    4fb8:	8b 83       	std	Y+3, r24	; 0x03
    4fba:	8b 81       	ldd	r24, Y+3	; 0x03
    4fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    4fbe:	01 97       	sbiw	r24, 0x01	; 1
    4fc0:	f1 f7       	brne	.-4      	; 0x4fbe <main+0x1b08>
    4fc2:	9c 83       	std	Y+4, r25	; 0x04
    4fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fca:	01 97       	sbiw	r24, 0x01	; 1
    4fcc:	9e 83       	std	Y+6, r25	; 0x06
    4fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fd4:	00 97       	sbiw	r24, 0x00	; 0
    4fd6:	69 f7       	brne	.-38     	; 0x4fb2 <main+0x1afc>
    4fd8:	14 c0       	rjmp	.+40     	; 0x5002 <main+0x1b4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fda:	6f 81       	ldd	r22, Y+7	; 0x07
    4fdc:	78 85       	ldd	r23, Y+8	; 0x08
    4fde:	89 85       	ldd	r24, Y+9	; 0x09
    4fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fe2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4fe6:	dc 01       	movw	r26, r24
    4fe8:	cb 01       	movw	r24, r22
    4fea:	9e 83       	std	Y+6, r25	; 0x06
    4fec:	8d 83       	std	Y+5, r24	; 0x05
    4fee:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff2:	9a 83       	std	Y+2, r25	; 0x02
    4ff4:	89 83       	std	Y+1, r24	; 0x01
    4ff6:	89 81       	ldd	r24, Y+1	; 0x01
    4ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	f1 f7       	brne	.-4      	; 0x4ffa <main+0x1b44>
    4ffe:	9a 83       	std	Y+2, r25	; 0x02
    5000:	89 83       	std	Y+1, r24	; 0x01
													_delay_ms(35);
													DC_Motor_Rotate(0, 1);
    5002:	80 e0       	ldi	r24, 0x00	; 0
    5004:	61 e0       	ldi	r22, 0x01	; 1
    5006:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <DC_Motor_Rotate>
    500a:	6e cf       	rjmp	.-292    	; 0x4ee8 <main+0x1a32>
												}

												else if(new_System == 3){
    500c:	fe 01       	movw	r30, r28
    500e:	ee 50       	subi	r30, 0x0E	; 14
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	80 81       	ld	r24, Z
    5014:	83 30       	cpi	r24, 0x03	; 3
    5016:	09 f0       	breq	.+2      	; 0x501a <main+0x1b64>
    5018:	67 cf       	rjmp	.-306    	; 0x4ee8 <main+0x1a32>
													DC_Motor_Stop(0);
    501a:	80 e0       	ldi	r24, 0x00	; 0
    501c:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <DC_Motor_Stop>
													First_Screen();
    5020:	0e 94 79 19 	call	0x32f2	; 0x32f2 <First_Screen>
    5024:	61 cf       	rjmp	.-318    	; 0x4ee8 <main+0x1a32>
												}
											}

										}

										else if(Motor_Back == 2){
    5026:	fe 01       	movw	r30, r28
    5028:	ed 50       	subi	r30, 0x0D	; 13
    502a:	ff 4f       	sbci	r31, 0xFF	; 255
    502c:	80 81       	ld	r24, Z
    502e:	82 30       	cpi	r24, 0x02	; 2
    5030:	09 f0       	breq	.+2      	; 0x5034 <main+0x1b7e>
    5032:	d9 ce       	rjmp	.-590    	; 0x4de6 <main+0x1930>
											DC_Motor_Stop(0);
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <DC_Motor_Stop>
											LCD_ClearScreen();
    503a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>
    503e:	d3 ce       	rjmp	.-602    	; 0x4de6 <main+0x1930>
									}
								}
							}
						}

						else if(key_Motor == 2){
    5040:	fe 01       	movw	r30, r28
    5042:	eb 50       	subi	r30, 0x0B	; 11
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	80 81       	ld	r24, Z
    5048:	82 30       	cpi	r24, 0x02	; 2
    504a:	09 f0       	breq	.+2      	; 0x504e <main+0x1b98>
    504c:	58 c0       	rjmp	.+176    	; 0x50fe <main+0x1c48>
							StepperAngles_Screen();
    504e:	0e 94 31 1a 	call	0x3462	; 0x3462 <StepperAngles_Screen>
							while(1){
								u8 Stepper_angle = Keypad_GetPressedKey();
    5052:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Keypad_GetPressedKey>
    5056:	fe 01       	movw	r30, r28
    5058:	ef 50       	subi	r30, 0x0F	; 15
    505a:	ff 4f       	sbci	r31, 0xFF	; 255
    505c:	80 83       	st	Z, r24
								if(Stepper_angle == 1){
    505e:	fe 01       	movw	r30, r28
    5060:	ef 50       	subi	r30, 0x0F	; 15
    5062:	ff 4f       	sbci	r31, 0xFF	; 255
    5064:	80 81       	ld	r24, Z
    5066:	81 30       	cpi	r24, 0x01	; 1
    5068:	11 f5       	brne	.+68     	; 0x50ae <main+0x1bf8>
									StepperDirection_Screen();
    506a:	0e 94 46 1a 	call	0x348c	; 0x348c <StepperDirection_Screen>
									while(1){
										u8 Stepper_Diection90 = Keypad_GetPressedKey();
    506e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Keypad_GetPressedKey>
    5072:	fe 01       	movw	r30, r28
    5074:	e0 51       	subi	r30, 0x10	; 16
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	80 83       	st	Z, r24
										if(Stepper_Diection90 == 1){
    507a:	fe 01       	movw	r30, r28
    507c:	e0 51       	subi	r30, 0x10	; 16
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	80 81       	ld	r24, Z
    5082:	81 30       	cpi	r24, 0x01	; 1
    5084:	39 f4       	brne	.+14     	; 0x5094 <main+0x1bde>
											SelectStepAngle(90, 0);
    5086:	8a e5       	ldi	r24, 0x5A	; 90
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	60 e0       	ldi	r22, 0x00	; 0
    508c:	70 e0       	ldi	r23, 0x00	; 0
    508e:	0e 94 00 06 	call	0xc00	; 0xc00 <SelectStepAngle>
    5092:	ed cf       	rjmp	.-38     	; 0x506e <main+0x1bb8>
										}

										else if(Stepper_Diection90 == 2){
    5094:	fe 01       	movw	r30, r28
    5096:	e0 51       	subi	r30, 0x10	; 16
    5098:	ff 4f       	sbci	r31, 0xFF	; 255
    509a:	80 81       	ld	r24, Z
    509c:	82 30       	cpi	r24, 0x02	; 2
    509e:	39 f7       	brne	.-50     	; 0x506e <main+0x1bb8>
											SelectStepAngle(90, 1);
    50a0:	8a e5       	ldi	r24, 0x5A	; 90
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	61 e0       	ldi	r22, 0x01	; 1
    50a6:	70 e0       	ldi	r23, 0x00	; 0
    50a8:	0e 94 00 06 	call	0xc00	; 0xc00 <SelectStepAngle>
    50ac:	e0 cf       	rjmp	.-64     	; 0x506e <main+0x1bb8>
										}
									}
								}

								else if(Stepper_angle == 2){
    50ae:	fe 01       	movw	r30, r28
    50b0:	ef 50       	subi	r30, 0x0F	; 15
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	80 81       	ld	r24, Z
    50b6:	82 30       	cpi	r24, 0x02	; 2
    50b8:	61 f6       	brne	.-104    	; 0x5052 <main+0x1b9c>
									StepperDirection_Screen();
    50ba:	0e 94 46 1a 	call	0x348c	; 0x348c <StepperDirection_Screen>
									while(1){
										u8 Stepper_Diection180 = Keypad_GetPressedKey();
    50be:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Keypad_GetPressedKey>
    50c2:	fe 01       	movw	r30, r28
    50c4:	e1 51       	subi	r30, 0x11	; 17
    50c6:	ff 4f       	sbci	r31, 0xFF	; 255
    50c8:	80 83       	st	Z, r24
										if(Stepper_Diection180 == 1){
    50ca:	fe 01       	movw	r30, r28
    50cc:	e1 51       	subi	r30, 0x11	; 17
    50ce:	ff 4f       	sbci	r31, 0xFF	; 255
    50d0:	80 81       	ld	r24, Z
    50d2:	81 30       	cpi	r24, 0x01	; 1
    50d4:	39 f4       	brne	.+14     	; 0x50e4 <main+0x1c2e>
											SelectStepAngle(180, 0);
    50d6:	84 eb       	ldi	r24, 0xB4	; 180
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	60 e0       	ldi	r22, 0x00	; 0
    50dc:	70 e0       	ldi	r23, 0x00	; 0
    50de:	0e 94 00 06 	call	0xc00	; 0xc00 <SelectStepAngle>
    50e2:	ed cf       	rjmp	.-38     	; 0x50be <main+0x1c08>
										}

										else if(Stepper_Diection180 == 2){
    50e4:	fe 01       	movw	r30, r28
    50e6:	e1 51       	subi	r30, 0x11	; 17
    50e8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ea:	80 81       	ld	r24, Z
    50ec:	82 30       	cpi	r24, 0x02	; 2
    50ee:	39 f7       	brne	.-50     	; 0x50be <main+0x1c08>
											SelectStepAngle(180, 1);
    50f0:	84 eb       	ldi	r24, 0xB4	; 180
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	61 e0       	ldi	r22, 0x01	; 1
    50f6:	70 e0       	ldi	r23, 0x00	; 0
    50f8:	0e 94 00 06 	call	0xc00	; 0xc00 <SelectStepAngle>
    50fc:	e0 cf       	rjmp	.-64     	; 0x50be <main+0x1c08>
									}
								}
							}
						}

						else if(key_Motor == 3){
    50fe:	fe 01       	movw	r30, r28
    5100:	eb 50       	subi	r30, 0x0B	; 11
    5102:	ff 4f       	sbci	r31, 0xFF	; 255
    5104:	80 81       	ld	r24, Z
    5106:	83 30       	cpi	r24, 0x03	; 3
    5108:	09 f0       	breq	.+2      	; 0x510c <main+0x1c56>
    510a:	4e cd       	rjmp	.-1380   	; 0x4ba8 <main+0x16f2>
							DC_Motor_Stop(0);
    510c:	80 e0       	ldi	r24, 0x00	; 0
    510e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <DC_Motor_Stop>
							LCD_ClearScreen();
    5112:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>
    5116:	48 cd       	rjmp	.-1392   	; 0x4ba8 <main+0x16f2>
						}
					}
					break;
				}
				else{
					LCD_ClearScreen();
    5118:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_ClearScreen>
					LCD_displayString("Error");
    511c:	8b ee       	ldi	r24, 0xEB	; 235
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
    5124:	0c 94 05 1b 	jmp	0x360a	; 0x360a <main+0x154>

00005128 <__prologue_saves__>:
    5128:	2f 92       	push	r2
    512a:	3f 92       	push	r3
    512c:	4f 92       	push	r4
    512e:	5f 92       	push	r5
    5130:	6f 92       	push	r6
    5132:	7f 92       	push	r7
    5134:	8f 92       	push	r8
    5136:	9f 92       	push	r9
    5138:	af 92       	push	r10
    513a:	bf 92       	push	r11
    513c:	cf 92       	push	r12
    513e:	df 92       	push	r13
    5140:	ef 92       	push	r14
    5142:	ff 92       	push	r15
    5144:	0f 93       	push	r16
    5146:	1f 93       	push	r17
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	cd b7       	in	r28, 0x3d	; 61
    514e:	de b7       	in	r29, 0x3e	; 62
    5150:	ca 1b       	sub	r28, r26
    5152:	db 0b       	sbc	r29, r27
    5154:	0f b6       	in	r0, 0x3f	; 63
    5156:	f8 94       	cli
    5158:	de bf       	out	0x3e, r29	; 62
    515a:	0f be       	out	0x3f, r0	; 63
    515c:	cd bf       	out	0x3d, r28	; 61
    515e:	09 94       	ijmp

00005160 <__epilogue_restores__>:
    5160:	2a 88       	ldd	r2, Y+18	; 0x12
    5162:	39 88       	ldd	r3, Y+17	; 0x11
    5164:	48 88       	ldd	r4, Y+16	; 0x10
    5166:	5f 84       	ldd	r5, Y+15	; 0x0f
    5168:	6e 84       	ldd	r6, Y+14	; 0x0e
    516a:	7d 84       	ldd	r7, Y+13	; 0x0d
    516c:	8c 84       	ldd	r8, Y+12	; 0x0c
    516e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5170:	aa 84       	ldd	r10, Y+10	; 0x0a
    5172:	b9 84       	ldd	r11, Y+9	; 0x09
    5174:	c8 84       	ldd	r12, Y+8	; 0x08
    5176:	df 80       	ldd	r13, Y+7	; 0x07
    5178:	ee 80       	ldd	r14, Y+6	; 0x06
    517a:	fd 80       	ldd	r15, Y+5	; 0x05
    517c:	0c 81       	ldd	r16, Y+4	; 0x04
    517e:	1b 81       	ldd	r17, Y+3	; 0x03
    5180:	aa 81       	ldd	r26, Y+2	; 0x02
    5182:	b9 81       	ldd	r27, Y+1	; 0x01
    5184:	ce 0f       	add	r28, r30
    5186:	d1 1d       	adc	r29, r1
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	f8 94       	cli
    518c:	de bf       	out	0x3e, r29	; 62
    518e:	0f be       	out	0x3f, r0	; 63
    5190:	cd bf       	out	0x3d, r28	; 61
    5192:	ed 01       	movw	r28, r26
    5194:	08 95       	ret

00005196 <_exit>:
    5196:	f8 94       	cli

00005198 <__stop_program>:
    5198:	ff cf       	rjmp	.-2      	; 0x5198 <__stop_program>
