
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  000053ec  00005460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00004c8c  00000000  00000000  00005508  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001c03  00000000  00000000  0000a194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000bd97  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000bed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000c047  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000dc90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000eb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000f928  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000fa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000fd15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000104e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 84 1b 	call	0x3708	; 0x3708 <main>
      7a:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab ef       	ldi	r26, 0xFB	; 251
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d9 29 	jmp	0x53b2	; 0x53b2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e5 29 	jmp	0x53ca	; 0x53ca <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e5 29 	jmp	0x53ca	; 0x53ca <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b ef       	ldi	r24, 0xFB	; 251
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d9 29 	jmp	0x53b2	; 0x53b2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e5 29 	jmp	0x53ca	; 0x53ca <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e5 29 	jmp	0x53ca	; 0x53ca <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c9 29 	jmp	0x5392	; 0x5392 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e5 29 	jmp	0x53ca	; 0x53ca <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cd 29 	jmp	0x539a	; 0x539a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e9 29 	jmp	0x53d2	; 0x53d2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <Switch_Init+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <Switch_Init+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03
     b48:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
     b4a:	1a 82       	std	Y+2, r1	; 0x02
     b4c:	19 82       	std	Y+1, r1	; 0x01
     b4e:	50 c0       	rjmp	.+160    	; 0xbf0 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
     b50:	29 81       	ldd	r18, Y+1	; 0x01
     b52:	3a 81       	ldd	r19, Y+2	; 0x02
     b54:	c9 01       	movw	r24, r18
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	28 0f       	add	r18, r24
     b5c:	39 1f       	adc	r19, r25
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	fc 01       	movw	r30, r24
     b64:	e2 0f       	add	r30, r18
     b66:	f3 1f       	adc	r31, r19
     b68:	40 81       	ld	r20, Z
     b6a:	29 81       	ldd	r18, Y+1	; 0x01
     b6c:	3a 81       	ldd	r19, Y+2	; 0x02
     b6e:	c9 01       	movw	r24, r18
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	28 0f       	add	r18, r24
     b76:	39 1f       	adc	r19, r25
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	fc 01       	movw	r30, r24
     b7e:	e2 0f       	add	r30, r18
     b80:	f3 1f       	adc	r31, r19
     b82:	91 81       	ldd	r25, Z+1	; 0x01
     b84:	84 2f       	mov	r24, r20
     b86:	69 2f       	mov	r22, r25
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
     b8e:	29 81       	ldd	r18, Y+1	; 0x01
     b90:	3a 81       	ldd	r19, Y+2	; 0x02
     b92:	c9 01       	movw	r24, r18
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	28 0f       	add	r18, r24
     b9a:	39 1f       	adc	r19, r25
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	fc 01       	movw	r30, r24
     ba2:	e2 0f       	add	r30, r18
     ba4:	f3 1f       	adc	r31, r19
     ba6:	50 81       	ld	r21, Z
     ba8:	29 81       	ldd	r18, Y+1	; 0x01
     baa:	3a 81       	ldd	r19, Y+2	; 0x02
     bac:	c9 01       	movw	r24, r18
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	28 0f       	add	r18, r24
     bb4:	39 1f       	adc	r19, r25
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	fc 01       	movw	r30, r24
     bbc:	e2 0f       	add	r30, r18
     bbe:	f3 1f       	adc	r31, r19
     bc0:	41 81       	ldd	r20, Z+1	; 0x01
     bc2:	29 81       	ldd	r18, Y+1	; 0x01
     bc4:	3a 81       	ldd	r19, Y+2	; 0x02
     bc6:	c9 01       	movw	r24, r18
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	28 0f       	add	r18, r24
     bce:	39 1f       	adc	r19, r25
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	9c 81       	ldd	r25, Y+4	; 0x04
     bd4:	fc 01       	movw	r30, r24
     bd6:	e2 0f       	add	r30, r18
     bd8:	f3 1f       	adc	r31, r19
     bda:	92 81       	ldd	r25, Z+2	; 0x02
     bdc:	85 2f       	mov	r24, r21
     bde:	64 2f       	mov	r22, r20
     be0:	49 2f       	mov	r20, r25
     be2:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	8d 81       	ldd	r24, Y+5	; 0x05
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	82 17       	cp	r24, r18
     bfc:	93 07       	cpc	r25, r19
     bfe:	0c f4       	brge	.+2      	; 0xc02 <Switch_Init+0xcc>
     c00:	a7 cf       	rjmp	.-178    	; 0xb50 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Switch_GetValue+0x6>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <Switch_GetValue+0x8>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	7c 83       	std	Y+4, r23	; 0x04
     c24:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
     c26:	e9 81       	ldd	r30, Y+1	; 0x01
     c28:	fa 81       	ldd	r31, Y+2	; 0x02
     c2a:	80 81       	ld	r24, Z
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	2b 81       	ldd	r18, Y+3	; 0x03
     c34:	3c 81       	ldd	r19, Y+4	; 0x04
     c36:	69 2f       	mov	r22, r25
     c38:	a9 01       	movw	r20, r18
     c3a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <DIO_u8GetPinValue>
}
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	00 d0       	rcall	.+0      	; 0xc52 <LCD_setPinDirection+0x6>
     c52:	00 d0       	rcall	.+0      	; 0xc54 <LCD_setPinDirection+0x8>
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	6a 83       	std	Y+2, r22	; 0x02
     c5e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	88 30       	cpi	r24, 0x08	; 8
     c64:	08 f0       	brcs	.+2      	; 0xc68 <LCD_setPinDirection+0x1c>
     c66:	d5 c0       	rjmp	.+426    	; 0xe12 <LCD_setPinDirection+0x1c6>
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <LCD_setPinDirection+0x24>
     c6e:	d1 c0       	rjmp	.+418    	; 0xe12 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	3d 83       	std	Y+5, r19	; 0x05
     c78:	2c 83       	std	Y+4, r18	; 0x04
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	9d 81       	ldd	r25, Y+5	; 0x05
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	91 05       	cpc	r25, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <LCD_setPinDirection+0x3a>
     c84:	43 c0       	rjmp	.+134    	; 0xd0c <LCD_setPinDirection+0xc0>
     c86:	2c 81       	ldd	r18, Y+4	; 0x04
     c88:	3d 81       	ldd	r19, Y+5	; 0x05
     c8a:	22 30       	cpi	r18, 0x02	; 2
     c8c:	31 05       	cpc	r19, r1
     c8e:	2c f4       	brge	.+10     	; 0xc9a <LCD_setPinDirection+0x4e>
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	71 f0       	breq	.+28     	; 0xcb4 <LCD_setPinDirection+0x68>
     c98:	bc c0       	rjmp	.+376    	; 0xe12 <LCD_setPinDirection+0x1c6>
     c9a:	2c 81       	ldd	r18, Y+4	; 0x04
     c9c:	3d 81       	ldd	r19, Y+5	; 0x05
     c9e:	22 30       	cpi	r18, 0x02	; 2
     ca0:	31 05       	cpc	r19, r1
     ca2:	09 f4       	brne	.+2      	; 0xca6 <LCD_setPinDirection+0x5a>
     ca4:	5f c0       	rjmp	.+190    	; 0xd64 <LCD_setPinDirection+0x118>
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	9d 81       	ldd	r25, Y+5	; 0x05
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	91 05       	cpc	r25, r1
     cae:	09 f4       	brne	.+2      	; 0xcb2 <LCD_setPinDirection+0x66>
     cb0:	85 c0       	rjmp	.+266    	; 0xdbc <LCD_setPinDirection+0x170>
     cb2:	af c0       	rjmp	.+350    	; 0xe12 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     cba:	aa e3       	ldi	r26, 0x3A	; 58
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ea e3       	ldi	r30, 0x3A	; 58
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <LCD_setPinDirection+0x8c>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <LCD_setPinDirection+0x88>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	98 c0       	rjmp	.+304    	; 0xe12 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
     ce2:	aa e3       	ldi	r26, 0x3A	; 58
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e3       	ldi	r30, 0x3A	; 58
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <LCD_setPinDirection+0xb4>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <LCD_setPinDirection+0xb0>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	83 c0       	rjmp	.+262    	; 0xe12 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	a1 f4       	brne	.+40     	; 0xd3a <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d12:	a7 e3       	ldi	r26, 0x37	; 55
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e7 e3       	ldi	r30, 0x37	; 55
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <LCD_setPinDirection+0xe4>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <LCD_setPinDirection+0xe0>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	6c c0       	rjmp	.+216    	; 0xe12 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
     d3a:	a7 e3       	ldi	r26, 0x37	; 55
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e7 e3       	ldi	r30, 0x37	; 55
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <LCD_setPinDirection+0x10c>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <LCD_setPinDirection+0x108>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	57 c0       	rjmp	.+174    	; 0xe12 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	a1 f4       	brne	.+40     	; 0xd92 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d6a:	a4 e3       	ldi	r26, 0x34	; 52
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e4 e3       	ldi	r30, 0x34	; 52
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <LCD_setPinDirection+0x13c>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <LCD_setPinDirection+0x138>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	40 c0       	rjmp	.+128    	; 0xe12 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
     d92:	a4 e3       	ldi	r26, 0x34	; 52
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e4 e3       	ldi	r30, 0x34	; 52
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	48 2f       	mov	r20, r24
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <LCD_setPinDirection+0x164>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <LCD_setPinDirection+0x160>
     db4:	80 95       	com	r24
     db6:	84 23       	and	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	2b c0       	rjmp	.+86     	; 0xe12 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	a1 f4       	brne	.+40     	; 0xdea <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     dc2:	a1 e3       	ldi	r26, 0x31	; 49
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e1 e3       	ldi	r30, 0x31	; 49
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <LCD_setPinDirection+0x194>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <LCD_setPinDirection+0x190>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	14 c0       	rjmp	.+40     	; 0xe12 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
     dea:	a1 e3       	ldi	r26, 0x31	; 49
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e1 e3       	ldi	r30, 0x31	; 49
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <LCD_setPinDirection+0x1bc>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <LCD_setPinDirection+0x1b8>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	00 d0       	rcall	.+0      	; 0xe28 <LCD_setPinValue+0x6>
     e28:	00 d0       	rcall	.+0      	; 0xe2a <LCD_setPinValue+0x8>
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	6a 83       	std	Y+2, r22	; 0x02
     e34:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	88 30       	cpi	r24, 0x08	; 8
     e3a:	08 f0       	brcs	.+2      	; 0xe3e <LCD_setPinValue+0x1c>
     e3c:	d5 c0       	rjmp	.+426    	; 0xfe8 <LCD_setPinValue+0x1c6>
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	84 30       	cpi	r24, 0x04	; 4
     e42:	08 f0       	brcs	.+2      	; 0xe46 <LCD_setPinValue+0x24>
     e44:	d1 c0       	rjmp	.+418    	; 0xfe8 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3d 83       	std	Y+5, r19	; 0x05
     e4e:	2c 83       	std	Y+4, r18	; 0x04
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	9d 81       	ldd	r25, Y+5	; 0x05
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <LCD_setPinValue+0x3a>
     e5a:	43 c0       	rjmp	.+134    	; 0xee2 <LCD_setPinValue+0xc0>
     e5c:	2c 81       	ldd	r18, Y+4	; 0x04
     e5e:	3d 81       	ldd	r19, Y+5	; 0x05
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	2c f4       	brge	.+10     	; 0xe70 <LCD_setPinValue+0x4e>
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	9d 81       	ldd	r25, Y+5	; 0x05
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	71 f0       	breq	.+28     	; 0xe8a <LCD_setPinValue+0x68>
     e6e:	bc c0       	rjmp	.+376    	; 0xfe8 <LCD_setPinValue+0x1c6>
     e70:	2c 81       	ldd	r18, Y+4	; 0x04
     e72:	3d 81       	ldd	r19, Y+5	; 0x05
     e74:	22 30       	cpi	r18, 0x02	; 2
     e76:	31 05       	cpc	r19, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <LCD_setPinValue+0x5a>
     e7a:	5f c0       	rjmp	.+190    	; 0xf3a <LCD_setPinValue+0x118>
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	91 05       	cpc	r25, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <LCD_setPinValue+0x66>
     e86:	85 c0       	rjmp	.+266    	; 0xf92 <LCD_setPinValue+0x170>
     e88:	af c0       	rjmp	.+350    	; 0xfe8 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	a1 f4       	brne	.+40     	; 0xeb8 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e3       	ldi	r30, 0x3B	; 59
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <LCD_setPinValue+0x8c>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <LCD_setPinValue+0x88>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	98 c0       	rjmp	.+304    	; 0xfe8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
     eb8:	ab e3       	ldi	r26, 0x3B	; 59
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	eb e3       	ldi	r30, 0x3B	; 59
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <LCD_setPinValue+0xb4>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <LCD_setPinValue+0xb0>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	83 c0       	rjmp	.+262    	; 0xfe8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	a1 f4       	brne	.+40     	; 0xf10 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ee8:	a8 e3       	ldi	r26, 0x38	; 56
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e8 e3       	ldi	r30, 0x38	; 56
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <LCD_setPinValue+0xe4>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <LCD_setPinValue+0xe0>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	6c c0       	rjmp	.+216    	; 0xfe8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
     f10:	a8 e3       	ldi	r26, 0x38	; 56
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e8 e3       	ldi	r30, 0x38	; 56
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <LCD_setPinValue+0x10c>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <LCD_setPinValue+0x108>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	57 c0       	rjmp	.+174    	; 0xfe8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	a1 f4       	brne	.+40     	; 0xf68 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f40:	a5 e3       	ldi	r26, 0x35	; 53
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e3       	ldi	r30, 0x35	; 53
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <LCD_setPinValue+0x13c>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <LCD_setPinValue+0x138>
     f62:	84 2b       	or	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	40 c0       	rjmp	.+128    	; 0xfe8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
     f68:	a5 e3       	ldi	r26, 0x35	; 53
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e5 e3       	ldi	r30, 0x35	; 53
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <LCD_setPinValue+0x164>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <LCD_setPinValue+0x160>
     f8a:	80 95       	com	r24
     f8c:	84 23       	and	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	2b c0       	rjmp	.+86     	; 0xfe8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	a1 f4       	brne	.+40     	; 0xfc0 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     f98:	a2 e3       	ldi	r26, 0x32	; 50
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e2 e3       	ldi	r30, 0x32	; 50
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <LCD_setPinValue+0x194>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <LCD_setPinValue+0x190>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
     fc0:	a2 e3       	ldi	r26, 0x32	; 50
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e2 e3       	ldi	r30, 0x32	; 50
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <LCD_setPinValue+0x1bc>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <LCD_setPinValue+0x1b8>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	00 d0       	rcall	.+0      	; 0xffe <LCD_getPinValue+0x6>
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <LCD_getPinValue+0x8>
    1000:	0f 92       	push	r0
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	8a 83       	std	Y+2, r24	; 0x02
    1008:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    100a:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	88 30       	cpi	r24, 0x08	; 8
    1010:	08 f0       	brcs	.+2      	; 0x1014 <LCD_getPinValue+0x1c>
    1012:	84 c0       	rjmp	.+264    	; 0x111c <LCD_getPinValue+0x124>
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	84 30       	cpi	r24, 0x04	; 4
    1018:	08 f0       	brcs	.+2      	; 0x101c <LCD_getPinValue+0x24>
    101a:	80 c0       	rjmp	.+256    	; 0x111c <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	3d 83       	std	Y+5, r19	; 0x05
    1024:	2c 83       	std	Y+4, r18	; 0x04
    1026:	4c 81       	ldd	r20, Y+4	; 0x04
    1028:	5d 81       	ldd	r21, Y+5	; 0x05
    102a:	41 30       	cpi	r20, 0x01	; 1
    102c:	51 05       	cpc	r21, r1
    102e:	79 f1       	breq	.+94     	; 0x108e <LCD_getPinValue+0x96>
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	91 05       	cpc	r25, r1
    1038:	34 f4       	brge	.+12     	; 0x1046 <LCD_getPinValue+0x4e>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	21 15       	cp	r18, r1
    1040:	31 05       	cpc	r19, r1
    1042:	69 f0       	breq	.+26     	; 0x105e <LCD_getPinValue+0x66>
    1044:	6b c0       	rjmp	.+214    	; 0x111c <LCD_getPinValue+0x124>
    1046:	4c 81       	ldd	r20, Y+4	; 0x04
    1048:	5d 81       	ldd	r21, Y+5	; 0x05
    104a:	42 30       	cpi	r20, 0x02	; 2
    104c:	51 05       	cpc	r21, r1
    104e:	b9 f1       	breq	.+110    	; 0x10be <LCD_getPinValue+0xc6>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
    1054:	83 30       	cpi	r24, 0x03	; 3
    1056:	91 05       	cpc	r25, r1
    1058:	09 f4       	brne	.+2      	; 0x105c <LCD_getPinValue+0x64>
    105a:	49 c0       	rjmp	.+146    	; 0x10ee <LCD_getPinValue+0xf6>
    105c:	5f c0       	rjmp	.+190    	; 0x111c <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    105e:	e9 e3       	ldi	r30, 0x39	; 57
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a9 01       	movw	r20, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <LCD_getPinValue+0x7e>
    1072:	55 95       	asr	r21
    1074:	47 95       	ror	r20
    1076:	8a 95       	dec	r24
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <LCD_getPinValue+0x7a>
    107a:	ca 01       	movw	r24, r20
    107c:	81 70       	andi	r24, 0x01	; 1
    107e:	90 70       	andi	r25, 0x00	; 0
    1080:	88 23       	and	r24, r24
    1082:	19 f0       	breq	.+6      	; 0x108a <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	49 c0       	rjmp	.+146    	; 0x111c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	47 c0       	rjmp	.+142    	; 0x111c <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    108e:	e6 e3       	ldi	r30, 0x36	; 54
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a9 01       	movw	r20, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <LCD_getPinValue+0xae>
    10a2:	55 95       	asr	r21
    10a4:	47 95       	ror	r20
    10a6:	8a 95       	dec	r24
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <LCD_getPinValue+0xaa>
    10aa:	ca 01       	movw	r24, r20
    10ac:	81 70       	andi	r24, 0x01	; 1
    10ae:	90 70       	andi	r25, 0x00	; 0
    10b0:	88 23       	and	r24, r24
    10b2:	19 f0       	breq	.+6      	; 0x10ba <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	31 c0       	rjmp	.+98     	; 0x111c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10ba:	19 82       	std	Y+1, r1	; 0x01
    10bc:	2f c0       	rjmp	.+94     	; 0x111c <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10be:	e3 e3       	ldi	r30, 0x33	; 51
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a9 01       	movw	r20, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <LCD_getPinValue+0xde>
    10d2:	55 95       	asr	r21
    10d4:	47 95       	ror	r20
    10d6:	8a 95       	dec	r24
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <LCD_getPinValue+0xda>
    10da:	ca 01       	movw	r24, r20
    10dc:	81 70       	andi	r24, 0x01	; 1
    10de:	90 70       	andi	r25, 0x00	; 0
    10e0:	88 23       	and	r24, r24
    10e2:	19 f0       	breq	.+6      	; 0x10ea <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	19 c0       	rjmp	.+50     	; 0x111c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10ea:	19 82       	std	Y+1, r1	; 0x01
    10ec:	17 c0       	rjmp	.+46     	; 0x111c <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    10ee:	e0 e3       	ldi	r30, 0x30	; 48
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <LCD_getPinValue+0x10e>
    1102:	55 95       	asr	r21
    1104:	47 95       	ror	r20
    1106:	8a 95       	dec	r24
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <LCD_getPinValue+0x10a>
    110a:	ca 01       	movw	r24, r20
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	90 70       	andi	r25, 0x00	; 0
    1110:	88 23       	and	r24, r24
    1112:	19 f0       	breq	.+6      	; 0x111a <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	01 c0       	rjmp	.+2      	; 0x111c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    111a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
}
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <LCD_setPortDirection+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <LCD_setPortDirection+0x8>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	84 30       	cpi	r24, 0x04	; 4
    1142:	90 f5       	brcc	.+100    	; 0x11a8 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3c 83       	std	Y+4, r19	; 0x04
    114c:	2b 83       	std	Y+3, r18	; 0x03
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	d1 f0       	breq	.+52     	; 0x118c <LCD_setPortDirection+0x5e>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <LCD_setPortDirection+0x3e>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	61 f0       	breq	.+24     	; 0x1182 <LCD_setPortDirection+0x54>
    116a:	1e c0       	rjmp	.+60     	; 0x11a8 <LCD_setPortDirection+0x7a>
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <LCD_setPortDirection+0x68>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <LCD_setPortDirection+0x72>
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1182:	ea e3       	ldi	r30, 0x3A	; 58
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	0e c0       	rjmp	.+28     	; 0x11a8 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    118c:	e7 e3       	ldi	r30, 0x37	; 55
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	09 c0       	rjmp	.+18     	; 0x11a8 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1196:	e4 e3       	ldi	r30, 0x34	; 52
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11a0:	e1 e3       	ldi	r30, 0x31	; 49
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24
			break;
		}
	}
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <LCD_setPortValue+0x6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <LCD_setPortValue+0x8>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	84 30       	cpi	r24, 0x04	; 4
    11ca:	90 f5       	brcc	.+100    	; 0x1230 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3c 83       	std	Y+4, r19	; 0x04
    11d4:	2b 83       	std	Y+3, r18	; 0x03
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	91 05       	cpc	r25, r1
    11de:	d1 f0       	breq	.+52     	; 0x1214 <LCD_setPortValue+0x5e>
    11e0:	2b 81       	ldd	r18, Y+3	; 0x03
    11e2:	3c 81       	ldd	r19, Y+4	; 0x04
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	2c f4       	brge	.+10     	; 0x11f4 <LCD_setPortValue+0x3e>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	61 f0       	breq	.+24     	; 0x120a <LCD_setPortValue+0x54>
    11f2:	1e c0       	rjmp	.+60     	; 0x1230 <LCD_setPortValue+0x7a>
    11f4:	2b 81       	ldd	r18, Y+3	; 0x03
    11f6:	3c 81       	ldd	r19, Y+4	; 0x04
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	81 f0       	breq	.+32     	; 0x121e <LCD_setPortValue+0x68>
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	83 30       	cpi	r24, 0x03	; 3
    1204:	91 05       	cpc	r25, r1
    1206:	81 f0       	breq	.+32     	; 0x1228 <LCD_setPortValue+0x72>
    1208:	13 c0       	rjmp	.+38     	; 0x1230 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    120a:	eb e3       	ldi	r30, 0x3B	; 59
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	80 83       	st	Z, r24
    1212:	0e c0       	rjmp	.+28     	; 0x1230 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1214:	e8 e3       	ldi	r30, 0x38	; 56
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	80 83       	st	Z, r24
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    121e:	e5 e3       	ldi	r30, 0x35	; 53
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 83       	st	Z, r24
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1228:	e2 e3       	ldi	r30, 0x32	; 50
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <LCD_getPortValue+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <LCD_getPortValue+0x8>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    124c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	90 f5       	brcc	.+100    	; 0x12b8 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3c 83       	std	Y+4, r19	; 0x04
    125c:	2b 83       	std	Y+3, r18	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	d1 f0       	breq	.+52     	; 0x129c <LCD_getPortValue+0x5e>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	2c f4       	brge	.+10     	; 0x127c <LCD_getPortValue+0x3e>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	61 f0       	breq	.+24     	; 0x1292 <LCD_getPortValue+0x54>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <LCD_getPortValue+0x7a>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	81 f0       	breq	.+32     	; 0x12a6 <LCD_getPortValue+0x68>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <LCD_getPortValue+0x72>
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1292:	e9 e3       	ldi	r30, 0x39	; 57
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    129c:	e6 e3       	ldi	r30, 0x36	; 54
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12a6:	e3 e3       	ldi	r30, 0x33	; 51
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12b0:	e0 e3       	ldi	r30, 0x30	; 48
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    12d0:	ea e3       	ldi	r30, 0x3A	; 58
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    12d6:	e7 e3       	ldi	r30, 0x37	; 55
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    12dc:	e4 e3       	ldi	r30, 0x34	; 52
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    12e4:	e1 e3       	ldi	r30, 0x31	; 49
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 e3       	ldi	r24, 0x30	; 48
    12ea:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    12f2:	e8 e3       	ldi	r30, 0x38	; 56
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    12fe:	e2 e3       	ldi	r30, 0x32	; 50
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	10 82       	st	Z, r1

}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	2e 97       	sbiw	r28, 0x0e	; 14
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	8a 83       	std	Y+2, r24	; 0x02
    1320:	6b 83       	std	Y+3, r22	; 0x03
    1322:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	84 30       	cpi	r24, 0x04	; 4
    132c:	08 f0       	brcs	.+2      	; 0x1330 <DIO_u8SetPinDirection+0x26>
    132e:	0c c1       	rjmp	.+536    	; 0x1548 <DIO_u8SetPinDirection+0x23e>
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 30       	cpi	r24, 0x08	; 8
    1334:	08 f0       	brcs	.+2      	; 0x1338 <DIO_u8SetPinDirection+0x2e>
    1336:	08 c1       	rjmp	.+528    	; 0x1548 <DIO_u8SetPinDirection+0x23e>
    1338:	8c 81       	ldd	r24, Y+4	; 0x04
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	21 f0       	breq	.+8      	; 0x1346 <DIO_u8SetPinDirection+0x3c>
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	88 23       	and	r24, r24
    1342:	09 f0       	breq	.+2      	; 0x1346 <DIO_u8SetPinDirection+0x3c>
    1344:	01 c1       	rjmp	.+514    	; 0x1548 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3e 87       	std	Y+14, r19	; 0x0e
    134e:	2d 87       	std	Y+13, r18	; 0x0d
    1350:	8d 85       	ldd	r24, Y+13	; 0x0d
    1352:	9e 85       	ldd	r25, Y+14	; 0x0e
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <DIO_u8SetPinDirection+0x52>
    135a:	4f c0       	rjmp	.+158    	; 0x13fa <DIO_u8SetPinDirection+0xf0>
    135c:	2d 85       	ldd	r18, Y+13	; 0x0d
    135e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	2c f4       	brge	.+10     	; 0x1370 <DIO_u8SetPinDirection+0x66>
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	71 f0       	breq	.+28     	; 0x138a <DIO_u8SetPinDirection+0x80>
    136e:	ed c0       	rjmp	.+474    	; 0x154a <DIO_u8SetPinDirection+0x240>
    1370:	2d 85       	ldd	r18, Y+13	; 0x0d
    1372:	3e 85       	ldd	r19, Y+14	; 0x0e
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <DIO_u8SetPinDirection+0x72>
    137a:	77 c0       	rjmp	.+238    	; 0x146a <DIO_u8SetPinDirection+0x160>
    137c:	8d 85       	ldd	r24, Y+13	; 0x0d
    137e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <DIO_u8SetPinDirection+0x7e>
    1386:	a9 c0       	rjmp	.+338    	; 0x14da <DIO_u8SetPinDirection+0x1d0>
    1388:	e0 c0       	rjmp	.+448    	; 0x154a <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3c 87       	std	Y+12, r19	; 0x0c
    1392:	2b 87       	std	Y+11, r18	; 0x0b
    1394:	8b 85       	ldd	r24, Y+11	; 0x0b
    1396:	9c 85       	ldd	r25, Y+12	; 0x0c
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	d1 f0       	breq	.+52     	; 0x13d0 <DIO_u8SetPinDirection+0xc6>
    139c:	2b 85       	ldd	r18, Y+11	; 0x0b
    139e:	3c 85       	ldd	r19, Y+12	; 0x0c
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	31 05       	cpc	r19, r1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <DIO_u8SetPinDirection+0x9e>
    13a6:	d1 c0       	rjmp	.+418    	; 0x154a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    13a8:	aa e3       	ldi	r26, 0x3A	; 58
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea e3       	ldi	r30, 0x3A	; 58
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8SetPinDirection+0xbc>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8SetPinDirection+0xb8>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	bd c0       	rjmp	.+378    	; 0x154a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    13d0:	aa e3       	ldi	r26, 0x3A	; 58
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ea e3       	ldi	r30, 0x3A	; 58
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_u8SetPinDirection+0xe4>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_u8SetPinDirection+0xe0>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	a8 c0       	rjmp	.+336    	; 0x154a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3a 87       	std	Y+10, r19	; 0x0a
    1402:	29 87       	std	Y+9, r18	; 0x09
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	d1 f0       	breq	.+52     	; 0x1440 <DIO_u8SetPinDirection+0x136>
    140c:	29 85       	ldd	r18, Y+9	; 0x09
    140e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	09 f0       	breq	.+2      	; 0x1418 <DIO_u8SetPinDirection+0x10e>
    1416:	99 c0       	rjmp	.+306    	; 0x154a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1418:	a7 e3       	ldi	r26, 0x37	; 55
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e7 e3       	ldi	r30, 0x37	; 55
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_u8SetPinDirection+0x12c>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_u8SetPinDirection+0x128>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	85 c0       	rjmp	.+266    	; 0x154a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1440:	a7 e3       	ldi	r26, 0x37	; 55
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e7 e3       	ldi	r30, 0x37	; 55
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_u8SetPinDirection+0x154>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <DIO_u8SetPinDirection+0x150>
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	70 c0       	rjmp	.+224    	; 0x154a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	38 87       	std	Y+8, r19	; 0x08
    1472:	2f 83       	std	Y+7, r18	; 0x07
    1474:	8f 81       	ldd	r24, Y+7	; 0x07
    1476:	98 85       	ldd	r25, Y+8	; 0x08
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	d1 f0       	breq	.+52     	; 0x14b0 <DIO_u8SetPinDirection+0x1a6>
    147c:	2f 81       	ldd	r18, Y+7	; 0x07
    147e:	38 85       	ldd	r19, Y+8	; 0x08
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	31 05       	cpc	r19, r1
    1484:	09 f0       	breq	.+2      	; 0x1488 <DIO_u8SetPinDirection+0x17e>
    1486:	61 c0       	rjmp	.+194    	; 0x154a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1488:	a4 e3       	ldi	r26, 0x34	; 52
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e4 e3       	ldi	r30, 0x34	; 52
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	48 2f       	mov	r20, r24
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 2e       	mov	r0, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_u8SetPinDirection+0x19c>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	0a 94       	dec	r0
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_u8SetPinDirection+0x198>
    14aa:	84 2b       	or	r24, r20
    14ac:	8c 93       	st	X, r24
    14ae:	4d c0       	rjmp	.+154    	; 0x154a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    14b0:	a4 e3       	ldi	r26, 0x34	; 52
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e4 e3       	ldi	r30, 0x34	; 52
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_u8SetPinDirection+0x1c4>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_u8SetPinDirection+0x1c0>
    14d2:	80 95       	com	r24
    14d4:	84 23       	and	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	38 c0       	rjmp	.+112    	; 0x154a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3e 83       	std	Y+6, r19	; 0x06
    14e2:	2d 83       	std	Y+5, r18	; 0x05
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	c9 f0       	breq	.+50     	; 0x151e <DIO_u8SetPinDirection+0x214>
    14ec:	2d 81       	ldd	r18, Y+5	; 0x05
    14ee:	3e 81       	ldd	r19, Y+6	; 0x06
    14f0:	21 30       	cpi	r18, 0x01	; 1
    14f2:	31 05       	cpc	r19, r1
    14f4:	51 f5       	brne	.+84     	; 0x154a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    14f6:	a1 e3       	ldi	r26, 0x31	; 49
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e3       	ldi	r30, 0x31	; 49
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_u8SetPinDirection+0x20a>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_u8SetPinDirection+0x206>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	16 c0       	rjmp	.+44     	; 0x154a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    151e:	a1 e3       	ldi	r26, 0x31	; 49
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e1 e3       	ldi	r30, 0x31	; 49
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_u8SetPinDirection+0x232>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_u8SetPinDirection+0x22e>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	01 c0       	rjmp	.+2      	; 0x154a <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1548:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
}
    154c:	2e 96       	adiw	r28, 0x0e	; 14
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	2f 97       	sbiw	r28, 0x0f	; 15
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	8b 83       	std	Y+3, r24	; 0x03
    1574:	6c 83       	std	Y+4, r22	; 0x04
    1576:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	84 30       	cpi	r24, 0x04	; 4
    1580:	08 f0       	brcs	.+2      	; 0x1584 <DIO_u8SetPinValue+0x26>
    1582:	13 c1       	rjmp	.+550    	; 0x17aa <DIO_u8SetPinValue+0x24c>
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	08 f0       	brcs	.+2      	; 0x158c <DIO_u8SetPinValue+0x2e>
    158a:	0f c1       	rjmp	.+542    	; 0x17aa <DIO_u8SetPinValue+0x24c>
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	88 23       	and	r24, r24
    1590:	21 f0       	breq	.+8      	; 0x159a <DIO_u8SetPinValue+0x3c>
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	09 f0       	breq	.+2      	; 0x159a <DIO_u8SetPinValue+0x3c>
    1598:	08 c1       	rjmp	.+528    	; 0x17aa <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3f 87       	std	Y+15, r19	; 0x0f
    15a2:	2e 87       	std	Y+14, r18	; 0x0e
    15a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	91 05       	cpc	r25, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <DIO_u8SetPinValue+0x52>
    15ae:	50 c0       	rjmp	.+160    	; 0x1650 <DIO_u8SetPinValue+0xf2>
    15b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    15b2:	3f 85       	ldd	r19, Y+15	; 0x0f
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	2c f4       	brge	.+10     	; 0x15c4 <DIO_u8SetPinValue+0x66>
    15ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    15bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	71 f0       	breq	.+28     	; 0x15de <DIO_u8SetPinValue+0x80>
    15c2:	f4 c0       	rjmp	.+488    	; 0x17ac <DIO_u8SetPinValue+0x24e>
    15c4:	2e 85       	ldd	r18, Y+14	; 0x0e
    15c6:	3f 85       	ldd	r19, Y+15	; 0x0f
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <DIO_u8SetPinValue+0x72>
    15ce:	79 c0       	rjmp	.+242    	; 0x16c2 <DIO_u8SetPinValue+0x164>
    15d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	91 05       	cpc	r25, r1
    15d8:	09 f4       	brne	.+2      	; 0x15dc <DIO_u8SetPinValue+0x7e>
    15da:	ad c0       	rjmp	.+346    	; 0x1736 <DIO_u8SetPinValue+0x1d8>
    15dc:	e7 c0       	rjmp	.+462    	; 0x17ac <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	3d 87       	std	Y+13, r19	; 0x0d
    15e6:	2c 87       	std	Y+12, r18	; 0x0c
    15e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    15ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	c9 f0       	breq	.+50     	; 0x1622 <DIO_u8SetPinValue+0xc4>
    15f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    15f4:	21 30       	cpi	r18, 0x01	; 1
    15f6:	31 05       	cpc	r19, r1
    15f8:	49 f5       	brne	.+82     	; 0x164c <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    15fa:	ab e3       	ldi	r26, 0x3B	; 59
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	eb e3       	ldi	r30, 0x3B	; 59
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_u8SetPinValue+0xba>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_u8SetPinValue+0xb6>
    161c:	84 2b       	or	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	c5 c0       	rjmp	.+394    	; 0x17ac <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1622:	ab e3       	ldi	r26, 0x3B	; 59
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	eb e3       	ldi	r30, 0x3B	; 59
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_u8SetPinValue+0xe2>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_u8SetPinValue+0xde>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	b0 c0       	rjmp	.+352    	; 0x17ac <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    164c:	1a 82       	std	Y+2, r1	; 0x02
    164e:	ae c0       	rjmp	.+348    	; 0x17ac <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3b 87       	std	Y+11, r19	; 0x0b
    1658:	2a 87       	std	Y+10, r18	; 0x0a
    165a:	8a 85       	ldd	r24, Y+10	; 0x0a
    165c:	9b 85       	ldd	r25, Y+11	; 0x0b
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	c9 f0       	breq	.+50     	; 0x1694 <DIO_u8SetPinValue+0x136>
    1662:	2a 85       	ldd	r18, Y+10	; 0x0a
    1664:	3b 85       	ldd	r19, Y+11	; 0x0b
    1666:	21 30       	cpi	r18, 0x01	; 1
    1668:	31 05       	cpc	r19, r1
    166a:	49 f5       	brne	.+82     	; 0x16be <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    166c:	a8 e3       	ldi	r26, 0x38	; 56
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e8 e3       	ldi	r30, 0x38	; 56
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <DIO_u8SetPinValue+0x12c>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <DIO_u8SetPinValue+0x128>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	8c c0       	rjmp	.+280    	; 0x17ac <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1694:	a8 e3       	ldi	r26, 0x38	; 56
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_u8SetPinValue+0x154>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_u8SetPinValue+0x150>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	77 c0       	rjmp	.+238    	; 0x17ac <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    16be:	1a 82       	std	Y+2, r1	; 0x02
    16c0:	75 c0       	rjmp	.+234    	; 0x17ac <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	39 87       	std	Y+9, r19	; 0x09
    16ca:	28 87       	std	Y+8, r18	; 0x08
    16cc:	88 85       	ldd	r24, Y+8	; 0x08
    16ce:	99 85       	ldd	r25, Y+9	; 0x09
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <DIO_u8SetPinValue+0x182>
    16d4:	28 85       	ldd	r18, Y+8	; 0x08
    16d6:	39 85       	ldd	r19, Y+9	; 0x09
    16d8:	21 30       	cpi	r18, 0x01	; 1
    16da:	31 05       	cpc	r19, r1
    16dc:	b1 f0       	breq	.+44     	; 0x170a <DIO_u8SetPinValue+0x1ac>
    16de:	29 c0       	rjmp	.+82     	; 0x1732 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    16e0:	a5 e3       	ldi	r26, 0x35	; 53
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e5 e3       	ldi	r30, 0x35	; 53
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_u8SetPinValue+0x1a0>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_u8SetPinValue+0x19c>
    1702:	80 95       	com	r24
    1704:	84 23       	and	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	51 c0       	rjmp	.+162    	; 0x17ac <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    170a:	a5 e3       	ldi	r26, 0x35	; 53
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e3       	ldi	r30, 0x35	; 53
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8SetPinValue+0x1ca>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8SetPinValue+0x1c6>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	3d c0       	rjmp	.+122    	; 0x17ac <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1732:	1a 82       	std	Y+2, r1	; 0x02
    1734:	3b c0       	rjmp	.+118    	; 0x17ac <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3f 83       	std	Y+7, r19	; 0x07
    173e:	2e 83       	std	Y+6, r18	; 0x06
    1740:	8e 81       	ldd	r24, Y+6	; 0x06
    1742:	9f 81       	ldd	r25, Y+7	; 0x07
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	31 f0       	breq	.+12     	; 0x1754 <DIO_u8SetPinValue+0x1f6>
    1748:	2e 81       	ldd	r18, Y+6	; 0x06
    174a:	3f 81       	ldd	r19, Y+7	; 0x07
    174c:	21 30       	cpi	r18, 0x01	; 1
    174e:	31 05       	cpc	r19, r1
    1750:	b1 f0       	breq	.+44     	; 0x177e <DIO_u8SetPinValue+0x220>
    1752:	29 c0       	rjmp	.+82     	; 0x17a6 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1754:	a5 e3       	ldi	r26, 0x35	; 53
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e5 e3       	ldi	r30, 0x35	; 53
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_u8SetPinValue+0x214>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_u8SetPinValue+0x210>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	17 c0       	rjmp	.+46     	; 0x17ac <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    177e:	a2 e3       	ldi	r26, 0x32	; 50
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e2 e3       	ldi	r30, 0x32	; 50
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_u8SetPinValue+0x23e>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_u8SetPinValue+0x23a>
    17a0:	84 2b       	or	r24, r20
    17a2:	8c 93       	st	X, r24
    17a4:	03 c0       	rjmp	.+6      	; 0x17ac <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    17a6:	1a 82       	std	Y+2, r1	; 0x02
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    17aa:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17ae:	2f 96       	adiw	r28, 0x0f	; 15
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	28 97       	sbiw	r28, 0x08	; 8
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	8b 83       	std	Y+3, r24	; 0x03
    17d6:	6c 83       	std	Y+4, r22	; 0x04
    17d8:	5e 83       	std	Y+6, r21	; 0x06
    17da:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <DIO_u8GetPinValue+0x28>
    17e6:	9f c0       	rjmp	.+318    	; 0x1926 <DIO_u8GetPinValue+0x166>
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	88 30       	cpi	r24, 0x08	; 8
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <DIO_u8GetPinValue+0x30>
    17ee:	9b c0       	rjmp	.+310    	; 0x1926 <DIO_u8GetPinValue+0x166>
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	9e 81       	ldd	r25, Y+6	; 0x06
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	09 f4       	brne	.+2      	; 0x17fa <DIO_u8GetPinValue+0x3a>
    17f8:	96 c0       	rjmp	.+300    	; 0x1926 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	38 87       	std	Y+8, r19	; 0x08
    1802:	2f 83       	std	Y+7, r18	; 0x07
    1804:	4f 81       	ldd	r20, Y+7	; 0x07
    1806:	58 85       	ldd	r21, Y+8	; 0x08
    1808:	41 30       	cpi	r20, 0x01	; 1
    180a:	51 05       	cpc	r21, r1
    180c:	a9 f1       	breq	.+106    	; 0x1878 <DIO_u8GetPinValue+0xb8>
    180e:	8f 81       	ldd	r24, Y+7	; 0x07
    1810:	98 85       	ldd	r25, Y+8	; 0x08
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	91 05       	cpc	r25, r1
    1816:	34 f4       	brge	.+12     	; 0x1824 <DIO_u8GetPinValue+0x64>
    1818:	2f 81       	ldd	r18, Y+7	; 0x07
    181a:	38 85       	ldd	r19, Y+8	; 0x08
    181c:	21 15       	cp	r18, r1
    181e:	31 05       	cpc	r19, r1
    1820:	71 f0       	breq	.+28     	; 0x183e <DIO_u8GetPinValue+0x7e>
    1822:	82 c0       	rjmp	.+260    	; 0x1928 <DIO_u8GetPinValue+0x168>
    1824:	4f 81       	ldd	r20, Y+7	; 0x07
    1826:	58 85       	ldd	r21, Y+8	; 0x08
    1828:	42 30       	cpi	r20, 0x02	; 2
    182a:	51 05       	cpc	r21, r1
    182c:	09 f4       	brne	.+2      	; 0x1830 <DIO_u8GetPinValue+0x70>
    182e:	41 c0       	rjmp	.+130    	; 0x18b2 <DIO_u8GetPinValue+0xf2>
    1830:	8f 81       	ldd	r24, Y+7	; 0x07
    1832:	98 85       	ldd	r25, Y+8	; 0x08
    1834:	83 30       	cpi	r24, 0x03	; 3
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <DIO_u8GetPinValue+0x7c>
    183a:	58 c0       	rjmp	.+176    	; 0x18ec <DIO_u8GetPinValue+0x12c>
    183c:	75 c0       	rjmp	.+234    	; 0x1928 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    183e:	e9 e3       	ldi	r30, 0x39	; 57
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a9 01       	movw	r20, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_u8GetPinValue+0x96>
    1852:	55 95       	asr	r21
    1854:	47 95       	ror	r20
    1856:	8a 95       	dec	r24
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_u8GetPinValue+0x92>
    185a:	ca 01       	movw	r24, r20
    185c:	81 70       	andi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	88 23       	and	r24, r24
    1864:	21 f4       	brne	.+8      	; 0x186e <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1866:	ed 81       	ldd	r30, Y+5	; 0x05
    1868:	fe 81       	ldd	r31, Y+6	; 0x06
    186a:	10 82       	st	Z, r1
    186c:	5d c0       	rjmp	.+186    	; 0x1928 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    186e:	ed 81       	ldd	r30, Y+5	; 0x05
    1870:	fe 81       	ldd	r31, Y+6	; 0x06
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 83       	st	Z, r24
    1876:	58 c0       	rjmp	.+176    	; 0x1928 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1878:	e6 e3       	ldi	r30, 0x36	; 54
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a9 01       	movw	r20, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_u8GetPinValue+0xd0>
    188c:	55 95       	asr	r21
    188e:	47 95       	ror	r20
    1890:	8a 95       	dec	r24
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_u8GetPinValue+0xcc>
    1894:	ca 01       	movw	r24, r20
    1896:	81 70       	andi	r24, 0x01	; 1
    1898:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	88 23       	and	r24, r24
    189e:	21 f4       	brne	.+8      	; 0x18a8 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    18a0:	ed 81       	ldd	r30, Y+5	; 0x05
    18a2:	fe 81       	ldd	r31, Y+6	; 0x06
    18a4:	10 82       	st	Z, r1
    18a6:	40 c0       	rjmp	.+128    	; 0x1928 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    18a8:	ed 81       	ldd	r30, Y+5	; 0x05
    18aa:	fe 81       	ldd	r31, Y+6	; 0x06
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 83       	st	Z, r24
    18b0:	3b c0       	rjmp	.+118    	; 0x1928 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    18b2:	e3 e3       	ldi	r30, 0x33	; 51
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_u8GetPinValue+0x10a>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_u8GetPinValue+0x106>
    18ce:	ca 01       	movw	r24, r20
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	88 23       	and	r24, r24
    18d8:	21 f4       	brne	.+8      	; 0x18e2 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    18da:	ed 81       	ldd	r30, Y+5	; 0x05
    18dc:	fe 81       	ldd	r31, Y+6	; 0x06
    18de:	10 82       	st	Z, r1
    18e0:	23 c0       	rjmp	.+70     	; 0x1928 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    18e2:	ed 81       	ldd	r30, Y+5	; 0x05
    18e4:	fe 81       	ldd	r31, Y+6	; 0x06
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 83       	st	Z, r24
    18ea:	1e c0       	rjmp	.+60     	; 0x1928 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    18ec:	e0 e3       	ldi	r30, 0x30	; 48
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	88 2f       	mov	r24, r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a9 01       	movw	r20, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_u8GetPinValue+0x144>
    1900:	55 95       	asr	r21
    1902:	47 95       	ror	r20
    1904:	8a 95       	dec	r24
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_u8GetPinValue+0x140>
    1908:	ca 01       	movw	r24, r20
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	88 23       	and	r24, r24
    1912:	21 f4       	brne	.+8      	; 0x191c <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1914:	ed 81       	ldd	r30, Y+5	; 0x05
    1916:	fe 81       	ldd	r31, Y+6	; 0x06
    1918:	10 82       	st	Z, r1
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    191c:	ed 81       	ldd	r30, Y+5	; 0x05
    191e:	fe 81       	ldd	r31, Y+6	; 0x06
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	80 83       	st	Z, r24
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1926:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
}
    192a:	28 96       	adiw	r28, 0x08	; 8
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <DIO_getPinValueWithoutPointer+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <DIO_getPinValueWithoutPointer+0x8>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	8a 83       	std	Y+2, r24	; 0x02
    194c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    194e:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	08 f0       	brcs	.+2      	; 0x1958 <DIO_getPinValueWithoutPointer+0x1c>
    1956:	6b c0       	rjmp	.+214    	; 0x1a2e <DIO_getPinValueWithoutPointer+0xf2>
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	08 f0       	brcs	.+2      	; 0x1960 <DIO_getPinValueWithoutPointer+0x24>
    195e:	67 c0       	rjmp	.+206    	; 0x1a2e <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3d 83       	std	Y+5, r19	; 0x05
    1968:	2c 83       	std	Y+4, r18	; 0x04
    196a:	4c 81       	ldd	r20, Y+4	; 0x04
    196c:	5d 81       	ldd	r21, Y+5	; 0x05
    196e:	41 30       	cpi	r20, 0x01	; 1
    1970:	51 05       	cpc	r21, r1
    1972:	41 f1       	breq	.+80     	; 0x19c4 <DIO_getPinValueWithoutPointer+0x88>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	91 05       	cpc	r25, r1
    197c:	34 f4       	brge	.+12     	; 0x198a <DIO_getPinValueWithoutPointer+0x4e>
    197e:	2c 81       	ldd	r18, Y+4	; 0x04
    1980:	3d 81       	ldd	r19, Y+5	; 0x05
    1982:	21 15       	cp	r18, r1
    1984:	31 05       	cpc	r19, r1
    1986:	61 f0       	breq	.+24     	; 0x19a0 <DIO_getPinValueWithoutPointer+0x64>
    1988:	52 c0       	rjmp	.+164    	; 0x1a2e <DIO_getPinValueWithoutPointer+0xf2>
    198a:	4c 81       	ldd	r20, Y+4	; 0x04
    198c:	5d 81       	ldd	r21, Y+5	; 0x05
    198e:	42 30       	cpi	r20, 0x02	; 2
    1990:	51 05       	cpc	r21, r1
    1992:	51 f1       	breq	.+84     	; 0x19e8 <DIO_getPinValueWithoutPointer+0xac>
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	b9 f1       	breq	.+110    	; 0x1a0c <DIO_getPinValueWithoutPointer+0xd0>
    199e:	47 c0       	rjmp	.+142    	; 0x1a2e <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    19a0:	e9 e3       	ldi	r30, 0x39	; 57
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a9 01       	movw	r20, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <DIO_getPinValueWithoutPointer+0x7c>
    19b4:	55 95       	asr	r21
    19b6:	47 95       	ror	r20
    19b8:	8a 95       	dec	r24
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <DIO_getPinValueWithoutPointer+0x78>
    19bc:	ca 01       	movw	r24, r20
    19be:	81 70       	andi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	35 c0       	rjmp	.+106    	; 0x1a2e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    19c4:	e6 e3       	ldi	r30, 0x36	; 54
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a9 01       	movw	r20, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_getPinValueWithoutPointer+0xa0>
    19d8:	55 95       	asr	r21
    19da:	47 95       	ror	r20
    19dc:	8a 95       	dec	r24
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_getPinValueWithoutPointer+0x9c>
    19e0:	ca 01       	movw	r24, r20
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	23 c0       	rjmp	.+70     	; 0x1a2e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    19e8:	e3 e3       	ldi	r30, 0x33	; 51
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a9 01       	movw	r20, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <DIO_getPinValueWithoutPointer+0xc4>
    19fc:	55 95       	asr	r21
    19fe:	47 95       	ror	r20
    1a00:	8a 95       	dec	r24
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <DIO_getPinValueWithoutPointer+0xc0>
    1a04:	ca 01       	movw	r24, r20
    1a06:	81 70       	andi	r24, 0x01	; 1
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	11 c0       	rjmp	.+34     	; 0x1a2e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    1a0c:	e0 e3       	ldi	r30, 0x30	; 48
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a9 01       	movw	r20, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <DIO_getPinValueWithoutPointer+0xe8>
    1a20:	55 95       	asr	r21
    1a22:	47 95       	ror	r20
    1a24:	8a 95       	dec	r24
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <DIO_getPinValueWithoutPointer+0xe4>
    1a28:	ca 01       	movw	r24, r20
    1a2a:	81 70       	andi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	2d 97       	sbiw	r28, 0x0d	; 13
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3c 87       	std	Y+12, r19	; 0x0c
    1a60:	2b 87       	std	Y+11, r18	; 0x0b
    1a62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	71 f1       	breq	.+92     	; 0x1ac8 <DIO_u8SetPortDirection+0x88>
    1a6c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <DIO_u8SetPortDirection+0x40>
    1a76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	69 f0       	breq	.+26     	; 0x1a98 <DIO_u8SetPortDirection+0x58>
    1a7e:	6b c0       	rjmp	.+214    	; 0x1b56 <DIO_u8SetPortDirection+0x116>
    1a80:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a82:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	b9 f1       	breq	.+110    	; 0x1af8 <DIO_u8SetPortDirection+0xb8>
    1a8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <DIO_u8SetPortDirection+0x56>
    1a94:	49 c0       	rjmp	.+146    	; 0x1b28 <DIO_u8SetPortDirection+0xe8>
    1a96:	5f c0       	rjmp	.+190    	; 0x1b56 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	3a 87       	std	Y+10, r19	; 0x0a
    1aa0:	29 87       	std	Y+9, r18	; 0x09
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	31 f0       	breq	.+12     	; 0x1ab6 <DIO_u8SetPortDirection+0x76>
    1aaa:	29 85       	ldd	r18, Y+9	; 0x09
    1aac:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aae:	21 30       	cpi	r18, 0x01	; 1
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	29 f0       	breq	.+10     	; 0x1abe <DIO_u8SetPortDirection+0x7e>
    1ab4:	50 c0       	rjmp	.+160    	; 0x1b56 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1ab6:	ea e3       	ldi	r30, 0x3A	; 58
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	10 82       	st	Z, r1
    1abc:	4c c0       	rjmp	.+152    	; 0x1b56 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1abe:	ea e3       	ldi	r30, 0x3A	; 58
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	80 83       	st	Z, r24
    1ac6:	47 c0       	rjmp	.+142    	; 0x1b56 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	38 87       	std	Y+8, r19	; 0x08
    1ad0:	2f 83       	std	Y+7, r18	; 0x07
    1ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad4:	98 85       	ldd	r25, Y+8	; 0x08
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	31 f0       	breq	.+12     	; 0x1ae6 <DIO_u8SetPortDirection+0xa6>
    1ada:	2f 81       	ldd	r18, Y+7	; 0x07
    1adc:	38 85       	ldd	r19, Y+8	; 0x08
    1ade:	21 30       	cpi	r18, 0x01	; 1
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	29 f0       	breq	.+10     	; 0x1aee <DIO_u8SetPortDirection+0xae>
    1ae4:	38 c0       	rjmp	.+112    	; 0x1b56 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    1ae6:	e7 e3       	ldi	r30, 0x37	; 55
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	10 82       	st	Z, r1
    1aec:	34 c0       	rjmp	.+104    	; 0x1b56 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    1aee:	e7 e3       	ldi	r30, 0x37	; 55
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	80 83       	st	Z, r24
    1af6:	2f c0       	rjmp	.+94     	; 0x1b56 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	3e 83       	std	Y+6, r19	; 0x06
    1b00:	2d 83       	std	Y+5, r18	; 0x05
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	31 f0       	breq	.+12     	; 0x1b16 <DIO_u8SetPortDirection+0xd6>
    1b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0e:	21 30       	cpi	r18, 0x01	; 1
    1b10:	31 05       	cpc	r19, r1
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <DIO_u8SetPortDirection+0xde>
    1b14:	20 c0       	rjmp	.+64     	; 0x1b56 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1b16:	e4 e3       	ldi	r30, 0x34	; 52
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	10 82       	st	Z, r1
    1b1c:	1c c0       	rjmp	.+56     	; 0x1b56 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    1b1e:	e4 e3       	ldi	r30, 0x34	; 52
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    1b24:	80 83       	st	Z, r24
    1b26:	17 c0       	rjmp	.+46     	; 0x1b56 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	3c 83       	std	Y+4, r19	; 0x04
    1b30:	2b 83       	std	Y+3, r18	; 0x03
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	31 f0       	breq	.+12     	; 0x1b46 <DIO_u8SetPortDirection+0x106>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	21 30       	cpi	r18, 0x01	; 1
    1b40:	31 05       	cpc	r19, r1
    1b42:	29 f0       	breq	.+10     	; 0x1b4e <DIO_u8SetPortDirection+0x10e>
    1b44:	08 c0       	rjmp	.+16     	; 0x1b56 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    1b46:	e1 e3       	ldi	r30, 0x31	; 49
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	10 82       	st	Z, r1
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1b4e:	e1 e3       	ldi	r30, 0x31	; 49
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    1b56:	2d 96       	adiw	r28, 0x0d	; 13
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	2d 97       	sbiw	r28, 0x0d	; 13
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	8a 83       	std	Y+2, r24	; 0x02
    1b7e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	84 30       	cpi	r24, 0x04	; 4
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <DIO_u8SetPortValue+0x24>
    1b8a:	80 c0       	rjmp	.+256    	; 0x1c8c <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3d 87       	std	Y+13, r19	; 0x0d
    1b94:	2c 87       	std	Y+12, r18	; 0x0c
    1b96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b98:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	71 f1       	breq	.+92     	; 0x1bfc <DIO_u8SetPortValue+0x94>
    1ba0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ba2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ba4:	22 30       	cpi	r18, 0x02	; 2
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	2c f4       	brge	.+10     	; 0x1bb4 <DIO_u8SetPortValue+0x4c>
    1baa:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bac:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f0       	breq	.+26     	; 0x1bcc <DIO_u8SetPortValue+0x64>
    1bb2:	6d c0       	rjmp	.+218    	; 0x1c8e <DIO_u8SetPortValue+0x126>
    1bb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb6:	3d 85       	ldd	r19, Y+13	; 0x0d
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	31 05       	cpc	r19, r1
    1bbc:	b9 f1       	breq	.+110    	; 0x1c2c <DIO_u8SetPortValue+0xc4>
    1bbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc2:	83 30       	cpi	r24, 0x03	; 3
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <DIO_u8SetPortValue+0x62>
    1bc8:	49 c0       	rjmp	.+146    	; 0x1c5c <DIO_u8SetPortValue+0xf4>
    1bca:	61 c0       	rjmp	.+194    	; 0x1c8e <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3b 87       	std	Y+11, r19	; 0x0b
    1bd4:	2a 87       	std	Y+10, r18	; 0x0a
    1bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	31 f0       	breq	.+12     	; 0x1bea <DIO_u8SetPortValue+0x82>
    1bde:	2a 85       	ldd	r18, Y+10	; 0x0a
    1be0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1be2:	21 30       	cpi	r18, 0x01	; 1
    1be4:	31 05       	cpc	r19, r1
    1be6:	29 f0       	breq	.+10     	; 0x1bf2 <DIO_u8SetPortValue+0x8a>
    1be8:	52 c0       	rjmp	.+164    	; 0x1c8e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    1bea:	eb e3       	ldi	r30, 0x3B	; 59
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	10 82       	st	Z, r1
    1bf0:	4e c0       	rjmp	.+156    	; 0x1c8e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    1bf2:	eb e3       	ldi	r30, 0x3B	; 59
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	80 83       	st	Z, r24
    1bfa:	49 c0       	rjmp	.+146    	; 0x1c8e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	39 87       	std	Y+9, r19	; 0x09
    1c04:	28 87       	std	Y+8, r18	; 0x08
    1c06:	88 85       	ldd	r24, Y+8	; 0x08
    1c08:	99 85       	ldd	r25, Y+9	; 0x09
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	31 f0       	breq	.+12     	; 0x1c1a <DIO_u8SetPortValue+0xb2>
    1c0e:	28 85       	ldd	r18, Y+8	; 0x08
    1c10:	39 85       	ldd	r19, Y+9	; 0x09
    1c12:	21 30       	cpi	r18, 0x01	; 1
    1c14:	31 05       	cpc	r19, r1
    1c16:	29 f0       	breq	.+10     	; 0x1c22 <DIO_u8SetPortValue+0xba>
    1c18:	3a c0       	rjmp	.+116    	; 0x1c8e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    1c1a:	e8 e3       	ldi	r30, 0x38	; 56
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	10 82       	st	Z, r1
    1c20:	36 c0       	rjmp	.+108    	; 0x1c8e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    1c22:	e8 e3       	ldi	r30, 0x38	; 56
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	80 83       	st	Z, r24
    1c2a:	31 c0       	rjmp	.+98     	; 0x1c8e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	3f 83       	std	Y+7, r19	; 0x07
    1c34:	2e 83       	std	Y+6, r18	; 0x06
    1c36:	8e 81       	ldd	r24, Y+6	; 0x06
    1c38:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	31 f0       	breq	.+12     	; 0x1c4a <DIO_u8SetPortValue+0xe2>
    1c3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c40:	3f 81       	ldd	r19, Y+7	; 0x07
    1c42:	21 30       	cpi	r18, 0x01	; 1
    1c44:	31 05       	cpc	r19, r1
    1c46:	29 f0       	breq	.+10     	; 0x1c52 <DIO_u8SetPortValue+0xea>
    1c48:	22 c0       	rjmp	.+68     	; 0x1c8e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    1c4a:	e5 e3       	ldi	r30, 0x35	; 53
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	10 82       	st	Z, r1
    1c50:	1e c0       	rjmp	.+60     	; 0x1c8e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    1c52:	e5 e3       	ldi	r30, 0x35	; 53
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8f ef       	ldi	r24, 0xFF	; 255
    1c58:	80 83       	st	Z, r24
    1c5a:	19 c0       	rjmp	.+50     	; 0x1c8e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3d 83       	std	Y+5, r19	; 0x05
    1c64:	2c 83       	std	Y+4, r18	; 0x04
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	31 f0       	breq	.+12     	; 0x1c7a <DIO_u8SetPortValue+0x112>
    1c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c70:	3d 81       	ldd	r19, Y+5	; 0x05
    1c72:	21 30       	cpi	r18, 0x01	; 1
    1c74:	31 05       	cpc	r19, r1
    1c76:	29 f0       	breq	.+10     	; 0x1c82 <DIO_u8SetPortValue+0x11a>
    1c78:	0a c0       	rjmp	.+20     	; 0x1c8e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    1c7a:	e2 e3       	ldi	r30, 0x32	; 50
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	10 82       	st	Z, r1
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    1c82:	e2 e3       	ldi	r30, 0x32	; 50
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	80 83       	st	Z, r24
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1c8c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c90:	2d 96       	adiw	r28, 0x0d	; 13
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <DIO_u8GetPortValue+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <DIO_u8GetPortValue+0x8>
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <DIO_u8GetPortValue+0xa>
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    1cb2:	7c 83       	std	Y+4, r23	; 0x04
    1cb4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	84 30       	cpi	r24, 0x04	; 4
    1cbe:	08 f0       	brcs	.+2      	; 0x1cc2 <DIO_u8GetPortValue+0x20>
    1cc0:	3f c0       	rjmp	.+126    	; 0x1d40 <DIO_u8GetPortValue+0x9e>
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	d9 f1       	breq	.+118    	; 0x1d40 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3e 83       	std	Y+6, r19	; 0x06
    1cd2:	2d 83       	std	Y+5, r18	; 0x05
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	e1 f0       	breq	.+56     	; 0x1d16 <DIO_u8GetPortValue+0x74>
    1cde:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <DIO_u8GetPortValue+0x50>
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <DIO_u8GetPortValue+0x66>
    1cf0:	28 c0       	rjmp	.+80     	; 0x1d42 <DIO_u8GetPortValue+0xa0>
    1cf2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	a1 f0       	breq	.+40     	; 0x1d24 <DIO_u8GetPortValue+0x82>
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	b1 f0       	breq	.+44     	; 0x1d32 <DIO_u8GetPortValue+0x90>
    1d06:	1d c0       	rjmp	.+58     	; 0x1d42 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1d08:	e9 e3       	ldi	r30, 0x39	; 57
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d10:	fc 81       	ldd	r31, Y+4	; 0x04
    1d12:	80 83       	st	Z, r24
    1d14:	16 c0       	rjmp	.+44     	; 0x1d42 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1d16:	e6 e3       	ldi	r30, 0x36	; 54
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d20:	80 83       	st	Z, r24
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1d24:	e3 e3       	ldi	r30, 0x33	; 51
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2e:	80 83       	st	Z, r24
    1d30:	08 c0       	rjmp	.+16     	; 0x1d42 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1d32:	e0 e3       	ldi	r30, 0x30	; 48
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3c:	80 83       	st	Z, r24
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1d40:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d44:	26 96       	adiw	r28, 0x06	; 6
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    1d56:	8f 92       	push	r8
    1d58:	af 92       	push	r10
    1d5a:	cf 92       	push	r12
    1d5c:	ef 92       	push	r14
    1d5e:	0f 93       	push	r16
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	2c 97       	sbiw	r28, 0x0c	; 12
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	6a 83       	std	Y+2, r22	; 0x02
    1d78:	4b 83       	std	Y+3, r20	; 0x03
    1d7a:	2c 83       	std	Y+4, r18	; 0x04
    1d7c:	0d 83       	std	Y+5, r16	; 0x05
    1d7e:	ee 82       	std	Y+6, r14	; 0x06
    1d80:	cf 82       	std	Y+7, r12	; 0x07
    1d82:	a8 86       	std	Y+8, r10	; 0x08
    1d84:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	3b 87       	std	Y+11, r19	; 0x0b
    1d8e:	2a 87       	std	Y+10, r18	; 0x0a
    1d90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d92:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	91 05       	cpc	r25, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <DIO_u8SetValueToAllPins+0x46>
    1d9a:	a8 c0       	rjmp	.+336    	; 0x1eec <DIO_u8SetValueToAllPins+0x196>
    1d9c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d9e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1da0:	22 30       	cpi	r18, 0x02	; 2
    1da2:	31 05       	cpc	r19, r1
    1da4:	2c f4       	brge	.+10     	; 0x1db0 <DIO_u8SetValueToAllPins+0x5a>
    1da6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	71 f0       	breq	.+28     	; 0x1dca <DIO_u8SetValueToAllPins+0x74>
    1dae:	50 c2       	rjmp	.+1184   	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
    1db0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1db2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <DIO_u8SetValueToAllPins+0x66>
    1dba:	29 c1       	rjmp	.+594    	; 0x200e <DIO_u8SetValueToAllPins+0x2b8>
    1dbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc0:	83 30       	cpi	r24, 0x03	; 3
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <DIO_u8SetValueToAllPins+0x72>
    1dc6:	b4 c1       	rjmp	.+872    	; 0x2130 <DIO_u8SetValueToAllPins+0x3da>
    1dc8:	43 c2       	rjmp	.+1158   	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	41 f4       	brne	.+16     	; 0x1de0 <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    1dd0:	ab e3       	ldi	r26, 0x3B	; 59
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	eb e3       	ldi	r30, 0x3B	; 59
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	81 60       	ori	r24, 0x01	; 1
    1ddc:	8c 93       	st	X, r24
    1dde:	07 c0       	rjmp	.+14     	; 0x1dee <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    1de0:	ab e3       	ldi	r26, 0x3B	; 59
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	eb e3       	ldi	r30, 0x3B	; 59
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8e 7f       	andi	r24, 0xFE	; 254
    1dec:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	41 f4       	brne	.+16     	; 0x1e04 <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    1df4:	ab e3       	ldi	r26, 0x3B	; 59
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	eb e3       	ldi	r30, 0x3B	; 59
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	82 60       	ori	r24, 0x02	; 2
    1e00:	8c 93       	st	X, r24
    1e02:	07 c0       	rjmp	.+14     	; 0x1e12 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    1e04:	ab e3       	ldi	r26, 0x3B	; 59
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	eb e3       	ldi	r30, 0x3B	; 59
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8d 7f       	andi	r24, 0xFD	; 253
    1e10:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	81 30       	cpi	r24, 0x01	; 1
    1e16:	41 f4       	brne	.+16     	; 0x1e28 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1e18:	ab e3       	ldi	r26, 0x3B	; 59
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	eb e3       	ldi	r30, 0x3B	; 59
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	84 60       	ori	r24, 0x04	; 4
    1e24:	8c 93       	st	X, r24
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1e28:	ab e3       	ldi	r26, 0x3B	; 59
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	eb e3       	ldi	r30, 0x3B	; 59
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	8b 7f       	andi	r24, 0xFB	; 251
    1e34:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	81 30       	cpi	r24, 0x01	; 1
    1e3a:	41 f4       	brne	.+16     	; 0x1e4c <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    1e3c:	ab e3       	ldi	r26, 0x3B	; 59
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	eb e3       	ldi	r30, 0x3B	; 59
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	88 60       	ori	r24, 0x08	; 8
    1e48:	8c 93       	st	X, r24
    1e4a:	07 c0       	rjmp	.+14     	; 0x1e5a <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    1e4c:	ab e3       	ldi	r26, 0x3B	; 59
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	eb e3       	ldi	r30, 0x3B	; 59
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	87 7f       	andi	r24, 0xF7	; 247
    1e58:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	41 f4       	brne	.+16     	; 0x1e70 <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    1e60:	ab e3       	ldi	r26, 0x3B	; 59
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	eb e3       	ldi	r30, 0x3B	; 59
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 61       	ori	r24, 0x10	; 16
    1e6c:	8c 93       	st	X, r24
    1e6e:	07 c0       	rjmp	.+14     	; 0x1e7e <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    1e70:	ab e3       	ldi	r26, 0x3B	; 59
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	eb e3       	ldi	r30, 0x3B	; 59
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 7e       	andi	r24, 0xEF	; 239
    1e7c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	41 f4       	brne	.+16     	; 0x1e94 <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1e84:	ab e3       	ldi	r26, 0x3B	; 59
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	eb e3       	ldi	r30, 0x3B	; 59
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	80 62       	ori	r24, 0x20	; 32
    1e90:	8c 93       	st	X, r24
    1e92:	07 c0       	rjmp	.+14     	; 0x1ea2 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1e94:	ab e3       	ldi	r26, 0x3B	; 59
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	eb e3       	ldi	r30, 0x3B	; 59
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ea0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1ea2:	88 85       	ldd	r24, Y+8	; 0x08
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	41 f4       	brne	.+16     	; 0x1eb8 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    1ea8:	ab e3       	ldi	r26, 0x3B	; 59
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	eb e3       	ldi	r30, 0x3B	; 59
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	80 64       	ori	r24, 0x40	; 64
    1eb4:	8c 93       	st	X, r24
    1eb6:	07 c0       	rjmp	.+14     	; 0x1ec6 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    1eb8:	ab e3       	ldi	r26, 0x3B	; 59
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	eb e3       	ldi	r30, 0x3B	; 59
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	8f 7b       	andi	r24, 0xBF	; 191
    1ec4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1ec6:	89 85       	ldd	r24, Y+9	; 0x09
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	41 f4       	brne	.+16     	; 0x1edc <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    1ecc:	ab e3       	ldi	r26, 0x3B	; 59
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	eb e3       	ldi	r30, 0x3B	; 59
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 68       	ori	r24, 0x80	; 128
    1ed8:	8c 93       	st	X, r24
    1eda:	ba c1       	rjmp	.+884    	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    1edc:	ab e3       	ldi	r26, 0x3B	; 59
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	eb e3       	ldi	r30, 0x3B	; 59
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 77       	andi	r24, 0x7F	; 127
    1ee8:	8c 93       	st	X, r24
    1eea:	b2 c1       	rjmp	.+868    	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	41 f4       	brne	.+16     	; 0x1f02 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    1ef2:	a8 e3       	ldi	r26, 0x38	; 56
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e8 e3       	ldi	r30, 0x38	; 56
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	81 60       	ori	r24, 0x01	; 1
    1efe:	8c 93       	st	X, r24
    1f00:	07 c0       	rjmp	.+14     	; 0x1f10 <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    1f02:	a8 e3       	ldi	r26, 0x38	; 56
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e8 e3       	ldi	r30, 0x38	; 56
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8e 7f       	andi	r24, 0xFE	; 254
    1f0e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	81 30       	cpi	r24, 0x01	; 1
    1f14:	41 f4       	brne	.+16     	; 0x1f26 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1f16:	a8 e3       	ldi	r26, 0x38	; 56
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e8 e3       	ldi	r30, 0x38	; 56
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	82 60       	ori	r24, 0x02	; 2
    1f22:	8c 93       	st	X, r24
    1f24:	07 c0       	rjmp	.+14     	; 0x1f34 <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1f26:	a8 e3       	ldi	r26, 0x38	; 56
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e8 e3       	ldi	r30, 0x38	; 56
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	8d 7f       	andi	r24, 0xFD	; 253
    1f32:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1f34:	8c 81       	ldd	r24, Y+4	; 0x04
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	41 f4       	brne	.+16     	; 0x1f4a <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    1f3a:	a8 e3       	ldi	r26, 0x38	; 56
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e8 e3       	ldi	r30, 0x38	; 56
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	84 60       	ori	r24, 0x04	; 4
    1f46:	8c 93       	st	X, r24
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    1f4a:	a8 e3       	ldi	r26, 0x38	; 56
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e8 e3       	ldi	r30, 0x38	; 56
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	8b 7f       	andi	r24, 0xFB	; 251
    1f56:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	41 f4       	brne	.+16     	; 0x1f6e <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    1f5e:	a8 e3       	ldi	r26, 0x38	; 56
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e8 e3       	ldi	r30, 0x38	; 56
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	88 60       	ori	r24, 0x08	; 8
    1f6a:	8c 93       	st	X, r24
    1f6c:	07 c0       	rjmp	.+14     	; 0x1f7c <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    1f6e:	a8 e3       	ldi	r26, 0x38	; 56
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e8 e3       	ldi	r30, 0x38	; 56
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	87 7f       	andi	r24, 0xF7	; 247
    1f7a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	41 f4       	brne	.+16     	; 0x1f92 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    1f82:	a8 e3       	ldi	r26, 0x38	; 56
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e8 e3       	ldi	r30, 0x38	; 56
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 61       	ori	r24, 0x10	; 16
    1f8e:	8c 93       	st	X, r24
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    1f92:	a8 e3       	ldi	r26, 0x38	; 56
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e8 e3       	ldi	r30, 0x38	; 56
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8f 7e       	andi	r24, 0xEF	; 239
    1f9e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa2:	81 30       	cpi	r24, 0x01	; 1
    1fa4:	41 f4       	brne	.+16     	; 0x1fb6 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    1fa6:	a8 e3       	ldi	r26, 0x38	; 56
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e8 e3       	ldi	r30, 0x38	; 56
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	80 62       	ori	r24, 0x20	; 32
    1fb2:	8c 93       	st	X, r24
    1fb4:	07 c0       	rjmp	.+14     	; 0x1fc4 <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    1fb6:	a8 e3       	ldi	r26, 0x38	; 56
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e8 e3       	ldi	r30, 0x38	; 56
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8f 7d       	andi	r24, 0xDF	; 223
    1fc2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1fc4:	88 85       	ldd	r24, Y+8	; 0x08
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	41 f4       	brne	.+16     	; 0x1fda <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    1fca:	a8 e3       	ldi	r26, 0x38	; 56
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e8 e3       	ldi	r30, 0x38	; 56
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 64       	ori	r24, 0x40	; 64
    1fd6:	8c 93       	st	X, r24
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    1fda:	a8 e3       	ldi	r26, 0x38	; 56
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e8 e3       	ldi	r30, 0x38	; 56
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8f 7b       	andi	r24, 0xBF	; 191
    1fe6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1fe8:	89 85       	ldd	r24, Y+9	; 0x09
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	41 f4       	brne	.+16     	; 0x1ffe <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    1fee:	a8 e3       	ldi	r26, 0x38	; 56
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e8 e3       	ldi	r30, 0x38	; 56
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	80 68       	ori	r24, 0x80	; 128
    1ffa:	8c 93       	st	X, r24
    1ffc:	29 c1       	rjmp	.+594    	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    1ffe:	a8 e3       	ldi	r26, 0x38	; 56
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e8 e3       	ldi	r30, 0x38	; 56
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8f 77       	andi	r24, 0x7F	; 127
    200a:	8c 93       	st	X, r24
    200c:	21 c1       	rjmp	.+578    	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	41 f4       	brne	.+16     	; 0x2024 <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2014:	a5 e3       	ldi	r26, 0x35	; 53
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e5 e3       	ldi	r30, 0x35	; 53
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	81 60       	ori	r24, 0x01	; 1
    2020:	8c 93       	st	X, r24
    2022:	07 c0       	rjmp	.+14     	; 0x2032 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2024:	a5 e3       	ldi	r26, 0x35	; 53
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e5 e3       	ldi	r30, 0x35	; 53
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8e 7f       	andi	r24, 0xFE	; 254
    2030:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	41 f4       	brne	.+16     	; 0x2048 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2038:	a5 e3       	ldi	r26, 0x35	; 53
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e5 e3       	ldi	r30, 0x35	; 53
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	82 60       	ori	r24, 0x02	; 2
    2044:	8c 93       	st	X, r24
    2046:	07 c0       	rjmp	.+14     	; 0x2056 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2048:	a5 e3       	ldi	r26, 0x35	; 53
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e5 e3       	ldi	r30, 0x35	; 53
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	8d 7f       	andi	r24, 0xFD	; 253
    2054:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	41 f4       	brne	.+16     	; 0x206c <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    205c:	a5 e3       	ldi	r26, 0x35	; 53
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e5 e3       	ldi	r30, 0x35	; 53
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	84 60       	ori	r24, 0x04	; 4
    2068:	8c 93       	st	X, r24
    206a:	07 c0       	rjmp	.+14     	; 0x207a <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    206c:	a5 e3       	ldi	r26, 0x35	; 53
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e5 e3       	ldi	r30, 0x35	; 53
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8b 7f       	andi	r24, 0xFB	; 251
    2078:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	41 f4       	brne	.+16     	; 0x2090 <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    2080:	a5 e3       	ldi	r26, 0x35	; 53
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e5 e3       	ldi	r30, 0x35	; 53
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	88 60       	ori	r24, 0x08	; 8
    208c:	8c 93       	st	X, r24
    208e:	07 c0       	rjmp	.+14     	; 0x209e <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    2090:	a5 e3       	ldi	r26, 0x35	; 53
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e5 e3       	ldi	r30, 0x35	; 53
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	87 7f       	andi	r24, 0xF7	; 247
    209c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    209e:	8e 81       	ldd	r24, Y+6	; 0x06
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	41 f4       	brne	.+16     	; 0x20b4 <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    20a4:	a5 e3       	ldi	r26, 0x35	; 53
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e5 e3       	ldi	r30, 0x35	; 53
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	80 61       	ori	r24, 0x10	; 16
    20b0:	8c 93       	st	X, r24
    20b2:	07 c0       	rjmp	.+14     	; 0x20c2 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    20b4:	a5 e3       	ldi	r26, 0x35	; 53
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e5 e3       	ldi	r30, 0x35	; 53
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8f 7e       	andi	r24, 0xEF	; 239
    20c0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    20c2:	8f 81       	ldd	r24, Y+7	; 0x07
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	41 f4       	brne	.+16     	; 0x20d8 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    20c8:	a5 e3       	ldi	r26, 0x35	; 53
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e3       	ldi	r30, 0x35	; 53
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	80 62       	ori	r24, 0x20	; 32
    20d4:	8c 93       	st	X, r24
    20d6:	07 c0       	rjmp	.+14     	; 0x20e6 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    20d8:	a5 e3       	ldi	r26, 0x35	; 53
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e5 e3       	ldi	r30, 0x35	; 53
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	8f 7d       	andi	r24, 0xDF	; 223
    20e4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    20e6:	88 85       	ldd	r24, Y+8	; 0x08
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	41 f4       	brne	.+16     	; 0x20fc <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    20ec:	a5 e3       	ldi	r26, 0x35	; 53
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e5 e3       	ldi	r30, 0x35	; 53
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	80 64       	ori	r24, 0x40	; 64
    20f8:	8c 93       	st	X, r24
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    20fc:	a5 e3       	ldi	r26, 0x35	; 53
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e3       	ldi	r30, 0x35	; 53
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	8f 7b       	andi	r24, 0xBF	; 191
    2108:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	41 f4       	brne	.+16     	; 0x2120 <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2110:	a5 e3       	ldi	r26, 0x35	; 53
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e5 e3       	ldi	r30, 0x35	; 53
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 68       	ori	r24, 0x80	; 128
    211c:	8c 93       	st	X, r24
    211e:	98 c0       	rjmp	.+304    	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2120:	a5 e3       	ldi	r26, 0x35	; 53
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e5 e3       	ldi	r30, 0x35	; 53
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	8f 77       	andi	r24, 0x7F	; 127
    212c:	8c 93       	st	X, r24
    212e:	90 c0       	rjmp	.+288    	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	41 f4       	brne	.+16     	; 0x2146 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2136:	a2 e3       	ldi	r26, 0x32	; 50
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e2 e3       	ldi	r30, 0x32	; 50
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	81 60       	ori	r24, 0x01	; 1
    2142:	8c 93       	st	X, r24
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2146:	a2 e3       	ldi	r26, 0x32	; 50
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e2 e3       	ldi	r30, 0x32	; 50
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8e 7f       	andi	r24, 0xFE	; 254
    2152:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	41 f4       	brne	.+16     	; 0x216a <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    215a:	a2 e3       	ldi	r26, 0x32	; 50
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e2 e3       	ldi	r30, 0x32	; 50
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	82 60       	ori	r24, 0x02	; 2
    2166:	8c 93       	st	X, r24
    2168:	07 c0       	rjmp	.+14     	; 0x2178 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    216a:	a2 e3       	ldi	r26, 0x32	; 50
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e2 e3       	ldi	r30, 0x32	; 50
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	8d 7f       	andi	r24, 0xFD	; 253
    2176:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	81 30       	cpi	r24, 0x01	; 1
    217c:	41 f4       	brne	.+16     	; 0x218e <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    217e:	a2 e3       	ldi	r26, 0x32	; 50
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e2 e3       	ldi	r30, 0x32	; 50
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	84 60       	ori	r24, 0x04	; 4
    218a:	8c 93       	st	X, r24
    218c:	07 c0       	rjmp	.+14     	; 0x219c <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    218e:	a2 e3       	ldi	r26, 0x32	; 50
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e2 e3       	ldi	r30, 0x32	; 50
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8b 7f       	andi	r24, 0xFB	; 251
    219a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	41 f4       	brne	.+16     	; 0x21b2 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    21a2:	a2 e3       	ldi	r26, 0x32	; 50
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e2 e3       	ldi	r30, 0x32	; 50
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	88 60       	ori	r24, 0x08	; 8
    21ae:	8c 93       	st	X, r24
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    21b2:	a2 e3       	ldi	r26, 0x32	; 50
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e2 e3       	ldi	r30, 0x32	; 50
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	87 7f       	andi	r24, 0xF7	; 247
    21be:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    21c0:	8e 81       	ldd	r24, Y+6	; 0x06
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	41 f4       	brne	.+16     	; 0x21d6 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    21c6:	a2 e3       	ldi	r26, 0x32	; 50
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e2 e3       	ldi	r30, 0x32	; 50
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	80 61       	ori	r24, 0x10	; 16
    21d2:	8c 93       	st	X, r24
    21d4:	07 c0       	rjmp	.+14     	; 0x21e4 <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    21d6:	a2 e3       	ldi	r26, 0x32	; 50
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e2 e3       	ldi	r30, 0x32	; 50
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8f 7e       	andi	r24, 0xEF	; 239
    21e2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    21e4:	8f 81       	ldd	r24, Y+7	; 0x07
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	41 f4       	brne	.+16     	; 0x21fa <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    21ea:	a2 e3       	ldi	r26, 0x32	; 50
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e2 e3       	ldi	r30, 0x32	; 50
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	80 62       	ori	r24, 0x20	; 32
    21f6:	8c 93       	st	X, r24
    21f8:	07 c0       	rjmp	.+14     	; 0x2208 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    21fa:	a2 e3       	ldi	r26, 0x32	; 50
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e2 e3       	ldi	r30, 0x32	; 50
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	8f 7d       	andi	r24, 0xDF	; 223
    2206:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    2208:	88 85       	ldd	r24, Y+8	; 0x08
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	41 f4       	brne	.+16     	; 0x221e <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    220e:	a2 e3       	ldi	r26, 0x32	; 50
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e2 e3       	ldi	r30, 0x32	; 50
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 64       	ori	r24, 0x40	; 64
    221a:	8c 93       	st	X, r24
    221c:	07 c0       	rjmp	.+14     	; 0x222c <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    221e:	a2 e3       	ldi	r26, 0x32	; 50
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e2 e3       	ldi	r30, 0x32	; 50
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	8f 7b       	andi	r24, 0xBF	; 191
    222a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	41 f4       	brne	.+16     	; 0x2242 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2232:	a2 e3       	ldi	r26, 0x32	; 50
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e2 e3       	ldi	r30, 0x32	; 50
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	80 68       	ori	r24, 0x80	; 128
    223e:	8c 93       	st	X, r24
    2240:	07 c0       	rjmp	.+14     	; 0x2250 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2242:	a2 e3       	ldi	r26, 0x32	; 50
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e2 e3       	ldi	r30, 0x32	; 50
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8f 77       	andi	r24, 0x7F	; 127
    224e:	8c 93       	st	X, r24
		}
		break;
	}
}
    2250:	2c 96       	adiw	r28, 0x0c	; 12
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	0f 91       	pop	r16
    2262:	ef 90       	pop	r14
    2264:	cf 90       	pop	r12
    2266:	af 90       	pop	r10
    2268:	8f 90       	pop	r8
    226a:	08 95       	ret

0000226c <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    227e:	83 e0       	ldi	r24, 0x03	; 3
    2280:	61 e0       	ldi	r22, 0x01	; 1
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2288:	83 e0       	ldi	r24, 0x03	; 3
    228a:	62 e0       	ldi	r22, 0x02	; 2
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2292:	83 e0       	ldi	r24, 0x03	; 3
    2294:	63 e0       	ldi	r22, 0x03	; 3
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
}
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <ActivatePins1+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <ActivatePins1+0x8>
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	6a 83       	std	Y+2, r22	; 0x02
    22b2:	4b 83       	std	Y+3, r20	; 0x03
    22b4:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    22b6:	83 e0       	ldi	r24, 0x03	; 3
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	49 81       	ldd	r20, Y+1	; 0x01
    22bc:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	4a 81       	ldd	r20, Y+2	; 0x02
    22c6:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    22ca:	83 e0       	ldi	r24, 0x03	; 3
    22cc:	62 e0       	ldi	r22, 0x02	; 2
    22ce:	4b 81       	ldd	r20, Y+3	; 0x03
    22d0:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    22d4:	83 e0       	ldi	r24, 0x03	; 3
    22d6:	63 e0       	ldi	r22, 0x03	; 3
    22d8:	4c 81       	ldd	r20, Y+4	; 0x04
    22da:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <ActivatePins2+0x6>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <ActivatePins2+0x8>
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	6a 83       	std	Y+2, r22	; 0x02
    22fc:	4b 83       	std	Y+3, r20	; 0x03
    22fe:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2300:	83 e0       	ldi	r24, 0x03	; 3
    2302:	63 e0       	ldi	r22, 0x03	; 3
    2304:	4c 81       	ldd	r20, Y+4	; 0x04
    2306:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	62 e0       	ldi	r22, 0x02	; 2
    230e:	4b 81       	ldd	r20, Y+3	; 0x03
    2310:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2314:	83 e0       	ldi	r24, 0x03	; 3
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	4a 81       	ldd	r20, Y+2	; 0x02
    231a:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    231e:	83 e0       	ldi	r24, 0x03	; 3
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	49 81       	ldd	r20, Y+1	; 0x01
    2324:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	29 97       	sbiw	r28, 0x09	; 9
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2350:	29 81       	ldd	r18, Y+1	; 0x01
    2352:	3a 81       	ldd	r19, Y+2	; 0x02
    2354:	39 87       	std	Y+9, r19	; 0x09
    2356:	28 87       	std	Y+8, r18	; 0x08
    2358:	88 85       	ldd	r24, Y+8	; 0x08
    235a:	99 85       	ldd	r25, Y+9	; 0x09
    235c:	8a 35       	cpi	r24, 0x5A	; 90
    235e:	91 05       	cpc	r25, r1
    2360:	31 f0       	breq	.+12     	; 0x236e <SelectStepAngle+0x38>
    2362:	28 85       	ldd	r18, Y+8	; 0x08
    2364:	39 85       	ldd	r19, Y+9	; 0x09
    2366:	24 3b       	cpi	r18, 0xB4	; 180
    2368:	31 05       	cpc	r19, r1
    236a:	f1 f0       	breq	.+60     	; 0x23a8 <SelectStepAngle+0x72>
    236c:	39 c0       	rjmp	.+114    	; 0x23e0 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	3f 83       	std	Y+7, r19	; 0x07
    2376:	2e 83       	std	Y+6, r18	; 0x06
    2378:	8e 81       	ldd	r24, Y+6	; 0x06
    237a:	9f 81       	ldd	r25, Y+7	; 0x07
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	31 f0       	breq	.+12     	; 0x238c <SelectStepAngle+0x56>
    2380:	2e 81       	ldd	r18, Y+6	; 0x06
    2382:	3f 81       	ldd	r19, Y+7	; 0x07
    2384:	21 30       	cpi	r18, 0x01	; 1
    2386:	31 05       	cpc	r19, r1
    2388:	41 f0       	breq	.+16     	; 0x239a <SelectStepAngle+0x64>
    238a:	2a c0       	rjmp	.+84     	; 0x23e0 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	21 e0       	ldi	r18, 0x01	; 1
    2394:	0e 94 51 11 	call	0x22a2	; 0x22a2 <ActivatePins1>
    2398:	23 c0       	rjmp	.+70     	; 0x23e0 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	61 e0       	ldi	r22, 0x01	; 1
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	0e 94 76 11 	call	0x22ec	; 0x22ec <ActivatePins2>
    23a6:	1c c0       	rjmp	.+56     	; 0x23e0 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	3d 83       	std	Y+5, r19	; 0x05
    23b0:	2c 83       	std	Y+4, r18	; 0x04
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	9d 81       	ldd	r25, Y+5	; 0x05
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	31 f0       	breq	.+12     	; 0x23c6 <SelectStepAngle+0x90>
    23ba:	2c 81       	ldd	r18, Y+4	; 0x04
    23bc:	3d 81       	ldd	r19, Y+5	; 0x05
    23be:	21 30       	cpi	r18, 0x01	; 1
    23c0:	31 05       	cpc	r19, r1
    23c2:	41 f0       	breq	.+16     	; 0x23d4 <SelectStepAngle+0x9e>
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	61 e0       	ldi	r22, 0x01	; 1
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	0e 94 76 11 	call	0x22ec	; 0x22ec <ActivatePins2>
    23d2:	06 c0       	rjmp	.+12     	; 0x23e0 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	61 e0       	ldi	r22, 0x01	; 1
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	0e 94 51 11 	call	0x22a2	; 0x22a2 <ActivatePins1>
						break;
				}
				break;
	}
}
    23e0:	29 96       	adiw	r28, 0x09	; 9
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	e9 97       	sbiw	r28, 0x39	; 57
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2408:	83 e0       	ldi	r24, 0x03	; 3
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	64 e0       	ldi	r22, 0x04	; 4
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_setPinValue>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e8       	ldi	r26, 0x80	; 128
    241e:	bf e3       	ldi	r27, 0x3F	; 63
    2420:	8d ab       	std	Y+53, r24	; 0x35
    2422:	9e ab       	std	Y+54, r25	; 0x36
    2424:	af ab       	std	Y+55, r26	; 0x37
    2426:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	6d a9       	ldd	r22, Y+53	; 0x35
    242a:	7e a9       	ldd	r23, Y+54	; 0x36
    242c:	8f a9       	ldd	r24, Y+55	; 0x37
    242e:	98 ad       	ldd	r25, Y+56	; 0x38
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a e7       	ldi	r20, 0x7A	; 122
    2436:	55 e4       	ldi	r21, 0x45	; 69
    2438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	89 ab       	std	Y+49, r24	; 0x31
    2442:	9a ab       	std	Y+50, r25	; 0x32
    2444:	ab ab       	std	Y+51, r26	; 0x33
    2446:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2448:	69 a9       	ldd	r22, Y+49	; 0x31
    244a:	7a a9       	ldd	r23, Y+50	; 0x32
    244c:	8b a9       	ldd	r24, Y+51	; 0x33
    244e:	9c a9       	ldd	r25, Y+52	; 0x34
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <LCD_sendCommand+0x78>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	98 ab       	std	Y+48, r25	; 0x30
    2466:	8f a7       	std	Y+47, r24	; 0x2f
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    246a:	69 a9       	ldd	r22, Y+49	; 0x31
    246c:	7a a9       	ldd	r23, Y+50	; 0x32
    246e:	8b a9       	ldd	r24, Y+51	; 0x33
    2470:	9c a9       	ldd	r25, Y+52	; 0x34
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	6d a9       	ldd	r22, Y+53	; 0x35
    2484:	7e a9       	ldd	r23, Y+54	; 0x36
    2486:	8f a9       	ldd	r24, Y+55	; 0x37
    2488:	98 ad       	ldd	r25, Y+56	; 0x38
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	98 ab       	std	Y+48, r25	; 0x30
    24a8:	8f a7       	std	Y+47, r24	; 0x2f
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <LCD_sendCommand+0xd8>
    24ac:	80 e9       	ldi	r24, 0x90	; 144
    24ae:	91 e0       	ldi	r25, 0x01	; 1
    24b0:	9e a7       	std	Y+46, r25	; 0x2e
    24b2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_sendCommand+0xc6>
    24bc:	9e a7       	std	Y+46, r25	; 0x2e
    24be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c2:	98 a9       	ldd	r25, Y+48	; 0x30
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	98 ab       	std	Y+48, r25	; 0x30
    24c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    24cc:	98 a9       	ldd	r25, Y+48	; 0x30
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <LCD_sendCommand+0xba>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	69 a9       	ldd	r22, Y+49	; 0x31
    24d6:	7a a9       	ldd	r23, Y+50	; 0x32
    24d8:	8b a9       	ldd	r24, Y+51	; 0x33
    24da:	9c a9       	ldd	r25, Y+52	; 0x34
    24dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	98 ab       	std	Y+48, r25	; 0x30
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
    24e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ea:	98 a9       	ldd	r25, Y+48	; 0x30
    24ec:	9c a7       	std	Y+44, r25	; 0x2c
    24ee:	8b a7       	std	Y+43, r24	; 0x2b
    24f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_sendCommand+0x102>
    24f8:	9c a7       	std	Y+44, r25	; 0x2c
    24fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    24fc:	83 e0       	ldi	r24, 0x03	; 3
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	65 e0       	ldi	r22, 0x05	; 5
    2502:	70 e0       	ldi	r23, 0x00	; 0
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_setPinValue>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 e8       	ldi	r26, 0x80	; 128
    2512:	bf e3       	ldi	r27, 0x3F	; 63
    2514:	8f a3       	std	Y+39, r24	; 0x27
    2516:	98 a7       	std	Y+40, r25	; 0x28
    2518:	a9 a7       	std	Y+41, r26	; 0x29
    251a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6f a1       	ldd	r22, Y+39	; 0x27
    251e:	78 a5       	ldd	r23, Y+40	; 0x28
    2520:	89 a5       	ldd	r24, Y+41	; 0x29
    2522:	9a a5       	ldd	r25, Y+42	; 0x2a
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a e7       	ldi	r20, 0x7A	; 122
    252a:	55 e4       	ldi	r21, 0x45	; 69
    252c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8b a3       	std	Y+35, r24	; 0x23
    2536:	9c a3       	std	Y+36, r25	; 0x24
    2538:	ad a3       	std	Y+37, r26	; 0x25
    253a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    253c:	6b a1       	ldd	r22, Y+35	; 0x23
    253e:	7c a1       	ldd	r23, Y+36	; 0x24
    2540:	8d a1       	ldd	r24, Y+37	; 0x25
    2542:	9e a1       	ldd	r25, Y+38	; 0x26
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <LCD_sendCommand+0x16c>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9a a3       	std	Y+34, r25	; 0x22
    255a:	89 a3       	std	Y+33, r24	; 0x21
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    255e:	6b a1       	ldd	r22, Y+35	; 0x23
    2560:	7c a1       	ldd	r23, Y+36	; 0x24
    2562:	8d a1       	ldd	r24, Y+37	; 0x25
    2564:	9e a1       	ldd	r25, Y+38	; 0x26
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6f a1       	ldd	r22, Y+39	; 0x27
    2578:	78 a5       	ldd	r23, Y+40	; 0x28
    257a:	89 a5       	ldd	r24, Y+41	; 0x29
    257c:	9a a5       	ldd	r25, Y+42	; 0x2a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9a a3       	std	Y+34, r25	; 0x22
    259c:	89 a3       	std	Y+33, r24	; 0x21
    259e:	0f c0       	rjmp	.+30     	; 0x25be <LCD_sendCommand+0x1cc>
    25a0:	80 e9       	ldi	r24, 0x90	; 144
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	98 a3       	std	Y+32, r25	; 0x20
    25a6:	8f 8f       	std	Y+31, r24	; 0x1f
    25a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25aa:	98 a1       	ldd	r25, Y+32	; 0x20
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <LCD_sendCommand+0x1ba>
    25b0:	98 a3       	std	Y+32, r25	; 0x20
    25b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	89 a1       	ldd	r24, Y+33	; 0x21
    25b6:	9a a1       	ldd	r25, Y+34	; 0x22
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9a a3       	std	Y+34, r25	; 0x22
    25bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	89 a1       	ldd	r24, Y+33	; 0x21
    25c0:	9a a1       	ldd	r25, Y+34	; 0x22
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <LCD_sendCommand+0x1ae>
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ca:	7c a1       	ldd	r23, Y+36	; 0x24
    25cc:	8d a1       	ldd	r24, Y+37	; 0x25
    25ce:	9e a1       	ldd	r25, Y+38	; 0x26
    25d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9a a3       	std	Y+34, r25	; 0x22
    25da:	89 a3       	std	Y+33, r24	; 0x21
    25dc:	89 a1       	ldd	r24, Y+33	; 0x21
    25de:	9a a1       	ldd	r25, Y+34	; 0x22
    25e0:	9e 8f       	std	Y+30, r25	; 0x1e
    25e2:	8d 8f       	std	Y+29, r24	; 0x1d
    25e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_sendCommand+0x1f6>
    25ec:	9e 8f       	std	Y+30, r25	; 0x1e
    25ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    25f0:	89 ad       	ldd	r24, Y+57	; 0x39
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	b9 01       	movw	r22, r18
    25fc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_setPortValue>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	89 8f       	std	Y+25, r24	; 0x19
    260a:	9a 8f       	std	Y+26, r25	; 0x1a
    260c:	ab 8f       	std	Y+27, r26	; 0x1b
    260e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	69 8d       	ldd	r22, Y+25	; 0x19
    2612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a e7       	ldi	r20, 0x7A	; 122
    261e:	55 e4       	ldi	r21, 0x45	; 69
    2620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8d 8b       	std	Y+21, r24	; 0x15
    262a:	9e 8b       	std	Y+22, r25	; 0x16
    262c:	af 8b       	std	Y+23, r26	; 0x17
    262e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2630:	6d 89       	ldd	r22, Y+21	; 0x15
    2632:	7e 89       	ldd	r23, Y+22	; 0x16
    2634:	8f 89       	ldd	r24, Y+23	; 0x17
    2636:	98 8d       	ldd	r25, Y+24	; 0x18
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_sendCommand+0x260>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    2652:	6d 89       	ldd	r22, Y+21	; 0x15
    2654:	7e 89       	ldd	r23, Y+22	; 0x16
    2656:	8f 89       	ldd	r24, Y+23	; 0x17
    2658:	98 8d       	ldd	r25, Y+24	; 0x18
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	69 8d       	ldd	r22, Y+25	; 0x19
    266c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9c 8b       	std	Y+20, r25	; 0x14
    2690:	8b 8b       	std	Y+19, r24	; 0x13
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_sendCommand+0x2c0>
    2694:	80 e9       	ldi	r24, 0x90	; 144
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	9a 8b       	std	Y+18, r25	; 0x12
    269a:	89 8b       	std	Y+17, r24	; 0x11
    269c:	89 89       	ldd	r24, Y+17	; 0x11
    269e:	9a 89       	ldd	r25, Y+18	; 0x12
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_sendCommand+0x2ae>
    26a4:	9a 8b       	std	Y+18, r25	; 0x12
    26a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8b 89       	ldd	r24, Y+19	; 0x13
    26aa:	9c 89       	ldd	r25, Y+20	; 0x14
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_sendCommand+0x2a2>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9c 8b       	std	Y+20, r25	; 0x14
    26ce:	8b 8b       	std	Y+19, r24	; 0x13
    26d0:	8b 89       	ldd	r24, Y+19	; 0x13
    26d2:	9c 89       	ldd	r25, Y+20	; 0x14
    26d4:	98 8b       	std	Y+16, r25	; 0x10
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
    26d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26da:	98 89       	ldd	r25, Y+16	; 0x10
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_sendCommand+0x2ea>
    26e0:	98 8b       	std	Y+16, r25	; 0x10
    26e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	65 e0       	ldi	r22, 0x05	; 5
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	50 e0       	ldi	r21, 0x00	; 0
    26f0:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_setPinValue>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e8       	ldi	r26, 0x80	; 128
    26fa:	bf e3       	ldi	r27, 0x3F	; 63
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
    26fe:	9c 87       	std	Y+12, r25	; 0x0c
    2700:	ad 87       	std	Y+13, r26	; 0x0d
    2702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a e7       	ldi	r20, 0x7A	; 122
    2712:	55 e4       	ldi	r21, 0x45	; 69
    2714:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8f 83       	std	Y+7, r24	; 0x07
    271e:	98 87       	std	Y+8, r25	; 0x08
    2720:	a9 87       	std	Y+9, r26	; 0x09
    2722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <LCD_sendCommand+0x354>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2760:	7c 85       	ldd	r23, Y+12	; 0x0c
    2762:	8d 85       	ldd	r24, Y+13	; 0x0d
    2764:	9e 85       	ldd	r25, Y+14	; 0x0e
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <LCD_sendCommand+0x3b4>
    2788:	80 e9       	ldi	r24, 0x90	; 144
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_sendCommand+0x3a2>
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <LCD_sendCommand+0x396>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <LCD_sendCommand+0x3de>
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    27d8:	e9 96       	adiw	r28, 0x39	; 57
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	e9 97       	sbiw	r28, 0x39	; 57
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2800:	83 e0       	ldi	r24, 0x03	; 3
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	64 e0       	ldi	r22, 0x04	; 4
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_setPinValue>
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e8       	ldi	r26, 0x80	; 128
    2816:	bf e3       	ldi	r27, 0x3F	; 63
    2818:	8d ab       	std	Y+53, r24	; 0x35
    281a:	9e ab       	std	Y+54, r25	; 0x36
    281c:	af ab       	std	Y+55, r26	; 0x37
    281e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	6d a9       	ldd	r22, Y+53	; 0x35
    2822:	7e a9       	ldd	r23, Y+54	; 0x36
    2824:	8f a9       	ldd	r24, Y+55	; 0x37
    2826:	98 ad       	ldd	r25, Y+56	; 0x38
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	4a e7       	ldi	r20, 0x7A	; 122
    282e:	55 e4       	ldi	r21, 0x45	; 69
    2830:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	89 ab       	std	Y+49, r24	; 0x31
    283a:	9a ab       	std	Y+50, r25	; 0x32
    283c:	ab ab       	std	Y+51, r26	; 0x33
    283e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2840:	69 a9       	ldd	r22, Y+49	; 0x31
    2842:	7a a9       	ldd	r23, Y+50	; 0x32
    2844:	8b a9       	ldd	r24, Y+51	; 0x33
    2846:	9c a9       	ldd	r25, Y+52	; 0x34
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e8       	ldi	r20, 0x80	; 128
    284e:	5f e3       	ldi	r21, 0x3F	; 63
    2850:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2854:	88 23       	and	r24, r24
    2856:	2c f4       	brge	.+10     	; 0x2862 <LCD_displayCharacter+0x78>
		__ticks = 1;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	98 ab       	std	Y+48, r25	; 0x30
    285e:	8f a7       	std	Y+47, r24	; 0x2f
    2860:	3f c0       	rjmp	.+126    	; 0x28e0 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    2862:	69 a9       	ldd	r22, Y+49	; 0x31
    2864:	7a a9       	ldd	r23, Y+50	; 0x32
    2866:	8b a9       	ldd	r24, Y+51	; 0x33
    2868:	9c a9       	ldd	r25, Y+52	; 0x34
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	3f ef       	ldi	r19, 0xFF	; 255
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	57 e4       	ldi	r21, 0x47	; 71
    2872:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2876:	18 16       	cp	r1, r24
    2878:	4c f5       	brge	.+82     	; 0x28cc <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287a:	6d a9       	ldd	r22, Y+53	; 0x35
    287c:	7e a9       	ldd	r23, Y+54	; 0x36
    287e:	8f a9       	ldd	r24, Y+55	; 0x37
    2880:	98 ad       	ldd	r25, Y+56	; 0x38
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	98 ab       	std	Y+48, r25	; 0x30
    28a0:	8f a7       	std	Y+47, r24	; 0x2f
    28a2:	0f c0       	rjmp	.+30     	; 0x28c2 <LCD_displayCharacter+0xd8>
    28a4:	80 e9       	ldi	r24, 0x90	; 144
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	9e a7       	std	Y+46, r25	; 0x2e
    28aa:	8d a7       	std	Y+45, r24	; 0x2d
    28ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    28ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <LCD_displayCharacter+0xc6>
    28b4:	9e a7       	std	Y+46, r25	; 0x2e
    28b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ba:	98 a9       	ldd	r25, Y+48	; 0x30
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	98 ab       	std	Y+48, r25	; 0x30
    28c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c4:	98 a9       	ldd	r25, Y+48	; 0x30
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <LCD_displayCharacter+0xba>
    28ca:	14 c0       	rjmp	.+40     	; 0x28f4 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	69 a9       	ldd	r22, Y+49	; 0x31
    28ce:	7a a9       	ldd	r23, Y+50	; 0x32
    28d0:	8b a9       	ldd	r24, Y+51	; 0x33
    28d2:	9c a9       	ldd	r25, Y+52	; 0x34
    28d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	98 ab       	std	Y+48, r25	; 0x30
    28de:	8f a7       	std	Y+47, r24	; 0x2f
    28e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e2:	98 a9       	ldd	r25, Y+48	; 0x30
    28e4:	9c a7       	std	Y+44, r25	; 0x2c
    28e6:	8b a7       	std	Y+43, r24	; 0x2b
    28e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_displayCharacter+0x102>
    28f0:	9c a7       	std	Y+44, r25	; 0x2c
    28f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    28f4:	83 e0       	ldi	r24, 0x03	; 3
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	65 e0       	ldi	r22, 0x05	; 5
    28fa:	70 e0       	ldi	r23, 0x00	; 0
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_setPinValue>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e8       	ldi	r26, 0x80	; 128
    290a:	bf e3       	ldi	r27, 0x3F	; 63
    290c:	8f a3       	std	Y+39, r24	; 0x27
    290e:	98 a7       	std	Y+40, r25	; 0x28
    2910:	a9 a7       	std	Y+41, r26	; 0x29
    2912:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2914:	6f a1       	ldd	r22, Y+39	; 0x27
    2916:	78 a5       	ldd	r23, Y+40	; 0x28
    2918:	89 a5       	ldd	r24, Y+41	; 0x29
    291a:	9a a5       	ldd	r25, Y+42	; 0x2a
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4a e7       	ldi	r20, 0x7A	; 122
    2922:	55 e4       	ldi	r21, 0x45	; 69
    2924:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	8b a3       	std	Y+35, r24	; 0x23
    292e:	9c a3       	std	Y+36, r25	; 0x24
    2930:	ad a3       	std	Y+37, r26	; 0x25
    2932:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2934:	6b a1       	ldd	r22, Y+35	; 0x23
    2936:	7c a1       	ldd	r23, Y+36	; 0x24
    2938:	8d a1       	ldd	r24, Y+37	; 0x25
    293a:	9e a1       	ldd	r25, Y+38	; 0x26
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9a a3       	std	Y+34, r25	; 0x22
    2952:	89 a3       	std	Y+33, r24	; 0x21
    2954:	3f c0       	rjmp	.+126    	; 0x29d4 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2956:	6b a1       	ldd	r22, Y+35	; 0x23
    2958:	7c a1       	ldd	r23, Y+36	; 0x24
    295a:	8d a1       	ldd	r24, Y+37	; 0x25
    295c:	9e a1       	ldd	r25, Y+38	; 0x26
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	4c f5       	brge	.+82     	; 0x29c0 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296e:	6f a1       	ldd	r22, Y+39	; 0x27
    2970:	78 a5       	ldd	r23, Y+40	; 0x28
    2972:	89 a5       	ldd	r24, Y+41	; 0x29
    2974:	9a a5       	ldd	r25, Y+42	; 0x2a
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e2       	ldi	r20, 0x20	; 32
    297c:	51 e4       	ldi	r21, 0x41	; 65
    297e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9a a3       	std	Y+34, r25	; 0x22
    2994:	89 a3       	std	Y+33, r24	; 0x21
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <LCD_displayCharacter+0x1cc>
    2998:	80 e9       	ldi	r24, 0x90	; 144
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	98 a3       	std	Y+32, r25	; 0x20
    299e:	8f 8f       	std	Y+31, r24	; 0x1f
    29a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29a2:	98 a1       	ldd	r25, Y+32	; 0x20
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_displayCharacter+0x1ba>
    29a8:	98 a3       	std	Y+32, r25	; 0x20
    29aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ac:	89 a1       	ldd	r24, Y+33	; 0x21
    29ae:	9a a1       	ldd	r25, Y+34	; 0x22
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	9a a3       	std	Y+34, r25	; 0x22
    29b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b6:	89 a1       	ldd	r24, Y+33	; 0x21
    29b8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	69 f7       	brne	.-38     	; 0x2998 <LCD_displayCharacter+0x1ae>
    29be:	14 c0       	rjmp	.+40     	; 0x29e8 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c0:	6b a1       	ldd	r22, Y+35	; 0x23
    29c2:	7c a1       	ldd	r23, Y+36	; 0x24
    29c4:	8d a1       	ldd	r24, Y+37	; 0x25
    29c6:	9e a1       	ldd	r25, Y+38	; 0x26
    29c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
    29d4:	89 a1       	ldd	r24, Y+33	; 0x21
    29d6:	9a a1       	ldd	r25, Y+34	; 0x22
    29d8:	9e 8f       	std	Y+30, r25	; 0x1e
    29da:	8d 8f       	std	Y+29, r24	; 0x1d
    29dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_displayCharacter+0x1f6>
    29e4:	9e 8f       	std	Y+30, r25	; 0x1e
    29e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    29e8:	89 ad       	ldd	r24, Y+57	; 0x39
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	b9 01       	movw	r22, r18
    29f4:	0e 94 db 08 	call	0x11b6	; 0x11b6 <LCD_setPortValue>
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 e8       	ldi	r26, 0x80	; 128
    29fe:	bf e3       	ldi	r27, 0x3F	; 63
    2a00:	89 8f       	std	Y+25, r24	; 0x19
    2a02:	9a 8f       	std	Y+26, r25	; 0x1a
    2a04:	ab 8f       	std	Y+27, r26	; 0x1b
    2a06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	4a e7       	ldi	r20, 0x7A	; 122
    2a16:	55 e4       	ldi	r21, 0x45	; 69
    2a18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	8d 8b       	std	Y+21, r24	; 0x15
    2a22:	9e 8b       	std	Y+22, r25	; 0x16
    2a24:	af 8b       	std	Y+23, r26	; 0x17
    2a26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a28:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e8       	ldi	r20, 0x80	; 128
    2a36:	5f e3       	ldi	r21, 0x3F	; 63
    2a38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a3c:	88 23       	and	r24, r24
    2a3e:	2c f4       	brge	.+10     	; 0x2a4a <LCD_displayCharacter+0x260>
		__ticks = 1;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9c 8b       	std	Y+20, r25	; 0x14
    2a46:	8b 8b       	std	Y+19, r24	; 0x13
    2a48:	3f c0       	rjmp	.+126    	; 0x2ac8 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    2a4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a50:	98 8d       	ldd	r25, Y+24	; 0x18
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	3f ef       	ldi	r19, 0xFF	; 255
    2a56:	4f e7       	ldi	r20, 0x7F	; 127
    2a58:	57 e4       	ldi	r21, 0x47	; 71
    2a5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	4c f5       	brge	.+82     	; 0x2ab4 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a62:	69 8d       	ldd	r22, Y+25	; 0x19
    2a64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e2       	ldi	r20, 0x20	; 32
    2a70:	51 e4       	ldi	r21, 0x41	; 65
    2a72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	9c 8b       	std	Y+20, r25	; 0x14
    2a88:	8b 8b       	std	Y+19, r24	; 0x13
    2a8a:	0f c0       	rjmp	.+30     	; 0x2aaa <LCD_displayCharacter+0x2c0>
    2a8c:	80 e9       	ldi	r24, 0x90	; 144
    2a8e:	91 e0       	ldi	r25, 0x01	; 1
    2a90:	9a 8b       	std	Y+18, r25	; 0x12
    2a92:	89 8b       	std	Y+17, r24	; 0x11
    2a94:	89 89       	ldd	r24, Y+17	; 0x11
    2a96:	9a 89       	ldd	r25, Y+18	; 0x12
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <LCD_displayCharacter+0x2ae>
    2a9c:	9a 8b       	std	Y+18, r25	; 0x12
    2a9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa0:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa2:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	9c 8b       	std	Y+20, r25	; 0x14
    2aa8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    2aac:	9c 89       	ldd	r25, Y+20	; 0x14
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	69 f7       	brne	.-38     	; 0x2a8c <LCD_displayCharacter+0x2a2>
    2ab2:	14 c0       	rjmp	.+40     	; 0x2adc <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aba:	98 8d       	ldd	r25, Y+24	; 0x18
    2abc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9c 8b       	std	Y+20, r25	; 0x14
    2ac6:	8b 8b       	std	Y+19, r24	; 0x13
    2ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aca:	9c 89       	ldd	r25, Y+20	; 0x14
    2acc:	98 8b       	std	Y+16, r25	; 0x10
    2ace:	8f 87       	std	Y+15, r24	; 0x0f
    2ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad2:	98 89       	ldd	r25, Y+16	; 0x10
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <LCD_displayCharacter+0x2ea>
    2ad8:	98 8b       	std	Y+16, r25	; 0x10
    2ada:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2adc:	83 e0       	ldi	r24, 0x03	; 3
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	65 e0       	ldi	r22, 0x05	; 5
    2ae2:	70 e0       	ldi	r23, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_setPinValue>
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e8       	ldi	r26, 0x80	; 128
    2af2:	bf e3       	ldi	r27, 0x3F	; 63
    2af4:	8b 87       	std	Y+11, r24	; 0x0b
    2af6:	9c 87       	std	Y+12, r25	; 0x0c
    2af8:	ad 87       	std	Y+13, r26	; 0x0d
    2afa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a e7       	ldi	r20, 0x7A	; 122
    2b0a:	55 e4       	ldi	r21, 0x45	; 69
    2b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8f 83       	std	Y+7, r24	; 0x07
    2b16:	98 87       	std	Y+8, r25	; 0x08
    2b18:	a9 87       	std	Y+9, r26	; 0x09
    2b1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1e:	78 85       	ldd	r23, Y+8	; 0x08
    2b20:	89 85       	ldd	r24, Y+9	; 0x09
    2b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b30:	88 23       	and	r24, r24
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <LCD_displayCharacter+0x354>
		__ticks = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9e 83       	std	Y+6, r25	; 0x06
    2b3a:	8d 83       	std	Y+5, r24	; 0x05
    2b3c:	3f c0       	rjmp	.+126    	; 0x2bbc <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b40:	78 85       	ldd	r23, Y+8	; 0x08
    2b42:	89 85       	ldd	r24, Y+9	; 0x09
    2b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	4c f5       	brge	.+82     	; 0x2ba8 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	8d 83       	std	Y+5, r24	; 0x05
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <LCD_displayCharacter+0x3b4>
    2b80:	80 e9       	ldi	r24, 0x90	; 144
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	9c 83       	std	Y+4, r25	; 0x04
    2b86:	8b 83       	std	Y+3, r24	; 0x03
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <LCD_displayCharacter+0x3a2>
    2b90:	9c 83       	std	Y+4, r25	; 0x04
    2b92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	69 f7       	brne	.-38     	; 0x2b80 <LCD_displayCharacter+0x396>
    2ba6:	14 c0       	rjmp	.+40     	; 0x2bd0 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    2baa:	78 85       	ldd	r23, Y+8	; 0x08
    2bac:	89 85       	ldd	r24, Y+9	; 0x09
    2bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9e 83       	std	Y+6, r25	; 0x06
    2bba:	8d 83       	std	Y+5, r24	; 0x05
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc0:	9a 83       	std	Y+2, r25	; 0x02
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <LCD_displayCharacter+0x3de>
    2bcc:	9a 83       	std	Y+2, r25	; 0x02
    2bce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2bd0:	e9 96       	adiw	r28, 0x39	; 57
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <LCD_init>:
void LCD_init(void)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	2e 97       	sbiw	r28, 0x0e	; 14
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2bf6:	83 e0       	ldi	r24, 0x03	; 3
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	64 e0       	ldi	r22, 0x04	; 4
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	41 e0       	ldi	r20, 0x01	; 1
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	0e 94 26 06 	call	0xc4c	; 0xc4c <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    2c06:	83 e0       	ldi	r24, 0x03	; 3
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	65 e0       	ldi	r22, 0x05	; 5
    2c0c:	70 e0       	ldi	r23, 0x00	; 0
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	0e 94 26 06 	call	0xc4c	; 0xc4c <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	6f ef       	ldi	r22, 0xFF	; 255
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	0e 94 97 08 	call	0x112e	; 0x112e <LCD_setPortDirection>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	a0 ea       	ldi	r26, 0xA0	; 160
    2c28:	b1 e4       	ldi	r27, 0x41	; 65
    2c2a:	8b 87       	std	Y+11, r24	; 0x0b
    2c2c:	9c 87       	std	Y+12, r25	; 0x0c
    2c2e:	ad 87       	std	Y+13, r26	; 0x0d
    2c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a e7       	ldi	r20, 0x7A	; 122
    2c40:	55 e4       	ldi	r21, 0x45	; 69
    2c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	8f 83       	std	Y+7, r24	; 0x07
    2c4c:	98 87       	std	Y+8, r25	; 0x08
    2c4e:	a9 87       	std	Y+9, r26	; 0x09
    2c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c52:	6f 81       	ldd	r22, Y+7	; 0x07
    2c54:	78 85       	ldd	r23, Y+8	; 0x08
    2c56:	89 85       	ldd	r24, Y+9	; 0x09
    2c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e8       	ldi	r20, 0x80	; 128
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c66:	88 23       	and	r24, r24
    2c68:	2c f4       	brge	.+10     	; 0x2c74 <LCD_init+0x92>
		__ticks = 1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
    2c72:	3f c0       	rjmp	.+126    	; 0x2cf2 <LCD_init+0x110>
	else if (__tmp > 65535)
    2c74:	6f 81       	ldd	r22, Y+7	; 0x07
    2c76:	78 85       	ldd	r23, Y+8	; 0x08
    2c78:	89 85       	ldd	r24, Y+9	; 0x09
    2c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	3f ef       	ldi	r19, 0xFF	; 255
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	57 e4       	ldi	r21, 0x47	; 71
    2c84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	4c f5       	brge	.+82     	; 0x2cde <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	51 e4       	ldi	r21, 0x41	; 65
    2c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <LCD_init+0xf2>
    2cb6:	80 e9       	ldi	r24, 0x90	; 144
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	9c 83       	std	Y+4, r25	; 0x04
    2cbc:	8b 83       	std	Y+3, r24	; 0x03
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	f1 f7       	brne	.-4      	; 0x2cc2 <LCD_init+0xe0>
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <LCD_init+0xd4>
    2cdc:	14 c0       	rjmp	.+40     	; 0x2d06 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cde:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce0:	78 85       	ldd	r23, Y+8	; 0x08
    2ce2:	89 85       	ldd	r24, Y+9	; 0x09
    2ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	9a 83       	std	Y+2, r25	; 0x02
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_init+0x11c>
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2d06:	88 e3       	ldi	r24, 0x38	; 56
    2d08:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    2d0c:	8c e0       	ldi	r24, 0x0C	; 12
    2d0e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
}
    2d18:	2e 96       	adiw	r28, 0x0e	; 14
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <LCD_GoToXY+0x6>
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <LCD_GoToXY+0x8>
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	89 83       	std	Y+1, r24	; 0x01
    2d38:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	88 32       	cpi	r24, 0x28	; 40
    2d3e:	c0 f4       	brcc	.+48     	; 0x2d70 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	28 2f       	mov	r18, r24
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	3c 83       	std	Y+4, r19	; 0x04
    2d48:	2b 83       	std	Y+3, r18	; 0x03
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	31 f0       	breq	.+12     	; 0x2d5e <LCD_GoToXY+0x34>
    2d52:	2b 81       	ldd	r18, Y+3	; 0x03
    2d54:	3c 81       	ldd	r19, Y+4	; 0x04
    2d56:	21 30       	cpi	r18, 0x01	; 1
    2d58:	31 05       	cpc	r19, r1
    2d5a:	31 f0       	breq	.+12     	; 0x2d68 <LCD_GoToXY+0x3e>
    2d5c:	09 c0       	rjmp	.+18     	; 0x2d70 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	80 58       	subi	r24, 0x80	; 128
    2d62:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
    2d66:	04 c0       	rjmp	.+8      	; 0x2d70 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	80 54       	subi	r24, 0x40	; 64
    2d6c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
			break;
		}
	}
}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <LCD_displayString>:

void LCD_displayString(const char *str)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <LCD_displayString+0x6>
    2d84:	0f 92       	push	r0
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	9b 83       	std	Y+3, r25	; 0x03
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2d8e:	19 82       	std	Y+1, r1	; 0x01
    2d90:	0e c0       	rjmp	.+28     	; 0x2dae <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	28 2f       	mov	r18, r24
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	e2 0f       	add	r30, r18
    2da0:	f3 1f       	adc	r31, r19
    2da2:	80 81       	ld	r24, Z
    2da4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
		i++;
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	8f 5f       	subi	r24, 0xFF	; 255
    2dac:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	9b 81       	ldd	r25, Y+3	; 0x03
    2db8:	fc 01       	movw	r30, r24
    2dba:	e2 0f       	add	r30, r18
    2dbc:	f3 1f       	adc	r31, r19
    2dbe:	80 81       	ld	r24, Z
    2dc0:	88 23       	and	r24, r24
    2dc2:	39 f7       	brne	.-50     	; 0x2d92 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	08 95       	ret

00002dd0 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	28 97       	sbiw	r28, 0x08	; 8
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
    2de4:	8b 83       	std	Y+3, r24	; 0x03
    2de6:	6c 83       	std	Y+4, r22	; 0x04
    2de8:	5e 83       	std	Y+6, r21	; 0x06
    2dea:	4d 83       	std	Y+5, r20	; 0x05
    2dec:	38 87       	std	Y+8, r19	; 0x08
    2dee:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    2df0:	1a 82       	std	Y+2, r1	; 0x02
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	88 23       	and	r24, r24
    2dfa:	49 f4       	brne	.+18     	; 0x2e0e <LCD_String_xy+0x3e>
    2dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfe:	80 31       	cpi	r24, 0x10	; 16
    2e00:	30 f4       	brcc	.+12     	; 0x2e0e <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    2e02:	8c 81       	ldd	r24, Y+4	; 0x04
    2e04:	8f 70       	andi	r24, 0x0F	; 15
    2e06:	80 68       	ori	r24, 0x80	; 128
    2e08:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
    2e0c:	3a c0       	rjmp	.+116    	; 0x2e82 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	b9 f5       	brne	.+110    	; 0x2e82 <LCD_String_xy+0xb2>
    2e14:	8c 81       	ldd	r24, Y+4	; 0x04
    2e16:	80 31       	cpi	r24, 0x10	; 16
    2e18:	a0 f5       	brcc	.+104    	; 0x2e82 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    2e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1c:	8f 70       	andi	r24, 0x0F	; 15
    2e1e:	80 6c       	ori	r24, 0xC0	; 192
    2e20:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
    2e24:	2e c0       	rjmp	.+92     	; 0x2e82 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	fc 01       	movw	r30, r24
    2e32:	e2 0f       	add	r30, r18
    2e34:	f3 1f       	adc	r31, r19
    2e36:	80 81       	ld	r24, Z
    2e38:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
		i++;
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	88 23       	and	r24, r24
    2e46:	71 f4       	brne	.+28     	; 0x2e64 <LCD_String_xy+0x94>
    2e48:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4a:	83 30       	cpi	r24, 0x03	; 3
    2e4c:	58 f0       	brcs	.+22     	; 0x2e64 <LCD_String_xy+0x94>
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	8b 30       	cpi	r24, 0x0B	; 11
    2e52:	41 f4       	brne	.+16     	; 0x2e64 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
			c++;
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	8f 5f       	subi	r24, 0xFF	; 255
    2e60:	89 83       	std	Y+1, r24	; 0x01
    2e62:	0b c0       	rjmp	.+22     	; 0x2e7a <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	41 f4       	brne	.+16     	; 0x2e7a <LCD_String_xy+0xaa>
    2e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6c:	83 30       	cpi	r24, 0x03	; 3
    2e6e:	28 f0       	brcs	.+10     	; 0x2e7a <LCD_String_xy+0xaa>
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	8b 30       	cpi	r24, 0x0B	; 11
    2e74:	11 f4       	brne	.+4      	; 0x2e7a <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    2e76:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>
		}

		*count = c;
    2e7a:	ef 81       	ldd	r30, Y+7	; 0x07
    2e7c:	f8 85       	ldd	r31, Y+8	; 0x08
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	e2 0f       	add	r30, r18
    2e90:	f3 1f       	adc	r31, r19
    2e92:	80 81       	ld	r24, Z
    2e94:	88 23       	and	r24, r24
    2e96:	39 f6       	brne	.-114    	; 0x2e26 <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    2e98:	28 96       	adiw	r28, 0x08	; 8
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	08 95       	ret

00002eaa <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	2e 97       	sbiw	r28, 0x0e	; 14
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a0 e0       	ldi	r26, 0x00	; 0
    2eca:	b0 e4       	ldi	r27, 0x40	; 64
    2ecc:	8b 87       	std	Y+11, r24	; 0x0b
    2ece:	9c 87       	std	Y+12, r25	; 0x0c
    2ed0:	ad 87       	std	Y+13, r26	; 0x0d
    2ed2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	4a e7       	ldi	r20, 0x7A	; 122
    2ee2:	55 e4       	ldi	r21, 0x45	; 69
    2ee4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	8f 83       	std	Y+7, r24	; 0x07
    2eee:	98 87       	std	Y+8, r25	; 0x08
    2ef0:	a9 87       	std	Y+9, r26	; 0x09
    2ef2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e8       	ldi	r20, 0x80	; 128
    2f02:	5f e3       	ldi	r21, 0x3F	; 63
    2f04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f08:	88 23       	and	r24, r24
    2f0a:	2c f4       	brge	.+10     	; 0x2f16 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    2f16:	6f 81       	ldd	r22, Y+7	; 0x07
    2f18:	78 85       	ldd	r23, Y+8	; 0x08
    2f1a:	89 85       	ldd	r24, Y+9	; 0x09
    2f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	57 e4       	ldi	r21, 0x47	; 71
    2f26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	4c f5       	brge	.+82     	; 0x2f80 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e2       	ldi	r20, 0x20	; 32
    2f3c:	51 e4       	ldi	r21, 0x41	; 65
    2f3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	0f c0       	rjmp	.+30     	; 0x2f76 <LCD_ClearScreen+0xcc>
    2f58:	80 e9       	ldi	r24, 0x90	; 144
    2f5a:	91 e0       	ldi	r25, 0x01	; 1
    2f5c:	9c 83       	std	Y+4, r25	; 0x04
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	9c 81       	ldd	r25, Y+4	; 0x04
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <LCD_ClearScreen+0xba>
    2f68:	9c 83       	std	Y+4, r25	; 0x04
    2f6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	69 f7       	brne	.-38     	; 0x2f58 <LCD_ClearScreen+0xae>
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f80:	6f 81       	ldd	r22, Y+7	; 0x07
    2f82:	78 85       	ldd	r23, Y+8	; 0x08
    2f84:	89 85       	ldd	r24, Y+9	; 0x09
    2f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LCD_ClearScreen+0xf6>
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2fa8:	2e 96       	adiw	r28, 0x0e	; 14
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	de bf       	out	0x3e, r29	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	cd bf       	out	0x3d, r28	; 61
    2fb4:	cf 91       	pop	r28
    2fb6:	df 91       	pop	r29
    2fb8:	08 95       	ret

00002fba <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	2e 97       	sbiw	r28, 0x0e	; 14
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    2fce:	88 e1       	ldi	r24, 0x18	; 24
    2fd0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	a0 ea       	ldi	r26, 0xA0	; 160
    2fda:	b1 e4       	ldi	r27, 0x41	; 65
    2fdc:	8b 87       	std	Y+11, r24	; 0x0b
    2fde:	9c 87       	std	Y+12, r25	; 0x0c
    2fe0:	ad 87       	std	Y+13, r26	; 0x0d
    2fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	4a e7       	ldi	r20, 0x7A	; 122
    2ff2:	55 e4       	ldi	r21, 0x45	; 69
    2ff4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	8f 83       	std	Y+7, r24	; 0x07
    2ffe:	98 87       	std	Y+8, r25	; 0x08
    3000:	a9 87       	std	Y+9, r26	; 0x09
    3002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3004:	6f 81       	ldd	r22, Y+7	; 0x07
    3006:	78 85       	ldd	r23, Y+8	; 0x08
    3008:	89 85       	ldd	r24, Y+9	; 0x09
    300a:	9a 85       	ldd	r25, Y+10	; 0x0a
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e8       	ldi	r20, 0x80	; 128
    3012:	5f e3       	ldi	r21, 0x3F	; 63
    3014:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3018:	88 23       	and	r24, r24
    301a:	2c f4       	brge	.+10     	; 0x3026 <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	9e 83       	std	Y+6, r25	; 0x06
    3022:	8d 83       	std	Y+5, r24	; 0x05
    3024:	3f c0       	rjmp	.+126    	; 0x30a4 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3026:	6f 81       	ldd	r22, Y+7	; 0x07
    3028:	78 85       	ldd	r23, Y+8	; 0x08
    302a:	89 85       	ldd	r24, Y+9	; 0x09
    302c:	9a 85       	ldd	r25, Y+10	; 0x0a
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	3f ef       	ldi	r19, 0xFF	; 255
    3032:	4f e7       	ldi	r20, 0x7F	; 127
    3034:	57 e4       	ldi	r21, 0x47	; 71
    3036:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    303a:	18 16       	cp	r1, r24
    303c:	4c f5       	brge	.+82     	; 0x3090 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3040:	7c 85       	ldd	r23, Y+12	; 0x0c
    3042:	8d 85       	ldd	r24, Y+13	; 0x0d
    3044:	9e 85       	ldd	r25, Y+14	; 0x0e
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e2       	ldi	r20, 0x20	; 32
    304c:	51 e4       	ldi	r21, 0x41	; 65
    304e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	bc 01       	movw	r22, r24
    3058:	cd 01       	movw	r24, r26
    305a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	9e 83       	std	Y+6, r25	; 0x06
    3064:	8d 83       	std	Y+5, r24	; 0x05
    3066:	0f c0       	rjmp	.+30     	; 0x3086 <LCD_ShiftingLeft+0xcc>
    3068:	80 e9       	ldi	r24, 0x90	; 144
    306a:	91 e0       	ldi	r25, 0x01	; 1
    306c:	9c 83       	std	Y+4, r25	; 0x04
    306e:	8b 83       	std	Y+3, r24	; 0x03
    3070:	8b 81       	ldd	r24, Y+3	; 0x03
    3072:	9c 81       	ldd	r25, Y+4	; 0x04
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <LCD_ShiftingLeft+0xba>
    3078:	9c 83       	std	Y+4, r25	; 0x04
    307a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	9e 81       	ldd	r25, Y+6	; 0x06
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	9e 83       	std	Y+6, r25	; 0x06
    3084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3086:	8d 81       	ldd	r24, Y+5	; 0x05
    3088:	9e 81       	ldd	r25, Y+6	; 0x06
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	69 f7       	brne	.-38     	; 0x3068 <LCD_ShiftingLeft+0xae>
    308e:	14 c0       	rjmp	.+40     	; 0x30b8 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	9e 83       	std	Y+6, r25	; 0x06
    30a2:	8d 83       	std	Y+5, r24	; 0x05
    30a4:	8d 81       	ldd	r24, Y+5	; 0x05
    30a6:	9e 81       	ldd	r25, Y+6	; 0x06
    30a8:	9a 83       	std	Y+2, r25	; 0x02
    30aa:	89 83       	std	Y+1, r24	; 0x01
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	f1 f7       	brne	.-4      	; 0x30b0 <LCD_ShiftingLeft+0xf6>
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    30b8:	2e 96       	adiw	r28, 0x0e	; 14
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	2e 97       	sbiw	r28, 0x0e	; 14
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    30de:	8c e1       	ldi	r24, 0x1C	; 28
    30e0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	a0 ea       	ldi	r26, 0xA0	; 160
    30ea:	b1 e4       	ldi	r27, 0x41	; 65
    30ec:	8b 87       	std	Y+11, r24	; 0x0b
    30ee:	9c 87       	std	Y+12, r25	; 0x0c
    30f0:	ad 87       	std	Y+13, r26	; 0x0d
    30f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	4a e7       	ldi	r20, 0x7A	; 122
    3102:	55 e4       	ldi	r21, 0x45	; 69
    3104:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	8f 83       	std	Y+7, r24	; 0x07
    310e:	98 87       	std	Y+8, r25	; 0x08
    3110:	a9 87       	std	Y+9, r26	; 0x09
    3112:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3114:	6f 81       	ldd	r22, Y+7	; 0x07
    3116:	78 85       	ldd	r23, Y+8	; 0x08
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e8       	ldi	r20, 0x80	; 128
    3122:	5f e3       	ldi	r21, 0x3F	; 63
    3124:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3128:	88 23       	and	r24, r24
    312a:	2c f4       	brge	.+10     	; 0x3136 <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	9e 83       	std	Y+6, r25	; 0x06
    3132:	8d 83       	std	Y+5, r24	; 0x05
    3134:	3f c0       	rjmp	.+126    	; 0x31b4 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3136:	6f 81       	ldd	r22, Y+7	; 0x07
    3138:	78 85       	ldd	r23, Y+8	; 0x08
    313a:	89 85       	ldd	r24, Y+9	; 0x09
    313c:	9a 85       	ldd	r25, Y+10	; 0x0a
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	3f ef       	ldi	r19, 0xFF	; 255
    3142:	4f e7       	ldi	r20, 0x7F	; 127
    3144:	57 e4       	ldi	r21, 0x47	; 71
    3146:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    314a:	18 16       	cp	r1, r24
    314c:	4c f5       	brge	.+82     	; 0x31a0 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3150:	7c 85       	ldd	r23, Y+12	; 0x0c
    3152:	8d 85       	ldd	r24, Y+13	; 0x0d
    3154:	9e 85       	ldd	r25, Y+14	; 0x0e
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e2       	ldi	r20, 0x20	; 32
    315c:	51 e4       	ldi	r21, 0x41	; 65
    315e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	9e 83       	std	Y+6, r25	; 0x06
    3174:	8d 83       	std	Y+5, r24	; 0x05
    3176:	0f c0       	rjmp	.+30     	; 0x3196 <LCD_ShiftingRight+0xcc>
    3178:	80 e9       	ldi	r24, 0x90	; 144
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	9c 83       	std	Y+4, r25	; 0x04
    317e:	8b 83       	std	Y+3, r24	; 0x03
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	9c 81       	ldd	r25, Y+4	; 0x04
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <LCD_ShiftingRight+0xba>
    3188:	9c 83       	std	Y+4, r25	; 0x04
    318a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318c:	8d 81       	ldd	r24, Y+5	; 0x05
    318e:	9e 81       	ldd	r25, Y+6	; 0x06
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	9e 83       	std	Y+6, r25	; 0x06
    3194:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	9e 81       	ldd	r25, Y+6	; 0x06
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	69 f7       	brne	.-38     	; 0x3178 <LCD_ShiftingRight+0xae>
    319e:	14 c0       	rjmp	.+40     	; 0x31c8 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a0:	6f 81       	ldd	r22, Y+7	; 0x07
    31a2:	78 85       	ldd	r23, Y+8	; 0x08
    31a4:	89 85       	ldd	r24, Y+9	; 0x09
    31a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	8d 83       	std	Y+5, r24	; 0x05
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	9e 81       	ldd	r25, Y+6	; 0x06
    31b8:	9a 83       	std	Y+2, r25	; 0x02
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <LCD_ShiftingRight+0xf6>
    31c4:	9a 83       	std	Y+2, r25	; 0x02
    31c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    31c8:	2e 96       	adiw	r28, 0x0e	; 14
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    31da:	0f 93       	push	r16
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	28 97       	sbiw	r28, 0x08	; 8
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	8b 83       	std	Y+3, r24	; 0x03
    31f2:	7d 83       	std	Y+5, r23	; 0x05
    31f4:	6c 83       	std	Y+4, r22	; 0x04
    31f6:	4e 83       	std	Y+6, r20	; 0x06
    31f8:	2f 83       	std	Y+7, r18	; 0x07
    31fa:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    31fc:	88 85       	ldd	r24, Y+8	; 0x08
    31fe:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3202:	1a 82       	std	Y+2, r1	; 0x02
    3204:	19 82       	std	Y+1, r1	; 0x01
    3206:	0f c0       	rjmp	.+30     	; 0x3226 <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3208:	29 81       	ldd	r18, Y+1	; 0x01
    320a:	3a 81       	ldd	r19, Y+2	; 0x02
    320c:	8c 81       	ldd	r24, Y+4	; 0x04
    320e:	9d 81       	ldd	r25, Y+5	; 0x05
    3210:	fc 01       	movw	r30, r24
    3212:	e2 0f       	add	r30, r18
    3214:	f3 1f       	adc	r31, r19
    3216:	80 81       	ld	r24, Z
    3218:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	01 96       	adiw	r24, 0x01	; 1
    3222:	9a 83       	std	Y+2, r25	; 0x02
    3224:	89 83       	std	Y+1, r24	; 0x01
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	9a 81       	ldd	r25, Y+2	; 0x02
    322a:	88 30       	cpi	r24, 0x08	; 8
    322c:	91 05       	cpc	r25, r1
    322e:	64 f3       	brlt	.-40     	; 0x3208 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3230:	8e 81       	ldd	r24, Y+6	; 0x06
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    323e:	8f 81       	ldd	r24, Y+7	; 0x07
    3240:	80 31       	cpi	r24, 0x10	; 16
    3242:	48 f0       	brcs	.+18     	; 0x3256 <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3244:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
	}
}
    3256:	28 96       	adiw	r28, 0x08	; 8
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	cf 91       	pop	r28
    3264:	df 91       	pop	r29
    3266:	0f 91       	pop	r16
    3268:	08 95       	ret

0000326a <Keypad_GetPressedKey>:
#include "Keypad.h";

u8 Keypad_GetPressedKey(){
    326a:	df 93       	push	r29
    326c:	cf 93       	push	r28
    326e:	00 d0       	rcall	.+0      	; 0x3270 <Keypad_GetPressedKey+0x6>
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    3274:	1a 82       	std	Y+2, r1	; 0x02
    3276:	4d c0       	rjmp	.+154    	; 0x3312 <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    3278:	ea e3       	ldi	r30, 0x3A	; 58
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	80 e1       	ldi	r24, 0x10	; 16
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	02 c0       	rjmp	.+4      	; 0x328c <Keypad_GetPressedKey+0x22>
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	2a 95       	dec	r18
    328e:	e2 f7       	brpl	.-8      	; 0x3288 <Keypad_GetPressedKey+0x1e>
    3290:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    3292:	eb e3       	ldi	r30, 0x3B	; 59
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	28 2f       	mov	r18, r24
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	80 e1       	ldi	r24, 0x10	; 16
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	02 2e       	mov	r0, r18
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <Keypad_GetPressedKey+0x3e>
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	0a 94       	dec	r0
    32aa:	e2 f7       	brpl	.-8      	; 0x32a4 <Keypad_GetPressedKey+0x3a>
    32ac:	80 95       	com	r24
    32ae:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    32b0:	19 82       	std	Y+1, r1	; 0x01
    32b2:	29 c0       	rjmp	.+82     	; 0x3306 <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    32b4:	e9 e3       	ldi	r30, 0x39	; 57
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	89 81       	ldd	r24, Y+1	; 0x01
    32c0:	88 2f       	mov	r24, r24
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	a9 01       	movw	r20, r18
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <Keypad_GetPressedKey+0x62>
    32c8:	55 95       	asr	r21
    32ca:	47 95       	ror	r20
    32cc:	8a 95       	dec	r24
    32ce:	e2 f7       	brpl	.-8      	; 0x32c8 <Keypad_GetPressedKey+0x5e>
    32d0:	ca 01       	movw	r24, r20
    32d2:	81 70       	andi	r24, 0x01	; 1
    32d4:	90 70       	andi	r25, 0x00	; 0
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	99 f4       	brne	.+38     	; 0x3300 <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	28 2f       	mov	r18, r24
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	c9 01       	movw	r24, r18
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	82 0f       	add	r24, r18
    32e8:	93 1f       	adc	r25, r19
    32ea:	98 2f       	mov	r25, r24
    32ec:	8a 81       	ldd	r24, Y+2	; 0x02
    32ee:	89 0f       	add	r24, r25
    32f0:	8f 5f       	subi	r24, 0xFF	; 255
    32f2:	0e 94 8e 19 	call	0x331c	; 0x331c <Keypad_4x3>
				}
			}
		}
	}
}
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	89 83       	std	Y+1, r24	; 0x01
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	84 30       	cpi	r24, 0x04	; 4
    330a:	a0 f2       	brcs	.-88     	; 0x32b4 <Keypad_GetPressedKey+0x4a>

u8 Keypad_GetPressedKey(){
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	8f 5f       	subi	r24, 0xFF	; 255
    3310:	8a 83       	std	Y+2, r24	; 0x02
    3312:	8a 81       	ldd	r24, Y+2	; 0x02
    3314:	83 30       	cpi	r24, 0x03	; 3
    3316:	08 f4       	brcc	.+2      	; 0x331a <Keypad_GetPressedKey+0xb0>
    3318:	af cf       	rjmp	.-162    	; 0x3278 <Keypad_GetPressedKey+0xe>
    331a:	ac cf       	rjmp	.-168    	; 0x3274 <Keypad_GetPressedKey+0xa>

0000331c <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	00 d0       	rcall	.+0      	; 0x3322 <Keypad_4x3+0x6>
    3322:	00 d0       	rcall	.+0      	; 0x3324 <Keypad_4x3+0x8>
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
    3328:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	3c 83       	std	Y+4, r19	; 0x04
    3332:	2b 83       	std	Y+3, r18	; 0x03
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	8a 30       	cpi	r24, 0x0A	; 10
    333a:	91 05       	cpc	r25, r1
    333c:	81 f0       	breq	.+32     	; 0x335e <Keypad_4x3+0x42>
    333e:	2b 81       	ldd	r18, Y+3	; 0x03
    3340:	3c 81       	ldd	r19, Y+4	; 0x04
    3342:	2a 30       	cpi	r18, 0x0A	; 10
    3344:	31 05       	cpc	r19, r1
    3346:	9c f0       	brlt	.+38     	; 0x336e <Keypad_4x3+0x52>
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	9c 81       	ldd	r25, Y+4	; 0x04
    334c:	8b 30       	cpi	r24, 0x0B	; 11
    334e:	91 05       	cpc	r25, r1
    3350:	49 f0       	breq	.+18     	; 0x3364 <Keypad_4x3+0x48>
    3352:	2b 81       	ldd	r18, Y+3	; 0x03
    3354:	3c 81       	ldd	r19, Y+4	; 0x04
    3356:	2c 30       	cpi	r18, 0x0C	; 12
    3358:	31 05       	cpc	r19, r1
    335a:	31 f0       	breq	.+12     	; 0x3368 <Keypad_4x3+0x4c>
    335c:	08 c0       	rjmp	.+16     	; 0x336e <Keypad_4x3+0x52>
	case 10:
		return '*';
    335e:	3a e2       	ldi	r19, 0x2A	; 42
    3360:	3a 83       	std	Y+2, r19	; 0x02
    3362:	07 c0       	rjmp	.+14     	; 0x3372 <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    3364:	1a 82       	std	Y+2, r1	; 0x02
    3366:	05 c0       	rjmp	.+10     	; 0x3372 <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    3368:	83 e2       	ldi	r24, 0x23	; 35
    336a:	8a 83       	std	Y+2, r24	; 0x02
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <Keypad_4x3+0x56>
	default:
		return Num;
    336e:	99 81       	ldd	r25, Y+1	; 0x01
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	00 d0       	rcall	.+0      	; 0x3388 <DC_Motor_Init+0x6>
    3388:	0f 92       	push	r0
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	8a 83       	std	Y+2, r24	; 0x02
    3390:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	81 30       	cpi	r24, 0x01	; 1
    339a:	81 f4       	brne	.+32     	; 0x33bc <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    339c:	81 e0       	ldi	r24, 0x01	; 1
    339e:	63 e0       	ldi	r22, 0x03	; 3
    33a0:	41 e0       	ldi	r20, 0x01	; 1
    33a2:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	65 e0       	ldi	r22, 0x05	; 5
    33aa:	41 e0       	ldi	r20, 0x01	; 1
    33ac:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	64 e0       	ldi	r22, 0x04	; 4
    33b4:	41 e0       	ldi	r20, 0x01	; 1
    33b6:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
    33ba:	14 c0       	rjmp	.+40     	; 0x33e4 <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	81 f4       	brne	.+32     	; 0x33e2 <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	62 e0       	ldi	r22, 0x02	; 2
    33c6:	41 e0       	ldi	r20, 0x01	; 1
    33c8:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	61 e0       	ldi	r22, 0x01	; 1
    33d0:	41 e0       	ldi	r20, 0x01	; 1
    33d2:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	41 e0       	ldi	r20, 0x01	; 1
    33dc:	0e 94 85 09 	call	0x130a	; 0x130a <DIO_u8SetPinDirection>
    33e0:	01 c0       	rjmp	.+2      	; 0x33e4 <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    33e2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	29 97       	sbiw	r28, 0x09	; 9
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	8a 83       	std	Y+2, r24	; 0x02
    3408:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	28 2f       	mov	r18, r24
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	39 87       	std	Y+9, r19	; 0x09
    3416:	28 87       	std	Y+8, r18	; 0x08
    3418:	88 85       	ldd	r24, Y+8	; 0x08
    341a:	99 85       	ldd	r25, Y+9	; 0x09
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	31 f0       	breq	.+12     	; 0x342c <DC_Motor_Rotate+0x3a>
    3420:	28 85       	ldd	r18, Y+8	; 0x08
    3422:	39 85       	ldd	r19, Y+9	; 0x09
    3424:	21 30       	cpi	r18, 0x01	; 1
    3426:	31 05       	cpc	r19, r1
    3428:	89 f1       	breq	.+98     	; 0x348c <DC_Motor_Rotate+0x9a>
    342a:	60 c0       	rjmp	.+192    	; 0x34ec <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	28 2f       	mov	r18, r24
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	3f 83       	std	Y+7, r19	; 0x07
    3434:	2e 83       	std	Y+6, r18	; 0x06
    3436:	8e 81       	ldd	r24, Y+6	; 0x06
    3438:	9f 81       	ldd	r25, Y+7	; 0x07
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	a9 f0       	breq	.+42     	; 0x3468 <DC_Motor_Rotate+0x76>
    343e:	2e 81       	ldd	r18, Y+6	; 0x06
    3440:	3f 81       	ldd	r19, Y+7	; 0x07
    3442:	21 30       	cpi	r18, 0x01	; 1
    3444:	31 05       	cpc	r19, r1
    3446:	01 f5       	brne	.+64     	; 0x3488 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	63 e0       	ldi	r22, 0x03	; 3
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	65 e0       	ldi	r22, 0x05	; 5
    3456:	41 e0       	ldi	r20, 0x01	; 1
    3458:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	64 e0       	ldi	r22, 0x04	; 4
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
    3466:	43 c0       	rjmp	.+134    	; 0x34ee <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	63 e0       	ldi	r22, 0x03	; 3
    346c:	41 e0       	ldi	r20, 0x01	; 1
    346e:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	65 e0       	ldi	r22, 0x05	; 5
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	64 e0       	ldi	r22, 0x04	; 4
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
    3486:	33 c0       	rjmp	.+102    	; 0x34ee <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    3488:	19 82       	std	Y+1, r1	; 0x01
    348a:	31 c0       	rjmp	.+98     	; 0x34ee <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	3d 83       	std	Y+5, r19	; 0x05
    3494:	2c 83       	std	Y+4, r18	; 0x04
    3496:	8c 81       	ldd	r24, Y+4	; 0x04
    3498:	9d 81       	ldd	r25, Y+5	; 0x05
    349a:	00 97       	sbiw	r24, 0x00	; 0
    349c:	a9 f0       	breq	.+42     	; 0x34c8 <DC_Motor_Rotate+0xd6>
    349e:	2c 81       	ldd	r18, Y+4	; 0x04
    34a0:	3d 81       	ldd	r19, Y+5	; 0x05
    34a2:	21 30       	cpi	r18, 0x01	; 1
    34a4:	31 05       	cpc	r19, r1
    34a6:	01 f5       	brne	.+64     	; 0x34e8 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	62 e0       	ldi	r22, 0x02	; 2
    34ac:	41 e0       	ldi	r20, 0x01	; 1
    34ae:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	61 e0       	ldi	r22, 0x01	; 1
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	40 e0       	ldi	r20, 0x00	; 0
    34c2:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
    34c6:	13 c0       	rjmp	.+38     	; 0x34ee <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	62 e0       	ldi	r22, 0x02	; 2
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	61 e0       	ldi	r22, 0x01	; 1
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	60 e0       	ldi	r22, 0x00	; 0
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    34e8:	19 82       	std	Y+1, r1	; 0x01
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    34ec:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    34f0:	29 96       	adiw	r28, 0x09	; 9
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    3502:	df 93       	push	r29
    3504:	cf 93       	push	r28
    3506:	00 d0       	rcall	.+0      	; 0x3508 <DC_Motor_Stop+0x6>
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	88 23       	and	r24, r24
    3516:	31 f4       	brne	.+12     	; 0x3524 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	63 e0       	ldi	r22, 0x03	; 3
    351c:	40 e0       	ldi	r20, 0x00	; 0
    351e:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
    3522:	0a c0       	rjmp	.+20     	; 0x3538 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	81 30       	cpi	r24, 0x01	; 1
    3528:	31 f4       	brne	.+12     	; 0x3536 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	62 e0       	ldi	r22, 0x02	; 2
    352e:	40 e0       	ldi	r20, 0x00	; 0
    3530:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_u8SetPinValue>
    3534:	01 c0       	rjmp	.+2      	; 0x3538 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3536:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3538:	89 81       	ldd	r24, Y+1	; 0x01
}
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	cf 91       	pop	r28
    3540:	df 91       	pop	r29
    3542:	08 95       	ret

00003544 <First_Screen>:
#include<util/delay.h>
#define F_CPU 16000000UL

#define Password_Length	6

void First_Screen(){
    3544:	df 93       	push	r29
    3546:	cf 93       	push	r28
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	2e 97       	sbiw	r28, 0x0e	; 14
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	ac e0       	ldi	r26, 0x0C	; 12
    355e:	b2 e4       	ldi	r27, 0x42	; 66
    3560:	8b 87       	std	Y+11, r24	; 0x0b
    3562:	9c 87       	std	Y+12, r25	; 0x0c
    3564:	ad 87       	std	Y+13, r26	; 0x0d
    3566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3568:	6b 85       	ldd	r22, Y+11	; 0x0b
    356a:	7c 85       	ldd	r23, Y+12	; 0x0c
    356c:	8d 85       	ldd	r24, Y+13	; 0x0d
    356e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	4a e7       	ldi	r20, 0x7A	; 122
    3576:	55 e4       	ldi	r21, 0x45	; 69
    3578:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	8f 83       	std	Y+7, r24	; 0x07
    3582:	98 87       	std	Y+8, r25	; 0x08
    3584:	a9 87       	std	Y+9, r26	; 0x09
    3586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3588:	6f 81       	ldd	r22, Y+7	; 0x07
    358a:	78 85       	ldd	r23, Y+8	; 0x08
    358c:	89 85       	ldd	r24, Y+9	; 0x09
    358e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e8       	ldi	r20, 0x80	; 128
    3596:	5f e3       	ldi	r21, 0x3F	; 63
    3598:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    359c:	88 23       	and	r24, r24
    359e:	2c f4       	brge	.+10     	; 0x35aa <First_Screen+0x66>
		__ticks = 1;
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	9e 83       	std	Y+6, r25	; 0x06
    35a6:	8d 83       	std	Y+5, r24	; 0x05
    35a8:	3f c0       	rjmp	.+126    	; 0x3628 <First_Screen+0xe4>
	else if (__tmp > 65535)
    35aa:	6f 81       	ldd	r22, Y+7	; 0x07
    35ac:	78 85       	ldd	r23, Y+8	; 0x08
    35ae:	89 85       	ldd	r24, Y+9	; 0x09
    35b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	3f ef       	ldi	r19, 0xFF	; 255
    35b6:	4f e7       	ldi	r20, 0x7F	; 127
    35b8:	57 e4       	ldi	r21, 0x47	; 71
    35ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35be:	18 16       	cp	r1, r24
    35c0:	4c f5       	brge	.+82     	; 0x3614 <First_Screen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e2       	ldi	r20, 0x20	; 32
    35d0:	51 e4       	ldi	r21, 0x41	; 65
    35d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	bc 01       	movw	r22, r24
    35dc:	cd 01       	movw	r24, r26
    35de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	0f c0       	rjmp	.+30     	; 0x360a <First_Screen+0xc6>
    35ec:	80 e9       	ldi	r24, 0x90	; 144
    35ee:	91 e0       	ldi	r25, 0x01	; 1
    35f0:	9c 83       	std	Y+4, r25	; 0x04
    35f2:	8b 83       	std	Y+3, r24	; 0x03
    35f4:	8b 81       	ldd	r24, Y+3	; 0x03
    35f6:	9c 81       	ldd	r25, Y+4	; 0x04
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <First_Screen+0xb4>
    35fc:	9c 83       	std	Y+4, r25	; 0x04
    35fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3600:	8d 81       	ldd	r24, Y+5	; 0x05
    3602:	9e 81       	ldd	r25, Y+6	; 0x06
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	9e 83       	std	Y+6, r25	; 0x06
    3608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    360a:	8d 81       	ldd	r24, Y+5	; 0x05
    360c:	9e 81       	ldd	r25, Y+6	; 0x06
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	69 f7       	brne	.-38     	; 0x35ec <First_Screen+0xa8>
    3612:	14 c0       	rjmp	.+40     	; 0x363c <First_Screen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3614:	6f 81       	ldd	r22, Y+7	; 0x07
    3616:	78 85       	ldd	r23, Y+8	; 0x08
    3618:	89 85       	ldd	r24, Y+9	; 0x09
    361a:	9a 85       	ldd	r25, Y+10	; 0x0a
    361c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	9e 83       	std	Y+6, r25	; 0x06
    3626:	8d 83       	std	Y+5, r24	; 0x05
    3628:	8d 81       	ldd	r24, Y+5	; 0x05
    362a:	9e 81       	ldd	r25, Y+6	; 0x06
    362c:	9a 83       	std	Y+2, r25	; 0x02
    362e:	89 83       	std	Y+1, r24	; 0x01
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <First_Screen+0xf0>
    3638:	9a 83       	std	Y+2, r25	; 0x02
    363a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_ClearScreen();
    363c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>
	LCD_displayString("1-DC Motor");
    3640:	80 e6       	ldi	r24, 0x60	; 96
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
	LCD_GoToXY(1, 0);
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
	LCD_displayString("2-Stepper");
    3650:	8b e6       	ldi	r24, 0x6B	; 107
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
	LCD_GoToXY(1, 10);
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	6a e0       	ldi	r22, 0x0A	; 10
    365c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
	LCD_displayString("3-Exit");
    3660:	85 e7       	ldi	r24, 0x75	; 117
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
}
    3668:	2e 96       	adiw	r28, 0x0e	; 14
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	08 95       	ret

0000367a <Second_Screen>:

void Second_Screen(){
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    3682:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>
	LCD_displayString("1-CW Motor");
    3686:	8c e7       	ldi	r24, 0x7C	; 124
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
	LCD_GoToXY(1, 0);
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
	LCD_displayString("2-CCW Motor");
    3696:	87 e8       	ldi	r24, 0x87	; 135
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
	LCD_GoToXY(0, 10);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	6a e0       	ldi	r22, 0x0A	; 10
    36a2:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
	LCD_displayString("3-back");
    36a6:	83 e9       	ldi	r24, 0x93	; 147
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
}
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <StepperAngles_Screen>:

void StepperAngles_Screen(){
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    36bc:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>

	LCD_displayString("1-90");
    36c0:	8a e9       	ldi	r24, 0x9A	; 154
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>

	LCD_GoToXY(1, 0);
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
	LCD_displayString("2-180");
    36d0:	8f e9       	ldi	r24, 0x9F	; 159
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
}
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	08 95       	ret

000036de <StepperDirection_Screen>:

void StepperDirection_Screen(){
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    36e6:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>

	LCD_displayString("1-CW");
    36ea:	85 ea       	ldi	r24, 0xA5	; 165
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>

	LCD_GoToXY(1, 0);
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
	LCD_displayString("2-CCW");
    36fa:	8a ea       	ldi	r24, 0xAA	; 170
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
}
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <main>:

int main(){
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	c5 51       	subi	r28, 0x15	; 21
    3716:	d1 40       	sbci	r29, 0x01	; 1
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
	
	DC_Motor_Init(1, 1);
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	61 e0       	ldi	r22, 0x01	; 1
    3726:	0e 94 c1 19 	call	0x3382	; 0x3382 <DC_Motor_Init>

	Stepper_Init();
    372a:	0e 94 36 11 	call	0x226c	; 0x226c <Stepper_Init>


	u8 count;
	u8 c = 0;
    372e:	fe 01       	movw	r30, r28
    3730:	e7 50       	subi	r30, 0x07	; 7
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	10 82       	st	Z, r1
	LCD_setPortDirection(0, 0);
    3736:	80 e0       	ldi	r24, 0x00	; 0
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	60 e0       	ldi	r22, 0x00	; 0
    373c:	70 e0       	ldi	r23, 0x00	; 0
    373e:	0e 94 97 08 	call	0x112e	; 0x112e <LCD_setPortDirection>
	DIO_u8SetPortDirection(1, 1);
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	61 e0       	ldi	r22, 0x01	; 1
    3748:	70 e0       	ldi	r23, 0x00	; 0
    374a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <DIO_u8SetPortDirection>
	LCD_setPortDirection(2, 1);
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	61 e0       	ldi	r22, 0x01	; 1
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	0e 94 97 08 	call	0x112e	; 0x112e <LCD_setPortDirection>
	LCD_setPortDirection(3, 1);
    375a:	83 e0       	ldi	r24, 0x03	; 3
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	61 e0       	ldi	r22, 0x01	; 1
    3760:	70 e0       	ldi	r23, 0x00	; 0
    3762:	0e 94 97 08 	call	0x112e	; 0x112e <LCD_setPortDirection>
	LCD_init();
    3766:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <LCD_init>

	u8 pressed_Keys[10];
	u8 password[10] = "#2020#";
    376a:	ce 01       	movw	r24, r28
    376c:	8b 5f       	subi	r24, 0xFB	; 251
    376e:	9e 4f       	sbci	r25, 0xFE	; 254
    3770:	c1 5f       	subi	r28, 0xF1	; 241
    3772:	de 4f       	sbci	r29, 0xFE	; 254
    3774:	99 83       	std	Y+1, r25	; 0x01
    3776:	88 83       	st	Y, r24
    3778:	cf 50       	subi	r28, 0x0F	; 15
    377a:	d1 40       	sbci	r29, 0x01	; 1
    377c:	c1 5f       	subi	r28, 0xF1	; 241
    377e:	de 4f       	sbci	r29, 0xFE	; 254
    3780:	a8 81       	ld	r26, Y
    3782:	b9 81       	ldd	r27, Y+1	; 0x01
    3784:	cf 50       	subi	r28, 0x0F	; 15
    3786:	d1 40       	sbci	r29, 0x01	; 1
    3788:	cf 5e       	subi	r28, 0xEF	; 239
    378a:	de 4f       	sbci	r29, 0xFE	; 254
    378c:	b9 83       	std	Y+1, r27	; 0x01
    378e:	a8 83       	st	Y, r26
    3790:	c1 51       	subi	r28, 0x11	; 17
    3792:	d1 40       	sbci	r29, 0x01	; 1
    3794:	e1 ef       	ldi	r30, 0xF1	; 241
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	cd 5e       	subi	r28, 0xED	; 237
    379a:	de 4f       	sbci	r29, 0xFE	; 254
    379c:	f9 83       	std	Y+1, r31	; 0x01
    379e:	e8 83       	st	Y, r30
    37a0:	c3 51       	subi	r28, 0x13	; 19
    37a2:	d1 40       	sbci	r29, 0x01	; 1
    37a4:	f7 e0       	ldi	r31, 0x07	; 7
    37a6:	cb 5e       	subi	r28, 0xEB	; 235
    37a8:	de 4f       	sbci	r29, 0xFE	; 254
    37aa:	f8 83       	st	Y, r31
    37ac:	c5 51       	subi	r28, 0x15	; 21
    37ae:	d1 40       	sbci	r29, 0x01	; 1
    37b0:	cd 5e       	subi	r28, 0xED	; 237
    37b2:	de 4f       	sbci	r29, 0xFE	; 254
    37b4:	a8 81       	ld	r26, Y
    37b6:	b9 81       	ldd	r27, Y+1	; 0x01
    37b8:	c3 51       	subi	r28, 0x13	; 19
    37ba:	d1 40       	sbci	r29, 0x01	; 1
    37bc:	0c 90       	ld	r0, X
    37be:	cd 5e       	subi	r28, 0xED	; 237
    37c0:	de 4f       	sbci	r29, 0xFE	; 254
    37c2:	e8 81       	ld	r30, Y
    37c4:	f9 81       	ldd	r31, Y+1	; 0x01
    37c6:	c3 51       	subi	r28, 0x13	; 19
    37c8:	d1 40       	sbci	r29, 0x01	; 1
    37ca:	31 96       	adiw	r30, 0x01	; 1
    37cc:	cd 5e       	subi	r28, 0xED	; 237
    37ce:	de 4f       	sbci	r29, 0xFE	; 254
    37d0:	f9 83       	std	Y+1, r31	; 0x01
    37d2:	e8 83       	st	Y, r30
    37d4:	c3 51       	subi	r28, 0x13	; 19
    37d6:	d1 40       	sbci	r29, 0x01	; 1
    37d8:	cf 5e       	subi	r28, 0xEF	; 239
    37da:	de 4f       	sbci	r29, 0xFE	; 254
    37dc:	a8 81       	ld	r26, Y
    37de:	b9 81       	ldd	r27, Y+1	; 0x01
    37e0:	c1 51       	subi	r28, 0x11	; 17
    37e2:	d1 40       	sbci	r29, 0x01	; 1
    37e4:	0c 92       	st	X, r0
    37e6:	cf 5e       	subi	r28, 0xEF	; 239
    37e8:	de 4f       	sbci	r29, 0xFE	; 254
    37ea:	e8 81       	ld	r30, Y
    37ec:	f9 81       	ldd	r31, Y+1	; 0x01
    37ee:	c1 51       	subi	r28, 0x11	; 17
    37f0:	d1 40       	sbci	r29, 0x01	; 1
    37f2:	31 96       	adiw	r30, 0x01	; 1
    37f4:	cf 5e       	subi	r28, 0xEF	; 239
    37f6:	de 4f       	sbci	r29, 0xFE	; 254
    37f8:	f9 83       	std	Y+1, r31	; 0x01
    37fa:	e8 83       	st	Y, r30
    37fc:	c1 51       	subi	r28, 0x11	; 17
    37fe:	d1 40       	sbci	r29, 0x01	; 1
    3800:	cb 5e       	subi	r28, 0xEB	; 235
    3802:	de 4f       	sbci	r29, 0xFE	; 254
    3804:	f8 81       	ld	r31, Y
    3806:	c5 51       	subi	r28, 0x15	; 21
    3808:	d1 40       	sbci	r29, 0x01	; 1
    380a:	f1 50       	subi	r31, 0x01	; 1
    380c:	cb 5e       	subi	r28, 0xEB	; 235
    380e:	de 4f       	sbci	r29, 0xFE	; 254
    3810:	f8 83       	st	Y, r31
    3812:	c5 51       	subi	r28, 0x15	; 21
    3814:	d1 40       	sbci	r29, 0x01	; 1
    3816:	cb 5e       	subi	r28, 0xEB	; 235
    3818:	de 4f       	sbci	r29, 0xFE	; 254
    381a:	88 81       	ld	r24, Y
    381c:	c5 51       	subi	r28, 0x15	; 21
    381e:	d1 40       	sbci	r29, 0x01	; 1
    3820:	88 23       	and	r24, r24
    3822:	31 f6       	brne	.-116    	; 0x37b0 <main+0xa8>
    3824:	83 e0       	ldi	r24, 0x03	; 3
    3826:	c1 5f       	subi	r28, 0xF1	; 241
    3828:	de 4f       	sbci	r29, 0xFE	; 254
    382a:	e8 81       	ld	r30, Y
    382c:	f9 81       	ldd	r31, Y+1	; 0x01
    382e:	cf 50       	subi	r28, 0x0F	; 15
    3830:	d1 40       	sbci	r29, 0x01	; 1
    3832:	37 96       	adiw	r30, 0x07	; 7
    3834:	df 01       	movw	r26, r30
    3836:	98 2f       	mov	r25, r24
    3838:	1d 92       	st	X+, r1
    383a:	9a 95       	dec	r25
    383c:	e9 f7       	brne	.-6      	; 0x3838 <main+0x130>

	LCD_String_xy(0, 0, "Enter Password", &count);
    383e:	20 eb       	ldi	r18, 0xB0	; 176
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	fe 01       	movw	r30, r28
    3844:	e6 50       	subi	r30, 0x06	; 6
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	a9 01       	movw	r20, r18
    384e:	9f 01       	movw	r18, r30
    3850:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <LCD_String_xy>
	LCD_GoToXY(1, 0);
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	60 e0       	ldi	r22, 0x00	; 0
    3858:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>




	while(1){
		u8 key_Pressed = Keypad_GetPressedKey();
    385c:	0e 94 35 19 	call	0x326a	; 0x326a <Keypad_GetPressedKey>
    3860:	fe 01       	movw	r30, r28
    3862:	e8 50       	subi	r30, 0x08	; 8
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	80 83       	st	Z, r24

		if(key_Pressed == 1){
    3868:	fe 01       	movw	r30, r28
    386a:	e8 50       	subi	r30, 0x08	; 8
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	80 81       	ld	r24, Z
    3870:	81 30       	cpi	r24, 0x01	; 1
    3872:	09 f0       	breq	.+2      	; 0x3876 <main+0x16e>
    3874:	ce c0       	rjmp	.+412    	; 0x3a12 <main+0x30a>
			LCD_displayCharacter('*');
    3876:	8a e2       	ldi	r24, 0x2A	; 42
    3878:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '1';
    387c:	fe 01       	movw	r30, r28
    387e:	e7 50       	subi	r30, 0x07	; 7
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	80 81       	ld	r24, Z
    3884:	28 2f       	mov	r18, r24
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	ce 01       	movw	r24, r28
    388a:	85 50       	subi	r24, 0x05	; 5
    388c:	9f 4f       	sbci	r25, 0xFF	; 255
    388e:	fc 01       	movw	r30, r24
    3890:	e2 0f       	add	r30, r18
    3892:	f3 1f       	adc	r31, r19
    3894:	81 e3       	ldi	r24, 0x31	; 49
    3896:	80 83       	st	Z, r24
			c++;
    3898:	de 01       	movw	r26, r28
    389a:	a7 50       	subi	r26, 0x07	; 7
    389c:	bf 4f       	sbci	r27, 0xFF	; 255
    389e:	fe 01       	movw	r30, r28
    38a0:	e7 50       	subi	r30, 0x07	; 7
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	8f 5f       	subi	r24, 0xFF	; 255
    38a8:	8c 93       	st	X, r24
    38aa:	fe 01       	movw	r30, r28
    38ac:	e5 51       	subi	r30, 0x15	; 21
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	ac e0       	ldi	r26, 0x0C	; 12
    38b6:	b2 e4       	ldi	r27, 0x42	; 66
    38b8:	80 83       	st	Z, r24
    38ba:	91 83       	std	Z+1, r25	; 0x01
    38bc:	a2 83       	std	Z+2, r26	; 0x02
    38be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c0:	8e 01       	movw	r16, r28
    38c2:	09 51       	subi	r16, 0x19	; 25
    38c4:	1f 4f       	sbci	r17, 0xFF	; 255
    38c6:	fe 01       	movw	r30, r28
    38c8:	e5 51       	subi	r30, 0x15	; 21
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	60 81       	ld	r22, Z
    38ce:	71 81       	ldd	r23, Z+1	; 0x01
    38d0:	82 81       	ldd	r24, Z+2	; 0x02
    38d2:	93 81       	ldd	r25, Z+3	; 0x03
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	4a e7       	ldi	r20, 0x7A	; 122
    38da:	55 e4       	ldi	r21, 0x45	; 69
    38dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	f8 01       	movw	r30, r16
    38e6:	80 83       	st	Z, r24
    38e8:	91 83       	std	Z+1, r25	; 0x01
    38ea:	a2 83       	std	Z+2, r26	; 0x02
    38ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38ee:	fe 01       	movw	r30, r28
    38f0:	e9 51       	subi	r30, 0x19	; 25
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	60 81       	ld	r22, Z
    38f6:	71 81       	ldd	r23, Z+1	; 0x01
    38f8:	82 81       	ldd	r24, Z+2	; 0x02
    38fa:	93 81       	ldd	r25, Z+3	; 0x03
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e8       	ldi	r20, 0x80	; 128
    3902:	5f e3       	ldi	r21, 0x3F	; 63
    3904:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3908:	88 23       	and	r24, r24
    390a:	44 f4       	brge	.+16     	; 0x391c <main+0x214>
		__ticks = 1;
    390c:	fe 01       	movw	r30, r28
    390e:	eb 51       	subi	r30, 0x1B	; 27
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	91 83       	std	Z+1, r25	; 0x01
    3918:	80 83       	st	Z, r24
    391a:	64 c0       	rjmp	.+200    	; 0x39e4 <main+0x2dc>
	else if (__tmp > 65535)
    391c:	fe 01       	movw	r30, r28
    391e:	e9 51       	subi	r30, 0x19	; 25
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	60 81       	ld	r22, Z
    3924:	71 81       	ldd	r23, Z+1	; 0x01
    3926:	82 81       	ldd	r24, Z+2	; 0x02
    3928:	93 81       	ldd	r25, Z+3	; 0x03
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	3f ef       	ldi	r19, 0xFF	; 255
    392e:	4f e7       	ldi	r20, 0x7F	; 127
    3930:	57 e4       	ldi	r21, 0x47	; 71
    3932:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3936:	18 16       	cp	r1, r24
    3938:	0c f0       	brlt	.+2      	; 0x393c <main+0x234>
    393a:	43 c0       	rjmp	.+134    	; 0x39c2 <main+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393c:	fe 01       	movw	r30, r28
    393e:	e5 51       	subi	r30, 0x15	; 21
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	40 e2       	ldi	r20, 0x20	; 32
    3950:	51 e4       	ldi	r21, 0x41	; 65
    3952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	8e 01       	movw	r16, r28
    395c:	0b 51       	subi	r16, 0x1B	; 27
    395e:	1f 4f       	sbci	r17, 0xFF	; 255
    3960:	bc 01       	movw	r22, r24
    3962:	cd 01       	movw	r24, r26
    3964:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	f8 01       	movw	r30, r16
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	80 83       	st	Z, r24
    3972:	1f c0       	rjmp	.+62     	; 0x39b2 <main+0x2aa>
    3974:	fe 01       	movw	r30, r28
    3976:	ed 51       	subi	r30, 0x1D	; 29
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	80 e9       	ldi	r24, 0x90	; 144
    397c:	91 e0       	ldi	r25, 0x01	; 1
    397e:	91 83       	std	Z+1, r25	; 0x01
    3980:	80 83       	st	Z, r24
    3982:	fe 01       	movw	r30, r28
    3984:	ed 51       	subi	r30, 0x1D	; 29
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	80 81       	ld	r24, Z
    398a:	91 81       	ldd	r25, Z+1	; 0x01
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <main+0x284>
    3990:	fe 01       	movw	r30, r28
    3992:	ed 51       	subi	r30, 0x1D	; 29
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	91 83       	std	Z+1, r25	; 0x01
    3998:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    399a:	de 01       	movw	r26, r28
    399c:	ab 51       	subi	r26, 0x1B	; 27
    399e:	bf 4f       	sbci	r27, 0xFF	; 255
    39a0:	fe 01       	movw	r30, r28
    39a2:	eb 51       	subi	r30, 0x1B	; 27
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	80 81       	ld	r24, Z
    39a8:	91 81       	ldd	r25, Z+1	; 0x01
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	11 96       	adiw	r26, 0x01	; 1
    39ae:	9c 93       	st	X, r25
    39b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b2:	fe 01       	movw	r30, r28
    39b4:	eb 51       	subi	r30, 0x1B	; 27
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	80 81       	ld	r24, Z
    39ba:	91 81       	ldd	r25, Z+1	; 0x01
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	d1 f6       	brne	.-76     	; 0x3974 <main+0x26c>
    39c0:	28 c0       	rjmp	.+80     	; 0x3a12 <main+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c2:	8e 01       	movw	r16, r28
    39c4:	0b 51       	subi	r16, 0x1B	; 27
    39c6:	1f 4f       	sbci	r17, 0xFF	; 255
    39c8:	fe 01       	movw	r30, r28
    39ca:	e9 51       	subi	r30, 0x19	; 25
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	60 81       	ld	r22, Z
    39d0:	71 81       	ldd	r23, Z+1	; 0x01
    39d2:	82 81       	ldd	r24, Z+2	; 0x02
    39d4:	93 81       	ldd	r25, Z+3	; 0x03
    39d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	f8 01       	movw	r30, r16
    39e0:	91 83       	std	Z+1, r25	; 0x01
    39e2:	80 83       	st	Z, r24
    39e4:	de 01       	movw	r26, r28
    39e6:	af 51       	subi	r26, 0x1F	; 31
    39e8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ea:	fe 01       	movw	r30, r28
    39ec:	eb 51       	subi	r30, 0x1B	; 27
    39ee:	ff 4f       	sbci	r31, 0xFF	; 255
    39f0:	80 81       	ld	r24, Z
    39f2:	91 81       	ldd	r25, Z+1	; 0x01
    39f4:	11 96       	adiw	r26, 0x01	; 1
    39f6:	9c 93       	st	X, r25
    39f8:	8e 93       	st	-X, r24
    39fa:	fe 01       	movw	r30, r28
    39fc:	ef 51       	subi	r30, 0x1F	; 31
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	80 81       	ld	r24, Z
    3a02:	91 81       	ldd	r25, Z+1	; 0x01
    3a04:	01 97       	sbiw	r24, 0x01	; 1
    3a06:	f1 f7       	brne	.-4      	; 0x3a04 <main+0x2fc>
    3a08:	fe 01       	movw	r30, r28
    3a0a:	ef 51       	subi	r30, 0x1F	; 31
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	91 83       	std	Z+1, r25	; 0x01
    3a10:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 2){
    3a12:	fe 01       	movw	r30, r28
    3a14:	e8 50       	subi	r30, 0x08	; 8
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	82 30       	cpi	r24, 0x02	; 2
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <main+0x318>
    3a1e:	ce c0       	rjmp	.+412    	; 0x3bbc <main+0x4b4>
			LCD_displayCharacter('*');
    3a20:	8a e2       	ldi	r24, 0x2A	; 42
    3a22:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '2';
    3a26:	fe 01       	movw	r30, r28
    3a28:	e7 50       	subi	r30, 0x07	; 7
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	80 81       	ld	r24, Z
    3a2e:	28 2f       	mov	r18, r24
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	ce 01       	movw	r24, r28
    3a34:	85 50       	subi	r24, 0x05	; 5
    3a36:	9f 4f       	sbci	r25, 0xFF	; 255
    3a38:	fc 01       	movw	r30, r24
    3a3a:	e2 0f       	add	r30, r18
    3a3c:	f3 1f       	adc	r31, r19
    3a3e:	82 e3       	ldi	r24, 0x32	; 50
    3a40:	80 83       	st	Z, r24
			c++;
    3a42:	de 01       	movw	r26, r28
    3a44:	a7 50       	subi	r26, 0x07	; 7
    3a46:	bf 4f       	sbci	r27, 0xFF	; 255
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e7 50       	subi	r30, 0x07	; 7
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	80 81       	ld	r24, Z
    3a50:	8f 5f       	subi	r24, 0xFF	; 255
    3a52:	8c 93       	st	X, r24
    3a54:	fe 01       	movw	r30, r28
    3a56:	e3 52       	subi	r30, 0x23	; 35
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	ac e0       	ldi	r26, 0x0C	; 12
    3a60:	b2 e4       	ldi	r27, 0x42	; 66
    3a62:	80 83       	st	Z, r24
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	a2 83       	std	Z+2, r26	; 0x02
    3a68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6a:	8e 01       	movw	r16, r28
    3a6c:	07 52       	subi	r16, 0x27	; 39
    3a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a70:	fe 01       	movw	r30, r28
    3a72:	e3 52       	subi	r30, 0x23	; 35
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	60 81       	ld	r22, Z
    3a78:	71 81       	ldd	r23, Z+1	; 0x01
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	4a e7       	ldi	r20, 0x7A	; 122
    3a84:	55 e4       	ldi	r21, 0x45	; 69
    3a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	f8 01       	movw	r30, r16
    3a90:	80 83       	st	Z, r24
    3a92:	91 83       	std	Z+1, r25	; 0x01
    3a94:	a2 83       	std	Z+2, r26	; 0x02
    3a96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e7 52       	subi	r30, 0x27	; 39
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	60 81       	ld	r22, Z
    3aa0:	71 81       	ldd	r23, Z+1	; 0x01
    3aa2:	82 81       	ldd	r24, Z+2	; 0x02
    3aa4:	93 81       	ldd	r25, Z+3	; 0x03
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e8       	ldi	r20, 0x80	; 128
    3aac:	5f e3       	ldi	r21, 0x3F	; 63
    3aae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3ab2:	88 23       	and	r24, r24
    3ab4:	44 f4       	brge	.+16     	; 0x3ac6 <main+0x3be>
		__ticks = 1;
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e9 52       	subi	r30, 0x29	; 41
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
    3ac4:	64 c0       	rjmp	.+200    	; 0x3b8e <main+0x486>
	else if (__tmp > 65535)
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e7 52       	subi	r30, 0x27	; 39
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	60 81       	ld	r22, Z
    3ace:	71 81       	ldd	r23, Z+1	; 0x01
    3ad0:	82 81       	ldd	r24, Z+2	; 0x02
    3ad2:	93 81       	ldd	r25, Z+3	; 0x03
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	3f ef       	ldi	r19, 0xFF	; 255
    3ad8:	4f e7       	ldi	r20, 0x7F	; 127
    3ada:	57 e4       	ldi	r21, 0x47	; 71
    3adc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3ae0:	18 16       	cp	r1, r24
    3ae2:	0c f0       	brlt	.+2      	; 0x3ae6 <main+0x3de>
    3ae4:	43 c0       	rjmp	.+134    	; 0x3b6c <main+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	e3 52       	subi	r30, 0x23	; 35
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	60 81       	ld	r22, Z
    3aee:	71 81       	ldd	r23, Z+1	; 0x01
    3af0:	82 81       	ldd	r24, Z+2	; 0x02
    3af2:	93 81       	ldd	r25, Z+3	; 0x03
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e2       	ldi	r20, 0x20	; 32
    3afa:	51 e4       	ldi	r21, 0x41	; 65
    3afc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	8e 01       	movw	r16, r28
    3b06:	09 52       	subi	r16, 0x29	; 41
    3b08:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0a:	bc 01       	movw	r22, r24
    3b0c:	cd 01       	movw	r24, r26
    3b0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	f8 01       	movw	r30, r16
    3b18:	91 83       	std	Z+1, r25	; 0x01
    3b1a:	80 83       	st	Z, r24
    3b1c:	1f c0       	rjmp	.+62     	; 0x3b5c <main+0x454>
    3b1e:	fe 01       	movw	r30, r28
    3b20:	eb 52       	subi	r30, 0x2B	; 43
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	80 e9       	ldi	r24, 0x90	; 144
    3b26:	91 e0       	ldi	r25, 0x01	; 1
    3b28:	91 83       	std	Z+1, r25	; 0x01
    3b2a:	80 83       	st	Z, r24
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	eb 52       	subi	r30, 0x2B	; 43
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	80 81       	ld	r24, Z
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <main+0x42e>
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	eb 52       	subi	r30, 0x2B	; 43
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	91 83       	std	Z+1, r25	; 0x01
    3b42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b44:	de 01       	movw	r26, r28
    3b46:	a9 52       	subi	r26, 0x29	; 41
    3b48:	bf 4f       	sbci	r27, 0xFF	; 255
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	e9 52       	subi	r30, 0x29	; 41
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	11 96       	adiw	r26, 0x01	; 1
    3b58:	9c 93       	st	X, r25
    3b5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e9 52       	subi	r30, 0x29	; 41
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	80 81       	ld	r24, Z
    3b64:	91 81       	ldd	r25, Z+1	; 0x01
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	d1 f6       	brne	.-76     	; 0x3b1e <main+0x416>
    3b6a:	28 c0       	rjmp	.+80     	; 0x3bbc <main+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6c:	8e 01       	movw	r16, r28
    3b6e:	09 52       	subi	r16, 0x29	; 41
    3b70:	1f 4f       	sbci	r17, 0xFF	; 255
    3b72:	fe 01       	movw	r30, r28
    3b74:	e7 52       	subi	r30, 0x27	; 39
    3b76:	ff 4f       	sbci	r31, 0xFF	; 255
    3b78:	60 81       	ld	r22, Z
    3b7a:	71 81       	ldd	r23, Z+1	; 0x01
    3b7c:	82 81       	ldd	r24, Z+2	; 0x02
    3b7e:	93 81       	ldd	r25, Z+3	; 0x03
    3b80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	f8 01       	movw	r30, r16
    3b8a:	91 83       	std	Z+1, r25	; 0x01
    3b8c:	80 83       	st	Z, r24
    3b8e:	de 01       	movw	r26, r28
    3b90:	ad 52       	subi	r26, 0x2D	; 45
    3b92:	bf 4f       	sbci	r27, 0xFF	; 255
    3b94:	fe 01       	movw	r30, r28
    3b96:	e9 52       	subi	r30, 0x29	; 41
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	80 81       	ld	r24, Z
    3b9c:	91 81       	ldd	r25, Z+1	; 0x01
    3b9e:	11 96       	adiw	r26, 0x01	; 1
    3ba0:	9c 93       	st	X, r25
    3ba2:	8e 93       	st	-X, r24
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	ed 52       	subi	r30, 0x2D	; 45
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	80 81       	ld	r24, Z
    3bac:	91 81       	ldd	r25, Z+1	; 0x01
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <main+0x4a6>
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	ed 52       	subi	r30, 0x2D	; 45
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	91 83       	std	Z+1, r25	; 0x01
    3bba:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 3){
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e8 50       	subi	r30, 0x08	; 8
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	80 81       	ld	r24, Z
    3bc4:	83 30       	cpi	r24, 0x03	; 3
    3bc6:	09 f0       	breq	.+2      	; 0x3bca <main+0x4c2>
    3bc8:	ce c0       	rjmp	.+412    	; 0x3d66 <main+0x65e>
			LCD_displayCharacter('*');
    3bca:	8a e2       	ldi	r24, 0x2A	; 42
    3bcc:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '3';
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	e7 50       	subi	r30, 0x07	; 7
    3bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd6:	80 81       	ld	r24, Z
    3bd8:	28 2f       	mov	r18, r24
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	ce 01       	movw	r24, r28
    3bde:	85 50       	subi	r24, 0x05	; 5
    3be0:	9f 4f       	sbci	r25, 0xFF	; 255
    3be2:	fc 01       	movw	r30, r24
    3be4:	e2 0f       	add	r30, r18
    3be6:	f3 1f       	adc	r31, r19
    3be8:	83 e3       	ldi	r24, 0x33	; 51
    3bea:	80 83       	st	Z, r24
			c++;
    3bec:	de 01       	movw	r26, r28
    3bee:	a7 50       	subi	r26, 0x07	; 7
    3bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	e7 50       	subi	r30, 0x07	; 7
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	80 81       	ld	r24, Z
    3bfa:	8f 5f       	subi	r24, 0xFF	; 255
    3bfc:	8c 93       	st	X, r24
    3bfe:	fe 01       	movw	r30, r28
    3c00:	e1 53       	subi	r30, 0x31	; 49
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	ac e0       	ldi	r26, 0x0C	; 12
    3c0a:	b2 e4       	ldi	r27, 0x42	; 66
    3c0c:	80 83       	st	Z, r24
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	a2 83       	std	Z+2, r26	; 0x02
    3c12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c14:	8e 01       	movw	r16, r28
    3c16:	05 53       	subi	r16, 0x35	; 53
    3c18:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e1 53       	subi	r30, 0x31	; 49
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	60 81       	ld	r22, Z
    3c22:	71 81       	ldd	r23, Z+1	; 0x01
    3c24:	82 81       	ldd	r24, Z+2	; 0x02
    3c26:	93 81       	ldd	r25, Z+3	; 0x03
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	4a e7       	ldi	r20, 0x7A	; 122
    3c2e:	55 e4       	ldi	r21, 0x45	; 69
    3c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	f8 01       	movw	r30, r16
    3c3a:	80 83       	st	Z, r24
    3c3c:	91 83       	std	Z+1, r25	; 0x01
    3c3e:	a2 83       	std	Z+2, r26	; 0x02
    3c40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c42:	fe 01       	movw	r30, r28
    3c44:	e5 53       	subi	r30, 0x35	; 53
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	60 81       	ld	r22, Z
    3c4a:	71 81       	ldd	r23, Z+1	; 0x01
    3c4c:	82 81       	ldd	r24, Z+2	; 0x02
    3c4e:	93 81       	ldd	r25, Z+3	; 0x03
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e8       	ldi	r20, 0x80	; 128
    3c56:	5f e3       	ldi	r21, 0x3F	; 63
    3c58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3c5c:	88 23       	and	r24, r24
    3c5e:	44 f4       	brge	.+16     	; 0x3c70 <main+0x568>
		__ticks = 1;
    3c60:	fe 01       	movw	r30, r28
    3c62:	e7 53       	subi	r30, 0x37	; 55
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	91 83       	std	Z+1, r25	; 0x01
    3c6c:	80 83       	st	Z, r24
    3c6e:	64 c0       	rjmp	.+200    	; 0x3d38 <main+0x630>
	else if (__tmp > 65535)
    3c70:	fe 01       	movw	r30, r28
    3c72:	e5 53       	subi	r30, 0x35	; 53
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	60 81       	ld	r22, Z
    3c78:	71 81       	ldd	r23, Z+1	; 0x01
    3c7a:	82 81       	ldd	r24, Z+2	; 0x02
    3c7c:	93 81       	ldd	r25, Z+3	; 0x03
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	3f ef       	ldi	r19, 0xFF	; 255
    3c82:	4f e7       	ldi	r20, 0x7F	; 127
    3c84:	57 e4       	ldi	r21, 0x47	; 71
    3c86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c8a:	18 16       	cp	r1, r24
    3c8c:	0c f0       	brlt	.+2      	; 0x3c90 <main+0x588>
    3c8e:	43 c0       	rjmp	.+134    	; 0x3d16 <main+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c90:	fe 01       	movw	r30, r28
    3c92:	e1 53       	subi	r30, 0x31	; 49
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	60 81       	ld	r22, Z
    3c98:	71 81       	ldd	r23, Z+1	; 0x01
    3c9a:	82 81       	ldd	r24, Z+2	; 0x02
    3c9c:	93 81       	ldd	r25, Z+3	; 0x03
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	8e 01       	movw	r16, r28
    3cb0:	07 53       	subi	r16, 0x37	; 55
    3cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb4:	bc 01       	movw	r22, r24
    3cb6:	cd 01       	movw	r24, r26
    3cb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
    3cc6:	1f c0       	rjmp	.+62     	; 0x3d06 <main+0x5fe>
    3cc8:	fe 01       	movw	r30, r28
    3cca:	e9 53       	subi	r30, 0x39	; 57
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	80 e9       	ldi	r24, 0x90	; 144
    3cd0:	91 e0       	ldi	r25, 0x01	; 1
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	80 83       	st	Z, r24
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	e9 53       	subi	r30, 0x39	; 57
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	80 81       	ld	r24, Z
    3cde:	91 81       	ldd	r25, Z+1	; 0x01
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
    3ce2:	f1 f7       	brne	.-4      	; 0x3ce0 <main+0x5d8>
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e9 53       	subi	r30, 0x39	; 57
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	91 83       	std	Z+1, r25	; 0x01
    3cec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cee:	de 01       	movw	r26, r28
    3cf0:	a7 53       	subi	r26, 0x37	; 55
    3cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf4:	fe 01       	movw	r30, r28
    3cf6:	e7 53       	subi	r30, 0x37	; 55
    3cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfa:	80 81       	ld	r24, Z
    3cfc:	91 81       	ldd	r25, Z+1	; 0x01
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	11 96       	adiw	r26, 0x01	; 1
    3d02:	9c 93       	st	X, r25
    3d04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d06:	fe 01       	movw	r30, r28
    3d08:	e7 53       	subi	r30, 0x37	; 55
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	00 97       	sbiw	r24, 0x00	; 0
    3d12:	d1 f6       	brne	.-76     	; 0x3cc8 <main+0x5c0>
    3d14:	28 c0       	rjmp	.+80     	; 0x3d66 <main+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d16:	8e 01       	movw	r16, r28
    3d18:	07 53       	subi	r16, 0x37	; 55
    3d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	e5 53       	subi	r30, 0x35	; 53
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	60 81       	ld	r22, Z
    3d24:	71 81       	ldd	r23, Z+1	; 0x01
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	93 81       	ldd	r25, Z+3	; 0x03
    3d2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	f8 01       	movw	r30, r16
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	80 83       	st	Z, r24
    3d38:	de 01       	movw	r26, r28
    3d3a:	ab 53       	subi	r26, 0x3B	; 59
    3d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d3e:	fe 01       	movw	r30, r28
    3d40:	e7 53       	subi	r30, 0x37	; 55
    3d42:	ff 4f       	sbci	r31, 0xFF	; 255
    3d44:	80 81       	ld	r24, Z
    3d46:	91 81       	ldd	r25, Z+1	; 0x01
    3d48:	11 96       	adiw	r26, 0x01	; 1
    3d4a:	9c 93       	st	X, r25
    3d4c:	8e 93       	st	-X, r24
    3d4e:	fe 01       	movw	r30, r28
    3d50:	eb 53       	subi	r30, 0x3B	; 59
    3d52:	ff 4f       	sbci	r31, 0xFF	; 255
    3d54:	80 81       	ld	r24, Z
    3d56:	91 81       	ldd	r25, Z+1	; 0x01
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	f1 f7       	brne	.-4      	; 0x3d58 <main+0x650>
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	eb 53       	subi	r30, 0x3B	; 59
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	91 83       	std	Z+1, r25	; 0x01
    3d64:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 4){
    3d66:	fe 01       	movw	r30, r28
    3d68:	e8 50       	subi	r30, 0x08	; 8
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	80 81       	ld	r24, Z
    3d6e:	84 30       	cpi	r24, 0x04	; 4
    3d70:	09 f0       	breq	.+2      	; 0x3d74 <main+0x66c>
    3d72:	ce c0       	rjmp	.+412    	; 0x3f10 <main+0x808>
			LCD_displayCharacter('*');
    3d74:	8a e2       	ldi	r24, 0x2A	; 42
    3d76:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '4';
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e7 50       	subi	r30, 0x07	; 7
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	80 81       	ld	r24, Z
    3d82:	28 2f       	mov	r18, r24
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	ce 01       	movw	r24, r28
    3d88:	85 50       	subi	r24, 0x05	; 5
    3d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8c:	fc 01       	movw	r30, r24
    3d8e:	e2 0f       	add	r30, r18
    3d90:	f3 1f       	adc	r31, r19
    3d92:	84 e3       	ldi	r24, 0x34	; 52
    3d94:	80 83       	st	Z, r24
			c++;
    3d96:	de 01       	movw	r26, r28
    3d98:	a7 50       	subi	r26, 0x07	; 7
    3d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	e7 50       	subi	r30, 0x07	; 7
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	80 81       	ld	r24, Z
    3da4:	8f 5f       	subi	r24, 0xFF	; 255
    3da6:	8c 93       	st	X, r24
    3da8:	fe 01       	movw	r30, r28
    3daa:	ef 53       	subi	r30, 0x3F	; 63
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	ac e0       	ldi	r26, 0x0C	; 12
    3db4:	b2 e4       	ldi	r27, 0x42	; 66
    3db6:	80 83       	st	Z, r24
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	a2 83       	std	Z+2, r26	; 0x02
    3dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dbe:	8e 01       	movw	r16, r28
    3dc0:	03 54       	subi	r16, 0x43	; 67
    3dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	ef 53       	subi	r30, 0x3F	; 63
    3dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dca:	60 81       	ld	r22, Z
    3dcc:	71 81       	ldd	r23, Z+1	; 0x01
    3dce:	82 81       	ldd	r24, Z+2	; 0x02
    3dd0:	93 81       	ldd	r25, Z+3	; 0x03
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	4a e7       	ldi	r20, 0x7A	; 122
    3dd8:	55 e4       	ldi	r21, 0x45	; 69
    3dda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	f8 01       	movw	r30, r16
    3de4:	80 83       	st	Z, r24
    3de6:	91 83       	std	Z+1, r25	; 0x01
    3de8:	a2 83       	std	Z+2, r26	; 0x02
    3dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dec:	fe 01       	movw	r30, r28
    3dee:	e3 54       	subi	r30, 0x43	; 67
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	60 81       	ld	r22, Z
    3df4:	71 81       	ldd	r23, Z+1	; 0x01
    3df6:	82 81       	ldd	r24, Z+2	; 0x02
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e8       	ldi	r20, 0x80	; 128
    3e00:	5f e3       	ldi	r21, 0x3F	; 63
    3e02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e06:	88 23       	and	r24, r24
    3e08:	44 f4       	brge	.+16     	; 0x3e1a <main+0x712>
		__ticks = 1;
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e5 54       	subi	r30, 0x45	; 69
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	80 83       	st	Z, r24
    3e18:	64 c0       	rjmp	.+200    	; 0x3ee2 <main+0x7da>
	else if (__tmp > 65535)
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	e3 54       	subi	r30, 0x43	; 67
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	60 81       	ld	r22, Z
    3e22:	71 81       	ldd	r23, Z+1	; 0x01
    3e24:	82 81       	ldd	r24, Z+2	; 0x02
    3e26:	93 81       	ldd	r25, Z+3	; 0x03
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	3f ef       	ldi	r19, 0xFF	; 255
    3e2c:	4f e7       	ldi	r20, 0x7F	; 127
    3e2e:	57 e4       	ldi	r21, 0x47	; 71
    3e30:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3e34:	18 16       	cp	r1, r24
    3e36:	0c f0       	brlt	.+2      	; 0x3e3a <main+0x732>
    3e38:	43 c0       	rjmp	.+134    	; 0x3ec0 <main+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	ef 53       	subi	r30, 0x3F	; 63
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	60 81       	ld	r22, Z
    3e42:	71 81       	ldd	r23, Z+1	; 0x01
    3e44:	82 81       	ldd	r24, Z+2	; 0x02
    3e46:	93 81       	ldd	r25, Z+3	; 0x03
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e2       	ldi	r20, 0x20	; 32
    3e4e:	51 e4       	ldi	r21, 0x41	; 65
    3e50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e54:	dc 01       	movw	r26, r24
    3e56:	cb 01       	movw	r24, r22
    3e58:	8e 01       	movw	r16, r28
    3e5a:	05 54       	subi	r16, 0x45	; 69
    3e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5e:	bc 01       	movw	r22, r24
    3e60:	cd 01       	movw	r24, r26
    3e62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	f8 01       	movw	r30, r16
    3e6c:	91 83       	std	Z+1, r25	; 0x01
    3e6e:	80 83       	st	Z, r24
    3e70:	1f c0       	rjmp	.+62     	; 0x3eb0 <main+0x7a8>
    3e72:	fe 01       	movw	r30, r28
    3e74:	e7 54       	subi	r30, 0x47	; 71
    3e76:	ff 4f       	sbci	r31, 0xFF	; 255
    3e78:	80 e9       	ldi	r24, 0x90	; 144
    3e7a:	91 e0       	ldi	r25, 0x01	; 1
    3e7c:	91 83       	std	Z+1, r25	; 0x01
    3e7e:	80 83       	st	Z, r24
    3e80:	fe 01       	movw	r30, r28
    3e82:	e7 54       	subi	r30, 0x47	; 71
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	80 81       	ld	r24, Z
    3e88:	91 81       	ldd	r25, Z+1	; 0x01
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	f1 f7       	brne	.-4      	; 0x3e8a <main+0x782>
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e7 54       	subi	r30, 0x47	; 71
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e98:	de 01       	movw	r26, r28
    3e9a:	a5 54       	subi	r26, 0x45	; 69
    3e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	e5 54       	subi	r30, 0x45	; 69
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	80 81       	ld	r24, Z
    3ea6:	91 81       	ldd	r25, Z+1	; 0x01
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	11 96       	adiw	r26, 0x01	; 1
    3eac:	9c 93       	st	X, r25
    3eae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e5 54       	subi	r30, 0x45	; 69
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	80 81       	ld	r24, Z
    3eb8:	91 81       	ldd	r25, Z+1	; 0x01
    3eba:	00 97       	sbiw	r24, 0x00	; 0
    3ebc:	d1 f6       	brne	.-76     	; 0x3e72 <main+0x76a>
    3ebe:	28 c0       	rjmp	.+80     	; 0x3f10 <main+0x808>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ec0:	8e 01       	movw	r16, r28
    3ec2:	05 54       	subi	r16, 0x45	; 69
    3ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e3 54       	subi	r30, 0x43	; 67
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	60 81       	ld	r22, Z
    3ece:	71 81       	ldd	r23, Z+1	; 0x01
    3ed0:	82 81       	ldd	r24, Z+2	; 0x02
    3ed2:	93 81       	ldd	r25, Z+3	; 0x03
    3ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	f8 01       	movw	r30, r16
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	80 83       	st	Z, r24
    3ee2:	de 01       	movw	r26, r28
    3ee4:	a9 54       	subi	r26, 0x49	; 73
    3ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e5 54       	subi	r30, 0x45	; 69
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	80 81       	ld	r24, Z
    3ef0:	91 81       	ldd	r25, Z+1	; 0x01
    3ef2:	11 96       	adiw	r26, 0x01	; 1
    3ef4:	9c 93       	st	X, r25
    3ef6:	8e 93       	st	-X, r24
    3ef8:	fe 01       	movw	r30, r28
    3efa:	e9 54       	subi	r30, 0x49	; 73
    3efc:	ff 4f       	sbci	r31, 0xFF	; 255
    3efe:	80 81       	ld	r24, Z
    3f00:	91 81       	ldd	r25, Z+1	; 0x01
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	f1 f7       	brne	.-4      	; 0x3f02 <main+0x7fa>
    3f06:	fe 01       	movw	r30, r28
    3f08:	e9 54       	subi	r30, 0x49	; 73
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 5){
    3f10:	fe 01       	movw	r30, r28
    3f12:	e8 50       	subi	r30, 0x08	; 8
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	85 30       	cpi	r24, 0x05	; 5
    3f1a:	09 f0       	breq	.+2      	; 0x3f1e <main+0x816>
    3f1c:	ce c0       	rjmp	.+412    	; 0x40ba <main+0x9b2>
			LCD_displayCharacter('*');
    3f1e:	8a e2       	ldi	r24, 0x2A	; 42
    3f20:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '5';
    3f24:	fe 01       	movw	r30, r28
    3f26:	e7 50       	subi	r30, 0x07	; 7
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	80 81       	ld	r24, Z
    3f2c:	28 2f       	mov	r18, r24
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	ce 01       	movw	r24, r28
    3f32:	85 50       	subi	r24, 0x05	; 5
    3f34:	9f 4f       	sbci	r25, 0xFF	; 255
    3f36:	fc 01       	movw	r30, r24
    3f38:	e2 0f       	add	r30, r18
    3f3a:	f3 1f       	adc	r31, r19
    3f3c:	85 e3       	ldi	r24, 0x35	; 53
    3f3e:	80 83       	st	Z, r24
			c++;
    3f40:	de 01       	movw	r26, r28
    3f42:	a7 50       	subi	r26, 0x07	; 7
    3f44:	bf 4f       	sbci	r27, 0xFF	; 255
    3f46:	fe 01       	movw	r30, r28
    3f48:	e7 50       	subi	r30, 0x07	; 7
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 81       	ld	r24, Z
    3f4e:	8f 5f       	subi	r24, 0xFF	; 255
    3f50:	8c 93       	st	X, r24
    3f52:	fe 01       	movw	r30, r28
    3f54:	ed 54       	subi	r30, 0x4D	; 77
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	ac e0       	ldi	r26, 0x0C	; 12
    3f5e:	b2 e4       	ldi	r27, 0x42	; 66
    3f60:	80 83       	st	Z, r24
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	a2 83       	std	Z+2, r26	; 0x02
    3f66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f68:	8e 01       	movw	r16, r28
    3f6a:	01 55       	subi	r16, 0x51	; 81
    3f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f6e:	fe 01       	movw	r30, r28
    3f70:	ed 54       	subi	r30, 0x4D	; 77
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	60 81       	ld	r22, Z
    3f76:	71 81       	ldd	r23, Z+1	; 0x01
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	4a e7       	ldi	r20, 0x7A	; 122
    3f82:	55 e4       	ldi	r21, 0x45	; 69
    3f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	f8 01       	movw	r30, r16
    3f8e:	80 83       	st	Z, r24
    3f90:	91 83       	std	Z+1, r25	; 0x01
    3f92:	a2 83       	std	Z+2, r26	; 0x02
    3f94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f96:	fe 01       	movw	r30, r28
    3f98:	e1 55       	subi	r30, 0x51	; 81
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	60 81       	ld	r22, Z
    3f9e:	71 81       	ldd	r23, Z+1	; 0x01
    3fa0:	82 81       	ldd	r24, Z+2	; 0x02
    3fa2:	93 81       	ldd	r25, Z+3	; 0x03
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	40 e8       	ldi	r20, 0x80	; 128
    3faa:	5f e3       	ldi	r21, 0x3F	; 63
    3fac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3fb0:	88 23       	and	r24, r24
    3fb2:	44 f4       	brge	.+16     	; 0x3fc4 <main+0x8bc>
		__ticks = 1;
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	e3 55       	subi	r30, 0x53	; 83
    3fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	91 83       	std	Z+1, r25	; 0x01
    3fc0:	80 83       	st	Z, r24
    3fc2:	64 c0       	rjmp	.+200    	; 0x408c <main+0x984>
	else if (__tmp > 65535)
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e1 55       	subi	r30, 0x51	; 81
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	60 81       	ld	r22, Z
    3fcc:	71 81       	ldd	r23, Z+1	; 0x01
    3fce:	82 81       	ldd	r24, Z+2	; 0x02
    3fd0:	93 81       	ldd	r25, Z+3	; 0x03
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	3f ef       	ldi	r19, 0xFF	; 255
    3fd6:	4f e7       	ldi	r20, 0x7F	; 127
    3fd8:	57 e4       	ldi	r21, 0x47	; 71
    3fda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3fde:	18 16       	cp	r1, r24
    3fe0:	0c f0       	brlt	.+2      	; 0x3fe4 <main+0x8dc>
    3fe2:	43 c0       	rjmp	.+134    	; 0x406a <main+0x962>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	ed 54       	subi	r30, 0x4D	; 77
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	40 e2       	ldi	r20, 0x20	; 32
    3ff8:	51 e4       	ldi	r21, 0x41	; 65
    3ffa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	8e 01       	movw	r16, r28
    4004:	03 55       	subi	r16, 0x53	; 83
    4006:	1f 4f       	sbci	r17, 0xFF	; 255
    4008:	bc 01       	movw	r22, r24
    400a:	cd 01       	movw	r24, r26
    400c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	f8 01       	movw	r30, r16
    4016:	91 83       	std	Z+1, r25	; 0x01
    4018:	80 83       	st	Z, r24
    401a:	1f c0       	rjmp	.+62     	; 0x405a <main+0x952>
    401c:	fe 01       	movw	r30, r28
    401e:	e5 55       	subi	r30, 0x55	; 85
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 e9       	ldi	r24, 0x90	; 144
    4024:	91 e0       	ldi	r25, 0x01	; 1
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	80 83       	st	Z, r24
    402a:	fe 01       	movw	r30, r28
    402c:	e5 55       	subi	r30, 0x55	; 85
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	80 81       	ld	r24, Z
    4032:	91 81       	ldd	r25, Z+1	; 0x01
    4034:	01 97       	sbiw	r24, 0x01	; 1
    4036:	f1 f7       	brne	.-4      	; 0x4034 <main+0x92c>
    4038:	fe 01       	movw	r30, r28
    403a:	e5 55       	subi	r30, 0x55	; 85
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	91 83       	std	Z+1, r25	; 0x01
    4040:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4042:	de 01       	movw	r26, r28
    4044:	a3 55       	subi	r26, 0x53	; 83
    4046:	bf 4f       	sbci	r27, 0xFF	; 255
    4048:	fe 01       	movw	r30, r28
    404a:	e3 55       	subi	r30, 0x53	; 83
    404c:	ff 4f       	sbci	r31, 0xFF	; 255
    404e:	80 81       	ld	r24, Z
    4050:	91 81       	ldd	r25, Z+1	; 0x01
    4052:	01 97       	sbiw	r24, 0x01	; 1
    4054:	11 96       	adiw	r26, 0x01	; 1
    4056:	9c 93       	st	X, r25
    4058:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405a:	fe 01       	movw	r30, r28
    405c:	e3 55       	subi	r30, 0x53	; 83
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	80 81       	ld	r24, Z
    4062:	91 81       	ldd	r25, Z+1	; 0x01
    4064:	00 97       	sbiw	r24, 0x00	; 0
    4066:	d1 f6       	brne	.-76     	; 0x401c <main+0x914>
    4068:	28 c0       	rjmp	.+80     	; 0x40ba <main+0x9b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    406a:	8e 01       	movw	r16, r28
    406c:	03 55       	subi	r16, 0x53	; 83
    406e:	1f 4f       	sbci	r17, 0xFF	; 255
    4070:	fe 01       	movw	r30, r28
    4072:	e1 55       	subi	r30, 0x51	; 81
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	60 81       	ld	r22, Z
    4078:	71 81       	ldd	r23, Z+1	; 0x01
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	93 81       	ldd	r25, Z+3	; 0x03
    407e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	f8 01       	movw	r30, r16
    4088:	91 83       	std	Z+1, r25	; 0x01
    408a:	80 83       	st	Z, r24
    408c:	de 01       	movw	r26, r28
    408e:	a7 55       	subi	r26, 0x57	; 87
    4090:	bf 4f       	sbci	r27, 0xFF	; 255
    4092:	fe 01       	movw	r30, r28
    4094:	e3 55       	subi	r30, 0x53	; 83
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 81       	ld	r24, Z
    409a:	91 81       	ldd	r25, Z+1	; 0x01
    409c:	11 96       	adiw	r26, 0x01	; 1
    409e:	9c 93       	st	X, r25
    40a0:	8e 93       	st	-X, r24
    40a2:	fe 01       	movw	r30, r28
    40a4:	e7 55       	subi	r30, 0x57	; 87
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 81       	ld	r24, Z
    40aa:	91 81       	ldd	r25, Z+1	; 0x01
    40ac:	01 97       	sbiw	r24, 0x01	; 1
    40ae:	f1 f7       	brne	.-4      	; 0x40ac <main+0x9a4>
    40b0:	fe 01       	movw	r30, r28
    40b2:	e7 55       	subi	r30, 0x57	; 87
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	91 83       	std	Z+1, r25	; 0x01
    40b8:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 6){
    40ba:	fe 01       	movw	r30, r28
    40bc:	e8 50       	subi	r30, 0x08	; 8
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 81       	ld	r24, Z
    40c2:	86 30       	cpi	r24, 0x06	; 6
    40c4:	09 f0       	breq	.+2      	; 0x40c8 <main+0x9c0>
    40c6:	ce c0       	rjmp	.+412    	; 0x4264 <main+0xb5c>
			LCD_displayCharacter('*');
    40c8:	8a e2       	ldi	r24, 0x2A	; 42
    40ca:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '6';
    40ce:	fe 01       	movw	r30, r28
    40d0:	e7 50       	subi	r30, 0x07	; 7
    40d2:	ff 4f       	sbci	r31, 0xFF	; 255
    40d4:	80 81       	ld	r24, Z
    40d6:	28 2f       	mov	r18, r24
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	ce 01       	movw	r24, r28
    40dc:	85 50       	subi	r24, 0x05	; 5
    40de:	9f 4f       	sbci	r25, 0xFF	; 255
    40e0:	fc 01       	movw	r30, r24
    40e2:	e2 0f       	add	r30, r18
    40e4:	f3 1f       	adc	r31, r19
    40e6:	86 e3       	ldi	r24, 0x36	; 54
    40e8:	80 83       	st	Z, r24
			c++;
    40ea:	de 01       	movw	r26, r28
    40ec:	a7 50       	subi	r26, 0x07	; 7
    40ee:	bf 4f       	sbci	r27, 0xFF	; 255
    40f0:	fe 01       	movw	r30, r28
    40f2:	e7 50       	subi	r30, 0x07	; 7
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	80 81       	ld	r24, Z
    40f8:	8f 5f       	subi	r24, 0xFF	; 255
    40fa:	8c 93       	st	X, r24
    40fc:	fe 01       	movw	r30, r28
    40fe:	eb 55       	subi	r30, 0x5B	; 91
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	ac e0       	ldi	r26, 0x0C	; 12
    4108:	b2 e4       	ldi	r27, 0x42	; 66
    410a:	80 83       	st	Z, r24
    410c:	91 83       	std	Z+1, r25	; 0x01
    410e:	a2 83       	std	Z+2, r26	; 0x02
    4110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4112:	8e 01       	movw	r16, r28
    4114:	0f 55       	subi	r16, 0x5F	; 95
    4116:	1f 4f       	sbci	r17, 0xFF	; 255
    4118:	fe 01       	movw	r30, r28
    411a:	eb 55       	subi	r30, 0x5B	; 91
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	60 81       	ld	r22, Z
    4120:	71 81       	ldd	r23, Z+1	; 0x01
    4122:	82 81       	ldd	r24, Z+2	; 0x02
    4124:	93 81       	ldd	r25, Z+3	; 0x03
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	4a e7       	ldi	r20, 0x7A	; 122
    412c:	55 e4       	ldi	r21, 0x45	; 69
    412e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	f8 01       	movw	r30, r16
    4138:	80 83       	st	Z, r24
    413a:	91 83       	std	Z+1, r25	; 0x01
    413c:	a2 83       	std	Z+2, r26	; 0x02
    413e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4140:	fe 01       	movw	r30, r28
    4142:	ef 55       	subi	r30, 0x5F	; 95
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	60 81       	ld	r22, Z
    4148:	71 81       	ldd	r23, Z+1	; 0x01
    414a:	82 81       	ldd	r24, Z+2	; 0x02
    414c:	93 81       	ldd	r25, Z+3	; 0x03
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	40 e8       	ldi	r20, 0x80	; 128
    4154:	5f e3       	ldi	r21, 0x3F	; 63
    4156:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    415a:	88 23       	and	r24, r24
    415c:	44 f4       	brge	.+16     	; 0x416e <main+0xa66>
		__ticks = 1;
    415e:	fe 01       	movw	r30, r28
    4160:	e1 56       	subi	r30, 0x61	; 97
    4162:	ff 4f       	sbci	r31, 0xFF	; 255
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	91 83       	std	Z+1, r25	; 0x01
    416a:	80 83       	st	Z, r24
    416c:	64 c0       	rjmp	.+200    	; 0x4236 <main+0xb2e>
	else if (__tmp > 65535)
    416e:	fe 01       	movw	r30, r28
    4170:	ef 55       	subi	r30, 0x5F	; 95
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	60 81       	ld	r22, Z
    4176:	71 81       	ldd	r23, Z+1	; 0x01
    4178:	82 81       	ldd	r24, Z+2	; 0x02
    417a:	93 81       	ldd	r25, Z+3	; 0x03
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	3f ef       	ldi	r19, 0xFF	; 255
    4180:	4f e7       	ldi	r20, 0x7F	; 127
    4182:	57 e4       	ldi	r21, 0x47	; 71
    4184:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4188:	18 16       	cp	r1, r24
    418a:	0c f0       	brlt	.+2      	; 0x418e <main+0xa86>
    418c:	43 c0       	rjmp	.+134    	; 0x4214 <main+0xb0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    418e:	fe 01       	movw	r30, r28
    4190:	eb 55       	subi	r30, 0x5B	; 91
    4192:	ff 4f       	sbci	r31, 0xFF	; 255
    4194:	60 81       	ld	r22, Z
    4196:	71 81       	ldd	r23, Z+1	; 0x01
    4198:	82 81       	ldd	r24, Z+2	; 0x02
    419a:	93 81       	ldd	r25, Z+3	; 0x03
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	40 e2       	ldi	r20, 0x20	; 32
    41a2:	51 e4       	ldi	r21, 0x41	; 65
    41a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
    41ac:	8e 01       	movw	r16, r28
    41ae:	01 56       	subi	r16, 0x61	; 97
    41b0:	1f 4f       	sbci	r17, 0xFF	; 255
    41b2:	bc 01       	movw	r22, r24
    41b4:	cd 01       	movw	r24, r26
    41b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	f8 01       	movw	r30, r16
    41c0:	91 83       	std	Z+1, r25	; 0x01
    41c2:	80 83       	st	Z, r24
    41c4:	1f c0       	rjmp	.+62     	; 0x4204 <main+0xafc>
    41c6:	fe 01       	movw	r30, r28
    41c8:	e3 56       	subi	r30, 0x63	; 99
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	80 e9       	ldi	r24, 0x90	; 144
    41ce:	91 e0       	ldi	r25, 0x01	; 1
    41d0:	91 83       	std	Z+1, r25	; 0x01
    41d2:	80 83       	st	Z, r24
    41d4:	fe 01       	movw	r30, r28
    41d6:	e3 56       	subi	r30, 0x63	; 99
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	80 81       	ld	r24, Z
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	01 97       	sbiw	r24, 0x01	; 1
    41e0:	f1 f7       	brne	.-4      	; 0x41de <main+0xad6>
    41e2:	fe 01       	movw	r30, r28
    41e4:	e3 56       	subi	r30, 0x63	; 99
    41e6:	ff 4f       	sbci	r31, 0xFF	; 255
    41e8:	91 83       	std	Z+1, r25	; 0x01
    41ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ec:	de 01       	movw	r26, r28
    41ee:	a1 56       	subi	r26, 0x61	; 97
    41f0:	bf 4f       	sbci	r27, 0xFF	; 255
    41f2:	fe 01       	movw	r30, r28
    41f4:	e1 56       	subi	r30, 0x61	; 97
    41f6:	ff 4f       	sbci	r31, 0xFF	; 255
    41f8:	80 81       	ld	r24, Z
    41fa:	91 81       	ldd	r25, Z+1	; 0x01
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	11 96       	adiw	r26, 0x01	; 1
    4200:	9c 93       	st	X, r25
    4202:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4204:	fe 01       	movw	r30, r28
    4206:	e1 56       	subi	r30, 0x61	; 97
    4208:	ff 4f       	sbci	r31, 0xFF	; 255
    420a:	80 81       	ld	r24, Z
    420c:	91 81       	ldd	r25, Z+1	; 0x01
    420e:	00 97       	sbiw	r24, 0x00	; 0
    4210:	d1 f6       	brne	.-76     	; 0x41c6 <main+0xabe>
    4212:	28 c0       	rjmp	.+80     	; 0x4264 <main+0xb5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4214:	8e 01       	movw	r16, r28
    4216:	01 56       	subi	r16, 0x61	; 97
    4218:	1f 4f       	sbci	r17, 0xFF	; 255
    421a:	fe 01       	movw	r30, r28
    421c:	ef 55       	subi	r30, 0x5F	; 95
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	60 81       	ld	r22, Z
    4222:	71 81       	ldd	r23, Z+1	; 0x01
    4224:	82 81       	ldd	r24, Z+2	; 0x02
    4226:	93 81       	ldd	r25, Z+3	; 0x03
    4228:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	f8 01       	movw	r30, r16
    4232:	91 83       	std	Z+1, r25	; 0x01
    4234:	80 83       	st	Z, r24
    4236:	de 01       	movw	r26, r28
    4238:	a5 56       	subi	r26, 0x65	; 101
    423a:	bf 4f       	sbci	r27, 0xFF	; 255
    423c:	fe 01       	movw	r30, r28
    423e:	e1 56       	subi	r30, 0x61	; 97
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	80 81       	ld	r24, Z
    4244:	91 81       	ldd	r25, Z+1	; 0x01
    4246:	11 96       	adiw	r26, 0x01	; 1
    4248:	9c 93       	st	X, r25
    424a:	8e 93       	st	-X, r24
    424c:	fe 01       	movw	r30, r28
    424e:	e5 56       	subi	r30, 0x65	; 101
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	80 81       	ld	r24, Z
    4254:	91 81       	ldd	r25, Z+1	; 0x01
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	f1 f7       	brne	.-4      	; 0x4256 <main+0xb4e>
    425a:	fe 01       	movw	r30, r28
    425c:	e5 56       	subi	r30, 0x65	; 101
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	91 83       	std	Z+1, r25	; 0x01
    4262:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 7){
    4264:	fe 01       	movw	r30, r28
    4266:	e8 50       	subi	r30, 0x08	; 8
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	80 81       	ld	r24, Z
    426c:	87 30       	cpi	r24, 0x07	; 7
    426e:	09 f0       	breq	.+2      	; 0x4272 <main+0xb6a>
    4270:	ce c0       	rjmp	.+412    	; 0x440e <main+0xd06>
			LCD_displayCharacter('*');
    4272:	8a e2       	ldi	r24, 0x2A	; 42
    4274:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '7';
    4278:	fe 01       	movw	r30, r28
    427a:	e7 50       	subi	r30, 0x07	; 7
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	80 81       	ld	r24, Z
    4280:	28 2f       	mov	r18, r24
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	ce 01       	movw	r24, r28
    4286:	85 50       	subi	r24, 0x05	; 5
    4288:	9f 4f       	sbci	r25, 0xFF	; 255
    428a:	fc 01       	movw	r30, r24
    428c:	e2 0f       	add	r30, r18
    428e:	f3 1f       	adc	r31, r19
    4290:	87 e3       	ldi	r24, 0x37	; 55
    4292:	80 83       	st	Z, r24
			c++;
    4294:	de 01       	movw	r26, r28
    4296:	a7 50       	subi	r26, 0x07	; 7
    4298:	bf 4f       	sbci	r27, 0xFF	; 255
    429a:	fe 01       	movw	r30, r28
    429c:	e7 50       	subi	r30, 0x07	; 7
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	80 81       	ld	r24, Z
    42a2:	8f 5f       	subi	r24, 0xFF	; 255
    42a4:	8c 93       	st	X, r24
    42a6:	fe 01       	movw	r30, r28
    42a8:	e9 56       	subi	r30, 0x69	; 105
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	ac e0       	ldi	r26, 0x0C	; 12
    42b2:	b2 e4       	ldi	r27, 0x42	; 66
    42b4:	80 83       	st	Z, r24
    42b6:	91 83       	std	Z+1, r25	; 0x01
    42b8:	a2 83       	std	Z+2, r26	; 0x02
    42ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42bc:	8e 01       	movw	r16, r28
    42be:	0d 56       	subi	r16, 0x6D	; 109
    42c0:	1f 4f       	sbci	r17, 0xFF	; 255
    42c2:	fe 01       	movw	r30, r28
    42c4:	e9 56       	subi	r30, 0x69	; 105
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	60 81       	ld	r22, Z
    42ca:	71 81       	ldd	r23, Z+1	; 0x01
    42cc:	82 81       	ldd	r24, Z+2	; 0x02
    42ce:	93 81       	ldd	r25, Z+3	; 0x03
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	4a e7       	ldi	r20, 0x7A	; 122
    42d6:	55 e4       	ldi	r21, 0x45	; 69
    42d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	f8 01       	movw	r30, r16
    42e2:	80 83       	st	Z, r24
    42e4:	91 83       	std	Z+1, r25	; 0x01
    42e6:	a2 83       	std	Z+2, r26	; 0x02
    42e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ea:	fe 01       	movw	r30, r28
    42ec:	ed 56       	subi	r30, 0x6D	; 109
    42ee:	ff 4f       	sbci	r31, 0xFF	; 255
    42f0:	60 81       	ld	r22, Z
    42f2:	71 81       	ldd	r23, Z+1	; 0x01
    42f4:	82 81       	ldd	r24, Z+2	; 0x02
    42f6:	93 81       	ldd	r25, Z+3	; 0x03
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	40 e8       	ldi	r20, 0x80	; 128
    42fe:	5f e3       	ldi	r21, 0x3F	; 63
    4300:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4304:	88 23       	and	r24, r24
    4306:	44 f4       	brge	.+16     	; 0x4318 <main+0xc10>
		__ticks = 1;
    4308:	fe 01       	movw	r30, r28
    430a:	ef 56       	subi	r30, 0x6F	; 111
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	80 83       	st	Z, r24
    4316:	64 c0       	rjmp	.+200    	; 0x43e0 <main+0xcd8>
	else if (__tmp > 65535)
    4318:	fe 01       	movw	r30, r28
    431a:	ed 56       	subi	r30, 0x6D	; 109
    431c:	ff 4f       	sbci	r31, 0xFF	; 255
    431e:	60 81       	ld	r22, Z
    4320:	71 81       	ldd	r23, Z+1	; 0x01
    4322:	82 81       	ldd	r24, Z+2	; 0x02
    4324:	93 81       	ldd	r25, Z+3	; 0x03
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	3f ef       	ldi	r19, 0xFF	; 255
    432a:	4f e7       	ldi	r20, 0x7F	; 127
    432c:	57 e4       	ldi	r21, 0x47	; 71
    432e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4332:	18 16       	cp	r1, r24
    4334:	0c f0       	brlt	.+2      	; 0x4338 <main+0xc30>
    4336:	43 c0       	rjmp	.+134    	; 0x43be <main+0xcb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4338:	fe 01       	movw	r30, r28
    433a:	e9 56       	subi	r30, 0x69	; 105
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	60 81       	ld	r22, Z
    4340:	71 81       	ldd	r23, Z+1	; 0x01
    4342:	82 81       	ldd	r24, Z+2	; 0x02
    4344:	93 81       	ldd	r25, Z+3	; 0x03
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	40 e2       	ldi	r20, 0x20	; 32
    434c:	51 e4       	ldi	r21, 0x41	; 65
    434e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4352:	dc 01       	movw	r26, r24
    4354:	cb 01       	movw	r24, r22
    4356:	8e 01       	movw	r16, r28
    4358:	0f 56       	subi	r16, 0x6F	; 111
    435a:	1f 4f       	sbci	r17, 0xFF	; 255
    435c:	bc 01       	movw	r22, r24
    435e:	cd 01       	movw	r24, r26
    4360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	f8 01       	movw	r30, r16
    436a:	91 83       	std	Z+1, r25	; 0x01
    436c:	80 83       	st	Z, r24
    436e:	1f c0       	rjmp	.+62     	; 0x43ae <main+0xca6>
    4370:	fe 01       	movw	r30, r28
    4372:	e1 57       	subi	r30, 0x71	; 113
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	80 e9       	ldi	r24, 0x90	; 144
    4378:	91 e0       	ldi	r25, 0x01	; 1
    437a:	91 83       	std	Z+1, r25	; 0x01
    437c:	80 83       	st	Z, r24
    437e:	fe 01       	movw	r30, r28
    4380:	e1 57       	subi	r30, 0x71	; 113
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	80 81       	ld	r24, Z
    4386:	91 81       	ldd	r25, Z+1	; 0x01
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	f1 f7       	brne	.-4      	; 0x4388 <main+0xc80>
    438c:	fe 01       	movw	r30, r28
    438e:	e1 57       	subi	r30, 0x71	; 113
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	91 83       	std	Z+1, r25	; 0x01
    4394:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4396:	de 01       	movw	r26, r28
    4398:	af 56       	subi	r26, 0x6F	; 111
    439a:	bf 4f       	sbci	r27, 0xFF	; 255
    439c:	fe 01       	movw	r30, r28
    439e:	ef 56       	subi	r30, 0x6F	; 111
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	80 81       	ld	r24, Z
    43a4:	91 81       	ldd	r25, Z+1	; 0x01
    43a6:	01 97       	sbiw	r24, 0x01	; 1
    43a8:	11 96       	adiw	r26, 0x01	; 1
    43aa:	9c 93       	st	X, r25
    43ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ae:	fe 01       	movw	r30, r28
    43b0:	ef 56       	subi	r30, 0x6F	; 111
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	80 81       	ld	r24, Z
    43b6:	91 81       	ldd	r25, Z+1	; 0x01
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	d1 f6       	brne	.-76     	; 0x4370 <main+0xc68>
    43bc:	28 c0       	rjmp	.+80     	; 0x440e <main+0xd06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43be:	8e 01       	movw	r16, r28
    43c0:	0f 56       	subi	r16, 0x6F	; 111
    43c2:	1f 4f       	sbci	r17, 0xFF	; 255
    43c4:	fe 01       	movw	r30, r28
    43c6:	ed 56       	subi	r30, 0x6D	; 109
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	60 81       	ld	r22, Z
    43cc:	71 81       	ldd	r23, Z+1	; 0x01
    43ce:	82 81       	ldd	r24, Z+2	; 0x02
    43d0:	93 81       	ldd	r25, Z+3	; 0x03
    43d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	f8 01       	movw	r30, r16
    43dc:	91 83       	std	Z+1, r25	; 0x01
    43de:	80 83       	st	Z, r24
    43e0:	de 01       	movw	r26, r28
    43e2:	a3 57       	subi	r26, 0x73	; 115
    43e4:	bf 4f       	sbci	r27, 0xFF	; 255
    43e6:	fe 01       	movw	r30, r28
    43e8:	ef 56       	subi	r30, 0x6F	; 111
    43ea:	ff 4f       	sbci	r31, 0xFF	; 255
    43ec:	80 81       	ld	r24, Z
    43ee:	91 81       	ldd	r25, Z+1	; 0x01
    43f0:	11 96       	adiw	r26, 0x01	; 1
    43f2:	9c 93       	st	X, r25
    43f4:	8e 93       	st	-X, r24
    43f6:	fe 01       	movw	r30, r28
    43f8:	e3 57       	subi	r30, 0x73	; 115
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	80 81       	ld	r24, Z
    43fe:	91 81       	ldd	r25, Z+1	; 0x01
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <main+0xcf8>
    4404:	fe 01       	movw	r30, r28
    4406:	e3 57       	subi	r30, 0x73	; 115
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	91 83       	std	Z+1, r25	; 0x01
    440c:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 8){
    440e:	fe 01       	movw	r30, r28
    4410:	e8 50       	subi	r30, 0x08	; 8
    4412:	ff 4f       	sbci	r31, 0xFF	; 255
    4414:	80 81       	ld	r24, Z
    4416:	88 30       	cpi	r24, 0x08	; 8
    4418:	09 f0       	breq	.+2      	; 0x441c <main+0xd14>
    441a:	ce c0       	rjmp	.+412    	; 0x45b8 <main+0xeb0>
			LCD_displayCharacter('*');
    441c:	8a e2       	ldi	r24, 0x2A	; 42
    441e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '8';
    4422:	fe 01       	movw	r30, r28
    4424:	e7 50       	subi	r30, 0x07	; 7
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	80 81       	ld	r24, Z
    442a:	28 2f       	mov	r18, r24
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	ce 01       	movw	r24, r28
    4430:	85 50       	subi	r24, 0x05	; 5
    4432:	9f 4f       	sbci	r25, 0xFF	; 255
    4434:	fc 01       	movw	r30, r24
    4436:	e2 0f       	add	r30, r18
    4438:	f3 1f       	adc	r31, r19
    443a:	88 e3       	ldi	r24, 0x38	; 56
    443c:	80 83       	st	Z, r24
			c++;
    443e:	de 01       	movw	r26, r28
    4440:	a7 50       	subi	r26, 0x07	; 7
    4442:	bf 4f       	sbci	r27, 0xFF	; 255
    4444:	fe 01       	movw	r30, r28
    4446:	e7 50       	subi	r30, 0x07	; 7
    4448:	ff 4f       	sbci	r31, 0xFF	; 255
    444a:	80 81       	ld	r24, Z
    444c:	8f 5f       	subi	r24, 0xFF	; 255
    444e:	8c 93       	st	X, r24
    4450:	fe 01       	movw	r30, r28
    4452:	e7 57       	subi	r30, 0x77	; 119
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	80 e0       	ldi	r24, 0x00	; 0
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	ac e0       	ldi	r26, 0x0C	; 12
    445c:	b2 e4       	ldi	r27, 0x42	; 66
    445e:	80 83       	st	Z, r24
    4460:	91 83       	std	Z+1, r25	; 0x01
    4462:	a2 83       	std	Z+2, r26	; 0x02
    4464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4466:	8e 01       	movw	r16, r28
    4468:	0b 57       	subi	r16, 0x7B	; 123
    446a:	1f 4f       	sbci	r17, 0xFF	; 255
    446c:	fe 01       	movw	r30, r28
    446e:	e7 57       	subi	r30, 0x77	; 119
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	60 81       	ld	r22, Z
    4474:	71 81       	ldd	r23, Z+1	; 0x01
    4476:	82 81       	ldd	r24, Z+2	; 0x02
    4478:	93 81       	ldd	r25, Z+3	; 0x03
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	4a e7       	ldi	r20, 0x7A	; 122
    4480:	55 e4       	ldi	r21, 0x45	; 69
    4482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	f8 01       	movw	r30, r16
    448c:	80 83       	st	Z, r24
    448e:	91 83       	std	Z+1, r25	; 0x01
    4490:	a2 83       	std	Z+2, r26	; 0x02
    4492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4494:	fe 01       	movw	r30, r28
    4496:	eb 57       	subi	r30, 0x7B	; 123
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	60 81       	ld	r22, Z
    449c:	71 81       	ldd	r23, Z+1	; 0x01
    449e:	82 81       	ldd	r24, Z+2	; 0x02
    44a0:	93 81       	ldd	r25, Z+3	; 0x03
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	40 e8       	ldi	r20, 0x80	; 128
    44a8:	5f e3       	ldi	r21, 0x3F	; 63
    44aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    44ae:	88 23       	and	r24, r24
    44b0:	44 f4       	brge	.+16     	; 0x44c2 <main+0xdba>
		__ticks = 1;
    44b2:	fe 01       	movw	r30, r28
    44b4:	ed 57       	subi	r30, 0x7D	; 125
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	91 83       	std	Z+1, r25	; 0x01
    44be:	80 83       	st	Z, r24
    44c0:	64 c0       	rjmp	.+200    	; 0x458a <main+0xe82>
	else if (__tmp > 65535)
    44c2:	fe 01       	movw	r30, r28
    44c4:	eb 57       	subi	r30, 0x7B	; 123
    44c6:	ff 4f       	sbci	r31, 0xFF	; 255
    44c8:	60 81       	ld	r22, Z
    44ca:	71 81       	ldd	r23, Z+1	; 0x01
    44cc:	82 81       	ldd	r24, Z+2	; 0x02
    44ce:	93 81       	ldd	r25, Z+3	; 0x03
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	3f ef       	ldi	r19, 0xFF	; 255
    44d4:	4f e7       	ldi	r20, 0x7F	; 127
    44d6:	57 e4       	ldi	r21, 0x47	; 71
    44d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    44dc:	18 16       	cp	r1, r24
    44de:	0c f0       	brlt	.+2      	; 0x44e2 <main+0xdda>
    44e0:	43 c0       	rjmp	.+134    	; 0x4568 <main+0xe60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e2:	fe 01       	movw	r30, r28
    44e4:	e7 57       	subi	r30, 0x77	; 119
    44e6:	ff 4f       	sbci	r31, 0xFF	; 255
    44e8:	60 81       	ld	r22, Z
    44ea:	71 81       	ldd	r23, Z+1	; 0x01
    44ec:	82 81       	ldd	r24, Z+2	; 0x02
    44ee:	93 81       	ldd	r25, Z+3	; 0x03
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	40 e2       	ldi	r20, 0x20	; 32
    44f6:	51 e4       	ldi	r21, 0x41	; 65
    44f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44fc:	dc 01       	movw	r26, r24
    44fe:	cb 01       	movw	r24, r22
    4500:	8e 01       	movw	r16, r28
    4502:	0d 57       	subi	r16, 0x7D	; 125
    4504:	1f 4f       	sbci	r17, 0xFF	; 255
    4506:	bc 01       	movw	r22, r24
    4508:	cd 01       	movw	r24, r26
    450a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	f8 01       	movw	r30, r16
    4514:	91 83       	std	Z+1, r25	; 0x01
    4516:	80 83       	st	Z, r24
    4518:	1f c0       	rjmp	.+62     	; 0x4558 <main+0xe50>
    451a:	fe 01       	movw	r30, r28
    451c:	ef 57       	subi	r30, 0x7F	; 127
    451e:	ff 4f       	sbci	r31, 0xFF	; 255
    4520:	80 e9       	ldi	r24, 0x90	; 144
    4522:	91 e0       	ldi	r25, 0x01	; 1
    4524:	91 83       	std	Z+1, r25	; 0x01
    4526:	80 83       	st	Z, r24
    4528:	fe 01       	movw	r30, r28
    452a:	ef 57       	subi	r30, 0x7F	; 127
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	80 81       	ld	r24, Z
    4530:	91 81       	ldd	r25, Z+1	; 0x01
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	f1 f7       	brne	.-4      	; 0x4532 <main+0xe2a>
    4536:	fe 01       	movw	r30, r28
    4538:	ef 57       	subi	r30, 0x7F	; 127
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	91 83       	std	Z+1, r25	; 0x01
    453e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4540:	de 01       	movw	r26, r28
    4542:	ad 57       	subi	r26, 0x7D	; 125
    4544:	bf 4f       	sbci	r27, 0xFF	; 255
    4546:	fe 01       	movw	r30, r28
    4548:	ed 57       	subi	r30, 0x7D	; 125
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 81       	ld	r24, Z
    454e:	91 81       	ldd	r25, Z+1	; 0x01
    4550:	01 97       	sbiw	r24, 0x01	; 1
    4552:	11 96       	adiw	r26, 0x01	; 1
    4554:	9c 93       	st	X, r25
    4556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4558:	fe 01       	movw	r30, r28
    455a:	ed 57       	subi	r30, 0x7D	; 125
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	80 81       	ld	r24, Z
    4560:	91 81       	ldd	r25, Z+1	; 0x01
    4562:	00 97       	sbiw	r24, 0x00	; 0
    4564:	d1 f6       	brne	.-76     	; 0x451a <main+0xe12>
    4566:	28 c0       	rjmp	.+80     	; 0x45b8 <main+0xeb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4568:	8e 01       	movw	r16, r28
    456a:	0d 57       	subi	r16, 0x7D	; 125
    456c:	1f 4f       	sbci	r17, 0xFF	; 255
    456e:	fe 01       	movw	r30, r28
    4570:	eb 57       	subi	r30, 0x7B	; 123
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	60 81       	ld	r22, Z
    4576:	71 81       	ldd	r23, Z+1	; 0x01
    4578:	82 81       	ldd	r24, Z+2	; 0x02
    457a:	93 81       	ldd	r25, Z+3	; 0x03
    457c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	f8 01       	movw	r30, r16
    4586:	91 83       	std	Z+1, r25	; 0x01
    4588:	80 83       	st	Z, r24
    458a:	de 01       	movw	r26, r28
    458c:	a1 58       	subi	r26, 0x81	; 129
    458e:	bf 4f       	sbci	r27, 0xFF	; 255
    4590:	fe 01       	movw	r30, r28
    4592:	ed 57       	subi	r30, 0x7D	; 125
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	11 96       	adiw	r26, 0x01	; 1
    459c:	9c 93       	st	X, r25
    459e:	8e 93       	st	-X, r24
    45a0:	fe 01       	movw	r30, r28
    45a2:	e1 58       	subi	r30, 0x81	; 129
    45a4:	ff 4f       	sbci	r31, 0xFF	; 255
    45a6:	80 81       	ld	r24, Z
    45a8:	91 81       	ldd	r25, Z+1	; 0x01
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	f1 f7       	brne	.-4      	; 0x45aa <main+0xea2>
    45ae:	fe 01       	movw	r30, r28
    45b0:	e1 58       	subi	r30, 0x81	; 129
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	91 83       	std	Z+1, r25	; 0x01
    45b6:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 9){
    45b8:	fe 01       	movw	r30, r28
    45ba:	e8 50       	subi	r30, 0x08	; 8
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	80 81       	ld	r24, Z
    45c0:	89 30       	cpi	r24, 0x09	; 9
    45c2:	09 f0       	breq	.+2      	; 0x45c6 <main+0xebe>
    45c4:	ce c0       	rjmp	.+412    	; 0x4762 <main+0x105a>
			LCD_displayCharacter('*');
    45c6:	8a e2       	ldi	r24, 0x2A	; 42
    45c8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '9';
    45cc:	fe 01       	movw	r30, r28
    45ce:	e7 50       	subi	r30, 0x07	; 7
    45d0:	ff 4f       	sbci	r31, 0xFF	; 255
    45d2:	80 81       	ld	r24, Z
    45d4:	28 2f       	mov	r18, r24
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	ce 01       	movw	r24, r28
    45da:	85 50       	subi	r24, 0x05	; 5
    45dc:	9f 4f       	sbci	r25, 0xFF	; 255
    45de:	fc 01       	movw	r30, r24
    45e0:	e2 0f       	add	r30, r18
    45e2:	f3 1f       	adc	r31, r19
    45e4:	89 e3       	ldi	r24, 0x39	; 57
    45e6:	80 83       	st	Z, r24
			c++;
    45e8:	de 01       	movw	r26, r28
    45ea:	a7 50       	subi	r26, 0x07	; 7
    45ec:	bf 4f       	sbci	r27, 0xFF	; 255
    45ee:	fe 01       	movw	r30, r28
    45f0:	e7 50       	subi	r30, 0x07	; 7
    45f2:	ff 4f       	sbci	r31, 0xFF	; 255
    45f4:	80 81       	ld	r24, Z
    45f6:	8f 5f       	subi	r24, 0xFF	; 255
    45f8:	8c 93       	st	X, r24
    45fa:	fe 01       	movw	r30, r28
    45fc:	e5 58       	subi	r30, 0x85	; 133
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	ac e0       	ldi	r26, 0x0C	; 12
    4606:	b2 e4       	ldi	r27, 0x42	; 66
    4608:	80 83       	st	Z, r24
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	a2 83       	std	Z+2, r26	; 0x02
    460e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4610:	8e 01       	movw	r16, r28
    4612:	09 58       	subi	r16, 0x89	; 137
    4614:	1f 4f       	sbci	r17, 0xFF	; 255
    4616:	fe 01       	movw	r30, r28
    4618:	e5 58       	subi	r30, 0x85	; 133
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	4a e7       	ldi	r20, 0x7A	; 122
    462a:	55 e4       	ldi	r21, 0x45	; 69
    462c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	f8 01       	movw	r30, r16
    4636:	80 83       	st	Z, r24
    4638:	91 83       	std	Z+1, r25	; 0x01
    463a:	a2 83       	std	Z+2, r26	; 0x02
    463c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    463e:	fe 01       	movw	r30, r28
    4640:	e9 58       	subi	r30, 0x89	; 137
    4642:	ff 4f       	sbci	r31, 0xFF	; 255
    4644:	60 81       	ld	r22, Z
    4646:	71 81       	ldd	r23, Z+1	; 0x01
    4648:	82 81       	ldd	r24, Z+2	; 0x02
    464a:	93 81       	ldd	r25, Z+3	; 0x03
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e8       	ldi	r20, 0x80	; 128
    4652:	5f e3       	ldi	r21, 0x3F	; 63
    4654:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4658:	88 23       	and	r24, r24
    465a:	44 f4       	brge	.+16     	; 0x466c <main+0xf64>
		__ticks = 1;
    465c:	fe 01       	movw	r30, r28
    465e:	eb 58       	subi	r30, 0x8B	; 139
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	91 83       	std	Z+1, r25	; 0x01
    4668:	80 83       	st	Z, r24
    466a:	64 c0       	rjmp	.+200    	; 0x4734 <main+0x102c>
	else if (__tmp > 65535)
    466c:	fe 01       	movw	r30, r28
    466e:	e9 58       	subi	r30, 0x89	; 137
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	60 81       	ld	r22, Z
    4674:	71 81       	ldd	r23, Z+1	; 0x01
    4676:	82 81       	ldd	r24, Z+2	; 0x02
    4678:	93 81       	ldd	r25, Z+3	; 0x03
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	3f ef       	ldi	r19, 0xFF	; 255
    467e:	4f e7       	ldi	r20, 0x7F	; 127
    4680:	57 e4       	ldi	r21, 0x47	; 71
    4682:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4686:	18 16       	cp	r1, r24
    4688:	0c f0       	brlt	.+2      	; 0x468c <main+0xf84>
    468a:	43 c0       	rjmp	.+134    	; 0x4712 <main+0x100a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    468c:	fe 01       	movw	r30, r28
    468e:	e5 58       	subi	r30, 0x85	; 133
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	60 81       	ld	r22, Z
    4694:	71 81       	ldd	r23, Z+1	; 0x01
    4696:	82 81       	ldd	r24, Z+2	; 0x02
    4698:	93 81       	ldd	r25, Z+3	; 0x03
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e2       	ldi	r20, 0x20	; 32
    46a0:	51 e4       	ldi	r21, 0x41	; 65
    46a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46a6:	dc 01       	movw	r26, r24
    46a8:	cb 01       	movw	r24, r22
    46aa:	8e 01       	movw	r16, r28
    46ac:	0b 58       	subi	r16, 0x8B	; 139
    46ae:	1f 4f       	sbci	r17, 0xFF	; 255
    46b0:	bc 01       	movw	r22, r24
    46b2:	cd 01       	movw	r24, r26
    46b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	f8 01       	movw	r30, r16
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	80 83       	st	Z, r24
    46c2:	1f c0       	rjmp	.+62     	; 0x4702 <main+0xffa>
    46c4:	fe 01       	movw	r30, r28
    46c6:	ed 58       	subi	r30, 0x8D	; 141
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	80 e9       	ldi	r24, 0x90	; 144
    46cc:	91 e0       	ldi	r25, 0x01	; 1
    46ce:	91 83       	std	Z+1, r25	; 0x01
    46d0:	80 83       	st	Z, r24
    46d2:	fe 01       	movw	r30, r28
    46d4:	ed 58       	subi	r30, 0x8D	; 141
    46d6:	ff 4f       	sbci	r31, 0xFF	; 255
    46d8:	80 81       	ld	r24, Z
    46da:	91 81       	ldd	r25, Z+1	; 0x01
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <main+0xfd4>
    46e0:	fe 01       	movw	r30, r28
    46e2:	ed 58       	subi	r30, 0x8D	; 141
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	91 83       	std	Z+1, r25	; 0x01
    46e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ea:	de 01       	movw	r26, r28
    46ec:	ab 58       	subi	r26, 0x8B	; 139
    46ee:	bf 4f       	sbci	r27, 0xFF	; 255
    46f0:	fe 01       	movw	r30, r28
    46f2:	eb 58       	subi	r30, 0x8B	; 139
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	80 81       	ld	r24, Z
    46f8:	91 81       	ldd	r25, Z+1	; 0x01
    46fa:	01 97       	sbiw	r24, 0x01	; 1
    46fc:	11 96       	adiw	r26, 0x01	; 1
    46fe:	9c 93       	st	X, r25
    4700:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4702:	fe 01       	movw	r30, r28
    4704:	eb 58       	subi	r30, 0x8B	; 139
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	80 81       	ld	r24, Z
    470a:	91 81       	ldd	r25, Z+1	; 0x01
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	d1 f6       	brne	.-76     	; 0x46c4 <main+0xfbc>
    4710:	28 c0       	rjmp	.+80     	; 0x4762 <main+0x105a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4712:	8e 01       	movw	r16, r28
    4714:	0b 58       	subi	r16, 0x8B	; 139
    4716:	1f 4f       	sbci	r17, 0xFF	; 255
    4718:	fe 01       	movw	r30, r28
    471a:	e9 58       	subi	r30, 0x89	; 137
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	60 81       	ld	r22, Z
    4720:	71 81       	ldd	r23, Z+1	; 0x01
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	f8 01       	movw	r30, r16
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
    4734:	de 01       	movw	r26, r28
    4736:	af 58       	subi	r26, 0x8F	; 143
    4738:	bf 4f       	sbci	r27, 0xFF	; 255
    473a:	fe 01       	movw	r30, r28
    473c:	eb 58       	subi	r30, 0x8B	; 139
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	11 96       	adiw	r26, 0x01	; 1
    4746:	9c 93       	st	X, r25
    4748:	8e 93       	st	-X, r24
    474a:	fe 01       	movw	r30, r28
    474c:	ef 58       	subi	r30, 0x8F	; 143
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	80 81       	ld	r24, Z
    4752:	91 81       	ldd	r25, Z+1	; 0x01
    4754:	01 97       	sbiw	r24, 0x01	; 1
    4756:	f1 f7       	brne	.-4      	; 0x4754 <main+0x104c>
    4758:	fe 01       	movw	r30, r28
    475a:	ef 58       	subi	r30, 0x8F	; 143
    475c:	ff 4f       	sbci	r31, 0xFF	; 255
    475e:	91 83       	std	Z+1, r25	; 0x01
    4760:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == '*'){
    4762:	fe 01       	movw	r30, r28
    4764:	e8 50       	subi	r30, 0x08	; 8
    4766:	ff 4f       	sbci	r31, 0xFF	; 255
    4768:	80 81       	ld	r24, Z
    476a:	8a 32       	cpi	r24, 0x2A	; 42
    476c:	09 f0       	breq	.+2      	; 0x4770 <main+0x1068>
    476e:	ce c0       	rjmp	.+412    	; 0x490c <main+0x1204>
			LCD_displayCharacter('*');
    4770:	8a e2       	ldi	r24, 0x2A	; 42
    4772:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '*';
    4776:	fe 01       	movw	r30, r28
    4778:	e7 50       	subi	r30, 0x07	; 7
    477a:	ff 4f       	sbci	r31, 0xFF	; 255
    477c:	80 81       	ld	r24, Z
    477e:	28 2f       	mov	r18, r24
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	ce 01       	movw	r24, r28
    4784:	85 50       	subi	r24, 0x05	; 5
    4786:	9f 4f       	sbci	r25, 0xFF	; 255
    4788:	fc 01       	movw	r30, r24
    478a:	e2 0f       	add	r30, r18
    478c:	f3 1f       	adc	r31, r19
    478e:	8a e2       	ldi	r24, 0x2A	; 42
    4790:	80 83       	st	Z, r24
			c++;
    4792:	de 01       	movw	r26, r28
    4794:	a7 50       	subi	r26, 0x07	; 7
    4796:	bf 4f       	sbci	r27, 0xFF	; 255
    4798:	fe 01       	movw	r30, r28
    479a:	e7 50       	subi	r30, 0x07	; 7
    479c:	ff 4f       	sbci	r31, 0xFF	; 255
    479e:	80 81       	ld	r24, Z
    47a0:	8f 5f       	subi	r24, 0xFF	; 255
    47a2:	8c 93       	st	X, r24
    47a4:	fe 01       	movw	r30, r28
    47a6:	e3 59       	subi	r30, 0x93	; 147
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	ac e0       	ldi	r26, 0x0C	; 12
    47b0:	b2 e4       	ldi	r27, 0x42	; 66
    47b2:	80 83       	st	Z, r24
    47b4:	91 83       	std	Z+1, r25	; 0x01
    47b6:	a2 83       	std	Z+2, r26	; 0x02
    47b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ba:	8e 01       	movw	r16, r28
    47bc:	07 59       	subi	r16, 0x97	; 151
    47be:	1f 4f       	sbci	r17, 0xFF	; 255
    47c0:	fe 01       	movw	r30, r28
    47c2:	e3 59       	subi	r30, 0x93	; 147
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	60 81       	ld	r22, Z
    47c8:	71 81       	ldd	r23, Z+1	; 0x01
    47ca:	82 81       	ldd	r24, Z+2	; 0x02
    47cc:	93 81       	ldd	r25, Z+3	; 0x03
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	4a e7       	ldi	r20, 0x7A	; 122
    47d4:	55 e4       	ldi	r21, 0x45	; 69
    47d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	f8 01       	movw	r30, r16
    47e0:	80 83       	st	Z, r24
    47e2:	91 83       	std	Z+1, r25	; 0x01
    47e4:	a2 83       	std	Z+2, r26	; 0x02
    47e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47e8:	fe 01       	movw	r30, r28
    47ea:	e7 59       	subi	r30, 0x97	; 151
    47ec:	ff 4f       	sbci	r31, 0xFF	; 255
    47ee:	60 81       	ld	r22, Z
    47f0:	71 81       	ldd	r23, Z+1	; 0x01
    47f2:	82 81       	ldd	r24, Z+2	; 0x02
    47f4:	93 81       	ldd	r25, Z+3	; 0x03
    47f6:	20 e0       	ldi	r18, 0x00	; 0
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	40 e8       	ldi	r20, 0x80	; 128
    47fc:	5f e3       	ldi	r21, 0x3F	; 63
    47fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4802:	88 23       	and	r24, r24
    4804:	44 f4       	brge	.+16     	; 0x4816 <main+0x110e>
		__ticks = 1;
    4806:	fe 01       	movw	r30, r28
    4808:	e9 59       	subi	r30, 0x99	; 153
    480a:	ff 4f       	sbci	r31, 0xFF	; 255
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	91 83       	std	Z+1, r25	; 0x01
    4812:	80 83       	st	Z, r24
    4814:	64 c0       	rjmp	.+200    	; 0x48de <main+0x11d6>
	else if (__tmp > 65535)
    4816:	fe 01       	movw	r30, r28
    4818:	e7 59       	subi	r30, 0x97	; 151
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	60 81       	ld	r22, Z
    481e:	71 81       	ldd	r23, Z+1	; 0x01
    4820:	82 81       	ldd	r24, Z+2	; 0x02
    4822:	93 81       	ldd	r25, Z+3	; 0x03
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	3f ef       	ldi	r19, 0xFF	; 255
    4828:	4f e7       	ldi	r20, 0x7F	; 127
    482a:	57 e4       	ldi	r21, 0x47	; 71
    482c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4830:	18 16       	cp	r1, r24
    4832:	0c f0       	brlt	.+2      	; 0x4836 <main+0x112e>
    4834:	43 c0       	rjmp	.+134    	; 0x48bc <main+0x11b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4836:	fe 01       	movw	r30, r28
    4838:	e3 59       	subi	r30, 0x93	; 147
    483a:	ff 4f       	sbci	r31, 0xFF	; 255
    483c:	60 81       	ld	r22, Z
    483e:	71 81       	ldd	r23, Z+1	; 0x01
    4840:	82 81       	ldd	r24, Z+2	; 0x02
    4842:	93 81       	ldd	r25, Z+3	; 0x03
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	40 e2       	ldi	r20, 0x20	; 32
    484a:	51 e4       	ldi	r21, 0x41	; 65
    484c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	8e 01       	movw	r16, r28
    4856:	09 59       	subi	r16, 0x99	; 153
    4858:	1f 4f       	sbci	r17, 0xFF	; 255
    485a:	bc 01       	movw	r22, r24
    485c:	cd 01       	movw	r24, r26
    485e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4862:	dc 01       	movw	r26, r24
    4864:	cb 01       	movw	r24, r22
    4866:	f8 01       	movw	r30, r16
    4868:	91 83       	std	Z+1, r25	; 0x01
    486a:	80 83       	st	Z, r24
    486c:	1f c0       	rjmp	.+62     	; 0x48ac <main+0x11a4>
    486e:	fe 01       	movw	r30, r28
    4870:	eb 59       	subi	r30, 0x9B	; 155
    4872:	ff 4f       	sbci	r31, 0xFF	; 255
    4874:	80 e9       	ldi	r24, 0x90	; 144
    4876:	91 e0       	ldi	r25, 0x01	; 1
    4878:	91 83       	std	Z+1, r25	; 0x01
    487a:	80 83       	st	Z, r24
    487c:	fe 01       	movw	r30, r28
    487e:	eb 59       	subi	r30, 0x9B	; 155
    4880:	ff 4f       	sbci	r31, 0xFF	; 255
    4882:	80 81       	ld	r24, Z
    4884:	91 81       	ldd	r25, Z+1	; 0x01
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	f1 f7       	brne	.-4      	; 0x4886 <main+0x117e>
    488a:	fe 01       	movw	r30, r28
    488c:	eb 59       	subi	r30, 0x9B	; 155
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	91 83       	std	Z+1, r25	; 0x01
    4892:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4894:	de 01       	movw	r26, r28
    4896:	a9 59       	subi	r26, 0x99	; 153
    4898:	bf 4f       	sbci	r27, 0xFF	; 255
    489a:	fe 01       	movw	r30, r28
    489c:	e9 59       	subi	r30, 0x99	; 153
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	80 81       	ld	r24, Z
    48a2:	91 81       	ldd	r25, Z+1	; 0x01
    48a4:	01 97       	sbiw	r24, 0x01	; 1
    48a6:	11 96       	adiw	r26, 0x01	; 1
    48a8:	9c 93       	st	X, r25
    48aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ac:	fe 01       	movw	r30, r28
    48ae:	e9 59       	subi	r30, 0x99	; 153
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	80 81       	ld	r24, Z
    48b4:	91 81       	ldd	r25, Z+1	; 0x01
    48b6:	00 97       	sbiw	r24, 0x00	; 0
    48b8:	d1 f6       	brne	.-76     	; 0x486e <main+0x1166>
    48ba:	28 c0       	rjmp	.+80     	; 0x490c <main+0x1204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48bc:	8e 01       	movw	r16, r28
    48be:	09 59       	subi	r16, 0x99	; 153
    48c0:	1f 4f       	sbci	r17, 0xFF	; 255
    48c2:	fe 01       	movw	r30, r28
    48c4:	e7 59       	subi	r30, 0x97	; 151
    48c6:	ff 4f       	sbci	r31, 0xFF	; 255
    48c8:	60 81       	ld	r22, Z
    48ca:	71 81       	ldd	r23, Z+1	; 0x01
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	93 81       	ldd	r25, Z+3	; 0x03
    48d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    48d4:	dc 01       	movw	r26, r24
    48d6:	cb 01       	movw	r24, r22
    48d8:	f8 01       	movw	r30, r16
    48da:	91 83       	std	Z+1, r25	; 0x01
    48dc:	80 83       	st	Z, r24
    48de:	de 01       	movw	r26, r28
    48e0:	ad 59       	subi	r26, 0x9D	; 157
    48e2:	bf 4f       	sbci	r27, 0xFF	; 255
    48e4:	fe 01       	movw	r30, r28
    48e6:	e9 59       	subi	r30, 0x99	; 153
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	80 81       	ld	r24, Z
    48ec:	91 81       	ldd	r25, Z+1	; 0x01
    48ee:	11 96       	adiw	r26, 0x01	; 1
    48f0:	9c 93       	st	X, r25
    48f2:	8e 93       	st	-X, r24
    48f4:	fe 01       	movw	r30, r28
    48f6:	ed 59       	subi	r30, 0x9D	; 157
    48f8:	ff 4f       	sbci	r31, 0xFF	; 255
    48fa:	80 81       	ld	r24, Z
    48fc:	91 81       	ldd	r25, Z+1	; 0x01
    48fe:	01 97       	sbiw	r24, 0x01	; 1
    4900:	f1 f7       	brne	.-4      	; 0x48fe <main+0x11f6>
    4902:	fe 01       	movw	r30, r28
    4904:	ed 59       	subi	r30, 0x9D	; 157
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	91 83       	std	Z+1, r25	; 0x01
    490a:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == 0){
    490c:	fe 01       	movw	r30, r28
    490e:	e8 50       	subi	r30, 0x08	; 8
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	80 81       	ld	r24, Z
    4914:	88 23       	and	r24, r24
    4916:	09 f0       	breq	.+2      	; 0x491a <main+0x1212>
    4918:	ce c0       	rjmp	.+412    	; 0x4ab6 <main+0x13ae>
			LCD_displayCharacter('*');
    491a:	8a e2       	ldi	r24, 0x2A	; 42
    491c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '0';
    4920:	fe 01       	movw	r30, r28
    4922:	e7 50       	subi	r30, 0x07	; 7
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	80 81       	ld	r24, Z
    4928:	28 2f       	mov	r18, r24
    492a:	30 e0       	ldi	r19, 0x00	; 0
    492c:	ce 01       	movw	r24, r28
    492e:	85 50       	subi	r24, 0x05	; 5
    4930:	9f 4f       	sbci	r25, 0xFF	; 255
    4932:	fc 01       	movw	r30, r24
    4934:	e2 0f       	add	r30, r18
    4936:	f3 1f       	adc	r31, r19
    4938:	80 e3       	ldi	r24, 0x30	; 48
    493a:	80 83       	st	Z, r24
			c++;
    493c:	de 01       	movw	r26, r28
    493e:	a7 50       	subi	r26, 0x07	; 7
    4940:	bf 4f       	sbci	r27, 0xFF	; 255
    4942:	fe 01       	movw	r30, r28
    4944:	e7 50       	subi	r30, 0x07	; 7
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	80 81       	ld	r24, Z
    494a:	8f 5f       	subi	r24, 0xFF	; 255
    494c:	8c 93       	st	X, r24
    494e:	fe 01       	movw	r30, r28
    4950:	e1 5a       	subi	r30, 0xA1	; 161
    4952:	ff 4f       	sbci	r31, 0xFF	; 255
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	ac e0       	ldi	r26, 0x0C	; 12
    495a:	b2 e4       	ldi	r27, 0x42	; 66
    495c:	80 83       	st	Z, r24
    495e:	91 83       	std	Z+1, r25	; 0x01
    4960:	a2 83       	std	Z+2, r26	; 0x02
    4962:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4964:	8e 01       	movw	r16, r28
    4966:	05 5a       	subi	r16, 0xA5	; 165
    4968:	1f 4f       	sbci	r17, 0xFF	; 255
    496a:	fe 01       	movw	r30, r28
    496c:	e1 5a       	subi	r30, 0xA1	; 161
    496e:	ff 4f       	sbci	r31, 0xFF	; 255
    4970:	60 81       	ld	r22, Z
    4972:	71 81       	ldd	r23, Z+1	; 0x01
    4974:	82 81       	ldd	r24, Z+2	; 0x02
    4976:	93 81       	ldd	r25, Z+3	; 0x03
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	4a e7       	ldi	r20, 0x7A	; 122
    497e:	55 e4       	ldi	r21, 0x45	; 69
    4980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	f8 01       	movw	r30, r16
    498a:	80 83       	st	Z, r24
    498c:	91 83       	std	Z+1, r25	; 0x01
    498e:	a2 83       	std	Z+2, r26	; 0x02
    4990:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4992:	fe 01       	movw	r30, r28
    4994:	e5 5a       	subi	r30, 0xA5	; 165
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	60 81       	ld	r22, Z
    499a:	71 81       	ldd	r23, Z+1	; 0x01
    499c:	82 81       	ldd	r24, Z+2	; 0x02
    499e:	93 81       	ldd	r25, Z+3	; 0x03
    49a0:	20 e0       	ldi	r18, 0x00	; 0
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	40 e8       	ldi	r20, 0x80	; 128
    49a6:	5f e3       	ldi	r21, 0x3F	; 63
    49a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    49ac:	88 23       	and	r24, r24
    49ae:	44 f4       	brge	.+16     	; 0x49c0 <main+0x12b8>
		__ticks = 1;
    49b0:	fe 01       	movw	r30, r28
    49b2:	e7 5a       	subi	r30, 0xA7	; 167
    49b4:	ff 4f       	sbci	r31, 0xFF	; 255
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	91 83       	std	Z+1, r25	; 0x01
    49bc:	80 83       	st	Z, r24
    49be:	64 c0       	rjmp	.+200    	; 0x4a88 <main+0x1380>
	else if (__tmp > 65535)
    49c0:	fe 01       	movw	r30, r28
    49c2:	e5 5a       	subi	r30, 0xA5	; 165
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	60 81       	ld	r22, Z
    49c8:	71 81       	ldd	r23, Z+1	; 0x01
    49ca:	82 81       	ldd	r24, Z+2	; 0x02
    49cc:	93 81       	ldd	r25, Z+3	; 0x03
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	3f ef       	ldi	r19, 0xFF	; 255
    49d2:	4f e7       	ldi	r20, 0x7F	; 127
    49d4:	57 e4       	ldi	r21, 0x47	; 71
    49d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    49da:	18 16       	cp	r1, r24
    49dc:	0c f0       	brlt	.+2      	; 0x49e0 <main+0x12d8>
    49de:	43 c0       	rjmp	.+134    	; 0x4a66 <main+0x135e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e0:	fe 01       	movw	r30, r28
    49e2:	e1 5a       	subi	r30, 0xA1	; 161
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	40 e2       	ldi	r20, 0x20	; 32
    49f4:	51 e4       	ldi	r21, 0x41	; 65
    49f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    49fa:	dc 01       	movw	r26, r24
    49fc:	cb 01       	movw	r24, r22
    49fe:	8e 01       	movw	r16, r28
    4a00:	07 5a       	subi	r16, 0xA7	; 167
    4a02:	1f 4f       	sbci	r17, 0xFF	; 255
    4a04:	bc 01       	movw	r22, r24
    4a06:	cd 01       	movw	r24, r26
    4a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	cb 01       	movw	r24, r22
    4a10:	f8 01       	movw	r30, r16
    4a12:	91 83       	std	Z+1, r25	; 0x01
    4a14:	80 83       	st	Z, r24
    4a16:	1f c0       	rjmp	.+62     	; 0x4a56 <main+0x134e>
    4a18:	fe 01       	movw	r30, r28
    4a1a:	e9 5a       	subi	r30, 0xA9	; 169
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	80 e9       	ldi	r24, 0x90	; 144
    4a20:	91 e0       	ldi	r25, 0x01	; 1
    4a22:	91 83       	std	Z+1, r25	; 0x01
    4a24:	80 83       	st	Z, r24
    4a26:	fe 01       	movw	r30, r28
    4a28:	e9 5a       	subi	r30, 0xA9	; 169
    4a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2c:	80 81       	ld	r24, Z
    4a2e:	91 81       	ldd	r25, Z+1	; 0x01
    4a30:	01 97       	sbiw	r24, 0x01	; 1
    4a32:	f1 f7       	brne	.-4      	; 0x4a30 <main+0x1328>
    4a34:	fe 01       	movw	r30, r28
    4a36:	e9 5a       	subi	r30, 0xA9	; 169
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	91 83       	std	Z+1, r25	; 0x01
    4a3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a3e:	de 01       	movw	r26, r28
    4a40:	a7 5a       	subi	r26, 0xA7	; 167
    4a42:	bf 4f       	sbci	r27, 0xFF	; 255
    4a44:	fe 01       	movw	r30, r28
    4a46:	e7 5a       	subi	r30, 0xA7	; 167
    4a48:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4a:	80 81       	ld	r24, Z
    4a4c:	91 81       	ldd	r25, Z+1	; 0x01
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	11 96       	adiw	r26, 0x01	; 1
    4a52:	9c 93       	st	X, r25
    4a54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a56:	fe 01       	movw	r30, r28
    4a58:	e7 5a       	subi	r30, 0xA7	; 167
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	80 81       	ld	r24, Z
    4a5e:	91 81       	ldd	r25, Z+1	; 0x01
    4a60:	00 97       	sbiw	r24, 0x00	; 0
    4a62:	d1 f6       	brne	.-76     	; 0x4a18 <main+0x1310>
    4a64:	28 c0       	rjmp	.+80     	; 0x4ab6 <main+0x13ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a66:	8e 01       	movw	r16, r28
    4a68:	07 5a       	subi	r16, 0xA7	; 167
    4a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6c:	fe 01       	movw	r30, r28
    4a6e:	e5 5a       	subi	r30, 0xA5	; 165
    4a70:	ff 4f       	sbci	r31, 0xFF	; 255
    4a72:	60 81       	ld	r22, Z
    4a74:	71 81       	ldd	r23, Z+1	; 0x01
    4a76:	82 81       	ldd	r24, Z+2	; 0x02
    4a78:	93 81       	ldd	r25, Z+3	; 0x03
    4a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	f8 01       	movw	r30, r16
    4a84:	91 83       	std	Z+1, r25	; 0x01
    4a86:	80 83       	st	Z, r24
    4a88:	de 01       	movw	r26, r28
    4a8a:	ab 5a       	subi	r26, 0xAB	; 171
    4a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e7 5a       	subi	r30, 0xA7	; 167
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	80 81       	ld	r24, Z
    4a96:	91 81       	ldd	r25, Z+1	; 0x01
    4a98:	11 96       	adiw	r26, 0x01	; 1
    4a9a:	9c 93       	st	X, r25
    4a9c:	8e 93       	st	-X, r24
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	eb 5a       	subi	r30, 0xAB	; 171
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	80 81       	ld	r24, Z
    4aa6:	91 81       	ldd	r25, Z+1	; 0x01
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	f1 f7       	brne	.-4      	; 0x4aa8 <main+0x13a0>
    4aac:	fe 01       	movw	r30, r28
    4aae:	eb 5a       	subi	r30, 0xAB	; 171
    4ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab2:	91 83       	std	Z+1, r25	; 0x01
    4ab4:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(key_Pressed == '#'){
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	e8 50       	subi	r30, 0x08	; 8
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	80 81       	ld	r24, Z
    4abe:	83 32       	cpi	r24, 0x23	; 35
    4ac0:	09 f0       	breq	.+2      	; 0x4ac4 <main+0x13bc>
    4ac2:	ce c0       	rjmp	.+412    	; 0x4c60 <main+0x1558>
			LCD_displayCharacter('*');
    4ac4:	8a e2       	ldi	r24, 0x2A	; 42
    4ac6:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
			pressed_Keys[c] = '#';
    4aca:	fe 01       	movw	r30, r28
    4acc:	e7 50       	subi	r30, 0x07	; 7
    4ace:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad0:	80 81       	ld	r24, Z
    4ad2:	28 2f       	mov	r18, r24
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	85 50       	subi	r24, 0x05	; 5
    4ada:	9f 4f       	sbci	r25, 0xFF	; 255
    4adc:	fc 01       	movw	r30, r24
    4ade:	e2 0f       	add	r30, r18
    4ae0:	f3 1f       	adc	r31, r19
    4ae2:	83 e2       	ldi	r24, 0x23	; 35
    4ae4:	80 83       	st	Z, r24
			c++;
    4ae6:	de 01       	movw	r26, r28
    4ae8:	a7 50       	subi	r26, 0x07	; 7
    4aea:	bf 4f       	sbci	r27, 0xFF	; 255
    4aec:	fe 01       	movw	r30, r28
    4aee:	e7 50       	subi	r30, 0x07	; 7
    4af0:	ff 4f       	sbci	r31, 0xFF	; 255
    4af2:	80 81       	ld	r24, Z
    4af4:	8f 5f       	subi	r24, 0xFF	; 255
    4af6:	8c 93       	st	X, r24
    4af8:	fe 01       	movw	r30, r28
    4afa:	ef 5a       	subi	r30, 0xAF	; 175
    4afc:	ff 4f       	sbci	r31, 0xFF	; 255
    4afe:	80 e0       	ldi	r24, 0x00	; 0
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	ac e0       	ldi	r26, 0x0C	; 12
    4b04:	b2 e4       	ldi	r27, 0x42	; 66
    4b06:	80 83       	st	Z, r24
    4b08:	91 83       	std	Z+1, r25	; 0x01
    4b0a:	a2 83       	std	Z+2, r26	; 0x02
    4b0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b0e:	8e 01       	movw	r16, r28
    4b10:	03 5b       	subi	r16, 0xB3	; 179
    4b12:	1f 4f       	sbci	r17, 0xFF	; 255
    4b14:	fe 01       	movw	r30, r28
    4b16:	ef 5a       	subi	r30, 0xAF	; 175
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	60 81       	ld	r22, Z
    4b1c:	71 81       	ldd	r23, Z+1	; 0x01
    4b1e:	82 81       	ldd	r24, Z+2	; 0x02
    4b20:	93 81       	ldd	r25, Z+3	; 0x03
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	4a e7       	ldi	r20, 0x7A	; 122
    4b28:	55 e4       	ldi	r21, 0x45	; 69
    4b2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	f8 01       	movw	r30, r16
    4b34:	80 83       	st	Z, r24
    4b36:	91 83       	std	Z+1, r25	; 0x01
    4b38:	a2 83       	std	Z+2, r26	; 0x02
    4b3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	e3 5b       	subi	r30, 0xB3	; 179
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	60 81       	ld	r22, Z
    4b44:	71 81       	ldd	r23, Z+1	; 0x01
    4b46:	82 81       	ldd	r24, Z+2	; 0x02
    4b48:	93 81       	ldd	r25, Z+3	; 0x03
    4b4a:	20 e0       	ldi	r18, 0x00	; 0
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	40 e8       	ldi	r20, 0x80	; 128
    4b50:	5f e3       	ldi	r21, 0x3F	; 63
    4b52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4b56:	88 23       	and	r24, r24
    4b58:	44 f4       	brge	.+16     	; 0x4b6a <main+0x1462>
		__ticks = 1;
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	e5 5b       	subi	r30, 0xB5	; 181
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	81 e0       	ldi	r24, 0x01	; 1
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	91 83       	std	Z+1, r25	; 0x01
    4b66:	80 83       	st	Z, r24
    4b68:	64 c0       	rjmp	.+200    	; 0x4c32 <main+0x152a>
	else if (__tmp > 65535)
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	e3 5b       	subi	r30, 0xB3	; 179
    4b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b70:	60 81       	ld	r22, Z
    4b72:	71 81       	ldd	r23, Z+1	; 0x01
    4b74:	82 81       	ldd	r24, Z+2	; 0x02
    4b76:	93 81       	ldd	r25, Z+3	; 0x03
    4b78:	20 e0       	ldi	r18, 0x00	; 0
    4b7a:	3f ef       	ldi	r19, 0xFF	; 255
    4b7c:	4f e7       	ldi	r20, 0x7F	; 127
    4b7e:	57 e4       	ldi	r21, 0x47	; 71
    4b80:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4b84:	18 16       	cp	r1, r24
    4b86:	0c f0       	brlt	.+2      	; 0x4b8a <main+0x1482>
    4b88:	43 c0       	rjmp	.+134    	; 0x4c10 <main+0x1508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	ef 5a       	subi	r30, 0xAF	; 175
    4b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b90:	60 81       	ld	r22, Z
    4b92:	71 81       	ldd	r23, Z+1	; 0x01
    4b94:	82 81       	ldd	r24, Z+2	; 0x02
    4b96:	93 81       	ldd	r25, Z+3	; 0x03
    4b98:	20 e0       	ldi	r18, 0x00	; 0
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	40 e2       	ldi	r20, 0x20	; 32
    4b9e:	51 e4       	ldi	r21, 0x41	; 65
    4ba0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4ba4:	dc 01       	movw	r26, r24
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	8e 01       	movw	r16, r28
    4baa:	05 5b       	subi	r16, 0xB5	; 181
    4bac:	1f 4f       	sbci	r17, 0xFF	; 255
    4bae:	bc 01       	movw	r22, r24
    4bb0:	cd 01       	movw	r24, r26
    4bb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4bb6:	dc 01       	movw	r26, r24
    4bb8:	cb 01       	movw	r24, r22
    4bba:	f8 01       	movw	r30, r16
    4bbc:	91 83       	std	Z+1, r25	; 0x01
    4bbe:	80 83       	st	Z, r24
    4bc0:	1f c0       	rjmp	.+62     	; 0x4c00 <main+0x14f8>
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	e7 5b       	subi	r30, 0xB7	; 183
    4bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc8:	80 e9       	ldi	r24, 0x90	; 144
    4bca:	91 e0       	ldi	r25, 0x01	; 1
    4bcc:	91 83       	std	Z+1, r25	; 0x01
    4bce:	80 83       	st	Z, r24
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	e7 5b       	subi	r30, 0xB7	; 183
    4bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd6:	80 81       	ld	r24, Z
    4bd8:	91 81       	ldd	r25, Z+1	; 0x01
    4bda:	01 97       	sbiw	r24, 0x01	; 1
    4bdc:	f1 f7       	brne	.-4      	; 0x4bda <main+0x14d2>
    4bde:	fe 01       	movw	r30, r28
    4be0:	e7 5b       	subi	r30, 0xB7	; 183
    4be2:	ff 4f       	sbci	r31, 0xFF	; 255
    4be4:	91 83       	std	Z+1, r25	; 0x01
    4be6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4be8:	de 01       	movw	r26, r28
    4bea:	a5 5b       	subi	r26, 0xB5	; 181
    4bec:	bf 4f       	sbci	r27, 0xFF	; 255
    4bee:	fe 01       	movw	r30, r28
    4bf0:	e5 5b       	subi	r30, 0xB5	; 181
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	80 81       	ld	r24, Z
    4bf6:	91 81       	ldd	r25, Z+1	; 0x01
    4bf8:	01 97       	sbiw	r24, 0x01	; 1
    4bfa:	11 96       	adiw	r26, 0x01	; 1
    4bfc:	9c 93       	st	X, r25
    4bfe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c00:	fe 01       	movw	r30, r28
    4c02:	e5 5b       	subi	r30, 0xB5	; 181
    4c04:	ff 4f       	sbci	r31, 0xFF	; 255
    4c06:	80 81       	ld	r24, Z
    4c08:	91 81       	ldd	r25, Z+1	; 0x01
    4c0a:	00 97       	sbiw	r24, 0x00	; 0
    4c0c:	d1 f6       	brne	.-76     	; 0x4bc2 <main+0x14ba>
    4c0e:	28 c0       	rjmp	.+80     	; 0x4c60 <main+0x1558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c10:	8e 01       	movw	r16, r28
    4c12:	05 5b       	subi	r16, 0xB5	; 181
    4c14:	1f 4f       	sbci	r17, 0xFF	; 255
    4c16:	fe 01       	movw	r30, r28
    4c18:	e3 5b       	subi	r30, 0xB3	; 179
    4c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1c:	60 81       	ld	r22, Z
    4c1e:	71 81       	ldd	r23, Z+1	; 0x01
    4c20:	82 81       	ldd	r24, Z+2	; 0x02
    4c22:	93 81       	ldd	r25, Z+3	; 0x03
    4c24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	f8 01       	movw	r30, r16
    4c2e:	91 83       	std	Z+1, r25	; 0x01
    4c30:	80 83       	st	Z, r24
    4c32:	de 01       	movw	r26, r28
    4c34:	a9 5b       	subi	r26, 0xB9	; 185
    4c36:	bf 4f       	sbci	r27, 0xFF	; 255
    4c38:	fe 01       	movw	r30, r28
    4c3a:	e5 5b       	subi	r30, 0xB5	; 181
    4c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3e:	80 81       	ld	r24, Z
    4c40:	91 81       	ldd	r25, Z+1	; 0x01
    4c42:	11 96       	adiw	r26, 0x01	; 1
    4c44:	9c 93       	st	X, r25
    4c46:	8e 93       	st	-X, r24
    4c48:	fe 01       	movw	r30, r28
    4c4a:	e9 5b       	subi	r30, 0xB9	; 185
    4c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4e:	80 81       	ld	r24, Z
    4c50:	91 81       	ldd	r25, Z+1	; 0x01
    4c52:	01 97       	sbiw	r24, 0x01	; 1
    4c54:	f1 f7       	brne	.-4      	; 0x4c52 <main+0x154a>
    4c56:	fe 01       	movw	r30, r28
    4c58:	e9 5b       	subi	r30, 0xB9	; 185
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	91 83       	std	Z+1, r25	; 0x01
    4c5e:	80 83       	st	Z, r24
			_delay_ms(35);
		}

		if(c == Password_Length){
    4c60:	fe 01       	movw	r30, r28
    4c62:	e7 50       	subi	r30, 0x07	; 7
    4c64:	ff 4f       	sbci	r31, 0xFF	; 255
    4c66:	80 81       	ld	r24, Z
    4c68:	86 30       	cpi	r24, 0x06	; 6
    4c6a:	11 f0       	breq	.+4      	; 0x4c70 <main+0x1568>
    4c6c:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <main+0x154>
			for(int i = 0; i < 5; i++){
    4c70:	fe 01       	movw	r30, r28
    4c72:	ea 50       	subi	r30, 0x0A	; 10
    4c74:	ff 4f       	sbci	r31, 0xFF	; 255
    4c76:	11 82       	std	Z+1, r1	; 0x01
    4c78:	10 82       	st	Z, r1
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	ea 50       	subi	r30, 0x0A	; 10
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	80 81       	ld	r24, Z
    4c82:	91 81       	ldd	r25, Z+1	; 0x01
    4c84:	85 30       	cpi	r24, 0x05	; 5
    4c86:	91 05       	cpc	r25, r1
    4c88:	14 f0       	brlt	.+4      	; 0x4c8e <main+0x1586>
    4c8a:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <main+0x154>
				if(pressed_Keys[i] == password[i]){
    4c8e:	fe 01       	movw	r30, r28
    4c90:	ea 50       	subi	r30, 0x0A	; 10
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	20 81       	ld	r18, Z
    4c96:	31 81       	ldd	r19, Z+1	; 0x01
    4c98:	ce 01       	movw	r24, r28
    4c9a:	85 50       	subi	r24, 0x05	; 5
    4c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c9e:	fc 01       	movw	r30, r24
    4ca0:	e2 0f       	add	r30, r18
    4ca2:	f3 1f       	adc	r31, r19
    4ca4:	40 81       	ld	r20, Z
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	ea 50       	subi	r30, 0x0A	; 10
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	20 81       	ld	r18, Z
    4cae:	31 81       	ldd	r19, Z+1	; 0x01
    4cb0:	ce 01       	movw	r24, r28
    4cb2:	8b 5f       	subi	r24, 0xFB	; 251
    4cb4:	9e 4f       	sbci	r25, 0xFE	; 254
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	e2 0f       	add	r30, r18
    4cba:	f3 1f       	adc	r31, r19
    4cbc:	80 81       	ld	r24, Z
    4cbe:	48 17       	cp	r20, r24
    4cc0:	09 f0       	breq	.+2      	; 0x4cc4 <main+0x15bc>
    4cc2:	53 c3       	rjmp	.+1702   	; 0x536a <main+0x1c62>
					LCD_ClearScreen();
    4cc4:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>
					LCD_displayString("Correct Password");
    4cc8:	8f eb       	ldi	r24, 0xBF	; 191
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
    4cd0:	fe 01       	movw	r30, r28
    4cd2:	ed 5b       	subi	r30, 0xBD	; 189
    4cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd6:	80 e0       	ldi	r24, 0x00	; 0
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	ac e0       	ldi	r26, 0x0C	; 12
    4cdc:	b2 e4       	ldi	r27, 0x42	; 66
    4cde:	80 83       	st	Z, r24
    4ce0:	91 83       	std	Z+1, r25	; 0x01
    4ce2:	a2 83       	std	Z+2, r26	; 0x02
    4ce4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ce6:	8e 01       	movw	r16, r28
    4ce8:	01 5c       	subi	r16, 0xC1	; 193
    4cea:	1f 4f       	sbci	r17, 0xFF	; 255
    4cec:	fe 01       	movw	r30, r28
    4cee:	ed 5b       	subi	r30, 0xBD	; 189
    4cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf2:	60 81       	ld	r22, Z
    4cf4:	71 81       	ldd	r23, Z+1	; 0x01
    4cf6:	82 81       	ldd	r24, Z+2	; 0x02
    4cf8:	93 81       	ldd	r25, Z+3	; 0x03
    4cfa:	20 e0       	ldi	r18, 0x00	; 0
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	4a e7       	ldi	r20, 0x7A	; 122
    4d00:	55 e4       	ldi	r21, 0x45	; 69
    4d02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d06:	dc 01       	movw	r26, r24
    4d08:	cb 01       	movw	r24, r22
    4d0a:	f8 01       	movw	r30, r16
    4d0c:	80 83       	st	Z, r24
    4d0e:	91 83       	std	Z+1, r25	; 0x01
    4d10:	a2 83       	std	Z+2, r26	; 0x02
    4d12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d14:	fe 01       	movw	r30, r28
    4d16:	ff 96       	adiw	r30, 0x3f	; 63
    4d18:	60 81       	ld	r22, Z
    4d1a:	71 81       	ldd	r23, Z+1	; 0x01
    4d1c:	82 81       	ldd	r24, Z+2	; 0x02
    4d1e:	93 81       	ldd	r25, Z+3	; 0x03
    4d20:	20 e0       	ldi	r18, 0x00	; 0
    4d22:	30 e0       	ldi	r19, 0x00	; 0
    4d24:	40 e8       	ldi	r20, 0x80	; 128
    4d26:	5f e3       	ldi	r21, 0x3F	; 63
    4d28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4d2c:	88 23       	and	r24, r24
    4d2e:	2c f4       	brge	.+10     	; 0x4d3a <main+0x1632>
		__ticks = 1;
    4d30:	81 e0       	ldi	r24, 0x01	; 1
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	9e af       	std	Y+62, r25	; 0x3e
    4d36:	8d af       	std	Y+61, r24	; 0x3d
    4d38:	46 c0       	rjmp	.+140    	; 0x4dc6 <main+0x16be>
	else if (__tmp > 65535)
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	ff 96       	adiw	r30, 0x3f	; 63
    4d3e:	60 81       	ld	r22, Z
    4d40:	71 81       	ldd	r23, Z+1	; 0x01
    4d42:	82 81       	ldd	r24, Z+2	; 0x02
    4d44:	93 81       	ldd	r25, Z+3	; 0x03
    4d46:	20 e0       	ldi	r18, 0x00	; 0
    4d48:	3f ef       	ldi	r19, 0xFF	; 255
    4d4a:	4f e7       	ldi	r20, 0x7F	; 127
    4d4c:	57 e4       	ldi	r21, 0x47	; 71
    4d4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4d52:	18 16       	cp	r1, r24
    4d54:	64 f5       	brge	.+88     	; 0x4dae <main+0x16a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d56:	fe 01       	movw	r30, r28
    4d58:	ed 5b       	subi	r30, 0xBD	; 189
    4d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5c:	60 81       	ld	r22, Z
    4d5e:	71 81       	ldd	r23, Z+1	; 0x01
    4d60:	82 81       	ldd	r24, Z+2	; 0x02
    4d62:	93 81       	ldd	r25, Z+3	; 0x03
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	40 e2       	ldi	r20, 0x20	; 32
    4d6a:	51 e4       	ldi	r21, 0x41	; 65
    4d6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d70:	dc 01       	movw	r26, r24
    4d72:	cb 01       	movw	r24, r22
    4d74:	bc 01       	movw	r22, r24
    4d76:	cd 01       	movw	r24, r26
    4d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	9e af       	std	Y+62, r25	; 0x3e
    4d82:	8d af       	std	Y+61, r24	; 0x3d
    4d84:	0f c0       	rjmp	.+30     	; 0x4da4 <main+0x169c>
    4d86:	80 e9       	ldi	r24, 0x90	; 144
    4d88:	91 e0       	ldi	r25, 0x01	; 1
    4d8a:	9c af       	std	Y+60, r25	; 0x3c
    4d8c:	8b af       	std	Y+59, r24	; 0x3b
    4d8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d90:	9c ad       	ldd	r25, Y+60	; 0x3c
    4d92:	01 97       	sbiw	r24, 0x01	; 1
    4d94:	f1 f7       	brne	.-4      	; 0x4d92 <main+0x168a>
    4d96:	9c af       	std	Y+60, r25	; 0x3c
    4d98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d9e:	01 97       	sbiw	r24, 0x01	; 1
    4da0:	9e af       	std	Y+62, r25	; 0x3e
    4da2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4da6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4da8:	00 97       	sbiw	r24, 0x00	; 0
    4daa:	69 f7       	brne	.-38     	; 0x4d86 <main+0x167e>
    4dac:	16 c0       	rjmp	.+44     	; 0x4dda <main+0x16d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dae:	fe 01       	movw	r30, r28
    4db0:	ff 96       	adiw	r30, 0x3f	; 63
    4db2:	60 81       	ld	r22, Z
    4db4:	71 81       	ldd	r23, Z+1	; 0x01
    4db6:	82 81       	ldd	r24, Z+2	; 0x02
    4db8:	93 81       	ldd	r25, Z+3	; 0x03
    4dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4dbe:	dc 01       	movw	r26, r24
    4dc0:	cb 01       	movw	r24, r22
    4dc2:	9e af       	std	Y+62, r25	; 0x3e
    4dc4:	8d af       	std	Y+61, r24	; 0x3d
    4dc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4dc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    4dca:	9a af       	std	Y+58, r25	; 0x3a
    4dcc:	89 af       	std	Y+57, r24	; 0x39
    4dce:	89 ad       	ldd	r24, Y+57	; 0x39
    4dd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	f1 f7       	brne	.-4      	; 0x4dd2 <main+0x16ca>
    4dd6:	9a af       	std	Y+58, r25	; 0x3a
    4dd8:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(35);
					LCD_ClearScreen();
    4dda:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>

					// Dc Motor

					LCD_displayString("Welcome to Motor");
    4dde:	80 ed       	ldi	r24, 0xD0	; 208
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
					LCD_GoToXY(1, 0);
    4de6:	81 e0       	ldi	r24, 0x01	; 1
    4de8:	60 e0       	ldi	r22, 0x00	; 0
    4dea:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <LCD_GoToXY>
					LCD_displayString("DachBoard");
    4dee:	81 ee       	ldi	r24, 0xE1	; 225
    4df0:	90 e0       	ldi	r25, 0x00	; 0
    4df2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
					First_Screen();
    4df6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <First_Screen>

					while(1){
						u8 key_Motor = Keypad_GetPressedKey();
    4dfa:	0e 94 35 19 	call	0x326a	; 0x326a <Keypad_GetPressedKey>
    4dfe:	fe 01       	movw	r30, r28
    4e00:	eb 50       	subi	r30, 0x0B	; 11
    4e02:	ff 4f       	sbci	r31, 0xFF	; 255
    4e04:	80 83       	st	Z, r24
						if(key_Motor == 1){
    4e06:	fe 01       	movw	r30, r28
    4e08:	eb 50       	subi	r30, 0x0B	; 11
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	80 81       	ld	r24, Z
    4e0e:	81 30       	cpi	r24, 0x01	; 1
    4e10:	09 f0       	breq	.+2      	; 0x4e14 <main+0x170c>
    4e12:	3f c2       	rjmp	.+1150   	; 0x5292 <main+0x1b8a>
							Second_Screen();
    4e14:	0e 94 3d 1b 	call	0x367a	; 0x367a <Second_Screen>
    4e18:	80 e0       	ldi	r24, 0x00	; 0
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	ac e0       	ldi	r26, 0x0C	; 12
    4e1e:	b2 e4       	ldi	r27, 0x42	; 66
    4e20:	8d ab       	std	Y+53, r24	; 0x35
    4e22:	9e ab       	std	Y+54, r25	; 0x36
    4e24:	af ab       	std	Y+55, r26	; 0x37
    4e26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e28:	6d a9       	ldd	r22, Y+53	; 0x35
    4e2a:	7e a9       	ldd	r23, Y+54	; 0x36
    4e2c:	8f a9       	ldd	r24, Y+55	; 0x37
    4e2e:	98 ad       	ldd	r25, Y+56	; 0x38
    4e30:	20 e0       	ldi	r18, 0x00	; 0
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	4a e7       	ldi	r20, 0x7A	; 122
    4e36:	55 e4       	ldi	r21, 0x45	; 69
    4e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	89 ab       	std	Y+49, r24	; 0x31
    4e42:	9a ab       	std	Y+50, r25	; 0x32
    4e44:	ab ab       	std	Y+51, r26	; 0x33
    4e46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4e48:	69 a9       	ldd	r22, Y+49	; 0x31
    4e4a:	7a a9       	ldd	r23, Y+50	; 0x32
    4e4c:	8b a9       	ldd	r24, Y+51	; 0x33
    4e4e:	9c a9       	ldd	r25, Y+52	; 0x34
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	40 e8       	ldi	r20, 0x80	; 128
    4e56:	5f e3       	ldi	r21, 0x3F	; 63
    4e58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4e5c:	88 23       	and	r24, r24
    4e5e:	2c f4       	brge	.+10     	; 0x4e6a <main+0x1762>
		__ticks = 1;
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	98 ab       	std	Y+48, r25	; 0x30
    4e66:	8f a7       	std	Y+47, r24	; 0x2f
    4e68:	3f c0       	rjmp	.+126    	; 0x4ee8 <main+0x17e0>
	else if (__tmp > 65535)
    4e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    4e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    4e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    4e70:	9c a9       	ldd	r25, Y+52	; 0x34
    4e72:	20 e0       	ldi	r18, 0x00	; 0
    4e74:	3f ef       	ldi	r19, 0xFF	; 255
    4e76:	4f e7       	ldi	r20, 0x7F	; 127
    4e78:	57 e4       	ldi	r21, 0x47	; 71
    4e7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4e7e:	18 16       	cp	r1, r24
    4e80:	4c f5       	brge	.+82     	; 0x4ed4 <main+0x17cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e82:	6d a9       	ldd	r22, Y+53	; 0x35
    4e84:	7e a9       	ldd	r23, Y+54	; 0x36
    4e86:	8f a9       	ldd	r24, Y+55	; 0x37
    4e88:	98 ad       	ldd	r25, Y+56	; 0x38
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	40 e2       	ldi	r20, 0x20	; 32
    4e90:	51 e4       	ldi	r21, 0x41	; 65
    4e92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	bc 01       	movw	r22, r24
    4e9c:	cd 01       	movw	r24, r26
    4e9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	98 ab       	std	Y+48, r25	; 0x30
    4ea8:	8f a7       	std	Y+47, r24	; 0x2f
    4eaa:	0f c0       	rjmp	.+30     	; 0x4eca <main+0x17c2>
    4eac:	80 e9       	ldi	r24, 0x90	; 144
    4eae:	91 e0       	ldi	r25, 0x01	; 1
    4eb0:	9e a7       	std	Y+46, r25	; 0x2e
    4eb2:	8d a7       	std	Y+45, r24	; 0x2d
    4eb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4eb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4eb8:	01 97       	sbiw	r24, 0x01	; 1
    4eba:	f1 f7       	brne	.-4      	; 0x4eb8 <main+0x17b0>
    4ebc:	9e a7       	std	Y+46, r25	; 0x2e
    4ebe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    4ec4:	01 97       	sbiw	r24, 0x01	; 1
    4ec6:	98 ab       	std	Y+48, r25	; 0x30
    4ec8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eca:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ecc:	98 a9       	ldd	r25, Y+48	; 0x30
    4ece:	00 97       	sbiw	r24, 0x00	; 0
    4ed0:	69 f7       	brne	.-38     	; 0x4eac <main+0x17a4>
    4ed2:	14 c0       	rjmp	.+40     	; 0x4efc <main+0x17f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ed4:	69 a9       	ldd	r22, Y+49	; 0x31
    4ed6:	7a a9       	ldd	r23, Y+50	; 0x32
    4ed8:	8b a9       	ldd	r24, Y+51	; 0x33
    4eda:	9c a9       	ldd	r25, Y+52	; 0x34
    4edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	98 ab       	std	Y+48, r25	; 0x30
    4ee6:	8f a7       	std	Y+47, r24	; 0x2f
    4ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4eea:	98 a9       	ldd	r25, Y+48	; 0x30
    4eec:	9c a7       	std	Y+44, r25	; 0x2c
    4eee:	8b a7       	std	Y+43, r24	; 0x2b
    4ef0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ef2:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ef4:	01 97       	sbiw	r24, 0x01	; 1
    4ef6:	f1 f7       	brne	.-4      	; 0x4ef4 <main+0x17ec>
    4ef8:	9c a7       	std	Y+44, r25	; 0x2c
    4efa:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(35);

							while(1){
								u8 Motor_Rotate = Keypad_GetPressedKey();
    4efc:	0e 94 35 19 	call	0x326a	; 0x326a <Keypad_GetPressedKey>
    4f00:	fe 01       	movw	r30, r28
    4f02:	ec 50       	subi	r30, 0x0C	; 12
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	80 83       	st	Z, r24
								if(Motor_Rotate == 1){
    4f08:	fe 01       	movw	r30, r28
    4f0a:	ec 50       	subi	r30, 0x0C	; 12
    4f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0e:	80 81       	ld	r24, Z
    4f10:	81 30       	cpi	r24, 0x01	; 1
    4f12:	29 f4       	brne	.+10     	; 0x4f1e <main+0x1816>
									DC_Motor_Rotate(0, 0);
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	60 e0       	ldi	r22, 0x00	; 0
    4f18:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DC_Motor_Rotate>
    4f1c:	ef cf       	rjmp	.-34     	; 0x4efc <main+0x17f4>
								}

								else if(Motor_Rotate == 2){
    4f1e:	fe 01       	movw	r30, r28
    4f20:	ec 50       	subi	r30, 0x0C	; 12
    4f22:	ff 4f       	sbci	r31, 0xFF	; 255
    4f24:	80 81       	ld	r24, Z
    4f26:	82 30       	cpi	r24, 0x02	; 2
    4f28:	09 f0       	breq	.+2      	; 0x4f2c <main+0x1824>
    4f2a:	7a c0       	rjmp	.+244    	; 0x5020 <main+0x1918>
									DC_Motor_Stop(0);
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	0e 94 81 1a 	call	0x3502	; 0x3502 <DC_Motor_Stop>
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	ac e0       	ldi	r26, 0x0C	; 12
    4f38:	b2 e4       	ldi	r27, 0x42	; 66
    4f3a:	8f a3       	std	Y+39, r24	; 0x27
    4f3c:	98 a7       	std	Y+40, r25	; 0x28
    4f3e:	a9 a7       	std	Y+41, r26	; 0x29
    4f40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f42:	6f a1       	ldd	r22, Y+39	; 0x27
    4f44:	78 a5       	ldd	r23, Y+40	; 0x28
    4f46:	89 a5       	ldd	r24, Y+41	; 0x29
    4f48:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f4a:	20 e0       	ldi	r18, 0x00	; 0
    4f4c:	30 e0       	ldi	r19, 0x00	; 0
    4f4e:	4a e7       	ldi	r20, 0x7A	; 122
    4f50:	55 e4       	ldi	r21, 0x45	; 69
    4f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	8b a3       	std	Y+35, r24	; 0x23
    4f5c:	9c a3       	std	Y+36, r25	; 0x24
    4f5e:	ad a3       	std	Y+37, r26	; 0x25
    4f60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4f62:	6b a1       	ldd	r22, Y+35	; 0x23
    4f64:	7c a1       	ldd	r23, Y+36	; 0x24
    4f66:	8d a1       	ldd	r24, Y+37	; 0x25
    4f68:	9e a1       	ldd	r25, Y+38	; 0x26
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	40 e8       	ldi	r20, 0x80	; 128
    4f70:	5f e3       	ldi	r21, 0x3F	; 63
    4f72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4f76:	88 23       	and	r24, r24
    4f78:	2c f4       	brge	.+10     	; 0x4f84 <main+0x187c>
		__ticks = 1;
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	9a a3       	std	Y+34, r25	; 0x22
    4f80:	89 a3       	std	Y+33, r24	; 0x21
    4f82:	3f c0       	rjmp	.+126    	; 0x5002 <main+0x18fa>
	else if (__tmp > 65535)
    4f84:	6b a1       	ldd	r22, Y+35	; 0x23
    4f86:	7c a1       	ldd	r23, Y+36	; 0x24
    4f88:	8d a1       	ldd	r24, Y+37	; 0x25
    4f8a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	3f ef       	ldi	r19, 0xFF	; 255
    4f90:	4f e7       	ldi	r20, 0x7F	; 127
    4f92:	57 e4       	ldi	r21, 0x47	; 71
    4f94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4f98:	18 16       	cp	r1, r24
    4f9a:	4c f5       	brge	.+82     	; 0x4fee <main+0x18e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f9c:	6f a1       	ldd	r22, Y+39	; 0x27
    4f9e:	78 a5       	ldd	r23, Y+40	; 0x28
    4fa0:	89 a5       	ldd	r24, Y+41	; 0x29
    4fa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fa4:	20 e0       	ldi	r18, 0x00	; 0
    4fa6:	30 e0       	ldi	r19, 0x00	; 0
    4fa8:	40 e2       	ldi	r20, 0x20	; 32
    4faa:	51 e4       	ldi	r21, 0x41	; 65
    4fac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4fb0:	dc 01       	movw	r26, r24
    4fb2:	cb 01       	movw	r24, r22
    4fb4:	bc 01       	movw	r22, r24
    4fb6:	cd 01       	movw	r24, r26
    4fb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4fbc:	dc 01       	movw	r26, r24
    4fbe:	cb 01       	movw	r24, r22
    4fc0:	9a a3       	std	Y+34, r25	; 0x22
    4fc2:	89 a3       	std	Y+33, r24	; 0x21
    4fc4:	0f c0       	rjmp	.+30     	; 0x4fe4 <main+0x18dc>
    4fc6:	80 e9       	ldi	r24, 0x90	; 144
    4fc8:	91 e0       	ldi	r25, 0x01	; 1
    4fca:	98 a3       	std	Y+32, r25	; 0x20
    4fcc:	8f 8f       	std	Y+31, r24	; 0x1f
    4fce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fd0:	98 a1       	ldd	r25, Y+32	; 0x20
    4fd2:	01 97       	sbiw	r24, 0x01	; 1
    4fd4:	f1 f7       	brne	.-4      	; 0x4fd2 <main+0x18ca>
    4fd6:	98 a3       	std	Y+32, r25	; 0x20
    4fd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fda:	89 a1       	ldd	r24, Y+33	; 0x21
    4fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    4fde:	01 97       	sbiw	r24, 0x01	; 1
    4fe0:	9a a3       	std	Y+34, r25	; 0x22
    4fe2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe4:	89 a1       	ldd	r24, Y+33	; 0x21
    4fe6:	9a a1       	ldd	r25, Y+34	; 0x22
    4fe8:	00 97       	sbiw	r24, 0x00	; 0
    4fea:	69 f7       	brne	.-38     	; 0x4fc6 <main+0x18be>
    4fec:	14 c0       	rjmp	.+40     	; 0x5016 <main+0x190e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fee:	6b a1       	ldd	r22, Y+35	; 0x23
    4ff0:	7c a1       	ldd	r23, Y+36	; 0x24
    4ff2:	8d a1       	ldd	r24, Y+37	; 0x25
    4ff4:	9e a1       	ldd	r25, Y+38	; 0x26
    4ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ffa:	dc 01       	movw	r26, r24
    4ffc:	cb 01       	movw	r24, r22
    4ffe:	9a a3       	std	Y+34, r25	; 0x22
    5000:	89 a3       	std	Y+33, r24	; 0x21
    5002:	89 a1       	ldd	r24, Y+33	; 0x21
    5004:	9a a1       	ldd	r25, Y+34	; 0x22
    5006:	9e 8f       	std	Y+30, r25	; 0x1e
    5008:	8d 8f       	std	Y+29, r24	; 0x1d
    500a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    500c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    500e:	01 97       	sbiw	r24, 0x01	; 1
    5010:	f1 f7       	brne	.-4      	; 0x500e <main+0x1906>
    5012:	9e 8f       	std	Y+30, r25	; 0x1e
    5014:	8d 8f       	std	Y+29, r24	; 0x1d
									_delay_ms(35);
									DC_Motor_Rotate(0, 1);
    5016:	80 e0       	ldi	r24, 0x00	; 0
    5018:	61 e0       	ldi	r22, 0x01	; 1
    501a:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DC_Motor_Rotate>
    501e:	6e cf       	rjmp	.-292    	; 0x4efc <main+0x17f4>
								}

								else if(Motor_Rotate == 3){
    5020:	fe 01       	movw	r30, r28
    5022:	ec 50       	subi	r30, 0x0C	; 12
    5024:	ff 4f       	sbci	r31, 0xFF	; 255
    5026:	80 81       	ld	r24, Z
    5028:	83 30       	cpi	r24, 0x03	; 3
    502a:	09 f0       	breq	.+2      	; 0x502e <main+0x1926>
    502c:	67 cf       	rjmp	.-306    	; 0x4efc <main+0x17f4>
									DC_Motor_Stop(0);
    502e:	80 e0       	ldi	r24, 0x00	; 0
    5030:	0e 94 81 1a 	call	0x3502	; 0x3502 <DC_Motor_Stop>
									First_Screen();
    5034:	0e 94 a2 1a 	call	0x3544	; 0x3544 <First_Screen>

									while(1){
										u8 Motor_Back = Keypad_GetPressedKey();
    5038:	0e 94 35 19 	call	0x326a	; 0x326a <Keypad_GetPressedKey>
    503c:	fe 01       	movw	r30, r28
    503e:	ed 50       	subi	r30, 0x0D	; 13
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	80 83       	st	Z, r24
										if(Motor_Back == 1){
    5044:	fe 01       	movw	r30, r28
    5046:	ed 50       	subi	r30, 0x0D	; 13
    5048:	ff 4f       	sbci	r31, 0xFF	; 255
    504a:	80 81       	ld	r24, Z
    504c:	81 30       	cpi	r24, 0x01	; 1
    504e:	09 f0       	breq	.+2      	; 0x5052 <main+0x194a>
    5050:	13 c1       	rjmp	.+550    	; 0x5278 <main+0x1b70>
											Second_Screen();
    5052:	0e 94 3d 1b 	call	0x367a	; 0x367a <Second_Screen>
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	ac e0       	ldi	r26, 0x0C	; 12
    505c:	b2 e4       	ldi	r27, 0x42	; 66
    505e:	89 8f       	std	Y+25, r24	; 0x19
    5060:	9a 8f       	std	Y+26, r25	; 0x1a
    5062:	ab 8f       	std	Y+27, r26	; 0x1b
    5064:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5066:	69 8d       	ldd	r22, Y+25	; 0x19
    5068:	7a 8d       	ldd	r23, Y+26	; 0x1a
    506a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    506c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    506e:	20 e0       	ldi	r18, 0x00	; 0
    5070:	30 e0       	ldi	r19, 0x00	; 0
    5072:	4a e7       	ldi	r20, 0x7A	; 122
    5074:	55 e4       	ldi	r21, 0x45	; 69
    5076:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    507a:	dc 01       	movw	r26, r24
    507c:	cb 01       	movw	r24, r22
    507e:	8d 8b       	std	Y+21, r24	; 0x15
    5080:	9e 8b       	std	Y+22, r25	; 0x16
    5082:	af 8b       	std	Y+23, r26	; 0x17
    5084:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5086:	6d 89       	ldd	r22, Y+21	; 0x15
    5088:	7e 89       	ldd	r23, Y+22	; 0x16
    508a:	8f 89       	ldd	r24, Y+23	; 0x17
    508c:	98 8d       	ldd	r25, Y+24	; 0x18
    508e:	20 e0       	ldi	r18, 0x00	; 0
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	40 e8       	ldi	r20, 0x80	; 128
    5094:	5f e3       	ldi	r21, 0x3F	; 63
    5096:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    509a:	88 23       	and	r24, r24
    509c:	2c f4       	brge	.+10     	; 0x50a8 <main+0x19a0>
		__ticks = 1;
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	9c 8b       	std	Y+20, r25	; 0x14
    50a4:	8b 8b       	std	Y+19, r24	; 0x13
    50a6:	3f c0       	rjmp	.+126    	; 0x5126 <main+0x1a1e>
	else if (__tmp > 65535)
    50a8:	6d 89       	ldd	r22, Y+21	; 0x15
    50aa:	7e 89       	ldd	r23, Y+22	; 0x16
    50ac:	8f 89       	ldd	r24, Y+23	; 0x17
    50ae:	98 8d       	ldd	r25, Y+24	; 0x18
    50b0:	20 e0       	ldi	r18, 0x00	; 0
    50b2:	3f ef       	ldi	r19, 0xFF	; 255
    50b4:	4f e7       	ldi	r20, 0x7F	; 127
    50b6:	57 e4       	ldi	r21, 0x47	; 71
    50b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    50bc:	18 16       	cp	r1, r24
    50be:	4c f5       	brge	.+82     	; 0x5112 <main+0x1a0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c0:	69 8d       	ldd	r22, Y+25	; 0x19
    50c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50c8:	20 e0       	ldi	r18, 0x00	; 0
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	40 e2       	ldi	r20, 0x20	; 32
    50ce:	51 e4       	ldi	r21, 0x41	; 65
    50d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	bc 01       	movw	r22, r24
    50da:	cd 01       	movw	r24, r26
    50dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    50e0:	dc 01       	movw	r26, r24
    50e2:	cb 01       	movw	r24, r22
    50e4:	9c 8b       	std	Y+20, r25	; 0x14
    50e6:	8b 8b       	std	Y+19, r24	; 0x13
    50e8:	0f c0       	rjmp	.+30     	; 0x5108 <main+0x1a00>
    50ea:	80 e9       	ldi	r24, 0x90	; 144
    50ec:	91 e0       	ldi	r25, 0x01	; 1
    50ee:	9a 8b       	std	Y+18, r25	; 0x12
    50f0:	89 8b       	std	Y+17, r24	; 0x11
    50f2:	89 89       	ldd	r24, Y+17	; 0x11
    50f4:	9a 89       	ldd	r25, Y+18	; 0x12
    50f6:	01 97       	sbiw	r24, 0x01	; 1
    50f8:	f1 f7       	brne	.-4      	; 0x50f6 <main+0x19ee>
    50fa:	9a 8b       	std	Y+18, r25	; 0x12
    50fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50fe:	8b 89       	ldd	r24, Y+19	; 0x13
    5100:	9c 89       	ldd	r25, Y+20	; 0x14
    5102:	01 97       	sbiw	r24, 0x01	; 1
    5104:	9c 8b       	std	Y+20, r25	; 0x14
    5106:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5108:	8b 89       	ldd	r24, Y+19	; 0x13
    510a:	9c 89       	ldd	r25, Y+20	; 0x14
    510c:	00 97       	sbiw	r24, 0x00	; 0
    510e:	69 f7       	brne	.-38     	; 0x50ea <main+0x19e2>
    5110:	14 c0       	rjmp	.+40     	; 0x513a <main+0x1a32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5112:	6d 89       	ldd	r22, Y+21	; 0x15
    5114:	7e 89       	ldd	r23, Y+22	; 0x16
    5116:	8f 89       	ldd	r24, Y+23	; 0x17
    5118:	98 8d       	ldd	r25, Y+24	; 0x18
    511a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    511e:	dc 01       	movw	r26, r24
    5120:	cb 01       	movw	r24, r22
    5122:	9c 8b       	std	Y+20, r25	; 0x14
    5124:	8b 8b       	std	Y+19, r24	; 0x13
    5126:	8b 89       	ldd	r24, Y+19	; 0x13
    5128:	9c 89       	ldd	r25, Y+20	; 0x14
    512a:	98 8b       	std	Y+16, r25	; 0x10
    512c:	8f 87       	std	Y+15, r24	; 0x0f
    512e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5130:	98 89       	ldd	r25, Y+16	; 0x10
    5132:	01 97       	sbiw	r24, 0x01	; 1
    5134:	f1 f7       	brne	.-4      	; 0x5132 <main+0x1a2a>
    5136:	98 8b       	std	Y+16, r25	; 0x10
    5138:	8f 87       	std	Y+15, r24	; 0x0f
											_delay_ms(35);

											while(1){
												u8 new_System = Keypad_GetPressedKey;
    513a:	85 e3       	ldi	r24, 0x35	; 53
    513c:	99 e1       	ldi	r25, 0x19	; 25
    513e:	fe 01       	movw	r30, r28
    5140:	ee 50       	subi	r30, 0x0E	; 14
    5142:	ff 4f       	sbci	r31, 0xFF	; 255
    5144:	80 83       	st	Z, r24

												if(new_System == 1){
    5146:	fe 01       	movw	r30, r28
    5148:	ee 50       	subi	r30, 0x0E	; 14
    514a:	ff 4f       	sbci	r31, 0xFF	; 255
    514c:	80 81       	ld	r24, Z
    514e:	81 30       	cpi	r24, 0x01	; 1
    5150:	29 f4       	brne	.+10     	; 0x515c <main+0x1a54>
													DC_Motor_Rotate(0, 0);
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	60 e0       	ldi	r22, 0x00	; 0
    5156:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DC_Motor_Rotate>
    515a:	ef cf       	rjmp	.-34     	; 0x513a <main+0x1a32>
												}

												else if(new_System == 2){
    515c:	fe 01       	movw	r30, r28
    515e:	ee 50       	subi	r30, 0x0E	; 14
    5160:	ff 4f       	sbci	r31, 0xFF	; 255
    5162:	80 81       	ld	r24, Z
    5164:	82 30       	cpi	r24, 0x02	; 2
    5166:	09 f0       	breq	.+2      	; 0x516a <main+0x1a62>
    5168:	7a c0       	rjmp	.+244    	; 0x525e <main+0x1b56>
													DC_Motor_Stop(0);
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	0e 94 81 1a 	call	0x3502	; 0x3502 <DC_Motor_Stop>
    5170:	80 e0       	ldi	r24, 0x00	; 0
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	ac e0       	ldi	r26, 0x0C	; 12
    5176:	b2 e4       	ldi	r27, 0x42	; 66
    5178:	8b 87       	std	Y+11, r24	; 0x0b
    517a:	9c 87       	std	Y+12, r25	; 0x0c
    517c:	ad 87       	std	Y+13, r26	; 0x0d
    517e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5180:	6b 85       	ldd	r22, Y+11	; 0x0b
    5182:	7c 85       	ldd	r23, Y+12	; 0x0c
    5184:	8d 85       	ldd	r24, Y+13	; 0x0d
    5186:	9e 85       	ldd	r25, Y+14	; 0x0e
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	4a e7       	ldi	r20, 0x7A	; 122
    518e:	55 e4       	ldi	r21, 0x45	; 69
    5190:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5194:	dc 01       	movw	r26, r24
    5196:	cb 01       	movw	r24, r22
    5198:	8f 83       	std	Y+7, r24	; 0x07
    519a:	98 87       	std	Y+8, r25	; 0x08
    519c:	a9 87       	std	Y+9, r26	; 0x09
    519e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    51a0:	6f 81       	ldd	r22, Y+7	; 0x07
    51a2:	78 85       	ldd	r23, Y+8	; 0x08
    51a4:	89 85       	ldd	r24, Y+9	; 0x09
    51a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a8:	20 e0       	ldi	r18, 0x00	; 0
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	40 e8       	ldi	r20, 0x80	; 128
    51ae:	5f e3       	ldi	r21, 0x3F	; 63
    51b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    51b4:	88 23       	and	r24, r24
    51b6:	2c f4       	brge	.+10     	; 0x51c2 <main+0x1aba>
		__ticks = 1;
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	9e 83       	std	Y+6, r25	; 0x06
    51be:	8d 83       	std	Y+5, r24	; 0x05
    51c0:	3f c0       	rjmp	.+126    	; 0x5240 <main+0x1b38>
	else if (__tmp > 65535)
    51c2:	6f 81       	ldd	r22, Y+7	; 0x07
    51c4:	78 85       	ldd	r23, Y+8	; 0x08
    51c6:	89 85       	ldd	r24, Y+9	; 0x09
    51c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	3f ef       	ldi	r19, 0xFF	; 255
    51ce:	4f e7       	ldi	r20, 0x7F	; 127
    51d0:	57 e4       	ldi	r21, 0x47	; 71
    51d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    51d6:	18 16       	cp	r1, r24
    51d8:	4c f5       	brge	.+82     	; 0x522c <main+0x1b24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51da:	6b 85       	ldd	r22, Y+11	; 0x0b
    51dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    51de:	8d 85       	ldd	r24, Y+13	; 0x0d
    51e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    51e2:	20 e0       	ldi	r18, 0x00	; 0
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	40 e2       	ldi	r20, 0x20	; 32
    51e8:	51 e4       	ldi	r21, 0x41	; 65
    51ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	bc 01       	movw	r22, r24
    51f4:	cd 01       	movw	r24, r26
    51f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    51fa:	dc 01       	movw	r26, r24
    51fc:	cb 01       	movw	r24, r22
    51fe:	9e 83       	std	Y+6, r25	; 0x06
    5200:	8d 83       	std	Y+5, r24	; 0x05
    5202:	0f c0       	rjmp	.+30     	; 0x5222 <main+0x1b1a>
    5204:	80 e9       	ldi	r24, 0x90	; 144
    5206:	91 e0       	ldi	r25, 0x01	; 1
    5208:	9c 83       	std	Y+4, r25	; 0x04
    520a:	8b 83       	std	Y+3, r24	; 0x03
    520c:	8b 81       	ldd	r24, Y+3	; 0x03
    520e:	9c 81       	ldd	r25, Y+4	; 0x04
    5210:	01 97       	sbiw	r24, 0x01	; 1
    5212:	f1 f7       	brne	.-4      	; 0x5210 <main+0x1b08>
    5214:	9c 83       	std	Y+4, r25	; 0x04
    5216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5218:	8d 81       	ldd	r24, Y+5	; 0x05
    521a:	9e 81       	ldd	r25, Y+6	; 0x06
    521c:	01 97       	sbiw	r24, 0x01	; 1
    521e:	9e 83       	std	Y+6, r25	; 0x06
    5220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5222:	8d 81       	ldd	r24, Y+5	; 0x05
    5224:	9e 81       	ldd	r25, Y+6	; 0x06
    5226:	00 97       	sbiw	r24, 0x00	; 0
    5228:	69 f7       	brne	.-38     	; 0x5204 <main+0x1afc>
    522a:	14 c0       	rjmp	.+40     	; 0x5254 <main+0x1b4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    522c:	6f 81       	ldd	r22, Y+7	; 0x07
    522e:	78 85       	ldd	r23, Y+8	; 0x08
    5230:	89 85       	ldd	r24, Y+9	; 0x09
    5232:	9a 85       	ldd	r25, Y+10	; 0x0a
    5234:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	9e 83       	std	Y+6, r25	; 0x06
    523e:	8d 83       	std	Y+5, r24	; 0x05
    5240:	8d 81       	ldd	r24, Y+5	; 0x05
    5242:	9e 81       	ldd	r25, Y+6	; 0x06
    5244:	9a 83       	std	Y+2, r25	; 0x02
    5246:	89 83       	std	Y+1, r24	; 0x01
    5248:	89 81       	ldd	r24, Y+1	; 0x01
    524a:	9a 81       	ldd	r25, Y+2	; 0x02
    524c:	01 97       	sbiw	r24, 0x01	; 1
    524e:	f1 f7       	brne	.-4      	; 0x524c <main+0x1b44>
    5250:	9a 83       	std	Y+2, r25	; 0x02
    5252:	89 83       	std	Y+1, r24	; 0x01
													_delay_ms(35);
													DC_Motor_Rotate(0, 1);
    5254:	80 e0       	ldi	r24, 0x00	; 0
    5256:	61 e0       	ldi	r22, 0x01	; 1
    5258:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <DC_Motor_Rotate>
    525c:	6e cf       	rjmp	.-292    	; 0x513a <main+0x1a32>
												}

												else if(new_System == 3){
    525e:	fe 01       	movw	r30, r28
    5260:	ee 50       	subi	r30, 0x0E	; 14
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	80 81       	ld	r24, Z
    5266:	83 30       	cpi	r24, 0x03	; 3
    5268:	09 f0       	breq	.+2      	; 0x526c <main+0x1b64>
    526a:	67 cf       	rjmp	.-306    	; 0x513a <main+0x1a32>
													DC_Motor_Stop(0);
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	0e 94 81 1a 	call	0x3502	; 0x3502 <DC_Motor_Stop>
													First_Screen();
    5272:	0e 94 a2 1a 	call	0x3544	; 0x3544 <First_Screen>
    5276:	61 cf       	rjmp	.-318    	; 0x513a <main+0x1a32>
												}
											}

										}

										else if(Motor_Back == 2){
    5278:	fe 01       	movw	r30, r28
    527a:	ed 50       	subi	r30, 0x0D	; 13
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	80 81       	ld	r24, Z
    5280:	82 30       	cpi	r24, 0x02	; 2
    5282:	09 f0       	breq	.+2      	; 0x5286 <main+0x1b7e>
    5284:	d9 ce       	rjmp	.-590    	; 0x5038 <main+0x1930>
											DC_Motor_Stop(0);
    5286:	80 e0       	ldi	r24, 0x00	; 0
    5288:	0e 94 81 1a 	call	0x3502	; 0x3502 <DC_Motor_Stop>
											LCD_ClearScreen();
    528c:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>
    5290:	d3 ce       	rjmp	.-602    	; 0x5038 <main+0x1930>
									}
								}
							}
						}

						else if(key_Motor == 2){
    5292:	fe 01       	movw	r30, r28
    5294:	eb 50       	subi	r30, 0x0B	; 11
    5296:	ff 4f       	sbci	r31, 0xFF	; 255
    5298:	80 81       	ld	r24, Z
    529a:	82 30       	cpi	r24, 0x02	; 2
    529c:	09 f0       	breq	.+2      	; 0x52a0 <main+0x1b98>
    529e:	58 c0       	rjmp	.+176    	; 0x5350 <main+0x1c48>
							StepperAngles_Screen();
    52a0:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <StepperAngles_Screen>
							while(1){
								u8 Stepper_angle = Keypad_GetPressedKey();
    52a4:	0e 94 35 19 	call	0x326a	; 0x326a <Keypad_GetPressedKey>
    52a8:	fe 01       	movw	r30, r28
    52aa:	ef 50       	subi	r30, 0x0F	; 15
    52ac:	ff 4f       	sbci	r31, 0xFF	; 255
    52ae:	80 83       	st	Z, r24
								if(Stepper_angle == 1){
    52b0:	fe 01       	movw	r30, r28
    52b2:	ef 50       	subi	r30, 0x0F	; 15
    52b4:	ff 4f       	sbci	r31, 0xFF	; 255
    52b6:	80 81       	ld	r24, Z
    52b8:	81 30       	cpi	r24, 0x01	; 1
    52ba:	11 f5       	brne	.+68     	; 0x5300 <main+0x1bf8>
									StepperDirection_Screen();
    52bc:	0e 94 6f 1b 	call	0x36de	; 0x36de <StepperDirection_Screen>
									while(1){
										u8 Stepper_Diection90 = Keypad_GetPressedKey();
    52c0:	0e 94 35 19 	call	0x326a	; 0x326a <Keypad_GetPressedKey>
    52c4:	fe 01       	movw	r30, r28
    52c6:	e0 51       	subi	r30, 0x10	; 16
    52c8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ca:	80 83       	st	Z, r24
										if(Stepper_Diection90 == 1){
    52cc:	fe 01       	movw	r30, r28
    52ce:	e0 51       	subi	r30, 0x10	; 16
    52d0:	ff 4f       	sbci	r31, 0xFF	; 255
    52d2:	80 81       	ld	r24, Z
    52d4:	81 30       	cpi	r24, 0x01	; 1
    52d6:	39 f4       	brne	.+14     	; 0x52e6 <main+0x1bde>
											SelectStepAngle(90, 0);
    52d8:	8a e5       	ldi	r24, 0x5A	; 90
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	60 e0       	ldi	r22, 0x00	; 0
    52de:	70 e0       	ldi	r23, 0x00	; 0
    52e0:	0e 94 9b 11 	call	0x2336	; 0x2336 <SelectStepAngle>
    52e4:	ed cf       	rjmp	.-38     	; 0x52c0 <main+0x1bb8>
										}

										else if(Stepper_Diection90 == 2){
    52e6:	fe 01       	movw	r30, r28
    52e8:	e0 51       	subi	r30, 0x10	; 16
    52ea:	ff 4f       	sbci	r31, 0xFF	; 255
    52ec:	80 81       	ld	r24, Z
    52ee:	82 30       	cpi	r24, 0x02	; 2
    52f0:	39 f7       	brne	.-50     	; 0x52c0 <main+0x1bb8>
											SelectStepAngle(90, 1);
    52f2:	8a e5       	ldi	r24, 0x5A	; 90
    52f4:	90 e0       	ldi	r25, 0x00	; 0
    52f6:	61 e0       	ldi	r22, 0x01	; 1
    52f8:	70 e0       	ldi	r23, 0x00	; 0
    52fa:	0e 94 9b 11 	call	0x2336	; 0x2336 <SelectStepAngle>
    52fe:	e0 cf       	rjmp	.-64     	; 0x52c0 <main+0x1bb8>
										}
									}
								}

								else if(Stepper_angle == 2){
    5300:	fe 01       	movw	r30, r28
    5302:	ef 50       	subi	r30, 0x0F	; 15
    5304:	ff 4f       	sbci	r31, 0xFF	; 255
    5306:	80 81       	ld	r24, Z
    5308:	82 30       	cpi	r24, 0x02	; 2
    530a:	61 f6       	brne	.-104    	; 0x52a4 <main+0x1b9c>
									StepperDirection_Screen();
    530c:	0e 94 6f 1b 	call	0x36de	; 0x36de <StepperDirection_Screen>
									while(1){
										u8 Stepper_Diection180 = Keypad_GetPressedKey();
    5310:	0e 94 35 19 	call	0x326a	; 0x326a <Keypad_GetPressedKey>
    5314:	fe 01       	movw	r30, r28
    5316:	e1 51       	subi	r30, 0x11	; 17
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	80 83       	st	Z, r24
										if(Stepper_Diection180 == 1){
    531c:	fe 01       	movw	r30, r28
    531e:	e1 51       	subi	r30, 0x11	; 17
    5320:	ff 4f       	sbci	r31, 0xFF	; 255
    5322:	80 81       	ld	r24, Z
    5324:	81 30       	cpi	r24, 0x01	; 1
    5326:	39 f4       	brne	.+14     	; 0x5336 <main+0x1c2e>
											SelectStepAngle(180, 0);
    5328:	84 eb       	ldi	r24, 0xB4	; 180
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	60 e0       	ldi	r22, 0x00	; 0
    532e:	70 e0       	ldi	r23, 0x00	; 0
    5330:	0e 94 9b 11 	call	0x2336	; 0x2336 <SelectStepAngle>
    5334:	ed cf       	rjmp	.-38     	; 0x5310 <main+0x1c08>
										}

										else if(Stepper_Diection180 == 2){
    5336:	fe 01       	movw	r30, r28
    5338:	e1 51       	subi	r30, 0x11	; 17
    533a:	ff 4f       	sbci	r31, 0xFF	; 255
    533c:	80 81       	ld	r24, Z
    533e:	82 30       	cpi	r24, 0x02	; 2
    5340:	39 f7       	brne	.-50     	; 0x5310 <main+0x1c08>
											SelectStepAngle(180, 1);
    5342:	84 eb       	ldi	r24, 0xB4	; 180
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	61 e0       	ldi	r22, 0x01	; 1
    5348:	70 e0       	ldi	r23, 0x00	; 0
    534a:	0e 94 9b 11 	call	0x2336	; 0x2336 <SelectStepAngle>
    534e:	e0 cf       	rjmp	.-64     	; 0x5310 <main+0x1c08>
									}
								}
							}
						}

						else if(key_Motor == 3){
    5350:	fe 01       	movw	r30, r28
    5352:	eb 50       	subi	r30, 0x0B	; 11
    5354:	ff 4f       	sbci	r31, 0xFF	; 255
    5356:	80 81       	ld	r24, Z
    5358:	83 30       	cpi	r24, 0x03	; 3
    535a:	09 f0       	breq	.+2      	; 0x535e <main+0x1c56>
    535c:	4e cd       	rjmp	.-1380   	; 0x4dfa <main+0x16f2>
							DC_Motor_Stop(0);
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	0e 94 81 1a 	call	0x3502	; 0x3502 <DC_Motor_Stop>
							LCD_ClearScreen();
    5364:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>
    5368:	48 cd       	rjmp	.-1392   	; 0x4dfa <main+0x16f2>
						}
					}
					break;
				}
				else{
					LCD_ClearScreen();
    536a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <LCD_ClearScreen>
					LCD_displayString("Error");
    536e:	8b ee       	ldi	r24, 0xEB	; 235
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <LCD_displayString>
    5376:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <main+0x154>

0000537a <__prologue_saves__>:
    537a:	2f 92       	push	r2
    537c:	3f 92       	push	r3
    537e:	4f 92       	push	r4
    5380:	5f 92       	push	r5
    5382:	6f 92       	push	r6
    5384:	7f 92       	push	r7
    5386:	8f 92       	push	r8
    5388:	9f 92       	push	r9
    538a:	af 92       	push	r10
    538c:	bf 92       	push	r11
    538e:	cf 92       	push	r12
    5390:	df 92       	push	r13
    5392:	ef 92       	push	r14
    5394:	ff 92       	push	r15
    5396:	0f 93       	push	r16
    5398:	1f 93       	push	r17
    539a:	cf 93       	push	r28
    539c:	df 93       	push	r29
    539e:	cd b7       	in	r28, 0x3d	; 61
    53a0:	de b7       	in	r29, 0x3e	; 62
    53a2:	ca 1b       	sub	r28, r26
    53a4:	db 0b       	sbc	r29, r27
    53a6:	0f b6       	in	r0, 0x3f	; 63
    53a8:	f8 94       	cli
    53aa:	de bf       	out	0x3e, r29	; 62
    53ac:	0f be       	out	0x3f, r0	; 63
    53ae:	cd bf       	out	0x3d, r28	; 61
    53b0:	09 94       	ijmp

000053b2 <__epilogue_restores__>:
    53b2:	2a 88       	ldd	r2, Y+18	; 0x12
    53b4:	39 88       	ldd	r3, Y+17	; 0x11
    53b6:	48 88       	ldd	r4, Y+16	; 0x10
    53b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    53ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    53bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    53be:	8c 84       	ldd	r8, Y+12	; 0x0c
    53c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    53c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    53c4:	b9 84       	ldd	r11, Y+9	; 0x09
    53c6:	c8 84       	ldd	r12, Y+8	; 0x08
    53c8:	df 80       	ldd	r13, Y+7	; 0x07
    53ca:	ee 80       	ldd	r14, Y+6	; 0x06
    53cc:	fd 80       	ldd	r15, Y+5	; 0x05
    53ce:	0c 81       	ldd	r16, Y+4	; 0x04
    53d0:	1b 81       	ldd	r17, Y+3	; 0x03
    53d2:	aa 81       	ldd	r26, Y+2	; 0x02
    53d4:	b9 81       	ldd	r27, Y+1	; 0x01
    53d6:	ce 0f       	add	r28, r30
    53d8:	d1 1d       	adc	r29, r1
    53da:	0f b6       	in	r0, 0x3f	; 63
    53dc:	f8 94       	cli
    53de:	de bf       	out	0x3e, r29	; 62
    53e0:	0f be       	out	0x3f, r0	; 63
    53e2:	cd bf       	out	0x3d, r28	; 61
    53e4:	ed 01       	movw	r28, r26
    53e6:	08 95       	ret

000053e8 <_exit>:
    53e8:	f8 94       	cli

000053ea <__stop_program>:
    53ea:	ff cf       	rjmp	.-2      	; 0x53ea <__stop_program>
