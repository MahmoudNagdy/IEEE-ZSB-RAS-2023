
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002a14  00002a88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021b4  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010c6  00000000  00000000  00004c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000989c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000099fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a3 14 	call	0x2946	; 0x2946 <main>
      7a:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
     b44:	e7 e3       	ldi	r30, 0x37	; 55
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
     b4a:	e4 e3       	ldi	r30, 0x34	; 52
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
     b52:	e1 e3       	ldi	r30, 0x31	; 49
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 e3       	ldi	r24, 0x30	; 48
     b58:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
     b5a:	eb e3       	ldi	r30, 0x3B	; 59
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
     b60:	e8 e3       	ldi	r30, 0x38	; 56
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
     b66:	e5 e3       	ldi	r30, 0x35	; 53
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
     b6c:	e2 e3       	ldi	r30, 0x32	; 50
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1

}
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	2e 97       	sbiw	r28, 0x0e	; 14
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	8a 83       	std	Y+2, r24	; 0x02
     b8e:	6b 83       	std	Y+3, r22	; 0x03
     b90:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	84 30       	cpi	r24, 0x04	; 4
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <DIO_u8SetPinDirection+0x26>
     b9c:	0c c1       	rjmp	.+536    	; 0xdb6 <DIO_u8SetPinDirection+0x23e>
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	88 30       	cpi	r24, 0x08	; 8
     ba2:	08 f0       	brcs	.+2      	; 0xba6 <DIO_u8SetPinDirection+0x2e>
     ba4:	08 c1       	rjmp	.+528    	; 0xdb6 <DIO_u8SetPinDirection+0x23e>
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	21 f0       	breq	.+8      	; 0xbb4 <DIO_u8SetPinDirection+0x3c>
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	88 23       	and	r24, r24
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <DIO_u8SetPinDirection+0x3c>
     bb2:	01 c1       	rjmp	.+514    	; 0xdb6 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	3e 87       	std	Y+14, r19	; 0x0e
     bbc:	2d 87       	std	Y+13, r18	; 0x0d
     bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <DIO_u8SetPinDirection+0x52>
     bc8:	4f c0       	rjmp	.+158    	; 0xc68 <DIO_u8SetPinDirection+0xf0>
     bca:	2d 85       	ldd	r18, Y+13	; 0x0d
     bcc:	3e 85       	ldd	r19, Y+14	; 0x0e
     bce:	22 30       	cpi	r18, 0x02	; 2
     bd0:	31 05       	cpc	r19, r1
     bd2:	2c f4       	brge	.+10     	; 0xbde <DIO_u8SetPinDirection+0x66>
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	71 f0       	breq	.+28     	; 0xbf8 <DIO_u8SetPinDirection+0x80>
     bdc:	ed c0       	rjmp	.+474    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
     bde:	2d 85       	ldd	r18, Y+13	; 0x0d
     be0:	3e 85       	ldd	r19, Y+14	; 0x0e
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <DIO_u8SetPinDirection+0x72>
     be8:	77 c0       	rjmp	.+238    	; 0xcd8 <DIO_u8SetPinDirection+0x160>
     bea:	8d 85       	ldd	r24, Y+13	; 0x0d
     bec:	9e 85       	ldd	r25, Y+14	; 0x0e
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_u8SetPinDirection+0x7e>
     bf4:	a9 c0       	rjmp	.+338    	; 0xd48 <DIO_u8SetPinDirection+0x1d0>
     bf6:	e0 c0       	rjmp	.+448    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
     bf8:	8c 81       	ldd	r24, Y+4	; 0x04
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	3c 87       	std	Y+12, r19	; 0x0c
     c00:	2b 87       	std	Y+11, r18	; 0x0b
     c02:	8b 85       	ldd	r24, Y+11	; 0x0b
     c04:	9c 85       	ldd	r25, Y+12	; 0x0c
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	d1 f0       	breq	.+52     	; 0xc3e <DIO_u8SetPinDirection+0xc6>
     c0a:	2b 85       	ldd	r18, Y+11	; 0x0b
     c0c:	3c 85       	ldd	r19, Y+12	; 0x0c
     c0e:	21 30       	cpi	r18, 0x01	; 1
     c10:	31 05       	cpc	r19, r1
     c12:	09 f0       	breq	.+2      	; 0xc16 <DIO_u8SetPinDirection+0x9e>
     c14:	d1 c0       	rjmp	.+418    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     c16:	aa e3       	ldi	r26, 0x3A	; 58
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ea e3       	ldi	r30, 0x3A	; 58
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 2e       	mov	r0, r18
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_u8SetPinDirection+0xbc>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_u8SetPinDirection+0xb8>
     c38:	84 2b       	or	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	bd c0       	rjmp	.+378    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     c3e:	aa e3       	ldi	r26, 0x3A	; 58
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	ea e3       	ldi	r30, 0x3A	; 58
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	48 2f       	mov	r20, r24
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_u8SetPinDirection+0xe4>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_u8SetPinDirection+0xe0>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	a8 c0       	rjmp	.+336    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	3a 87       	std	Y+10, r19	; 0x0a
     c70:	29 87       	std	Y+9, r18	; 0x09
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	9a 85       	ldd	r25, Y+10	; 0x0a
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	d1 f0       	breq	.+52     	; 0xcae <DIO_u8SetPinDirection+0x136>
     c7a:	29 85       	ldd	r18, Y+9	; 0x09
     c7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     c7e:	21 30       	cpi	r18, 0x01	; 1
     c80:	31 05       	cpc	r19, r1
     c82:	09 f0       	breq	.+2      	; 0xc86 <DIO_u8SetPinDirection+0x10e>
     c84:	99 c0       	rjmp	.+306    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     c86:	a7 e3       	ldi	r26, 0x37	; 55
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e7 e3       	ldi	r30, 0x37	; 55
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_u8SetPinDirection+0x12c>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_u8SetPinDirection+0x128>
     ca8:	84 2b       	or	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	85 c0       	rjmp	.+266    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     cae:	a7 e3       	ldi	r26, 0x37	; 55
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e7 e3       	ldi	r30, 0x37	; 55
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_u8SetPinDirection+0x154>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_u8SetPinDirection+0x150>
     cd0:	80 95       	com	r24
     cd2:	84 23       	and	r24, r20
     cd4:	8c 93       	st	X, r24
     cd6:	70 c0       	rjmp	.+224    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	38 87       	std	Y+8, r19	; 0x08
     ce0:	2f 83       	std	Y+7, r18	; 0x07
     ce2:	8f 81       	ldd	r24, Y+7	; 0x07
     ce4:	98 85       	ldd	r25, Y+8	; 0x08
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	d1 f0       	breq	.+52     	; 0xd1e <DIO_u8SetPinDirection+0x1a6>
     cea:	2f 81       	ldd	r18, Y+7	; 0x07
     cec:	38 85       	ldd	r19, Y+8	; 0x08
     cee:	21 30       	cpi	r18, 0x01	; 1
     cf0:	31 05       	cpc	r19, r1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <DIO_u8SetPinDirection+0x17e>
     cf4:	61 c0       	rjmp	.+194    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_u8SetPinDirection+0x19c>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_u8SetPinDirection+0x198>
     d18:	84 2b       	or	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	4d c0       	rjmp	.+154    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     d1e:	a4 e3       	ldi	r26, 0x34	; 52
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e4 e3       	ldi	r30, 0x34	; 52
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	48 2f       	mov	r20, r24
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <DIO_u8SetPinDirection+0x1c4>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <DIO_u8SetPinDirection+0x1c0>
     d40:	80 95       	com	r24
     d42:	84 23       	and	r24, r20
     d44:	8c 93       	st	X, r24
     d46:	38 c0       	rjmp	.+112    	; 0xdb8 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	3e 83       	std	Y+6, r19	; 0x06
     d50:	2d 83       	std	Y+5, r18	; 0x05
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	c9 f0       	breq	.+50     	; 0xd8c <DIO_u8SetPinDirection+0x214>
     d5a:	2d 81       	ldd	r18, Y+5	; 0x05
     d5c:	3e 81       	ldd	r19, Y+6	; 0x06
     d5e:	21 30       	cpi	r18, 0x01	; 1
     d60:	31 05       	cpc	r19, r1
     d62:	51 f5       	brne	.+84     	; 0xdb8 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     d64:	a1 e3       	ldi	r26, 0x31	; 49
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e1 e3       	ldi	r30, 0x31	; 49
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_u8SetPinDirection+0x20a>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_u8SetPinDirection+0x206>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	16 c0       	rjmp	.+44     	; 0xdb8 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     d8c:	a1 e3       	ldi	r26, 0x31	; 49
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e1 e3       	ldi	r30, 0x31	; 49
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_u8SetPinDirection+0x232>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_u8SetPinDirection+0x22e>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     db6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     db8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dba:	2e 96       	adiw	r28, 0x0e	; 14
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	2f 97       	sbiw	r28, 0x0f	; 15
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	8b 83       	std	Y+3, r24	; 0x03
     de2:	6c 83       	std	Y+4, r22	; 0x04
     de4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	84 30       	cpi	r24, 0x04	; 4
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <DIO_u8SetPinValue+0x26>
     df0:	13 c1       	rjmp	.+550    	; 0x1018 <DIO_u8SetPinValue+0x24c>
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	88 30       	cpi	r24, 0x08	; 8
     df6:	08 f0       	brcs	.+2      	; 0xdfa <DIO_u8SetPinValue+0x2e>
     df8:	0f c1       	rjmp	.+542    	; 0x1018 <DIO_u8SetPinValue+0x24c>
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	88 23       	and	r24, r24
     dfe:	21 f0       	breq	.+8      	; 0xe08 <DIO_u8SetPinValue+0x3c>
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	09 f0       	breq	.+2      	; 0xe08 <DIO_u8SetPinValue+0x3c>
     e06:	08 c1       	rjmp	.+528    	; 0x1018 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	3f 87       	std	Y+15, r19	; 0x0f
     e10:	2e 87       	std	Y+14, r18	; 0x0e
     e12:	8e 85       	ldd	r24, Y+14	; 0x0e
     e14:	9f 85       	ldd	r25, Y+15	; 0x0f
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	91 05       	cpc	r25, r1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <DIO_u8SetPinValue+0x52>
     e1c:	50 c0       	rjmp	.+160    	; 0xebe <DIO_u8SetPinValue+0xf2>
     e1e:	2e 85       	ldd	r18, Y+14	; 0x0e
     e20:	3f 85       	ldd	r19, Y+15	; 0x0f
     e22:	22 30       	cpi	r18, 0x02	; 2
     e24:	31 05       	cpc	r19, r1
     e26:	2c f4       	brge	.+10     	; 0xe32 <DIO_u8SetPinValue+0x66>
     e28:	8e 85       	ldd	r24, Y+14	; 0x0e
     e2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	71 f0       	breq	.+28     	; 0xe4c <DIO_u8SetPinValue+0x80>
     e30:	f4 c0       	rjmp	.+488    	; 0x101a <DIO_u8SetPinValue+0x24e>
     e32:	2e 85       	ldd	r18, Y+14	; 0x0e
     e34:	3f 85       	ldd	r19, Y+15	; 0x0f
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	09 f4       	brne	.+2      	; 0xe3e <DIO_u8SetPinValue+0x72>
     e3c:	79 c0       	rjmp	.+242    	; 0xf30 <DIO_u8SetPinValue+0x164>
     e3e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e40:	9f 85       	ldd	r25, Y+15	; 0x0f
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	91 05       	cpc	r25, r1
     e46:	09 f4       	brne	.+2      	; 0xe4a <DIO_u8SetPinValue+0x7e>
     e48:	ad c0       	rjmp	.+346    	; 0xfa4 <DIO_u8SetPinValue+0x1d8>
     e4a:	e7 c0       	rjmp	.+462    	; 0x101a <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3d 87       	std	Y+13, r19	; 0x0d
     e54:	2c 87       	std	Y+12, r18	; 0x0c
     e56:	8c 85       	ldd	r24, Y+12	; 0x0c
     e58:	9d 85       	ldd	r25, Y+13	; 0x0d
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	c9 f0       	breq	.+50     	; 0xe90 <DIO_u8SetPinValue+0xc4>
     e5e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e60:	3d 85       	ldd	r19, Y+13	; 0x0d
     e62:	21 30       	cpi	r18, 0x01	; 1
     e64:	31 05       	cpc	r19, r1
     e66:	49 f5       	brne	.+82     	; 0xeba <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
     e68:	ab e3       	ldi	r26, 0x3B	; 59
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e3       	ldi	r30, 0x3B	; 59
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_u8SetPinValue+0xba>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_u8SetPinValue+0xb6>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	c5 c0       	rjmp	.+394    	; 0x101a <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e3       	ldi	r30, 0x3B	; 59
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_u8SetPinValue+0xe2>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_u8SetPinValue+0xde>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	b0 c0       	rjmp	.+352    	; 0x101a <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     eba:	1a 82       	std	Y+2, r1	; 0x02
     ebc:	ae c0       	rjmp	.+348    	; 0x101a <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3b 87       	std	Y+11, r19	; 0x0b
     ec6:	2a 87       	std	Y+10, r18	; 0x0a
     ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eca:	9b 85       	ldd	r25, Y+11	; 0x0b
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	c9 f0       	breq	.+50     	; 0xf02 <DIO_u8SetPinValue+0x136>
     ed0:	2a 85       	ldd	r18, Y+10	; 0x0a
     ed2:	3b 85       	ldd	r19, Y+11	; 0x0b
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	31 05       	cpc	r19, r1
     ed8:	49 f5       	brne	.+82     	; 0xf2c <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
     eda:	a8 e3       	ldi	r26, 0x38	; 56
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e8 e3       	ldi	r30, 0x38	; 56
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_u8SetPinValue+0x12c>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_u8SetPinValue+0x128>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	8c c0       	rjmp	.+280    	; 0x101a <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
     f02:	a8 e3       	ldi	r26, 0x38	; 56
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e8 e3       	ldi	r30, 0x38	; 56
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_u8SetPinValue+0x154>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_u8SetPinValue+0x150>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	77 c0       	rjmp	.+238    	; 0x101a <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     f2c:	1a 82       	std	Y+2, r1	; 0x02
     f2e:	75 c0       	rjmp	.+234    	; 0x101a <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	39 87       	std	Y+9, r19	; 0x09
     f38:	28 87       	std	Y+8, r18	; 0x08
     f3a:	88 85       	ldd	r24, Y+8	; 0x08
     f3c:	99 85       	ldd	r25, Y+9	; 0x09
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	31 f0       	breq	.+12     	; 0xf4e <DIO_u8SetPinValue+0x182>
     f42:	28 85       	ldd	r18, Y+8	; 0x08
     f44:	39 85       	ldd	r19, Y+9	; 0x09
     f46:	21 30       	cpi	r18, 0x01	; 1
     f48:	31 05       	cpc	r19, r1
     f4a:	b1 f0       	breq	.+44     	; 0xf78 <DIO_u8SetPinValue+0x1ac>
     f4c:	29 c0       	rjmp	.+82     	; 0xfa0 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
     f4e:	a5 e3       	ldi	r26, 0x35	; 53
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e5 e3       	ldi	r30, 0x35	; 53
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_u8SetPinValue+0x1a0>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_u8SetPinValue+0x19c>
     f70:	80 95       	com	r24
     f72:	84 23       	and	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	51 c0       	rjmp	.+162    	; 0x101a <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
     f78:	a5 e3       	ldi	r26, 0x35	; 53
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e3       	ldi	r30, 0x35	; 53
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_u8SetPinValue+0x1ca>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_u8SetPinValue+0x1c6>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	3d c0       	rjmp	.+122    	; 0x101a <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     fa0:	1a 82       	std	Y+2, r1	; 0x02
     fa2:	3b c0       	rjmp	.+118    	; 0x101a <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3f 83       	std	Y+7, r19	; 0x07
     fac:	2e 83       	std	Y+6, r18	; 0x06
     fae:	8e 81       	ldd	r24, Y+6	; 0x06
     fb0:	9f 81       	ldd	r25, Y+7	; 0x07
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <DIO_u8SetPinValue+0x1f6>
     fb6:	2e 81       	ldd	r18, Y+6	; 0x06
     fb8:	3f 81       	ldd	r19, Y+7	; 0x07
     fba:	21 30       	cpi	r18, 0x01	; 1
     fbc:	31 05       	cpc	r19, r1
     fbe:	b1 f0       	breq	.+44     	; 0xfec <DIO_u8SetPinValue+0x220>
     fc0:	29 c0       	rjmp	.+82     	; 0x1014 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
     fc2:	a5 e3       	ldi	r26, 0x35	; 53
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e5 e3       	ldi	r30, 0x35	; 53
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_u8SetPinValue+0x214>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_u8SetPinValue+0x210>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	17 c0       	rjmp	.+46     	; 0x101a <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
     fec:	a2 e3       	ldi	r26, 0x32	; 50
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e2 e3       	ldi	r30, 0x32	; 50
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_u8SetPinValue+0x23e>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_u8SetPinValue+0x23a>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	03 c0       	rjmp	.+6      	; 0x101a <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1014:	1a 82       	std	Y+2, r1	; 0x02
    1016:	01 c0       	rjmp	.+2      	; 0x101a <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    1018:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    101c:	2f 96       	adiw	r28, 0x0f	; 15
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	28 97       	sbiw	r28, 0x08	; 8
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	8b 83       	std	Y+3, r24	; 0x03
    1044:	6c 83       	std	Y+4, r22	; 0x04
    1046:	5e 83       	std	Y+6, r21	; 0x06
    1048:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	84 30       	cpi	r24, 0x04	; 4
    1052:	08 f0       	brcs	.+2      	; 0x1056 <DIO_u8GetPinValue+0x28>
    1054:	9f c0       	rjmp	.+318    	; 0x1194 <DIO_u8GetPinValue+0x166>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	08 f0       	brcs	.+2      	; 0x105e <DIO_u8GetPinValue+0x30>
    105c:	9b c0       	rjmp	.+310    	; 0x1194 <DIO_u8GetPinValue+0x166>
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	09 f4       	brne	.+2      	; 0x1068 <DIO_u8GetPinValue+0x3a>
    1066:	96 c0       	rjmp	.+300    	; 0x1194 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	38 87       	std	Y+8, r19	; 0x08
    1070:	2f 83       	std	Y+7, r18	; 0x07
    1072:	4f 81       	ldd	r20, Y+7	; 0x07
    1074:	58 85       	ldd	r21, Y+8	; 0x08
    1076:	41 30       	cpi	r20, 0x01	; 1
    1078:	51 05       	cpc	r21, r1
    107a:	a9 f1       	breq	.+106    	; 0x10e6 <DIO_u8GetPinValue+0xb8>
    107c:	8f 81       	ldd	r24, Y+7	; 0x07
    107e:	98 85       	ldd	r25, Y+8	; 0x08
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	91 05       	cpc	r25, r1
    1084:	34 f4       	brge	.+12     	; 0x1092 <DIO_u8GetPinValue+0x64>
    1086:	2f 81       	ldd	r18, Y+7	; 0x07
    1088:	38 85       	ldd	r19, Y+8	; 0x08
    108a:	21 15       	cp	r18, r1
    108c:	31 05       	cpc	r19, r1
    108e:	71 f0       	breq	.+28     	; 0x10ac <DIO_u8GetPinValue+0x7e>
    1090:	82 c0       	rjmp	.+260    	; 0x1196 <DIO_u8GetPinValue+0x168>
    1092:	4f 81       	ldd	r20, Y+7	; 0x07
    1094:	58 85       	ldd	r21, Y+8	; 0x08
    1096:	42 30       	cpi	r20, 0x02	; 2
    1098:	51 05       	cpc	r21, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <DIO_u8GetPinValue+0x70>
    109c:	41 c0       	rjmp	.+130    	; 0x1120 <DIO_u8GetPinValue+0xf2>
    109e:	8f 81       	ldd	r24, Y+7	; 0x07
    10a0:	98 85       	ldd	r25, Y+8	; 0x08
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <DIO_u8GetPinValue+0x7c>
    10a8:	58 c0       	rjmp	.+176    	; 0x115a <DIO_u8GetPinValue+0x12c>
    10aa:	75 c0       	rjmp	.+234    	; 0x1196 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    10ac:	e9 e3       	ldi	r30, 0x39	; 57
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a9 01       	movw	r20, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_u8GetPinValue+0x96>
    10c0:	55 95       	asr	r21
    10c2:	47 95       	ror	r20
    10c4:	8a 95       	dec	r24
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_u8GetPinValue+0x92>
    10c8:	ca 01       	movw	r24, r20
    10ca:	81 70       	andi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	88 23       	and	r24, r24
    10d2:	21 f4       	brne	.+8      	; 0x10dc <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    10d4:	ed 81       	ldd	r30, Y+5	; 0x05
    10d6:	fe 81       	ldd	r31, Y+6	; 0x06
    10d8:	10 82       	st	Z, r1
    10da:	5d c0       	rjmp	.+186    	; 0x1196 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    10dc:	ed 81       	ldd	r30, Y+5	; 0x05
    10de:	fe 81       	ldd	r31, Y+6	; 0x06
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 83       	st	Z, r24
    10e4:	58 c0       	rjmp	.+176    	; 0x1196 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    10e6:	e6 e3       	ldi	r30, 0x36	; 54
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a9 01       	movw	r20, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_u8GetPinValue+0xd0>
    10fa:	55 95       	asr	r21
    10fc:	47 95       	ror	r20
    10fe:	8a 95       	dec	r24
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_u8GetPinValue+0xcc>
    1102:	ca 01       	movw	r24, r20
    1104:	81 70       	andi	r24, 0x01	; 1
    1106:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	88 23       	and	r24, r24
    110c:	21 f4       	brne	.+8      	; 0x1116 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    110e:	ed 81       	ldd	r30, Y+5	; 0x05
    1110:	fe 81       	ldd	r31, Y+6	; 0x06
    1112:	10 82       	st	Z, r1
    1114:	40 c0       	rjmp	.+128    	; 0x1196 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1116:	ed 81       	ldd	r30, Y+5	; 0x05
    1118:	fe 81       	ldd	r31, Y+6	; 0x06
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 83       	st	Z, r24
    111e:	3b c0       	rjmp	.+118    	; 0x1196 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1120:	e3 e3       	ldi	r30, 0x33	; 51
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_u8GetPinValue+0x10a>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_u8GetPinValue+0x106>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	88 23       	and	r24, r24
    1146:	21 f4       	brne	.+8      	; 0x1150 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1148:	ed 81       	ldd	r30, Y+5	; 0x05
    114a:	fe 81       	ldd	r31, Y+6	; 0x06
    114c:	10 82       	st	Z, r1
    114e:	23 c0       	rjmp	.+70     	; 0x1196 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1150:	ed 81       	ldd	r30, Y+5	; 0x05
    1152:	fe 81       	ldd	r31, Y+6	; 0x06
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 83       	st	Z, r24
    1158:	1e c0       	rjmp	.+60     	; 0x1196 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    115a:	e0 e3       	ldi	r30, 0x30	; 48
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	a9 01       	movw	r20, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8GetPinValue+0x144>
    116e:	55 95       	asr	r21
    1170:	47 95       	ror	r20
    1172:	8a 95       	dec	r24
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8GetPinValue+0x140>
    1176:	ca 01       	movw	r24, r20
    1178:	81 70       	andi	r24, 0x01	; 1
    117a:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	88 23       	and	r24, r24
    1180:	21 f4       	brne	.+8      	; 0x118a <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1182:	ed 81       	ldd	r30, Y+5	; 0x05
    1184:	fe 81       	ldd	r31, Y+6	; 0x06
    1186:	10 82       	st	Z, r1
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    118a:	ed 81       	ldd	r30, Y+5	; 0x05
    118c:	fe 81       	ldd	r31, Y+6	; 0x06
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 83       	st	Z, r24
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1194:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1198:	28 96       	adiw	r28, 0x08	; 8
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	2d 97       	sbiw	r28, 0x0d	; 13
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3c 87       	std	Y+12, r19	; 0x0c
    11ca:	2b 87       	std	Y+11, r18	; 0x0b
    11cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	71 f1       	breq	.+92     	; 0x1232 <DIO_u8SetPortDirection+0x88>
    11d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    11d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_u8SetPortDirection+0x40>
    11e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	69 f0       	breq	.+26     	; 0x1202 <DIO_u8SetPortDirection+0x58>
    11e8:	6b c0       	rjmp	.+214    	; 0x12c0 <DIO_u8SetPortDirection+0x116>
    11ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    11ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	b9 f1       	breq	.+110    	; 0x1262 <DIO_u8SetPortDirection+0xb8>
    11f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_u8SetPortDirection+0x56>
    11fe:	49 c0       	rjmp	.+146    	; 0x1292 <DIO_u8SetPortDirection+0xe8>
    1200:	5f c0       	rjmp	.+190    	; 0x12c0 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3a 87       	std	Y+10, r19	; 0x0a
    120a:	29 87       	std	Y+9, r18	; 0x09
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	31 f0       	breq	.+12     	; 0x1220 <DIO_u8SetPortDirection+0x76>
    1214:	29 85       	ldd	r18, Y+9	; 0x09
    1216:	3a 85       	ldd	r19, Y+10	; 0x0a
    1218:	21 30       	cpi	r18, 0x01	; 1
    121a:	31 05       	cpc	r19, r1
    121c:	29 f0       	breq	.+10     	; 0x1228 <DIO_u8SetPortDirection+0x7e>
    121e:	50 c0       	rjmp	.+160    	; 0x12c0 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1220:	ea e3       	ldi	r30, 0x3A	; 58
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	10 82       	st	Z, r1
    1226:	4c c0       	rjmp	.+152    	; 0x12c0 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1228:	ea e3       	ldi	r30, 0x3A	; 58
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	80 83       	st	Z, r24
    1230:	47 c0       	rjmp	.+142    	; 0x12c0 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	38 87       	std	Y+8, r19	; 0x08
    123a:	2f 83       	std	Y+7, r18	; 0x07
    123c:	8f 81       	ldd	r24, Y+7	; 0x07
    123e:	98 85       	ldd	r25, Y+8	; 0x08
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	31 f0       	breq	.+12     	; 0x1250 <DIO_u8SetPortDirection+0xa6>
    1244:	2f 81       	ldd	r18, Y+7	; 0x07
    1246:	38 85       	ldd	r19, Y+8	; 0x08
    1248:	21 30       	cpi	r18, 0x01	; 1
    124a:	31 05       	cpc	r19, r1
    124c:	29 f0       	breq	.+10     	; 0x1258 <DIO_u8SetPortDirection+0xae>
    124e:	38 c0       	rjmp	.+112    	; 0x12c0 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    1250:	e7 e3       	ldi	r30, 0x37	; 55
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	10 82       	st	Z, r1
    1256:	34 c0       	rjmp	.+104    	; 0x12c0 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    1258:	e7 e3       	ldi	r30, 0x37	; 55
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	80 83       	st	Z, r24
    1260:	2f c0       	rjmp	.+94     	; 0x12c0 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3e 83       	std	Y+6, r19	; 0x06
    126a:	2d 83       	std	Y+5, r18	; 0x05
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	31 f0       	breq	.+12     	; 0x1280 <DIO_u8SetPortDirection+0xd6>
    1274:	2d 81       	ldd	r18, Y+5	; 0x05
    1276:	3e 81       	ldd	r19, Y+6	; 0x06
    1278:	21 30       	cpi	r18, 0x01	; 1
    127a:	31 05       	cpc	r19, r1
    127c:	29 f0       	breq	.+10     	; 0x1288 <DIO_u8SetPortDirection+0xde>
    127e:	20 c0       	rjmp	.+64     	; 0x12c0 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    1280:	e4 e3       	ldi	r30, 0x34	; 52
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	10 82       	st	Z, r1
    1286:	1c c0       	rjmp	.+56     	; 0x12c0 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    1288:	e4 e3       	ldi	r30, 0x34	; 52
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	80 83       	st	Z, r24
    1290:	17 c0       	rjmp	.+46     	; 0x12c0 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3c 83       	std	Y+4, r19	; 0x04
    129a:	2b 83       	std	Y+3, r18	; 0x03
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	31 f0       	breq	.+12     	; 0x12b0 <DIO_u8SetPortDirection+0x106>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	21 30       	cpi	r18, 0x01	; 1
    12aa:	31 05       	cpc	r19, r1
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <DIO_u8SetPortDirection+0x10e>
    12ae:	08 c0       	rjmp	.+16     	; 0x12c0 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    12b0:	e1 e3       	ldi	r30, 0x31	; 49
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	10 82       	st	Z, r1
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    12b8:	e1 e3       	ldi	r30, 0x31	; 49
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    12c0:	2d 96       	adiw	r28, 0x0d	; 13
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2d 97       	sbiw	r28, 0x0d	; 13
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	8a 83       	std	Y+2, r24	; 0x02
    12e8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <DIO_u8SetPortValue+0x24>
    12f4:	80 c0       	rjmp	.+256    	; 0x13f6 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	3d 87       	std	Y+13, r19	; 0x0d
    12fe:	2c 87       	std	Y+12, r18	; 0x0c
    1300:	8c 85       	ldd	r24, Y+12	; 0x0c
    1302:	9d 85       	ldd	r25, Y+13	; 0x0d
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	91 05       	cpc	r25, r1
    1308:	71 f1       	breq	.+92     	; 0x1366 <DIO_u8SetPortValue+0x94>
    130a:	2c 85       	ldd	r18, Y+12	; 0x0c
    130c:	3d 85       	ldd	r19, Y+13	; 0x0d
    130e:	22 30       	cpi	r18, 0x02	; 2
    1310:	31 05       	cpc	r19, r1
    1312:	2c f4       	brge	.+10     	; 0x131e <DIO_u8SetPortValue+0x4c>
    1314:	8c 85       	ldd	r24, Y+12	; 0x0c
    1316:	9d 85       	ldd	r25, Y+13	; 0x0d
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	69 f0       	breq	.+26     	; 0x1336 <DIO_u8SetPortValue+0x64>
    131c:	6d c0       	rjmp	.+218    	; 0x13f8 <DIO_u8SetPortValue+0x126>
    131e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1320:	3d 85       	ldd	r19, Y+13	; 0x0d
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	b9 f1       	breq	.+110    	; 0x1396 <DIO_u8SetPortValue+0xc4>
    1328:	8c 85       	ldd	r24, Y+12	; 0x0c
    132a:	9d 85       	ldd	r25, Y+13	; 0x0d
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	91 05       	cpc	r25, r1
    1330:	09 f4       	brne	.+2      	; 0x1334 <DIO_u8SetPortValue+0x62>
    1332:	49 c0       	rjmp	.+146    	; 0x13c6 <DIO_u8SetPortValue+0xf4>
    1334:	61 c0       	rjmp	.+194    	; 0x13f8 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3b 87       	std	Y+11, r19	; 0x0b
    133e:	2a 87       	std	Y+10, r18	; 0x0a
    1340:	8a 85       	ldd	r24, Y+10	; 0x0a
    1342:	9b 85       	ldd	r25, Y+11	; 0x0b
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <DIO_u8SetPortValue+0x82>
    1348:	2a 85       	ldd	r18, Y+10	; 0x0a
    134a:	3b 85       	ldd	r19, Y+11	; 0x0b
    134c:	21 30       	cpi	r18, 0x01	; 1
    134e:	31 05       	cpc	r19, r1
    1350:	29 f0       	breq	.+10     	; 0x135c <DIO_u8SetPortValue+0x8a>
    1352:	52 c0       	rjmp	.+164    	; 0x13f8 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    1354:	eb e3       	ldi	r30, 0x3B	; 59
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	10 82       	st	Z, r1
    135a:	4e c0       	rjmp	.+156    	; 0x13f8 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    135c:	eb e3       	ldi	r30, 0x3B	; 59
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	80 83       	st	Z, r24
    1364:	49 c0       	rjmp	.+146    	; 0x13f8 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	39 87       	std	Y+9, r19	; 0x09
    136e:	28 87       	std	Y+8, r18	; 0x08
    1370:	88 85       	ldd	r24, Y+8	; 0x08
    1372:	99 85       	ldd	r25, Y+9	; 0x09
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	31 f0       	breq	.+12     	; 0x1384 <DIO_u8SetPortValue+0xb2>
    1378:	28 85       	ldd	r18, Y+8	; 0x08
    137a:	39 85       	ldd	r19, Y+9	; 0x09
    137c:	21 30       	cpi	r18, 0x01	; 1
    137e:	31 05       	cpc	r19, r1
    1380:	29 f0       	breq	.+10     	; 0x138c <DIO_u8SetPortValue+0xba>
    1382:	3a c0       	rjmp	.+116    	; 0x13f8 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    1384:	e8 e3       	ldi	r30, 0x38	; 56
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	10 82       	st	Z, r1
    138a:	36 c0       	rjmp	.+108    	; 0x13f8 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	80 83       	st	Z, r24
    1394:	31 c0       	rjmp	.+98     	; 0x13f8 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3f 83       	std	Y+7, r19	; 0x07
    139e:	2e 83       	std	Y+6, r18	; 0x06
    13a0:	8e 81       	ldd	r24, Y+6	; 0x06
    13a2:	9f 81       	ldd	r25, Y+7	; 0x07
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	31 f0       	breq	.+12     	; 0x13b4 <DIO_u8SetPortValue+0xe2>
    13a8:	2e 81       	ldd	r18, Y+6	; 0x06
    13aa:	3f 81       	ldd	r19, Y+7	; 0x07
    13ac:	21 30       	cpi	r18, 0x01	; 1
    13ae:	31 05       	cpc	r19, r1
    13b0:	29 f0       	breq	.+10     	; 0x13bc <DIO_u8SetPortValue+0xea>
    13b2:	22 c0       	rjmp	.+68     	; 0x13f8 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    13b4:	e5 e3       	ldi	r30, 0x35	; 53
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	10 82       	st	Z, r1
    13ba:	1e c0       	rjmp	.+60     	; 0x13f8 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    13bc:	e5 e3       	ldi	r30, 0x35	; 53
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	80 83       	st	Z, r24
    13c4:	19 c0       	rjmp	.+50     	; 0x13f8 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	31 f0       	breq	.+12     	; 0x13e4 <DIO_u8SetPortValue+0x112>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	21 30       	cpi	r18, 0x01	; 1
    13de:	31 05       	cpc	r19, r1
    13e0:	29 f0       	breq	.+10     	; 0x13ec <DIO_u8SetPortValue+0x11a>
    13e2:	0a c0       	rjmp	.+20     	; 0x13f8 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    13e4:	e2 e3       	ldi	r30, 0x32	; 50
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	10 82       	st	Z, r1
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	80 83       	st	Z, r24
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    13f6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fa:	2d 96       	adiw	r28, 0x0d	; 13
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <DIO_u8GetPortValue+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <DIO_u8GetPortValue+0x8>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <DIO_u8GetPortValue+0xa>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	7c 83       	std	Y+4, r23	; 0x04
    141e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	08 f0       	brcs	.+2      	; 0x142c <DIO_u8GetPortValue+0x20>
    142a:	3f c0       	rjmp	.+126    	; 0x14aa <DIO_u8GetPortValue+0x9e>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	d9 f1       	breq	.+118    	; 0x14aa <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3e 83       	std	Y+6, r19	; 0x06
    143c:	2d 83       	std	Y+5, r18	; 0x05
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	e1 f0       	breq	.+56     	; 0x1480 <DIO_u8GetPortValue+0x74>
    1448:	2d 81       	ldd	r18, Y+5	; 0x05
    144a:	3e 81       	ldd	r19, Y+6	; 0x06
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	2c f4       	brge	.+10     	; 0x145c <DIO_u8GetPortValue+0x50>
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	61 f0       	breq	.+24     	; 0x1472 <DIO_u8GetPortValue+0x66>
    145a:	28 c0       	rjmp	.+80     	; 0x14ac <DIO_u8GetPortValue+0xa0>
    145c:	2d 81       	ldd	r18, Y+5	; 0x05
    145e:	3e 81       	ldd	r19, Y+6	; 0x06
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	a1 f0       	breq	.+40     	; 0x148e <DIO_u8GetPortValue+0x82>
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	b1 f0       	breq	.+44     	; 0x149c <DIO_u8GetPortValue+0x90>
    1470:	1d c0       	rjmp	.+58     	; 0x14ac <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1472:	e9 e3       	ldi	r30, 0x39	; 57
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	eb 81       	ldd	r30, Y+3	; 0x03
    147a:	fc 81       	ldd	r31, Y+4	; 0x04
    147c:	80 83       	st	Z, r24
    147e:	16 c0       	rjmp	.+44     	; 0x14ac <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1480:	e6 e3       	ldi	r30, 0x36	; 54
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	eb 81       	ldd	r30, Y+3	; 0x03
    1488:	fc 81       	ldd	r31, Y+4	; 0x04
    148a:	80 83       	st	Z, r24
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    148e:	e3 e3       	ldi	r30, 0x33	; 51
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	80 83       	st	Z, r24
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    149c:	e0 e3       	ldi	r30, 0x30	; 48
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	eb 81       	ldd	r30, Y+3	; 0x03
    14a4:	fc 81       	ldd	r31, Y+4	; 0x04
    14a6:	80 83       	st	Z, r24
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    14aa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ae:	26 96       	adiw	r28, 0x06	; 6
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    14c0:	8f 92       	push	r8
    14c2:	af 92       	push	r10
    14c4:	cf 92       	push	r12
    14c6:	ef 92       	push	r14
    14c8:	0f 93       	push	r16
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	2c 97       	sbiw	r28, 0x0c	; 12
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	6a 83       	std	Y+2, r22	; 0x02
    14e2:	4b 83       	std	Y+3, r20	; 0x03
    14e4:	2c 83       	std	Y+4, r18	; 0x04
    14e6:	0d 83       	std	Y+5, r16	; 0x05
    14e8:	ee 82       	std	Y+6, r14	; 0x06
    14ea:	cf 82       	std	Y+7, r12	; 0x07
    14ec:	a8 86       	std	Y+8, r10	; 0x08
    14ee:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3b 87       	std	Y+11, r19	; 0x0b
    14f8:	2a 87       	std	Y+10, r18	; 0x0a
    14fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    14fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <DIO_u8SetValueToAllPins+0x46>
    1504:	a8 c0       	rjmp	.+336    	; 0x1656 <DIO_u8SetValueToAllPins+0x196>
    1506:	2a 85       	ldd	r18, Y+10	; 0x0a
    1508:	3b 85       	ldd	r19, Y+11	; 0x0b
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <DIO_u8SetValueToAllPins+0x5a>
    1510:	8a 85       	ldd	r24, Y+10	; 0x0a
    1512:	9b 85       	ldd	r25, Y+11	; 0x0b
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	71 f0       	breq	.+28     	; 0x1534 <DIO_u8SetValueToAllPins+0x74>
    1518:	50 c2       	rjmp	.+1184   	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
    151a:	2a 85       	ldd	r18, Y+10	; 0x0a
    151c:	3b 85       	ldd	r19, Y+11	; 0x0b
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <DIO_u8SetValueToAllPins+0x66>
    1524:	29 c1       	rjmp	.+594    	; 0x1778 <DIO_u8SetValueToAllPins+0x2b8>
    1526:	8a 85       	ldd	r24, Y+10	; 0x0a
    1528:	9b 85       	ldd	r25, Y+11	; 0x0b
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <DIO_u8SetValueToAllPins+0x72>
    1530:	b4 c1       	rjmp	.+872    	; 0x189a <DIO_u8SetValueToAllPins+0x3da>
    1532:	43 c2       	rjmp	.+1158   	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	41 f4       	brne	.+16     	; 0x154a <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    153a:	ab e3       	ldi	r26, 0x3B	; 59
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	eb e3       	ldi	r30, 0x3B	; 59
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	81 60       	ori	r24, 0x01	; 1
    1546:	8c 93       	st	X, r24
    1548:	07 c0       	rjmp	.+14     	; 0x1558 <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    154a:	ab e3       	ldi	r26, 0x3B	; 59
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb e3       	ldi	r30, 0x3B	; 59
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8e 7f       	andi	r24, 0xFE	; 254
    1556:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	41 f4       	brne	.+16     	; 0x156e <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    155e:	ab e3       	ldi	r26, 0x3B	; 59
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e3       	ldi	r30, 0x3B	; 59
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	82 60       	ori	r24, 0x02	; 2
    156a:	8c 93       	st	X, r24
    156c:	07 c0       	rjmp	.+14     	; 0x157c <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    156e:	ab e3       	ldi	r26, 0x3B	; 59
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	eb e3       	ldi	r30, 0x3B	; 59
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8d 7f       	andi	r24, 0xFD	; 253
    157a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	41 f4       	brne	.+16     	; 0x1592 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1582:	ab e3       	ldi	r26, 0x3B	; 59
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e3       	ldi	r30, 0x3B	; 59
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	8c 93       	st	X, r24
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1592:	ab e3       	ldi	r26, 0x3B	; 59
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e3       	ldi	r30, 0x3B	; 59
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8b 7f       	andi	r24, 0xFB	; 251
    159e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	41 f4       	brne	.+16     	; 0x15b6 <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    15a6:	ab e3       	ldi	r26, 0x3B	; 59
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	eb e3       	ldi	r30, 0x3B	; 59
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	88 60       	ori	r24, 0x08	; 8
    15b2:	8c 93       	st	X, r24
    15b4:	07 c0       	rjmp	.+14     	; 0x15c4 <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    15b6:	ab e3       	ldi	r26, 0x3B	; 59
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	eb e3       	ldi	r30, 0x3B	; 59
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	87 7f       	andi	r24, 0xF7	; 247
    15c2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	41 f4       	brne	.+16     	; 0x15da <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    15ca:	ab e3       	ldi	r26, 0x3B	; 59
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb e3       	ldi	r30, 0x3B	; 59
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 61       	ori	r24, 0x10	; 16
    15d6:	8c 93       	st	X, r24
    15d8:	07 c0       	rjmp	.+14     	; 0x15e8 <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    15da:	ab e3       	ldi	r26, 0x3B	; 59
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	eb e3       	ldi	r30, 0x3B	; 59
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8f 7e       	andi	r24, 0xEF	; 239
    15e6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	41 f4       	brne	.+16     	; 0x15fe <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    15ee:	ab e3       	ldi	r26, 0x3B	; 59
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	eb e3       	ldi	r30, 0x3B	; 59
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	80 62       	ori	r24, 0x20	; 32
    15fa:	8c 93       	st	X, r24
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    15fe:	ab e3       	ldi	r26, 0x3B	; 59
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	eb e3       	ldi	r30, 0x3B	; 59
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 7d       	andi	r24, 0xDF	; 223
    160a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    160c:	88 85       	ldd	r24, Y+8	; 0x08
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	41 f4       	brne	.+16     	; 0x1622 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    1612:	ab e3       	ldi	r26, 0x3B	; 59
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	eb e3       	ldi	r30, 0x3B	; 59
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 64       	ori	r24, 0x40	; 64
    161e:	8c 93       	st	X, r24
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    1622:	ab e3       	ldi	r26, 0x3B	; 59
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	eb e3       	ldi	r30, 0x3B	; 59
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	8f 7b       	andi	r24, 0xBF	; 191
    162e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	41 f4       	brne	.+16     	; 0x1646 <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    1636:	ab e3       	ldi	r26, 0x3B	; 59
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	eb e3       	ldi	r30, 0x3B	; 59
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	8c 93       	st	X, r24
    1644:	ba c1       	rjmp	.+884    	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    1646:	ab e3       	ldi	r26, 0x3B	; 59
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	eb e3       	ldi	r30, 0x3B	; 59
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 77       	andi	r24, 0x7F	; 127
    1652:	8c 93       	st	X, r24
    1654:	b2 c1       	rjmp	.+868    	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	41 f4       	brne	.+16     	; 0x166c <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    165c:	a8 e3       	ldi	r26, 0x38	; 56
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e8 e3       	ldi	r30, 0x38	; 56
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	81 60       	ori	r24, 0x01	; 1
    1668:	8c 93       	st	X, r24
    166a:	07 c0       	rjmp	.+14     	; 0x167a <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    166c:	a8 e3       	ldi	r26, 0x38	; 56
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e8 e3       	ldi	r30, 0x38	; 56
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8e 7f       	andi	r24, 0xFE	; 254
    1678:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	41 f4       	brne	.+16     	; 0x1690 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1680:	a8 e3       	ldi	r26, 0x38	; 56
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	82 60       	ori	r24, 0x02	; 2
    168c:	8c 93       	st	X, r24
    168e:	07 c0       	rjmp	.+14     	; 0x169e <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1690:	a8 e3       	ldi	r26, 0x38	; 56
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e8 e3       	ldi	r30, 0x38	; 56
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8d 7f       	andi	r24, 0xFD	; 253
    169c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	41 f4       	brne	.+16     	; 0x16b4 <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    16a4:	a8 e3       	ldi	r26, 0x38	; 56
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e3       	ldi	r30, 0x38	; 56
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	84 60       	ori	r24, 0x04	; 4
    16b0:	8c 93       	st	X, r24
    16b2:	07 c0       	rjmp	.+14     	; 0x16c2 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    16b4:	a8 e3       	ldi	r26, 0x38	; 56
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e8 e3       	ldi	r30, 0x38	; 56
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	8b 7f       	andi	r24, 0xFB	; 251
    16c0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	41 f4       	brne	.+16     	; 0x16d8 <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    16c8:	a8 e3       	ldi	r26, 0x38	; 56
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e8 e3       	ldi	r30, 0x38	; 56
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	88 60       	ori	r24, 0x08	; 8
    16d4:	8c 93       	st	X, r24
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    16d8:	a8 e3       	ldi	r26, 0x38	; 56
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e8 e3       	ldi	r30, 0x38	; 56
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	87 7f       	andi	r24, 0xF7	; 247
    16e4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    16e6:	8e 81       	ldd	r24, Y+6	; 0x06
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	41 f4       	brne	.+16     	; 0x16fc <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    16ec:	a8 e3       	ldi	r26, 0x38	; 56
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e8 e3       	ldi	r30, 0x38	; 56
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 61       	ori	r24, 0x10	; 16
    16f8:	8c 93       	st	X, r24
    16fa:	07 c0       	rjmp	.+14     	; 0x170a <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    16fc:	a8 e3       	ldi	r26, 0x38	; 56
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e8 e3       	ldi	r30, 0x38	; 56
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8f 7e       	andi	r24, 0xEF	; 239
    1708:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    170a:	8f 81       	ldd	r24, Y+7	; 0x07
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	41 f4       	brne	.+16     	; 0x1720 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    1710:	a8 e3       	ldi	r26, 0x38	; 56
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e8 e3       	ldi	r30, 0x38	; 56
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	80 62       	ori	r24, 0x20	; 32
    171c:	8c 93       	st	X, r24
    171e:	07 c0       	rjmp	.+14     	; 0x172e <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    1720:	a8 e3       	ldi	r26, 0x38	; 56
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e8 e3       	ldi	r30, 0x38	; 56
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8f 7d       	andi	r24, 0xDF	; 223
    172c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    172e:	88 85       	ldd	r24, Y+8	; 0x08
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	41 f4       	brne	.+16     	; 0x1744 <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    1734:	a8 e3       	ldi	r26, 0x38	; 56
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e8 e3       	ldi	r30, 0x38	; 56
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 64       	ori	r24, 0x40	; 64
    1740:	8c 93       	st	X, r24
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    1744:	a8 e3       	ldi	r26, 0x38	; 56
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e8 e3       	ldi	r30, 0x38	; 56
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	8f 7b       	andi	r24, 0xBF	; 191
    1750:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1752:	89 85       	ldd	r24, Y+9	; 0x09
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	41 f4       	brne	.+16     	; 0x1768 <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    1758:	a8 e3       	ldi	r26, 0x38	; 56
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e8 e3       	ldi	r30, 0x38	; 56
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 68       	ori	r24, 0x80	; 128
    1764:	8c 93       	st	X, r24
    1766:	29 c1       	rjmp	.+594    	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    1768:	a8 e3       	ldi	r26, 0x38	; 56
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e8 e3       	ldi	r30, 0x38	; 56
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 77       	andi	r24, 0x7F	; 127
    1774:	8c 93       	st	X, r24
    1776:	21 c1       	rjmp	.+578    	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	41 f4       	brne	.+16     	; 0x178e <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    177e:	a5 e3       	ldi	r26, 0x35	; 53
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	81 60       	ori	r24, 0x01	; 1
    178a:	8c 93       	st	X, r24
    178c:	07 c0       	rjmp	.+14     	; 0x179c <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    178e:	a5 e3       	ldi	r26, 0x35	; 53
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e5 e3       	ldi	r30, 0x35	; 53
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8e 7f       	andi	r24, 0xFE	; 254
    179a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	41 f4       	brne	.+16     	; 0x17b2 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    17a2:	a5 e3       	ldi	r26, 0x35	; 53
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e5 e3       	ldi	r30, 0x35	; 53
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	82 60       	ori	r24, 0x02	; 2
    17ae:	8c 93       	st	X, r24
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    17b2:	a5 e3       	ldi	r26, 0x35	; 53
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e5 e3       	ldi	r30, 0x35	; 53
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8d 7f       	andi	r24, 0xFD	; 253
    17be:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	41 f4       	brne	.+16     	; 0x17d6 <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    17c6:	a5 e3       	ldi	r26, 0x35	; 53
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	84 60       	ori	r24, 0x04	; 4
    17d2:	8c 93       	st	X, r24
    17d4:	07 c0       	rjmp	.+14     	; 0x17e4 <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    17d6:	a5 e3       	ldi	r26, 0x35	; 53
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e5 e3       	ldi	r30, 0x35	; 53
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	8b 7f       	andi	r24, 0xFB	; 251
    17e2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	41 f4       	brne	.+16     	; 0x17fa <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    17ea:	a5 e3       	ldi	r26, 0x35	; 53
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e5 e3       	ldi	r30, 0x35	; 53
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	88 60       	ori	r24, 0x08	; 8
    17f6:	8c 93       	st	X, r24
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    17fa:	a5 e3       	ldi	r26, 0x35	; 53
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e3       	ldi	r30, 0x35	; 53
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	87 7f       	andi	r24, 0xF7	; 247
    1806:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1808:	8e 81       	ldd	r24, Y+6	; 0x06
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	41 f4       	brne	.+16     	; 0x181e <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    180e:	a5 e3       	ldi	r26, 0x35	; 53
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e3       	ldi	r30, 0x35	; 53
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	80 61       	ori	r24, 0x10	; 16
    181a:	8c 93       	st	X, r24
    181c:	07 c0       	rjmp	.+14     	; 0x182c <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    181e:	a5 e3       	ldi	r26, 0x35	; 53
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e5 e3       	ldi	r30, 0x35	; 53
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8f 7e       	andi	r24, 0xEF	; 239
    182a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    182c:	8f 81       	ldd	r24, Y+7	; 0x07
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	41 f4       	brne	.+16     	; 0x1842 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    1832:	a5 e3       	ldi	r26, 0x35	; 53
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e5 e3       	ldi	r30, 0x35	; 53
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 62       	ori	r24, 0x20	; 32
    183e:	8c 93       	st	X, r24
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    1842:	a5 e3       	ldi	r26, 0x35	; 53
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e5 e3       	ldi	r30, 0x35	; 53
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8f 7d       	andi	r24, 0xDF	; 223
    184e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1850:	88 85       	ldd	r24, Y+8	; 0x08
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	41 f4       	brne	.+16     	; 0x1866 <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    1856:	a5 e3       	ldi	r26, 0x35	; 53
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e5 e3       	ldi	r30, 0x35	; 53
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 64       	ori	r24, 0x40	; 64
    1862:	8c 93       	st	X, r24
    1864:	07 c0       	rjmp	.+14     	; 0x1874 <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    1866:	a5 e3       	ldi	r26, 0x35	; 53
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e5 e3       	ldi	r30, 0x35	; 53
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 7b       	andi	r24, 0xBF	; 191
    1872:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	41 f4       	brne	.+16     	; 0x188a <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    187a:	a5 e3       	ldi	r26, 0x35	; 53
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e3       	ldi	r30, 0x35	; 53
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 68       	ori	r24, 0x80	; 128
    1886:	8c 93       	st	X, r24
    1888:	98 c0       	rjmp	.+304    	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    188a:	a5 e3       	ldi	r26, 0x35	; 53
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e5 e3       	ldi	r30, 0x35	; 53
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8f 77       	andi	r24, 0x7F	; 127
    1896:	8c 93       	st	X, r24
    1898:	90 c0       	rjmp	.+288    	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	41 f4       	brne	.+16     	; 0x18b0 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    18a0:	a2 e3       	ldi	r26, 0x32	; 50
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e2 e3       	ldi	r30, 0x32	; 50
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	8c 93       	st	X, r24
    18ae:	07 c0       	rjmp	.+14     	; 0x18be <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    18b0:	a2 e3       	ldi	r26, 0x32	; 50
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e2 e3       	ldi	r30, 0x32	; 50
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8e 7f       	andi	r24, 0xFE	; 254
    18bc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	41 f4       	brne	.+16     	; 0x18d4 <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    18c4:	a2 e3       	ldi	r26, 0x32	; 50
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e2 e3       	ldi	r30, 0x32	; 50
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	82 60       	ori	r24, 0x02	; 2
    18d0:	8c 93       	st	X, r24
    18d2:	07 c0       	rjmp	.+14     	; 0x18e2 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    18d4:	a2 e3       	ldi	r26, 0x32	; 50
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e2 e3       	ldi	r30, 0x32	; 50
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8d 7f       	andi	r24, 0xFD	; 253
    18e0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	81 30       	cpi	r24, 0x01	; 1
    18e6:	41 f4       	brne	.+16     	; 0x18f8 <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    18e8:	a2 e3       	ldi	r26, 0x32	; 50
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e2 e3       	ldi	r30, 0x32	; 50
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	84 60       	ori	r24, 0x04	; 4
    18f4:	8c 93       	st	X, r24
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    18f8:	a2 e3       	ldi	r26, 0x32	; 50
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e2 e3       	ldi	r30, 0x32	; 50
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8b 7f       	andi	r24, 0xFB	; 251
    1904:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1906:	8d 81       	ldd	r24, Y+5	; 0x05
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	41 f4       	brne	.+16     	; 0x191c <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    190c:	a2 e3       	ldi	r26, 0x32	; 50
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e2 e3       	ldi	r30, 0x32	; 50
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	88 60       	ori	r24, 0x08	; 8
    1918:	8c 93       	st	X, r24
    191a:	07 c0       	rjmp	.+14     	; 0x192a <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    191c:	a2 e3       	ldi	r26, 0x32	; 50
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e2 e3       	ldi	r30, 0x32	; 50
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	87 7f       	andi	r24, 0xF7	; 247
    1928:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    192a:	8e 81       	ldd	r24, Y+6	; 0x06
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	41 f4       	brne	.+16     	; 0x1940 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    1930:	a2 e3       	ldi	r26, 0x32	; 50
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e2 e3       	ldi	r30, 0x32	; 50
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 61       	ori	r24, 0x10	; 16
    193c:	8c 93       	st	X, r24
    193e:	07 c0       	rjmp	.+14     	; 0x194e <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    1940:	a2 e3       	ldi	r26, 0x32	; 50
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e2 e3       	ldi	r30, 0x32	; 50
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8f 7e       	andi	r24, 0xEF	; 239
    194c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    194e:	8f 81       	ldd	r24, Y+7	; 0x07
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	41 f4       	brne	.+16     	; 0x1964 <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    1954:	a2 e3       	ldi	r26, 0x32	; 50
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e2 e3       	ldi	r30, 0x32	; 50
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	80 62       	ori	r24, 0x20	; 32
    1960:	8c 93       	st	X, r24
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    1964:	a2 e3       	ldi	r26, 0x32	; 50
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e2 e3       	ldi	r30, 0x32	; 50
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8f 7d       	andi	r24, 0xDF	; 223
    1970:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1972:	88 85       	ldd	r24, Y+8	; 0x08
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	41 f4       	brne	.+16     	; 0x1988 <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    1978:	a2 e3       	ldi	r26, 0x32	; 50
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e2 e3       	ldi	r30, 0x32	; 50
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 64       	ori	r24, 0x40	; 64
    1984:	8c 93       	st	X, r24
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    1988:	a2 e3       	ldi	r26, 0x32	; 50
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e2 e3       	ldi	r30, 0x32	; 50
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8f 7b       	andi	r24, 0xBF	; 191
    1994:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1996:	89 85       	ldd	r24, Y+9	; 0x09
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	41 f4       	brne	.+16     	; 0x19ac <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    199c:	a2 e3       	ldi	r26, 0x32	; 50
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e2 e3       	ldi	r30, 0x32	; 50
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	80 68       	ori	r24, 0x80	; 128
    19a8:	8c 93       	st	X, r24
    19aa:	07 c0       	rjmp	.+14     	; 0x19ba <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    19ac:	a2 e3       	ldi	r26, 0x32	; 50
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e2 e3       	ldi	r30, 0x32	; 50
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8f 77       	andi	r24, 0x7F	; 127
    19b8:	8c 93       	st	X, r24
		}
		break;
	}
}
    19ba:	2c 96       	adiw	r28, 0x0c	; 12
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	0f 91       	pop	r16
    19cc:	ef 90       	pop	r14
    19ce:	cf 90       	pop	r12
    19d0:	af 90       	pop	r10
    19d2:	8f 90       	pop	r8
    19d4:	08 95       	ret

000019d6 <LCD_setPinDirection>:

#include "BIT_MATH.h"
#include "Dio_Interface.h"

void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	00 d0       	rcall	.+0      	; 0x19dc <LCD_setPinDirection+0x6>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <LCD_setPinDirection+0x8>
    19de:	0f 92       	push	r0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	6a 83       	std	Y+2, r22	; 0x02
    19e8:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	88 30       	cpi	r24, 0x08	; 8
    19ee:	08 f0       	brcs	.+2      	; 0x19f2 <LCD_setPinDirection+0x1c>
    19f0:	d5 c0       	rjmp	.+426    	; 0x1b9c <LCD_setPinDirection+0x1c6>
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	84 30       	cpi	r24, 0x04	; 4
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <LCD_setPinDirection+0x24>
    19f8:	d1 c0       	rjmp	.+418    	; 0x1b9c <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3d 83       	std	Y+5, r19	; 0x05
    1a02:	2c 83       	std	Y+4, r18	; 0x04
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <LCD_setPinDirection+0x3a>
    1a0e:	43 c0       	rjmp	.+134    	; 0x1a96 <LCD_setPinDirection+0xc0>
    1a10:	2c 81       	ldd	r18, Y+4	; 0x04
    1a12:	3d 81       	ldd	r19, Y+5	; 0x05
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_setPinDirection+0x4e>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	71 f0       	breq	.+28     	; 0x1a3e <LCD_setPinDirection+0x68>
    1a22:	bc c0       	rjmp	.+376    	; 0x1b9c <LCD_setPinDirection+0x1c6>
    1a24:	2c 81       	ldd	r18, Y+4	; 0x04
    1a26:	3d 81       	ldd	r19, Y+5	; 0x05
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <LCD_setPinDirection+0x5a>
    1a2e:	5f c0       	rjmp	.+190    	; 0x1aee <LCD_setPinDirection+0x118>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <LCD_setPinDirection+0x66>
    1a3a:	85 c0       	rjmp	.+266    	; 0x1b46 <LCD_setPinDirection+0x170>
    1a3c:	af c0       	rjmp	.+350    	; 0x1b9c <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	a1 f4       	brne	.+40     	; 0x1a6c <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a44:	aa e3       	ldi	r26, 0x3A	; 58
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	ea e3       	ldi	r30, 0x3A	; 58
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <LCD_setPinDirection+0x8c>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <LCD_setPinDirection+0x88>
    1a66:	84 2b       	or	r24, r20
    1a68:	8c 93       	st	X, r24
    1a6a:	98 c0       	rjmp	.+304    	; 0x1b9c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a6c:	aa e3       	ldi	r26, 0x3A	; 58
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ea e3       	ldi	r30, 0x3A	; 58
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	48 2f       	mov	r20, r24
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	02 2e       	mov	r0, r18
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <LCD_setPinDirection+0xb4>
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	0a 94       	dec	r0
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <LCD_setPinDirection+0xb0>
    1a8e:	80 95       	com	r24
    1a90:	84 23       	and	r24, r20
    1a92:	8c 93       	st	X, r24
    1a94:	83 c0       	rjmp	.+262    	; 0x1b9c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	a1 f4       	brne	.+40     	; 0x1ac4 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a9c:	a7 e3       	ldi	r26, 0x37	; 55
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e7 e3       	ldi	r30, 0x37	; 55
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <LCD_setPinDirection+0xe4>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <LCD_setPinDirection+0xe0>
    1abe:	84 2b       	or	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	6c c0       	rjmp	.+216    	; 0x1b9c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ac4:	a7 e3       	ldi	r26, 0x37	; 55
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e7 e3       	ldi	r30, 0x37	; 55
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <LCD_setPinDirection+0x10c>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <LCD_setPinDirection+0x108>
    1ae6:	80 95       	com	r24
    1ae8:	84 23       	and	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	57 c0       	rjmp	.+174    	; 0x1b9c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	a1 f4       	brne	.+40     	; 0x1b1c <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1af4:	a4 e3       	ldi	r26, 0x34	; 52
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e4 e3       	ldi	r30, 0x34	; 52
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <LCD_setPinDirection+0x13c>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <LCD_setPinDirection+0x138>
    1b16:	84 2b       	or	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	40 c0       	rjmp	.+128    	; 0x1b9c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b1c:	a4 e3       	ldi	r26, 0x34	; 52
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e4 e3       	ldi	r30, 0x34	; 52
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <LCD_setPinDirection+0x164>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <LCD_setPinDirection+0x160>
    1b3e:	80 95       	com	r24
    1b40:	84 23       	and	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	2b c0       	rjmp	.+86     	; 0x1b9c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	a1 f4       	brne	.+40     	; 0x1b74 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b4c:	a1 e3       	ldi	r26, 0x31	; 49
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e1 e3       	ldi	r30, 0x31	; 49
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <LCD_setPinDirection+0x194>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <LCD_setPinDirection+0x190>
    1b6e:	84 2b       	or	r24, r20
    1b70:	8c 93       	st	X, r24
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b74:	a1 e3       	ldi	r26, 0x31	; 49
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e1 e3       	ldi	r30, 0x31	; 49
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	48 2f       	mov	r20, r24
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 2e       	mov	r0, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <LCD_setPinDirection+0x1bc>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	0a 94       	dec	r0
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <LCD_setPinDirection+0x1b8>
    1b96:	80 95       	com	r24
    1b98:	84 23       	and	r24, r20
    1b9a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <LCD_setPinValue+0x6>
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <LCD_setPinValue+0x8>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	6a 83       	std	Y+2, r22	; 0x02
    1bbe:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	88 30       	cpi	r24, 0x08	; 8
    1bc4:	08 f0       	brcs	.+2      	; 0x1bc8 <LCD_setPinValue+0x1c>
    1bc6:	d5 c0       	rjmp	.+426    	; 0x1d72 <LCD_setPinValue+0x1c6>
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	84 30       	cpi	r24, 0x04	; 4
    1bcc:	08 f0       	brcs	.+2      	; 0x1bd0 <LCD_setPinValue+0x24>
    1bce:	d1 c0       	rjmp	.+418    	; 0x1d72 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	3d 83       	std	Y+5, r19	; 0x05
    1bd8:	2c 83       	std	Y+4, r18	; 0x04
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <LCD_setPinValue+0x3a>
    1be4:	43 c0       	rjmp	.+134    	; 0x1c6c <LCD_setPinValue+0xc0>
    1be6:	2c 81       	ldd	r18, Y+4	; 0x04
    1be8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	31 05       	cpc	r19, r1
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <LCD_setPinValue+0x4e>
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	71 f0       	breq	.+28     	; 0x1c14 <LCD_setPinValue+0x68>
    1bf8:	bc c0       	rjmp	.+376    	; 0x1d72 <LCD_setPinValue+0x1c6>
    1bfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <LCD_setPinValue+0x5a>
    1c04:	5f c0       	rjmp	.+190    	; 0x1cc4 <LCD_setPinValue+0x118>
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <LCD_setPinValue+0x66>
    1c10:	85 c0       	rjmp	.+266    	; 0x1d1c <LCD_setPinValue+0x170>
    1c12:	af c0       	rjmp	.+350    	; 0x1d72 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	a1 f4       	brne	.+40     	; 0x1c42 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c1a:	ab e3       	ldi	r26, 0x3B	; 59
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	eb e3       	ldi	r30, 0x3B	; 59
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <LCD_setPinValue+0x8c>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <LCD_setPinValue+0x88>
    1c3c:	84 2b       	or	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	98 c0       	rjmp	.+304    	; 0x1d72 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1c42:	ab e3       	ldi	r26, 0x3B	; 59
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	eb e3       	ldi	r30, 0x3B	; 59
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <LCD_setPinValue+0xb4>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <LCD_setPinValue+0xb0>
    1c64:	80 95       	com	r24
    1c66:	84 23       	and	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	83 c0       	rjmp	.+262    	; 0x1d72 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	a1 f4       	brne	.+40     	; 0x1c9a <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c72:	a8 e3       	ldi	r26, 0x38	; 56
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e8 e3       	ldi	r30, 0x38	; 56
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	02 2e       	mov	r0, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <LCD_setPinValue+0xe4>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <LCD_setPinValue+0xe0>
    1c94:	84 2b       	or	r24, r20
    1c96:	8c 93       	st	X, r24
    1c98:	6c c0       	rjmp	.+216    	; 0x1d72 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1c9a:	a8 e3       	ldi	r26, 0x38	; 56
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e8 e3       	ldi	r30, 0x38	; 56
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 2e       	mov	r0, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <LCD_setPinValue+0x10c>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	0a 94       	dec	r0
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <LCD_setPinValue+0x108>
    1cbc:	80 95       	com	r24
    1cbe:	84 23       	and	r24, r20
    1cc0:	8c 93       	st	X, r24
    1cc2:	57 c0       	rjmp	.+174    	; 0x1d72 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	a1 f4       	brne	.+40     	; 0x1cf2 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1cca:	a5 e3       	ldi	r26, 0x35	; 53
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e3       	ldi	r30, 0x35	; 53
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <LCD_setPinValue+0x13c>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <LCD_setPinValue+0x138>
    1cec:	84 2b       	or	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	40 c0       	rjmp	.+128    	; 0x1d72 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1cf2:	a5 e3       	ldi	r26, 0x35	; 53
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e5 e3       	ldi	r30, 0x35	; 53
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <LCD_setPinValue+0x164>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <LCD_setPinValue+0x160>
    1d14:	80 95       	com	r24
    1d16:	84 23       	and	r24, r20
    1d18:	8c 93       	st	X, r24
    1d1a:	2b c0       	rjmp	.+86     	; 0x1d72 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	a1 f4       	brne	.+40     	; 0x1d4a <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1d22:	a2 e3       	ldi	r26, 0x32	; 50
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e2 e3       	ldi	r30, 0x32	; 50
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <LCD_setPinValue+0x194>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <LCD_setPinValue+0x190>
    1d44:	84 2b       	or	r24, r20
    1d46:	8c 93       	st	X, r24
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d4a:	a2 e3       	ldi	r26, 0x32	; 50
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e2 e3       	ldi	r30, 0x32	; 50
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	48 2f       	mov	r20, r24
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <LCD_setPinValue+0x1bc>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <LCD_setPinValue+0x1b8>
    1d6c:	80 95       	com	r24
    1d6e:	84 23       	and	r24, r20
    1d70:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <LCD_getPinValue+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <LCD_getPinValue+0x8>
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	8a 83       	std	Y+2, r24	; 0x02
    1d92:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1d94:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	88 30       	cpi	r24, 0x08	; 8
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <LCD_getPinValue+0x1c>
    1d9c:	84 c0       	rjmp	.+264    	; 0x1ea6 <LCD_getPinValue+0x124>
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <LCD_getPinValue+0x24>
    1da4:	80 c0       	rjmp	.+256    	; 0x1ea6 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	3d 83       	std	Y+5, r19	; 0x05
    1dae:	2c 83       	std	Y+4, r18	; 0x04
    1db0:	4c 81       	ldd	r20, Y+4	; 0x04
    1db2:	5d 81       	ldd	r21, Y+5	; 0x05
    1db4:	41 30       	cpi	r20, 0x01	; 1
    1db6:	51 05       	cpc	r21, r1
    1db8:	79 f1       	breq	.+94     	; 0x1e18 <LCD_getPinValue+0x96>
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbe:	82 30       	cpi	r24, 0x02	; 2
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	34 f4       	brge	.+12     	; 0x1dd0 <LCD_getPinValue+0x4e>
    1dc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc8:	21 15       	cp	r18, r1
    1dca:	31 05       	cpc	r19, r1
    1dcc:	69 f0       	breq	.+26     	; 0x1de8 <LCD_getPinValue+0x66>
    1dce:	6b c0       	rjmp	.+214    	; 0x1ea6 <LCD_getPinValue+0x124>
    1dd0:	4c 81       	ldd	r20, Y+4	; 0x04
    1dd2:	5d 81       	ldd	r21, Y+5	; 0x05
    1dd4:	42 30       	cpi	r20, 0x02	; 2
    1dd6:	51 05       	cpc	r21, r1
    1dd8:	b9 f1       	breq	.+110    	; 0x1e48 <LCD_getPinValue+0xc6>
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	83 30       	cpi	r24, 0x03	; 3
    1de0:	91 05       	cpc	r25, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <LCD_getPinValue+0x64>
    1de4:	49 c0       	rjmp	.+146    	; 0x1e78 <LCD_getPinValue+0xf6>
    1de6:	5f c0       	rjmp	.+190    	; 0x1ea6 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1de8:	e9 e3       	ldi	r30, 0x39	; 57
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a9 01       	movw	r20, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <LCD_getPinValue+0x7e>
    1dfc:	55 95       	asr	r21
    1dfe:	47 95       	ror	r20
    1e00:	8a 95       	dec	r24
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <LCD_getPinValue+0x7a>
    1e04:	ca 01       	movw	r24, r20
    1e06:	81 70       	andi	r24, 0x01	; 1
    1e08:	90 70       	andi	r25, 0x00	; 0
    1e0a:	88 23       	and	r24, r24
    1e0c:	19 f0       	breq	.+6      	; 0x1e14 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	49 c0       	rjmp	.+146    	; 0x1ea6 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	47 c0       	rjmp	.+142    	; 0x1ea6 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e18:	e6 e3       	ldi	r30, 0x36	; 54
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a9 01       	movw	r20, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <LCD_getPinValue+0xae>
    1e2c:	55 95       	asr	r21
    1e2e:	47 95       	ror	r20
    1e30:	8a 95       	dec	r24
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <LCD_getPinValue+0xaa>
    1e34:	ca 01       	movw	r24, r20
    1e36:	81 70       	andi	r24, 0x01	; 1
    1e38:	90 70       	andi	r25, 0x00	; 0
    1e3a:	88 23       	and	r24, r24
    1e3c:	19 f0       	breq	.+6      	; 0x1e44 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	31 c0       	rjmp	.+98     	; 0x1ea6 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	2f c0       	rjmp	.+94     	; 0x1ea6 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e48:	e3 e3       	ldi	r30, 0x33	; 51
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a9 01       	movw	r20, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <LCD_getPinValue+0xde>
    1e5c:	55 95       	asr	r21
    1e5e:	47 95       	ror	r20
    1e60:	8a 95       	dec	r24
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <LCD_getPinValue+0xda>
    1e64:	ca 01       	movw	r24, r20
    1e66:	81 70       	andi	r24, 0x01	; 1
    1e68:	90 70       	andi	r25, 0x00	; 0
    1e6a:	88 23       	and	r24, r24
    1e6c:	19 f0       	breq	.+6      	; 0x1e74 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	19 c0       	rjmp	.+50     	; 0x1ea6 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e74:	19 82       	std	Y+1, r1	; 0x01
    1e76:	17 c0       	rjmp	.+46     	; 0x1ea6 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e78:	e0 e3       	ldi	r30, 0x30	; 48
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a9 01       	movw	r20, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <LCD_getPinValue+0x10e>
    1e8c:	55 95       	asr	r21
    1e8e:	47 95       	ror	r20
    1e90:	8a 95       	dec	r24
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <LCD_getPinValue+0x10a>
    1e94:	ca 01       	movw	r24, r20
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	90 70       	andi	r25, 0x00	; 0
    1e9a:	88 23       	and	r24, r24
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <LCD_setPortDirection+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LCD_setPortDirection+0x8>
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	84 30       	cpi	r24, 0x04	; 4
    1ecc:	90 f5       	brcc	.+100    	; 0x1f32 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	3c 83       	std	Y+4, r19	; 0x04
    1ed6:	2b 83       	std	Y+3, r18	; 0x03
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	91 05       	cpc	r25, r1
    1ee0:	d1 f0       	breq	.+52     	; 0x1f16 <LCD_setPortDirection+0x5e>
    1ee2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee6:	22 30       	cpi	r18, 0x02	; 2
    1ee8:	31 05       	cpc	r19, r1
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <LCD_setPortDirection+0x3e>
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <LCD_setPortDirection+0x54>
    1ef4:	1e c0       	rjmp	.+60     	; 0x1f32 <LCD_setPortDirection+0x7a>
    1ef6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef8:	3c 81       	ldd	r19, Y+4	; 0x04
    1efa:	22 30       	cpi	r18, 0x02	; 2
    1efc:	31 05       	cpc	r19, r1
    1efe:	81 f0       	breq	.+32     	; 0x1f20 <LCD_setPortDirection+0x68>
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	83 30       	cpi	r24, 0x03	; 3
    1f06:	91 05       	cpc	r25, r1
    1f08:	81 f0       	breq	.+32     	; 0x1f2a <LCD_setPortDirection+0x72>
    1f0a:	13 c0       	rjmp	.+38     	; 0x1f32 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f0c:	ea e3       	ldi	r30, 0x3A	; 58
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	80 83       	st	Z, r24
    1f14:	0e c0       	rjmp	.+28     	; 0x1f32 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f16:	e7 e3       	ldi	r30, 0x37	; 55
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	80 83       	st	Z, r24
    1f1e:	09 c0       	rjmp	.+18     	; 0x1f32 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f20:	e4 e3       	ldi	r30, 0x34	; 52
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	80 83       	st	Z, r24
    1f28:	04 c0       	rjmp	.+8      	; 0x1f32 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1f2a:	e1 e3       	ldi	r30, 0x31	; 49
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <LCD_setPortValue+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <LCD_setPortValue+0x8>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	84 30       	cpi	r24, 0x04	; 4
    1f54:	90 f5       	brcc	.+100    	; 0x1fba <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	3c 83       	std	Y+4, r19	; 0x04
    1f5e:	2b 83       	std	Y+3, r18	; 0x03
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	9c 81       	ldd	r25, Y+4	; 0x04
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	91 05       	cpc	r25, r1
    1f68:	d1 f0       	breq	.+52     	; 0x1f9e <LCD_setPortValue+0x5e>
    1f6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6e:	22 30       	cpi	r18, 0x02	; 2
    1f70:	31 05       	cpc	r19, r1
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <LCD_setPortValue+0x3e>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	61 f0       	breq	.+24     	; 0x1f94 <LCD_setPortValue+0x54>
    1f7c:	1e c0       	rjmp	.+60     	; 0x1fba <LCD_setPortValue+0x7a>
    1f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f80:	3c 81       	ldd	r19, Y+4	; 0x04
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	81 f0       	breq	.+32     	; 0x1fa8 <LCD_setPortValue+0x68>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	91 05       	cpc	r25, r1
    1f90:	81 f0       	breq	.+32     	; 0x1fb2 <LCD_setPortValue+0x72>
    1f92:	13 c0       	rjmp	.+38     	; 0x1fba <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f94:	eb e3       	ldi	r30, 0x3B	; 59
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	80 83       	st	Z, r24
    1f9c:	0e c0       	rjmp	.+28     	; 0x1fba <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f9e:	e8 e3       	ldi	r30, 0x38	; 56
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	80 83       	st	Z, r24
    1fa6:	09 c0       	rjmp	.+18     	; 0x1fba <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1fa8:	e5 e3       	ldi	r30, 0x35	; 53
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	80 83       	st	Z, r24
    1fb0:	04 c0       	rjmp	.+8      	; 0x1fba <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1fb2:	e2 e3       	ldi	r30, 0x32	; 50
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <LCD_getPortValue+0x6>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <LCD_getPortValue+0x8>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1fd6:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	84 30       	cpi	r24, 0x04	; 4
    1fdc:	90 f5       	brcc	.+100    	; 0x2042 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	3c 83       	std	Y+4, r19	; 0x04
    1fe6:	2b 83       	std	Y+3, r18	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	91 05       	cpc	r25, r1
    1ff0:	d1 f0       	breq	.+52     	; 0x2026 <LCD_getPortValue+0x5e>
    1ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <LCD_getPortValue+0x3e>
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	61 f0       	breq	.+24     	; 0x201c <LCD_getPortValue+0x54>
    2004:	1e c0       	rjmp	.+60     	; 0x2042 <LCD_getPortValue+0x7a>
    2006:	2b 81       	ldd	r18, Y+3	; 0x03
    2008:	3c 81       	ldd	r19, Y+4	; 0x04
    200a:	22 30       	cpi	r18, 0x02	; 2
    200c:	31 05       	cpc	r19, r1
    200e:	81 f0       	breq	.+32     	; 0x2030 <LCD_getPortValue+0x68>
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	83 30       	cpi	r24, 0x03	; 3
    2016:	91 05       	cpc	r25, r1
    2018:	81 f0       	breq	.+32     	; 0x203a <LCD_getPortValue+0x72>
    201a:	13 c0       	rjmp	.+38     	; 0x2042 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    201c:	e9 e3       	ldi	r30, 0x39	; 57
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	0e c0       	rjmp	.+28     	; 0x2042 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2026:	e6 e3       	ldi	r30, 0x36	; 54
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	09 c0       	rjmp	.+18     	; 0x2042 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2030:	e3 e3       	ldi	r30, 0x33	; 51
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	04 c0       	rjmp	.+8      	; 0x2042 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    203a:	e0 e3       	ldi	r30, 0x30	; 48
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2042:	89 81       	ldd	r24, Y+1	; 0x01
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	08 95       	ret

00002052 <LCD_sendCommand>:
#include "lcd.h"

#include "BIT_MATH.h"
#include "Dio_Interface.h"

void LCD_sendCommand(u8 command){
    2052:	df 93       	push	r29
    2054:	cf 93       	push	r28
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	e9 97       	sbiw	r28, 0x39	; 57
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2068:	83 e0       	ldi	r24, 0x03	; 3
    206a:	64 e0       	ldi	r22, 0x04	; 4
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_setPinValue>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e8       	ldi	r26, 0x80	; 128
    2078:	bf e3       	ldi	r27, 0x3F	; 63
    207a:	8d ab       	std	Y+53, r24	; 0x35
    207c:	9e ab       	std	Y+54, r25	; 0x36
    207e:	af ab       	std	Y+55, r26	; 0x37
    2080:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2082:	6d a9       	ldd	r22, Y+53	; 0x35
    2084:	7e a9       	ldd	r23, Y+54	; 0x36
    2086:	8f a9       	ldd	r24, Y+55	; 0x37
    2088:	98 ad       	ldd	r25, Y+56	; 0x38
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a e7       	ldi	r20, 0x7A	; 122
    2090:	55 e4       	ldi	r21, 0x45	; 69
    2092:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	89 ab       	std	Y+49, r24	; 0x31
    209c:	9a ab       	std	Y+50, r25	; 0x32
    209e:	ab ab       	std	Y+51, r26	; 0x33
    20a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20a2:	69 a9       	ldd	r22, Y+49	; 0x31
    20a4:	7a a9       	ldd	r23, Y+50	; 0x32
    20a6:	8b a9       	ldd	r24, Y+51	; 0x33
    20a8:	9c a9       	ldd	r25, Y+52	; 0x34
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <LCD_sendCommand+0x72>
		__ticks = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	98 ab       	std	Y+48, r25	; 0x30
    20c0:	8f a7       	std	Y+47, r24	; 0x2f
    20c2:	3f c0       	rjmp	.+126    	; 0x2142 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    20c4:	69 a9       	ldd	r22, Y+49	; 0x31
    20c6:	7a a9       	ldd	r23, Y+50	; 0x32
    20c8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ca:	9c a9       	ldd	r25, Y+52	; 0x34
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	3f ef       	ldi	r19, 0xFF	; 255
    20d0:	4f e7       	ldi	r20, 0x7F	; 127
    20d2:	57 e4       	ldi	r21, 0x47	; 71
    20d4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20d8:	18 16       	cp	r1, r24
    20da:	4c f5       	brge	.+82     	; 0x212e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20dc:	6d a9       	ldd	r22, Y+53	; 0x35
    20de:	7e a9       	ldd	r23, Y+54	; 0x36
    20e0:	8f a9       	ldd	r24, Y+55	; 0x37
    20e2:	98 ad       	ldd	r25, Y+56	; 0x38
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	98 ab       	std	Y+48, r25	; 0x30
    2102:	8f a7       	std	Y+47, r24	; 0x2f
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <LCD_sendCommand+0xd2>
    2106:	80 e9       	ldi	r24, 0x90	; 144
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	9e a7       	std	Y+46, r25	; 0x2e
    210c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    210e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2110:	9e a5       	ldd	r25, Y+46	; 0x2e
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_sendCommand+0xc0>
    2116:	9e a7       	std	Y+46, r25	; 0x2e
    2118:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	8f a5       	ldd	r24, Y+47	; 0x2f
    211c:	98 a9       	ldd	r25, Y+48	; 0x30
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	98 ab       	std	Y+48, r25	; 0x30
    2122:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	8f a5       	ldd	r24, Y+47	; 0x2f
    2126:	98 a9       	ldd	r25, Y+48	; 0x30
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	69 f7       	brne	.-38     	; 0x2106 <LCD_sendCommand+0xb4>
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	69 a9       	ldd	r22, Y+49	; 0x31
    2130:	7a a9       	ldd	r23, Y+50	; 0x32
    2132:	8b a9       	ldd	r24, Y+51	; 0x33
    2134:	9c a9       	ldd	r25, Y+52	; 0x34
    2136:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	98 ab       	std	Y+48, r25	; 0x30
    2140:	8f a7       	std	Y+47, r24	; 0x2f
    2142:	8f a5       	ldd	r24, Y+47	; 0x2f
    2144:	98 a9       	ldd	r25, Y+48	; 0x30
    2146:	9c a7       	std	Y+44, r25	; 0x2c
    2148:	8b a7       	std	Y+43, r24	; 0x2b
    214a:	8b a5       	ldd	r24, Y+43	; 0x2b
    214c:	9c a5       	ldd	r25, Y+44	; 0x2c
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_sendCommand+0xfc>
    2152:	9c a7       	std	Y+44, r25	; 0x2c
    2154:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2156:	83 e0       	ldi	r24, 0x03	; 3
    2158:	65 e0       	ldi	r22, 0x05	; 5
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_setPinValue>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e8       	ldi	r26, 0x80	; 128
    2166:	bf e3       	ldi	r27, 0x3F	; 63
    2168:	8f a3       	std	Y+39, r24	; 0x27
    216a:	98 a7       	std	Y+40, r25	; 0x28
    216c:	a9 a7       	std	Y+41, r26	; 0x29
    216e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	6f a1       	ldd	r22, Y+39	; 0x27
    2172:	78 a5       	ldd	r23, Y+40	; 0x28
    2174:	89 a5       	ldd	r24, Y+41	; 0x29
    2176:	9a a5       	ldd	r25, Y+42	; 0x2a
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a e7       	ldi	r20, 0x7A	; 122
    217e:	55 e4       	ldi	r21, 0x45	; 69
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	8b a3       	std	Y+35, r24	; 0x23
    218a:	9c a3       	std	Y+36, r25	; 0x24
    218c:	ad a3       	std	Y+37, r26	; 0x25
    218e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2190:	6b a1       	ldd	r22, Y+35	; 0x23
    2192:	7c a1       	ldd	r23, Y+36	; 0x24
    2194:	8d a1       	ldd	r24, Y+37	; 0x25
    2196:	9e a1       	ldd	r25, Y+38	; 0x26
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <LCD_sendCommand+0x160>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9a a3       	std	Y+34, r25	; 0x22
    21ae:	89 a3       	std	Y+33, r24	; 0x21
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    21b2:	6b a1       	ldd	r22, Y+35	; 0x23
    21b4:	7c a1       	ldd	r23, Y+36	; 0x24
    21b6:	8d a1       	ldd	r24, Y+37	; 0x25
    21b8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	3f ef       	ldi	r19, 0xFF	; 255
    21be:	4f e7       	ldi	r20, 0x7F	; 127
    21c0:	57 e4       	ldi	r21, 0x47	; 71
    21c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c6:	18 16       	cp	r1, r24
    21c8:	4c f5       	brge	.+82     	; 0x221c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	6f a1       	ldd	r22, Y+39	; 0x27
    21cc:	78 a5       	ldd	r23, Y+40	; 0x28
    21ce:	89 a5       	ldd	r24, Y+41	; 0x29
    21d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e2       	ldi	r20, 0x20	; 32
    21d8:	51 e4       	ldi	r21, 0x41	; 65
    21da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9a a3       	std	Y+34, r25	; 0x22
    21f0:	89 a3       	std	Y+33, r24	; 0x21
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <LCD_sendCommand+0x1c0>
    21f4:	80 e9       	ldi	r24, 0x90	; 144
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	98 a3       	std	Y+32, r25	; 0x20
    21fa:	8f 8f       	std	Y+31, r24	; 0x1f
    21fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_sendCommand+0x1ae>
    2204:	98 a3       	std	Y+32, r25	; 0x20
    2206:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	89 a1       	ldd	r24, Y+33	; 0x21
    220a:	9a a1       	ldd	r25, Y+34	; 0x22
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	9a a3       	std	Y+34, r25	; 0x22
    2210:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	89 a1       	ldd	r24, Y+33	; 0x21
    2214:	9a a1       	ldd	r25, Y+34	; 0x22
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	69 f7       	brne	.-38     	; 0x21f4 <LCD_sendCommand+0x1a2>
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	6b a1       	ldd	r22, Y+35	; 0x23
    221e:	7c a1       	ldd	r23, Y+36	; 0x24
    2220:	8d a1       	ldd	r24, Y+37	; 0x25
    2222:	9e a1       	ldd	r25, Y+38	; 0x26
    2224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9a a3       	std	Y+34, r25	; 0x22
    222e:	89 a3       	std	Y+33, r24	; 0x21
    2230:	89 a1       	ldd	r24, Y+33	; 0x21
    2232:	9a a1       	ldd	r25, Y+34	; 0x22
    2234:	9e 8f       	std	Y+30, r25	; 0x1e
    2236:	8d 8f       	std	Y+29, r24	; 0x1d
    2238:	8d 8d       	ldd	r24, Y+29	; 0x1d
    223a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_sendCommand+0x1ea>
    2240:	9e 8f       	std	Y+30, r25	; 0x1e
    2242:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID,command);
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	69 ad       	ldd	r22, Y+57	; 0x39
    2248:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_setPortValue>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	a0 e8       	ldi	r26, 0x80	; 128
    2252:	bf e3       	ldi	r27, 0x3F	; 63
    2254:	89 8f       	std	Y+25, r24	; 0x19
    2256:	9a 8f       	std	Y+26, r25	; 0x1a
    2258:	ab 8f       	std	Y+27, r26	; 0x1b
    225a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225c:	69 8d       	ldd	r22, Y+25	; 0x19
    225e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2260:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2262:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a e7       	ldi	r20, 0x7A	; 122
    226a:	55 e4       	ldi	r21, 0x45	; 69
    226c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	8d 8b       	std	Y+21, r24	; 0x15
    2276:	9e 8b       	std	Y+22, r25	; 0x16
    2278:	af 8b       	std	Y+23, r26	; 0x17
    227a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    227c:	6d 89       	ldd	r22, Y+21	; 0x15
    227e:	7e 89       	ldd	r23, Y+22	; 0x16
    2280:	8f 89       	ldd	r24, Y+23	; 0x17
    2282:	98 8d       	ldd	r25, Y+24	; 0x18
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2290:	88 23       	and	r24, r24
    2292:	2c f4       	brge	.+10     	; 0x229e <LCD_sendCommand+0x24c>
		__ticks = 1;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9c 8b       	std	Y+20, r25	; 0x14
    229a:	8b 8b       	std	Y+19, r24	; 0x13
    229c:	3f c0       	rjmp	.+126    	; 0x231c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    229e:	6d 89       	ldd	r22, Y+21	; 0x15
    22a0:	7e 89       	ldd	r23, Y+22	; 0x16
    22a2:	8f 89       	ldd	r24, Y+23	; 0x17
    22a4:	98 8d       	ldd	r25, Y+24	; 0x18
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	4c f5       	brge	.+82     	; 0x2308 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b6:	69 8d       	ldd	r22, Y+25	; 0x19
    22b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9c 8b       	std	Y+20, r25	; 0x14
    22dc:	8b 8b       	std	Y+19, r24	; 0x13
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <LCD_sendCommand+0x2ac>
    22e0:	80 e9       	ldi	r24, 0x90	; 144
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	9a 8b       	std	Y+18, r25	; 0x12
    22e6:	89 8b       	std	Y+17, r24	; 0x11
    22e8:	89 89       	ldd	r24, Y+17	; 0x11
    22ea:	9a 89       	ldd	r25, Y+18	; 0x12
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_sendCommand+0x29a>
    22f0:	9a 8b       	std	Y+18, r25	; 0x12
    22f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f4:	8b 89       	ldd	r24, Y+19	; 0x13
    22f6:	9c 89       	ldd	r25, Y+20	; 0x14
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	9c 8b       	std	Y+20, r25	; 0x14
    22fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2300:	9c 89       	ldd	r25, Y+20	; 0x14
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	69 f7       	brne	.-38     	; 0x22e0 <LCD_sendCommand+0x28e>
    2306:	14 c0       	rjmp	.+40     	; 0x2330 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2308:	6d 89       	ldd	r22, Y+21	; 0x15
    230a:	7e 89       	ldd	r23, Y+22	; 0x16
    230c:	8f 89       	ldd	r24, Y+23	; 0x17
    230e:	98 8d       	ldd	r25, Y+24	; 0x18
    2310:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9c 8b       	std	Y+20, r25	; 0x14
    231a:	8b 8b       	std	Y+19, r24	; 0x13
    231c:	8b 89       	ldd	r24, Y+19	; 0x13
    231e:	9c 89       	ldd	r25, Y+20	; 0x14
    2320:	98 8b       	std	Y+16, r25	; 0x10
    2322:	8f 87       	std	Y+15, r24	; 0x0f
    2324:	8f 85       	ldd	r24, Y+15	; 0x0f
    2326:	98 89       	ldd	r25, Y+16	; 0x10
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_sendCommand+0x2d6>
    232c:	98 8b       	std	Y+16, r25	; 0x10
    232e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	65 e0       	ldi	r22, 0x05	; 5
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_setPinValue>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e8       	ldi	r26, 0x80	; 128
    2340:	bf e3       	ldi	r27, 0x3F	; 63
    2342:	8b 87       	std	Y+11, r24	; 0x0b
    2344:	9c 87       	std	Y+12, r25	; 0x0c
    2346:	ad 87       	std	Y+13, r26	; 0x0d
    2348:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234a:	6b 85       	ldd	r22, Y+11	; 0x0b
    234c:	7c 85       	ldd	r23, Y+12	; 0x0c
    234e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2350:	9e 85       	ldd	r25, Y+14	; 0x0e
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	4a e7       	ldi	r20, 0x7A	; 122
    2358:	55 e4       	ldi	r21, 0x45	; 69
    235a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8f 83       	std	Y+7, r24	; 0x07
    2364:	98 87       	std	Y+8, r25	; 0x08
    2366:	a9 87       	std	Y+9, r26	; 0x09
    2368:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    237e:	88 23       	and	r24, r24
    2380:	2c f4       	brge	.+10     	; 0x238c <LCD_sendCommand+0x33a>
		__ticks = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	3f c0       	rjmp	.+126    	; 0x240a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    238c:	6f 81       	ldd	r22, Y+7	; 0x07
    238e:	78 85       	ldd	r23, Y+8	; 0x08
    2390:	89 85       	ldd	r24, Y+9	; 0x09
    2392:	9a 85       	ldd	r25, Y+10	; 0x0a
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	3f ef       	ldi	r19, 0xFF	; 255
    2398:	4f e7       	ldi	r20, 0x7F	; 127
    239a:	57 e4       	ldi	r21, 0x47	; 71
    239c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23a0:	18 16       	cp	r1, r24
    23a2:	4c f5       	brge	.+82     	; 0x23f6 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e2       	ldi	r20, 0x20	; 32
    23b2:	51 e4       	ldi	r21, 0x41	; 65
    23b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	bc 01       	movw	r22, r24
    23be:	cd 01       	movw	r24, r26
    23c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9e 83       	std	Y+6, r25	; 0x06
    23ca:	8d 83       	std	Y+5, r24	; 0x05
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <LCD_sendCommand+0x39a>
    23ce:	80 e9       	ldi	r24, 0x90	; 144
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	9c 83       	std	Y+4, r25	; 0x04
    23d4:	8b 83       	std	Y+3, r24	; 0x03
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_sendCommand+0x388>
    23de:	9c 83       	std	Y+4, r25	; 0x04
    23e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	69 f7       	brne	.-38     	; 0x23ce <LCD_sendCommand+0x37c>
    23f4:	14 c0       	rjmp	.+40     	; 0x241e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f6:	6f 81       	ldd	r22, Y+7	; 0x07
    23f8:	78 85       	ldd	r23, Y+8	; 0x08
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	9a 83       	std	Y+2, r25	; 0x02
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	9a 81       	ldd	r25, Y+2	; 0x02
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <LCD_sendCommand+0x3c4>
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    241e:	e9 96       	adiw	r28, 0x39	; 57
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data){
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	e9 97       	sbiw	r28, 0x39	; 57
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2446:	83 e0       	ldi	r24, 0x03	; 3
    2448:	64 e0       	ldi	r22, 0x04	; 4
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_setPinValue>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a0 e8       	ldi	r26, 0x80	; 128
    2456:	bf e3       	ldi	r27, 0x3F	; 63
    2458:	8d ab       	std	Y+53, r24	; 0x35
    245a:	9e ab       	std	Y+54, r25	; 0x36
    245c:	af ab       	std	Y+55, r26	; 0x37
    245e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	6d a9       	ldd	r22, Y+53	; 0x35
    2462:	7e a9       	ldd	r23, Y+54	; 0x36
    2464:	8f a9       	ldd	r24, Y+55	; 0x37
    2466:	98 ad       	ldd	r25, Y+56	; 0x38
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4a e7       	ldi	r20, 0x7A	; 122
    246e:	55 e4       	ldi	r21, 0x45	; 69
    2470:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	89 ab       	std	Y+49, r24	; 0x31
    247a:	9a ab       	std	Y+50, r25	; 0x32
    247c:	ab ab       	std	Y+51, r26	; 0x33
    247e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2480:	69 a9       	ldd	r22, Y+49	; 0x31
    2482:	7a a9       	ldd	r23, Y+50	; 0x32
    2484:	8b a9       	ldd	r24, Y+51	; 0x33
    2486:	9c a9       	ldd	r25, Y+52	; 0x34
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	98 ab       	std	Y+48, r25	; 0x30
    249e:	8f a7       	std	Y+47, r24	; 0x2f
    24a0:	3f c0       	rjmp	.+126    	; 0x2520 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    24a2:	69 a9       	ldd	r22, Y+49	; 0x31
    24a4:	7a a9       	ldd	r23, Y+50	; 0x32
    24a6:	8b a9       	ldd	r24, Y+51	; 0x33
    24a8:	9c a9       	ldd	r25, Y+52	; 0x34
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	3f ef       	ldi	r19, 0xFF	; 255
    24ae:	4f e7       	ldi	r20, 0x7F	; 127
    24b0:	57 e4       	ldi	r21, 0x47	; 71
    24b2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24b6:	18 16       	cp	r1, r24
    24b8:	4c f5       	brge	.+82     	; 0x250c <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	6d a9       	ldd	r22, Y+53	; 0x35
    24bc:	7e a9       	ldd	r23, Y+54	; 0x36
    24be:	8f a9       	ldd	r24, Y+55	; 0x37
    24c0:	98 ad       	ldd	r25, Y+56	; 0x38
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e2       	ldi	r20, 0x20	; 32
    24c8:	51 e4       	ldi	r21, 0x41	; 65
    24ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	98 ab       	std	Y+48, r25	; 0x30
    24e0:	8f a7       	std	Y+47, r24	; 0x2f
    24e2:	0f c0       	rjmp	.+30     	; 0x2502 <LCD_displayCharacter+0xd2>
    24e4:	80 e9       	ldi	r24, 0x90	; 144
    24e6:	91 e0       	ldi	r25, 0x01	; 1
    24e8:	9e a7       	std	Y+46, r25	; 0x2e
    24ea:	8d a7       	std	Y+45, r24	; 0x2d
    24ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    24ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_displayCharacter+0xc0>
    24f4:	9e a7       	std	Y+46, r25	; 0x2e
    24f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24fa:	98 a9       	ldd	r25, Y+48	; 0x30
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	98 ab       	std	Y+48, r25	; 0x30
    2500:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	8f a5       	ldd	r24, Y+47	; 0x2f
    2504:	98 a9       	ldd	r25, Y+48	; 0x30
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	69 f7       	brne	.-38     	; 0x24e4 <LCD_displayCharacter+0xb4>
    250a:	14 c0       	rjmp	.+40     	; 0x2534 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250c:	69 a9       	ldd	r22, Y+49	; 0x31
    250e:	7a a9       	ldd	r23, Y+50	; 0x32
    2510:	8b a9       	ldd	r24, Y+51	; 0x33
    2512:	9c a9       	ldd	r25, Y+52	; 0x34
    2514:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	98 ab       	std	Y+48, r25	; 0x30
    251e:	8f a7       	std	Y+47, r24	; 0x2f
    2520:	8f a5       	ldd	r24, Y+47	; 0x2f
    2522:	98 a9       	ldd	r25, Y+48	; 0x30
    2524:	9c a7       	std	Y+44, r25	; 0x2c
    2526:	8b a7       	std	Y+43, r24	; 0x2b
    2528:	8b a5       	ldd	r24, Y+43	; 0x2b
    252a:	9c a5       	ldd	r25, Y+44	; 0x2c
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_displayCharacter+0xfc>
    2530:	9c a7       	std	Y+44, r25	; 0x2c
    2532:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2534:	83 e0       	ldi	r24, 0x03	; 3
    2536:	65 e0       	ldi	r22, 0x05	; 5
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_setPinValue>
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a0 e8       	ldi	r26, 0x80	; 128
    2544:	bf e3       	ldi	r27, 0x3F	; 63
    2546:	8f a3       	std	Y+39, r24	; 0x27
    2548:	98 a7       	std	Y+40, r25	; 0x28
    254a:	a9 a7       	std	Y+41, r26	; 0x29
    254c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254e:	6f a1       	ldd	r22, Y+39	; 0x27
    2550:	78 a5       	ldd	r23, Y+40	; 0x28
    2552:	89 a5       	ldd	r24, Y+41	; 0x29
    2554:	9a a5       	ldd	r25, Y+42	; 0x2a
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	4a e7       	ldi	r20, 0x7A	; 122
    255c:	55 e4       	ldi	r21, 0x45	; 69
    255e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	8b a3       	std	Y+35, r24	; 0x23
    2568:	9c a3       	std	Y+36, r25	; 0x24
    256a:	ad a3       	std	Y+37, r26	; 0x25
    256c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    256e:	6b a1       	ldd	r22, Y+35	; 0x23
    2570:	7c a1       	ldd	r23, Y+36	; 0x24
    2572:	8d a1       	ldd	r24, Y+37	; 0x25
    2574:	9e a1       	ldd	r25, Y+38	; 0x26
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2582:	88 23       	and	r24, r24
    2584:	2c f4       	brge	.+10     	; 0x2590 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9a a3       	std	Y+34, r25	; 0x22
    258c:	89 a3       	std	Y+33, r24	; 0x21
    258e:	3f c0       	rjmp	.+126    	; 0x260e <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2590:	6b a1       	ldd	r22, Y+35	; 0x23
    2592:	7c a1       	ldd	r23, Y+36	; 0x24
    2594:	8d a1       	ldd	r24, Y+37	; 0x25
    2596:	9e a1       	ldd	r25, Y+38	; 0x26
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	3f ef       	ldi	r19, 0xFF	; 255
    259c:	4f e7       	ldi	r20, 0x7F	; 127
    259e:	57 e4       	ldi	r21, 0x47	; 71
    25a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25a4:	18 16       	cp	r1, r24
    25a6:	4c f5       	brge	.+82     	; 0x25fa <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a8:	6f a1       	ldd	r22, Y+39	; 0x27
    25aa:	78 a5       	ldd	r23, Y+40	; 0x28
    25ac:	89 a5       	ldd	r24, Y+41	; 0x29
    25ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e2       	ldi	r20, 0x20	; 32
    25b6:	51 e4       	ldi	r21, 0x41	; 65
    25b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9a a3       	std	Y+34, r25	; 0x22
    25ce:	89 a3       	std	Y+33, r24	; 0x21
    25d0:	0f c0       	rjmp	.+30     	; 0x25f0 <LCD_displayCharacter+0x1c0>
    25d2:	80 e9       	ldi	r24, 0x90	; 144
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	98 a3       	std	Y+32, r25	; 0x20
    25d8:	8f 8f       	std	Y+31, r24	; 0x1f
    25da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25dc:	98 a1       	ldd	r25, Y+32	; 0x20
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <LCD_displayCharacter+0x1ae>
    25e2:	98 a3       	std	Y+32, r25	; 0x20
    25e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e6:	89 a1       	ldd	r24, Y+33	; 0x21
    25e8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	9a a3       	std	Y+34, r25	; 0x22
    25ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f0:	89 a1       	ldd	r24, Y+33	; 0x21
    25f2:	9a a1       	ldd	r25, Y+34	; 0x22
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	69 f7       	brne	.-38     	; 0x25d2 <LCD_displayCharacter+0x1a2>
    25f8:	14 c0       	rjmp	.+40     	; 0x2622 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fa:	6b a1       	ldd	r22, Y+35	; 0x23
    25fc:	7c a1       	ldd	r23, Y+36	; 0x24
    25fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2600:	9e a1       	ldd	r25, Y+38	; 0x26
    2602:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	9a a3       	std	Y+34, r25	; 0x22
    260c:	89 a3       	std	Y+33, r24	; 0x21
    260e:	89 a1       	ldd	r24, Y+33	; 0x21
    2610:	9a a1       	ldd	r25, Y+34	; 0x22
    2612:	9e 8f       	std	Y+30, r25	; 0x1e
    2614:	8d 8f       	std	Y+29, r24	; 0x1d
    2616:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2618:	9e 8d       	ldd	r25, Y+30	; 0x1e
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <LCD_displayCharacter+0x1ea>
    261e:	9e 8f       	std	Y+30, r25	; 0x1e
    2620:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID,data);
    2622:	82 e0       	ldi	r24, 0x02	; 2
    2624:	69 ad       	ldd	r22, Y+57	; 0x39
    2626:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_setPortValue>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	a0 e8       	ldi	r26, 0x80	; 128
    2630:	bf e3       	ldi	r27, 0x3F	; 63
    2632:	89 8f       	std	Y+25, r24	; 0x19
    2634:	9a 8f       	std	Y+26, r25	; 0x1a
    2636:	ab 8f       	std	Y+27, r26	; 0x1b
    2638:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263a:	69 8d       	ldd	r22, Y+25	; 0x19
    263c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2640:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a e7       	ldi	r20, 0x7A	; 122
    2648:	55 e4       	ldi	r21, 0x45	; 69
    264a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	8d 8b       	std	Y+21, r24	; 0x15
    2654:	9e 8b       	std	Y+22, r25	; 0x16
    2656:	af 8b       	std	Y+23, r26	; 0x17
    2658:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    265a:	6d 89       	ldd	r22, Y+21	; 0x15
    265c:	7e 89       	ldd	r23, Y+22	; 0x16
    265e:	8f 89       	ldd	r24, Y+23	; 0x17
    2660:	98 8d       	ldd	r25, Y+24	; 0x18
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	2c f4       	brge	.+10     	; 0x267c <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
    267a:	3f c0       	rjmp	.+126    	; 0x26fa <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    267c:	6d 89       	ldd	r22, Y+21	; 0x15
    267e:	7e 89       	ldd	r23, Y+22	; 0x16
    2680:	8f 89       	ldd	r24, Y+23	; 0x17
    2682:	98 8d       	ldd	r25, Y+24	; 0x18
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	3f ef       	ldi	r19, 0xFF	; 255
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	57 e4       	ldi	r21, 0x47	; 71
    268c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	4c f5       	brge	.+82     	; 0x26e6 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	69 8d       	ldd	r22, Y+25	; 0x19
    2696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <LCD_displayCharacter+0x2ac>
    26be:	80 e9       	ldi	r24, 0x90	; 144
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	9a 8b       	std	Y+18, r25	; 0x12
    26c4:	89 8b       	std	Y+17, r24	; 0x11
    26c6:	89 89       	ldd	r24, Y+17	; 0x11
    26c8:	9a 89       	ldd	r25, Y+18	; 0x12
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_displayCharacter+0x29a>
    26ce:	9a 8b       	std	Y+18, r25	; 0x12
    26d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d2:	8b 89       	ldd	r24, Y+19	; 0x13
    26d4:	9c 89       	ldd	r25, Y+20	; 0x14
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26dc:	8b 89       	ldd	r24, Y+19	; 0x13
    26de:	9c 89       	ldd	r25, Y+20	; 0x14
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	69 f7       	brne	.-38     	; 0x26be <LCD_displayCharacter+0x28e>
    26e4:	14 c0       	rjmp	.+40     	; 0x270e <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e6:	6d 89       	ldd	r22, Y+21	; 0x15
    26e8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ea:	8f 89       	ldd	r24, Y+23	; 0x17
    26ec:	98 8d       	ldd	r25, Y+24	; 0x18
    26ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9c 8b       	std	Y+20, r25	; 0x14
    26f8:	8b 8b       	std	Y+19, r24	; 0x13
    26fa:	8b 89       	ldd	r24, Y+19	; 0x13
    26fc:	9c 89       	ldd	r25, Y+20	; 0x14
    26fe:	98 8b       	std	Y+16, r25	; 0x10
    2700:	8f 87       	std	Y+15, r24	; 0x0f
    2702:	8f 85       	ldd	r24, Y+15	; 0x0f
    2704:	98 89       	ldd	r25, Y+16	; 0x10
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <LCD_displayCharacter+0x2d6>
    270a:	98 8b       	std	Y+16, r25	; 0x10
    270c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    270e:	83 e0       	ldi	r24, 0x03	; 3
    2710:	65 e0       	ldi	r22, 0x05	; 5
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_setPinValue>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a0 e8       	ldi	r26, 0x80	; 128
    271e:	bf e3       	ldi	r27, 0x3F	; 63
    2720:	8b 87       	std	Y+11, r24	; 0x0b
    2722:	9c 87       	std	Y+12, r25	; 0x0c
    2724:	ad 87       	std	Y+13, r26	; 0x0d
    2726:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	6b 85       	ldd	r22, Y+11	; 0x0b
    272a:	7c 85       	ldd	r23, Y+12	; 0x0c
    272c:	8d 85       	ldd	r24, Y+13	; 0x0d
    272e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a e7       	ldi	r20, 0x7A	; 122
    2736:	55 e4       	ldi	r21, 0x45	; 69
    2738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	8f 83       	std	Y+7, r24	; 0x07
    2742:	98 87       	std	Y+8, r25	; 0x08
    2744:	a9 87       	std	Y+9, r26	; 0x09
    2746:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2748:	6f 81       	ldd	r22, Y+7	; 0x07
    274a:	78 85       	ldd	r23, Y+8	; 0x08
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	2c f4       	brge	.+10     	; 0x276a <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9e 83       	std	Y+6, r25	; 0x06
    2766:	8d 83       	std	Y+5, r24	; 0x05
    2768:	3f c0       	rjmp	.+126    	; 0x27e8 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    276a:	6f 81       	ldd	r22, Y+7	; 0x07
    276c:	78 85       	ldd	r23, Y+8	; 0x08
    276e:	89 85       	ldd	r24, Y+9	; 0x09
    2770:	9a 85       	ldd	r25, Y+10	; 0x0a
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	4c f5       	brge	.+82     	; 0x27d4 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	6b 85       	ldd	r22, Y+11	; 0x0b
    2784:	7c 85       	ldd	r23, Y+12	; 0x0c
    2786:	8d 85       	ldd	r24, Y+13	; 0x0d
    2788:	9e 85       	ldd	r25, Y+14	; 0x0e
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e2       	ldi	r20, 0x20	; 32
    2790:	51 e4       	ldi	r21, 0x41	; 65
    2792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <LCD_displayCharacter+0x39a>
    27ac:	80 e9       	ldi	r24, 0x90	; 144
    27ae:	91 e0       	ldi	r25, 0x01	; 1
    27b0:	9c 83       	std	Y+4, r25	; 0x04
    27b2:	8b 83       	std	Y+3, r24	; 0x03
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_displayCharacter+0x388>
    27bc:	9c 83       	std	Y+4, r25	; 0x04
    27be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
    27c2:	9e 81       	ldd	r25, Y+6	; 0x06
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	9e 83       	std	Y+6, r25	; 0x06
    27c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	8d 81       	ldd	r24, Y+5	; 0x05
    27cc:	9e 81       	ldd	r25, Y+6	; 0x06
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	69 f7       	brne	.-38     	; 0x27ac <LCD_displayCharacter+0x37c>
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	6f 81       	ldd	r22, Y+7	; 0x07
    27d6:	78 85       	ldd	r23, Y+8	; 0x08
    27d8:	89 85       	ldd	r24, Y+9	; 0x09
    27da:	9a 85       	ldd	r25, Y+10	; 0x0a
    27dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_displayCharacter+0x3c4>
    27f8:	9a 83       	std	Y+2, r25	; 0x02
    27fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    27fc:	e9 96       	adiw	r28, 0x39	; 57
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <LCD_init>:
void LCD_init(void){
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	2e 97       	sbiw	r28, 0x0e	; 14
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	64 e0       	ldi	r22, 0x04	; 4
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    282c:	83 e0       	ldi	r24, 0x03	; 3
    282e:	65 e0       	ldi	r22, 0x05	; 5
    2830:	41 e0       	ldi	r20, 0x01	; 1
    2832:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	6f ef       	ldi	r22, 0xFF	; 255
    283a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_setPortDirection>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	a0 ea       	ldi	r26, 0xA0	; 160
    2844:	b1 e4       	ldi	r27, 0x41	; 65
    2846:	8b 87       	std	Y+11, r24	; 0x0b
    2848:	9c 87       	std	Y+12, r25	; 0x0c
    284a:	ad 87       	std	Y+13, r26	; 0x0d
    284c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2850:	7c 85       	ldd	r23, Y+12	; 0x0c
    2852:	8d 85       	ldd	r24, Y+13	; 0x0d
    2854:	9e 85       	ldd	r25, Y+14	; 0x0e
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a e7       	ldi	r20, 0x7A	; 122
    285c:	55 e4       	ldi	r21, 0x45	; 69
    285e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	8f 83       	std	Y+7, r24	; 0x07
    2868:	98 87       	std	Y+8, r25	; 0x08
    286a:	a9 87       	std	Y+9, r26	; 0x09
    286c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	2c f4       	brge	.+10     	; 0x2890 <LCD_init+0x82>
		__ticks = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	3f c0       	rjmp	.+126    	; 0x290e <LCD_init+0x100>
	else if (__tmp > 65535)
    2890:	6f 81       	ldd	r22, Y+7	; 0x07
    2892:	78 85       	ldd	r23, Y+8	; 0x08
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	3f ef       	ldi	r19, 0xFF	; 255
    289c:	4f e7       	ldi	r20, 0x7F	; 127
    289e:	57 e4       	ldi	r21, 0x47	; 71
    28a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28a4:	18 16       	cp	r1, r24
    28a6:	4c f5       	brge	.+82     	; 0x28fa <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	bc 01       	movw	r22, r24
    28c2:	cd 01       	movw	r24, r26
    28c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <LCD_init+0xe2>
    28d2:	80 e9       	ldi	r24, 0x90	; 144
    28d4:	91 e0       	ldi	r25, 0x01	; 1
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	8b 83       	std	Y+3, r24	; 0x03
    28da:	8b 81       	ldd	r24, Y+3	; 0x03
    28dc:	9c 81       	ldd	r25, Y+4	; 0x04
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_init+0xd0>
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	9e 83       	std	Y+6, r25	; 0x06
    28ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	69 f7       	brne	.-38     	; 0x28d2 <LCD_init+0xc4>
    28f8:	14 c0       	rjmp	.+40     	; 0x2922 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fa:	6f 81       	ldd	r22, Y+7	; 0x07
    28fc:	78 85       	ldd	r23, Y+8	; 0x08
    28fe:	89 85       	ldd	r24, Y+9	; 0x09
    2900:	9a 85       	ldd	r25, Y+10	; 0x0a
    2902:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <LCD_init+0x10c>
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2922:	88 e3       	ldi	r24, 0x38	; 56
    2924:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    2928:	8c e0       	ldi	r24, 0x0C	; 12
    292a:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	0e 94 29 10 	call	0x2052	; 0x2052 <LCD_sendCommand>
}
    2934:	2e 96       	adiw	r28, 0x0e	; 14
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <main>:
#include "../HAL/LCD/lcd.h"
#include <util/delay.h>

int main(void)
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    294e:	0e 94 07 14 	call	0x280e	; 0x280e <LCD_init>
	LCD_displayCharacter('M');
    2952:	8d e4       	ldi	r24, 0x4D	; 77
    2954:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('a');
    2958:	81 e6       	ldi	r24, 0x61	; 97
    295a:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('h');
    295e:	88 e6       	ldi	r24, 0x68	; 104
    2960:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('m');
    2964:	8d e6       	ldi	r24, 0x6D	; 109
    2966:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('o');
    296a:	8f e6       	ldi	r24, 0x6F	; 111
    296c:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('u');
    2970:	85 e7       	ldi	r24, 0x75	; 117
    2972:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('d');
    2976:	84 e6       	ldi	r24, 0x64	; 100
    2978:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter(' ');
    297c:	80 e2       	ldi	r24, 0x20	; 32
    297e:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('N');
    2982:	8e e4       	ldi	r24, 0x4E	; 78
    2984:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('a');
    2988:	81 e6       	ldi	r24, 0x61	; 97
    298a:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('g');
    298e:	87 e6       	ldi	r24, 0x67	; 103
    2990:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('d');
    2994:	84 e6       	ldi	r24, 0x64	; 100
    2996:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
	LCD_displayCharacter('y');
    299a:	89 e7       	ldi	r24, 0x79	; 121
    299c:	0e 94 18 12 	call	0x2430	; 0x2430 <LCD_displayCharacter>
    29a0:	ff cf       	rjmp	.-2      	; 0x29a0 <main+0x5a>

000029a2 <__prologue_saves__>:
    29a2:	2f 92       	push	r2
    29a4:	3f 92       	push	r3
    29a6:	4f 92       	push	r4
    29a8:	5f 92       	push	r5
    29aa:	6f 92       	push	r6
    29ac:	7f 92       	push	r7
    29ae:	8f 92       	push	r8
    29b0:	9f 92       	push	r9
    29b2:	af 92       	push	r10
    29b4:	bf 92       	push	r11
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	ca 1b       	sub	r28, r26
    29cc:	db 0b       	sbc	r29, r27
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	09 94       	ijmp

000029da <__epilogue_restores__>:
    29da:	2a 88       	ldd	r2, Y+18	; 0x12
    29dc:	39 88       	ldd	r3, Y+17	; 0x11
    29de:	48 88       	ldd	r4, Y+16	; 0x10
    29e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    29e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    29e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ec:	b9 84       	ldd	r11, Y+9	; 0x09
    29ee:	c8 84       	ldd	r12, Y+8	; 0x08
    29f0:	df 80       	ldd	r13, Y+7	; 0x07
    29f2:	ee 80       	ldd	r14, Y+6	; 0x06
    29f4:	fd 80       	ldd	r15, Y+5	; 0x05
    29f6:	0c 81       	ldd	r16, Y+4	; 0x04
    29f8:	1b 81       	ldd	r17, Y+3	; 0x03
    29fa:	aa 81       	ldd	r26, Y+2	; 0x02
    29fc:	b9 81       	ldd	r27, Y+1	; 0x01
    29fe:	ce 0f       	add	r28, r30
    2a00:	d1 1d       	adc	r29, r1
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	ed 01       	movw	r28, r26
    2a0e:	08 95       	ret

00002a10 <_exit>:
    2a10:	f8 94       	cli

00002a12 <__stop_program>:
    2a12:	ff cf       	rjmp	.-2      	; 0x2a12 <__stop_program>
