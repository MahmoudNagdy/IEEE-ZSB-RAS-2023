
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000691c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  0000691c  000069b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080013e  0080013e  00006a8e  2**0
                  ALLOC
  3 .stab         00006918  00000000  00000000  00006a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027c6  00000000  00000000  0000d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fb6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fcae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000fe1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00011a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00012952  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00013700  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00013860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000142bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__vector_1>
       8:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__vector_2>
       c:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_10>
      2c:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f9 e6       	ldi	r31, 0x69	; 105
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 36       	cpi	r26, 0x60	; 96
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1a 23 	call	0x4634	; 0x4634 <main>
      8a:	0c 94 8c 34 	jmp	0x6918	; 0x6918 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 31 	jmp	0x6356	; 0x6356 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e1       	ldi	r26, 0x10	; 16
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 31 	jmp	0x636e	; 0x636e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 31 	jmp	0x63a6	; 0x63a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 31 	jmp	0x636e	; 0x636e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 31 	jmp	0x63a6	; 0x63a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 31 	jmp	0x6356	; 0x6356 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 31 	jmp	0x636e	; 0x636e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d3 31 	jmp	0x63a6	; 0x63a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b7 31 	jmp	0x636e	; 0x636e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d3 31 	jmp	0x63a6	; 0x63a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b7 31 	jmp	0x636e	; 0x636e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d3 31 	jmp	0x63a6	; 0x63a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bb 31 	jmp	0x6376	; 0x6376 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d7 31 	jmp	0x63ae	; 0x63ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     b5c:	a1 e4       	ldi	r26, 0x41	; 65
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e1 e4       	ldi	r30, 0x41	; 65
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     b6a:	a1 e4       	ldi	r26, 0x41	; 65
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e1 e4       	ldi	r30, 0x41	; 65
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     b78:	a1 e4       	ldi	r26, 0x41	; 65
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e1 e4       	ldi	r30, 0x41	; 65
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <WDT_voidDisable>:

void WDT_voidDisable(void){
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     b94:	a1 e4       	ldi	r26, 0x41	; 65
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e1 e4       	ldi	r30, 0x41	; 65
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 60       	ori	r24, 0x08	; 8
     ba0:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
     ba2:	a1 e4       	ldi	r26, 0x41	; 65
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e1 e4       	ldi	r30, 0x41	; 65
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 61       	ori	r24, 0x10	; 16
     bae:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     bb0:	e1 e4       	ldi	r30, 0x41	; 65
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	10 82       	st	Z, r1
}
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
     bc4:	a3 e5       	ldi	r26, 0x53	; 83
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e3 e5       	ldi	r30, 0x53	; 83
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 64       	ori	r24, 0x40	; 64
     bd0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
     bd2:	a3 e5       	ldi	r26, 0x53	; 83
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e3 e5       	ldi	r30, 0x53	; 83
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
     be0:	a3 e5       	ldi	r26, 0x53	; 83
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e3 e5       	ldi	r30, 0x53	; 83
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 62       	ori	r24, 0x20	; 32
     bec:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
     bee:	a3 e5       	ldi	r26, 0x53	; 83
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e3 e5       	ldi	r30, 0x53	; 83
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 61       	ori	r24, 0x10	; 16
     bfa:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
     bfc:	a3 e5       	ldi	r26, 0x53	; 83
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e3 e5       	ldi	r30, 0x53	; 83
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8e 7f       	andi	r24, 0xFE	; 254
     c08:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
     c0a:	a3 e5       	ldi	r26, 0x53	; 83
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e3 e5       	ldi	r30, 0x53	; 83
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
     c18:	a3 e5       	ldi	r26, 0x53	; 83
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e3 e5       	ldi	r30, 0x53	; 83
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8b 7f       	andi	r24, 0xFB	; 251
     c24:	8c 93       	st	X, r24
}
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
     c34:	af e4       	ldi	r26, 0x4F	; 79
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	ef e4       	ldi	r30, 0x4F	; 79
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
     c42:	af e4       	ldi	r26, 0x4F	; 79
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	ef e4       	ldi	r30, 0x4F	; 79
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
     c50:	ae e4       	ldi	r26, 0x4E	; 78
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ee e4       	ldi	r30, 0x4E	; 78
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	88 60       	ori	r24, 0x08	; 8
     c5c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
     c5e:	ae e4       	ldi	r26, 0x4E	; 78
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	ee e4       	ldi	r30, 0x4E	; 78
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	80 61       	ori	r24, 0x10	; 16
     c6a:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
     c6c:	af e4       	ldi	r26, 0x4F	; 79
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	ef e4       	ldi	r30, 0x4F	; 79
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	80 68       	ori	r24, 0x80	; 128
     c78:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
     c7a:	af e4       	ldi	r26, 0x4F	; 79
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	ef e4       	ldi	r30, 0x4F	; 79
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8f 7b       	andi	r24, 0xBF	; 191
     c86:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
     c88:	e6 e4       	ldi	r30, 0x46	; 70
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	8f e1       	ldi	r24, 0x1F	; 31
     c8e:	9e e4       	ldi	r25, 0x4E	; 78
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = Selected_Angle;
     c94:	ea e4       	ldi	r30, 0x4A	; 74
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	8f ec       	ldi	r24, 0xCF	; 207
     c9a:	97 e0       	ldi	r25, 0x07	; 7
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
     ca0:	ae e4       	ldi	r26, 0x4E	; 78
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	ee e4       	ldi	r30, 0x4E	; 78
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
     cae:	ae e4       	ldi	r26, 0x4E	; 78
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ee e4       	ldi	r30, 0x4E	; 78
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	82 60       	ori	r24, 0x02	; 2
     cba:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
     cbc:	ae e4       	ldi	r26, 0x4E	; 78
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ee e4       	ldi	r30, 0x4E	; 78
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8b 7f       	andi	r24, 0xFB	; 251
     cc8:	8c 93       	st	X, r24
}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <TIMERS_u8TIMER0SetCallBack+0x6>
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9b 83       	std	Y+3, r25	; 0x03
     cde:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	9b 81       	ldd	r25, Y+3	; 0x03
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	39 f0       	breq	.+14     	; 0xcfa <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	9b 81       	ldd	r25, Y+3	; 0x03
     cf0:	90 93 3f 01 	sts	0x013F, r25
     cf4:	80 93 3e 01 	sts	0x013E, r24
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     cfa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <TIMERS_u8TIMER0CTCSetCallBack+0x6>
     d10:	0f 92       	push	r0
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	9b 83       	std	Y+3, r25	; 0x03
     d18:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	39 f0       	breq	.+14     	; 0xd34 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	90 93 41 01 	sts	0x0141, r25
     d2e:	80 93 40 01 	sts	0x0140, r24
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     d34:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     d36:	89 81       	ldd	r24, Y+1	; 0x01
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	0f 92       	push	r0
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
     d50:	ec e5       	ldi	r30, 0x5C	; 92
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	80 83       	st	Z, r24
	
}
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <TIMERS_voidTIMER0SetPreload>:

void TIMERS_voidTIMER0SetPreload(u8 Copy_u8PreloadValue){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_TCNT0_REG = Copy_u8PreloadValue;
     d6c:	e2 e5       	ldi	r30, 0x52	; 82
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	80 83       	st	Z, r24
}
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
     d8a:	ea e4       	ldi	r30, 0x4A	; 74
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <TIMERS_voidTIMER1SetTimerValue>:

void TIMERS_voidTIMER1SetTimerValue(u16 Copy_u8OCR1Value){
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <TIMERS_voidTIMER1SetTimerValue+0x6>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u8OCR1Value;
     dae:	ec e4       	ldi	r30, 0x4C	; 76
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <TIMERS_u16TIMER1ReadTimerValue>:

u16 TIMERS_u16TIMER1ReadTimerValue(void){
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u16_TCNT1_REG;
     dcc:	ec e4       	ldi	r30, 0x4C	; 76
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	2f 93       	push	r18
     de6:	3f 93       	push	r19
     de8:	4f 93       	push	r20
     dea:	5f 93       	push	r21
     dec:	6f 93       	push	r22
     dee:	7f 93       	push	r23
     df0:	8f 93       	push	r24
     df2:	9f 93       	push	r25
     df4:	af 93       	push	r26
     df6:	bf 93       	push	r27
     df8:	ef 93       	push	r30
     dfa:	ff 93       	push	r31
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     e04:	80 91 42 01 	lds	r24, 0x0142
     e08:	90 91 43 01 	lds	r25, 0x0143
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	90 93 43 01 	sts	0x0143, r25
     e12:	80 93 42 01 	sts	0x0142, r24
	if(Local_u16CounterOVF == 3907){
     e16:	80 91 42 01 	lds	r24, 0x0142
     e1a:	90 91 43 01 	lds	r25, 0x0143
     e1e:	2f e0       	ldi	r18, 0x0F	; 15
     e20:	83 34       	cpi	r24, 0x43	; 67
     e22:	92 07       	cpc	r25, r18
     e24:	99 f4       	brne	.+38     	; 0xe4c <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
     e26:	e2 e5       	ldi	r30, 0x52	; 82
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 ec       	ldi	r24, 0xC0	; 192
     e2c:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
     e2e:	10 92 43 01 	sts	0x0143, r1
     e32:	10 92 42 01 	sts	0x0142, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
     e36:	80 91 3e 01 	lds	r24, 0x013E
     e3a:	90 91 3f 01 	lds	r25, 0x013F
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	29 f0       	breq	.+10     	; 0xe4c <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
     e42:	e0 91 3e 01 	lds	r30, 0x013E
     e46:	f0 91 3f 01 	lds	r31, 0x013F
     e4a:	09 95       	icall
		}
	}
}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
     e9c:	80 91 44 01 	lds	r24, 0x0144
     ea0:	90 91 45 01 	lds	r25, 0x0145
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	90 93 45 01 	sts	0x0145, r25
     eaa:	80 93 44 01 	sts	0x0144, r24
	if(Local_u16CounterCTC == 10000){
     eae:	80 91 44 01 	lds	r24, 0x0144
     eb2:	90 91 45 01 	lds	r25, 0x0145
     eb6:	27 e2       	ldi	r18, 0x27	; 39
     eb8:	80 31       	cpi	r24, 0x10	; 16
     eba:	92 07       	cpc	r25, r18
     ebc:	79 f4       	brne	.+30     	; 0xedc <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
     ebe:	10 92 45 01 	sts	0x0145, r1
     ec2:	10 92 44 01 	sts	0x0144, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
     ec6:	80 91 40 01 	lds	r24, 0x0140
     eca:	90 91 41 01 	lds	r25, 0x0141
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	29 f0       	breq	.+10     	; 0xedc <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
     ed2:	e0 91 40 01 	lds	r30, 0x0140
     ed6:	f0 91 41 01 	lds	r31, 0x0141
     eda:	09 95       	icall
		}
	}
}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	bf 91       	pop	r27
     ee6:	af 91       	pop	r26
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	7f 91       	pop	r23
     eee:	6f 91       	pop	r22
     ef0:	5f 91       	pop	r21
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <Switch_Init+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <Switch_Init+0x8>
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
     f16:	1a 82       	std	Y+2, r1	; 0x02
     f18:	19 82       	std	Y+1, r1	; 0x01
     f1a:	50 c0       	rjmp	.+160    	; 0xfbc <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
     f1c:	29 81       	ldd	r18, Y+1	; 0x01
     f1e:	3a 81       	ldd	r19, Y+2	; 0x02
     f20:	c9 01       	movw	r24, r18
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	28 0f       	add	r18, r24
     f28:	39 1f       	adc	r19, r25
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	fc 01       	movw	r30, r24
     f30:	e2 0f       	add	r30, r18
     f32:	f3 1f       	adc	r31, r19
     f34:	40 81       	ld	r20, Z
     f36:	29 81       	ldd	r18, Y+1	; 0x01
     f38:	3a 81       	ldd	r19, Y+2	; 0x02
     f3a:	c9 01       	movw	r24, r18
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	28 0f       	add	r18, r24
     f42:	39 1f       	adc	r19, r25
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	fc 01       	movw	r30, r24
     f4a:	e2 0f       	add	r30, r18
     f4c:	f3 1f       	adc	r31, r19
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	84 2f       	mov	r24, r20
     f52:	69 2f       	mov	r22, r25
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
     f5a:	29 81       	ldd	r18, Y+1	; 0x01
     f5c:	3a 81       	ldd	r19, Y+2	; 0x02
     f5e:	c9 01       	movw	r24, r18
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	28 0f       	add	r18, r24
     f66:	39 1f       	adc	r19, r25
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	fc 01       	movw	r30, r24
     f6e:	e2 0f       	add	r30, r18
     f70:	f3 1f       	adc	r31, r19
     f72:	50 81       	ld	r21, Z
     f74:	29 81       	ldd	r18, Y+1	; 0x01
     f76:	3a 81       	ldd	r19, Y+2	; 0x02
     f78:	c9 01       	movw	r24, r18
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	28 0f       	add	r18, r24
     f80:	39 1f       	adc	r19, r25
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	41 81       	ldd	r20, Z+1	; 0x01
     f8e:	29 81       	ldd	r18, Y+1	; 0x01
     f90:	3a 81       	ldd	r19, Y+2	; 0x02
     f92:	c9 01       	movw	r24, r18
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	28 0f       	add	r18, r24
     f9a:	39 1f       	adc	r19, r25
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	fc 01       	movw	r30, r24
     fa2:	e2 0f       	add	r30, r18
     fa4:	f3 1f       	adc	r31, r19
     fa6:	92 81       	ldd	r25, Z+2	; 0x02
     fa8:	85 2f       	mov	r24, r21
     faa:	64 2f       	mov	r22, r20
     fac:	49 2f       	mov	r20, r25
     fae:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	82 17       	cp	r24, r18
     fc8:	93 07       	cpc	r25, r19
     fca:	0c f4       	brge	.+2      	; 0xfce <Switch_Init+0xcc>
     fcc:	a7 cf       	rjmp	.-178    	; 0xf1c <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <Switch_GetValue+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <Switch_GetValue+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	7c 83       	std	Y+4, r23	; 0x04
     ff0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
     ff2:	e9 81       	ldd	r30, Y+1	; 0x01
     ff4:	fa 81       	ldd	r31, Y+2	; 0x02
     ff6:	80 81       	ld	r24, Z
     ff8:	e9 81       	ldd	r30, Y+1	; 0x01
     ffa:	fa 81       	ldd	r31, Y+2	; 0x02
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    1000:	3c 81       	ldd	r19, Y+4	; 0x04
    1002:	69 2f       	mov	r22, r25
    1004:	a9 01       	movw	r20, r18
    1006:	0e 94 4f 10 	call	0x209e	; 0x209e <DIO_u8GetPinValue>
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <LCD_setPinDirection+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <LCD_setPinDirection+0x8>
    1020:	0f 92       	push	r0
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	6a 83       	std	Y+2, r22	; 0x02
    102a:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	88 30       	cpi	r24, 0x08	; 8
    1030:	08 f0       	brcs	.+2      	; 0x1034 <LCD_setPinDirection+0x1c>
    1032:	d5 c0       	rjmp	.+426    	; 0x11de <LCD_setPinDirection+0x1c6>
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	84 30       	cpi	r24, 0x04	; 4
    1038:	08 f0       	brcs	.+2      	; 0x103c <LCD_setPinDirection+0x24>
    103a:	d1 c0       	rjmp	.+418    	; 0x11de <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3d 83       	std	Y+5, r19	; 0x05
    1044:	2c 83       	std	Y+4, r18	; 0x04
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <LCD_setPinDirection+0x3a>
    1050:	43 c0       	rjmp	.+134    	; 0x10d8 <LCD_setPinDirection+0xc0>
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	3d 81       	ldd	r19, Y+5	; 0x05
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <LCD_setPinDirection+0x4e>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	71 f0       	breq	.+28     	; 0x1080 <LCD_setPinDirection+0x68>
    1064:	bc c0       	rjmp	.+376    	; 0x11de <LCD_setPinDirection+0x1c6>
    1066:	2c 81       	ldd	r18, Y+4	; 0x04
    1068:	3d 81       	ldd	r19, Y+5	; 0x05
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <LCD_setPinDirection+0x5a>
    1070:	5f c0       	rjmp	.+190    	; 0x1130 <LCD_setPinDirection+0x118>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <LCD_setPinDirection+0x66>
    107c:	85 c0       	rjmp	.+266    	; 0x1188 <LCD_setPinDirection+0x170>
    107e:	af c0       	rjmp	.+350    	; 0x11de <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	a1 f4       	brne	.+40     	; 0x10ae <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1086:	aa e3       	ldi	r26, 0x3A	; 58
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	ea e3       	ldi	r30, 0x3A	; 58
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <LCD_setPinDirection+0x8c>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <LCD_setPinDirection+0x88>
    10a8:	84 2b       	or	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	98 c0       	rjmp	.+304    	; 0x11de <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    10ae:	aa e3       	ldi	r26, 0x3A	; 58
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ea e3       	ldi	r30, 0x3A	; 58
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <LCD_setPinDirection+0xb4>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <LCD_setPinDirection+0xb0>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	83 c0       	rjmp	.+262    	; 0x11de <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	a1 f4       	brne	.+40     	; 0x1106 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10de:	a7 e3       	ldi	r26, 0x37	; 55
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e7 e3       	ldi	r30, 0x37	; 55
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <LCD_setPinDirection+0xe4>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <LCD_setPinDirection+0xe0>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	6c c0       	rjmp	.+216    	; 0x11de <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    1106:	a7 e3       	ldi	r26, 0x37	; 55
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e7 e3       	ldi	r30, 0x37	; 55
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <LCD_setPinDirection+0x10c>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <LCD_setPinDirection+0x108>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	57 c0       	rjmp	.+174    	; 0x11de <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	a1 f4       	brne	.+40     	; 0x115e <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1136:	a4 e3       	ldi	r26, 0x34	; 52
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e4 e3       	ldi	r30, 0x34	; 52
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <LCD_setPinDirection+0x13c>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <LCD_setPinDirection+0x138>
    1158:	84 2b       	or	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	40 c0       	rjmp	.+128    	; 0x11de <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    115e:	a4 e3       	ldi	r26, 0x34	; 52
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e4 e3       	ldi	r30, 0x34	; 52
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <LCD_setPinDirection+0x164>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <LCD_setPinDirection+0x160>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	2b c0       	rjmp	.+86     	; 0x11de <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	a1 f4       	brne	.+40     	; 0x11b6 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    118e:	a1 e3       	ldi	r26, 0x31	; 49
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e1 e3       	ldi	r30, 0x31	; 49
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <LCD_setPinDirection+0x194>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <LCD_setPinDirection+0x190>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    11b6:	a1 e3       	ldi	r26, 0x31	; 49
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <LCD_setPinDirection+0x1bc>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <LCD_setPinDirection+0x1b8>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <LCD_setPinValue+0x6>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <LCD_setPinValue+0x8>
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	6a 83       	std	Y+2, r22	; 0x02
    1200:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	88 30       	cpi	r24, 0x08	; 8
    1206:	08 f0       	brcs	.+2      	; 0x120a <LCD_setPinValue+0x1c>
    1208:	d5 c0       	rjmp	.+426    	; 0x13b4 <LCD_setPinValue+0x1c6>
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	08 f0       	brcs	.+2      	; 0x1212 <LCD_setPinValue+0x24>
    1210:	d1 c0       	rjmp	.+418    	; 0x13b4 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3d 83       	std	Y+5, r19	; 0x05
    121a:	2c 83       	std	Y+4, r18	; 0x04
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	91 05       	cpc	r25, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <LCD_setPinValue+0x3a>
    1226:	43 c0       	rjmp	.+134    	; 0x12ae <LCD_setPinValue+0xc0>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	2c f4       	brge	.+10     	; 0x123c <LCD_setPinValue+0x4e>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	71 f0       	breq	.+28     	; 0x1256 <LCD_setPinValue+0x68>
    123a:	bc c0       	rjmp	.+376    	; 0x13b4 <LCD_setPinValue+0x1c6>
    123c:	2c 81       	ldd	r18, Y+4	; 0x04
    123e:	3d 81       	ldd	r19, Y+5	; 0x05
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <LCD_setPinValue+0x5a>
    1246:	5f c0       	rjmp	.+190    	; 0x1306 <LCD_setPinValue+0x118>
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <LCD_setPinValue+0x66>
    1252:	85 c0       	rjmp	.+266    	; 0x135e <LCD_setPinValue+0x170>
    1254:	af c0       	rjmp	.+350    	; 0x13b4 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	a1 f4       	brne	.+40     	; 0x1284 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    125c:	ab e3       	ldi	r26, 0x3B	; 59
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	eb e3       	ldi	r30, 0x3B	; 59
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <LCD_setPinValue+0x8c>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <LCD_setPinValue+0x88>
    127e:	84 2b       	or	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	98 c0       	rjmp	.+304    	; 0x13b4 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    1284:	ab e3       	ldi	r26, 0x3B	; 59
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	eb e3       	ldi	r30, 0x3B	; 59
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <LCD_setPinValue+0xb4>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <LCD_setPinValue+0xb0>
    12a6:	80 95       	com	r24
    12a8:	84 23       	and	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	83 c0       	rjmp	.+262    	; 0x13b4 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	a1 f4       	brne	.+40     	; 0x12dc <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12b4:	a8 e3       	ldi	r26, 0x38	; 56
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <LCD_setPinValue+0xe4>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <LCD_setPinValue+0xe0>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	6c c0       	rjmp	.+216    	; 0x13b4 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    12dc:	a8 e3       	ldi	r26, 0x38	; 56
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <LCD_setPinValue+0x10c>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <LCD_setPinValue+0x108>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	57 c0       	rjmp	.+174    	; 0x13b4 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	a1 f4       	brne	.+40     	; 0x1334 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    130c:	a5 e3       	ldi	r26, 0x35	; 53
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e3       	ldi	r30, 0x35	; 53
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <LCD_setPinValue+0x13c>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <LCD_setPinValue+0x138>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	40 c0       	rjmp	.+128    	; 0x13b4 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    1334:	a5 e3       	ldi	r26, 0x35	; 53
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e3       	ldi	r30, 0x35	; 53
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <LCD_setPinValue+0x164>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <LCD_setPinValue+0x160>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	2b c0       	rjmp	.+86     	; 0x13b4 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	a1 f4       	brne	.+40     	; 0x138c <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1364:	a2 e3       	ldi	r26, 0x32	; 50
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e2 e3       	ldi	r30, 0x32	; 50
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <LCD_setPinValue+0x194>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <LCD_setPinValue+0x190>
    1386:	84 2b       	or	r24, r20
    1388:	8c 93       	st	X, r24
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    138c:	a2 e3       	ldi	r26, 0x32	; 50
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e2 e3       	ldi	r30, 0x32	; 50
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <LCD_setPinValue+0x1bc>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <LCD_setPinValue+0x1b8>
    13ae:	80 95       	com	r24
    13b0:	84 23       	and	r24, r20
    13b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <LCD_getPinValue+0x6>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <LCD_getPinValue+0x8>
    13cc:	0f 92       	push	r0
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	8a 83       	std	Y+2, r24	; 0x02
    13d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    13d6:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	88 30       	cpi	r24, 0x08	; 8
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <LCD_getPinValue+0x1c>
    13de:	84 c0       	rjmp	.+264    	; 0x14e8 <LCD_getPinValue+0x124>
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <LCD_getPinValue+0x24>
    13e6:	80 c0       	rjmp	.+256    	; 0x14e8 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3d 83       	std	Y+5, r19	; 0x05
    13f0:	2c 83       	std	Y+4, r18	; 0x04
    13f2:	4c 81       	ldd	r20, Y+4	; 0x04
    13f4:	5d 81       	ldd	r21, Y+5	; 0x05
    13f6:	41 30       	cpi	r20, 0x01	; 1
    13f8:	51 05       	cpc	r21, r1
    13fa:	79 f1       	breq	.+94     	; 0x145a <LCD_getPinValue+0x96>
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	91 05       	cpc	r25, r1
    1404:	34 f4       	brge	.+12     	; 0x1412 <LCD_getPinValue+0x4e>
    1406:	2c 81       	ldd	r18, Y+4	; 0x04
    1408:	3d 81       	ldd	r19, Y+5	; 0x05
    140a:	21 15       	cp	r18, r1
    140c:	31 05       	cpc	r19, r1
    140e:	69 f0       	breq	.+26     	; 0x142a <LCD_getPinValue+0x66>
    1410:	6b c0       	rjmp	.+214    	; 0x14e8 <LCD_getPinValue+0x124>
    1412:	4c 81       	ldd	r20, Y+4	; 0x04
    1414:	5d 81       	ldd	r21, Y+5	; 0x05
    1416:	42 30       	cpi	r20, 0x02	; 2
    1418:	51 05       	cpc	r21, r1
    141a:	b9 f1       	breq	.+110    	; 0x148a <LCD_getPinValue+0xc6>
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	91 05       	cpc	r25, r1
    1424:	09 f4       	brne	.+2      	; 0x1428 <LCD_getPinValue+0x64>
    1426:	49 c0       	rjmp	.+146    	; 0x14ba <LCD_getPinValue+0xf6>
    1428:	5f c0       	rjmp	.+190    	; 0x14e8 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    142a:	e9 e3       	ldi	r30, 0x39	; 57
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <LCD_getPinValue+0x7e>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <LCD_getPinValue+0x7a>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	90 70       	andi	r25, 0x00	; 0
    144c:	88 23       	and	r24, r24
    144e:	19 f0       	breq	.+6      	; 0x1456 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	49 c0       	rjmp	.+146    	; 0x14e8 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1456:	19 82       	std	Y+1, r1	; 0x01
    1458:	47 c0       	rjmp	.+142    	; 0x14e8 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    145a:	e6 e3       	ldi	r30, 0x36	; 54
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <LCD_getPinValue+0xae>
    146e:	55 95       	asr	r21
    1470:	47 95       	ror	r20
    1472:	8a 95       	dec	r24
    1474:	e2 f7       	brpl	.-8      	; 0x146e <LCD_getPinValue+0xaa>
    1476:	ca 01       	movw	r24, r20
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	90 70       	andi	r25, 0x00	; 0
    147c:	88 23       	and	r24, r24
    147e:	19 f0       	breq	.+6      	; 0x1486 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	31 c0       	rjmp	.+98     	; 0x14e8 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1486:	19 82       	std	Y+1, r1	; 0x01
    1488:	2f c0       	rjmp	.+94     	; 0x14e8 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    148a:	e3 e3       	ldi	r30, 0x33	; 51
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	a9 01       	movw	r20, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <LCD_getPinValue+0xde>
    149e:	55 95       	asr	r21
    14a0:	47 95       	ror	r20
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <LCD_getPinValue+0xda>
    14a6:	ca 01       	movw	r24, r20
    14a8:	81 70       	andi	r24, 0x01	; 1
    14aa:	90 70       	andi	r25, 0x00	; 0
    14ac:	88 23       	and	r24, r24
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	19 c0       	rjmp	.+50     	; 0x14e8 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14b6:	19 82       	std	Y+1, r1	; 0x01
    14b8:	17 c0       	rjmp	.+46     	; 0x14e8 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14ba:	e0 e3       	ldi	r30, 0x30	; 48
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <LCD_getPinValue+0x10e>
    14ce:	55 95       	asr	r21
    14d0:	47 95       	ror	r20
    14d2:	8a 95       	dec	r24
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <LCD_getPinValue+0x10a>
    14d6:	ca 01       	movw	r24, r20
    14d8:	81 70       	andi	r24, 0x01	; 1
    14da:	90 70       	andi	r25, 0x00	; 0
    14dc:	88 23       	and	r24, r24
    14de:	19 f0       	breq	.+6      	; 0x14e6 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14e6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <LCD_setPortDirection+0x6>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <LCD_setPortDirection+0x8>
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	84 30       	cpi	r24, 0x04	; 4
    150e:	90 f5       	brcc	.+100    	; 0x1574 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	3c 83       	std	Y+4, r19	; 0x04
    1518:	2b 83       	std	Y+3, r18	; 0x03
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	d1 f0       	breq	.+52     	; 0x1558 <LCD_setPortDirection+0x5e>
    1524:	2b 81       	ldd	r18, Y+3	; 0x03
    1526:	3c 81       	ldd	r19, Y+4	; 0x04
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	2c f4       	brge	.+10     	; 0x1538 <LCD_setPortDirection+0x3e>
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	61 f0       	breq	.+24     	; 0x154e <LCD_setPortDirection+0x54>
    1536:	1e c0       	rjmp	.+60     	; 0x1574 <LCD_setPortDirection+0x7a>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <LCD_setPortDirection+0x68>
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	83 30       	cpi	r24, 0x03	; 3
    1548:	91 05       	cpc	r25, r1
    154a:	81 f0       	breq	.+32     	; 0x156c <LCD_setPortDirection+0x72>
    154c:	13 c0       	rjmp	.+38     	; 0x1574 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    154e:	ea e3       	ldi	r30, 0x3A	; 58
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
    1556:	0e c0       	rjmp	.+28     	; 0x1574 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	80 83       	st	Z, r24
    1560:	09 c0       	rjmp	.+18     	; 0x1574 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1562:	e4 e3       	ldi	r30, 0x34	; 52
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	80 83       	st	Z, r24
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    156c:	e1 e3       	ldi	r30, 0x31	; 49
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	80 83       	st	Z, r24
			break;
		}
	}
}
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	00 d0       	rcall	.+0      	; 0x1588 <LCD_setPortValue+0x6>
    1588:	00 d0       	rcall	.+0      	; 0x158a <LCD_setPortValue+0x8>
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	84 30       	cpi	r24, 0x04	; 4
    1596:	90 f5       	brcc	.+100    	; 0x15fc <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3c 83       	std	Y+4, r19	; 0x04
    15a0:	2b 83       	std	Y+3, r18	; 0x03
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	d1 f0       	breq	.+52     	; 0x15e0 <LCD_setPortValue+0x5e>
    15ac:	2b 81       	ldd	r18, Y+3	; 0x03
    15ae:	3c 81       	ldd	r19, Y+4	; 0x04
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <LCD_setPortValue+0x3e>
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	61 f0       	breq	.+24     	; 0x15d6 <LCD_setPortValue+0x54>
    15be:	1e c0       	rjmp	.+60     	; 0x15fc <LCD_setPortValue+0x7a>
    15c0:	2b 81       	ldd	r18, Y+3	; 0x03
    15c2:	3c 81       	ldd	r19, Y+4	; 0x04
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	81 f0       	breq	.+32     	; 0x15ea <LCD_setPortValue+0x68>
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	81 f0       	breq	.+32     	; 0x15f4 <LCD_setPortValue+0x72>
    15d4:	13 c0       	rjmp	.+38     	; 0x15fc <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15d6:	eb e3       	ldi	r30, 0x3B	; 59
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	80 83       	st	Z, r24
    15de:	0e c0       	rjmp	.+28     	; 0x15fc <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15e0:	e8 e3       	ldi	r30, 0x38	; 56
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	80 83       	st	Z, r24
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15ea:	e5 e3       	ldi	r30, 0x35	; 53
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	80 83       	st	Z, r24
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15f4:	e2 e3       	ldi	r30, 0x32	; 50
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <LCD_getPortValue+0x6>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <LCD_getPortValue+0x8>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1618:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	90 f5       	brcc	.+100    	; 0x1684 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	3c 83       	std	Y+4, r19	; 0x04
    1628:	2b 83       	std	Y+3, r18	; 0x03
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	91 05       	cpc	r25, r1
    1632:	d1 f0       	breq	.+52     	; 0x1668 <LCD_getPortValue+0x5e>
    1634:	2b 81       	ldd	r18, Y+3	; 0x03
    1636:	3c 81       	ldd	r19, Y+4	; 0x04
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	2c f4       	brge	.+10     	; 0x1648 <LCD_getPortValue+0x3e>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	61 f0       	breq	.+24     	; 0x165e <LCD_getPortValue+0x54>
    1646:	1e c0       	rjmp	.+60     	; 0x1684 <LCD_getPortValue+0x7a>
    1648:	2b 81       	ldd	r18, Y+3	; 0x03
    164a:	3c 81       	ldd	r19, Y+4	; 0x04
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	81 f0       	breq	.+32     	; 0x1672 <LCD_getPortValue+0x68>
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	81 f0       	breq	.+32     	; 0x167c <LCD_getPortValue+0x72>
    165c:	13 c0       	rjmp	.+38     	; 0x1684 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    165e:	e9 e3       	ldi	r30, 0x39	; 57
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	0e c0       	rjmp	.+28     	; 0x1684 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1668:	e6 e3       	ldi	r30, 0x36	; 54
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	09 c0       	rjmp	.+18     	; 0x1684 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1672:	e3 e3       	ldi	r30, 0x33	; 51
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    167c:	e0 e3       	ldi	r30, 0x30	; 48
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    169c:	af e5       	ldi	r26, 0x5F	; 95
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	ef e5       	ldi	r30, 0x5F	; 95
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	80 68       	ori	r24, 0x80	; 128
    16a8:	8c 93       	st	X, r24
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    16b8:	af e5       	ldi	r26, 0x5F	; 95
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ef e5       	ldi	r30, 0x5F	; 95
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8f 77       	andi	r24, 0x7F	; 127
    16c4:	8c 93       	st	X, r24
}
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <setCallBack+0x6>
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	fc 01       	movw	r30, r24
    16ea:	ea 5b       	subi	r30, 0xBA	; 186
    16ec:	fe 4f       	sbci	r31, 0xFE	; 254
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	80 83       	st	Z, r24
}
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    170a:	a5 e5       	ldi	r26, 0x55	; 85
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e5       	ldi	r30, 0x55	; 85
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8e 7f       	andi	r24, 0xFE	; 254
    1716:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1718:	a5 e5       	ldi	r26, 0x55	; 85
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e5 e5       	ldi	r30, 0x55	; 85
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8d 7f       	andi	r24, 0xFD	; 253
    1724:	8c 93       	st	X, r24
}
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1734:	a5 e5       	ldi	r26, 0x55	; 85
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e5       	ldi	r30, 0x55	; 85
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	82 60       	ori	r24, 0x02	; 2
    1740:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1742:	a5 e5       	ldi	r26, 0x55	; 85
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e5 e5       	ldi	r30, 0x55	; 85
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8e 7f       	andi	r24, 0xFE	; 254
    174e:	8c 93       	st	X, r24
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    175e:	a5 e5       	ldi	r26, 0x55	; 85
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e5       	ldi	r30, 0x55	; 85
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8d 7f       	andi	r24, 0xFD	; 253
    176a:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    176c:	a5 e5       	ldi	r26, 0x55	; 85
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e5 e5       	ldi	r30, 0x55	; 85
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	81 60       	ori	r24, 0x01	; 1
    1778:	8c 93       	st	X, r24
}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1788:	a5 e5       	ldi	r26, 0x55	; 85
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e5 e5       	ldi	r30, 0x55	; 85
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	82 60       	ori	r24, 0x02	; 2
    1794:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1796:	a5 e5       	ldi	r26, 0x55	; 85
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e5       	ldi	r30, 0x55	; 85
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	81 60       	ori	r24, 0x01	; 1
    17a2:	8c 93       	st	X, r24
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    17b2:	a5 e5       	ldi	r26, 0x55	; 85
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e5 e5       	ldi	r30, 0x55	; 85
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8b 7f       	andi	r24, 0xFB	; 251
    17be:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    17c0:	a5 e5       	ldi	r26, 0x55	; 85
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e5 e5       	ldi	r30, 0x55	; 85
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	87 7f       	andi	r24, 0xF7	; 247
    17cc:	8c 93       	st	X, r24
}
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    17dc:	a5 e5       	ldi	r26, 0x55	; 85
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e5 e5       	ldi	r30, 0x55	; 85
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	88 60       	ori	r24, 0x08	; 8
    17e8:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    17ea:	a5 e5       	ldi	r26, 0x55	; 85
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e5 e5       	ldi	r30, 0x55	; 85
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8b 7f       	andi	r24, 0xFB	; 251
    17f6:	8c 93       	st	X, r24
}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1806:	a5 e5       	ldi	r26, 0x55	; 85
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e5       	ldi	r30, 0x55	; 85
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	87 7f       	andi	r24, 0xF7	; 247
    1812:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1814:	a5 e5       	ldi	r26, 0x55	; 85
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e5       	ldi	r30, 0x55	; 85
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	84 60       	ori	r24, 0x04	; 4
    1820:	8c 93       	st	X, r24
}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1830:	a5 e5       	ldi	r26, 0x55	; 85
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e5 e5       	ldi	r30, 0x55	; 85
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	88 60       	ori	r24, 0x08	; 8
    183c:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    183e:	a5 e5       	ldi	r26, 0x55	; 85
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e5       	ldi	r30, 0x55	; 85
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	84 60       	ori	r24, 0x04	; 4
    184a:	8c 93       	st	X, r24
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    185a:	a4 e5       	ldi	r26, 0x54	; 84
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e4 e5       	ldi	r30, 0x54	; 84
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 64       	ori	r24, 0x40	; 64
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1876:	a4 e5       	ldi	r26, 0x54	; 84
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e4 e5       	ldi	r30, 0x54	; 84
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7b       	andi	r24, 0xBF	; 191
    1882:	8c 93       	st	X, r24
}
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_AnyLogicalChange_MODE();
    1892:	0e 94 ab 0b 	call	0x1756	; 0x1756 <EXTI0_AnyLogicalChange_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1896:	ab e5       	ldi	r26, 0x5B	; 91
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	eb e5       	ldi	r30, 0x5B	; 91
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 64       	ori	r24, 0x40	; 64
    18a2:	8c 93       	st	X, r24
}
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    18b2:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    18b6:	ab e5       	ldi	r26, 0x5B	; 91
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	eb e5       	ldi	r30, 0x5B	; 91
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	80 68       	ori	r24, 0x80	; 128
    18c2:	8c 93       	st	X, r24
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <EXTI_voidEnable>:


void EXTI_voidEnable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Mode){
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	2a 97       	sbiw	r28, 0x0a	; 10
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_EXTI_Index){
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	3a 87       	std	Y+10, r19	; 0x0a
    18ea:	29 87       	std	Y+9, r18	; 0x09
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	91 05       	cpc	r25, r1
    18f4:	e9 f1       	breq	.+122    	; 0x1970 <EXTI_voidEnable+0xa6>
    18f6:	29 85       	ldd	r18, Y+9	; 0x09
    18f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    18fa:	22 30       	cpi	r18, 0x02	; 2
    18fc:	31 05       	cpc	r19, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <EXTI_voidEnable+0x38>
    1900:	69 c0       	rjmp	.+210    	; 0x19d4 <EXTI_voidEnable+0x10a>
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	9a 85       	ldd	r25, Y+10	; 0x0a
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	09 f0       	breq	.+2      	; 0x190c <EXTI_voidEnable+0x42>
    190a:	7f c0       	rjmp	.+254    	; 0x1a0a <EXTI_voidEnable+0x140>
		case EXTI0_Index:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    190c:	ab e5       	ldi	r26, 0x5B	; 91
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	eb e5       	ldi	r30, 0x5B	; 91
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 64       	ori	r24, 0x40	; 64
    1918:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	38 87       	std	Y+8, r19	; 0x08
    1922:	2f 83       	std	Y+7, r18	; 0x07
    1924:	8f 81       	ldd	r24, Y+7	; 0x07
    1926:	98 85       	ldd	r25, Y+8	; 0x08
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	91 05       	cpc	r25, r1
    192c:	c1 f0       	breq	.+48     	; 0x195e <EXTI_voidEnable+0x94>
    192e:	2f 81       	ldd	r18, Y+7	; 0x07
    1930:	38 85       	ldd	r19, Y+8	; 0x08
    1932:	22 30       	cpi	r18, 0x02	; 2
    1934:	31 05       	cpc	r19, r1
    1936:	2c f4       	brge	.+10     	; 0x1942 <EXTI_voidEnable+0x78>
    1938:	8f 81       	ldd	r24, Y+7	; 0x07
    193a:	98 85       	ldd	r25, Y+8	; 0x08
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	61 f0       	breq	.+24     	; 0x1958 <EXTI_voidEnable+0x8e>
    1940:	64 c0       	rjmp	.+200    	; 0x1a0a <EXTI_voidEnable+0x140>
    1942:	2f 81       	ldd	r18, Y+7	; 0x07
    1944:	38 85       	ldd	r19, Y+8	; 0x08
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	61 f0       	breq	.+24     	; 0x1964 <EXTI_voidEnable+0x9a>
    194c:	8f 81       	ldd	r24, Y+7	; 0x07
    194e:	98 85       	ldd	r25, Y+8	; 0x08
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	91 05       	cpc	r25, r1
    1954:	51 f0       	breq	.+20     	; 0x196a <EXTI_voidEnable+0xa0>
    1956:	59 c0       	rjmp	.+178    	; 0x1a0a <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    1958:	0e 94 81 0b 	call	0x1702	; 0x1702 <EXTI0_LowLevel_MODE>
    195c:	56 c0       	rjmp	.+172    	; 0x1a0a <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    195e:	0e 94 96 0b 	call	0x172c	; 0x172c <EXTI0_FALLING_MODE>
    1962:	53 c0       	rjmp	.+166    	; 0x1a0a <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    1964:	0e 94 ab 0b 	call	0x1756	; 0x1756 <EXTI0_AnyLogicalChange_MODE>
    1968:	50 c0       	rjmp	.+160    	; 0x1a0a <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    196a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <EXTI0_RISING_MODE>
    196e:	4d c0       	rjmp	.+154    	; 0x1a0a <EXTI_voidEnable+0x140>
			}
			break;

		case EXTI1_Index:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1970:	ab e5       	ldi	r26, 0x5B	; 91
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	eb e5       	ldi	r30, 0x5B	; 91
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 68       	ori	r24, 0x80	; 128
    197c:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	3e 83       	std	Y+6, r19	; 0x06
    1986:	2d 83       	std	Y+5, r18	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	c1 f0       	breq	.+48     	; 0x19c2 <EXTI_voidEnable+0xf8>
    1992:	2d 81       	ldd	r18, Y+5	; 0x05
    1994:	3e 81       	ldd	r19, Y+6	; 0x06
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	2c f4       	brge	.+10     	; 0x19a6 <EXTI_voidEnable+0xdc>
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	61 f0       	breq	.+24     	; 0x19bc <EXTI_voidEnable+0xf2>
    19a4:	32 c0       	rjmp	.+100    	; 0x1a0a <EXTI_voidEnable+0x140>
    19a6:	2d 81       	ldd	r18, Y+5	; 0x05
    19a8:	3e 81       	ldd	r19, Y+6	; 0x06
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	61 f0       	breq	.+24     	; 0x19c8 <EXTI_voidEnable+0xfe>
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	51 f0       	breq	.+20     	; 0x19ce <EXTI_voidEnable+0x104>
    19ba:	27 c0       	rjmp	.+78     	; 0x1a0a <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    19bc:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <EXTI1_LowLevel_MODE>
    19c0:	24 c0       	rjmp	.+72     	; 0x1a0a <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    19c2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <EXTI1_FALLING_MODE>
    19c6:	21 c0       	rjmp	.+66     	; 0x1a0a <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    19c8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <EXTI1_AnyLogicalChange_MODE>
    19cc:	1e c0       	rjmp	.+60     	; 0x1a0a <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    19ce:	0e 94 14 0c 	call	0x1828	; 0x1828 <EXTI1_RISING_MODE>
    19d2:	1b c0       	rjmp	.+54     	; 0x1a0a <EXTI_voidEnable+0x140>
					break;
			}
			break;
		case EXTI2_Index:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    19d4:	ab e5       	ldi	r26, 0x5B	; 91
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e5       	ldi	r30, 0x5B	; 91
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 62       	ori	r24, 0x20	; 32
    19e0:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	41 f0       	breq	.+16     	; 0x1a06 <EXTI_voidEnable+0x13c>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	23 30       	cpi	r18, 0x03	; 3
    19fc:	31 05       	cpc	r19, r1
    19fe:	29 f4       	brne	.+10     	; 0x1a0a <EXTI_voidEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1a00:	0e 94 29 0c 	call	0x1852	; 0x1852 <EXTI2_RISING_MODE>
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <EXTI_voidEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    1a06:	0e 94 37 0c 	call	0x186e	; 0x186e <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    1a0a:	2a 96       	adiw	r28, 0x0a	; 10
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8_EXTI_Index){
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <EXTI_voidDisable+0x6>
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTI_Index){
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	3b 83       	std	Y+3, r19	; 0x03
    1a32:	2a 83       	std	Y+2, r18	; 0x02
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	31 f0       	breq	.+12     	; 0x1a48 <EXTI_voidDisable+0x2c>
    1a3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a40:	21 30       	cpi	r18, 0x01	; 1
    1a42:	31 05       	cpc	r19, r1
    1a44:	49 f0       	breq	.+18     	; 0x1a58 <EXTI_voidDisable+0x3c>
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <EXTI_voidDisable+0x4a>
		case EXTI0_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1a48:	ab e5       	ldi	r26, 0x5B	; 91
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	eb e5       	ldi	r30, 0x5B	; 91
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8f 7b       	andi	r24, 0xBF	; 191
    1a54:	8c 93       	st	X, r24
    1a56:	07 c0       	rjmp	.+14     	; 0x1a66 <EXTI_voidDisable+0x4a>
			break;

		case EXTI1_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1a58:	ab e5       	ldi	r26, 0x5B	; 91
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	eb e5       	ldi	r30, 0x5B	; 91
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8f 77       	andi	r24, 0x7F	; 127
    1a64:	8c 93       	st	X, r24
			break;
	}
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    1a72:	1f 92       	push	r1
    1a74:	0f 92       	push	r0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	0f 92       	push	r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	2f 93       	push	r18
    1a7e:	3f 93       	push	r19
    1a80:	4f 93       	push	r20
    1a82:	5f 93       	push	r21
    1a84:	6f 93       	push	r22
    1a86:	7f 93       	push	r23
    1a88:	8f 93       	push	r24
    1a8a:	9f 93       	push	r25
    1a8c:	af 93       	push	r26
    1a8e:	bf 93       	push	r27
    1a90:	ef 93       	push	r30
    1a92:	ff 93       	push	r31
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI0_Index] != NULL){
    1a9c:	80 91 46 01 	lds	r24, 0x0146
    1aa0:	90 91 47 01 	lds	r25, 0x0147
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <__vector_1+0x40>
		EXTI[0]();
    1aa8:	e0 91 46 01 	lds	r30, 0x0146
    1aac:	f0 91 47 01 	lds	r31, 0x0147
    1ab0:	09 95       	icall
	}

}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	ff 91       	pop	r31
    1ab8:	ef 91       	pop	r30
    1aba:	bf 91       	pop	r27
    1abc:	af 91       	pop	r26
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	7f 91       	pop	r23
    1ac4:	6f 91       	pop	r22
    1ac6:	5f 91       	pop	r21
    1ac8:	4f 91       	pop	r20
    1aca:	3f 91       	pop	r19
    1acc:	2f 91       	pop	r18
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	0f 90       	pop	r0
    1ad4:	1f 90       	pop	r1
    1ad6:	18 95       	reti

00001ad8 <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    1ad8:	1f 92       	push	r1
    1ada:	0f 92       	push	r0
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	0f 92       	push	r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	2f 93       	push	r18
    1ae4:	3f 93       	push	r19
    1ae6:	4f 93       	push	r20
    1ae8:	5f 93       	push	r21
    1aea:	6f 93       	push	r22
    1aec:	7f 93       	push	r23
    1aee:	8f 93       	push	r24
    1af0:	9f 93       	push	r25
    1af2:	af 93       	push	r26
    1af4:	bf 93       	push	r27
    1af6:	ef 93       	push	r30
    1af8:	ff 93       	push	r31
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI1_Index] != NULL){
    1b02:	80 91 48 01 	lds	r24, 0x0148
    1b06:	90 91 49 01 	lds	r25, 0x0149
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	29 f0       	breq	.+10     	; 0x1b18 <__vector_2+0x40>
			EXTI[1]();
    1b0e:	e0 91 48 01 	lds	r30, 0x0148
    1b12:	f0 91 49 01 	lds	r31, 0x0149
    1b16:	09 95       	icall
	}

}
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	ff 91       	pop	r31
    1b1e:	ef 91       	pop	r30
    1b20:	bf 91       	pop	r27
    1b22:	af 91       	pop	r26
    1b24:	9f 91       	pop	r25
    1b26:	8f 91       	pop	r24
    1b28:	7f 91       	pop	r23
    1b2a:	6f 91       	pop	r22
    1b2c:	5f 91       	pop	r21
    1b2e:	4f 91       	pop	r20
    1b30:	3f 91       	pop	r19
    1b32:	2f 91       	pop	r18
    1b34:	0f 90       	pop	r0
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	0f 90       	pop	r0
    1b3a:	1f 90       	pop	r1
    1b3c:	18 95       	reti

00001b3e <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1b3e:	1f 92       	push	r1
    1b40:	0f 92       	push	r0
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	0f 92       	push	r0
    1b46:	11 24       	eor	r1, r1
    1b48:	2f 93       	push	r18
    1b4a:	3f 93       	push	r19
    1b4c:	4f 93       	push	r20
    1b4e:	5f 93       	push	r21
    1b50:	6f 93       	push	r22
    1b52:	7f 93       	push	r23
    1b54:	8f 93       	push	r24
    1b56:	9f 93       	push	r25
    1b58:	af 93       	push	r26
    1b5a:	bf 93       	push	r27
    1b5c:	ef 93       	push	r30
    1b5e:	ff 93       	push	r31
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI2_Index] != NULL){
    1b68:	80 91 4a 01 	lds	r24, 0x014A
    1b6c:	90 91 4b 01 	lds	r25, 0x014B
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	29 f0       	breq	.+10     	; 0x1b7e <__vector_3+0x40>
			EXTI[2]();
    1b74:	e0 91 4a 01 	lds	r30, 0x014A
    1b78:	f0 91 4b 01 	lds	r31, 0x014B
    1b7c:	09 95       	icall
	}

}
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	ff 91       	pop	r31
    1b84:	ef 91       	pop	r30
    1b86:	bf 91       	pop	r27
    1b88:	af 91       	pop	r26
    1b8a:	9f 91       	pop	r25
    1b8c:	8f 91       	pop	r24
    1b8e:	7f 91       	pop	r23
    1b90:	6f 91       	pop	r22
    1b92:	5f 91       	pop	r21
    1b94:	4f 91       	pop	r20
    1b96:	3f 91       	pop	r19
    1b98:	2f 91       	pop	r18
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0
    1ba0:	1f 90       	pop	r1
    1ba2:	18 95       	reti

00001ba4 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    1bac:	ea e3       	ldi	r30, 0x3A	; 58
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	8e e0       	ldi	r24, 0x0E	; 14
    1bb2:	80 83       	st	Z, r24
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    1bb4:	e7 e3       	ldi	r30, 0x37	; 55
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    1bba:	e4 e3       	ldi	r30, 0x34	; 52
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1bc2:	e1 e3       	ldi	r30, 0x31	; 49
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	87 ef       	ldi	r24, 0xF7	; 247
    1bc8:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    1bca:	eb e3       	ldi	r30, 0x3B	; 59
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    1bd0:	e8 e3       	ldi	r30, 0x38	; 56
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    1bd6:	e5 e3       	ldi	r30, 0x35	; 53
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	10 82       	st	Z, r1

}
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	2e 97       	sbiw	r28, 0x0e	; 14
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
    1bfe:	6b 83       	std	Y+3, r22	; 0x03
    1c00:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	08 f0       	brcs	.+2      	; 0x1c0e <DIO_u8SetPinDirection+0x26>
    1c0c:	0c c1       	rjmp	.+536    	; 0x1e26 <DIO_u8SetPinDirection+0x23e>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	88 30       	cpi	r24, 0x08	; 8
    1c12:	08 f0       	brcs	.+2      	; 0x1c16 <DIO_u8SetPinDirection+0x2e>
    1c14:	08 c1       	rjmp	.+528    	; 0x1e26 <DIO_u8SetPinDirection+0x23e>
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	21 f0       	breq	.+8      	; 0x1c24 <DIO_u8SetPinDirection+0x3c>
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	88 23       	and	r24, r24
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <DIO_u8SetPinDirection+0x3c>
    1c22:	01 c1       	rjmp	.+514    	; 0x1e26 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	3e 87       	std	Y+14, r19	; 0x0e
    1c2c:	2d 87       	std	Y+13, r18	; 0x0d
    1c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	91 05       	cpc	r25, r1
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <DIO_u8SetPinDirection+0x52>
    1c38:	4f c0       	rjmp	.+158    	; 0x1cd8 <DIO_u8SetPinDirection+0xf0>
    1c3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c3e:	22 30       	cpi	r18, 0x02	; 2
    1c40:	31 05       	cpc	r19, r1
    1c42:	2c f4       	brge	.+10     	; 0x1c4e <DIO_u8SetPinDirection+0x66>
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	71 f0       	breq	.+28     	; 0x1c68 <DIO_u8SetPinDirection+0x80>
    1c4c:	ed c0       	rjmp	.+474    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
    1c4e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c50:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c52:	22 30       	cpi	r18, 0x02	; 2
    1c54:	31 05       	cpc	r19, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <DIO_u8SetPinDirection+0x72>
    1c58:	77 c0       	rjmp	.+238    	; 0x1d48 <DIO_u8SetPinDirection+0x160>
    1c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5e:	83 30       	cpi	r24, 0x03	; 3
    1c60:	91 05       	cpc	r25, r1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <DIO_u8SetPinDirection+0x7e>
    1c64:	a9 c0       	rjmp	.+338    	; 0x1db8 <DIO_u8SetPinDirection+0x1d0>
    1c66:	e0 c0       	rjmp	.+448    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	3c 87       	std	Y+12, r19	; 0x0c
    1c70:	2b 87       	std	Y+11, r18	; 0x0b
    1c72:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c74:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	d1 f0       	breq	.+52     	; 0x1cae <DIO_u8SetPinDirection+0xc6>
    1c7a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c7e:	21 30       	cpi	r18, 0x01	; 1
    1c80:	31 05       	cpc	r19, r1
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <DIO_u8SetPinDirection+0x9e>
    1c84:	d1 c0       	rjmp	.+418    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1c86:	aa e3       	ldi	r26, 0x3A	; 58
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	ea e3       	ldi	r30, 0x3A	; 58
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <DIO_u8SetPinDirection+0xbc>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <DIO_u8SetPinDirection+0xb8>
    1ca8:	84 2b       	or	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	bd c0       	rjmp	.+378    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1cae:	aa e3       	ldi	r26, 0x3A	; 58
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	ea e3       	ldi	r30, 0x3A	; 58
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 2e       	mov	r0, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_u8SetPinDirection+0xe4>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	0a 94       	dec	r0
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <DIO_u8SetPinDirection+0xe0>
    1cd0:	80 95       	com	r24
    1cd2:	84 23       	and	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	a8 c0       	rjmp	.+336    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3a 87       	std	Y+10, r19	; 0x0a
    1ce0:	29 87       	std	Y+9, r18	; 0x09
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	d1 f0       	breq	.+52     	; 0x1d1e <DIO_u8SetPinDirection+0x136>
    1cea:	29 85       	ldd	r18, Y+9	; 0x09
    1cec:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cee:	21 30       	cpi	r18, 0x01	; 1
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <DIO_u8SetPinDirection+0x10e>
    1cf4:	99 c0       	rjmp	.+306    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1cf6:	a7 e3       	ldi	r26, 0x37	; 55
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e7 e3       	ldi	r30, 0x37	; 55
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_u8SetPinDirection+0x12c>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_u8SetPinDirection+0x128>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	85 c0       	rjmp	.+266    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1d1e:	a7 e3       	ldi	r26, 0x37	; 55
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e7 e3       	ldi	r30, 0x37	; 55
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_u8SetPinDirection+0x154>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_u8SetPinDirection+0x150>
    1d40:	80 95       	com	r24
    1d42:	84 23       	and	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	70 c0       	rjmp	.+224    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	38 87       	std	Y+8, r19	; 0x08
    1d50:	2f 83       	std	Y+7, r18	; 0x07
    1d52:	8f 81       	ldd	r24, Y+7	; 0x07
    1d54:	98 85       	ldd	r25, Y+8	; 0x08
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	d1 f0       	breq	.+52     	; 0x1d8e <DIO_u8SetPinDirection+0x1a6>
    1d5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d5c:	38 85       	ldd	r19, Y+8	; 0x08
    1d5e:	21 30       	cpi	r18, 0x01	; 1
    1d60:	31 05       	cpc	r19, r1
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <DIO_u8SetPinDirection+0x17e>
    1d64:	61 c0       	rjmp	.+194    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1d66:	a4 e3       	ldi	r26, 0x34	; 52
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e4 e3       	ldi	r30, 0x34	; 52
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	48 2f       	mov	r20, r24
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 2e       	mov	r0, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <DIO_u8SetPinDirection+0x19c>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	0a 94       	dec	r0
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <DIO_u8SetPinDirection+0x198>
    1d88:	84 2b       	or	r24, r20
    1d8a:	8c 93       	st	X, r24
    1d8c:	4d c0       	rjmp	.+154    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1d8e:	a4 e3       	ldi	r26, 0x34	; 52
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e4 e3       	ldi	r30, 0x34	; 52
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_u8SetPinDirection+0x1c4>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_u8SetPinDirection+0x1c0>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	38 c0       	rjmp	.+112    	; 0x1e28 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	3e 83       	std	Y+6, r19	; 0x06
    1dc0:	2d 83       	std	Y+5, r18	; 0x05
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	c9 f0       	breq	.+50     	; 0x1dfc <DIO_u8SetPinDirection+0x214>
    1dca:	2d 81       	ldd	r18, Y+5	; 0x05
    1dcc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dce:	21 30       	cpi	r18, 0x01	; 1
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	51 f5       	brne	.+84     	; 0x1e28 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1dd4:	a1 e3       	ldi	r26, 0x31	; 49
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e1 e3       	ldi	r30, 0x31	; 49
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_u8SetPinDirection+0x20a>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_u8SetPinDirection+0x206>
    1df6:	84 2b       	or	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	16 c0       	rjmp	.+44     	; 0x1e28 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1dfc:	a1 e3       	ldi	r26, 0x31	; 49
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e1 e3       	ldi	r30, 0x31	; 49
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	48 2f       	mov	r20, r24
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 2e       	mov	r0, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_u8SetPinDirection+0x232>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_u8SetPinDirection+0x22e>
    1e1e:	80 95       	com	r24
    1e20:	84 23       	and	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1e26:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2a:	2e 96       	adiw	r28, 0x0e	; 14
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	cf 91       	pop	r28
    1e38:	df 91       	pop	r29
    1e3a:	08 95       	ret

00001e3c <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	2f 97       	sbiw	r28, 0x0f	; 15
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	6c 83       	std	Y+4, r22	; 0x04
    1e54:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	84 30       	cpi	r24, 0x04	; 4
    1e5e:	08 f0       	brcs	.+2      	; 0x1e62 <DIO_u8SetPinValue+0x26>
    1e60:	13 c1       	rjmp	.+550    	; 0x2088 <DIO_u8SetPinValue+0x24c>
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	88 30       	cpi	r24, 0x08	; 8
    1e66:	08 f0       	brcs	.+2      	; 0x1e6a <DIO_u8SetPinValue+0x2e>
    1e68:	0f c1       	rjmp	.+542    	; 0x2088 <DIO_u8SetPinValue+0x24c>
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	88 23       	and	r24, r24
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <DIO_u8SetPinValue+0x3c>
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <DIO_u8SetPinValue+0x3c>
    1e76:	08 c1       	rjmp	.+528    	; 0x2088 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	3f 87       	std	Y+15, r19	; 0x0f
    1e80:	2e 87       	std	Y+14, r18	; 0x0e
    1e82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e84:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	91 05       	cpc	r25, r1
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <DIO_u8SetPinValue+0x52>
    1e8c:	50 c0       	rjmp	.+160    	; 0x1f2e <DIO_u8SetPinValue+0xf2>
    1e8e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e90:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e92:	22 30       	cpi	r18, 0x02	; 2
    1e94:	31 05       	cpc	r19, r1
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <DIO_u8SetPinValue+0x66>
    1e98:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	71 f0       	breq	.+28     	; 0x1ebc <DIO_u8SetPinValue+0x80>
    1ea0:	f4 c0       	rjmp	.+488    	; 0x208a <DIO_u8SetPinValue+0x24e>
    1ea2:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ea4:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <DIO_u8SetPinValue+0x72>
    1eac:	79 c0       	rjmp	.+242    	; 0x1fa0 <DIO_u8SetPinValue+0x164>
    1eae:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eb0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eb2:	83 30       	cpi	r24, 0x03	; 3
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <DIO_u8SetPinValue+0x7e>
    1eb8:	ad c0       	rjmp	.+346    	; 0x2014 <DIO_u8SetPinValue+0x1d8>
    1eba:	e7 c0       	rjmp	.+462    	; 0x208a <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3d 87       	std	Y+13, r19	; 0x0d
    1ec4:	2c 87       	std	Y+12, r18	; 0x0c
    1ec6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ec8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	c9 f0       	breq	.+50     	; 0x1f00 <DIO_u8SetPinValue+0xc4>
    1ece:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ed0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ed2:	21 30       	cpi	r18, 0x01	; 1
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	49 f5       	brne	.+82     	; 0x1f2a <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1ed8:	ab e3       	ldi	r26, 0x3B	; 59
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	eb e3       	ldi	r30, 0x3B	; 59
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <DIO_u8SetPinValue+0xba>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <DIO_u8SetPinValue+0xb6>
    1efa:	84 2b       	or	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	c5 c0       	rjmp	.+394    	; 0x208a <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1f00:	ab e3       	ldi	r26, 0x3B	; 59
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	eb e3       	ldi	r30, 0x3B	; 59
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_u8SetPinValue+0xe2>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_u8SetPinValue+0xde>
    1f22:	80 95       	com	r24
    1f24:	84 23       	and	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	b0 c0       	rjmp	.+352    	; 0x208a <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1f2a:	1a 82       	std	Y+2, r1	; 0x02
    1f2c:	ae c0       	rjmp	.+348    	; 0x208a <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	3b 87       	std	Y+11, r19	; 0x0b
    1f36:	2a 87       	std	Y+10, r18	; 0x0a
    1f38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	c9 f0       	breq	.+50     	; 0x1f72 <DIO_u8SetPinValue+0x136>
    1f40:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f42:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f44:	21 30       	cpi	r18, 0x01	; 1
    1f46:	31 05       	cpc	r19, r1
    1f48:	49 f5       	brne	.+82     	; 0x1f9c <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1f4a:	a8 e3       	ldi	r26, 0x38	; 56
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e8 e3       	ldi	r30, 0x38	; 56
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	48 2f       	mov	r20, r24
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 2e       	mov	r0, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <DIO_u8SetPinValue+0x12c>
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	0a 94       	dec	r0
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <DIO_u8SetPinValue+0x128>
    1f6c:	84 2b       	or	r24, r20
    1f6e:	8c 93       	st	X, r24
    1f70:	8c c0       	rjmp	.+280    	; 0x208a <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1f72:	a8 e3       	ldi	r26, 0x38	; 56
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e8 e3       	ldi	r30, 0x38	; 56
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	48 2f       	mov	r20, r24
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 2e       	mov	r0, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <DIO_u8SetPinValue+0x154>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <DIO_u8SetPinValue+0x150>
    1f94:	80 95       	com	r24
    1f96:	84 23       	and	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	77 c0       	rjmp	.+238    	; 0x208a <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1f9c:	1a 82       	std	Y+2, r1	; 0x02
    1f9e:	75 c0       	rjmp	.+234    	; 0x208a <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	39 87       	std	Y+9, r19	; 0x09
    1fa8:	28 87       	std	Y+8, r18	; 0x08
    1faa:	88 85       	ldd	r24, Y+8	; 0x08
    1fac:	99 85       	ldd	r25, Y+9	; 0x09
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	31 f0       	breq	.+12     	; 0x1fbe <DIO_u8SetPinValue+0x182>
    1fb2:	28 85       	ldd	r18, Y+8	; 0x08
    1fb4:	39 85       	ldd	r19, Y+9	; 0x09
    1fb6:	21 30       	cpi	r18, 0x01	; 1
    1fb8:	31 05       	cpc	r19, r1
    1fba:	b1 f0       	breq	.+44     	; 0x1fe8 <DIO_u8SetPinValue+0x1ac>
    1fbc:	29 c0       	rjmp	.+82     	; 0x2010 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1fbe:	a5 e3       	ldi	r26, 0x35	; 53
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e5 e3       	ldi	r30, 0x35	; 53
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	48 2f       	mov	r20, r24
    1fca:	8c 81       	ldd	r24, Y+4	; 0x04
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	02 2e       	mov	r0, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <DIO_u8SetPinValue+0x1a0>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <DIO_u8SetPinValue+0x19c>
    1fe0:	80 95       	com	r24
    1fe2:	84 23       	and	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	51 c0       	rjmp	.+162    	; 0x208a <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1fe8:	a5 e3       	ldi	r26, 0x35	; 53
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e5 e3       	ldi	r30, 0x35	; 53
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_u8SetPinValue+0x1ca>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_u8SetPinValue+0x1c6>
    200a:	84 2b       	or	r24, r20
    200c:	8c 93       	st	X, r24
    200e:	3d c0       	rjmp	.+122    	; 0x208a <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2010:	1a 82       	std	Y+2, r1	; 0x02
    2012:	3b c0       	rjmp	.+118    	; 0x208a <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3f 83       	std	Y+7, r19	; 0x07
    201c:	2e 83       	std	Y+6, r18	; 0x06
    201e:	8e 81       	ldd	r24, Y+6	; 0x06
    2020:	9f 81       	ldd	r25, Y+7	; 0x07
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	31 f0       	breq	.+12     	; 0x2032 <DIO_u8SetPinValue+0x1f6>
    2026:	2e 81       	ldd	r18, Y+6	; 0x06
    2028:	3f 81       	ldd	r19, Y+7	; 0x07
    202a:	21 30       	cpi	r18, 0x01	; 1
    202c:	31 05       	cpc	r19, r1
    202e:	b1 f0       	breq	.+44     	; 0x205c <DIO_u8SetPinValue+0x220>
    2030:	29 c0       	rjmp	.+82     	; 0x2084 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2032:	a5 e3       	ldi	r26, 0x35	; 53
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e5 e3       	ldi	r30, 0x35	; 53
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 2e       	mov	r0, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <DIO_u8SetPinValue+0x214>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <DIO_u8SetPinValue+0x210>
    2054:	80 95       	com	r24
    2056:	84 23       	and	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	17 c0       	rjmp	.+46     	; 0x208a <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    205c:	a2 e3       	ldi	r26, 0x32	; 50
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e2 e3       	ldi	r30, 0x32	; 50
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8c 81       	ldd	r24, Y+4	; 0x04
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <DIO_u8SetPinValue+0x23e>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <DIO_u8SetPinValue+0x23a>
    207e:	84 2b       	or	r24, r20
    2080:	8c 93       	st	X, r24
    2082:	03 c0       	rjmp	.+6      	; 0x208a <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2084:	1a 82       	std	Y+2, r1	; 0x02
    2086:	01 c0       	rjmp	.+2      	; 0x208a <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    2088:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    208c:	2f 96       	adiw	r28, 0x0f	; 15
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	28 97       	sbiw	r28, 0x08	; 8
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	6c 83       	std	Y+4, r22	; 0x04
    20b6:	5e 83       	std	Y+6, r21	; 0x06
    20b8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	84 30       	cpi	r24, 0x04	; 4
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <DIO_u8GetPinValue+0x28>
    20c4:	9f c0       	rjmp	.+318    	; 0x2204 <DIO_u8GetPinValue+0x166>
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	88 30       	cpi	r24, 0x08	; 8
    20ca:	08 f0       	brcs	.+2      	; 0x20ce <DIO_u8GetPinValue+0x30>
    20cc:	9b c0       	rjmp	.+310    	; 0x2204 <DIO_u8GetPinValue+0x166>
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <DIO_u8GetPinValue+0x3a>
    20d6:	96 c0       	rjmp	.+300    	; 0x2204 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	38 87       	std	Y+8, r19	; 0x08
    20e0:	2f 83       	std	Y+7, r18	; 0x07
    20e2:	4f 81       	ldd	r20, Y+7	; 0x07
    20e4:	58 85       	ldd	r21, Y+8	; 0x08
    20e6:	41 30       	cpi	r20, 0x01	; 1
    20e8:	51 05       	cpc	r21, r1
    20ea:	a9 f1       	breq	.+106    	; 0x2156 <DIO_u8GetPinValue+0xb8>
    20ec:	8f 81       	ldd	r24, Y+7	; 0x07
    20ee:	98 85       	ldd	r25, Y+8	; 0x08
    20f0:	82 30       	cpi	r24, 0x02	; 2
    20f2:	91 05       	cpc	r25, r1
    20f4:	34 f4       	brge	.+12     	; 0x2102 <DIO_u8GetPinValue+0x64>
    20f6:	2f 81       	ldd	r18, Y+7	; 0x07
    20f8:	38 85       	ldd	r19, Y+8	; 0x08
    20fa:	21 15       	cp	r18, r1
    20fc:	31 05       	cpc	r19, r1
    20fe:	71 f0       	breq	.+28     	; 0x211c <DIO_u8GetPinValue+0x7e>
    2100:	82 c0       	rjmp	.+260    	; 0x2206 <DIO_u8GetPinValue+0x168>
    2102:	4f 81       	ldd	r20, Y+7	; 0x07
    2104:	58 85       	ldd	r21, Y+8	; 0x08
    2106:	42 30       	cpi	r20, 0x02	; 2
    2108:	51 05       	cpc	r21, r1
    210a:	09 f4       	brne	.+2      	; 0x210e <DIO_u8GetPinValue+0x70>
    210c:	41 c0       	rjmp	.+130    	; 0x2190 <DIO_u8GetPinValue+0xf2>
    210e:	8f 81       	ldd	r24, Y+7	; 0x07
    2110:	98 85       	ldd	r25, Y+8	; 0x08
    2112:	83 30       	cpi	r24, 0x03	; 3
    2114:	91 05       	cpc	r25, r1
    2116:	09 f4       	brne	.+2      	; 0x211a <DIO_u8GetPinValue+0x7c>
    2118:	58 c0       	rjmp	.+176    	; 0x21ca <DIO_u8GetPinValue+0x12c>
    211a:	75 c0       	rjmp	.+234    	; 0x2206 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    211c:	e9 e3       	ldi	r30, 0x39	; 57
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8c 81       	ldd	r24, Y+4	; 0x04
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a9 01       	movw	r20, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <DIO_u8GetPinValue+0x96>
    2130:	55 95       	asr	r21
    2132:	47 95       	ror	r20
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <DIO_u8GetPinValue+0x92>
    2138:	ca 01       	movw	r24, r20
    213a:	81 70       	andi	r24, 0x01	; 1
    213c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	88 23       	and	r24, r24
    2142:	21 f4       	brne	.+8      	; 0x214c <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2144:	ed 81       	ldd	r30, Y+5	; 0x05
    2146:	fe 81       	ldd	r31, Y+6	; 0x06
    2148:	10 82       	st	Z, r1
    214a:	5d c0       	rjmp	.+186    	; 0x2206 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    214c:	ed 81       	ldd	r30, Y+5	; 0x05
    214e:	fe 81       	ldd	r31, Y+6	; 0x06
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	80 83       	st	Z, r24
    2154:	58 c0       	rjmp	.+176    	; 0x2206 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    2156:	e6 e3       	ldi	r30, 0x36	; 54
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a9 01       	movw	r20, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <DIO_u8GetPinValue+0xd0>
    216a:	55 95       	asr	r21
    216c:	47 95       	ror	r20
    216e:	8a 95       	dec	r24
    2170:	e2 f7       	brpl	.-8      	; 0x216a <DIO_u8GetPinValue+0xcc>
    2172:	ca 01       	movw	r24, r20
    2174:	81 70       	andi	r24, 0x01	; 1
    2176:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	88 23       	and	r24, r24
    217c:	21 f4       	brne	.+8      	; 0x2186 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    217e:	ed 81       	ldd	r30, Y+5	; 0x05
    2180:	fe 81       	ldd	r31, Y+6	; 0x06
    2182:	10 82       	st	Z, r1
    2184:	40 c0       	rjmp	.+128    	; 0x2206 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2186:	ed 81       	ldd	r30, Y+5	; 0x05
    2188:	fe 81       	ldd	r31, Y+6	; 0x06
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	80 83       	st	Z, r24
    218e:	3b c0       	rjmp	.+118    	; 0x2206 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    2190:	e3 e3       	ldi	r30, 0x33	; 51
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	8c 81       	ldd	r24, Y+4	; 0x04
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a9 01       	movw	r20, r18
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <DIO_u8GetPinValue+0x10a>
    21a4:	55 95       	asr	r21
    21a6:	47 95       	ror	r20
    21a8:	8a 95       	dec	r24
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <DIO_u8GetPinValue+0x106>
    21ac:	ca 01       	movw	r24, r20
    21ae:	81 70       	andi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 23       	and	r24, r24
    21b6:	21 f4       	brne	.+8      	; 0x21c0 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    21b8:	ed 81       	ldd	r30, Y+5	; 0x05
    21ba:	fe 81       	ldd	r31, Y+6	; 0x06
    21bc:	10 82       	st	Z, r1
    21be:	23 c0       	rjmp	.+70     	; 0x2206 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    21c0:	ed 81       	ldd	r30, Y+5	; 0x05
    21c2:	fe 81       	ldd	r31, Y+6	; 0x06
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	80 83       	st	Z, r24
    21c8:	1e c0       	rjmp	.+60     	; 0x2206 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    21ca:	e0 e3       	ldi	r30, 0x30	; 48
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	88 2f       	mov	r24, r24
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a9 01       	movw	r20, r18
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <DIO_u8GetPinValue+0x144>
    21de:	55 95       	asr	r21
    21e0:	47 95       	ror	r20
    21e2:	8a 95       	dec	r24
    21e4:	e2 f7       	brpl	.-8      	; 0x21de <DIO_u8GetPinValue+0x140>
    21e6:	ca 01       	movw	r24, r20
    21e8:	81 70       	andi	r24, 0x01	; 1
    21ea:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	88 23       	and	r24, r24
    21f0:	21 f4       	brne	.+8      	; 0x21fa <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    21f2:	ed 81       	ldd	r30, Y+5	; 0x05
    21f4:	fe 81       	ldd	r31, Y+6	; 0x06
    21f6:	10 82       	st	Z, r1
    21f8:	06 c0       	rjmp	.+12     	; 0x2206 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    21fa:	ed 81       	ldd	r30, Y+5	; 0x05
    21fc:	fe 81       	ldd	r31, Y+6	; 0x06
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	80 83       	st	Z, r24
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2204:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2208:	28 96       	adiw	r28, 0x08	; 8
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	00 d0       	rcall	.+0      	; 0x2220 <DIO_getPinValueWithoutPointer+0x6>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <DIO_getPinValueWithoutPointer+0x8>
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	8a 83       	std	Y+2, r24	; 0x02
    222a:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    222c:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	88 30       	cpi	r24, 0x08	; 8
    2232:	08 f0       	brcs	.+2      	; 0x2236 <DIO_getPinValueWithoutPointer+0x1c>
    2234:	6b c0       	rjmp	.+214    	; 0x230c <DIO_getPinValueWithoutPointer+0xf2>
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	84 30       	cpi	r24, 0x04	; 4
    223a:	08 f0       	brcs	.+2      	; 0x223e <DIO_getPinValueWithoutPointer+0x24>
    223c:	67 c0       	rjmp	.+206    	; 0x230c <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	3d 83       	std	Y+5, r19	; 0x05
    2246:	2c 83       	std	Y+4, r18	; 0x04
    2248:	4c 81       	ldd	r20, Y+4	; 0x04
    224a:	5d 81       	ldd	r21, Y+5	; 0x05
    224c:	41 30       	cpi	r20, 0x01	; 1
    224e:	51 05       	cpc	r21, r1
    2250:	41 f1       	breq	.+80     	; 0x22a2 <DIO_getPinValueWithoutPointer+0x88>
    2252:	8c 81       	ldd	r24, Y+4	; 0x04
    2254:	9d 81       	ldd	r25, Y+5	; 0x05
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	91 05       	cpc	r25, r1
    225a:	34 f4       	brge	.+12     	; 0x2268 <DIO_getPinValueWithoutPointer+0x4e>
    225c:	2c 81       	ldd	r18, Y+4	; 0x04
    225e:	3d 81       	ldd	r19, Y+5	; 0x05
    2260:	21 15       	cp	r18, r1
    2262:	31 05       	cpc	r19, r1
    2264:	61 f0       	breq	.+24     	; 0x227e <DIO_getPinValueWithoutPointer+0x64>
    2266:	52 c0       	rjmp	.+164    	; 0x230c <DIO_getPinValueWithoutPointer+0xf2>
    2268:	4c 81       	ldd	r20, Y+4	; 0x04
    226a:	5d 81       	ldd	r21, Y+5	; 0x05
    226c:	42 30       	cpi	r20, 0x02	; 2
    226e:	51 05       	cpc	r21, r1
    2270:	51 f1       	breq	.+84     	; 0x22c6 <DIO_getPinValueWithoutPointer+0xac>
    2272:	8c 81       	ldd	r24, Y+4	; 0x04
    2274:	9d 81       	ldd	r25, Y+5	; 0x05
    2276:	83 30       	cpi	r24, 0x03	; 3
    2278:	91 05       	cpc	r25, r1
    227a:	b9 f1       	breq	.+110    	; 0x22ea <DIO_getPinValueWithoutPointer+0xd0>
    227c:	47 c0       	rjmp	.+142    	; 0x230c <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    227e:	e9 e3       	ldi	r30, 0x39	; 57
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a9 01       	movw	r20, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <DIO_getPinValueWithoutPointer+0x7c>
    2292:	55 95       	asr	r21
    2294:	47 95       	ror	r20
    2296:	8a 95       	dec	r24
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <DIO_getPinValueWithoutPointer+0x78>
    229a:	ca 01       	movw	r24, r20
    229c:	81 70       	andi	r24, 0x01	; 1
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	35 c0       	rjmp	.+106    	; 0x230c <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    22a2:	e6 e3       	ldi	r30, 0x36	; 54
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a9 01       	movw	r20, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <DIO_getPinValueWithoutPointer+0xa0>
    22b6:	55 95       	asr	r21
    22b8:	47 95       	ror	r20
    22ba:	8a 95       	dec	r24
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <DIO_getPinValueWithoutPointer+0x9c>
    22be:	ca 01       	movw	r24, r20
    22c0:	81 70       	andi	r24, 0x01	; 1
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	23 c0       	rjmp	.+70     	; 0x230c <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    22c6:	e3 e3       	ldi	r30, 0x33	; 51
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a9 01       	movw	r20, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <DIO_getPinValueWithoutPointer+0xc4>
    22da:	55 95       	asr	r21
    22dc:	47 95       	ror	r20
    22de:	8a 95       	dec	r24
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <DIO_getPinValueWithoutPointer+0xc0>
    22e2:	ca 01       	movw	r24, r20
    22e4:	81 70       	andi	r24, 0x01	; 1
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	11 c0       	rjmp	.+34     	; 0x230c <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    22ea:	e0 e3       	ldi	r30, 0x30	; 48
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a9 01       	movw	r20, r18
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <DIO_getPinValueWithoutPointer+0xe8>
    22fe:	55 95       	asr	r21
    2300:	47 95       	ror	r20
    2302:	8a 95       	dec	r24
    2304:	e2 f7       	brpl	.-8      	; 0x22fe <DIO_getPinValueWithoutPointer+0xe4>
    2306:	ca 01       	movw	r24, r20
    2308:	81 70       	andi	r24, 0x01	; 1
    230a:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    230c:	89 81       	ldd	r24, Y+1	; 0x01
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	2d 97       	sbiw	r28, 0x0d	; 13
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	3c 87       	std	Y+12, r19	; 0x0c
    233e:	2b 87       	std	Y+11, r18	; 0x0b
    2340:	8b 85       	ldd	r24, Y+11	; 0x0b
    2342:	9c 85       	ldd	r25, Y+12	; 0x0c
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	91 05       	cpc	r25, r1
    2348:	71 f1       	breq	.+92     	; 0x23a6 <DIO_u8SetPortDirection+0x88>
    234a:	2b 85       	ldd	r18, Y+11	; 0x0b
    234c:	3c 85       	ldd	r19, Y+12	; 0x0c
    234e:	22 30       	cpi	r18, 0x02	; 2
    2350:	31 05       	cpc	r19, r1
    2352:	2c f4       	brge	.+10     	; 0x235e <DIO_u8SetPortDirection+0x40>
    2354:	8b 85       	ldd	r24, Y+11	; 0x0b
    2356:	9c 85       	ldd	r25, Y+12	; 0x0c
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f0       	breq	.+26     	; 0x2376 <DIO_u8SetPortDirection+0x58>
    235c:	6b c0       	rjmp	.+214    	; 0x2434 <DIO_u8SetPortDirection+0x116>
    235e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2360:	3c 85       	ldd	r19, Y+12	; 0x0c
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	b9 f1       	breq	.+110    	; 0x23d6 <DIO_u8SetPortDirection+0xb8>
    2368:	8b 85       	ldd	r24, Y+11	; 0x0b
    236a:	9c 85       	ldd	r25, Y+12	; 0x0c
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	91 05       	cpc	r25, r1
    2370:	09 f4       	brne	.+2      	; 0x2374 <DIO_u8SetPortDirection+0x56>
    2372:	49 c0       	rjmp	.+146    	; 0x2406 <DIO_u8SetPortDirection+0xe8>
    2374:	5f c0       	rjmp	.+190    	; 0x2434 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	3a 87       	std	Y+10, r19	; 0x0a
    237e:	29 87       	std	Y+9, r18	; 0x09
    2380:	89 85       	ldd	r24, Y+9	; 0x09
    2382:	9a 85       	ldd	r25, Y+10	; 0x0a
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	31 f0       	breq	.+12     	; 0x2394 <DIO_u8SetPortDirection+0x76>
    2388:	29 85       	ldd	r18, Y+9	; 0x09
    238a:	3a 85       	ldd	r19, Y+10	; 0x0a
    238c:	21 30       	cpi	r18, 0x01	; 1
    238e:	31 05       	cpc	r19, r1
    2390:	29 f0       	breq	.+10     	; 0x239c <DIO_u8SetPortDirection+0x7e>
    2392:	50 c0       	rjmp	.+160    	; 0x2434 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    2394:	ea e3       	ldi	r30, 0x3A	; 58
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	10 82       	st	Z, r1
    239a:	4c c0       	rjmp	.+152    	; 0x2434 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    239c:	ea e3       	ldi	r30, 0x3A	; 58
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	80 83       	st	Z, r24
    23a4:	47 c0       	rjmp	.+142    	; 0x2434 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	38 87       	std	Y+8, r19	; 0x08
    23ae:	2f 83       	std	Y+7, r18	; 0x07
    23b0:	8f 81       	ldd	r24, Y+7	; 0x07
    23b2:	98 85       	ldd	r25, Y+8	; 0x08
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	31 f0       	breq	.+12     	; 0x23c4 <DIO_u8SetPortDirection+0xa6>
    23b8:	2f 81       	ldd	r18, Y+7	; 0x07
    23ba:	38 85       	ldd	r19, Y+8	; 0x08
    23bc:	21 30       	cpi	r18, 0x01	; 1
    23be:	31 05       	cpc	r19, r1
    23c0:	29 f0       	breq	.+10     	; 0x23cc <DIO_u8SetPortDirection+0xae>
    23c2:	38 c0       	rjmp	.+112    	; 0x2434 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    23c4:	e7 e3       	ldi	r30, 0x37	; 55
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	10 82       	st	Z, r1
    23ca:	34 c0       	rjmp	.+104    	; 0x2434 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    23cc:	e7 e3       	ldi	r30, 0x37	; 55
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	8f ef       	ldi	r24, 0xFF	; 255
    23d2:	80 83       	st	Z, r24
    23d4:	2f c0       	rjmp	.+94     	; 0x2434 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	3e 83       	std	Y+6, r19	; 0x06
    23de:	2d 83       	std	Y+5, r18	; 0x05
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	31 f0       	breq	.+12     	; 0x23f4 <DIO_u8SetPortDirection+0xd6>
    23e8:	2d 81       	ldd	r18, Y+5	; 0x05
    23ea:	3e 81       	ldd	r19, Y+6	; 0x06
    23ec:	21 30       	cpi	r18, 0x01	; 1
    23ee:	31 05       	cpc	r19, r1
    23f0:	29 f0       	breq	.+10     	; 0x23fc <DIO_u8SetPortDirection+0xde>
    23f2:	20 c0       	rjmp	.+64     	; 0x2434 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    23f4:	e4 e3       	ldi	r30, 0x34	; 52
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	10 82       	st	Z, r1
    23fa:	1c c0       	rjmp	.+56     	; 0x2434 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    23fc:	e4 e3       	ldi	r30, 0x34	; 52
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	8f ef       	ldi	r24, 0xFF	; 255
    2402:	80 83       	st	Z, r24
    2404:	17 c0       	rjmp	.+46     	; 0x2434 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	3c 83       	std	Y+4, r19	; 0x04
    240e:	2b 83       	std	Y+3, r18	; 0x03
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	31 f0       	breq	.+12     	; 0x2424 <DIO_u8SetPortDirection+0x106>
    2418:	2b 81       	ldd	r18, Y+3	; 0x03
    241a:	3c 81       	ldd	r19, Y+4	; 0x04
    241c:	21 30       	cpi	r18, 0x01	; 1
    241e:	31 05       	cpc	r19, r1
    2420:	29 f0       	breq	.+10     	; 0x242c <DIO_u8SetPortDirection+0x10e>
    2422:	08 c0       	rjmp	.+16     	; 0x2434 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2424:	e1 e3       	ldi	r30, 0x31	; 49
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	10 82       	st	Z, r1
    242a:	04 c0       	rjmp	.+8      	; 0x2434 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    242c:	e1 e3       	ldi	r30, 0x31	; 49
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    2434:	2d 96       	adiw	r28, 0x0d	; 13
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	2d 97       	sbiw	r28, 0x0d	; 13
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	8a 83       	std	Y+2, r24	; 0x02
    245c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	84 30       	cpi	r24, 0x04	; 4
    2466:	08 f0       	brcs	.+2      	; 0x246a <DIO_u8SetPortValue+0x24>
    2468:	80 c0       	rjmp	.+256    	; 0x256a <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	3d 87       	std	Y+13, r19	; 0x0d
    2472:	2c 87       	std	Y+12, r18	; 0x0c
    2474:	8c 85       	ldd	r24, Y+12	; 0x0c
    2476:	9d 85       	ldd	r25, Y+13	; 0x0d
    2478:	81 30       	cpi	r24, 0x01	; 1
    247a:	91 05       	cpc	r25, r1
    247c:	71 f1       	breq	.+92     	; 0x24da <DIO_u8SetPortValue+0x94>
    247e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2480:	3d 85       	ldd	r19, Y+13	; 0x0d
    2482:	22 30       	cpi	r18, 0x02	; 2
    2484:	31 05       	cpc	r19, r1
    2486:	2c f4       	brge	.+10     	; 0x2492 <DIO_u8SetPortValue+0x4c>
    2488:	8c 85       	ldd	r24, Y+12	; 0x0c
    248a:	9d 85       	ldd	r25, Y+13	; 0x0d
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	69 f0       	breq	.+26     	; 0x24aa <DIO_u8SetPortValue+0x64>
    2490:	6d c0       	rjmp	.+218    	; 0x256c <DIO_u8SetPortValue+0x126>
    2492:	2c 85       	ldd	r18, Y+12	; 0x0c
    2494:	3d 85       	ldd	r19, Y+13	; 0x0d
    2496:	22 30       	cpi	r18, 0x02	; 2
    2498:	31 05       	cpc	r19, r1
    249a:	b9 f1       	breq	.+110    	; 0x250a <DIO_u8SetPortValue+0xc4>
    249c:	8c 85       	ldd	r24, Y+12	; 0x0c
    249e:	9d 85       	ldd	r25, Y+13	; 0x0d
    24a0:	83 30       	cpi	r24, 0x03	; 3
    24a2:	91 05       	cpc	r25, r1
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <DIO_u8SetPortValue+0x62>
    24a6:	49 c0       	rjmp	.+146    	; 0x253a <DIO_u8SetPortValue+0xf4>
    24a8:	61 c0       	rjmp	.+194    	; 0x256c <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	3b 87       	std	Y+11, r19	; 0x0b
    24b2:	2a 87       	std	Y+10, r18	; 0x0a
    24b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	31 f0       	breq	.+12     	; 0x24c8 <DIO_u8SetPortValue+0x82>
    24bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    24be:	3b 85       	ldd	r19, Y+11	; 0x0b
    24c0:	21 30       	cpi	r18, 0x01	; 1
    24c2:	31 05       	cpc	r19, r1
    24c4:	29 f0       	breq	.+10     	; 0x24d0 <DIO_u8SetPortValue+0x8a>
    24c6:	52 c0       	rjmp	.+164    	; 0x256c <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    24c8:	eb e3       	ldi	r30, 0x3B	; 59
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	10 82       	st	Z, r1
    24ce:	4e c0       	rjmp	.+156    	; 0x256c <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    24d0:	eb e3       	ldi	r30, 0x3B	; 59
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	8f ef       	ldi	r24, 0xFF	; 255
    24d6:	80 83       	st	Z, r24
    24d8:	49 c0       	rjmp	.+146    	; 0x256c <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	39 87       	std	Y+9, r19	; 0x09
    24e2:	28 87       	std	Y+8, r18	; 0x08
    24e4:	88 85       	ldd	r24, Y+8	; 0x08
    24e6:	99 85       	ldd	r25, Y+9	; 0x09
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	31 f0       	breq	.+12     	; 0x24f8 <DIO_u8SetPortValue+0xb2>
    24ec:	28 85       	ldd	r18, Y+8	; 0x08
    24ee:	39 85       	ldd	r19, Y+9	; 0x09
    24f0:	21 30       	cpi	r18, 0x01	; 1
    24f2:	31 05       	cpc	r19, r1
    24f4:	29 f0       	breq	.+10     	; 0x2500 <DIO_u8SetPortValue+0xba>
    24f6:	3a c0       	rjmp	.+116    	; 0x256c <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    24f8:	e8 e3       	ldi	r30, 0x38	; 56
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	10 82       	st	Z, r1
    24fe:	36 c0       	rjmp	.+108    	; 0x256c <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2500:	e8 e3       	ldi	r30, 0x38	; 56
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	8f ef       	ldi	r24, 0xFF	; 255
    2506:	80 83       	st	Z, r24
    2508:	31 c0       	rjmp	.+98     	; 0x256c <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	3f 83       	std	Y+7, r19	; 0x07
    2512:	2e 83       	std	Y+6, r18	; 0x06
    2514:	8e 81       	ldd	r24, Y+6	; 0x06
    2516:	9f 81       	ldd	r25, Y+7	; 0x07
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	31 f0       	breq	.+12     	; 0x2528 <DIO_u8SetPortValue+0xe2>
    251c:	2e 81       	ldd	r18, Y+6	; 0x06
    251e:	3f 81       	ldd	r19, Y+7	; 0x07
    2520:	21 30       	cpi	r18, 0x01	; 1
    2522:	31 05       	cpc	r19, r1
    2524:	29 f0       	breq	.+10     	; 0x2530 <DIO_u8SetPortValue+0xea>
    2526:	22 c0       	rjmp	.+68     	; 0x256c <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    2528:	e5 e3       	ldi	r30, 0x35	; 53
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	10 82       	st	Z, r1
    252e:	1e c0       	rjmp	.+60     	; 0x256c <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2530:	e5 e3       	ldi	r30, 0x35	; 53
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	8f ef       	ldi	r24, 0xFF	; 255
    2536:	80 83       	st	Z, r24
    2538:	19 c0       	rjmp	.+50     	; 0x256c <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	3d 83       	std	Y+5, r19	; 0x05
    2542:	2c 83       	std	Y+4, r18	; 0x04
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	31 f0       	breq	.+12     	; 0x2558 <DIO_u8SetPortValue+0x112>
    254c:	2c 81       	ldd	r18, Y+4	; 0x04
    254e:	3d 81       	ldd	r19, Y+5	; 0x05
    2550:	21 30       	cpi	r18, 0x01	; 1
    2552:	31 05       	cpc	r19, r1
    2554:	29 f0       	breq	.+10     	; 0x2560 <DIO_u8SetPortValue+0x11a>
    2556:	0a c0       	rjmp	.+20     	; 0x256c <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    2558:	e2 e3       	ldi	r30, 0x32	; 50
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	10 82       	st	Z, r1
    255e:	06 c0       	rjmp	.+12     	; 0x256c <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    2560:	e2 e3       	ldi	r30, 0x32	; 50
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	8f ef       	ldi	r24, 0xFF	; 255
    2566:	80 83       	st	Z, r24
    2568:	01 c0       	rjmp	.+2      	; 0x256c <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    256a:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    256c:	89 81       	ldd	r24, Y+1	; 0x01
}
    256e:	2d 96       	adiw	r28, 0x0d	; 13
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <DIO_u8GetPortValue+0x6>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <DIO_u8GetPortValue+0x8>
    2588:	00 d0       	rcall	.+0      	; 0x258a <DIO_u8GetPortValue+0xa>
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	8a 83       	std	Y+2, r24	; 0x02
    2590:	7c 83       	std	Y+4, r23	; 0x04
    2592:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	84 30       	cpi	r24, 0x04	; 4
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <DIO_u8GetPortValue+0x20>
    259e:	3f c0       	rjmp	.+126    	; 0x261e <DIO_u8GetPortValue+0x9e>
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	d9 f1       	breq	.+118    	; 0x261e <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	3e 83       	std	Y+6, r19	; 0x06
    25b0:	2d 83       	std	Y+5, r18	; 0x05
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	9e 81       	ldd	r25, Y+6	; 0x06
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	91 05       	cpc	r25, r1
    25ba:	e1 f0       	breq	.+56     	; 0x25f4 <DIO_u8GetPortValue+0x74>
    25bc:	2d 81       	ldd	r18, Y+5	; 0x05
    25be:	3e 81       	ldd	r19, Y+6	; 0x06
    25c0:	22 30       	cpi	r18, 0x02	; 2
    25c2:	31 05       	cpc	r19, r1
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <DIO_u8GetPortValue+0x50>
    25c6:	8d 81       	ldd	r24, Y+5	; 0x05
    25c8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	61 f0       	breq	.+24     	; 0x25e6 <DIO_u8GetPortValue+0x66>
    25ce:	28 c0       	rjmp	.+80     	; 0x2620 <DIO_u8GetPortValue+0xa0>
    25d0:	2d 81       	ldd	r18, Y+5	; 0x05
    25d2:	3e 81       	ldd	r19, Y+6	; 0x06
    25d4:	22 30       	cpi	r18, 0x02	; 2
    25d6:	31 05       	cpc	r19, r1
    25d8:	a1 f0       	breq	.+40     	; 0x2602 <DIO_u8GetPortValue+0x82>
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	83 30       	cpi	r24, 0x03	; 3
    25e0:	91 05       	cpc	r25, r1
    25e2:	b1 f0       	breq	.+44     	; 0x2610 <DIO_u8GetPortValue+0x90>
    25e4:	1d c0       	rjmp	.+58     	; 0x2620 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    25e6:	e9 e3       	ldi	r30, 0x39	; 57
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	eb 81       	ldd	r30, Y+3	; 0x03
    25ee:	fc 81       	ldd	r31, Y+4	; 0x04
    25f0:	80 83       	st	Z, r24
    25f2:	16 c0       	rjmp	.+44     	; 0x2620 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    25f4:	e6 e3       	ldi	r30, 0x36	; 54
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	eb 81       	ldd	r30, Y+3	; 0x03
    25fc:	fc 81       	ldd	r31, Y+4	; 0x04
    25fe:	80 83       	st	Z, r24
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    2602:	e3 e3       	ldi	r30, 0x33	; 51
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	eb 81       	ldd	r30, Y+3	; 0x03
    260a:	fc 81       	ldd	r31, Y+4	; 0x04
    260c:	80 83       	st	Z, r24
    260e:	08 c0       	rjmp	.+16     	; 0x2620 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2610:	e0 e3       	ldi	r30, 0x30	; 48
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	eb 81       	ldd	r30, Y+3	; 0x03
    2618:	fc 81       	ldd	r31, Y+4	; 0x04
    261a:	80 83       	st	Z, r24
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    261e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2620:	89 81       	ldd	r24, Y+1	; 0x01
}
    2622:	26 96       	adiw	r28, 0x06	; 6
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    2634:	8f 92       	push	r8
    2636:	af 92       	push	r10
    2638:	cf 92       	push	r12
    263a:	ef 92       	push	r14
    263c:	0f 93       	push	r16
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	2c 97       	sbiw	r28, 0x0c	; 12
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	6a 83       	std	Y+2, r22	; 0x02
    2656:	4b 83       	std	Y+3, r20	; 0x03
    2658:	2c 83       	std	Y+4, r18	; 0x04
    265a:	0d 83       	std	Y+5, r16	; 0x05
    265c:	ee 82       	std	Y+6, r14	; 0x06
    265e:	cf 82       	std	Y+7, r12	; 0x07
    2660:	a8 86       	std	Y+8, r10	; 0x08
    2662:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	3b 87       	std	Y+11, r19	; 0x0b
    266c:	2a 87       	std	Y+10, r18	; 0x0a
    266e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2670:	9b 85       	ldd	r25, Y+11	; 0x0b
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	91 05       	cpc	r25, r1
    2676:	09 f4       	brne	.+2      	; 0x267a <DIO_u8SetValueToAllPins+0x46>
    2678:	a8 c0       	rjmp	.+336    	; 0x27ca <DIO_u8SetValueToAllPins+0x196>
    267a:	2a 85       	ldd	r18, Y+10	; 0x0a
    267c:	3b 85       	ldd	r19, Y+11	; 0x0b
    267e:	22 30       	cpi	r18, 0x02	; 2
    2680:	31 05       	cpc	r19, r1
    2682:	2c f4       	brge	.+10     	; 0x268e <DIO_u8SetValueToAllPins+0x5a>
    2684:	8a 85       	ldd	r24, Y+10	; 0x0a
    2686:	9b 85       	ldd	r25, Y+11	; 0x0b
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	71 f0       	breq	.+28     	; 0x26a8 <DIO_u8SetValueToAllPins+0x74>
    268c:	50 c2       	rjmp	.+1184   	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
    268e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2690:	3b 85       	ldd	r19, Y+11	; 0x0b
    2692:	22 30       	cpi	r18, 0x02	; 2
    2694:	31 05       	cpc	r19, r1
    2696:	09 f4       	brne	.+2      	; 0x269a <DIO_u8SetValueToAllPins+0x66>
    2698:	29 c1       	rjmp	.+594    	; 0x28ec <DIO_u8SetValueToAllPins+0x2b8>
    269a:	8a 85       	ldd	r24, Y+10	; 0x0a
    269c:	9b 85       	ldd	r25, Y+11	; 0x0b
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	91 05       	cpc	r25, r1
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <DIO_u8SetValueToAllPins+0x72>
    26a4:	b4 c1       	rjmp	.+872    	; 0x2a0e <DIO_u8SetValueToAllPins+0x3da>
    26a6:	43 c2       	rjmp	.+1158   	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	41 f4       	brne	.+16     	; 0x26be <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    26ae:	ab e3       	ldi	r26, 0x3B	; 59
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	eb e3       	ldi	r30, 0x3B	; 59
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	81 60       	ori	r24, 0x01	; 1
    26ba:	8c 93       	st	X, r24
    26bc:	07 c0       	rjmp	.+14     	; 0x26cc <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    26be:	ab e3       	ldi	r26, 0x3B	; 59
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	eb e3       	ldi	r30, 0x3B	; 59
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	8e 7f       	andi	r24, 0xFE	; 254
    26ca:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	41 f4       	brne	.+16     	; 0x26e2 <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    26d2:	ab e3       	ldi	r26, 0x3B	; 59
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	eb e3       	ldi	r30, 0x3B	; 59
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	82 60       	ori	r24, 0x02	; 2
    26de:	8c 93       	st	X, r24
    26e0:	07 c0       	rjmp	.+14     	; 0x26f0 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    26e2:	ab e3       	ldi	r26, 0x3B	; 59
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	eb e3       	ldi	r30, 0x3B	; 59
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	8d 7f       	andi	r24, 0xFD	; 253
    26ee:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    26f0:	8c 81       	ldd	r24, Y+4	; 0x04
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	41 f4       	brne	.+16     	; 0x2706 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    26f6:	ab e3       	ldi	r26, 0x3B	; 59
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	eb e3       	ldi	r30, 0x3B	; 59
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	84 60       	ori	r24, 0x04	; 4
    2702:	8c 93       	st	X, r24
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    2706:	ab e3       	ldi	r26, 0x3B	; 59
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	eb e3       	ldi	r30, 0x3B	; 59
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	8b 7f       	andi	r24, 0xFB	; 251
    2712:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	41 f4       	brne	.+16     	; 0x272a <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    271a:	ab e3       	ldi	r26, 0x3B	; 59
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	eb e3       	ldi	r30, 0x3B	; 59
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	88 60       	ori	r24, 0x08	; 8
    2726:	8c 93       	st	X, r24
    2728:	07 c0       	rjmp	.+14     	; 0x2738 <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    272a:	ab e3       	ldi	r26, 0x3B	; 59
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	eb e3       	ldi	r30, 0x3B	; 59
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	87 7f       	andi	r24, 0xF7	; 247
    2736:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    2738:	8e 81       	ldd	r24, Y+6	; 0x06
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	41 f4       	brne	.+16     	; 0x274e <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    273e:	ab e3       	ldi	r26, 0x3B	; 59
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	eb e3       	ldi	r30, 0x3B	; 59
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	80 61       	ori	r24, 0x10	; 16
    274a:	8c 93       	st	X, r24
    274c:	07 c0       	rjmp	.+14     	; 0x275c <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    274e:	ab e3       	ldi	r26, 0x3B	; 59
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	eb e3       	ldi	r30, 0x3B	; 59
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	8f 7e       	andi	r24, 0xEF	; 239
    275a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    275c:	8f 81       	ldd	r24, Y+7	; 0x07
    275e:	81 30       	cpi	r24, 0x01	; 1
    2760:	41 f4       	brne	.+16     	; 0x2772 <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    2762:	ab e3       	ldi	r26, 0x3B	; 59
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	eb e3       	ldi	r30, 0x3B	; 59
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	80 62       	ori	r24, 0x20	; 32
    276e:	8c 93       	st	X, r24
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    2772:	ab e3       	ldi	r26, 0x3B	; 59
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	eb e3       	ldi	r30, 0x3B	; 59
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	8f 7d       	andi	r24, 0xDF	; 223
    277e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    2780:	88 85       	ldd	r24, Y+8	; 0x08
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	41 f4       	brne	.+16     	; 0x2796 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    2786:	ab e3       	ldi	r26, 0x3B	; 59
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	eb e3       	ldi	r30, 0x3B	; 59
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	80 64       	ori	r24, 0x40	; 64
    2792:	8c 93       	st	X, r24
    2794:	07 c0       	rjmp	.+14     	; 0x27a4 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    2796:	ab e3       	ldi	r26, 0x3B	; 59
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	eb e3       	ldi	r30, 0x3B	; 59
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	8f 7b       	andi	r24, 0xBF	; 191
    27a2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	41 f4       	brne	.+16     	; 0x27ba <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    27aa:	ab e3       	ldi	r26, 0x3B	; 59
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	eb e3       	ldi	r30, 0x3B	; 59
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	80 68       	ori	r24, 0x80	; 128
    27b6:	8c 93       	st	X, r24
    27b8:	ba c1       	rjmp	.+884    	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    27ba:	ab e3       	ldi	r26, 0x3B	; 59
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	eb e3       	ldi	r30, 0x3B	; 59
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	8f 77       	andi	r24, 0x7F	; 127
    27c6:	8c 93       	st	X, r24
    27c8:	b2 c1       	rjmp	.+868    	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	41 f4       	brne	.+16     	; 0x27e0 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    27d0:	a8 e3       	ldi	r26, 0x38	; 56
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e8 e3       	ldi	r30, 0x38	; 56
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	81 60       	ori	r24, 0x01	; 1
    27dc:	8c 93       	st	X, r24
    27de:	07 c0       	rjmp	.+14     	; 0x27ee <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    27e0:	a8 e3       	ldi	r26, 0x38	; 56
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e8 e3       	ldi	r30, 0x38	; 56
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	8e 7f       	andi	r24, 0xFE	; 254
    27ec:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	41 f4       	brne	.+16     	; 0x2804 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    27f4:	a8 e3       	ldi	r26, 0x38	; 56
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e8 e3       	ldi	r30, 0x38	; 56
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	82 60       	ori	r24, 0x02	; 2
    2800:	8c 93       	st	X, r24
    2802:	07 c0       	rjmp	.+14     	; 0x2812 <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    2804:	a8 e3       	ldi	r26, 0x38	; 56
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e8 e3       	ldi	r30, 0x38	; 56
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	8d 7f       	andi	r24, 0xFD	; 253
    2810:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	41 f4       	brne	.+16     	; 0x2828 <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    2818:	a8 e3       	ldi	r26, 0x38	; 56
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e8 e3       	ldi	r30, 0x38	; 56
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	84 60       	ori	r24, 0x04	; 4
    2824:	8c 93       	st	X, r24
    2826:	07 c0       	rjmp	.+14     	; 0x2836 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    2828:	a8 e3       	ldi	r26, 0x38	; 56
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	e8 e3       	ldi	r30, 0x38	; 56
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	8b 7f       	andi	r24, 0xFB	; 251
    2834:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	41 f4       	brne	.+16     	; 0x284c <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    283c:	a8 e3       	ldi	r26, 0x38	; 56
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e8 e3       	ldi	r30, 0x38	; 56
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	88 60       	ori	r24, 0x08	; 8
    2848:	8c 93       	st	X, r24
    284a:	07 c0       	rjmp	.+14     	; 0x285a <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    284c:	a8 e3       	ldi	r26, 0x38	; 56
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e8 e3       	ldi	r30, 0x38	; 56
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	87 7f       	andi	r24, 0xF7	; 247
    2858:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    285a:	8e 81       	ldd	r24, Y+6	; 0x06
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	41 f4       	brne	.+16     	; 0x2870 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    2860:	a8 e3       	ldi	r26, 0x38	; 56
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e8 e3       	ldi	r30, 0x38	; 56
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	80 61       	ori	r24, 0x10	; 16
    286c:	8c 93       	st	X, r24
    286e:	07 c0       	rjmp	.+14     	; 0x287e <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    2870:	a8 e3       	ldi	r26, 0x38	; 56
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	e8 e3       	ldi	r30, 0x38	; 56
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	8f 7e       	andi	r24, 0xEF	; 239
    287c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    287e:	8f 81       	ldd	r24, Y+7	; 0x07
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	41 f4       	brne	.+16     	; 0x2894 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    2884:	a8 e3       	ldi	r26, 0x38	; 56
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e8 e3       	ldi	r30, 0x38	; 56
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	80 62       	ori	r24, 0x20	; 32
    2890:	8c 93       	st	X, r24
    2892:	07 c0       	rjmp	.+14     	; 0x28a2 <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    2894:	a8 e3       	ldi	r26, 0x38	; 56
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e8 e3       	ldi	r30, 0x38	; 56
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	8f 7d       	andi	r24, 0xDF	; 223
    28a0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    28a2:	88 85       	ldd	r24, Y+8	; 0x08
    28a4:	81 30       	cpi	r24, 0x01	; 1
    28a6:	41 f4       	brne	.+16     	; 0x28b8 <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    28a8:	a8 e3       	ldi	r26, 0x38	; 56
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e8 e3       	ldi	r30, 0x38	; 56
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	80 64       	ori	r24, 0x40	; 64
    28b4:	8c 93       	st	X, r24
    28b6:	07 c0       	rjmp	.+14     	; 0x28c6 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    28b8:	a8 e3       	ldi	r26, 0x38	; 56
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e8 e3       	ldi	r30, 0x38	; 56
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	8f 7b       	andi	r24, 0xBF	; 191
    28c4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    28c6:	89 85       	ldd	r24, Y+9	; 0x09
    28c8:	81 30       	cpi	r24, 0x01	; 1
    28ca:	41 f4       	brne	.+16     	; 0x28dc <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    28cc:	a8 e3       	ldi	r26, 0x38	; 56
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e8 e3       	ldi	r30, 0x38	; 56
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	80 68       	ori	r24, 0x80	; 128
    28d8:	8c 93       	st	X, r24
    28da:	29 c1       	rjmp	.+594    	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    28dc:	a8 e3       	ldi	r26, 0x38	; 56
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e8 e3       	ldi	r30, 0x38	; 56
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	8f 77       	andi	r24, 0x7F	; 127
    28e8:	8c 93       	st	X, r24
    28ea:	21 c1       	rjmp	.+578    	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	41 f4       	brne	.+16     	; 0x2902 <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    28f2:	a5 e3       	ldi	r26, 0x35	; 53
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e5 e3       	ldi	r30, 0x35	; 53
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	81 60       	ori	r24, 0x01	; 1
    28fe:	8c 93       	st	X, r24
    2900:	07 c0       	rjmp	.+14     	; 0x2910 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2902:	a5 e3       	ldi	r26, 0x35	; 53
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e5 e3       	ldi	r30, 0x35	; 53
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	8e 7f       	andi	r24, 0xFE	; 254
    290e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	41 f4       	brne	.+16     	; 0x2926 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2916:	a5 e3       	ldi	r26, 0x35	; 53
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e5 e3       	ldi	r30, 0x35	; 53
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	82 60       	ori	r24, 0x02	; 2
    2922:	8c 93       	st	X, r24
    2924:	07 c0       	rjmp	.+14     	; 0x2934 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2926:	a5 e3       	ldi	r26, 0x35	; 53
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e5 e3       	ldi	r30, 0x35	; 53
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	8d 7f       	andi	r24, 0xFD	; 253
    2932:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2934:	8c 81       	ldd	r24, Y+4	; 0x04
    2936:	81 30       	cpi	r24, 0x01	; 1
    2938:	41 f4       	brne	.+16     	; 0x294a <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    293a:	a5 e3       	ldi	r26, 0x35	; 53
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e5 e3       	ldi	r30, 0x35	; 53
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	84 60       	ori	r24, 0x04	; 4
    2946:	8c 93       	st	X, r24
    2948:	07 c0       	rjmp	.+14     	; 0x2958 <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    294a:	a5 e3       	ldi	r26, 0x35	; 53
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e5 e3       	ldi	r30, 0x35	; 53
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	8b 7f       	andi	r24, 0xFB	; 251
    2956:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	81 30       	cpi	r24, 0x01	; 1
    295c:	41 f4       	brne	.+16     	; 0x296e <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    295e:	a5 e3       	ldi	r26, 0x35	; 53
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e5 e3       	ldi	r30, 0x35	; 53
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	88 60       	ori	r24, 0x08	; 8
    296a:	8c 93       	st	X, r24
    296c:	07 c0       	rjmp	.+14     	; 0x297c <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    296e:	a5 e3       	ldi	r26, 0x35	; 53
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e5 e3       	ldi	r30, 0x35	; 53
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	87 7f       	andi	r24, 0xF7	; 247
    297a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    297c:	8e 81       	ldd	r24, Y+6	; 0x06
    297e:	81 30       	cpi	r24, 0x01	; 1
    2980:	41 f4       	brne	.+16     	; 0x2992 <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    2982:	a5 e3       	ldi	r26, 0x35	; 53
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e5 e3       	ldi	r30, 0x35	; 53
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	80 61       	ori	r24, 0x10	; 16
    298e:	8c 93       	st	X, r24
    2990:	07 c0       	rjmp	.+14     	; 0x29a0 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    2992:	a5 e3       	ldi	r26, 0x35	; 53
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e5 e3       	ldi	r30, 0x35	; 53
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	8f 7e       	andi	r24, 0xEF	; 239
    299e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    29a0:	8f 81       	ldd	r24, Y+7	; 0x07
    29a2:	81 30       	cpi	r24, 0x01	; 1
    29a4:	41 f4       	brne	.+16     	; 0x29b6 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    29a6:	a5 e3       	ldi	r26, 0x35	; 53
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e5 e3       	ldi	r30, 0x35	; 53
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	80 62       	ori	r24, 0x20	; 32
    29b2:	8c 93       	st	X, r24
    29b4:	07 c0       	rjmp	.+14     	; 0x29c4 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    29b6:	a5 e3       	ldi	r26, 0x35	; 53
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e5 e3       	ldi	r30, 0x35	; 53
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8f 7d       	andi	r24, 0xDF	; 223
    29c2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    29c4:	88 85       	ldd	r24, Y+8	; 0x08
    29c6:	81 30       	cpi	r24, 0x01	; 1
    29c8:	41 f4       	brne	.+16     	; 0x29da <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    29ca:	a5 e3       	ldi	r26, 0x35	; 53
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e5 e3       	ldi	r30, 0x35	; 53
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	80 64       	ori	r24, 0x40	; 64
    29d6:	8c 93       	st	X, r24
    29d8:	07 c0       	rjmp	.+14     	; 0x29e8 <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    29da:	a5 e3       	ldi	r26, 0x35	; 53
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e5 e3       	ldi	r30, 0x35	; 53
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	8f 7b       	andi	r24, 0xBF	; 191
    29e6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	81 30       	cpi	r24, 0x01	; 1
    29ec:	41 f4       	brne	.+16     	; 0x29fe <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    29ee:	a5 e3       	ldi	r26, 0x35	; 53
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e5 e3       	ldi	r30, 0x35	; 53
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	80 68       	ori	r24, 0x80	; 128
    29fa:	8c 93       	st	X, r24
    29fc:	98 c0       	rjmp	.+304    	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    29fe:	a5 e3       	ldi	r26, 0x35	; 53
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e5 e3       	ldi	r30, 0x35	; 53
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	8f 77       	andi	r24, 0x7F	; 127
    2a0a:	8c 93       	st	X, r24
    2a0c:	90 c0       	rjmp	.+288    	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	41 f4       	brne	.+16     	; 0x2a24 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2a14:	a2 e3       	ldi	r26, 0x32	; 50
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e2 e3       	ldi	r30, 0x32	; 50
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	81 60       	ori	r24, 0x01	; 1
    2a20:	8c 93       	st	X, r24
    2a22:	07 c0       	rjmp	.+14     	; 0x2a32 <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2a24:	a2 e3       	ldi	r26, 0x32	; 50
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e2 e3       	ldi	r30, 0x32	; 50
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8e 7f       	andi	r24, 0xFE	; 254
    2a30:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	41 f4       	brne	.+16     	; 0x2a48 <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    2a38:	a2 e3       	ldi	r26, 0x32	; 50
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	e2 e3       	ldi	r30, 0x32	; 50
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	82 60       	ori	r24, 0x02	; 2
    2a44:	8c 93       	st	X, r24
    2a46:	07 c0       	rjmp	.+14     	; 0x2a56 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    2a48:	a2 e3       	ldi	r26, 0x32	; 50
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e2 e3       	ldi	r30, 0x32	; 50
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	8d 7f       	andi	r24, 0xFD	; 253
    2a54:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2a56:	8c 81       	ldd	r24, Y+4	; 0x04
    2a58:	81 30       	cpi	r24, 0x01	; 1
    2a5a:	41 f4       	brne	.+16     	; 0x2a6c <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    2a5c:	a2 e3       	ldi	r26, 0x32	; 50
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e2 e3       	ldi	r30, 0x32	; 50
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	84 60       	ori	r24, 0x04	; 4
    2a68:	8c 93       	st	X, r24
    2a6a:	07 c0       	rjmp	.+14     	; 0x2a7a <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    2a6c:	a2 e3       	ldi	r26, 0x32	; 50
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e2 e3       	ldi	r30, 0x32	; 50
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	8b 7f       	andi	r24, 0xFB	; 251
    2a78:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	41 f4       	brne	.+16     	; 0x2a90 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    2a80:	a2 e3       	ldi	r26, 0x32	; 50
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e2 e3       	ldi	r30, 0x32	; 50
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	88 60       	ori	r24, 0x08	; 8
    2a8c:	8c 93       	st	X, r24
    2a8e:	07 c0       	rjmp	.+14     	; 0x2a9e <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    2a90:	a2 e3       	ldi	r26, 0x32	; 50
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e2 e3       	ldi	r30, 0x32	; 50
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	87 7f       	andi	r24, 0xF7	; 247
    2a9c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    2a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa0:	81 30       	cpi	r24, 0x01	; 1
    2aa2:	41 f4       	brne	.+16     	; 0x2ab4 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    2aa4:	a2 e3       	ldi	r26, 0x32	; 50
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e2 e3       	ldi	r30, 0x32	; 50
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	80 61       	ori	r24, 0x10	; 16
    2ab0:	8c 93       	st	X, r24
    2ab2:	07 c0       	rjmp	.+14     	; 0x2ac2 <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    2ab4:	a2 e3       	ldi	r26, 0x32	; 50
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e2 e3       	ldi	r30, 0x32	; 50
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	8f 7e       	andi	r24, 0xEF	; 239
    2ac0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    2ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ac4:	81 30       	cpi	r24, 0x01	; 1
    2ac6:	41 f4       	brne	.+16     	; 0x2ad8 <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    2ac8:	a2 e3       	ldi	r26, 0x32	; 50
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e2 e3       	ldi	r30, 0x32	; 50
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	80 62       	ori	r24, 0x20	; 32
    2ad4:	8c 93       	st	X, r24
    2ad6:	07 c0       	rjmp	.+14     	; 0x2ae6 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    2ad8:	a2 e3       	ldi	r26, 0x32	; 50
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e2 e3       	ldi	r30, 0x32	; 50
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8f 7d       	andi	r24, 0xDF	; 223
    2ae4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    2ae6:	88 85       	ldd	r24, Y+8	; 0x08
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	41 f4       	brne	.+16     	; 0x2afc <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2aec:	a2 e3       	ldi	r26, 0x32	; 50
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	e2 e3       	ldi	r30, 0x32	; 50
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	80 64       	ori	r24, 0x40	; 64
    2af8:	8c 93       	st	X, r24
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2afc:	a2 e3       	ldi	r26, 0x32	; 50
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e2 e3       	ldi	r30, 0x32	; 50
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	8f 7b       	andi	r24, 0xBF	; 191
    2b08:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	41 f4       	brne	.+16     	; 0x2b20 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2b10:	a2 e3       	ldi	r26, 0x32	; 50
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e2 e3       	ldi	r30, 0x32	; 50
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	80 68       	ori	r24, 0x80	; 128
    2b1c:	8c 93       	st	X, r24
    2b1e:	07 c0       	rjmp	.+14     	; 0x2b2e <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2b20:	a2 e3       	ldi	r26, 0x32	; 50
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e2 e3       	ldi	r30, 0x32	; 50
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	8f 77       	andi	r24, 0x7F	; 127
    2b2c:	8c 93       	st	X, r24
		}
		break;
	}
}
    2b2e:	2c 96       	adiw	r28, 0x0c	; 12
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	0f 91       	pop	r16
    2b40:	ef 90       	pop	r14
    2b42:	cf 90       	pop	r12
    2b44:	af 90       	pop	r10
    2b46:	8f 90       	pop	r8
    2b48:	08 95       	ret

00002b4a <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    2b52:	a7 e2       	ldi	r26, 0x27	; 39
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e7 e2       	ldi	r30, 0x27	; 39
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	8f 77       	andi	r24, 0x7F	; 127
    2b5e:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    2b60:	a7 e2       	ldi	r26, 0x27	; 39
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e7 e2       	ldi	r30, 0x27	; 39
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	80 64       	ori	r24, 0x40	; 64
    2b6c:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    2b6e:	a7 e2       	ldi	r26, 0x27	; 39
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e7 e2       	ldi	r30, 0x27	; 39
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8f 7d       	andi	r24, 0xDF	; 223
    2b7a:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    2b7c:	a6 e2       	ldi	r26, 0x26	; 38
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e6 e2       	ldi	r30, 0x26	; 38
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 7d       	andi	r24, 0xDF	; 223
    2b88:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    2b8a:	a6 e2       	ldi	r26, 0x26	; 38
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	e6 e2       	ldi	r30, 0x26	; 38
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	84 60       	ori	r24, 0x04	; 4
    2b96:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    2b98:	a6 e2       	ldi	r26, 0x26	; 38
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e6 e2       	ldi	r30, 0x26	; 38
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	82 60       	ori	r24, 0x02	; 2
    2ba4:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2ba6:	a6 e2       	ldi	r26, 0x26	; 38
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e6 e2       	ldi	r30, 0x26	; 38
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	8e 7f       	andi	r24, 0xFE	; 254
    2bb2:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2bb4:	a6 e2       	ldi	r26, 0x26	; 38
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e6 e2       	ldi	r30, 0x26	; 38
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	80 68       	ori	r24, 0x80	; 128
    2bc0:	8c 93       	st	X, r24

}
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	28 97       	sbiw	r28, 0x08	; 8
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	8e 83       	std	Y+6, r24	; 0x06
    2bde:	78 87       	std	Y+8, r23	; 0x08
    2be0:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2be6:	19 82       	std	Y+1, r1	; 0x01
    2be8:	1a 82       	std	Y+2, r1	; 0x02
    2bea:	1b 82       	std	Y+3, r1	; 0x03
    2bec:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2bee:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf0:	80 32       	cpi	r24, 0x20	; 32
    2bf2:	08 f0       	brcs	.+2      	; 0x2bf6 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2bf4:	5b c0       	rjmp	.+182    	; 0x2cac <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf8:	98 85       	ldd	r25, Y+8	; 0x08
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2bfe:	56 c0       	rjmp	.+172    	; 0x2cac <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2c00:	a7 e2       	ldi	r26, 0x27	; 39
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	e7 e2       	ldi	r30, 0x27	; 39
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	80 7e       	andi	r24, 0xE0	; 224
    2c0c:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2c0e:	a7 e2       	ldi	r26, 0x27	; 39
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e7 e2       	ldi	r30, 0x27	; 39
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	90 81       	ld	r25, Z
    2c18:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1a:	89 2b       	or	r24, r25
    2c1c:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2c1e:	a6 e2       	ldi	r26, 0x26	; 38
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	e6 e2       	ldi	r30, 0x26	; 38
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	80 64       	ori	r24, 0x40	; 64
    2c2a:	8c 93       	st	X, r24
    2c2c:	0b c0       	rjmp	.+22     	; 0x2c44 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    2c2e:	89 81       	ldd	r24, Y+1	; 0x01
    2c30:	9a 81       	ldd	r25, Y+2	; 0x02
    2c32:	ab 81       	ldd	r26, Y+3	; 0x03
    2c34:	bc 81       	ldd	r27, Y+4	; 0x04
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	a1 1d       	adc	r26, r1
    2c3a:	b1 1d       	adc	r27, r1
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	ab 83       	std	Y+3, r26	; 0x03
    2c42:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    2c44:	e6 e2       	ldi	r30, 0x26	; 38
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	82 95       	swap	r24
    2c4c:	8f 70       	andi	r24, 0x0F	; 15
    2c4e:	88 2f       	mov	r24, r24
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	81 70       	andi	r24, 0x01	; 1
    2c54:	90 70       	andi	r25, 0x00	; 0
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	61 f4       	brne	.+24     	; 0x2c72 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5e:	ab 81       	ldd	r26, Y+3	; 0x03
    2c60:	bc 81       	ldd	r27, Y+4	; 0x04
    2c62:	80 35       	cpi	r24, 0x50	; 80
    2c64:	23 ec       	ldi	r18, 0xC3	; 195
    2c66:	92 07       	cpc	r25, r18
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	a2 07       	cpc	r26, r18
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	b2 07       	cpc	r27, r18
    2c70:	f0 f2       	brcs	.-68     	; 0x2c2e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    2c72:	e6 e2       	ldi	r30, 0x26	; 38
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	82 95       	swap	r24
    2c7a:	8f 70       	andi	r24, 0x0F	; 15
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	81 70       	andi	r24, 0x01	; 1
    2c82:	90 70       	andi	r25, 0x00	; 0
    2c84:	88 23       	and	r24, r24
    2c86:	81 f0       	breq	.+32     	; 0x2ca8 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    2c88:	a6 e2       	ldi	r26, 0x26	; 38
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e6 e2       	ldi	r30, 0x26	; 38
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	80 61       	ori	r24, 0x10	; 16
    2c94:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2c96:	e4 e2       	ldi	r30, 0x24	; 36
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	ef 81       	ldd	r30, Y+7	; 0x07
    2ca0:	f8 85       	ldd	r31, Y+8	; 0x08
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
    2ca6:	03 c0       	rjmp	.+6      	; 0x2cae <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2ca8:	1d 82       	std	Y+5, r1	; 0x05
    2caa:	01 c0       	rjmp	.+2      	; 0x2cae <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2cac:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2cb0:	28 96       	adiw	r28, 0x08	; 8
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	8a 83       	std	Y+2, r24	; 0x02
    2cd0:	7c 83       	std	Y+4, r23	; 0x04
    2cd2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	80 32       	cpi	r24, 0x20	; 32
    2cdc:	78 f5       	brcc	.+94     	; 0x2d3c <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	00 97       	sbiw	r24, 0x00	; 0
    2ce4:	59 f1       	breq	.+86     	; 0x2d3c <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2ce6:	80 91 4e 01 	lds	r24, 0x014E
    2cea:	88 23       	and	r24, r24
    2cec:	39 f5       	brne	.+78     	; 0x2d3c <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	80 93 4e 01 	sts	0x014E, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	90 93 4d 01 	sts	0x014D, r25
    2cfc:	80 93 4c 01 	sts	0x014C, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2d00:	a6 e2       	ldi	r26, 0x26	; 38
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e6 e2       	ldi	r30, 0x26	; 38
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 60       	ori	r24, 0x08	; 8
    2d0c:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2d0e:	a7 e2       	ldi	r26, 0x27	; 39
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	e7 e2       	ldi	r30, 0x27	; 39
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	80 7e       	andi	r24, 0xE0	; 224
    2d1a:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2d1c:	a7 e2       	ldi	r26, 0x27	; 39
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e7 e2       	ldi	r30, 0x27	; 39
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	90 81       	ld	r25, Z
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	89 2b       	or	r24, r25
    2d2a:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2d2c:	a6 e2       	ldi	r26, 0x26	; 38
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	e6 e2       	ldi	r30, 0x26	; 38
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	80 64       	ori	r24, 0x40	; 64
    2d38:	8c 93       	st	X, r24
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2d3c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <ADC_u8GetADCRegValue+0x6>
    2d54:	0f 92       	push	r0
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	9b 83       	std	Y+3, r25	; 0x03
    2d5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	39 f0       	breq	.+14     	; 0x2d78 <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    2d6a:	e4 e2       	ldi	r30, 0x24	; 36
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	8a 83       	std	Y+2, r24	; 0x02
    2d76:	01 c0       	rjmp	.+2      	; 0x2d7a <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2d78:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	08 95       	ret

00002d88 <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    2d88:	1f 92       	push	r1
    2d8a:	0f 92       	push	r0
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	0f 92       	push	r0
    2d90:	11 24       	eor	r1, r1
    2d92:	2f 93       	push	r18
    2d94:	3f 93       	push	r19
    2d96:	4f 93       	push	r20
    2d98:	5f 93       	push	r21
    2d9a:	6f 93       	push	r22
    2d9c:	7f 93       	push	r23
    2d9e:	8f 93       	push	r24
    2da0:	9f 93       	push	r25
    2da2:	af 93       	push	r26
    2da4:	bf 93       	push	r27
    2da6:	ef 93       	push	r30
    2da8:	ff 93       	push	r31
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2db2:	80 91 4c 01 	lds	r24, 0x014C
    2db6:	90 91 4d 01 	lds	r25, 0x014D
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	99 f0       	breq	.+38     	; 0x2de4 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2dbe:	10 92 4e 01 	sts	0x014E, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2dc2:	a6 e2       	ldi	r26, 0x26	; 38
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e6 e2       	ldi	r30, 0x26	; 38
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	87 7f       	andi	r24, 0xF7	; 247
    2dce:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2dd0:	20 91 4c 01 	lds	r18, 0x014C
    2dd4:	30 91 4d 01 	lds	r19, 0x014D
    2dd8:	e4 e2       	ldi	r30, 0x24	; 36
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	f9 01       	movw	r30, r18
    2de2:	09 95       	icall
	}
}
    2de4:	cf 91       	pop	r28
    2de6:	df 91       	pop	r29
    2de8:	ff 91       	pop	r31
    2dea:	ef 91       	pop	r30
    2dec:	bf 91       	pop	r27
    2dee:	af 91       	pop	r26
    2df0:	9f 91       	pop	r25
    2df2:	8f 91       	pop	r24
    2df4:	7f 91       	pop	r23
    2df6:	6f 91       	pop	r22
    2df8:	5f 91       	pop	r21
    2dfa:	4f 91       	pop	r20
    2dfc:	3f 91       	pop	r19
    2dfe:	2f 91       	pop	r18
    2e00:	0f 90       	pop	r0
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	0f 90       	pop	r0
    2e06:	1f 90       	pop	r1
    2e08:	18 95       	reti

00002e0a <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2e12:	83 e0       	ldi	r24, 0x03	; 3
    2e14:	60 e0       	ldi	r22, 0x00	; 0
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2e1c:	83 e0       	ldi	r24, 0x03	; 3
    2e1e:	61 e0       	ldi	r22, 0x01	; 1
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2e26:	83 e0       	ldi	r24, 0x03	; 3
    2e28:	62 e0       	ldi	r22, 0x02	; 2
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2e30:	83 e0       	ldi	r24, 0x03	; 3
    2e32:	66 e0       	ldi	r22, 0x06	; 6
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
}
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	00 d0       	rcall	.+0      	; 0x2e46 <ActivatePins1+0x6>
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <ActivatePins1+0x8>
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	6a 83       	std	Y+2, r22	; 0x02
    2e50:	4b 83       	std	Y+3, r20	; 0x03
    2e52:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2e54:	83 e0       	ldi	r24, 0x03	; 3
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	49 81       	ldd	r20, Y+1	; 0x01
    2e5a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2e5e:	83 e0       	ldi	r24, 0x03	; 3
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	4a 81       	ldd	r20, Y+2	; 0x02
    2e64:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	62 e0       	ldi	r22, 0x02	; 2
    2e6c:	4b 81       	ldd	r20, Y+3	; 0x03
    2e6e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	66 e0       	ldi	r22, 0x06	; 6
    2e76:	4c 81       	ldd	r20, Y+4	; 0x04
    2e78:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
}
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	08 95       	ret

00002e8a <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <ActivatePins2+0x6>
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <ActivatePins2+0x8>
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	6a 83       	std	Y+2, r22	; 0x02
    2e9a:	4b 83       	std	Y+3, r20	; 0x03
    2e9c:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2e9e:	83 e0       	ldi	r24, 0x03	; 3
    2ea0:	66 e0       	ldi	r22, 0x06	; 6
    2ea2:	4c 81       	ldd	r20, Y+4	; 0x04
    2ea4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2ea8:	83 e0       	ldi	r24, 0x03	; 3
    2eaa:	62 e0       	ldi	r22, 0x02	; 2
    2eac:	4b 81       	ldd	r20, Y+3	; 0x03
    2eae:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2eb2:	83 e0       	ldi	r24, 0x03	; 3
    2eb4:	61 e0       	ldi	r22, 0x01	; 1
    2eb6:	4a 81       	ldd	r20, Y+2	; 0x02
    2eb8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2ebc:	83 e0       	ldi	r24, 0x03	; 3
    2ebe:	60 e0       	ldi	r22, 0x00	; 0
    2ec0:	49 81       	ldd	r20, Y+1	; 0x01
    2ec2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
}
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	29 97       	sbiw	r28, 0x09	; 9
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	89 83       	std	Y+1, r24	; 0x01
    2eec:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2eee:	29 81       	ldd	r18, Y+1	; 0x01
    2ef0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ef2:	39 87       	std	Y+9, r19	; 0x09
    2ef4:	28 87       	std	Y+8, r18	; 0x08
    2ef6:	88 85       	ldd	r24, Y+8	; 0x08
    2ef8:	99 85       	ldd	r25, Y+9	; 0x09
    2efa:	8a 35       	cpi	r24, 0x5A	; 90
    2efc:	91 05       	cpc	r25, r1
    2efe:	31 f0       	breq	.+12     	; 0x2f0c <SelectStepAngle+0x38>
    2f00:	28 85       	ldd	r18, Y+8	; 0x08
    2f02:	39 85       	ldd	r19, Y+9	; 0x09
    2f04:	24 3b       	cpi	r18, 0xB4	; 180
    2f06:	31 05       	cpc	r19, r1
    2f08:	f1 f0       	breq	.+60     	; 0x2f46 <SelectStepAngle+0x72>
    2f0a:	39 c0       	rjmp	.+114    	; 0x2f7e <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	3f 83       	std	Y+7, r19	; 0x07
    2f14:	2e 83       	std	Y+6, r18	; 0x06
    2f16:	8e 81       	ldd	r24, Y+6	; 0x06
    2f18:	9f 81       	ldd	r25, Y+7	; 0x07
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	31 f0       	breq	.+12     	; 0x2f2a <SelectStepAngle+0x56>
    2f1e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f20:	3f 81       	ldd	r19, Y+7	; 0x07
    2f22:	21 30       	cpi	r18, 0x01	; 1
    2f24:	31 05       	cpc	r19, r1
    2f26:	41 f0       	breq	.+16     	; 0x2f38 <SelectStepAngle+0x64>
    2f28:	2a c0       	rjmp	.+84     	; 0x2f7e <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	41 e0       	ldi	r20, 0x01	; 1
    2f30:	21 e0       	ldi	r18, 0x01	; 1
    2f32:	0e 94 20 17 	call	0x2e40	; 0x2e40 <ActivatePins1>
    2f36:	23 c0       	rjmp	.+70     	; 0x2f7e <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	61 e0       	ldi	r22, 0x01	; 1
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ActivatePins2>
    2f44:	1c c0       	rjmp	.+56     	; 0x2f7e <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	3d 83       	std	Y+5, r19	; 0x05
    2f4e:	2c 83       	std	Y+4, r18	; 0x04
    2f50:	8c 81       	ldd	r24, Y+4	; 0x04
    2f52:	9d 81       	ldd	r25, Y+5	; 0x05
    2f54:	00 97       	sbiw	r24, 0x00	; 0
    2f56:	31 f0       	breq	.+12     	; 0x2f64 <SelectStepAngle+0x90>
    2f58:	2c 81       	ldd	r18, Y+4	; 0x04
    2f5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f5c:	21 30       	cpi	r18, 0x01	; 1
    2f5e:	31 05       	cpc	r19, r1
    2f60:	41 f0       	breq	.+16     	; 0x2f72 <SelectStepAngle+0x9e>
    2f62:	0d c0       	rjmp	.+26     	; 0x2f7e <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	61 e0       	ldi	r22, 0x01	; 1
    2f68:	41 e0       	ldi	r20, 0x01	; 1
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ActivatePins2>
    2f70:	06 c0       	rjmp	.+12     	; 0x2f7e <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	61 e0       	ldi	r22, 0x01	; 1
    2f76:	41 e0       	ldi	r20, 0x01	; 1
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <ActivatePins1>
						break;
				}
				break;
	}
}
    2f7e:	29 96       	adiw	r28, 0x09	; 9
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	cf 91       	pop	r28
    2f8c:	df 91       	pop	r29
    2f8e:	08 95       	ret

00002f90 <Servo_Init>:
#include "../../MCAL/Timer/Timer_Interface.h"



void Servo_Init(){
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    2f98:	0e 94 16 06 	call	0xc2c	; 0xc2c <TIMERS_voidTimer1Init>
}
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <Servo_SetAngle>:

void Servo_SetAngle(u16 Servo_Angle){
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <Servo_SetAngle+0x6>
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	9a 83       	std	Y+2, r25	; 0x02
    2fae:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTIMER1SetCompareMatchValueA(Servo_Angle);
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb4:	0e 94 be 06 	call	0xd7c	; 0xd7c <TIMERS_voidTIMER1SetCompareMatchValueA>
}
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	e9 97       	sbiw	r28, 0x39	; 57
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2fd8:	83 e0       	ldi	r24, 0x03	; 3
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	64 e0       	ldi	r22, 0x04	; 4
    2fde:	70 e0       	ldi	r23, 0x00	; 0
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	50 e0       	ldi	r21, 0x00	; 0
    2fe4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCD_setPinValue>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	a0 e8       	ldi	r26, 0x80	; 128
    2fee:	bf e3       	ldi	r27, 0x3F	; 63
    2ff0:	8d ab       	std	Y+53, r24	; 0x35
    2ff2:	9e ab       	std	Y+54, r25	; 0x36
    2ff4:	af ab       	std	Y+55, r26	; 0x37
    2ff6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff8:	6d a9       	ldd	r22, Y+53	; 0x35
    2ffa:	7e a9       	ldd	r23, Y+54	; 0x36
    2ffc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	4a e7       	ldi	r20, 0x7A	; 122
    3006:	55 e4       	ldi	r21, 0x45	; 69
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	89 ab       	std	Y+49, r24	; 0x31
    3012:	9a ab       	std	Y+50, r25	; 0x32
    3014:	ab ab       	std	Y+51, r26	; 0x33
    3016:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3018:	69 a9       	ldd	r22, Y+49	; 0x31
    301a:	7a a9       	ldd	r23, Y+50	; 0x32
    301c:	8b a9       	ldd	r24, Y+51	; 0x33
    301e:	9c a9       	ldd	r25, Y+52	; 0x34
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	5f e3       	ldi	r21, 0x3F	; 63
    3028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302c:	88 23       	and	r24, r24
    302e:	2c f4       	brge	.+10     	; 0x303a <LCD_sendCommand+0x78>
		__ticks = 1;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	98 ab       	std	Y+48, r25	; 0x30
    3036:	8f a7       	std	Y+47, r24	; 0x2f
    3038:	3f c0       	rjmp	.+126    	; 0x30b8 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    303a:	69 a9       	ldd	r22, Y+49	; 0x31
    303c:	7a a9       	ldd	r23, Y+50	; 0x32
    303e:	8b a9       	ldd	r24, Y+51	; 0x33
    3040:	9c a9       	ldd	r25, Y+52	; 0x34
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304e:	18 16       	cp	r1, r24
    3050:	4c f5       	brge	.+82     	; 0x30a4 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3052:	6d a9       	ldd	r22, Y+53	; 0x35
    3054:	7e a9       	ldd	r23, Y+54	; 0x36
    3056:	8f a9       	ldd	r24, Y+55	; 0x37
    3058:	98 ad       	ldd	r25, Y+56	; 0x38
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	98 ab       	std	Y+48, r25	; 0x30
    3078:	8f a7       	std	Y+47, r24	; 0x2f
    307a:	0f c0       	rjmp	.+30     	; 0x309a <LCD_sendCommand+0xd8>
    307c:	80 e9       	ldi	r24, 0x90	; 144
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	9e a7       	std	Y+46, r25	; 0x2e
    3082:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3084:	8d a5       	ldd	r24, Y+45	; 0x2d
    3086:	9e a5       	ldd	r25, Y+46	; 0x2e
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <LCD_sendCommand+0xc6>
    308c:	9e a7       	std	Y+46, r25	; 0x2e
    308e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	8f a5       	ldd	r24, Y+47	; 0x2f
    3092:	98 a9       	ldd	r25, Y+48	; 0x30
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	98 ab       	std	Y+48, r25	; 0x30
    3098:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	8f a5       	ldd	r24, Y+47	; 0x2f
    309c:	98 a9       	ldd	r25, Y+48	; 0x30
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	69 f7       	brne	.-38     	; 0x307c <LCD_sendCommand+0xba>
    30a2:	14 c0       	rjmp	.+40     	; 0x30cc <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a4:	69 a9       	ldd	r22, Y+49	; 0x31
    30a6:	7a a9       	ldd	r23, Y+50	; 0x32
    30a8:	8b a9       	ldd	r24, Y+51	; 0x33
    30aa:	9c a9       	ldd	r25, Y+52	; 0x34
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	98 ab       	std	Y+48, r25	; 0x30
    30b6:	8f a7       	std	Y+47, r24	; 0x2f
    30b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ba:	98 a9       	ldd	r25, Y+48	; 0x30
    30bc:	9c a7       	std	Y+44, r25	; 0x2c
    30be:	8b a7       	std	Y+43, r24	; 0x2b
    30c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <LCD_sendCommand+0x102>
    30c8:	9c a7       	std	Y+44, r25	; 0x2c
    30ca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    30cc:	83 e0       	ldi	r24, 0x03	; 3
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	67 e0       	ldi	r22, 0x07	; 7
    30d2:	70 e0       	ldi	r23, 0x00	; 0
    30d4:	41 e0       	ldi	r20, 0x01	; 1
    30d6:	50 e0       	ldi	r21, 0x00	; 0
    30d8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCD_setPinValue>
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	a0 e8       	ldi	r26, 0x80	; 128
    30e2:	bf e3       	ldi	r27, 0x3F	; 63
    30e4:	8f a3       	std	Y+39, r24	; 0x27
    30e6:	98 a7       	std	Y+40, r25	; 0x28
    30e8:	a9 a7       	std	Y+41, r26	; 0x29
    30ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ec:	6f a1       	ldd	r22, Y+39	; 0x27
    30ee:	78 a5       	ldd	r23, Y+40	; 0x28
    30f0:	89 a5       	ldd	r24, Y+41	; 0x29
    30f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	4a e7       	ldi	r20, 0x7A	; 122
    30fa:	55 e4       	ldi	r21, 0x45	; 69
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	8b a3       	std	Y+35, r24	; 0x23
    3106:	9c a3       	std	Y+36, r25	; 0x24
    3108:	ad a3       	std	Y+37, r26	; 0x25
    310a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    310c:	6b a1       	ldd	r22, Y+35	; 0x23
    310e:	7c a1       	ldd	r23, Y+36	; 0x24
    3110:	8d a1       	ldd	r24, Y+37	; 0x25
    3112:	9e a1       	ldd	r25, Y+38	; 0x26
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e8       	ldi	r20, 0x80	; 128
    311a:	5f e3       	ldi	r21, 0x3F	; 63
    311c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3120:	88 23       	and	r24, r24
    3122:	2c f4       	brge	.+10     	; 0x312e <LCD_sendCommand+0x16c>
		__ticks = 1;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	9a a3       	std	Y+34, r25	; 0x22
    312a:	89 a3       	std	Y+33, r24	; 0x21
    312c:	3f c0       	rjmp	.+126    	; 0x31ac <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    312e:	6b a1       	ldd	r22, Y+35	; 0x23
    3130:	7c a1       	ldd	r23, Y+36	; 0x24
    3132:	8d a1       	ldd	r24, Y+37	; 0x25
    3134:	9e a1       	ldd	r25, Y+38	; 0x26
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	3f ef       	ldi	r19, 0xFF	; 255
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	57 e4       	ldi	r21, 0x47	; 71
    313e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3142:	18 16       	cp	r1, r24
    3144:	4c f5       	brge	.+82     	; 0x3198 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3146:	6f a1       	ldd	r22, Y+39	; 0x27
    3148:	78 a5       	ldd	r23, Y+40	; 0x28
    314a:	89 a5       	ldd	r24, Y+41	; 0x29
    314c:	9a a5       	ldd	r25, Y+42	; 0x2a
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e2       	ldi	r20, 0x20	; 32
    3154:	51 e4       	ldi	r21, 0x41	; 65
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	bc 01       	movw	r22, r24
    3160:	cd 01       	movw	r24, r26
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	9a a3       	std	Y+34, r25	; 0x22
    316c:	89 a3       	std	Y+33, r24	; 0x21
    316e:	0f c0       	rjmp	.+30     	; 0x318e <LCD_sendCommand+0x1cc>
    3170:	80 e9       	ldi	r24, 0x90	; 144
    3172:	91 e0       	ldi	r25, 0x01	; 1
    3174:	98 a3       	std	Y+32, r25	; 0x20
    3176:	8f 8f       	std	Y+31, r24	; 0x1f
    3178:	8f 8d       	ldd	r24, Y+31	; 0x1f
    317a:	98 a1       	ldd	r25, Y+32	; 0x20
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <LCD_sendCommand+0x1ba>
    3180:	98 a3       	std	Y+32, r25	; 0x20
    3182:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3184:	89 a1       	ldd	r24, Y+33	; 0x21
    3186:	9a a1       	ldd	r25, Y+34	; 0x22
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	9a a3       	std	Y+34, r25	; 0x22
    318c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318e:	89 a1       	ldd	r24, Y+33	; 0x21
    3190:	9a a1       	ldd	r25, Y+34	; 0x22
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	69 f7       	brne	.-38     	; 0x3170 <LCD_sendCommand+0x1ae>
    3196:	14 c0       	rjmp	.+40     	; 0x31c0 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3198:	6b a1       	ldd	r22, Y+35	; 0x23
    319a:	7c a1       	ldd	r23, Y+36	; 0x24
    319c:	8d a1       	ldd	r24, Y+37	; 0x25
    319e:	9e a1       	ldd	r25, Y+38	; 0x26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9a a3       	std	Y+34, r25	; 0x22
    31aa:	89 a3       	std	Y+33, r24	; 0x21
    31ac:	89 a1       	ldd	r24, Y+33	; 0x21
    31ae:	9a a1       	ldd	r25, Y+34	; 0x22
    31b0:	9e 8f       	std	Y+30, r25	; 0x1e
    31b2:	8d 8f       	std	Y+29, r24	; 0x1d
    31b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <LCD_sendCommand+0x1f6>
    31bc:	9e 8f       	std	Y+30, r25	; 0x1e
    31be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    31c0:	89 ad       	ldd	r24, Y+57	; 0x39
    31c2:	28 2f       	mov	r18, r24
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	b9 01       	movw	r22, r18
    31cc:	0e 94 c1 0a 	call	0x1582	; 0x1582 <LCD_setPortValue>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	a0 e8       	ldi	r26, 0x80	; 128
    31d6:	bf e3       	ldi	r27, 0x3F	; 63
    31d8:	89 8f       	std	Y+25, r24	; 0x19
    31da:	9a 8f       	std	Y+26, r25	; 0x1a
    31dc:	ab 8f       	std	Y+27, r26	; 0x1b
    31de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e0:	69 8d       	ldd	r22, Y+25	; 0x19
    31e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	4a e7       	ldi	r20, 0x7A	; 122
    31ee:	55 e4       	ldi	r21, 0x45	; 69
    31f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	8d 8b       	std	Y+21, r24	; 0x15
    31fa:	9e 8b       	std	Y+22, r25	; 0x16
    31fc:	af 8b       	std	Y+23, r26	; 0x17
    31fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3200:	6d 89       	ldd	r22, Y+21	; 0x15
    3202:	7e 89       	ldd	r23, Y+22	; 0x16
    3204:	8f 89       	ldd	r24, Y+23	; 0x17
    3206:	98 8d       	ldd	r25, Y+24	; 0x18
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	2c f4       	brge	.+10     	; 0x3222 <LCD_sendCommand+0x260>
		__ticks = 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9c 8b       	std	Y+20, r25	; 0x14
    321e:	8b 8b       	std	Y+19, r24	; 0x13
    3220:	3f c0       	rjmp	.+126    	; 0x32a0 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    3222:	6d 89       	ldd	r22, Y+21	; 0x15
    3224:	7e 89       	ldd	r23, Y+22	; 0x16
    3226:	8f 89       	ldd	r24, Y+23	; 0x17
    3228:	98 8d       	ldd	r25, Y+24	; 0x18
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	3f ef       	ldi	r19, 0xFF	; 255
    322e:	4f e7       	ldi	r20, 0x7F	; 127
    3230:	57 e4       	ldi	r21, 0x47	; 71
    3232:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3236:	18 16       	cp	r1, r24
    3238:	4c f5       	brge	.+82     	; 0x328c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323a:	69 8d       	ldd	r22, Y+25	; 0x19
    323c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    323e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3240:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e2       	ldi	r20, 0x20	; 32
    3248:	51 e4       	ldi	r21, 0x41	; 65
    324a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	bc 01       	movw	r22, r24
    3254:	cd 01       	movw	r24, r26
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9c 8b       	std	Y+20, r25	; 0x14
    3260:	8b 8b       	std	Y+19, r24	; 0x13
    3262:	0f c0       	rjmp	.+30     	; 0x3282 <LCD_sendCommand+0x2c0>
    3264:	80 e9       	ldi	r24, 0x90	; 144
    3266:	91 e0       	ldi	r25, 0x01	; 1
    3268:	9a 8b       	std	Y+18, r25	; 0x12
    326a:	89 8b       	std	Y+17, r24	; 0x11
    326c:	89 89       	ldd	r24, Y+17	; 0x11
    326e:	9a 89       	ldd	r25, Y+18	; 0x12
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <LCD_sendCommand+0x2ae>
    3274:	9a 8b       	std	Y+18, r25	; 0x12
    3276:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3278:	8b 89       	ldd	r24, Y+19	; 0x13
    327a:	9c 89       	ldd	r25, Y+20	; 0x14
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	9c 8b       	std	Y+20, r25	; 0x14
    3280:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3282:	8b 89       	ldd	r24, Y+19	; 0x13
    3284:	9c 89       	ldd	r25, Y+20	; 0x14
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	69 f7       	brne	.-38     	; 0x3264 <LCD_sendCommand+0x2a2>
    328a:	14 c0       	rjmp	.+40     	; 0x32b4 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328c:	6d 89       	ldd	r22, Y+21	; 0x15
    328e:	7e 89       	ldd	r23, Y+22	; 0x16
    3290:	8f 89       	ldd	r24, Y+23	; 0x17
    3292:	98 8d       	ldd	r25, Y+24	; 0x18
    3294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9c 8b       	std	Y+20, r25	; 0x14
    329e:	8b 8b       	std	Y+19, r24	; 0x13
    32a0:	8b 89       	ldd	r24, Y+19	; 0x13
    32a2:	9c 89       	ldd	r25, Y+20	; 0x14
    32a4:	98 8b       	std	Y+16, r25	; 0x10
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
    32a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32aa:	98 89       	ldd	r25, Y+16	; 0x10
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <LCD_sendCommand+0x2ea>
    32b0:	98 8b       	std	Y+16, r25	; 0x10
    32b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    32b4:	83 e0       	ldi	r24, 0x03	; 3
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	67 e0       	ldi	r22, 0x07	; 7
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	50 e0       	ldi	r21, 0x00	; 0
    32c0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCD_setPinValue>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	a0 e8       	ldi	r26, 0x80	; 128
    32ca:	bf e3       	ldi	r27, 0x3F	; 63
    32cc:	8b 87       	std	Y+11, r24	; 0x0b
    32ce:	9c 87       	std	Y+12, r25	; 0x0c
    32d0:	ad 87       	std	Y+13, r26	; 0x0d
    32d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32da:	9e 85       	ldd	r25, Y+14	; 0x0e
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	4a e7       	ldi	r20, 0x7A	; 122
    32e2:	55 e4       	ldi	r21, 0x45	; 69
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	8f 83       	std	Y+7, r24	; 0x07
    32ee:	98 87       	std	Y+8, r25	; 0x08
    32f0:	a9 87       	std	Y+9, r26	; 0x09
    32f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f4:	6f 81       	ldd	r22, Y+7	; 0x07
    32f6:	78 85       	ldd	r23, Y+8	; 0x08
    32f8:	89 85       	ldd	r24, Y+9	; 0x09
    32fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e8       	ldi	r20, 0x80	; 128
    3302:	5f e3       	ldi	r21, 0x3F	; 63
    3304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3308:	88 23       	and	r24, r24
    330a:	2c f4       	brge	.+10     	; 0x3316 <LCD_sendCommand+0x354>
		__ticks = 1;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
    3314:	3f c0       	rjmp	.+126    	; 0x3394 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    3316:	6f 81       	ldd	r22, Y+7	; 0x07
    3318:	78 85       	ldd	r23, Y+8	; 0x08
    331a:	89 85       	ldd	r24, Y+9	; 0x09
    331c:	9a 85       	ldd	r25, Y+10	; 0x0a
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	3f ef       	ldi	r19, 0xFF	; 255
    3322:	4f e7       	ldi	r20, 0x7F	; 127
    3324:	57 e4       	ldi	r21, 0x47	; 71
    3326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    332a:	18 16       	cp	r1, r24
    332c:	4c f5       	brge	.+82     	; 0x3380 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3330:	7c 85       	ldd	r23, Y+12	; 0x0c
    3332:	8d 85       	ldd	r24, Y+13	; 0x0d
    3334:	9e 85       	ldd	r25, Y+14	; 0x0e
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e2       	ldi	r20, 0x20	; 32
    333c:	51 e4       	ldi	r21, 0x41	; 65
    333e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	bc 01       	movw	r22, r24
    3348:	cd 01       	movw	r24, r26
    334a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	8d 83       	std	Y+5, r24	; 0x05
    3356:	0f c0       	rjmp	.+30     	; 0x3376 <LCD_sendCommand+0x3b4>
    3358:	80 e9       	ldi	r24, 0x90	; 144
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	9c 83       	std	Y+4, r25	; 0x04
    335e:	8b 83       	std	Y+3, r24	; 0x03
    3360:	8b 81       	ldd	r24, Y+3	; 0x03
    3362:	9c 81       	ldd	r25, Y+4	; 0x04
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <LCD_sendCommand+0x3a2>
    3368:	9c 83       	std	Y+4, r25	; 0x04
    336a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	9e 83       	std	Y+6, r25	; 0x06
    3374:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	9e 81       	ldd	r25, Y+6	; 0x06
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	69 f7       	brne	.-38     	; 0x3358 <LCD_sendCommand+0x396>
    337e:	14 c0       	rjmp	.+40     	; 0x33a8 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3380:	6f 81       	ldd	r22, Y+7	; 0x07
    3382:	78 85       	ldd	r23, Y+8	; 0x08
    3384:	89 85       	ldd	r24, Y+9	; 0x09
    3386:	9a 85       	ldd	r25, Y+10	; 0x0a
    3388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	9e 83       	std	Y+6, r25	; 0x06
    3392:	8d 83       	std	Y+5, r24	; 0x05
    3394:	8d 81       	ldd	r24, Y+5	; 0x05
    3396:	9e 81       	ldd	r25, Y+6	; 0x06
    3398:	9a 83       	std	Y+2, r25	; 0x02
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	9a 81       	ldd	r25, Y+2	; 0x02
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	f1 f7       	brne	.-4      	; 0x33a0 <LCD_sendCommand+0x3de>
    33a4:	9a 83       	std	Y+2, r25	; 0x02
    33a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    33a8:	e9 96       	adiw	r28, 0x39	; 57
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62
    33c2:	e9 97       	sbiw	r28, 0x39	; 57
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    33d0:	83 e0       	ldi	r24, 0x03	; 3
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	64 e0       	ldi	r22, 0x04	; 4
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCD_setPinValue>
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a0 e8       	ldi	r26, 0x80	; 128
    33e6:	bf e3       	ldi	r27, 0x3F	; 63
    33e8:	8d ab       	std	Y+53, r24	; 0x35
    33ea:	9e ab       	std	Y+54, r25	; 0x36
    33ec:	af ab       	std	Y+55, r26	; 0x37
    33ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f0:	6d a9       	ldd	r22, Y+53	; 0x35
    33f2:	7e a9       	ldd	r23, Y+54	; 0x36
    33f4:	8f a9       	ldd	r24, Y+55	; 0x37
    33f6:	98 ad       	ldd	r25, Y+56	; 0x38
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	4a e7       	ldi	r20, 0x7A	; 122
    33fe:	55 e4       	ldi	r21, 0x45	; 69
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	89 ab       	std	Y+49, r24	; 0x31
    340a:	9a ab       	std	Y+50, r25	; 0x32
    340c:	ab ab       	std	Y+51, r26	; 0x33
    340e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3410:	69 a9       	ldd	r22, Y+49	; 0x31
    3412:	7a a9       	ldd	r23, Y+50	; 0x32
    3414:	8b a9       	ldd	r24, Y+51	; 0x33
    3416:	9c a9       	ldd	r25, Y+52	; 0x34
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e8       	ldi	r20, 0x80	; 128
    341e:	5f e3       	ldi	r21, 0x3F	; 63
    3420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3424:	88 23       	and	r24, r24
    3426:	2c f4       	brge	.+10     	; 0x3432 <LCD_displayCharacter+0x78>
		__ticks = 1;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	98 ab       	std	Y+48, r25	; 0x30
    342e:	8f a7       	std	Y+47, r24	; 0x2f
    3430:	3f c0       	rjmp	.+126    	; 0x34b0 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    3432:	69 a9       	ldd	r22, Y+49	; 0x31
    3434:	7a a9       	ldd	r23, Y+50	; 0x32
    3436:	8b a9       	ldd	r24, Y+51	; 0x33
    3438:	9c a9       	ldd	r25, Y+52	; 0x34
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	3f ef       	ldi	r19, 0xFF	; 255
    343e:	4f e7       	ldi	r20, 0x7F	; 127
    3440:	57 e4       	ldi	r21, 0x47	; 71
    3442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3446:	18 16       	cp	r1, r24
    3448:	4c f5       	brge	.+82     	; 0x349c <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344a:	6d a9       	ldd	r22, Y+53	; 0x35
    344c:	7e a9       	ldd	r23, Y+54	; 0x36
    344e:	8f a9       	ldd	r24, Y+55	; 0x37
    3450:	98 ad       	ldd	r25, Y+56	; 0x38
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e2       	ldi	r20, 0x20	; 32
    3458:	51 e4       	ldi	r21, 0x41	; 65
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	98 ab       	std	Y+48, r25	; 0x30
    3470:	8f a7       	std	Y+47, r24	; 0x2f
    3472:	0f c0       	rjmp	.+30     	; 0x3492 <LCD_displayCharacter+0xd8>
    3474:	80 e9       	ldi	r24, 0x90	; 144
    3476:	91 e0       	ldi	r25, 0x01	; 1
    3478:	9e a7       	std	Y+46, r25	; 0x2e
    347a:	8d a7       	std	Y+45, r24	; 0x2d
    347c:	8d a5       	ldd	r24, Y+45	; 0x2d
    347e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <LCD_displayCharacter+0xc6>
    3484:	9e a7       	std	Y+46, r25	; 0x2e
    3486:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3488:	8f a5       	ldd	r24, Y+47	; 0x2f
    348a:	98 a9       	ldd	r25, Y+48	; 0x30
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	98 ab       	std	Y+48, r25	; 0x30
    3490:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3492:	8f a5       	ldd	r24, Y+47	; 0x2f
    3494:	98 a9       	ldd	r25, Y+48	; 0x30
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	69 f7       	brne	.-38     	; 0x3474 <LCD_displayCharacter+0xba>
    349a:	14 c0       	rjmp	.+40     	; 0x34c4 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349c:	69 a9       	ldd	r22, Y+49	; 0x31
    349e:	7a a9       	ldd	r23, Y+50	; 0x32
    34a0:	8b a9       	ldd	r24, Y+51	; 0x33
    34a2:	9c a9       	ldd	r25, Y+52	; 0x34
    34a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	98 ab       	std	Y+48, r25	; 0x30
    34ae:	8f a7       	std	Y+47, r24	; 0x2f
    34b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b2:	98 a9       	ldd	r25, Y+48	; 0x30
    34b4:	9c a7       	std	Y+44, r25	; 0x2c
    34b6:	8b a7       	std	Y+43, r24	; 0x2b
    34b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    34ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	f1 f7       	brne	.-4      	; 0x34bc <LCD_displayCharacter+0x102>
    34c0:	9c a7       	std	Y+44, r25	; 0x2c
    34c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    34c4:	83 e0       	ldi	r24, 0x03	; 3
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	67 e0       	ldi	r22, 0x07	; 7
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	50 e0       	ldi	r21, 0x00	; 0
    34d0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCD_setPinValue>
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	a0 e8       	ldi	r26, 0x80	; 128
    34da:	bf e3       	ldi	r27, 0x3F	; 63
    34dc:	8f a3       	std	Y+39, r24	; 0x27
    34de:	98 a7       	std	Y+40, r25	; 0x28
    34e0:	a9 a7       	std	Y+41, r26	; 0x29
    34e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e4:	6f a1       	ldd	r22, Y+39	; 0x27
    34e6:	78 a5       	ldd	r23, Y+40	; 0x28
    34e8:	89 a5       	ldd	r24, Y+41	; 0x29
    34ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	4a e7       	ldi	r20, 0x7A	; 122
    34f2:	55 e4       	ldi	r21, 0x45	; 69
    34f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	8b a3       	std	Y+35, r24	; 0x23
    34fe:	9c a3       	std	Y+36, r25	; 0x24
    3500:	ad a3       	std	Y+37, r26	; 0x25
    3502:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3504:	6b a1       	ldd	r22, Y+35	; 0x23
    3506:	7c a1       	ldd	r23, Y+36	; 0x24
    3508:	8d a1       	ldd	r24, Y+37	; 0x25
    350a:	9e a1       	ldd	r25, Y+38	; 0x26
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e8       	ldi	r20, 0x80	; 128
    3512:	5f e3       	ldi	r21, 0x3F	; 63
    3514:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3518:	88 23       	and	r24, r24
    351a:	2c f4       	brge	.+10     	; 0x3526 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	9a a3       	std	Y+34, r25	; 0x22
    3522:	89 a3       	std	Y+33, r24	; 0x21
    3524:	3f c0       	rjmp	.+126    	; 0x35a4 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    3526:	6b a1       	ldd	r22, Y+35	; 0x23
    3528:	7c a1       	ldd	r23, Y+36	; 0x24
    352a:	8d a1       	ldd	r24, Y+37	; 0x25
    352c:	9e a1       	ldd	r25, Y+38	; 0x26
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	3f ef       	ldi	r19, 0xFF	; 255
    3532:	4f e7       	ldi	r20, 0x7F	; 127
    3534:	57 e4       	ldi	r21, 0x47	; 71
    3536:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    353a:	18 16       	cp	r1, r24
    353c:	4c f5       	brge	.+82     	; 0x3590 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    353e:	6f a1       	ldd	r22, Y+39	; 0x27
    3540:	78 a5       	ldd	r23, Y+40	; 0x28
    3542:	89 a5       	ldd	r24, Y+41	; 0x29
    3544:	9a a5       	ldd	r25, Y+42	; 0x2a
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e2       	ldi	r20, 0x20	; 32
    354c:	51 e4       	ldi	r21, 0x41	; 65
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	bc 01       	movw	r22, r24
    3558:	cd 01       	movw	r24, r26
    355a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	9a a3       	std	Y+34, r25	; 0x22
    3564:	89 a3       	std	Y+33, r24	; 0x21
    3566:	0f c0       	rjmp	.+30     	; 0x3586 <LCD_displayCharacter+0x1cc>
    3568:	80 e9       	ldi	r24, 0x90	; 144
    356a:	91 e0       	ldi	r25, 0x01	; 1
    356c:	98 a3       	std	Y+32, r25	; 0x20
    356e:	8f 8f       	std	Y+31, r24	; 0x1f
    3570:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3572:	98 a1       	ldd	r25, Y+32	; 0x20
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <LCD_displayCharacter+0x1ba>
    3578:	98 a3       	std	Y+32, r25	; 0x20
    357a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357c:	89 a1       	ldd	r24, Y+33	; 0x21
    357e:	9a a1       	ldd	r25, Y+34	; 0x22
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	9a a3       	std	Y+34, r25	; 0x22
    3584:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3586:	89 a1       	ldd	r24, Y+33	; 0x21
    3588:	9a a1       	ldd	r25, Y+34	; 0x22
    358a:	00 97       	sbiw	r24, 0x00	; 0
    358c:	69 f7       	brne	.-38     	; 0x3568 <LCD_displayCharacter+0x1ae>
    358e:	14 c0       	rjmp	.+40     	; 0x35b8 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3590:	6b a1       	ldd	r22, Y+35	; 0x23
    3592:	7c a1       	ldd	r23, Y+36	; 0x24
    3594:	8d a1       	ldd	r24, Y+37	; 0x25
    3596:	9e a1       	ldd	r25, Y+38	; 0x26
    3598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	9a a3       	std	Y+34, r25	; 0x22
    35a2:	89 a3       	std	Y+33, r24	; 0x21
    35a4:	89 a1       	ldd	r24, Y+33	; 0x21
    35a6:	9a a1       	ldd	r25, Y+34	; 0x22
    35a8:	9e 8f       	std	Y+30, r25	; 0x1e
    35aa:	8d 8f       	std	Y+29, r24	; 0x1d
    35ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <LCD_displayCharacter+0x1f6>
    35b4:	9e 8f       	std	Y+30, r25	; 0x1e
    35b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    35b8:	89 ad       	ldd	r24, Y+57	; 0x39
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	82 e0       	ldi	r24, 0x02	; 2
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	b9 01       	movw	r22, r18
    35c4:	0e 94 c1 0a 	call	0x1582	; 0x1582 <LCD_setPortValue>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a0 e8       	ldi	r26, 0x80	; 128
    35ce:	bf e3       	ldi	r27, 0x3F	; 63
    35d0:	89 8f       	std	Y+25, r24	; 0x19
    35d2:	9a 8f       	std	Y+26, r25	; 0x1a
    35d4:	ab 8f       	std	Y+27, r26	; 0x1b
    35d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	69 8d       	ldd	r22, Y+25	; 0x19
    35da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	4a e7       	ldi	r20, 0x7A	; 122
    35e6:	55 e4       	ldi	r21, 0x45	; 69
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	8d 8b       	std	Y+21, r24	; 0x15
    35f2:	9e 8b       	std	Y+22, r25	; 0x16
    35f4:	af 8b       	std	Y+23, r26	; 0x17
    35f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35f8:	6d 89       	ldd	r22, Y+21	; 0x15
    35fa:	7e 89       	ldd	r23, Y+22	; 0x16
    35fc:	8f 89       	ldd	r24, Y+23	; 0x17
    35fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3600:	20 e0       	ldi	r18, 0x00	; 0
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	40 e8       	ldi	r20, 0x80	; 128
    3606:	5f e3       	ldi	r21, 0x3F	; 63
    3608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    360c:	88 23       	and	r24, r24
    360e:	2c f4       	brge	.+10     	; 0x361a <LCD_displayCharacter+0x260>
		__ticks = 1;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	9c 8b       	std	Y+20, r25	; 0x14
    3616:	8b 8b       	std	Y+19, r24	; 0x13
    3618:	3f c0       	rjmp	.+126    	; 0x3698 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    361a:	6d 89       	ldd	r22, Y+21	; 0x15
    361c:	7e 89       	ldd	r23, Y+22	; 0x16
    361e:	8f 89       	ldd	r24, Y+23	; 0x17
    3620:	98 8d       	ldd	r25, Y+24	; 0x18
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	3f ef       	ldi	r19, 0xFF	; 255
    3626:	4f e7       	ldi	r20, 0x7F	; 127
    3628:	57 e4       	ldi	r21, 0x47	; 71
    362a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    362e:	18 16       	cp	r1, r24
    3630:	4c f5       	brge	.+82     	; 0x3684 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3632:	69 8d       	ldd	r22, Y+25	; 0x19
    3634:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	40 e2       	ldi	r20, 0x20	; 32
    3640:	51 e4       	ldi	r21, 0x41	; 65
    3642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9c 8b       	std	Y+20, r25	; 0x14
    3658:	8b 8b       	std	Y+19, r24	; 0x13
    365a:	0f c0       	rjmp	.+30     	; 0x367a <LCD_displayCharacter+0x2c0>
    365c:	80 e9       	ldi	r24, 0x90	; 144
    365e:	91 e0       	ldi	r25, 0x01	; 1
    3660:	9a 8b       	std	Y+18, r25	; 0x12
    3662:	89 8b       	std	Y+17, r24	; 0x11
    3664:	89 89       	ldd	r24, Y+17	; 0x11
    3666:	9a 89       	ldd	r25, Y+18	; 0x12
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <LCD_displayCharacter+0x2ae>
    366c:	9a 8b       	std	Y+18, r25	; 0x12
    366e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3670:	8b 89       	ldd	r24, Y+19	; 0x13
    3672:	9c 89       	ldd	r25, Y+20	; 0x14
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	9c 8b       	std	Y+20, r25	; 0x14
    3678:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367a:	8b 89       	ldd	r24, Y+19	; 0x13
    367c:	9c 89       	ldd	r25, Y+20	; 0x14
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	69 f7       	brne	.-38     	; 0x365c <LCD_displayCharacter+0x2a2>
    3682:	14 c0       	rjmp	.+40     	; 0x36ac <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3684:	6d 89       	ldd	r22, Y+21	; 0x15
    3686:	7e 89       	ldd	r23, Y+22	; 0x16
    3688:	8f 89       	ldd	r24, Y+23	; 0x17
    368a:	98 8d       	ldd	r25, Y+24	; 0x18
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9c 8b       	std	Y+20, r25	; 0x14
    3696:	8b 8b       	std	Y+19, r24	; 0x13
    3698:	8b 89       	ldd	r24, Y+19	; 0x13
    369a:	9c 89       	ldd	r25, Y+20	; 0x14
    369c:	98 8b       	std	Y+16, r25	; 0x10
    369e:	8f 87       	std	Y+15, r24	; 0x0f
    36a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a2:	98 89       	ldd	r25, Y+16	; 0x10
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <LCD_displayCharacter+0x2ea>
    36a8:	98 8b       	std	Y+16, r25	; 0x10
    36aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    36ac:	83 e0       	ldi	r24, 0x03	; 3
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	67 e0       	ldi	r22, 0x07	; 7
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCD_setPinValue>
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	a0 e8       	ldi	r26, 0x80	; 128
    36c2:	bf e3       	ldi	r27, 0x3F	; 63
    36c4:	8b 87       	std	Y+11, r24	; 0x0b
    36c6:	9c 87       	std	Y+12, r25	; 0x0c
    36c8:	ad 87       	std	Y+13, r26	; 0x0d
    36ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	4a e7       	ldi	r20, 0x7A	; 122
    36da:	55 e4       	ldi	r21, 0x45	; 69
    36dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	8f 83       	std	Y+7, r24	; 0x07
    36e6:	98 87       	std	Y+8, r25	; 0x08
    36e8:	a9 87       	std	Y+9, r26	; 0x09
    36ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36ec:	6f 81       	ldd	r22, Y+7	; 0x07
    36ee:	78 85       	ldd	r23, Y+8	; 0x08
    36f0:	89 85       	ldd	r24, Y+9	; 0x09
    36f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	40 e8       	ldi	r20, 0x80	; 128
    36fa:	5f e3       	ldi	r21, 0x3F	; 63
    36fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3700:	88 23       	and	r24, r24
    3702:	2c f4       	brge	.+10     	; 0x370e <LCD_displayCharacter+0x354>
		__ticks = 1;
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	9e 83       	std	Y+6, r25	; 0x06
    370a:	8d 83       	std	Y+5, r24	; 0x05
    370c:	3f c0       	rjmp	.+126    	; 0x378c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    370e:	6f 81       	ldd	r22, Y+7	; 0x07
    3710:	78 85       	ldd	r23, Y+8	; 0x08
    3712:	89 85       	ldd	r24, Y+9	; 0x09
    3714:	9a 85       	ldd	r25, Y+10	; 0x0a
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	3f ef       	ldi	r19, 0xFF	; 255
    371a:	4f e7       	ldi	r20, 0x7F	; 127
    371c:	57 e4       	ldi	r21, 0x47	; 71
    371e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3722:	18 16       	cp	r1, r24
    3724:	4c f5       	brge	.+82     	; 0x3778 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3726:	6b 85       	ldd	r22, Y+11	; 0x0b
    3728:	7c 85       	ldd	r23, Y+12	; 0x0c
    372a:	8d 85       	ldd	r24, Y+13	; 0x0d
    372c:	9e 85       	ldd	r25, Y+14	; 0x0e
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 e2       	ldi	r20, 0x20	; 32
    3734:	51 e4       	ldi	r21, 0x41	; 65
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	9e 83       	std	Y+6, r25	; 0x06
    374c:	8d 83       	std	Y+5, r24	; 0x05
    374e:	0f c0       	rjmp	.+30     	; 0x376e <LCD_displayCharacter+0x3b4>
    3750:	80 e9       	ldi	r24, 0x90	; 144
    3752:	91 e0       	ldi	r25, 0x01	; 1
    3754:	9c 83       	std	Y+4, r25	; 0x04
    3756:	8b 83       	std	Y+3, r24	; 0x03
    3758:	8b 81       	ldd	r24, Y+3	; 0x03
    375a:	9c 81       	ldd	r25, Y+4	; 0x04
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <LCD_displayCharacter+0x3a2>
    3760:	9c 83       	std	Y+4, r25	; 0x04
    3762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3764:	8d 81       	ldd	r24, Y+5	; 0x05
    3766:	9e 81       	ldd	r25, Y+6	; 0x06
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	9e 83       	std	Y+6, r25	; 0x06
    376c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376e:	8d 81       	ldd	r24, Y+5	; 0x05
    3770:	9e 81       	ldd	r25, Y+6	; 0x06
    3772:	00 97       	sbiw	r24, 0x00	; 0
    3774:	69 f7       	brne	.-38     	; 0x3750 <LCD_displayCharacter+0x396>
    3776:	14 c0       	rjmp	.+40     	; 0x37a0 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3778:	6f 81       	ldd	r22, Y+7	; 0x07
    377a:	78 85       	ldd	r23, Y+8	; 0x08
    377c:	89 85       	ldd	r24, Y+9	; 0x09
    377e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	9e 83       	std	Y+6, r25	; 0x06
    378a:	8d 83       	std	Y+5, r24	; 0x05
    378c:	8d 81       	ldd	r24, Y+5	; 0x05
    378e:	9e 81       	ldd	r25, Y+6	; 0x06
    3790:	9a 83       	std	Y+2, r25	; 0x02
    3792:	89 83       	std	Y+1, r24	; 0x01
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	9a 81       	ldd	r25, Y+2	; 0x02
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	f1 f7       	brne	.-4      	; 0x3798 <LCD_displayCharacter+0x3de>
    379c:	9a 83       	std	Y+2, r25	; 0x02
    379e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    37a0:	e9 96       	adiw	r28, 0x39	; 57
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	08 95       	ret

000037b2 <LCD_display_32bit>:

void LCD_display_32bit(u32 num){
    37b2:	0f 93       	push	r16
    37b4:	1f 93       	push	r17
    37b6:	df 93       	push	r29
    37b8:	cf 93       	push	r28
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
    37be:	a6 97       	sbiw	r28, 0x26	; 38
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	f8 94       	cli
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	cd bf       	out	0x3d, r28	; 61
    37ca:	6b a3       	std	Y+35, r22	; 0x23
    37cc:	7c a3       	std	Y+36, r23	; 0x24
    37ce:	8d a3       	std	Y+37, r24	; 0x25
    37d0:	9e a3       	std	Y+38, r25	; 0x26
    u8 str[32];
    sprintf(str, "%lu", num);
    37d2:	8d b7       	in	r24, 0x3d	; 61
    37d4:	9e b7       	in	r25, 0x3e	; 62
    37d6:	08 97       	sbiw	r24, 0x08	; 8
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	f8 94       	cli
    37dc:	9e bf       	out	0x3e, r25	; 62
    37de:	0f be       	out	0x3f, r0	; 63
    37e0:	8d bf       	out	0x3d, r24	; 61
    37e2:	ed b7       	in	r30, 0x3d	; 61
    37e4:	fe b7       	in	r31, 0x3e	; 62
    37e6:	31 96       	adiw	r30, 0x01	; 1
    37e8:	ce 01       	movw	r24, r28
    37ea:	03 96       	adiw	r24, 0x03	; 3
    37ec:	91 83       	std	Z+1, r25	; 0x01
    37ee:	80 83       	st	Z, r24
    37f0:	80 e6       	ldi	r24, 0x60	; 96
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	93 83       	std	Z+3, r25	; 0x03
    37f6:	82 83       	std	Z+2, r24	; 0x02
    37f8:	8b a1       	ldd	r24, Y+35	; 0x23
    37fa:	9c a1       	ldd	r25, Y+36	; 0x24
    37fc:	ad a1       	ldd	r26, Y+37	; 0x25
    37fe:	be a1       	ldd	r27, Y+38	; 0x26
    3800:	84 83       	std	Z+4, r24	; 0x04
    3802:	95 83       	std	Z+5, r25	; 0x05
    3804:	a6 83       	std	Z+6, r26	; 0x06
    3806:	b7 83       	std	Z+7, r27	; 0x07
    3808:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <sprintf>
    380c:	8d b7       	in	r24, 0x3d	; 61
    380e:	9e b7       	in	r25, 0x3e	; 62
    3810:	08 96       	adiw	r24, 0x08	; 8
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	9e bf       	out	0x3e, r25	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	8d bf       	out	0x3d, r24	; 61
    for (int i = 0; i < strlen(str); i++)
    381c:	1a 82       	std	Y+2, r1	; 0x02
    381e:	19 82       	std	Y+1, r1	; 0x01
    3820:	0f c0       	rjmp	.+30     	; 0x3840 <LCD_display_32bit+0x8e>
    {
    	LCD_displayCharacter(str[i]);
    3822:	29 81       	ldd	r18, Y+1	; 0x01
    3824:	3a 81       	ldd	r19, Y+2	; 0x02
    3826:	ce 01       	movw	r24, r28
    3828:	03 96       	adiw	r24, 0x03	; 3
    382a:	fc 01       	movw	r30, r24
    382c:	e2 0f       	add	r30, r18
    382e:	f3 1f       	adc	r31, r19
    3830:	80 81       	ld	r24, Z
    3832:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
}

void LCD_display_32bit(u32 num){
    u8 str[32];
    sprintf(str, "%lu", num);
    for (int i = 0; i < strlen(str); i++)
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	9a 81       	ldd	r25, Y+2	; 0x02
    383a:	01 96       	adiw	r24, 0x01	; 1
    383c:	9a 83       	std	Y+2, r25	; 0x02
    383e:	89 83       	std	Y+1, r24	; 0x01
    3840:	09 81       	ldd	r16, Y+1	; 0x01
    3842:	1a 81       	ldd	r17, Y+2	; 0x02
    3844:	ce 01       	movw	r24, r28
    3846:	03 96       	adiw	r24, 0x03	; 3
    3848:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <strlen>
    384c:	08 17       	cp	r16, r24
    384e:	19 07       	cpc	r17, r25
    3850:	40 f3       	brcs	.-48     	; 0x3822 <LCD_display_32bit+0x70>
    {
    	LCD_displayCharacter(str[i]);
    }
}
    3852:	a6 96       	adiw	r28, 0x26	; 38
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61
    385e:	cf 91       	pop	r28
    3860:	df 91       	pop	r29
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	08 95       	ret

00003868 <LCD_init>:


void LCD_init(void)
{
    3868:	df 93       	push	r29
    386a:	cf 93       	push	r28
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
    3870:	2e 97       	sbiw	r28, 0x0e	; 14
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	de bf       	out	0x3e, r29	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    387c:	83 e0       	ldi	r24, 0x03	; 3
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	64 e0       	ldi	r22, 0x04	; 4
    3882:	70 e0       	ldi	r23, 0x00	; 0
    3884:	41 e0       	ldi	r20, 0x01	; 1
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    388c:	83 e0       	ldi	r24, 0x03	; 3
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	67 e0       	ldi	r22, 0x07	; 7
    3892:	70 e0       	ldi	r23, 0x00	; 0
    3894:	41 e0       	ldi	r20, 0x01	; 1
    3896:	50 e0       	ldi	r21, 0x00	; 0
    3898:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    389c:	82 e0       	ldi	r24, 0x02	; 2
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	6f ef       	ldi	r22, 0xFF	; 255
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_setPortDirection>
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	a0 ea       	ldi	r26, 0xA0	; 160
    38ae:	b1 e4       	ldi	r27, 0x41	; 65
    38b0:	8b 87       	std	Y+11, r24	; 0x0b
    38b2:	9c 87       	std	Y+12, r25	; 0x0c
    38b4:	ad 87       	std	Y+13, r26	; 0x0d
    38b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    38ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    38bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    38be:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	4a e7       	ldi	r20, 0x7A	; 122
    38c6:	55 e4       	ldi	r21, 0x45	; 69
    38c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	8f 83       	std	Y+7, r24	; 0x07
    38d2:	98 87       	std	Y+8, r25	; 0x08
    38d4:	a9 87       	std	Y+9, r26	; 0x09
    38d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38d8:	6f 81       	ldd	r22, Y+7	; 0x07
    38da:	78 85       	ldd	r23, Y+8	; 0x08
    38dc:	89 85       	ldd	r24, Y+9	; 0x09
    38de:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	40 e8       	ldi	r20, 0x80	; 128
    38e6:	5f e3       	ldi	r21, 0x3F	; 63
    38e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ec:	88 23       	and	r24, r24
    38ee:	2c f4       	brge	.+10     	; 0x38fa <LCD_init+0x92>
		__ticks = 1;
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	9e 83       	std	Y+6, r25	; 0x06
    38f6:	8d 83       	std	Y+5, r24	; 0x05
    38f8:	3f c0       	rjmp	.+126    	; 0x3978 <LCD_init+0x110>
	else if (__tmp > 65535)
    38fa:	6f 81       	ldd	r22, Y+7	; 0x07
    38fc:	78 85       	ldd	r23, Y+8	; 0x08
    38fe:	89 85       	ldd	r24, Y+9	; 0x09
    3900:	9a 85       	ldd	r25, Y+10	; 0x0a
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	3f ef       	ldi	r19, 0xFF	; 255
    3906:	4f e7       	ldi	r20, 0x7F	; 127
    3908:	57 e4       	ldi	r21, 0x47	; 71
    390a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    390e:	18 16       	cp	r1, r24
    3910:	4c f5       	brge	.+82     	; 0x3964 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3912:	6b 85       	ldd	r22, Y+11	; 0x0b
    3914:	7c 85       	ldd	r23, Y+12	; 0x0c
    3916:	8d 85       	ldd	r24, Y+13	; 0x0d
    3918:	9e 85       	ldd	r25, Y+14	; 0x0e
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e2       	ldi	r20, 0x20	; 32
    3920:	51 e4       	ldi	r21, 0x41	; 65
    3922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	bc 01       	movw	r22, r24
    392c:	cd 01       	movw	r24, r26
    392e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9e 83       	std	Y+6, r25	; 0x06
    3938:	8d 83       	std	Y+5, r24	; 0x05
    393a:	0f c0       	rjmp	.+30     	; 0x395a <LCD_init+0xf2>
    393c:	80 e9       	ldi	r24, 0x90	; 144
    393e:	91 e0       	ldi	r25, 0x01	; 1
    3940:	9c 83       	std	Y+4, r25	; 0x04
    3942:	8b 83       	std	Y+3, r24	; 0x03
    3944:	8b 81       	ldd	r24, Y+3	; 0x03
    3946:	9c 81       	ldd	r25, Y+4	; 0x04
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	f1 f7       	brne	.-4      	; 0x3948 <LCD_init+0xe0>
    394c:	9c 83       	std	Y+4, r25	; 0x04
    394e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3950:	8d 81       	ldd	r24, Y+5	; 0x05
    3952:	9e 81       	ldd	r25, Y+6	; 0x06
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	9e 83       	std	Y+6, r25	; 0x06
    3958:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395a:	8d 81       	ldd	r24, Y+5	; 0x05
    395c:	9e 81       	ldd	r25, Y+6	; 0x06
    395e:	00 97       	sbiw	r24, 0x00	; 0
    3960:	69 f7       	brne	.-38     	; 0x393c <LCD_init+0xd4>
    3962:	14 c0       	rjmp	.+40     	; 0x398c <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3964:	6f 81       	ldd	r22, Y+7	; 0x07
    3966:	78 85       	ldd	r23, Y+8	; 0x08
    3968:	89 85       	ldd	r24, Y+9	; 0x09
    396a:	9a 85       	ldd	r25, Y+10	; 0x0a
    396c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	9e 83       	std	Y+6, r25	; 0x06
    3976:	8d 83       	std	Y+5, r24	; 0x05
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	9a 83       	std	Y+2, r25	; 0x02
    397e:	89 83       	std	Y+1, r24	; 0x01
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <LCD_init+0x11c>
    3988:	9a 83       	std	Y+2, r25	; 0x02
    398a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    398c:	88 e3       	ldi	r24, 0x38	; 56
    398e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3992:	8c e0       	ldi	r24, 0x0C	; 12
    3994:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
}
    399e:	2e 96       	adiw	r28, 0x0e	; 14
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	cf 91       	pop	r28
    39ac:	df 91       	pop	r29
    39ae:	08 95       	ret

000039b0 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <LCD_GoToXY+0x6>
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <LCD_GoToXY+0x8>
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
    39bc:	89 83       	std	Y+1, r24	; 0x01
    39be:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	88 32       	cpi	r24, 0x28	; 40
    39c4:	c0 f4       	brcc	.+48     	; 0x39f6 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	28 2f       	mov	r18, r24
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	3c 83       	std	Y+4, r19	; 0x04
    39ce:	2b 83       	std	Y+3, r18	; 0x03
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	9c 81       	ldd	r25, Y+4	; 0x04
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	31 f0       	breq	.+12     	; 0x39e4 <LCD_GoToXY+0x34>
    39d8:	2b 81       	ldd	r18, Y+3	; 0x03
    39da:	3c 81       	ldd	r19, Y+4	; 0x04
    39dc:	21 30       	cpi	r18, 0x01	; 1
    39de:	31 05       	cpc	r19, r1
    39e0:	31 f0       	breq	.+12     	; 0x39ee <LCD_GoToXY+0x3e>
    39e2:	09 c0       	rjmp	.+18     	; 0x39f6 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	80 58       	subi	r24, 0x80	; 128
    39e8:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
    39ec:	04 c0       	rjmp	.+8      	; 0x39f6 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    39ee:	8a 81       	ldd	r24, Y+2	; 0x02
    39f0:	80 54       	subi	r24, 0x40	; 64
    39f2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
			break;
		}
	}
}
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	00 d0       	rcall	.+0      	; 0x3a0a <LCD_displayString+0x6>
    3a0a:	0f 92       	push	r0
    3a0c:	cd b7       	in	r28, 0x3d	; 61
    3a0e:	de b7       	in	r29, 0x3e	; 62
    3a10:	9b 83       	std	Y+3, r25	; 0x03
    3a12:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3a14:	19 82       	std	Y+1, r1	; 0x01
    3a16:	0e c0       	rjmp	.+28     	; 0x3a34 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	28 2f       	mov	r18, r24
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a20:	9b 81       	ldd	r25, Y+3	; 0x03
    3a22:	fc 01       	movw	r30, r24
    3a24:	e2 0f       	add	r30, r18
    3a26:	f3 1f       	adc	r31, r19
    3a28:	80 81       	ld	r24, Z
    3a2a:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
		i++;
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	8f 5f       	subi	r24, 0xFF	; 255
    3a32:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	28 2f       	mov	r18, r24
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3e:	fc 01       	movw	r30, r24
    3a40:	e2 0f       	add	r30, r18
    3a42:	f3 1f       	adc	r31, r19
    3a44:	80 81       	ld	r24, Z
    3a46:	88 23       	and	r24, r24
    3a48:	39 f7       	brne	.-50     	; 0x3a18 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	08 95       	ret

00003a56 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
    3a5e:	28 97       	sbiw	r28, 0x08	; 8
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
    3a6c:	6c 83       	std	Y+4, r22	; 0x04
    3a6e:	5e 83       	std	Y+6, r21	; 0x06
    3a70:	4d 83       	std	Y+5, r20	; 0x05
    3a72:	38 87       	std	Y+8, r19	; 0x08
    3a74:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    3a76:	1a 82       	std	Y+2, r1	; 0x02
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    3a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7e:	88 23       	and	r24, r24
    3a80:	49 f4       	brne	.+18     	; 0x3a94 <LCD_String_xy+0x3e>
    3a82:	8c 81       	ldd	r24, Y+4	; 0x04
    3a84:	80 31       	cpi	r24, 0x10	; 16
    3a86:	30 f4       	brcc	.+12     	; 0x3a94 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    3a88:	8c 81       	ldd	r24, Y+4	; 0x04
    3a8a:	8f 70       	andi	r24, 0x0F	; 15
    3a8c:	80 68       	ori	r24, 0x80	; 128
    3a8e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
    3a92:	3a c0       	rjmp	.+116    	; 0x3b08 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    3a94:	8b 81       	ldd	r24, Y+3	; 0x03
    3a96:	81 30       	cpi	r24, 0x01	; 1
    3a98:	b9 f5       	brne	.+110    	; 0x3b08 <LCD_String_xy+0xb2>
    3a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a9c:	80 31       	cpi	r24, 0x10	; 16
    3a9e:	a0 f5       	brcc	.+104    	; 0x3b08 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    3aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa2:	8f 70       	andi	r24, 0x0F	; 15
    3aa4:	80 6c       	ori	r24, 0xC0	; 192
    3aa6:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
    3aaa:	2e c0       	rjmp	.+92     	; 0x3b08 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	e2 0f       	add	r30, r18
    3aba:	f3 1f       	adc	r31, r19
    3abc:	80 81       	ld	r24, Z
    3abe:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
		i++;
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	8f 5f       	subi	r24, 0xFF	; 255
    3ac6:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aca:	88 23       	and	r24, r24
    3acc:	71 f4       	brne	.+28     	; 0x3aea <LCD_String_xy+0x94>
    3ace:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad0:	83 30       	cpi	r24, 0x03	; 3
    3ad2:	58 f0       	brcs	.+22     	; 0x3aea <LCD_String_xy+0x94>
    3ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad6:	8b 30       	cpi	r24, 0x0B	; 11
    3ad8:	41 f4       	brne	.+16     	; 0x3aea <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	60 e0       	ldi	r22, 0x00	; 0
    3ade:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
			c++;
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	8f 5f       	subi	r24, 0xFF	; 255
    3ae6:	89 83       	std	Y+1, r24	; 0x01
    3ae8:	0b c0       	rjmp	.+22     	; 0x3b00 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3aea:	8b 81       	ldd	r24, Y+3	; 0x03
    3aec:	81 30       	cpi	r24, 0x01	; 1
    3aee:	41 f4       	brne	.+16     	; 0x3b00 <LCD_String_xy+0xaa>
    3af0:	8c 81       	ldd	r24, Y+4	; 0x04
    3af2:	83 30       	cpi	r24, 0x03	; 3
    3af4:	28 f0       	brcs	.+10     	; 0x3b00 <LCD_String_xy+0xaa>
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	8b 30       	cpi	r24, 0x0B	; 11
    3afa:	11 f4       	brne	.+4      	; 0x3b00 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3afc:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
		}

		*count = c;
    3b00:	ef 81       	ldd	r30, Y+7	; 0x07
    3b02:	f8 85       	ldd	r31, Y+8	; 0x08
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3b08:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b10:	9e 81       	ldd	r25, Y+6	; 0x06
    3b12:	fc 01       	movw	r30, r24
    3b14:	e2 0f       	add	r30, r18
    3b16:	f3 1f       	adc	r31, r19
    3b18:	80 81       	ld	r24, Z
    3b1a:	88 23       	and	r24, r24
    3b1c:	39 f6       	brne	.-114    	; 0x3aac <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3b1e:	28 96       	adiw	r28, 0x08	; 8
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	08 95       	ret

00003b30 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	2e 97       	sbiw	r28, 0x0e	; 14
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	a0 e0       	ldi	r26, 0x00	; 0
    3b50:	b0 e4       	ldi	r27, 0x40	; 64
    3b52:	8b 87       	std	Y+11, r24	; 0x0b
    3b54:	9c 87       	std	Y+12, r25	; 0x0c
    3b56:	ad 87       	std	Y+13, r26	; 0x0d
    3b58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	4a e7       	ldi	r20, 0x7A	; 122
    3b68:	55 e4       	ldi	r21, 0x45	; 69
    3b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	8f 83       	std	Y+7, r24	; 0x07
    3b74:	98 87       	std	Y+8, r25	; 0x08
    3b76:	a9 87       	std	Y+9, r26	; 0x09
    3b78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7c:	78 85       	ldd	r23, Y+8	; 0x08
    3b7e:	89 85       	ldd	r24, Y+9	; 0x09
    3b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	40 e8       	ldi	r20, 0x80	; 128
    3b88:	5f e3       	ldi	r21, 0x3F	; 63
    3b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b8e:	88 23       	and	r24, r24
    3b90:	2c f4       	brge	.+10     	; 0x3b9c <LCD_ClearScreen+0x6c>
		__ticks = 1;
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	9e 83       	std	Y+6, r25	; 0x06
    3b98:	8d 83       	std	Y+5, r24	; 0x05
    3b9a:	3f c0       	rjmp	.+126    	; 0x3c1a <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b9e:	78 85       	ldd	r23, Y+8	; 0x08
    3ba0:	89 85       	ldd	r24, Y+9	; 0x09
    3ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	3f ef       	ldi	r19, 0xFF	; 255
    3ba8:	4f e7       	ldi	r20, 0x7F	; 127
    3baa:	57 e4       	ldi	r21, 0x47	; 71
    3bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bb0:	18 16       	cp	r1, r24
    3bb2:	4c f5       	brge	.+82     	; 0x3c06 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	40 e2       	ldi	r20, 0x20	; 32
    3bc2:	51 e4       	ldi	r21, 0x41	; 65
    3bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	bc 01       	movw	r22, r24
    3bce:	cd 01       	movw	r24, r26
    3bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	9e 83       	std	Y+6, r25	; 0x06
    3bda:	8d 83       	std	Y+5, r24	; 0x05
    3bdc:	0f c0       	rjmp	.+30     	; 0x3bfc <LCD_ClearScreen+0xcc>
    3bde:	80 e9       	ldi	r24, 0x90	; 144
    3be0:	91 e0       	ldi	r25, 0x01	; 1
    3be2:	9c 83       	std	Y+4, r25	; 0x04
    3be4:	8b 83       	std	Y+3, r24	; 0x03
    3be6:	8b 81       	ldd	r24, Y+3	; 0x03
    3be8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bea:	01 97       	sbiw	r24, 0x01	; 1
    3bec:	f1 f7       	brne	.-4      	; 0x3bea <LCD_ClearScreen+0xba>
    3bee:	9c 83       	std	Y+4, r25	; 0x04
    3bf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	9e 83       	std	Y+6, r25	; 0x06
    3bfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3c00:	00 97       	sbiw	r24, 0x00	; 0
    3c02:	69 f7       	brne	.-38     	; 0x3bde <LCD_ClearScreen+0xae>
    3c04:	14 c0       	rjmp	.+40     	; 0x3c2e <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c06:	6f 81       	ldd	r22, Y+7	; 0x07
    3c08:	78 85       	ldd	r23, Y+8	; 0x08
    3c0a:	89 85       	ldd	r24, Y+9	; 0x09
    3c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	9e 83       	std	Y+6, r25	; 0x06
    3c18:	8d 83       	std	Y+5, r24	; 0x05
    3c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1e:	9a 83       	std	Y+2, r25	; 0x02
    3c20:	89 83       	std	Y+1, r24	; 0x01
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	01 97       	sbiw	r24, 0x01	; 1
    3c28:	f1 f7       	brne	.-4      	; 0x3c26 <LCD_ClearScreen+0xf6>
    3c2a:	9a 83       	std	Y+2, r25	; 0x02
    3c2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3c2e:	2e 96       	adiw	r28, 0x0e	; 14
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	0f be       	out	0x3f, r0	; 63
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	2e 97       	sbiw	r28, 0x0e	; 14
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3c54:	88 e1       	ldi	r24, 0x18	; 24
    3c56:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	a0 ea       	ldi	r26, 0xA0	; 160
    3c60:	b1 e4       	ldi	r27, 0x41	; 65
    3c62:	8b 87       	std	Y+11, r24	; 0x0b
    3c64:	9c 87       	std	Y+12, r25	; 0x0c
    3c66:	ad 87       	std	Y+13, r26	; 0x0d
    3c68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	4a e7       	ldi	r20, 0x7A	; 122
    3c78:	55 e4       	ldi	r21, 0x45	; 69
    3c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	8f 83       	std	Y+7, r24	; 0x07
    3c84:	98 87       	std	Y+8, r25	; 0x08
    3c86:	a9 87       	std	Y+9, r26	; 0x09
    3c88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c8c:	78 85       	ldd	r23, Y+8	; 0x08
    3c8e:	89 85       	ldd	r24, Y+9	; 0x09
    3c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e8       	ldi	r20, 0x80	; 128
    3c98:	5f e3       	ldi	r21, 0x3F	; 63
    3c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c9e:	88 23       	and	r24, r24
    3ca0:	2c f4       	brge	.+10     	; 0x3cac <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	9e 83       	std	Y+6, r25	; 0x06
    3ca8:	8d 83       	std	Y+5, r24	; 0x05
    3caa:	3f c0       	rjmp	.+126    	; 0x3d2a <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3cac:	6f 81       	ldd	r22, Y+7	; 0x07
    3cae:	78 85       	ldd	r23, Y+8	; 0x08
    3cb0:	89 85       	ldd	r24, Y+9	; 0x09
    3cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	3f ef       	ldi	r19, 0xFF	; 255
    3cb8:	4f e7       	ldi	r20, 0x7F	; 127
    3cba:	57 e4       	ldi	r21, 0x47	; 71
    3cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cc0:	18 16       	cp	r1, r24
    3cc2:	4c f5       	brge	.+82     	; 0x3d16 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e2       	ldi	r20, 0x20	; 32
    3cd2:	51 e4       	ldi	r21, 0x41	; 65
    3cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	bc 01       	movw	r22, r24
    3cde:	cd 01       	movw	r24, r26
    3ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	9e 83       	std	Y+6, r25	; 0x06
    3cea:	8d 83       	std	Y+5, r24	; 0x05
    3cec:	0f c0       	rjmp	.+30     	; 0x3d0c <LCD_ShiftingLeft+0xcc>
    3cee:	80 e9       	ldi	r24, 0x90	; 144
    3cf0:	91 e0       	ldi	r25, 0x01	; 1
    3cf2:	9c 83       	std	Y+4, r25	; 0x04
    3cf4:	8b 83       	std	Y+3, r24	; 0x03
    3cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <LCD_ShiftingLeft+0xba>
    3cfe:	9c 83       	std	Y+4, r25	; 0x04
    3d00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d02:	8d 81       	ldd	r24, Y+5	; 0x05
    3d04:	9e 81       	ldd	r25, Y+6	; 0x06
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	9e 83       	std	Y+6, r25	; 0x06
    3d0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d10:	00 97       	sbiw	r24, 0x00	; 0
    3d12:	69 f7       	brne	.-38     	; 0x3cee <LCD_ShiftingLeft+0xae>
    3d14:	14 c0       	rjmp	.+40     	; 0x3d3e <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d16:	6f 81       	ldd	r22, Y+7	; 0x07
    3d18:	78 85       	ldd	r23, Y+8	; 0x08
    3d1a:	89 85       	ldd	r24, Y+9	; 0x09
    3d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	9e 83       	std	Y+6, r25	; 0x06
    3d28:	8d 83       	std	Y+5, r24	; 0x05
    3d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2e:	9a 83       	std	Y+2, r25	; 0x02
    3d30:	89 83       	std	Y+1, r24	; 0x01
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
    3d34:	9a 81       	ldd	r25, Y+2	; 0x02
    3d36:	01 97       	sbiw	r24, 0x01	; 1
    3d38:	f1 f7       	brne	.-4      	; 0x3d36 <LCD_ShiftingLeft+0xf6>
    3d3a:	9a 83       	std	Y+2, r25	; 0x02
    3d3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3d3e:	2e 96       	adiw	r28, 0x0e	; 14
    3d40:	0f b6       	in	r0, 0x3f	; 63
    3d42:	f8 94       	cli
    3d44:	de bf       	out	0x3e, r29	; 62
    3d46:	0f be       	out	0x3f, r0	; 63
    3d48:	cd bf       	out	0x3d, r28	; 61
    3d4a:	cf 91       	pop	r28
    3d4c:	df 91       	pop	r29
    3d4e:	08 95       	ret

00003d50 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3d50:	df 93       	push	r29
    3d52:	cf 93       	push	r28
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
    3d58:	2e 97       	sbiw	r28, 0x0e	; 14
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	f8 94       	cli
    3d5e:	de bf       	out	0x3e, r29	; 62
    3d60:	0f be       	out	0x3f, r0	; 63
    3d62:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3d64:	8c e1       	ldi	r24, 0x1C	; 28
    3d66:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
    3d6a:	80 e0       	ldi	r24, 0x00	; 0
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	a0 ea       	ldi	r26, 0xA0	; 160
    3d70:	b1 e4       	ldi	r27, 0x41	; 65
    3d72:	8b 87       	std	Y+11, r24	; 0x0b
    3d74:	9c 87       	std	Y+12, r25	; 0x0c
    3d76:	ad 87       	std	Y+13, r26	; 0x0d
    3d78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	4a e7       	ldi	r20, 0x7A	; 122
    3d88:	55 e4       	ldi	r21, 0x45	; 69
    3d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	8f 83       	std	Y+7, r24	; 0x07
    3d94:	98 87       	std	Y+8, r25	; 0x08
    3d96:	a9 87       	std	Y+9, r26	; 0x09
    3d98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d9c:	78 85       	ldd	r23, Y+8	; 0x08
    3d9e:	89 85       	ldd	r24, Y+9	; 0x09
    3da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e8       	ldi	r20, 0x80	; 128
    3da8:	5f e3       	ldi	r21, 0x3F	; 63
    3daa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dae:	88 23       	and	r24, r24
    3db0:	2c f4       	brge	.+10     	; 0x3dbc <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	9e 83       	std	Y+6, r25	; 0x06
    3db8:	8d 83       	std	Y+5, r24	; 0x05
    3dba:	3f c0       	rjmp	.+126    	; 0x3e3a <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dbe:	78 85       	ldd	r23, Y+8	; 0x08
    3dc0:	89 85       	ldd	r24, Y+9	; 0x09
    3dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	3f ef       	ldi	r19, 0xFF	; 255
    3dc8:	4f e7       	ldi	r20, 0x7F	; 127
    3dca:	57 e4       	ldi	r21, 0x47	; 71
    3dcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dd0:	18 16       	cp	r1, r24
    3dd2:	4c f5       	brge	.+82     	; 0x3e26 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 e2       	ldi	r20, 0x20	; 32
    3de2:	51 e4       	ldi	r21, 0x41	; 65
    3de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	bc 01       	movw	r22, r24
    3dee:	cd 01       	movw	r24, r26
    3df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	9e 83       	std	Y+6, r25	; 0x06
    3dfa:	8d 83       	std	Y+5, r24	; 0x05
    3dfc:	0f c0       	rjmp	.+30     	; 0x3e1c <LCD_ShiftingRight+0xcc>
    3dfe:	80 e9       	ldi	r24, 0x90	; 144
    3e00:	91 e0       	ldi	r25, 0x01	; 1
    3e02:	9c 83       	std	Y+4, r25	; 0x04
    3e04:	8b 83       	std	Y+3, r24	; 0x03
    3e06:	8b 81       	ldd	r24, Y+3	; 0x03
    3e08:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <LCD_ShiftingRight+0xba>
    3e0e:	9c 83       	std	Y+4, r25	; 0x04
    3e10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e12:	8d 81       	ldd	r24, Y+5	; 0x05
    3e14:	9e 81       	ldd	r25, Y+6	; 0x06
    3e16:	01 97       	sbiw	r24, 0x01	; 1
    3e18:	9e 83       	std	Y+6, r25	; 0x06
    3e1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e20:	00 97       	sbiw	r24, 0x00	; 0
    3e22:	69 f7       	brne	.-38     	; 0x3dfe <LCD_ShiftingRight+0xae>
    3e24:	14 c0       	rjmp	.+40     	; 0x3e4e <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e26:	6f 81       	ldd	r22, Y+7	; 0x07
    3e28:	78 85       	ldd	r23, Y+8	; 0x08
    3e2a:	89 85       	ldd	r24, Y+9	; 0x09
    3e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	9e 83       	std	Y+6, r25	; 0x06
    3e38:	8d 83       	std	Y+5, r24	; 0x05
    3e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3e:	9a 83       	std	Y+2, r25	; 0x02
    3e40:	89 83       	std	Y+1, r24	; 0x01
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	01 97       	sbiw	r24, 0x01	; 1
    3e48:	f1 f7       	brne	.-4      	; 0x3e46 <LCD_ShiftingRight+0xf6>
    3e4a:	9a 83       	std	Y+2, r25	; 0x02
    3e4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3e4e:	2e 96       	adiw	r28, 0x0e	; 14
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	f8 94       	cli
    3e54:	de bf       	out	0x3e, r29	; 62
    3e56:	0f be       	out	0x3f, r0	; 63
    3e58:	cd bf       	out	0x3d, r28	; 61
    3e5a:	cf 91       	pop	r28
    3e5c:	df 91       	pop	r29
    3e5e:	08 95       	ret

00003e60 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3e60:	0f 93       	push	r16
    3e62:	df 93       	push	r29
    3e64:	cf 93       	push	r28
    3e66:	cd b7       	in	r28, 0x3d	; 61
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	28 97       	sbiw	r28, 0x08	; 8
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	8b 83       	std	Y+3, r24	; 0x03
    3e78:	7d 83       	std	Y+5, r23	; 0x05
    3e7a:	6c 83       	std	Y+4, r22	; 0x04
    3e7c:	4e 83       	std	Y+6, r20	; 0x06
    3e7e:	2f 83       	std	Y+7, r18	; 0x07
    3e80:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3e82:	88 85       	ldd	r24, Y+8	; 0x08
    3e84:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3e88:	1a 82       	std	Y+2, r1	; 0x02
    3e8a:	19 82       	std	Y+1, r1	; 0x01
    3e8c:	0f c0       	rjmp	.+30     	; 0x3eac <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3e8e:	29 81       	ldd	r18, Y+1	; 0x01
    3e90:	3a 81       	ldd	r19, Y+2	; 0x02
    3e92:	8c 81       	ldd	r24, Y+4	; 0x04
    3e94:	9d 81       	ldd	r25, Y+5	; 0x05
    3e96:	fc 01       	movw	r30, r24
    3e98:	e2 0f       	add	r30, r18
    3e9a:	f3 1f       	adc	r31, r19
    3e9c:	80 81       	ld	r24, Z
    3e9e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea6:	01 96       	adiw	r24, 0x01	; 1
    3ea8:	9a 83       	std	Y+2, r25	; 0x02
    3eaa:	89 83       	std	Y+1, r24	; 0x01
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb0:	88 30       	cpi	r24, 0x08	; 8
    3eb2:	91 05       	cpc	r25, r1
    3eb4:	64 f3       	brlt	.-40     	; 0x3e8e <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eba:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    3ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ec6:	80 31       	cpi	r24, 0x10	; 16
    3ec8:	48 f0       	brcs	.+18     	; 0x3edc <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3eca:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	60 e0       	ldi	r22, 0x00	; 0
    3ed2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed8:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
	}
}
    3edc:	28 96       	adiw	r28, 0x08	; 8
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	cf 91       	pop	r28
    3eea:	df 91       	pop	r29
    3eec:	0f 91       	pop	r16
    3eee:	08 95       	ret

00003ef0 <KPD_u8_GetKey>:
u8 KPD_u8_ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};
const u8 KPD_u8_Keys[4][4] = KEY_KEYS;


u8 KPD_u8_GetKey(u8 *Copy_pu8_ReturnKey)
{
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	65 97       	sbiw	r28, 0x15	; 21
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	9c 8b       	std	Y+20, r25	; 0x14
    3f06:	8b 8b       	std	Y+19, r24	; 0x13
    u8 Local_u8_RowCounter, Local_u8_ColCounter, Local_u8_PinVal, Local_u8_Flag = 0;
    3f08:	1f 86       	std	Y+15, r1	; 0x0f
    *Copy_pu8_ReturnKey = KPD_U8_UNPRESED;
    3f0a:	eb 89       	ldd	r30, Y+19	; 0x13
    3f0c:	fc 89       	ldd	r31, Y+20	; 0x14
    3f0e:	8f ef       	ldi	r24, 0xFF	; 255
    3f10:	80 83       	st	Z, r24

    if (Copy_pu8_ReturnKey != NULL)
    3f12:	8b 89       	ldd	r24, Y+19	; 0x13
    3f14:	9c 89       	ldd	r25, Y+20	; 0x14
    3f16:	00 97       	sbiw	r24, 0x00	; 0
    3f18:	09 f4       	brne	.+2      	; 0x3f1c <KPD_u8_GetKey+0x2c>
    3f1a:	ee c0       	rjmp	.+476    	; 0x40f8 <KPD_u8_GetKey+0x208>
    {
        for (Local_u8_RowCounter = 0; Local_u8_RowCounter <= 3; Local_u8_RowCounter++)
    3f1c:	19 8a       	std	Y+17, r1	; 0x11
    3f1e:	e5 c0       	rjmp	.+458    	; 0x40ea <KPD_u8_GetKey+0x1fa>
        {
        	DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[Local_u8_RowCounter], DIO_u8_LOW);
    3f20:	89 89       	ldd	r24, Y+17	; 0x11
    3f22:	88 2f       	mov	r24, r24
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	fc 01       	movw	r30, r24
    3f28:	e5 5e       	subi	r30, 0xE5	; 229
    3f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f2c:	90 81       	ld	r25, Z
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	69 2f       	mov	r22, r25
    3f32:	40 e0       	ldi	r20, 0x00	; 0
    3f34:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>

            for (Local_u8_ColCounter = 0; Local_u8_ColCounter <= 3; Local_u8_ColCounter++)
    3f38:	18 8a       	std	Y+16, r1	; 0x10
    3f3a:	c1 c0       	rjmp	.+386    	; 0x40be <KPD_u8_GetKey+0x1ce>
            {
            	DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);
    3f3c:	88 89       	ldd	r24, Y+16	; 0x10
    3f3e:	88 2f       	mov	r24, r24
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	fc 01       	movw	r30, r24
    3f44:	e1 5e       	subi	r30, 0xE1	; 225
    3f46:	fe 4f       	sbci	r31, 0xFE	; 254
    3f48:	90 81       	ld	r25, Z
    3f4a:	9e 01       	movw	r18, r28
    3f4c:	2e 5e       	subi	r18, 0xEE	; 238
    3f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	69 2f       	mov	r22, r25
    3f54:	a9 01       	movw	r20, r18
    3f56:	0e 94 4f 10 	call	0x209e	; 0x209e <DIO_u8GetPinValue>

                if (Local_u8_PinVal == DIO_u8_LOW)
    3f5a:	8a 89       	ldd	r24, Y+18	; 0x12
    3f5c:	88 23       	and	r24, r24
    3f5e:	09 f0       	breq	.+2      	; 0x3f62 <KPD_u8_GetKey+0x72>
    3f60:	ab c0       	rjmp	.+342    	; 0x40b8 <KPD_u8_GetKey+0x1c8>
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	a0 ea       	ldi	r26, 0xA0	; 160
    3f68:	b1 e4       	ldi	r27, 0x41	; 65
    3f6a:	8b 87       	std	Y+11, r24	; 0x0b
    3f6c:	9c 87       	std	Y+12, r25	; 0x0c
    3f6e:	ad 87       	std	Y+13, r26	; 0x0d
    3f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	4a e7       	ldi	r20, 0x7A	; 122
    3f80:	55 e4       	ldi	r21, 0x45	; 69
    3f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	8f 83       	std	Y+7, r24	; 0x07
    3f8c:	98 87       	std	Y+8, r25	; 0x08
    3f8e:	a9 87       	std	Y+9, r26	; 0x09
    3f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f92:	6f 81       	ldd	r22, Y+7	; 0x07
    3f94:	78 85       	ldd	r23, Y+8	; 0x08
    3f96:	89 85       	ldd	r24, Y+9	; 0x09
    3f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	40 e8       	ldi	r20, 0x80	; 128
    3fa0:	5f e3       	ldi	r21, 0x3F	; 63
    3fa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fa6:	88 23       	and	r24, r24
    3fa8:	2c f4       	brge	.+10     	; 0x3fb4 <KPD_u8_GetKey+0xc4>
		__ticks = 1;
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
    3fb2:	3f c0       	rjmp	.+126    	; 0x4032 <KPD_u8_GetKey+0x142>
	else if (__tmp > 65535)
    3fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb6:	78 85       	ldd	r23, Y+8	; 0x08
    3fb8:	89 85       	ldd	r24, Y+9	; 0x09
    3fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	3f ef       	ldi	r19, 0xFF	; 255
    3fc0:	4f e7       	ldi	r20, 0x7F	; 127
    3fc2:	57 e4       	ldi	r21, 0x47	; 71
    3fc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fc8:	18 16       	cp	r1, r24
    3fca:	4c f5       	brge	.+82     	; 0x401e <KPD_u8_GetKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e2       	ldi	r20, 0x20	; 32
    3fda:	51 e4       	ldi	r21, 0x41	; 65
    3fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	bc 01       	movw	r22, r24
    3fe6:	cd 01       	movw	r24, r26
    3fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	9e 83       	std	Y+6, r25	; 0x06
    3ff2:	8d 83       	std	Y+5, r24	; 0x05
    3ff4:	0f c0       	rjmp	.+30     	; 0x4014 <KPD_u8_GetKey+0x124>
    3ff6:	80 e9       	ldi	r24, 0x90	; 144
    3ff8:	91 e0       	ldi	r25, 0x01	; 1
    3ffa:	9c 83       	std	Y+4, r25	; 0x04
    3ffc:	8b 83       	std	Y+3, r24	; 0x03
    3ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    4000:	9c 81       	ldd	r25, Y+4	; 0x04
    4002:	01 97       	sbiw	r24, 0x01	; 1
    4004:	f1 f7       	brne	.-4      	; 0x4002 <KPD_u8_GetKey+0x112>
    4006:	9c 83       	std	Y+4, r25	; 0x04
    4008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    400a:	8d 81       	ldd	r24, Y+5	; 0x05
    400c:	9e 81       	ldd	r25, Y+6	; 0x06
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	9e 83       	std	Y+6, r25	; 0x06
    4012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4014:	8d 81       	ldd	r24, Y+5	; 0x05
    4016:	9e 81       	ldd	r25, Y+6	; 0x06
    4018:	00 97       	sbiw	r24, 0x00	; 0
    401a:	69 f7       	brne	.-38     	; 0x3ff6 <KPD_u8_GetKey+0x106>
    401c:	14 c0       	rjmp	.+40     	; 0x4046 <KPD_u8_GetKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401e:	6f 81       	ldd	r22, Y+7	; 0x07
    4020:	78 85       	ldd	r23, Y+8	; 0x08
    4022:	89 85       	ldd	r24, Y+9	; 0x09
    4024:	9a 85       	ldd	r25, Y+10	; 0x0a
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	9e 83       	std	Y+6, r25	; 0x06
    4030:	8d 83       	std	Y+5, r24	; 0x05
    4032:	8d 81       	ldd	r24, Y+5	; 0x05
    4034:	9e 81       	ldd	r25, Y+6	; 0x06
    4036:	9a 83       	std	Y+2, r25	; 0x02
    4038:	89 83       	std	Y+1, r24	; 0x01
    403a:	89 81       	ldd	r24, Y+1	; 0x01
    403c:	9a 81       	ldd	r25, Y+2	; 0x02
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	f1 f7       	brne	.-4      	; 0x403e <KPD_u8_GetKey+0x14e>
    4042:	9a 83       	std	Y+2, r25	; 0x02
    4044:	89 83       	std	Y+1, r24	; 0x01
                {
                    _delay_ms(20);
                    DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);
    4046:	88 89       	ldd	r24, Y+16	; 0x10
    4048:	88 2f       	mov	r24, r24
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	fc 01       	movw	r30, r24
    404e:	e1 5e       	subi	r30, 0xE1	; 225
    4050:	fe 4f       	sbci	r31, 0xFE	; 254
    4052:	90 81       	ld	r25, Z
    4054:	9e 01       	movw	r18, r28
    4056:	2e 5e       	subi	r18, 0xEE	; 238
    4058:	3f 4f       	sbci	r19, 0xFF	; 255
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	69 2f       	mov	r22, r25
    405e:	a9 01       	movw	r20, r18
    4060:	0e 94 4f 10 	call	0x209e	; 0x209e <DIO_u8GetPinValue>
    4064:	0f c0       	rjmp	.+30     	; 0x4084 <KPD_u8_GetKey+0x194>

                    while (Local_u8_PinVal == DIO_u8_LOW)
                    {
                    	DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);
    4066:	88 89       	ldd	r24, Y+16	; 0x10
    4068:	88 2f       	mov	r24, r24
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	fc 01       	movw	r30, r24
    406e:	e1 5e       	subi	r30, 0xE1	; 225
    4070:	fe 4f       	sbci	r31, 0xFE	; 254
    4072:	90 81       	ld	r25, Z
    4074:	9e 01       	movw	r18, r28
    4076:	2e 5e       	subi	r18, 0xEE	; 238
    4078:	3f 4f       	sbci	r19, 0xFF	; 255
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	69 2f       	mov	r22, r25
    407e:	a9 01       	movw	r20, r18
    4080:	0e 94 4f 10 	call	0x209e	; 0x209e <DIO_u8GetPinValue>
                if (Local_u8_PinVal == DIO_u8_LOW)
                {
                    _delay_ms(20);
                    DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);

                    while (Local_u8_PinVal == DIO_u8_LOW)
    4084:	8a 89       	ldd	r24, Y+18	; 0x12
    4086:	88 23       	and	r24, r24
    4088:	71 f3       	breq	.-36     	; 0x4066 <KPD_u8_GetKey+0x176>
                    {
                    	DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);
                    }

                    *Copy_pu8_ReturnKey = KPD_u8_Keys[Local_u8_RowCounter][Local_u8_ColCounter];
    408a:	89 89       	ldd	r24, Y+17	; 0x11
    408c:	48 2f       	mov	r20, r24
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	88 89       	ldd	r24, Y+16	; 0x10
    4092:	28 2f       	mov	r18, r24
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	ca 01       	movw	r24, r20
    4098:	88 0f       	add	r24, r24
    409a:	99 1f       	adc	r25, r25
    409c:	88 0f       	add	r24, r24
    409e:	99 1f       	adc	r25, r25
    40a0:	82 0f       	add	r24, r18
    40a2:	93 1f       	adc	r25, r19
    40a4:	fc 01       	movw	r30, r24
    40a6:	e3 5d       	subi	r30, 0xD3	; 211
    40a8:	fe 4f       	sbci	r31, 0xFE	; 254
    40aa:	80 81       	ld	r24, Z
    40ac:	eb 89       	ldd	r30, Y+19	; 0x13
    40ae:	fc 89       	ldd	r31, Y+20	; 0x14
    40b0:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	8f 87       	std	Y+15, r24	; 0x0f
    40b6:	07 c0       	rjmp	.+14     	; 0x40c6 <KPD_u8_GetKey+0x1d6>
    {
        for (Local_u8_RowCounter = 0; Local_u8_RowCounter <= 3; Local_u8_RowCounter++)
        {
        	DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[Local_u8_RowCounter], DIO_u8_LOW);

            for (Local_u8_ColCounter = 0; Local_u8_ColCounter <= 3; Local_u8_ColCounter++)
    40b8:	88 89       	ldd	r24, Y+16	; 0x10
    40ba:	8f 5f       	subi	r24, 0xFF	; 255
    40bc:	88 8b       	std	Y+16, r24	; 0x10
    40be:	88 89       	ldd	r24, Y+16	; 0x10
    40c0:	84 30       	cpi	r24, 0x04	; 4
    40c2:	08 f4       	brcc	.+2      	; 0x40c6 <KPD_u8_GetKey+0x1d6>
    40c4:	3b cf       	rjmp	.-394    	; 0x3f3c <KPD_u8_GetKey+0x4c>
                    Local_u8_Flag = 1;
                    break;
                }
            }

            DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[Local_u8_RowCounter], DIO_u8_HIGH);
    40c6:	89 89       	ldd	r24, Y+17	; 0x11
    40c8:	88 2f       	mov	r24, r24
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	fc 01       	movw	r30, r24
    40ce:	e5 5e       	subi	r30, 0xE5	; 229
    40d0:	fe 4f       	sbci	r31, 0xFE	; 254
    40d2:	90 81       	ld	r25, Z
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	69 2f       	mov	r22, r25
    40d8:	41 e0       	ldi	r20, 0x01	; 1
    40da:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>

            if (Local_u8_Flag)
    40de:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e0:	88 23       	and	r24, r24
    40e2:	39 f4       	brne	.+14     	; 0x40f2 <KPD_u8_GetKey+0x202>
    u8 Local_u8_RowCounter, Local_u8_ColCounter, Local_u8_PinVal, Local_u8_Flag = 0;
    *Copy_pu8_ReturnKey = KPD_U8_UNPRESED;

    if (Copy_pu8_ReturnKey != NULL)
    {
        for (Local_u8_RowCounter = 0; Local_u8_RowCounter <= 3; Local_u8_RowCounter++)
    40e4:	89 89       	ldd	r24, Y+17	; 0x11
    40e6:	8f 5f       	subi	r24, 0xFF	; 255
    40e8:	89 8b       	std	Y+17, r24	; 0x11
    40ea:	89 89       	ldd	r24, Y+17	; 0x11
    40ec:	84 30       	cpi	r24, 0x04	; 4
    40ee:	08 f4       	brcc	.+2      	; 0x40f2 <KPD_u8_GetKey+0x202>
    40f0:	17 cf       	rjmp	.-466    	; 0x3f20 <KPD_u8_GetKey+0x30>
    else
    {
        return STD_TYPES_NOK;
    }

    return STD_TYPES_OK;
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	8d 8b       	std	Y+21, r24	; 0x15
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <KPD_u8_GetKey+0x20a>
            }
        }
    }
    else
    {
        return STD_TYPES_NOK;
    40f8:	1d 8a       	std	Y+21, r1	; 0x15
    40fa:	8d 89       	ldd	r24, Y+21	; 0x15
    }

    return STD_TYPES_OK;
}
    40fc:	65 96       	adiw	r28, 0x15	; 21
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	08 95       	ret

0000410e <KeyPad_u8_Init>:



u8 KeyPad_u8_Init()
{
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	00 d0       	rcall	.+0      	; 0x4114 <KeyPad_u8_Init+0x6>
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0 ; i<=3 ; i++)
    4118:	1a 82       	std	Y+2, r1	; 0x02
    411a:	19 82       	std	Y+1, r1	; 0x01
    411c:	31 c0       	rjmp	.+98     	; 0x4180 <KeyPad_u8_Init+0x72>
	{
		// Set columns as outputs and enable pull-up resistors
		DIO_u8SetPinDirection(KPD_u8_C_PORT, KPD_u8_ColsPins[i], DIO_u8_INPUT);
    411e:	89 81       	ldd	r24, Y+1	; 0x01
    4120:	9a 81       	ldd	r25, Y+2	; 0x02
    4122:	fc 01       	movw	r30, r24
    4124:	e1 5e       	subi	r30, 0xE1	; 225
    4126:	fe 4f       	sbci	r31, 0xFE	; 254
    4128:	90 81       	ld	r25, Z
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	69 2f       	mov	r22, r25
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[i], DIO_u8_HIGH);
    4134:	89 81       	ldd	r24, Y+1	; 0x01
    4136:	9a 81       	ldd	r25, Y+2	; 0x02
    4138:	fc 01       	movw	r30, r24
    413a:	e1 5e       	subi	r30, 0xE1	; 225
    413c:	fe 4f       	sbci	r31, 0xFE	; 254
    413e:	90 81       	ld	r25, Z
    4140:	80 e0       	ldi	r24, 0x00	; 0
    4142:	69 2f       	mov	r22, r25
    4144:	41 e0       	ldi	r20, 0x01	; 1
    4146:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>

		// Set rows as inputs
		DIO_u8SetPinDirection(KPD_u8_R_PORT,KPD_u8_RowsPins[i], DIO_u8_OUTPUT);
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	9a 81       	ldd	r25, Y+2	; 0x02
    414e:	fc 01       	movw	r30, r24
    4150:	e5 5e       	subi	r30, 0xE5	; 229
    4152:	fe 4f       	sbci	r31, 0xFE	; 254
    4154:	90 81       	ld	r25, Z
    4156:	80 e0       	ldi	r24, 0x00	; 0
    4158:	69 2f       	mov	r22, r25
    415a:	41 e0       	ldi	r20, 0x01	; 1
    415c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[i], DIO_u8_HIGH);
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	9a 81       	ldd	r25, Y+2	; 0x02
    4164:	fc 01       	movw	r30, r24
    4166:	e5 5e       	subi	r30, 0xE5	; 229
    4168:	fe 4f       	sbci	r31, 0xFE	; 254
    416a:	90 81       	ld	r25, Z
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	69 2f       	mov	r22, r25
    4170:	41 e0       	ldi	r20, 0x01	; 1
    4172:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>



u8 KeyPad_u8_Init()
{
	for(int i = 0 ; i<=3 ; i++)
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	9a 81       	ldd	r25, Y+2	; 0x02
    417a:	01 96       	adiw	r24, 0x01	; 1
    417c:	9a 83       	std	Y+2, r25	; 0x02
    417e:	89 83       	std	Y+1, r24	; 0x01
    4180:	89 81       	ldd	r24, Y+1	; 0x01
    4182:	9a 81       	ldd	r25, Y+2	; 0x02
    4184:	84 30       	cpi	r24, 0x04	; 4
    4186:	91 05       	cpc	r25, r1
    4188:	54 f2       	brlt	.-108    	; 0x411e <KeyPad_u8_Init+0x10>

		// Set rows as inputs
		DIO_u8SetPinDirection(KPD_u8_R_PORT,KPD_u8_RowsPins[i], DIO_u8_OUTPUT);
		DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[i], DIO_u8_HIGH);
	}
    return STD_TYPES_OK;
    418a:	81 e0       	ldi	r24, 0x01	; 1
}
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	08 95       	ret

00004196 <Keypad_GetPressedKey>:



/**********************************************************************************************/
/*  Keypad 3x3  */
u8 Keypad_GetPressedKey(){
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	00 d0       	rcall	.+0      	; 0x419c <Keypad_GetPressedKey+0x6>
    419c:	cd b7       	in	r28, 0x3d	; 61
    419e:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    41a0:	1a 82       	std	Y+2, r1	; 0x02
    41a2:	4d c0       	rjmp	.+154    	; 0x423e <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    41a4:	e7 e3       	ldi	r30, 0x37	; 55
    41a6:	f0 e0       	ldi	r31, 0x00	; 0
    41a8:	8a 81       	ldd	r24, Y+2	; 0x02
    41aa:	28 2f       	mov	r18, r24
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	80 e1       	ldi	r24, 0x10	; 16
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	02 c0       	rjmp	.+4      	; 0x41b8 <Keypad_GetPressedKey+0x22>
    41b4:	88 0f       	add	r24, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	2a 95       	dec	r18
    41ba:	e2 f7       	brpl	.-8      	; 0x41b4 <Keypad_GetPressedKey+0x1e>
    41bc:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    41be:	e8 e3       	ldi	r30, 0x38	; 56
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	8a 81       	ldd	r24, Y+2	; 0x02
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	80 e1       	ldi	r24, 0x10	; 16
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	02 2e       	mov	r0, r18
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <Keypad_GetPressedKey+0x3e>
    41d0:	88 0f       	add	r24, r24
    41d2:	99 1f       	adc	r25, r25
    41d4:	0a 94       	dec	r0
    41d6:	e2 f7       	brpl	.-8      	; 0x41d0 <Keypad_GetPressedKey+0x3a>
    41d8:	80 95       	com	r24
    41da:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    41dc:	19 82       	std	Y+1, r1	; 0x01
    41de:	29 c0       	rjmp	.+82     	; 0x4232 <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    41e0:	e6 e3       	ldi	r30, 0x36	; 54
    41e2:	f0 e0       	ldi	r31, 0x00	; 0
    41e4:	80 81       	ld	r24, Z
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	88 2f       	mov	r24, r24
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	a9 01       	movw	r20, r18
    41f2:	02 c0       	rjmp	.+4      	; 0x41f8 <Keypad_GetPressedKey+0x62>
    41f4:	55 95       	asr	r21
    41f6:	47 95       	ror	r20
    41f8:	8a 95       	dec	r24
    41fa:	e2 f7       	brpl	.-8      	; 0x41f4 <Keypad_GetPressedKey+0x5e>
    41fc:	ca 01       	movw	r24, r20
    41fe:	81 70       	andi	r24, 0x01	; 1
    4200:	90 70       	andi	r25, 0x00	; 0
    4202:	00 97       	sbiw	r24, 0x00	; 0
    4204:	99 f4       	brne	.+38     	; 0x422c <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    4206:	89 81       	ldd	r24, Y+1	; 0x01
    4208:	28 2f       	mov	r18, r24
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	c9 01       	movw	r24, r18
    420e:	88 0f       	add	r24, r24
    4210:	99 1f       	adc	r25, r25
    4212:	82 0f       	add	r24, r18
    4214:	93 1f       	adc	r25, r19
    4216:	98 2f       	mov	r25, r24
    4218:	8a 81       	ldd	r24, Y+2	; 0x02
    421a:	89 0f       	add	r24, r25
    421c:	8f 5f       	subi	r24, 0xFF	; 255
    421e:	0e 94 24 21 	call	0x4248	; 0x4248 <Keypad_4x3>
				}
			}
		}
	}
}
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    422c:	89 81       	ldd	r24, Y+1	; 0x01
    422e:	8f 5f       	subi	r24, 0xFF	; 255
    4230:	89 83       	std	Y+1, r24	; 0x01
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	84 30       	cpi	r24, 0x04	; 4
    4236:	a0 f2       	brcs	.-88     	; 0x41e0 <Keypad_GetPressedKey+0x4a>
/*  Keypad 3x3  */
u8 Keypad_GetPressedKey(){
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    4238:	8a 81       	ldd	r24, Y+2	; 0x02
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	8a 83       	std	Y+2, r24	; 0x02
    423e:	8a 81       	ldd	r24, Y+2	; 0x02
    4240:	83 30       	cpi	r24, 0x03	; 3
    4242:	08 f4       	brcc	.+2      	; 0x4246 <Keypad_GetPressedKey+0xb0>
    4244:	af cf       	rjmp	.-162    	; 0x41a4 <Keypad_GetPressedKey+0xe>
    4246:	ac cf       	rjmp	.-168    	; 0x41a0 <Keypad_GetPressedKey+0xa>

00004248 <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    4248:	df 93       	push	r29
    424a:	cf 93       	push	r28
    424c:	00 d0       	rcall	.+0      	; 0x424e <Keypad_4x3+0x6>
    424e:	00 d0       	rcall	.+0      	; 0x4250 <Keypad_4x3+0x8>
    4250:	cd b7       	in	r28, 0x3d	; 61
    4252:	de b7       	in	r29, 0x3e	; 62
    4254:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	28 2f       	mov	r18, r24
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	3c 83       	std	Y+4, r19	; 0x04
    425e:	2b 83       	std	Y+3, r18	; 0x03
    4260:	8b 81       	ldd	r24, Y+3	; 0x03
    4262:	9c 81       	ldd	r25, Y+4	; 0x04
    4264:	8a 30       	cpi	r24, 0x0A	; 10
    4266:	91 05       	cpc	r25, r1
    4268:	81 f0       	breq	.+32     	; 0x428a <Keypad_4x3+0x42>
    426a:	2b 81       	ldd	r18, Y+3	; 0x03
    426c:	3c 81       	ldd	r19, Y+4	; 0x04
    426e:	2a 30       	cpi	r18, 0x0A	; 10
    4270:	31 05       	cpc	r19, r1
    4272:	9c f0       	brlt	.+38     	; 0x429a <Keypad_4x3+0x52>
    4274:	8b 81       	ldd	r24, Y+3	; 0x03
    4276:	9c 81       	ldd	r25, Y+4	; 0x04
    4278:	8b 30       	cpi	r24, 0x0B	; 11
    427a:	91 05       	cpc	r25, r1
    427c:	49 f0       	breq	.+18     	; 0x4290 <Keypad_4x3+0x48>
    427e:	2b 81       	ldd	r18, Y+3	; 0x03
    4280:	3c 81       	ldd	r19, Y+4	; 0x04
    4282:	2c 30       	cpi	r18, 0x0C	; 12
    4284:	31 05       	cpc	r19, r1
    4286:	31 f0       	breq	.+12     	; 0x4294 <Keypad_4x3+0x4c>
    4288:	08 c0       	rjmp	.+16     	; 0x429a <Keypad_4x3+0x52>
	case 10:
		return '*';
    428a:	3a e2       	ldi	r19, 0x2A	; 42
    428c:	3a 83       	std	Y+2, r19	; 0x02
    428e:	07 c0       	rjmp	.+14     	; 0x429e <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    4290:	1a 82       	std	Y+2, r1	; 0x02
    4292:	05 c0       	rjmp	.+10     	; 0x429e <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    4294:	83 e2       	ldi	r24, 0x23	; 35
    4296:	8a 83       	std	Y+2, r24	; 0x02
    4298:	02 c0       	rjmp	.+4      	; 0x429e <Keypad_4x3+0x56>
	default:
		return Num;
    429a:	99 81       	ldd	r25, Y+1	; 0x01
    429c:	9a 83       	std	Y+2, r25	; 0x02
    429e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
    42a8:	cf 91       	pop	r28
    42aa:	df 91       	pop	r29
    42ac:	08 95       	ret

000042ae <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    42ae:	df 93       	push	r29
    42b0:	cf 93       	push	r28
    42b2:	00 d0       	rcall	.+0      	; 0x42b4 <DC_Motor_Init+0x6>
    42b4:	0f 92       	push	r0
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
    42ba:	8a 83       	std	Y+2, r24	; 0x02
    42bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    42c2:	8a 81       	ldd	r24, Y+2	; 0x02
    42c4:	81 30       	cpi	r24, 0x01	; 1
    42c6:	81 f4       	brne	.+32     	; 0x42e8 <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	61 e0       	ldi	r22, 0x01	; 1
    42cc:	41 e0       	ldi	r20, 0x01	; 1
    42ce:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    42d2:	80 e0       	ldi	r24, 0x00	; 0
    42d4:	63 e0       	ldi	r22, 0x03	; 3
    42d6:	41 e0       	ldi	r20, 0x01	; 1
    42d8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	62 e0       	ldi	r22, 0x02	; 2
    42e0:	41 e0       	ldi	r20, 0x01	; 1
    42e2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
    42e6:	14 c0       	rjmp	.+40     	; 0x4310 <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    42e8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ea:	81 30       	cpi	r24, 0x01	; 1
    42ec:	81 f4       	brne	.+32     	; 0x430e <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	62 e0       	ldi	r22, 0x02	; 2
    42f2:	41 e0       	ldi	r20, 0x01	; 1
    42f4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	61 e0       	ldi	r22, 0x01	; 1
    42fc:	41 e0       	ldi	r20, 0x01	; 1
    42fe:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	60 e0       	ldi	r22, 0x00	; 0
    4306:	41 e0       	ldi	r20, 0x01	; 1
    4308:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <DIO_u8SetPinDirection>
    430c:	01 c0       	rjmp	.+2      	; 0x4310 <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    430e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4310:	89 81       	ldd	r24, Y+1	; 0x01
}
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	cf 91       	pop	r28
    431a:	df 91       	pop	r29
    431c:	08 95       	ret

0000431e <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    431e:	df 93       	push	r29
    4320:	cf 93       	push	r28
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	29 97       	sbiw	r28, 0x09	; 9
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	8a 83       	std	Y+2, r24	; 0x02
    4334:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    433a:	8a 81       	ldd	r24, Y+2	; 0x02
    433c:	28 2f       	mov	r18, r24
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	39 87       	std	Y+9, r19	; 0x09
    4342:	28 87       	std	Y+8, r18	; 0x08
    4344:	88 85       	ldd	r24, Y+8	; 0x08
    4346:	99 85       	ldd	r25, Y+9	; 0x09
    4348:	00 97       	sbiw	r24, 0x00	; 0
    434a:	31 f0       	breq	.+12     	; 0x4358 <DC_Motor_Rotate+0x3a>
    434c:	28 85       	ldd	r18, Y+8	; 0x08
    434e:	39 85       	ldd	r19, Y+9	; 0x09
    4350:	21 30       	cpi	r18, 0x01	; 1
    4352:	31 05       	cpc	r19, r1
    4354:	89 f1       	breq	.+98     	; 0x43b8 <DC_Motor_Rotate+0x9a>
    4356:	60 c0       	rjmp	.+192    	; 0x4418 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    4358:	8b 81       	ldd	r24, Y+3	; 0x03
    435a:	28 2f       	mov	r18, r24
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	3f 83       	std	Y+7, r19	; 0x07
    4360:	2e 83       	std	Y+6, r18	; 0x06
    4362:	8e 81       	ldd	r24, Y+6	; 0x06
    4364:	9f 81       	ldd	r25, Y+7	; 0x07
    4366:	00 97       	sbiw	r24, 0x00	; 0
    4368:	a9 f0       	breq	.+42     	; 0x4394 <DC_Motor_Rotate+0x76>
    436a:	2e 81       	ldd	r18, Y+6	; 0x06
    436c:	3f 81       	ldd	r19, Y+7	; 0x07
    436e:	21 30       	cpi	r18, 0x01	; 1
    4370:	31 05       	cpc	r19, r1
    4372:	01 f5       	brne	.+64     	; 0x43b4 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    4374:	80 e0       	ldi	r24, 0x00	; 0
    4376:	61 e0       	ldi	r22, 0x01	; 1
    4378:	41 e0       	ldi	r20, 0x01	; 1
    437a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	63 e0       	ldi	r22, 0x03	; 3
    4382:	41 e0       	ldi	r20, 0x01	; 1
    4384:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    4388:	80 e0       	ldi	r24, 0x00	; 0
    438a:	62 e0       	ldi	r22, 0x02	; 2
    438c:	40 e0       	ldi	r20, 0x00	; 0
    438e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
    4392:	43 c0       	rjmp	.+134    	; 0x441a <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	61 e0       	ldi	r22, 0x01	; 1
    4398:	41 e0       	ldi	r20, 0x01	; 1
    439a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	63 e0       	ldi	r22, 0x03	; 3
    43a2:	40 e0       	ldi	r20, 0x00	; 0
    43a4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    43a8:	80 e0       	ldi	r24, 0x00	; 0
    43aa:	62 e0       	ldi	r22, 0x02	; 2
    43ac:	41 e0       	ldi	r20, 0x01	; 1
    43ae:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
    43b2:	33 c0       	rjmp	.+102    	; 0x441a <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    43b4:	19 82       	std	Y+1, r1	; 0x01
    43b6:	31 c0       	rjmp	.+98     	; 0x441a <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    43b8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ba:	28 2f       	mov	r18, r24
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	3d 83       	std	Y+5, r19	; 0x05
    43c0:	2c 83       	std	Y+4, r18	; 0x04
    43c2:	8c 81       	ldd	r24, Y+4	; 0x04
    43c4:	9d 81       	ldd	r25, Y+5	; 0x05
    43c6:	00 97       	sbiw	r24, 0x00	; 0
    43c8:	a9 f0       	breq	.+42     	; 0x43f4 <DC_Motor_Rotate+0xd6>
    43ca:	2c 81       	ldd	r18, Y+4	; 0x04
    43cc:	3d 81       	ldd	r19, Y+5	; 0x05
    43ce:	21 30       	cpi	r18, 0x01	; 1
    43d0:	31 05       	cpc	r19, r1
    43d2:	01 f5       	brne	.+64     	; 0x4414 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	62 e0       	ldi	r22, 0x02	; 2
    43d8:	41 e0       	ldi	r20, 0x01	; 1
    43da:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	61 e0       	ldi	r22, 0x01	; 1
    43e2:	41 e0       	ldi	r20, 0x01	; 1
    43e4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	60 e0       	ldi	r22, 0x00	; 0
    43ec:	40 e0       	ldi	r20, 0x00	; 0
    43ee:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
    43f2:	13 c0       	rjmp	.+38     	; 0x441a <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	62 e0       	ldi	r22, 0x02	; 2
    43f8:	41 e0       	ldi	r20, 0x01	; 1
    43fa:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	61 e0       	ldi	r22, 0x01	; 1
    4402:	40 e0       	ldi	r20, 0x00	; 0
    4404:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	41 e0       	ldi	r20, 0x01	; 1
    440e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
    4412:	03 c0       	rjmp	.+6      	; 0x441a <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4414:	19 82       	std	Y+1, r1	; 0x01
    4416:	01 c0       	rjmp	.+2      	; 0x441a <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    4418:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    441a:	89 81       	ldd	r24, Y+1	; 0x01
}
    441c:	29 96       	adiw	r28, 0x09	; 9
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	f8 94       	cli
    4422:	de bf       	out	0x3e, r29	; 62
    4424:	0f be       	out	0x3f, r0	; 63
    4426:	cd bf       	out	0x3d, r28	; 61
    4428:	cf 91       	pop	r28
    442a:	df 91       	pop	r29
    442c:	08 95       	ret

0000442e <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    442e:	df 93       	push	r29
    4430:	cf 93       	push	r28
    4432:	00 d0       	rcall	.+0      	; 0x4434 <DC_Motor_Stop+0x6>
    4434:	cd b7       	in	r28, 0x3d	; 61
    4436:	de b7       	in	r29, 0x3e	; 62
    4438:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    443a:	81 e0       	ldi	r24, 0x01	; 1
    443c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    443e:	8a 81       	ldd	r24, Y+2	; 0x02
    4440:	88 23       	and	r24, r24
    4442:	31 f4       	brne	.+12     	; 0x4450 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	61 e0       	ldi	r22, 0x01	; 1
    4448:	40 e0       	ldi	r20, 0x00	; 0
    444a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
    444e:	0a c0       	rjmp	.+20     	; 0x4464 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    4450:	8a 81       	ldd	r24, Y+2	; 0x02
    4452:	81 30       	cpi	r24, 0x01	; 1
    4454:	31 f4       	brne	.+12     	; 0x4462 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	62 e0       	ldi	r22, 0x02	; 2
    445a:	40 e0       	ldi	r20, 0x00	; 0
    445c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <DIO_u8SetPinValue>
    4460:	01 c0       	rjmp	.+2      	; 0x4464 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    4462:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4464:	89 81       	ldd	r24, Y+1	; 0x01
}
    4466:	0f 90       	pop	r0
    4468:	0f 90       	pop	r0
    446a:	cf 91       	pop	r28
    446c:	df 91       	pop	r29
    446e:	08 95       	ret

00004470 <First_Screen>:


#define Password_Length	4
u8 Local_u8_Flag = 0;

void First_Screen(){
    4470:	df 93       	push	r29
    4472:	cf 93       	push	r28
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	2e 97       	sbiw	r28, 0x0e	; 14
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	ac e0       	ldi	r26, 0x0C	; 12
    448a:	b2 e4       	ldi	r27, 0x42	; 66
    448c:	8b 87       	std	Y+11, r24	; 0x0b
    448e:	9c 87       	std	Y+12, r25	; 0x0c
    4490:	ad 87       	std	Y+13, r26	; 0x0d
    4492:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4494:	6b 85       	ldd	r22, Y+11	; 0x0b
    4496:	7c 85       	ldd	r23, Y+12	; 0x0c
    4498:	8d 85       	ldd	r24, Y+13	; 0x0d
    449a:	9e 85       	ldd	r25, Y+14	; 0x0e
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	4a e7       	ldi	r20, 0x7A	; 122
    44a2:	55 e4       	ldi	r21, 0x45	; 69
    44a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	8f 83       	std	Y+7, r24	; 0x07
    44ae:	98 87       	std	Y+8, r25	; 0x08
    44b0:	a9 87       	std	Y+9, r26	; 0x09
    44b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44b4:	6f 81       	ldd	r22, Y+7	; 0x07
    44b6:	78 85       	ldd	r23, Y+8	; 0x08
    44b8:	89 85       	ldd	r24, Y+9	; 0x09
    44ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	40 e8       	ldi	r20, 0x80	; 128
    44c2:	5f e3       	ldi	r21, 0x3F	; 63
    44c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44c8:	88 23       	and	r24, r24
    44ca:	2c f4       	brge	.+10     	; 0x44d6 <First_Screen+0x66>
		__ticks = 1;
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	9e 83       	std	Y+6, r25	; 0x06
    44d2:	8d 83       	std	Y+5, r24	; 0x05
    44d4:	3f c0       	rjmp	.+126    	; 0x4554 <First_Screen+0xe4>
	else if (__tmp > 65535)
    44d6:	6f 81       	ldd	r22, Y+7	; 0x07
    44d8:	78 85       	ldd	r23, Y+8	; 0x08
    44da:	89 85       	ldd	r24, Y+9	; 0x09
    44dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	3f ef       	ldi	r19, 0xFF	; 255
    44e2:	4f e7       	ldi	r20, 0x7F	; 127
    44e4:	57 e4       	ldi	r21, 0x47	; 71
    44e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44ea:	18 16       	cp	r1, r24
    44ec:	4c f5       	brge	.+82     	; 0x4540 <First_Screen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    44f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f6:	20 e0       	ldi	r18, 0x00	; 0
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	40 e2       	ldi	r20, 0x20	; 32
    44fc:	51 e4       	ldi	r21, 0x41	; 65
    44fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4502:	dc 01       	movw	r26, r24
    4504:	cb 01       	movw	r24, r22
    4506:	bc 01       	movw	r22, r24
    4508:	cd 01       	movw	r24, r26
    450a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	9e 83       	std	Y+6, r25	; 0x06
    4514:	8d 83       	std	Y+5, r24	; 0x05
    4516:	0f c0       	rjmp	.+30     	; 0x4536 <First_Screen+0xc6>
    4518:	80 e9       	ldi	r24, 0x90	; 144
    451a:	91 e0       	ldi	r25, 0x01	; 1
    451c:	9c 83       	std	Y+4, r25	; 0x04
    451e:	8b 83       	std	Y+3, r24	; 0x03
    4520:	8b 81       	ldd	r24, Y+3	; 0x03
    4522:	9c 81       	ldd	r25, Y+4	; 0x04
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	f1 f7       	brne	.-4      	; 0x4524 <First_Screen+0xb4>
    4528:	9c 83       	std	Y+4, r25	; 0x04
    452a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    452c:	8d 81       	ldd	r24, Y+5	; 0x05
    452e:	9e 81       	ldd	r25, Y+6	; 0x06
    4530:	01 97       	sbiw	r24, 0x01	; 1
    4532:	9e 83       	std	Y+6, r25	; 0x06
    4534:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4536:	8d 81       	ldd	r24, Y+5	; 0x05
    4538:	9e 81       	ldd	r25, Y+6	; 0x06
    453a:	00 97       	sbiw	r24, 0x00	; 0
    453c:	69 f7       	brne	.-38     	; 0x4518 <First_Screen+0xa8>
    453e:	14 c0       	rjmp	.+40     	; 0x4568 <First_Screen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4540:	6f 81       	ldd	r22, Y+7	; 0x07
    4542:	78 85       	ldd	r23, Y+8	; 0x08
    4544:	89 85       	ldd	r24, Y+9	; 0x09
    4546:	9a 85       	ldd	r25, Y+10	; 0x0a
    4548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	9e 83       	std	Y+6, r25	; 0x06
    4552:	8d 83       	std	Y+5, r24	; 0x05
    4554:	8d 81       	ldd	r24, Y+5	; 0x05
    4556:	9e 81       	ldd	r25, Y+6	; 0x06
    4558:	9a 83       	std	Y+2, r25	; 0x02
    455a:	89 83       	std	Y+1, r24	; 0x01
    455c:	89 81       	ldd	r24, Y+1	; 0x01
    455e:	9a 81       	ldd	r25, Y+2	; 0x02
    4560:	01 97       	sbiw	r24, 0x01	; 1
    4562:	f1 f7       	brne	.-4      	; 0x4560 <First_Screen+0xf0>
    4564:	9a 83       	std	Y+2, r25	; 0x02
    4566:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(35);
	LCD_ClearScreen();
    4568:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
	LCD_displayString("1-DC Motor");
    456c:	84 e6       	ldi	r24, 0x64	; 100
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
	LCD_GoToXY(1, 0);
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	60 e0       	ldi	r22, 0x00	; 0
    4578:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
	LCD_displayString("2-Stepper");
    457c:	8f e6       	ldi	r24, 0x6F	; 111
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
	LCD_GoToXY(1, 9);
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	69 e0       	ldi	r22, 0x09	; 9
    4588:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
	LCD_displayString("3-Servo");
    458c:	89 e7       	ldi	r24, 0x79	; 121
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
}
    4594:	2e 96       	adiw	r28, 0x0e	; 14
    4596:	0f b6       	in	r0, 0x3f	; 63
    4598:	f8 94       	cli
    459a:	de bf       	out	0x3e, r29	; 62
    459c:	0f be       	out	0x3f, r0	; 63
    459e:	cd bf       	out	0x3d, r28	; 61
    45a0:	cf 91       	pop	r28
    45a2:	df 91       	pop	r29
    45a4:	08 95       	ret

000045a6 <Second_Screen>:

void Second_Screen(){
    45a6:	df 93       	push	r29
    45a8:	cf 93       	push	r28
    45aa:	cd b7       	in	r28, 0x3d	; 61
    45ac:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    45ae:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
	LCD_displayString("1-CW Motor");
    45b2:	81 e8       	ldi	r24, 0x81	; 129
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
	LCD_GoToXY(1, 0);
    45ba:	81 e0       	ldi	r24, 0x01	; 1
    45bc:	60 e0       	ldi	r22, 0x00	; 0
    45be:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
	LCD_displayString("2-CCW Motor");
    45c2:	8c e8       	ldi	r24, 0x8C	; 140
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
	LCD_GoToXY(0, 10);
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	6a e0       	ldi	r22, 0x0A	; 10
    45ce:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
	LCD_displayString("3-back");
    45d2:	88 e9       	ldi	r24, 0x98	; 152
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
}
    45da:	cf 91       	pop	r28
    45dc:	df 91       	pop	r29
    45de:	08 95       	ret

000045e0 <StepperAngles_Screen>:

void StepperAngles_Screen(){
    45e0:	df 93       	push	r29
    45e2:	cf 93       	push	r28
    45e4:	cd b7       	in	r28, 0x3d	; 61
    45e6:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    45e8:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>

	LCD_displayString("1-90");
    45ec:	8f e9       	ldi	r24, 0x9F	; 159
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>

	LCD_GoToXY(1, 0);
    45f4:	81 e0       	ldi	r24, 0x01	; 1
    45f6:	60 e0       	ldi	r22, 0x00	; 0
    45f8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
	LCD_displayString("2-180");
    45fc:	84 ea       	ldi	r24, 0xA4	; 164
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
}
    4604:	cf 91       	pop	r28
    4606:	df 91       	pop	r29
    4608:	08 95       	ret

0000460a <StepperDirection_Screen>:

void StepperDirection_Screen(){
    460a:	df 93       	push	r29
    460c:	cf 93       	push	r28
    460e:	cd b7       	in	r28, 0x3d	; 61
    4610:	de b7       	in	r29, 0x3e	; 62
	LCD_ClearScreen();
    4612:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>

	LCD_displayString("1-CW");
    4616:	8a ea       	ldi	r24, 0xAA	; 170
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>

	LCD_GoToXY(1, 0);
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	60 e0       	ldi	r22, 0x00	; 0
    4622:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
	LCD_displayString("2-CCW");
    4626:	8f ea       	ldi	r24, 0xAF	; 175
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
}
    462e:	cf 91       	pop	r28
    4630:	df 91       	pop	r29
    4632:	08 95       	ret

00004634 <main>:
u16 digitalValue, motorValue;


void EXTI_System(void);

int main(){
    4634:	df 93       	push	r29
    4636:	cf 93       	push	r28
    4638:	cd b7       	in	r28, 0x3d	; 61
    463a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    463c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <DIO_voidInit>
	DC_Motor_Init(1, 2);
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	62 e0       	ldi	r22, 0x02	; 2
    4644:	0e 94 57 21 	call	0x42ae	; 0x42ae <DC_Motor_Init>
	Stepper_Init();
    4648:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <Stepper_Init>
	LCD_init();
    464c:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_init>
	ADC_void_Init();
    4650:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <ADC_void_Init>
	Servo_Init();
    4654:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <Servo_Init>

	EXTI_voidEnable(1, 2);
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	62 e0       	ldi	r22, 0x02	; 2
    465c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <EXTI_voidEnable>
	EXTI_voidEnable_GIE();
    4660:	0e 94 4a 0b 	call	0x1694	; 0x1694 <EXTI_voidEnable_GIE>

	setCallBack(&EXTI_System, 1);
    4664:	88 e3       	ldi	r24, 0x38	; 56
    4666:	93 e2       	ldi	r25, 0x23	; 35
    4668:	61 e0       	ldi	r22, 0x01	; 1
    466a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <setCallBack>
    466e:	ff cf       	rjmp	.-2      	; 0x466e <main+0x3a>

00004670 <EXTI_System>:
	while(1);
	return 0;
}


void EXTI_System(void){
    4670:	0f 93       	push	r16
    4672:	1f 93       	push	r17
    4674:	df 93       	push	r29
    4676:	cf 93       	push	r28
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	c6 50       	subi	r28, 0x06	; 6
    467e:	d1 40       	sbci	r29, 0x01	; 1
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	f8 94       	cli
    4684:	de bf       	out	0x3e, r29	; 62
    4686:	0f be       	out	0x3f, r0	; 63
    4688:	cd bf       	out	0x3d, r28	; 61
	u8 key_Pressed;

	if(Local_u8_Flag == 0){
    468a:	80 91 4f 01 	lds	r24, 0x014F
    468e:	88 23       	and	r24, r24
    4690:	11 f0       	breq	.+4      	; 0x4696 <EXTI_System+0x26>
    4692:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <EXTI_System+0x1c3c>
		Local_u8_Flag = 1;
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	80 93 4f 01 	sts	0x014F, r24
		LCD_String_xy(0, 0, "Enter Password", &count);
    469c:	25 eb       	ldi	r18, 0xB5	; 181
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	ef e5       	ldi	r30, 0x5F	; 95
    46a2:	f1 e0       	ldi	r31, 0x01	; 1
    46a4:	80 e0       	ldi	r24, 0x00	; 0
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	a9 01       	movw	r20, r18
    46aa:	9f 01       	movw	r18, r30
    46ac:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <LCD_String_xy>
		LCD_GoToXY(1, 0);
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	60 e0       	ldi	r22, 0x00	; 0
    46b4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>

		while(1){
			key_Pressed = Keypad_GetPressedKey();
    46b8:	0e 94 cb 20 	call	0x4196	; 0x4196 <Keypad_GetPressedKey>
    46bc:	fe 01       	movw	r30, r28
    46be:	ea 5f       	subi	r30, 0xFA	; 250
    46c0:	fe 4f       	sbci	r31, 0xFE	; 254
    46c2:	80 83       	st	Z, r24

			if(key_Pressed == 1){
    46c4:	fe 01       	movw	r30, r28
    46c6:	ea 5f       	subi	r30, 0xFA	; 250
    46c8:	fe 4f       	sbci	r31, 0xFE	; 254
    46ca:	80 81       	ld	r24, Z
    46cc:	81 30       	cpi	r24, 0x01	; 1
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <EXTI_System+0x62>
    46d0:	c5 c0       	rjmp	.+394    	; 0x485c <EXTI_System+0x1ec>
				LCD_displayCharacter('*');
    46d2:	8a e2       	ldi	r24, 0x2A	; 42
    46d4:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '1';
    46d8:	80 91 50 01 	lds	r24, 0x0150
    46dc:	88 2f       	mov	r24, r24
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	fc 01       	movw	r30, r24
    46e2:	ed 5a       	subi	r30, 0xAD	; 173
    46e4:	fe 4f       	sbci	r31, 0xFE	; 254
    46e6:	81 e3       	ldi	r24, 0x31	; 49
    46e8:	80 83       	st	Z, r24
				c++;
    46ea:	80 91 50 01 	lds	r24, 0x0150
    46ee:	8f 5f       	subi	r24, 0xFF	; 255
    46f0:	80 93 50 01 	sts	0x0150, r24
    46f4:	fe 01       	movw	r30, r28
    46f6:	e7 50       	subi	r30, 0x07	; 7
    46f8:	ff 4f       	sbci	r31, 0xFF	; 255
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	ac e0       	ldi	r26, 0x0C	; 12
    4700:	b2 e4       	ldi	r27, 0x42	; 66
    4702:	80 83       	st	Z, r24
    4704:	91 83       	std	Z+1, r25	; 0x01
    4706:	a2 83       	std	Z+2, r26	; 0x02
    4708:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    470a:	8e 01       	movw	r16, r28
    470c:	0b 50       	subi	r16, 0x0B	; 11
    470e:	1f 4f       	sbci	r17, 0xFF	; 255
    4710:	fe 01       	movw	r30, r28
    4712:	e7 50       	subi	r30, 0x07	; 7
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	60 81       	ld	r22, Z
    4718:	71 81       	ldd	r23, Z+1	; 0x01
    471a:	82 81       	ldd	r24, Z+2	; 0x02
    471c:	93 81       	ldd	r25, Z+3	; 0x03
    471e:	20 e0       	ldi	r18, 0x00	; 0
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	4a e7       	ldi	r20, 0x7A	; 122
    4724:	55 e4       	ldi	r21, 0x45	; 69
    4726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	f8 01       	movw	r30, r16
    4730:	80 83       	st	Z, r24
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	a2 83       	std	Z+2, r26	; 0x02
    4736:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4738:	fe 01       	movw	r30, r28
    473a:	eb 50       	subi	r30, 0x0B	; 11
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	60 81       	ld	r22, Z
    4740:	71 81       	ldd	r23, Z+1	; 0x01
    4742:	82 81       	ldd	r24, Z+2	; 0x02
    4744:	93 81       	ldd	r25, Z+3	; 0x03
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	40 e8       	ldi	r20, 0x80	; 128
    474c:	5f e3       	ldi	r21, 0x3F	; 63
    474e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4752:	88 23       	and	r24, r24
    4754:	44 f4       	brge	.+16     	; 0x4766 <EXTI_System+0xf6>
		__ticks = 1;
    4756:	fe 01       	movw	r30, r28
    4758:	ed 50       	subi	r30, 0x0D	; 13
    475a:	ff 4f       	sbci	r31, 0xFF	; 255
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	91 83       	std	Z+1, r25	; 0x01
    4762:	80 83       	st	Z, r24
    4764:	64 c0       	rjmp	.+200    	; 0x482e <EXTI_System+0x1be>
	else if (__tmp > 65535)
    4766:	fe 01       	movw	r30, r28
    4768:	eb 50       	subi	r30, 0x0B	; 11
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	60 81       	ld	r22, Z
    476e:	71 81       	ldd	r23, Z+1	; 0x01
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	3f ef       	ldi	r19, 0xFF	; 255
    4778:	4f e7       	ldi	r20, 0x7F	; 127
    477a:	57 e4       	ldi	r21, 0x47	; 71
    477c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4780:	18 16       	cp	r1, r24
    4782:	0c f0       	brlt	.+2      	; 0x4786 <EXTI_System+0x116>
    4784:	43 c0       	rjmp	.+134    	; 0x480c <EXTI_System+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4786:	fe 01       	movw	r30, r28
    4788:	e7 50       	subi	r30, 0x07	; 7
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	60 81       	ld	r22, Z
    478e:	71 81       	ldd	r23, Z+1	; 0x01
    4790:	82 81       	ldd	r24, Z+2	; 0x02
    4792:	93 81       	ldd	r25, Z+3	; 0x03
    4794:	20 e0       	ldi	r18, 0x00	; 0
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	40 e2       	ldi	r20, 0x20	; 32
    479a:	51 e4       	ldi	r21, 0x41	; 65
    479c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a0:	dc 01       	movw	r26, r24
    47a2:	cb 01       	movw	r24, r22
    47a4:	8e 01       	movw	r16, r28
    47a6:	0d 50       	subi	r16, 0x0D	; 13
    47a8:	1f 4f       	sbci	r17, 0xFF	; 255
    47aa:	bc 01       	movw	r22, r24
    47ac:	cd 01       	movw	r24, r26
    47ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	f8 01       	movw	r30, r16
    47b8:	91 83       	std	Z+1, r25	; 0x01
    47ba:	80 83       	st	Z, r24
    47bc:	1f c0       	rjmp	.+62     	; 0x47fc <EXTI_System+0x18c>
    47be:	fe 01       	movw	r30, r28
    47c0:	ef 50       	subi	r30, 0x0F	; 15
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	80 e9       	ldi	r24, 0x90	; 144
    47c6:	91 e0       	ldi	r25, 0x01	; 1
    47c8:	91 83       	std	Z+1, r25	; 0x01
    47ca:	80 83       	st	Z, r24
    47cc:	fe 01       	movw	r30, r28
    47ce:	ef 50       	subi	r30, 0x0F	; 15
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	01 97       	sbiw	r24, 0x01	; 1
    47d8:	f1 f7       	brne	.-4      	; 0x47d6 <EXTI_System+0x166>
    47da:	fe 01       	movw	r30, r28
    47dc:	ef 50       	subi	r30, 0x0F	; 15
    47de:	ff 4f       	sbci	r31, 0xFF	; 255
    47e0:	91 83       	std	Z+1, r25	; 0x01
    47e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47e4:	de 01       	movw	r26, r28
    47e6:	ad 50       	subi	r26, 0x0D	; 13
    47e8:	bf 4f       	sbci	r27, 0xFF	; 255
    47ea:	fe 01       	movw	r30, r28
    47ec:	ed 50       	subi	r30, 0x0D	; 13
    47ee:	ff 4f       	sbci	r31, 0xFF	; 255
    47f0:	80 81       	ld	r24, Z
    47f2:	91 81       	ldd	r25, Z+1	; 0x01
    47f4:	01 97       	sbiw	r24, 0x01	; 1
    47f6:	11 96       	adiw	r26, 0x01	; 1
    47f8:	9c 93       	st	X, r25
    47fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47fc:	fe 01       	movw	r30, r28
    47fe:	ed 50       	subi	r30, 0x0D	; 13
    4800:	ff 4f       	sbci	r31, 0xFF	; 255
    4802:	80 81       	ld	r24, Z
    4804:	91 81       	ldd	r25, Z+1	; 0x01
    4806:	00 97       	sbiw	r24, 0x00	; 0
    4808:	d1 f6       	brne	.-76     	; 0x47be <EXTI_System+0x14e>
    480a:	28 c0       	rjmp	.+80     	; 0x485c <EXTI_System+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    480c:	8e 01       	movw	r16, r28
    480e:	0d 50       	subi	r16, 0x0D	; 13
    4810:	1f 4f       	sbci	r17, 0xFF	; 255
    4812:	fe 01       	movw	r30, r28
    4814:	eb 50       	subi	r30, 0x0B	; 11
    4816:	ff 4f       	sbci	r31, 0xFF	; 255
    4818:	60 81       	ld	r22, Z
    481a:	71 81       	ldd	r23, Z+1	; 0x01
    481c:	82 81       	ldd	r24, Z+2	; 0x02
    481e:	93 81       	ldd	r25, Z+3	; 0x03
    4820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4824:	dc 01       	movw	r26, r24
    4826:	cb 01       	movw	r24, r22
    4828:	f8 01       	movw	r30, r16
    482a:	91 83       	std	Z+1, r25	; 0x01
    482c:	80 83       	st	Z, r24
    482e:	de 01       	movw	r26, r28
    4830:	a1 51       	subi	r26, 0x11	; 17
    4832:	bf 4f       	sbci	r27, 0xFF	; 255
    4834:	fe 01       	movw	r30, r28
    4836:	ed 50       	subi	r30, 0x0D	; 13
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	80 81       	ld	r24, Z
    483c:	91 81       	ldd	r25, Z+1	; 0x01
    483e:	11 96       	adiw	r26, 0x01	; 1
    4840:	9c 93       	st	X, r25
    4842:	8e 93       	st	-X, r24
    4844:	fe 01       	movw	r30, r28
    4846:	e1 51       	subi	r30, 0x11	; 17
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	80 81       	ld	r24, Z
    484c:	91 81       	ldd	r25, Z+1	; 0x01
    484e:	01 97       	sbiw	r24, 0x01	; 1
    4850:	f1 f7       	brne	.-4      	; 0x484e <EXTI_System+0x1de>
    4852:	fe 01       	movw	r30, r28
    4854:	e1 51       	subi	r30, 0x11	; 17
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	91 83       	std	Z+1, r25	; 0x01
    485a:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 2){
    485c:	fe 01       	movw	r30, r28
    485e:	ea 5f       	subi	r30, 0xFA	; 250
    4860:	fe 4f       	sbci	r31, 0xFE	; 254
    4862:	80 81       	ld	r24, Z
    4864:	82 30       	cpi	r24, 0x02	; 2
    4866:	09 f0       	breq	.+2      	; 0x486a <EXTI_System+0x1fa>
    4868:	c5 c0       	rjmp	.+394    	; 0x49f4 <EXTI_System+0x384>
				LCD_displayCharacter('*');
    486a:	8a e2       	ldi	r24, 0x2A	; 42
    486c:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '2';
    4870:	80 91 50 01 	lds	r24, 0x0150
    4874:	88 2f       	mov	r24, r24
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	fc 01       	movw	r30, r24
    487a:	ed 5a       	subi	r30, 0xAD	; 173
    487c:	fe 4f       	sbci	r31, 0xFE	; 254
    487e:	82 e3       	ldi	r24, 0x32	; 50
    4880:	80 83       	st	Z, r24
				c++;
    4882:	80 91 50 01 	lds	r24, 0x0150
    4886:	8f 5f       	subi	r24, 0xFF	; 255
    4888:	80 93 50 01 	sts	0x0150, r24
    488c:	fe 01       	movw	r30, r28
    488e:	e5 51       	subi	r30, 0x15	; 21
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	80 e0       	ldi	r24, 0x00	; 0
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	ac e0       	ldi	r26, 0x0C	; 12
    4898:	b2 e4       	ldi	r27, 0x42	; 66
    489a:	80 83       	st	Z, r24
    489c:	91 83       	std	Z+1, r25	; 0x01
    489e:	a2 83       	std	Z+2, r26	; 0x02
    48a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a2:	8e 01       	movw	r16, r28
    48a4:	09 51       	subi	r16, 0x19	; 25
    48a6:	1f 4f       	sbci	r17, 0xFF	; 255
    48a8:	fe 01       	movw	r30, r28
    48aa:	e5 51       	subi	r30, 0x15	; 21
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	60 81       	ld	r22, Z
    48b0:	71 81       	ldd	r23, Z+1	; 0x01
    48b2:	82 81       	ldd	r24, Z+2	; 0x02
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	4a e7       	ldi	r20, 0x7A	; 122
    48bc:	55 e4       	ldi	r21, 0x45	; 69
    48be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c2:	dc 01       	movw	r26, r24
    48c4:	cb 01       	movw	r24, r22
    48c6:	f8 01       	movw	r30, r16
    48c8:	80 83       	st	Z, r24
    48ca:	91 83       	std	Z+1, r25	; 0x01
    48cc:	a2 83       	std	Z+2, r26	; 0x02
    48ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48d0:	fe 01       	movw	r30, r28
    48d2:	e9 51       	subi	r30, 0x19	; 25
    48d4:	ff 4f       	sbci	r31, 0xFF	; 255
    48d6:	60 81       	ld	r22, Z
    48d8:	71 81       	ldd	r23, Z+1	; 0x01
    48da:	82 81       	ldd	r24, Z+2	; 0x02
    48dc:	93 81       	ldd	r25, Z+3	; 0x03
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	40 e8       	ldi	r20, 0x80	; 128
    48e4:	5f e3       	ldi	r21, 0x3F	; 63
    48e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48ea:	88 23       	and	r24, r24
    48ec:	44 f4       	brge	.+16     	; 0x48fe <EXTI_System+0x28e>
		__ticks = 1;
    48ee:	fe 01       	movw	r30, r28
    48f0:	eb 51       	subi	r30, 0x1B	; 27
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	91 83       	std	Z+1, r25	; 0x01
    48fa:	80 83       	st	Z, r24
    48fc:	64 c0       	rjmp	.+200    	; 0x49c6 <EXTI_System+0x356>
	else if (__tmp > 65535)
    48fe:	fe 01       	movw	r30, r28
    4900:	e9 51       	subi	r30, 0x19	; 25
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	60 81       	ld	r22, Z
    4906:	71 81       	ldd	r23, Z+1	; 0x01
    4908:	82 81       	ldd	r24, Z+2	; 0x02
    490a:	93 81       	ldd	r25, Z+3	; 0x03
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	3f ef       	ldi	r19, 0xFF	; 255
    4910:	4f e7       	ldi	r20, 0x7F	; 127
    4912:	57 e4       	ldi	r21, 0x47	; 71
    4914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4918:	18 16       	cp	r1, r24
    491a:	0c f0       	brlt	.+2      	; 0x491e <EXTI_System+0x2ae>
    491c:	43 c0       	rjmp	.+134    	; 0x49a4 <EXTI_System+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    491e:	fe 01       	movw	r30, r28
    4920:	e5 51       	subi	r30, 0x15	; 21
    4922:	ff 4f       	sbci	r31, 0xFF	; 255
    4924:	60 81       	ld	r22, Z
    4926:	71 81       	ldd	r23, Z+1	; 0x01
    4928:	82 81       	ldd	r24, Z+2	; 0x02
    492a:	93 81       	ldd	r25, Z+3	; 0x03
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	40 e2       	ldi	r20, 0x20	; 32
    4932:	51 e4       	ldi	r21, 0x41	; 65
    4934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4938:	dc 01       	movw	r26, r24
    493a:	cb 01       	movw	r24, r22
    493c:	8e 01       	movw	r16, r28
    493e:	0b 51       	subi	r16, 0x1B	; 27
    4940:	1f 4f       	sbci	r17, 0xFF	; 255
    4942:	bc 01       	movw	r22, r24
    4944:	cd 01       	movw	r24, r26
    4946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    494a:	dc 01       	movw	r26, r24
    494c:	cb 01       	movw	r24, r22
    494e:	f8 01       	movw	r30, r16
    4950:	91 83       	std	Z+1, r25	; 0x01
    4952:	80 83       	st	Z, r24
    4954:	1f c0       	rjmp	.+62     	; 0x4994 <EXTI_System+0x324>
    4956:	fe 01       	movw	r30, r28
    4958:	ed 51       	subi	r30, 0x1D	; 29
    495a:	ff 4f       	sbci	r31, 0xFF	; 255
    495c:	80 e9       	ldi	r24, 0x90	; 144
    495e:	91 e0       	ldi	r25, 0x01	; 1
    4960:	91 83       	std	Z+1, r25	; 0x01
    4962:	80 83       	st	Z, r24
    4964:	fe 01       	movw	r30, r28
    4966:	ed 51       	subi	r30, 0x1D	; 29
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	80 81       	ld	r24, Z
    496c:	91 81       	ldd	r25, Z+1	; 0x01
    496e:	01 97       	sbiw	r24, 0x01	; 1
    4970:	f1 f7       	brne	.-4      	; 0x496e <EXTI_System+0x2fe>
    4972:	fe 01       	movw	r30, r28
    4974:	ed 51       	subi	r30, 0x1D	; 29
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	91 83       	std	Z+1, r25	; 0x01
    497a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    497c:	de 01       	movw	r26, r28
    497e:	ab 51       	subi	r26, 0x1B	; 27
    4980:	bf 4f       	sbci	r27, 0xFF	; 255
    4982:	fe 01       	movw	r30, r28
    4984:	eb 51       	subi	r30, 0x1B	; 27
    4986:	ff 4f       	sbci	r31, 0xFF	; 255
    4988:	80 81       	ld	r24, Z
    498a:	91 81       	ldd	r25, Z+1	; 0x01
    498c:	01 97       	sbiw	r24, 0x01	; 1
    498e:	11 96       	adiw	r26, 0x01	; 1
    4990:	9c 93       	st	X, r25
    4992:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4994:	fe 01       	movw	r30, r28
    4996:	eb 51       	subi	r30, 0x1B	; 27
    4998:	ff 4f       	sbci	r31, 0xFF	; 255
    499a:	80 81       	ld	r24, Z
    499c:	91 81       	ldd	r25, Z+1	; 0x01
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	d1 f6       	brne	.-76     	; 0x4956 <EXTI_System+0x2e6>
    49a2:	28 c0       	rjmp	.+80     	; 0x49f4 <EXTI_System+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a4:	8e 01       	movw	r16, r28
    49a6:	0b 51       	subi	r16, 0x1B	; 27
    49a8:	1f 4f       	sbci	r17, 0xFF	; 255
    49aa:	fe 01       	movw	r30, r28
    49ac:	e9 51       	subi	r30, 0x19	; 25
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	60 81       	ld	r22, Z
    49b2:	71 81       	ldd	r23, Z+1	; 0x01
    49b4:	82 81       	ldd	r24, Z+2	; 0x02
    49b6:	93 81       	ldd	r25, Z+3	; 0x03
    49b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	f8 01       	movw	r30, r16
    49c2:	91 83       	std	Z+1, r25	; 0x01
    49c4:	80 83       	st	Z, r24
    49c6:	de 01       	movw	r26, r28
    49c8:	af 51       	subi	r26, 0x1F	; 31
    49ca:	bf 4f       	sbci	r27, 0xFF	; 255
    49cc:	fe 01       	movw	r30, r28
    49ce:	eb 51       	subi	r30, 0x1B	; 27
    49d0:	ff 4f       	sbci	r31, 0xFF	; 255
    49d2:	80 81       	ld	r24, Z
    49d4:	91 81       	ldd	r25, Z+1	; 0x01
    49d6:	11 96       	adiw	r26, 0x01	; 1
    49d8:	9c 93       	st	X, r25
    49da:	8e 93       	st	-X, r24
    49dc:	fe 01       	movw	r30, r28
    49de:	ef 51       	subi	r30, 0x1F	; 31
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	80 81       	ld	r24, Z
    49e4:	91 81       	ldd	r25, Z+1	; 0x01
    49e6:	01 97       	sbiw	r24, 0x01	; 1
    49e8:	f1 f7       	brne	.-4      	; 0x49e6 <EXTI_System+0x376>
    49ea:	fe 01       	movw	r30, r28
    49ec:	ef 51       	subi	r30, 0x1F	; 31
    49ee:	ff 4f       	sbci	r31, 0xFF	; 255
    49f0:	91 83       	std	Z+1, r25	; 0x01
    49f2:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 3){
    49f4:	fe 01       	movw	r30, r28
    49f6:	ea 5f       	subi	r30, 0xFA	; 250
    49f8:	fe 4f       	sbci	r31, 0xFE	; 254
    49fa:	80 81       	ld	r24, Z
    49fc:	83 30       	cpi	r24, 0x03	; 3
    49fe:	09 f0       	breq	.+2      	; 0x4a02 <EXTI_System+0x392>
    4a00:	c5 c0       	rjmp	.+394    	; 0x4b8c <EXTI_System+0x51c>
				LCD_displayCharacter('*');
    4a02:	8a e2       	ldi	r24, 0x2A	; 42
    4a04:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '3';
    4a08:	80 91 50 01 	lds	r24, 0x0150
    4a0c:	88 2f       	mov	r24, r24
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	fc 01       	movw	r30, r24
    4a12:	ed 5a       	subi	r30, 0xAD	; 173
    4a14:	fe 4f       	sbci	r31, 0xFE	; 254
    4a16:	83 e3       	ldi	r24, 0x33	; 51
    4a18:	80 83       	st	Z, r24
				c++;
    4a1a:	80 91 50 01 	lds	r24, 0x0150
    4a1e:	8f 5f       	subi	r24, 0xFF	; 255
    4a20:	80 93 50 01 	sts	0x0150, r24
    4a24:	fe 01       	movw	r30, r28
    4a26:	e3 52       	subi	r30, 0x23	; 35
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	ac e0       	ldi	r26, 0x0C	; 12
    4a30:	b2 e4       	ldi	r27, 0x42	; 66
    4a32:	80 83       	st	Z, r24
    4a34:	91 83       	std	Z+1, r25	; 0x01
    4a36:	a2 83       	std	Z+2, r26	; 0x02
    4a38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3a:	8e 01       	movw	r16, r28
    4a3c:	07 52       	subi	r16, 0x27	; 39
    4a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a40:	fe 01       	movw	r30, r28
    4a42:	e3 52       	subi	r30, 0x23	; 35
    4a44:	ff 4f       	sbci	r31, 0xFF	; 255
    4a46:	60 81       	ld	r22, Z
    4a48:	71 81       	ldd	r23, Z+1	; 0x01
    4a4a:	82 81       	ldd	r24, Z+2	; 0x02
    4a4c:	93 81       	ldd	r25, Z+3	; 0x03
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	30 e0       	ldi	r19, 0x00	; 0
    4a52:	4a e7       	ldi	r20, 0x7A	; 122
    4a54:	55 e4       	ldi	r21, 0x45	; 69
    4a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5a:	dc 01       	movw	r26, r24
    4a5c:	cb 01       	movw	r24, r22
    4a5e:	f8 01       	movw	r30, r16
    4a60:	80 83       	st	Z, r24
    4a62:	91 83       	std	Z+1, r25	; 0x01
    4a64:	a2 83       	std	Z+2, r26	; 0x02
    4a66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a68:	fe 01       	movw	r30, r28
    4a6a:	e7 52       	subi	r30, 0x27	; 39
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	60 81       	ld	r22, Z
    4a70:	71 81       	ldd	r23, Z+1	; 0x01
    4a72:	82 81       	ldd	r24, Z+2	; 0x02
    4a74:	93 81       	ldd	r25, Z+3	; 0x03
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e8       	ldi	r20, 0x80	; 128
    4a7c:	5f e3       	ldi	r21, 0x3F	; 63
    4a7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a82:	88 23       	and	r24, r24
    4a84:	44 f4       	brge	.+16     	; 0x4a96 <EXTI_System+0x426>
		__ticks = 1;
    4a86:	fe 01       	movw	r30, r28
    4a88:	e9 52       	subi	r30, 0x29	; 41
    4a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	90 e0       	ldi	r25, 0x00	; 0
    4a90:	91 83       	std	Z+1, r25	; 0x01
    4a92:	80 83       	st	Z, r24
    4a94:	64 c0       	rjmp	.+200    	; 0x4b5e <EXTI_System+0x4ee>
	else if (__tmp > 65535)
    4a96:	fe 01       	movw	r30, r28
    4a98:	e7 52       	subi	r30, 0x27	; 39
    4a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9c:	60 81       	ld	r22, Z
    4a9e:	71 81       	ldd	r23, Z+1	; 0x01
    4aa0:	82 81       	ldd	r24, Z+2	; 0x02
    4aa2:	93 81       	ldd	r25, Z+3	; 0x03
    4aa4:	20 e0       	ldi	r18, 0x00	; 0
    4aa6:	3f ef       	ldi	r19, 0xFF	; 255
    4aa8:	4f e7       	ldi	r20, 0x7F	; 127
    4aaa:	57 e4       	ldi	r21, 0x47	; 71
    4aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ab0:	18 16       	cp	r1, r24
    4ab2:	0c f0       	brlt	.+2      	; 0x4ab6 <EXTI_System+0x446>
    4ab4:	43 c0       	rjmp	.+134    	; 0x4b3c <EXTI_System+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	e3 52       	subi	r30, 0x23	; 35
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	60 81       	ld	r22, Z
    4abe:	71 81       	ldd	r23, Z+1	; 0x01
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	40 e2       	ldi	r20, 0x20	; 32
    4aca:	51 e4       	ldi	r21, 0x41	; 65
    4acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad0:	dc 01       	movw	r26, r24
    4ad2:	cb 01       	movw	r24, r22
    4ad4:	8e 01       	movw	r16, r28
    4ad6:	09 52       	subi	r16, 0x29	; 41
    4ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    4ada:	bc 01       	movw	r22, r24
    4adc:	cd 01       	movw	r24, r26
    4ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	f8 01       	movw	r30, r16
    4ae8:	91 83       	std	Z+1, r25	; 0x01
    4aea:	80 83       	st	Z, r24
    4aec:	1f c0       	rjmp	.+62     	; 0x4b2c <EXTI_System+0x4bc>
    4aee:	fe 01       	movw	r30, r28
    4af0:	eb 52       	subi	r30, 0x2B	; 43
    4af2:	ff 4f       	sbci	r31, 0xFF	; 255
    4af4:	80 e9       	ldi	r24, 0x90	; 144
    4af6:	91 e0       	ldi	r25, 0x01	; 1
    4af8:	91 83       	std	Z+1, r25	; 0x01
    4afa:	80 83       	st	Z, r24
    4afc:	fe 01       	movw	r30, r28
    4afe:	eb 52       	subi	r30, 0x2B	; 43
    4b00:	ff 4f       	sbci	r31, 0xFF	; 255
    4b02:	80 81       	ld	r24, Z
    4b04:	91 81       	ldd	r25, Z+1	; 0x01
    4b06:	01 97       	sbiw	r24, 0x01	; 1
    4b08:	f1 f7       	brne	.-4      	; 0x4b06 <EXTI_System+0x496>
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	eb 52       	subi	r30, 0x2B	; 43
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	91 83       	std	Z+1, r25	; 0x01
    4b12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b14:	de 01       	movw	r26, r28
    4b16:	a9 52       	subi	r26, 0x29	; 41
    4b18:	bf 4f       	sbci	r27, 0xFF	; 255
    4b1a:	fe 01       	movw	r30, r28
    4b1c:	e9 52       	subi	r30, 0x29	; 41
    4b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b20:	80 81       	ld	r24, Z
    4b22:	91 81       	ldd	r25, Z+1	; 0x01
    4b24:	01 97       	sbiw	r24, 0x01	; 1
    4b26:	11 96       	adiw	r26, 0x01	; 1
    4b28:	9c 93       	st	X, r25
    4b2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	e9 52       	subi	r30, 0x29	; 41
    4b30:	ff 4f       	sbci	r31, 0xFF	; 255
    4b32:	80 81       	ld	r24, Z
    4b34:	91 81       	ldd	r25, Z+1	; 0x01
    4b36:	00 97       	sbiw	r24, 0x00	; 0
    4b38:	d1 f6       	brne	.-76     	; 0x4aee <EXTI_System+0x47e>
    4b3a:	28 c0       	rjmp	.+80     	; 0x4b8c <EXTI_System+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b3c:	8e 01       	movw	r16, r28
    4b3e:	09 52       	subi	r16, 0x29	; 41
    4b40:	1f 4f       	sbci	r17, 0xFF	; 255
    4b42:	fe 01       	movw	r30, r28
    4b44:	e7 52       	subi	r30, 0x27	; 39
    4b46:	ff 4f       	sbci	r31, 0xFF	; 255
    4b48:	60 81       	ld	r22, Z
    4b4a:	71 81       	ldd	r23, Z+1	; 0x01
    4b4c:	82 81       	ldd	r24, Z+2	; 0x02
    4b4e:	93 81       	ldd	r25, Z+3	; 0x03
    4b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b54:	dc 01       	movw	r26, r24
    4b56:	cb 01       	movw	r24, r22
    4b58:	f8 01       	movw	r30, r16
    4b5a:	91 83       	std	Z+1, r25	; 0x01
    4b5c:	80 83       	st	Z, r24
    4b5e:	de 01       	movw	r26, r28
    4b60:	ad 52       	subi	r26, 0x2D	; 45
    4b62:	bf 4f       	sbci	r27, 0xFF	; 255
    4b64:	fe 01       	movw	r30, r28
    4b66:	e9 52       	subi	r30, 0x29	; 41
    4b68:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6a:	80 81       	ld	r24, Z
    4b6c:	91 81       	ldd	r25, Z+1	; 0x01
    4b6e:	11 96       	adiw	r26, 0x01	; 1
    4b70:	9c 93       	st	X, r25
    4b72:	8e 93       	st	-X, r24
    4b74:	fe 01       	movw	r30, r28
    4b76:	ed 52       	subi	r30, 0x2D	; 45
    4b78:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7a:	80 81       	ld	r24, Z
    4b7c:	91 81       	ldd	r25, Z+1	; 0x01
    4b7e:	01 97       	sbiw	r24, 0x01	; 1
    4b80:	f1 f7       	brne	.-4      	; 0x4b7e <EXTI_System+0x50e>
    4b82:	fe 01       	movw	r30, r28
    4b84:	ed 52       	subi	r30, 0x2D	; 45
    4b86:	ff 4f       	sbci	r31, 0xFF	; 255
    4b88:	91 83       	std	Z+1, r25	; 0x01
    4b8a:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 4){
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	ea 5f       	subi	r30, 0xFA	; 250
    4b90:	fe 4f       	sbci	r31, 0xFE	; 254
    4b92:	80 81       	ld	r24, Z
    4b94:	84 30       	cpi	r24, 0x04	; 4
    4b96:	09 f0       	breq	.+2      	; 0x4b9a <EXTI_System+0x52a>
    4b98:	c5 c0       	rjmp	.+394    	; 0x4d24 <EXTI_System+0x6b4>
				LCD_displayCharacter('*');
    4b9a:	8a e2       	ldi	r24, 0x2A	; 42
    4b9c:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '4';
    4ba0:	80 91 50 01 	lds	r24, 0x0150
    4ba4:	88 2f       	mov	r24, r24
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	fc 01       	movw	r30, r24
    4baa:	ed 5a       	subi	r30, 0xAD	; 173
    4bac:	fe 4f       	sbci	r31, 0xFE	; 254
    4bae:	84 e3       	ldi	r24, 0x34	; 52
    4bb0:	80 83       	st	Z, r24
				c++;
    4bb2:	80 91 50 01 	lds	r24, 0x0150
    4bb6:	8f 5f       	subi	r24, 0xFF	; 255
    4bb8:	80 93 50 01 	sts	0x0150, r24
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	e1 53       	subi	r30, 0x31	; 49
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	80 e0       	ldi	r24, 0x00	; 0
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	ac e0       	ldi	r26, 0x0C	; 12
    4bc8:	b2 e4       	ldi	r27, 0x42	; 66
    4bca:	80 83       	st	Z, r24
    4bcc:	91 83       	std	Z+1, r25	; 0x01
    4bce:	a2 83       	std	Z+2, r26	; 0x02
    4bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bd2:	8e 01       	movw	r16, r28
    4bd4:	05 53       	subi	r16, 0x35	; 53
    4bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd8:	fe 01       	movw	r30, r28
    4bda:	e1 53       	subi	r30, 0x31	; 49
    4bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bde:	60 81       	ld	r22, Z
    4be0:	71 81       	ldd	r23, Z+1	; 0x01
    4be2:	82 81       	ldd	r24, Z+2	; 0x02
    4be4:	93 81       	ldd	r25, Z+3	; 0x03
    4be6:	20 e0       	ldi	r18, 0x00	; 0
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	4a e7       	ldi	r20, 0x7A	; 122
    4bec:	55 e4       	ldi	r21, 0x45	; 69
    4bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22
    4bf6:	f8 01       	movw	r30, r16
    4bf8:	80 83       	st	Z, r24
    4bfa:	91 83       	std	Z+1, r25	; 0x01
    4bfc:	a2 83       	std	Z+2, r26	; 0x02
    4bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c00:	fe 01       	movw	r30, r28
    4c02:	e5 53       	subi	r30, 0x35	; 53
    4c04:	ff 4f       	sbci	r31, 0xFF	; 255
    4c06:	60 81       	ld	r22, Z
    4c08:	71 81       	ldd	r23, Z+1	; 0x01
    4c0a:	82 81       	ldd	r24, Z+2	; 0x02
    4c0c:	93 81       	ldd	r25, Z+3	; 0x03
    4c0e:	20 e0       	ldi	r18, 0x00	; 0
    4c10:	30 e0       	ldi	r19, 0x00	; 0
    4c12:	40 e8       	ldi	r20, 0x80	; 128
    4c14:	5f e3       	ldi	r21, 0x3F	; 63
    4c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c1a:	88 23       	and	r24, r24
    4c1c:	44 f4       	brge	.+16     	; 0x4c2e <EXTI_System+0x5be>
		__ticks = 1;
    4c1e:	fe 01       	movw	r30, r28
    4c20:	e7 53       	subi	r30, 0x37	; 55
    4c22:	ff 4f       	sbci	r31, 0xFF	; 255
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	91 83       	std	Z+1, r25	; 0x01
    4c2a:	80 83       	st	Z, r24
    4c2c:	64 c0       	rjmp	.+200    	; 0x4cf6 <EXTI_System+0x686>
	else if (__tmp > 65535)
    4c2e:	fe 01       	movw	r30, r28
    4c30:	e5 53       	subi	r30, 0x35	; 53
    4c32:	ff 4f       	sbci	r31, 0xFF	; 255
    4c34:	60 81       	ld	r22, Z
    4c36:	71 81       	ldd	r23, Z+1	; 0x01
    4c38:	82 81       	ldd	r24, Z+2	; 0x02
    4c3a:	93 81       	ldd	r25, Z+3	; 0x03
    4c3c:	20 e0       	ldi	r18, 0x00	; 0
    4c3e:	3f ef       	ldi	r19, 0xFF	; 255
    4c40:	4f e7       	ldi	r20, 0x7F	; 127
    4c42:	57 e4       	ldi	r21, 0x47	; 71
    4c44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c48:	18 16       	cp	r1, r24
    4c4a:	0c f0       	brlt	.+2      	; 0x4c4e <EXTI_System+0x5de>
    4c4c:	43 c0       	rjmp	.+134    	; 0x4cd4 <EXTI_System+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c4e:	fe 01       	movw	r30, r28
    4c50:	e1 53       	subi	r30, 0x31	; 49
    4c52:	ff 4f       	sbci	r31, 0xFF	; 255
    4c54:	60 81       	ld	r22, Z
    4c56:	71 81       	ldd	r23, Z+1	; 0x01
    4c58:	82 81       	ldd	r24, Z+2	; 0x02
    4c5a:	93 81       	ldd	r25, Z+3	; 0x03
    4c5c:	20 e0       	ldi	r18, 0x00	; 0
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e2       	ldi	r20, 0x20	; 32
    4c62:	51 e4       	ldi	r21, 0x41	; 65
    4c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	8e 01       	movw	r16, r28
    4c6e:	07 53       	subi	r16, 0x37	; 55
    4c70:	1f 4f       	sbci	r17, 0xFF	; 255
    4c72:	bc 01       	movw	r22, r24
    4c74:	cd 01       	movw	r24, r26
    4c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	f8 01       	movw	r30, r16
    4c80:	91 83       	std	Z+1, r25	; 0x01
    4c82:	80 83       	st	Z, r24
    4c84:	1f c0       	rjmp	.+62     	; 0x4cc4 <EXTI_System+0x654>
    4c86:	fe 01       	movw	r30, r28
    4c88:	e9 53       	subi	r30, 0x39	; 57
    4c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8c:	80 e9       	ldi	r24, 0x90	; 144
    4c8e:	91 e0       	ldi	r25, 0x01	; 1
    4c90:	91 83       	std	Z+1, r25	; 0x01
    4c92:	80 83       	st	Z, r24
    4c94:	fe 01       	movw	r30, r28
    4c96:	e9 53       	subi	r30, 0x39	; 57
    4c98:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9a:	80 81       	ld	r24, Z
    4c9c:	91 81       	ldd	r25, Z+1	; 0x01
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <EXTI_System+0x62e>
    4ca2:	fe 01       	movw	r30, r28
    4ca4:	e9 53       	subi	r30, 0x39	; 57
    4ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca8:	91 83       	std	Z+1, r25	; 0x01
    4caa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cac:	de 01       	movw	r26, r28
    4cae:	a7 53       	subi	r26, 0x37	; 55
    4cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb2:	fe 01       	movw	r30, r28
    4cb4:	e7 53       	subi	r30, 0x37	; 55
    4cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb8:	80 81       	ld	r24, Z
    4cba:	91 81       	ldd	r25, Z+1	; 0x01
    4cbc:	01 97       	sbiw	r24, 0x01	; 1
    4cbe:	11 96       	adiw	r26, 0x01	; 1
    4cc0:	9c 93       	st	X, r25
    4cc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cc4:	fe 01       	movw	r30, r28
    4cc6:	e7 53       	subi	r30, 0x37	; 55
    4cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cca:	80 81       	ld	r24, Z
    4ccc:	91 81       	ldd	r25, Z+1	; 0x01
    4cce:	00 97       	sbiw	r24, 0x00	; 0
    4cd0:	d1 f6       	brne	.-76     	; 0x4c86 <EXTI_System+0x616>
    4cd2:	28 c0       	rjmp	.+80     	; 0x4d24 <EXTI_System+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd4:	8e 01       	movw	r16, r28
    4cd6:	07 53       	subi	r16, 0x37	; 55
    4cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cda:	fe 01       	movw	r30, r28
    4cdc:	e5 53       	subi	r30, 0x35	; 53
    4cde:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce0:	60 81       	ld	r22, Z
    4ce2:	71 81       	ldd	r23, Z+1	; 0x01
    4ce4:	82 81       	ldd	r24, Z+2	; 0x02
    4ce6:	93 81       	ldd	r25, Z+3	; 0x03
    4ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	f8 01       	movw	r30, r16
    4cf2:	91 83       	std	Z+1, r25	; 0x01
    4cf4:	80 83       	st	Z, r24
    4cf6:	de 01       	movw	r26, r28
    4cf8:	ab 53       	subi	r26, 0x3B	; 59
    4cfa:	bf 4f       	sbci	r27, 0xFF	; 255
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	e7 53       	subi	r30, 0x37	; 55
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	80 81       	ld	r24, Z
    4d04:	91 81       	ldd	r25, Z+1	; 0x01
    4d06:	11 96       	adiw	r26, 0x01	; 1
    4d08:	9c 93       	st	X, r25
    4d0a:	8e 93       	st	-X, r24
    4d0c:	fe 01       	movw	r30, r28
    4d0e:	eb 53       	subi	r30, 0x3B	; 59
    4d10:	ff 4f       	sbci	r31, 0xFF	; 255
    4d12:	80 81       	ld	r24, Z
    4d14:	91 81       	ldd	r25, Z+1	; 0x01
    4d16:	01 97       	sbiw	r24, 0x01	; 1
    4d18:	f1 f7       	brne	.-4      	; 0x4d16 <EXTI_System+0x6a6>
    4d1a:	fe 01       	movw	r30, r28
    4d1c:	eb 53       	subi	r30, 0x3B	; 59
    4d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d20:	91 83       	std	Z+1, r25	; 0x01
    4d22:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 5){
    4d24:	fe 01       	movw	r30, r28
    4d26:	ea 5f       	subi	r30, 0xFA	; 250
    4d28:	fe 4f       	sbci	r31, 0xFE	; 254
    4d2a:	80 81       	ld	r24, Z
    4d2c:	85 30       	cpi	r24, 0x05	; 5
    4d2e:	09 f0       	breq	.+2      	; 0x4d32 <EXTI_System+0x6c2>
    4d30:	c5 c0       	rjmp	.+394    	; 0x4ebc <EXTI_System+0x84c>
				LCD_displayCharacter('*');
    4d32:	8a e2       	ldi	r24, 0x2A	; 42
    4d34:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '5';
    4d38:	80 91 50 01 	lds	r24, 0x0150
    4d3c:	88 2f       	mov	r24, r24
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	fc 01       	movw	r30, r24
    4d42:	ed 5a       	subi	r30, 0xAD	; 173
    4d44:	fe 4f       	sbci	r31, 0xFE	; 254
    4d46:	85 e3       	ldi	r24, 0x35	; 53
    4d48:	80 83       	st	Z, r24
				c++;
    4d4a:	80 91 50 01 	lds	r24, 0x0150
    4d4e:	8f 5f       	subi	r24, 0xFF	; 255
    4d50:	80 93 50 01 	sts	0x0150, r24
    4d54:	fe 01       	movw	r30, r28
    4d56:	ef 53       	subi	r30, 0x3F	; 63
    4d58:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5a:	80 e0       	ldi	r24, 0x00	; 0
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	ac e0       	ldi	r26, 0x0C	; 12
    4d60:	b2 e4       	ldi	r27, 0x42	; 66
    4d62:	80 83       	st	Z, r24
    4d64:	91 83       	std	Z+1, r25	; 0x01
    4d66:	a2 83       	std	Z+2, r26	; 0x02
    4d68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d6a:	8e 01       	movw	r16, r28
    4d6c:	03 54       	subi	r16, 0x43	; 67
    4d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d70:	fe 01       	movw	r30, r28
    4d72:	ef 53       	subi	r30, 0x3F	; 63
    4d74:	ff 4f       	sbci	r31, 0xFF	; 255
    4d76:	60 81       	ld	r22, Z
    4d78:	71 81       	ldd	r23, Z+1	; 0x01
    4d7a:	82 81       	ldd	r24, Z+2	; 0x02
    4d7c:	93 81       	ldd	r25, Z+3	; 0x03
    4d7e:	20 e0       	ldi	r18, 0x00	; 0
    4d80:	30 e0       	ldi	r19, 0x00	; 0
    4d82:	4a e7       	ldi	r20, 0x7A	; 122
    4d84:	55 e4       	ldi	r21, 0x45	; 69
    4d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d8a:	dc 01       	movw	r26, r24
    4d8c:	cb 01       	movw	r24, r22
    4d8e:	f8 01       	movw	r30, r16
    4d90:	80 83       	st	Z, r24
    4d92:	91 83       	std	Z+1, r25	; 0x01
    4d94:	a2 83       	std	Z+2, r26	; 0x02
    4d96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d98:	fe 01       	movw	r30, r28
    4d9a:	e3 54       	subi	r30, 0x43	; 67
    4d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9e:	60 81       	ld	r22, Z
    4da0:	71 81       	ldd	r23, Z+1	; 0x01
    4da2:	82 81       	ldd	r24, Z+2	; 0x02
    4da4:	93 81       	ldd	r25, Z+3	; 0x03
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	40 e8       	ldi	r20, 0x80	; 128
    4dac:	5f e3       	ldi	r21, 0x3F	; 63
    4dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4db2:	88 23       	and	r24, r24
    4db4:	44 f4       	brge	.+16     	; 0x4dc6 <EXTI_System+0x756>
		__ticks = 1;
    4db6:	fe 01       	movw	r30, r28
    4db8:	e5 54       	subi	r30, 0x45	; 69
    4dba:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	91 83       	std	Z+1, r25	; 0x01
    4dc2:	80 83       	st	Z, r24
    4dc4:	64 c0       	rjmp	.+200    	; 0x4e8e <EXTI_System+0x81e>
	else if (__tmp > 65535)
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	e3 54       	subi	r30, 0x43	; 67
    4dca:	ff 4f       	sbci	r31, 0xFF	; 255
    4dcc:	60 81       	ld	r22, Z
    4dce:	71 81       	ldd	r23, Z+1	; 0x01
    4dd0:	82 81       	ldd	r24, Z+2	; 0x02
    4dd2:	93 81       	ldd	r25, Z+3	; 0x03
    4dd4:	20 e0       	ldi	r18, 0x00	; 0
    4dd6:	3f ef       	ldi	r19, 0xFF	; 255
    4dd8:	4f e7       	ldi	r20, 0x7F	; 127
    4dda:	57 e4       	ldi	r21, 0x47	; 71
    4ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4de0:	18 16       	cp	r1, r24
    4de2:	0c f0       	brlt	.+2      	; 0x4de6 <EXTI_System+0x776>
    4de4:	43 c0       	rjmp	.+134    	; 0x4e6c <EXTI_System+0x7fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4de6:	fe 01       	movw	r30, r28
    4de8:	ef 53       	subi	r30, 0x3F	; 63
    4dea:	ff 4f       	sbci	r31, 0xFF	; 255
    4dec:	60 81       	ld	r22, Z
    4dee:	71 81       	ldd	r23, Z+1	; 0x01
    4df0:	82 81       	ldd	r24, Z+2	; 0x02
    4df2:	93 81       	ldd	r25, Z+3	; 0x03
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	40 e2       	ldi	r20, 0x20	; 32
    4dfa:	51 e4       	ldi	r21, 0x41	; 65
    4dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	8e 01       	movw	r16, r28
    4e06:	05 54       	subi	r16, 0x45	; 69
    4e08:	1f 4f       	sbci	r17, 0xFF	; 255
    4e0a:	bc 01       	movw	r22, r24
    4e0c:	cd 01       	movw	r24, r26
    4e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e12:	dc 01       	movw	r26, r24
    4e14:	cb 01       	movw	r24, r22
    4e16:	f8 01       	movw	r30, r16
    4e18:	91 83       	std	Z+1, r25	; 0x01
    4e1a:	80 83       	st	Z, r24
    4e1c:	1f c0       	rjmp	.+62     	; 0x4e5c <EXTI_System+0x7ec>
    4e1e:	fe 01       	movw	r30, r28
    4e20:	e7 54       	subi	r30, 0x47	; 71
    4e22:	ff 4f       	sbci	r31, 0xFF	; 255
    4e24:	80 e9       	ldi	r24, 0x90	; 144
    4e26:	91 e0       	ldi	r25, 0x01	; 1
    4e28:	91 83       	std	Z+1, r25	; 0x01
    4e2a:	80 83       	st	Z, r24
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	e7 54       	subi	r30, 0x47	; 71
    4e30:	ff 4f       	sbci	r31, 0xFF	; 255
    4e32:	80 81       	ld	r24, Z
    4e34:	91 81       	ldd	r25, Z+1	; 0x01
    4e36:	01 97       	sbiw	r24, 0x01	; 1
    4e38:	f1 f7       	brne	.-4      	; 0x4e36 <EXTI_System+0x7c6>
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	e7 54       	subi	r30, 0x47	; 71
    4e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e40:	91 83       	std	Z+1, r25	; 0x01
    4e42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e44:	de 01       	movw	r26, r28
    4e46:	a5 54       	subi	r26, 0x45	; 69
    4e48:	bf 4f       	sbci	r27, 0xFF	; 255
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	e5 54       	subi	r30, 0x45	; 69
    4e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e50:	80 81       	ld	r24, Z
    4e52:	91 81       	ldd	r25, Z+1	; 0x01
    4e54:	01 97       	sbiw	r24, 0x01	; 1
    4e56:	11 96       	adiw	r26, 0x01	; 1
    4e58:	9c 93       	st	X, r25
    4e5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	e5 54       	subi	r30, 0x45	; 69
    4e60:	ff 4f       	sbci	r31, 0xFF	; 255
    4e62:	80 81       	ld	r24, Z
    4e64:	91 81       	ldd	r25, Z+1	; 0x01
    4e66:	00 97       	sbiw	r24, 0x00	; 0
    4e68:	d1 f6       	brne	.-76     	; 0x4e1e <EXTI_System+0x7ae>
    4e6a:	28 c0       	rjmp	.+80     	; 0x4ebc <EXTI_System+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e6c:	8e 01       	movw	r16, r28
    4e6e:	05 54       	subi	r16, 0x45	; 69
    4e70:	1f 4f       	sbci	r17, 0xFF	; 255
    4e72:	fe 01       	movw	r30, r28
    4e74:	e3 54       	subi	r30, 0x43	; 67
    4e76:	ff 4f       	sbci	r31, 0xFF	; 255
    4e78:	60 81       	ld	r22, Z
    4e7a:	71 81       	ldd	r23, Z+1	; 0x01
    4e7c:	82 81       	ldd	r24, Z+2	; 0x02
    4e7e:	93 81       	ldd	r25, Z+3	; 0x03
    4e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e84:	dc 01       	movw	r26, r24
    4e86:	cb 01       	movw	r24, r22
    4e88:	f8 01       	movw	r30, r16
    4e8a:	91 83       	std	Z+1, r25	; 0x01
    4e8c:	80 83       	st	Z, r24
    4e8e:	de 01       	movw	r26, r28
    4e90:	a9 54       	subi	r26, 0x49	; 73
    4e92:	bf 4f       	sbci	r27, 0xFF	; 255
    4e94:	fe 01       	movw	r30, r28
    4e96:	e5 54       	subi	r30, 0x45	; 69
    4e98:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9a:	80 81       	ld	r24, Z
    4e9c:	91 81       	ldd	r25, Z+1	; 0x01
    4e9e:	11 96       	adiw	r26, 0x01	; 1
    4ea0:	9c 93       	st	X, r25
    4ea2:	8e 93       	st	-X, r24
    4ea4:	fe 01       	movw	r30, r28
    4ea6:	e9 54       	subi	r30, 0x49	; 73
    4ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eaa:	80 81       	ld	r24, Z
    4eac:	91 81       	ldd	r25, Z+1	; 0x01
    4eae:	01 97       	sbiw	r24, 0x01	; 1
    4eb0:	f1 f7       	brne	.-4      	; 0x4eae <EXTI_System+0x83e>
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	e9 54       	subi	r30, 0x49	; 73
    4eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb8:	91 83       	std	Z+1, r25	; 0x01
    4eba:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 6){
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	ea 5f       	subi	r30, 0xFA	; 250
    4ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ec2:	80 81       	ld	r24, Z
    4ec4:	86 30       	cpi	r24, 0x06	; 6
    4ec6:	09 f0       	breq	.+2      	; 0x4eca <EXTI_System+0x85a>
    4ec8:	c5 c0       	rjmp	.+394    	; 0x5054 <EXTI_System+0x9e4>
				LCD_displayCharacter('*');
    4eca:	8a e2       	ldi	r24, 0x2A	; 42
    4ecc:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '6';
    4ed0:	80 91 50 01 	lds	r24, 0x0150
    4ed4:	88 2f       	mov	r24, r24
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	fc 01       	movw	r30, r24
    4eda:	ed 5a       	subi	r30, 0xAD	; 173
    4edc:	fe 4f       	sbci	r31, 0xFE	; 254
    4ede:	86 e3       	ldi	r24, 0x36	; 54
    4ee0:	80 83       	st	Z, r24
				c++;
    4ee2:	80 91 50 01 	lds	r24, 0x0150
    4ee6:	8f 5f       	subi	r24, 0xFF	; 255
    4ee8:	80 93 50 01 	sts	0x0150, r24
    4eec:	fe 01       	movw	r30, r28
    4eee:	ed 54       	subi	r30, 0x4D	; 77
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	ac e0       	ldi	r26, 0x0C	; 12
    4ef8:	b2 e4       	ldi	r27, 0x42	; 66
    4efa:	80 83       	st	Z, r24
    4efc:	91 83       	std	Z+1, r25	; 0x01
    4efe:	a2 83       	std	Z+2, r26	; 0x02
    4f00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f02:	8e 01       	movw	r16, r28
    4f04:	01 55       	subi	r16, 0x51	; 81
    4f06:	1f 4f       	sbci	r17, 0xFF	; 255
    4f08:	fe 01       	movw	r30, r28
    4f0a:	ed 54       	subi	r30, 0x4D	; 77
    4f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0e:	60 81       	ld	r22, Z
    4f10:	71 81       	ldd	r23, Z+1	; 0x01
    4f12:	82 81       	ldd	r24, Z+2	; 0x02
    4f14:	93 81       	ldd	r25, Z+3	; 0x03
    4f16:	20 e0       	ldi	r18, 0x00	; 0
    4f18:	30 e0       	ldi	r19, 0x00	; 0
    4f1a:	4a e7       	ldi	r20, 0x7A	; 122
    4f1c:	55 e4       	ldi	r21, 0x45	; 69
    4f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f22:	dc 01       	movw	r26, r24
    4f24:	cb 01       	movw	r24, r22
    4f26:	f8 01       	movw	r30, r16
    4f28:	80 83       	st	Z, r24
    4f2a:	91 83       	std	Z+1, r25	; 0x01
    4f2c:	a2 83       	std	Z+2, r26	; 0x02
    4f2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f30:	fe 01       	movw	r30, r28
    4f32:	e1 55       	subi	r30, 0x51	; 81
    4f34:	ff 4f       	sbci	r31, 0xFF	; 255
    4f36:	60 81       	ld	r22, Z
    4f38:	71 81       	ldd	r23, Z+1	; 0x01
    4f3a:	82 81       	ldd	r24, Z+2	; 0x02
    4f3c:	93 81       	ldd	r25, Z+3	; 0x03
    4f3e:	20 e0       	ldi	r18, 0x00	; 0
    4f40:	30 e0       	ldi	r19, 0x00	; 0
    4f42:	40 e8       	ldi	r20, 0x80	; 128
    4f44:	5f e3       	ldi	r21, 0x3F	; 63
    4f46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f4a:	88 23       	and	r24, r24
    4f4c:	44 f4       	brge	.+16     	; 0x4f5e <EXTI_System+0x8ee>
		__ticks = 1;
    4f4e:	fe 01       	movw	r30, r28
    4f50:	e3 55       	subi	r30, 0x53	; 83
    4f52:	ff 4f       	sbci	r31, 0xFF	; 255
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	91 83       	std	Z+1, r25	; 0x01
    4f5a:	80 83       	st	Z, r24
    4f5c:	64 c0       	rjmp	.+200    	; 0x5026 <EXTI_System+0x9b6>
	else if (__tmp > 65535)
    4f5e:	fe 01       	movw	r30, r28
    4f60:	e1 55       	subi	r30, 0x51	; 81
    4f62:	ff 4f       	sbci	r31, 0xFF	; 255
    4f64:	60 81       	ld	r22, Z
    4f66:	71 81       	ldd	r23, Z+1	; 0x01
    4f68:	82 81       	ldd	r24, Z+2	; 0x02
    4f6a:	93 81       	ldd	r25, Z+3	; 0x03
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	3f ef       	ldi	r19, 0xFF	; 255
    4f70:	4f e7       	ldi	r20, 0x7F	; 127
    4f72:	57 e4       	ldi	r21, 0x47	; 71
    4f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f78:	18 16       	cp	r1, r24
    4f7a:	0c f0       	brlt	.+2      	; 0x4f7e <EXTI_System+0x90e>
    4f7c:	43 c0       	rjmp	.+134    	; 0x5004 <EXTI_System+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f7e:	fe 01       	movw	r30, r28
    4f80:	ed 54       	subi	r30, 0x4D	; 77
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	60 81       	ld	r22, Z
    4f86:	71 81       	ldd	r23, Z+1	; 0x01
    4f88:	82 81       	ldd	r24, Z+2	; 0x02
    4f8a:	93 81       	ldd	r25, Z+3	; 0x03
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	30 e0       	ldi	r19, 0x00	; 0
    4f90:	40 e2       	ldi	r20, 0x20	; 32
    4f92:	51 e4       	ldi	r21, 0x41	; 65
    4f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f98:	dc 01       	movw	r26, r24
    4f9a:	cb 01       	movw	r24, r22
    4f9c:	8e 01       	movw	r16, r28
    4f9e:	03 55       	subi	r16, 0x53	; 83
    4fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    4fa2:	bc 01       	movw	r22, r24
    4fa4:	cd 01       	movw	r24, r26
    4fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4faa:	dc 01       	movw	r26, r24
    4fac:	cb 01       	movw	r24, r22
    4fae:	f8 01       	movw	r30, r16
    4fb0:	91 83       	std	Z+1, r25	; 0x01
    4fb2:	80 83       	st	Z, r24
    4fb4:	1f c0       	rjmp	.+62     	; 0x4ff4 <EXTI_System+0x984>
    4fb6:	fe 01       	movw	r30, r28
    4fb8:	e5 55       	subi	r30, 0x55	; 85
    4fba:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbc:	80 e9       	ldi	r24, 0x90	; 144
    4fbe:	91 e0       	ldi	r25, 0x01	; 1
    4fc0:	91 83       	std	Z+1, r25	; 0x01
    4fc2:	80 83       	st	Z, r24
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	e5 55       	subi	r30, 0x55	; 85
    4fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fca:	80 81       	ld	r24, Z
    4fcc:	91 81       	ldd	r25, Z+1	; 0x01
    4fce:	01 97       	sbiw	r24, 0x01	; 1
    4fd0:	f1 f7       	brne	.-4      	; 0x4fce <EXTI_System+0x95e>
    4fd2:	fe 01       	movw	r30, r28
    4fd4:	e5 55       	subi	r30, 0x55	; 85
    4fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd8:	91 83       	std	Z+1, r25	; 0x01
    4fda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fdc:	de 01       	movw	r26, r28
    4fde:	a3 55       	subi	r26, 0x53	; 83
    4fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    4fe2:	fe 01       	movw	r30, r28
    4fe4:	e3 55       	subi	r30, 0x53	; 83
    4fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe8:	80 81       	ld	r24, Z
    4fea:	91 81       	ldd	r25, Z+1	; 0x01
    4fec:	01 97       	sbiw	r24, 0x01	; 1
    4fee:	11 96       	adiw	r26, 0x01	; 1
    4ff0:	9c 93       	st	X, r25
    4ff2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	e3 55       	subi	r30, 0x53	; 83
    4ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffa:	80 81       	ld	r24, Z
    4ffc:	91 81       	ldd	r25, Z+1	; 0x01
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	d1 f6       	brne	.-76     	; 0x4fb6 <EXTI_System+0x946>
    5002:	28 c0       	rjmp	.+80     	; 0x5054 <EXTI_System+0x9e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5004:	8e 01       	movw	r16, r28
    5006:	03 55       	subi	r16, 0x53	; 83
    5008:	1f 4f       	sbci	r17, 0xFF	; 255
    500a:	fe 01       	movw	r30, r28
    500c:	e1 55       	subi	r30, 0x51	; 81
    500e:	ff 4f       	sbci	r31, 0xFF	; 255
    5010:	60 81       	ld	r22, Z
    5012:	71 81       	ldd	r23, Z+1	; 0x01
    5014:	82 81       	ldd	r24, Z+2	; 0x02
    5016:	93 81       	ldd	r25, Z+3	; 0x03
    5018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	f8 01       	movw	r30, r16
    5022:	91 83       	std	Z+1, r25	; 0x01
    5024:	80 83       	st	Z, r24
    5026:	de 01       	movw	r26, r28
    5028:	a7 55       	subi	r26, 0x57	; 87
    502a:	bf 4f       	sbci	r27, 0xFF	; 255
    502c:	fe 01       	movw	r30, r28
    502e:	e3 55       	subi	r30, 0x53	; 83
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	80 81       	ld	r24, Z
    5034:	91 81       	ldd	r25, Z+1	; 0x01
    5036:	11 96       	adiw	r26, 0x01	; 1
    5038:	9c 93       	st	X, r25
    503a:	8e 93       	st	-X, r24
    503c:	fe 01       	movw	r30, r28
    503e:	e7 55       	subi	r30, 0x57	; 87
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	80 81       	ld	r24, Z
    5044:	91 81       	ldd	r25, Z+1	; 0x01
    5046:	01 97       	sbiw	r24, 0x01	; 1
    5048:	f1 f7       	brne	.-4      	; 0x5046 <EXTI_System+0x9d6>
    504a:	fe 01       	movw	r30, r28
    504c:	e7 55       	subi	r30, 0x57	; 87
    504e:	ff 4f       	sbci	r31, 0xFF	; 255
    5050:	91 83       	std	Z+1, r25	; 0x01
    5052:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 7){
    5054:	fe 01       	movw	r30, r28
    5056:	ea 5f       	subi	r30, 0xFA	; 250
    5058:	fe 4f       	sbci	r31, 0xFE	; 254
    505a:	80 81       	ld	r24, Z
    505c:	87 30       	cpi	r24, 0x07	; 7
    505e:	09 f0       	breq	.+2      	; 0x5062 <EXTI_System+0x9f2>
    5060:	c5 c0       	rjmp	.+394    	; 0x51ec <EXTI_System+0xb7c>
				LCD_displayCharacter('*');
    5062:	8a e2       	ldi	r24, 0x2A	; 42
    5064:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '7';
    5068:	80 91 50 01 	lds	r24, 0x0150
    506c:	88 2f       	mov	r24, r24
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	fc 01       	movw	r30, r24
    5072:	ed 5a       	subi	r30, 0xAD	; 173
    5074:	fe 4f       	sbci	r31, 0xFE	; 254
    5076:	87 e3       	ldi	r24, 0x37	; 55
    5078:	80 83       	st	Z, r24
				c++;
    507a:	80 91 50 01 	lds	r24, 0x0150
    507e:	8f 5f       	subi	r24, 0xFF	; 255
    5080:	80 93 50 01 	sts	0x0150, r24
    5084:	fe 01       	movw	r30, r28
    5086:	eb 55       	subi	r30, 0x5B	; 91
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	ac e0       	ldi	r26, 0x0C	; 12
    5090:	b2 e4       	ldi	r27, 0x42	; 66
    5092:	80 83       	st	Z, r24
    5094:	91 83       	std	Z+1, r25	; 0x01
    5096:	a2 83       	std	Z+2, r26	; 0x02
    5098:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    509a:	8e 01       	movw	r16, r28
    509c:	0f 55       	subi	r16, 0x5F	; 95
    509e:	1f 4f       	sbci	r17, 0xFF	; 255
    50a0:	fe 01       	movw	r30, r28
    50a2:	eb 55       	subi	r30, 0x5B	; 91
    50a4:	ff 4f       	sbci	r31, 0xFF	; 255
    50a6:	60 81       	ld	r22, Z
    50a8:	71 81       	ldd	r23, Z+1	; 0x01
    50aa:	82 81       	ldd	r24, Z+2	; 0x02
    50ac:	93 81       	ldd	r25, Z+3	; 0x03
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	4a e7       	ldi	r20, 0x7A	; 122
    50b4:	55 e4       	ldi	r21, 0x45	; 69
    50b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ba:	dc 01       	movw	r26, r24
    50bc:	cb 01       	movw	r24, r22
    50be:	f8 01       	movw	r30, r16
    50c0:	80 83       	st	Z, r24
    50c2:	91 83       	std	Z+1, r25	; 0x01
    50c4:	a2 83       	std	Z+2, r26	; 0x02
    50c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50c8:	fe 01       	movw	r30, r28
    50ca:	ef 55       	subi	r30, 0x5F	; 95
    50cc:	ff 4f       	sbci	r31, 0xFF	; 255
    50ce:	60 81       	ld	r22, Z
    50d0:	71 81       	ldd	r23, Z+1	; 0x01
    50d2:	82 81       	ldd	r24, Z+2	; 0x02
    50d4:	93 81       	ldd	r25, Z+3	; 0x03
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	40 e8       	ldi	r20, 0x80	; 128
    50dc:	5f e3       	ldi	r21, 0x3F	; 63
    50de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50e2:	88 23       	and	r24, r24
    50e4:	44 f4       	brge	.+16     	; 0x50f6 <EXTI_System+0xa86>
		__ticks = 1;
    50e6:	fe 01       	movw	r30, r28
    50e8:	e1 56       	subi	r30, 0x61	; 97
    50ea:	ff 4f       	sbci	r31, 0xFF	; 255
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	91 83       	std	Z+1, r25	; 0x01
    50f2:	80 83       	st	Z, r24
    50f4:	64 c0       	rjmp	.+200    	; 0x51be <EXTI_System+0xb4e>
	else if (__tmp > 65535)
    50f6:	fe 01       	movw	r30, r28
    50f8:	ef 55       	subi	r30, 0x5F	; 95
    50fa:	ff 4f       	sbci	r31, 0xFF	; 255
    50fc:	60 81       	ld	r22, Z
    50fe:	71 81       	ldd	r23, Z+1	; 0x01
    5100:	82 81       	ldd	r24, Z+2	; 0x02
    5102:	93 81       	ldd	r25, Z+3	; 0x03
    5104:	20 e0       	ldi	r18, 0x00	; 0
    5106:	3f ef       	ldi	r19, 0xFF	; 255
    5108:	4f e7       	ldi	r20, 0x7F	; 127
    510a:	57 e4       	ldi	r21, 0x47	; 71
    510c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5110:	18 16       	cp	r1, r24
    5112:	0c f0       	brlt	.+2      	; 0x5116 <EXTI_System+0xaa6>
    5114:	43 c0       	rjmp	.+134    	; 0x519c <EXTI_System+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5116:	fe 01       	movw	r30, r28
    5118:	eb 55       	subi	r30, 0x5B	; 91
    511a:	ff 4f       	sbci	r31, 0xFF	; 255
    511c:	60 81       	ld	r22, Z
    511e:	71 81       	ldd	r23, Z+1	; 0x01
    5120:	82 81       	ldd	r24, Z+2	; 0x02
    5122:	93 81       	ldd	r25, Z+3	; 0x03
    5124:	20 e0       	ldi	r18, 0x00	; 0
    5126:	30 e0       	ldi	r19, 0x00	; 0
    5128:	40 e2       	ldi	r20, 0x20	; 32
    512a:	51 e4       	ldi	r21, 0x41	; 65
    512c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5130:	dc 01       	movw	r26, r24
    5132:	cb 01       	movw	r24, r22
    5134:	8e 01       	movw	r16, r28
    5136:	01 56       	subi	r16, 0x61	; 97
    5138:	1f 4f       	sbci	r17, 0xFF	; 255
    513a:	bc 01       	movw	r22, r24
    513c:	cd 01       	movw	r24, r26
    513e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5142:	dc 01       	movw	r26, r24
    5144:	cb 01       	movw	r24, r22
    5146:	f8 01       	movw	r30, r16
    5148:	91 83       	std	Z+1, r25	; 0x01
    514a:	80 83       	st	Z, r24
    514c:	1f c0       	rjmp	.+62     	; 0x518c <EXTI_System+0xb1c>
    514e:	fe 01       	movw	r30, r28
    5150:	e3 56       	subi	r30, 0x63	; 99
    5152:	ff 4f       	sbci	r31, 0xFF	; 255
    5154:	80 e9       	ldi	r24, 0x90	; 144
    5156:	91 e0       	ldi	r25, 0x01	; 1
    5158:	91 83       	std	Z+1, r25	; 0x01
    515a:	80 83       	st	Z, r24
    515c:	fe 01       	movw	r30, r28
    515e:	e3 56       	subi	r30, 0x63	; 99
    5160:	ff 4f       	sbci	r31, 0xFF	; 255
    5162:	80 81       	ld	r24, Z
    5164:	91 81       	ldd	r25, Z+1	; 0x01
    5166:	01 97       	sbiw	r24, 0x01	; 1
    5168:	f1 f7       	brne	.-4      	; 0x5166 <EXTI_System+0xaf6>
    516a:	fe 01       	movw	r30, r28
    516c:	e3 56       	subi	r30, 0x63	; 99
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	91 83       	std	Z+1, r25	; 0x01
    5172:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5174:	de 01       	movw	r26, r28
    5176:	a1 56       	subi	r26, 0x61	; 97
    5178:	bf 4f       	sbci	r27, 0xFF	; 255
    517a:	fe 01       	movw	r30, r28
    517c:	e1 56       	subi	r30, 0x61	; 97
    517e:	ff 4f       	sbci	r31, 0xFF	; 255
    5180:	80 81       	ld	r24, Z
    5182:	91 81       	ldd	r25, Z+1	; 0x01
    5184:	01 97       	sbiw	r24, 0x01	; 1
    5186:	11 96       	adiw	r26, 0x01	; 1
    5188:	9c 93       	st	X, r25
    518a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    518c:	fe 01       	movw	r30, r28
    518e:	e1 56       	subi	r30, 0x61	; 97
    5190:	ff 4f       	sbci	r31, 0xFF	; 255
    5192:	80 81       	ld	r24, Z
    5194:	91 81       	ldd	r25, Z+1	; 0x01
    5196:	00 97       	sbiw	r24, 0x00	; 0
    5198:	d1 f6       	brne	.-76     	; 0x514e <EXTI_System+0xade>
    519a:	28 c0       	rjmp	.+80     	; 0x51ec <EXTI_System+0xb7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    519c:	8e 01       	movw	r16, r28
    519e:	01 56       	subi	r16, 0x61	; 97
    51a0:	1f 4f       	sbci	r17, 0xFF	; 255
    51a2:	fe 01       	movw	r30, r28
    51a4:	ef 55       	subi	r30, 0x5F	; 95
    51a6:	ff 4f       	sbci	r31, 0xFF	; 255
    51a8:	60 81       	ld	r22, Z
    51aa:	71 81       	ldd	r23, Z+1	; 0x01
    51ac:	82 81       	ldd	r24, Z+2	; 0x02
    51ae:	93 81       	ldd	r25, Z+3	; 0x03
    51b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51b4:	dc 01       	movw	r26, r24
    51b6:	cb 01       	movw	r24, r22
    51b8:	f8 01       	movw	r30, r16
    51ba:	91 83       	std	Z+1, r25	; 0x01
    51bc:	80 83       	st	Z, r24
    51be:	de 01       	movw	r26, r28
    51c0:	a5 56       	subi	r26, 0x65	; 101
    51c2:	bf 4f       	sbci	r27, 0xFF	; 255
    51c4:	fe 01       	movw	r30, r28
    51c6:	e1 56       	subi	r30, 0x61	; 97
    51c8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ca:	80 81       	ld	r24, Z
    51cc:	91 81       	ldd	r25, Z+1	; 0x01
    51ce:	11 96       	adiw	r26, 0x01	; 1
    51d0:	9c 93       	st	X, r25
    51d2:	8e 93       	st	-X, r24
    51d4:	fe 01       	movw	r30, r28
    51d6:	e5 56       	subi	r30, 0x65	; 101
    51d8:	ff 4f       	sbci	r31, 0xFF	; 255
    51da:	80 81       	ld	r24, Z
    51dc:	91 81       	ldd	r25, Z+1	; 0x01
    51de:	01 97       	sbiw	r24, 0x01	; 1
    51e0:	f1 f7       	brne	.-4      	; 0x51de <EXTI_System+0xb6e>
    51e2:	fe 01       	movw	r30, r28
    51e4:	e5 56       	subi	r30, 0x65	; 101
    51e6:	ff 4f       	sbci	r31, 0xFF	; 255
    51e8:	91 83       	std	Z+1, r25	; 0x01
    51ea:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 8){
    51ec:	fe 01       	movw	r30, r28
    51ee:	ea 5f       	subi	r30, 0xFA	; 250
    51f0:	fe 4f       	sbci	r31, 0xFE	; 254
    51f2:	80 81       	ld	r24, Z
    51f4:	88 30       	cpi	r24, 0x08	; 8
    51f6:	09 f0       	breq	.+2      	; 0x51fa <EXTI_System+0xb8a>
    51f8:	c5 c0       	rjmp	.+394    	; 0x5384 <EXTI_System+0xd14>
				LCD_displayCharacter('*');
    51fa:	8a e2       	ldi	r24, 0x2A	; 42
    51fc:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '8';
    5200:	80 91 50 01 	lds	r24, 0x0150
    5204:	88 2f       	mov	r24, r24
    5206:	90 e0       	ldi	r25, 0x00	; 0
    5208:	fc 01       	movw	r30, r24
    520a:	ed 5a       	subi	r30, 0xAD	; 173
    520c:	fe 4f       	sbci	r31, 0xFE	; 254
    520e:	88 e3       	ldi	r24, 0x38	; 56
    5210:	80 83       	st	Z, r24
				c++;
    5212:	80 91 50 01 	lds	r24, 0x0150
    5216:	8f 5f       	subi	r24, 0xFF	; 255
    5218:	80 93 50 01 	sts	0x0150, r24
    521c:	fe 01       	movw	r30, r28
    521e:	e9 56       	subi	r30, 0x69	; 105
    5220:	ff 4f       	sbci	r31, 0xFF	; 255
    5222:	80 e0       	ldi	r24, 0x00	; 0
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	ac e0       	ldi	r26, 0x0C	; 12
    5228:	b2 e4       	ldi	r27, 0x42	; 66
    522a:	80 83       	st	Z, r24
    522c:	91 83       	std	Z+1, r25	; 0x01
    522e:	a2 83       	std	Z+2, r26	; 0x02
    5230:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5232:	8e 01       	movw	r16, r28
    5234:	0d 56       	subi	r16, 0x6D	; 109
    5236:	1f 4f       	sbci	r17, 0xFF	; 255
    5238:	fe 01       	movw	r30, r28
    523a:	e9 56       	subi	r30, 0x69	; 105
    523c:	ff 4f       	sbci	r31, 0xFF	; 255
    523e:	60 81       	ld	r22, Z
    5240:	71 81       	ldd	r23, Z+1	; 0x01
    5242:	82 81       	ldd	r24, Z+2	; 0x02
    5244:	93 81       	ldd	r25, Z+3	; 0x03
    5246:	20 e0       	ldi	r18, 0x00	; 0
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	4a e7       	ldi	r20, 0x7A	; 122
    524c:	55 e4       	ldi	r21, 0x45	; 69
    524e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5252:	dc 01       	movw	r26, r24
    5254:	cb 01       	movw	r24, r22
    5256:	f8 01       	movw	r30, r16
    5258:	80 83       	st	Z, r24
    525a:	91 83       	std	Z+1, r25	; 0x01
    525c:	a2 83       	std	Z+2, r26	; 0x02
    525e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5260:	fe 01       	movw	r30, r28
    5262:	ed 56       	subi	r30, 0x6D	; 109
    5264:	ff 4f       	sbci	r31, 0xFF	; 255
    5266:	60 81       	ld	r22, Z
    5268:	71 81       	ldd	r23, Z+1	; 0x01
    526a:	82 81       	ldd	r24, Z+2	; 0x02
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	40 e8       	ldi	r20, 0x80	; 128
    5274:	5f e3       	ldi	r21, 0x3F	; 63
    5276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    527a:	88 23       	and	r24, r24
    527c:	44 f4       	brge	.+16     	; 0x528e <EXTI_System+0xc1e>
		__ticks = 1;
    527e:	fe 01       	movw	r30, r28
    5280:	ef 56       	subi	r30, 0x6F	; 111
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	81 e0       	ldi	r24, 0x01	; 1
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	91 83       	std	Z+1, r25	; 0x01
    528a:	80 83       	st	Z, r24
    528c:	64 c0       	rjmp	.+200    	; 0x5356 <EXTI_System+0xce6>
	else if (__tmp > 65535)
    528e:	fe 01       	movw	r30, r28
    5290:	ed 56       	subi	r30, 0x6D	; 109
    5292:	ff 4f       	sbci	r31, 0xFF	; 255
    5294:	60 81       	ld	r22, Z
    5296:	71 81       	ldd	r23, Z+1	; 0x01
    5298:	82 81       	ldd	r24, Z+2	; 0x02
    529a:	93 81       	ldd	r25, Z+3	; 0x03
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	3f ef       	ldi	r19, 0xFF	; 255
    52a0:	4f e7       	ldi	r20, 0x7F	; 127
    52a2:	57 e4       	ldi	r21, 0x47	; 71
    52a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52a8:	18 16       	cp	r1, r24
    52aa:	0c f0       	brlt	.+2      	; 0x52ae <EXTI_System+0xc3e>
    52ac:	43 c0       	rjmp	.+134    	; 0x5334 <EXTI_System+0xcc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ae:	fe 01       	movw	r30, r28
    52b0:	e9 56       	subi	r30, 0x69	; 105
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	60 81       	ld	r22, Z
    52b6:	71 81       	ldd	r23, Z+1	; 0x01
    52b8:	82 81       	ldd	r24, Z+2	; 0x02
    52ba:	93 81       	ldd	r25, Z+3	; 0x03
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	40 e2       	ldi	r20, 0x20	; 32
    52c2:	51 e4       	ldi	r21, 0x41	; 65
    52c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52c8:	dc 01       	movw	r26, r24
    52ca:	cb 01       	movw	r24, r22
    52cc:	8e 01       	movw	r16, r28
    52ce:	0f 56       	subi	r16, 0x6F	; 111
    52d0:	1f 4f       	sbci	r17, 0xFF	; 255
    52d2:	bc 01       	movw	r22, r24
    52d4:	cd 01       	movw	r24, r26
    52d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52da:	dc 01       	movw	r26, r24
    52dc:	cb 01       	movw	r24, r22
    52de:	f8 01       	movw	r30, r16
    52e0:	91 83       	std	Z+1, r25	; 0x01
    52e2:	80 83       	st	Z, r24
    52e4:	1f c0       	rjmp	.+62     	; 0x5324 <EXTI_System+0xcb4>
    52e6:	fe 01       	movw	r30, r28
    52e8:	e1 57       	subi	r30, 0x71	; 113
    52ea:	ff 4f       	sbci	r31, 0xFF	; 255
    52ec:	80 e9       	ldi	r24, 0x90	; 144
    52ee:	91 e0       	ldi	r25, 0x01	; 1
    52f0:	91 83       	std	Z+1, r25	; 0x01
    52f2:	80 83       	st	Z, r24
    52f4:	fe 01       	movw	r30, r28
    52f6:	e1 57       	subi	r30, 0x71	; 113
    52f8:	ff 4f       	sbci	r31, 0xFF	; 255
    52fa:	80 81       	ld	r24, Z
    52fc:	91 81       	ldd	r25, Z+1	; 0x01
    52fe:	01 97       	sbiw	r24, 0x01	; 1
    5300:	f1 f7       	brne	.-4      	; 0x52fe <EXTI_System+0xc8e>
    5302:	fe 01       	movw	r30, r28
    5304:	e1 57       	subi	r30, 0x71	; 113
    5306:	ff 4f       	sbci	r31, 0xFF	; 255
    5308:	91 83       	std	Z+1, r25	; 0x01
    530a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    530c:	de 01       	movw	r26, r28
    530e:	af 56       	subi	r26, 0x6F	; 111
    5310:	bf 4f       	sbci	r27, 0xFF	; 255
    5312:	fe 01       	movw	r30, r28
    5314:	ef 56       	subi	r30, 0x6F	; 111
    5316:	ff 4f       	sbci	r31, 0xFF	; 255
    5318:	80 81       	ld	r24, Z
    531a:	91 81       	ldd	r25, Z+1	; 0x01
    531c:	01 97       	sbiw	r24, 0x01	; 1
    531e:	11 96       	adiw	r26, 0x01	; 1
    5320:	9c 93       	st	X, r25
    5322:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5324:	fe 01       	movw	r30, r28
    5326:	ef 56       	subi	r30, 0x6F	; 111
    5328:	ff 4f       	sbci	r31, 0xFF	; 255
    532a:	80 81       	ld	r24, Z
    532c:	91 81       	ldd	r25, Z+1	; 0x01
    532e:	00 97       	sbiw	r24, 0x00	; 0
    5330:	d1 f6       	brne	.-76     	; 0x52e6 <EXTI_System+0xc76>
    5332:	28 c0       	rjmp	.+80     	; 0x5384 <EXTI_System+0xd14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5334:	8e 01       	movw	r16, r28
    5336:	0f 56       	subi	r16, 0x6F	; 111
    5338:	1f 4f       	sbci	r17, 0xFF	; 255
    533a:	fe 01       	movw	r30, r28
    533c:	ed 56       	subi	r30, 0x6D	; 109
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	60 81       	ld	r22, Z
    5342:	71 81       	ldd	r23, Z+1	; 0x01
    5344:	82 81       	ldd	r24, Z+2	; 0x02
    5346:	93 81       	ldd	r25, Z+3	; 0x03
    5348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534c:	dc 01       	movw	r26, r24
    534e:	cb 01       	movw	r24, r22
    5350:	f8 01       	movw	r30, r16
    5352:	91 83       	std	Z+1, r25	; 0x01
    5354:	80 83       	st	Z, r24
    5356:	de 01       	movw	r26, r28
    5358:	a3 57       	subi	r26, 0x73	; 115
    535a:	bf 4f       	sbci	r27, 0xFF	; 255
    535c:	fe 01       	movw	r30, r28
    535e:	ef 56       	subi	r30, 0x6F	; 111
    5360:	ff 4f       	sbci	r31, 0xFF	; 255
    5362:	80 81       	ld	r24, Z
    5364:	91 81       	ldd	r25, Z+1	; 0x01
    5366:	11 96       	adiw	r26, 0x01	; 1
    5368:	9c 93       	st	X, r25
    536a:	8e 93       	st	-X, r24
    536c:	fe 01       	movw	r30, r28
    536e:	e3 57       	subi	r30, 0x73	; 115
    5370:	ff 4f       	sbci	r31, 0xFF	; 255
    5372:	80 81       	ld	r24, Z
    5374:	91 81       	ldd	r25, Z+1	; 0x01
    5376:	01 97       	sbiw	r24, 0x01	; 1
    5378:	f1 f7       	brne	.-4      	; 0x5376 <EXTI_System+0xd06>
    537a:	fe 01       	movw	r30, r28
    537c:	e3 57       	subi	r30, 0x73	; 115
    537e:	ff 4f       	sbci	r31, 0xFF	; 255
    5380:	91 83       	std	Z+1, r25	; 0x01
    5382:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 9){
    5384:	fe 01       	movw	r30, r28
    5386:	ea 5f       	subi	r30, 0xFA	; 250
    5388:	fe 4f       	sbci	r31, 0xFE	; 254
    538a:	80 81       	ld	r24, Z
    538c:	89 30       	cpi	r24, 0x09	; 9
    538e:	09 f0       	breq	.+2      	; 0x5392 <EXTI_System+0xd22>
    5390:	c5 c0       	rjmp	.+394    	; 0x551c <EXTI_System+0xeac>
				LCD_displayCharacter('*');
    5392:	8a e2       	ldi	r24, 0x2A	; 42
    5394:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '9';
    5398:	80 91 50 01 	lds	r24, 0x0150
    539c:	88 2f       	mov	r24, r24
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	fc 01       	movw	r30, r24
    53a2:	ed 5a       	subi	r30, 0xAD	; 173
    53a4:	fe 4f       	sbci	r31, 0xFE	; 254
    53a6:	89 e3       	ldi	r24, 0x39	; 57
    53a8:	80 83       	st	Z, r24
				c++;
    53aa:	80 91 50 01 	lds	r24, 0x0150
    53ae:	8f 5f       	subi	r24, 0xFF	; 255
    53b0:	80 93 50 01 	sts	0x0150, r24
    53b4:	fe 01       	movw	r30, r28
    53b6:	e7 57       	subi	r30, 0x77	; 119
    53b8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ba:	80 e0       	ldi	r24, 0x00	; 0
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	ac e0       	ldi	r26, 0x0C	; 12
    53c0:	b2 e4       	ldi	r27, 0x42	; 66
    53c2:	80 83       	st	Z, r24
    53c4:	91 83       	std	Z+1, r25	; 0x01
    53c6:	a2 83       	std	Z+2, r26	; 0x02
    53c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ca:	8e 01       	movw	r16, r28
    53cc:	0b 57       	subi	r16, 0x7B	; 123
    53ce:	1f 4f       	sbci	r17, 0xFF	; 255
    53d0:	fe 01       	movw	r30, r28
    53d2:	e7 57       	subi	r30, 0x77	; 119
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	60 81       	ld	r22, Z
    53d8:	71 81       	ldd	r23, Z+1	; 0x01
    53da:	82 81       	ldd	r24, Z+2	; 0x02
    53dc:	93 81       	ldd	r25, Z+3	; 0x03
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	4a e7       	ldi	r20, 0x7A	; 122
    53e4:	55 e4       	ldi	r21, 0x45	; 69
    53e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ea:	dc 01       	movw	r26, r24
    53ec:	cb 01       	movw	r24, r22
    53ee:	f8 01       	movw	r30, r16
    53f0:	80 83       	st	Z, r24
    53f2:	91 83       	std	Z+1, r25	; 0x01
    53f4:	a2 83       	std	Z+2, r26	; 0x02
    53f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53f8:	fe 01       	movw	r30, r28
    53fa:	eb 57       	subi	r30, 0x7B	; 123
    53fc:	ff 4f       	sbci	r31, 0xFF	; 255
    53fe:	60 81       	ld	r22, Z
    5400:	71 81       	ldd	r23, Z+1	; 0x01
    5402:	82 81       	ldd	r24, Z+2	; 0x02
    5404:	93 81       	ldd	r25, Z+3	; 0x03
    5406:	20 e0       	ldi	r18, 0x00	; 0
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	40 e8       	ldi	r20, 0x80	; 128
    540c:	5f e3       	ldi	r21, 0x3F	; 63
    540e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5412:	88 23       	and	r24, r24
    5414:	44 f4       	brge	.+16     	; 0x5426 <EXTI_System+0xdb6>
		__ticks = 1;
    5416:	fe 01       	movw	r30, r28
    5418:	ed 57       	subi	r30, 0x7D	; 125
    541a:	ff 4f       	sbci	r31, 0xFF	; 255
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	91 83       	std	Z+1, r25	; 0x01
    5422:	80 83       	st	Z, r24
    5424:	64 c0       	rjmp	.+200    	; 0x54ee <EXTI_System+0xe7e>
	else if (__tmp > 65535)
    5426:	fe 01       	movw	r30, r28
    5428:	eb 57       	subi	r30, 0x7B	; 123
    542a:	ff 4f       	sbci	r31, 0xFF	; 255
    542c:	60 81       	ld	r22, Z
    542e:	71 81       	ldd	r23, Z+1	; 0x01
    5430:	82 81       	ldd	r24, Z+2	; 0x02
    5432:	93 81       	ldd	r25, Z+3	; 0x03
    5434:	20 e0       	ldi	r18, 0x00	; 0
    5436:	3f ef       	ldi	r19, 0xFF	; 255
    5438:	4f e7       	ldi	r20, 0x7F	; 127
    543a:	57 e4       	ldi	r21, 0x47	; 71
    543c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5440:	18 16       	cp	r1, r24
    5442:	0c f0       	brlt	.+2      	; 0x5446 <EXTI_System+0xdd6>
    5444:	43 c0       	rjmp	.+134    	; 0x54cc <EXTI_System+0xe5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5446:	fe 01       	movw	r30, r28
    5448:	e7 57       	subi	r30, 0x77	; 119
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	60 81       	ld	r22, Z
    544e:	71 81       	ldd	r23, Z+1	; 0x01
    5450:	82 81       	ldd	r24, Z+2	; 0x02
    5452:	93 81       	ldd	r25, Z+3	; 0x03
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	40 e2       	ldi	r20, 0x20	; 32
    545a:	51 e4       	ldi	r21, 0x41	; 65
    545c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5460:	dc 01       	movw	r26, r24
    5462:	cb 01       	movw	r24, r22
    5464:	8e 01       	movw	r16, r28
    5466:	0d 57       	subi	r16, 0x7D	; 125
    5468:	1f 4f       	sbci	r17, 0xFF	; 255
    546a:	bc 01       	movw	r22, r24
    546c:	cd 01       	movw	r24, r26
    546e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5472:	dc 01       	movw	r26, r24
    5474:	cb 01       	movw	r24, r22
    5476:	f8 01       	movw	r30, r16
    5478:	91 83       	std	Z+1, r25	; 0x01
    547a:	80 83       	st	Z, r24
    547c:	1f c0       	rjmp	.+62     	; 0x54bc <EXTI_System+0xe4c>
    547e:	fe 01       	movw	r30, r28
    5480:	ef 57       	subi	r30, 0x7F	; 127
    5482:	ff 4f       	sbci	r31, 0xFF	; 255
    5484:	80 e9       	ldi	r24, 0x90	; 144
    5486:	91 e0       	ldi	r25, 0x01	; 1
    5488:	91 83       	std	Z+1, r25	; 0x01
    548a:	80 83       	st	Z, r24
    548c:	fe 01       	movw	r30, r28
    548e:	ef 57       	subi	r30, 0x7F	; 127
    5490:	ff 4f       	sbci	r31, 0xFF	; 255
    5492:	80 81       	ld	r24, Z
    5494:	91 81       	ldd	r25, Z+1	; 0x01
    5496:	01 97       	sbiw	r24, 0x01	; 1
    5498:	f1 f7       	brne	.-4      	; 0x5496 <EXTI_System+0xe26>
    549a:	fe 01       	movw	r30, r28
    549c:	ef 57       	subi	r30, 0x7F	; 127
    549e:	ff 4f       	sbci	r31, 0xFF	; 255
    54a0:	91 83       	std	Z+1, r25	; 0x01
    54a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54a4:	de 01       	movw	r26, r28
    54a6:	ad 57       	subi	r26, 0x7D	; 125
    54a8:	bf 4f       	sbci	r27, 0xFF	; 255
    54aa:	fe 01       	movw	r30, r28
    54ac:	ed 57       	subi	r30, 0x7D	; 125
    54ae:	ff 4f       	sbci	r31, 0xFF	; 255
    54b0:	80 81       	ld	r24, Z
    54b2:	91 81       	ldd	r25, Z+1	; 0x01
    54b4:	01 97       	sbiw	r24, 0x01	; 1
    54b6:	11 96       	adiw	r26, 0x01	; 1
    54b8:	9c 93       	st	X, r25
    54ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54bc:	fe 01       	movw	r30, r28
    54be:	ed 57       	subi	r30, 0x7D	; 125
    54c0:	ff 4f       	sbci	r31, 0xFF	; 255
    54c2:	80 81       	ld	r24, Z
    54c4:	91 81       	ldd	r25, Z+1	; 0x01
    54c6:	00 97       	sbiw	r24, 0x00	; 0
    54c8:	d1 f6       	brne	.-76     	; 0x547e <EXTI_System+0xe0e>
    54ca:	28 c0       	rjmp	.+80     	; 0x551c <EXTI_System+0xeac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54cc:	8e 01       	movw	r16, r28
    54ce:	0d 57       	subi	r16, 0x7D	; 125
    54d0:	1f 4f       	sbci	r17, 0xFF	; 255
    54d2:	fe 01       	movw	r30, r28
    54d4:	eb 57       	subi	r30, 0x7B	; 123
    54d6:	ff 4f       	sbci	r31, 0xFF	; 255
    54d8:	60 81       	ld	r22, Z
    54da:	71 81       	ldd	r23, Z+1	; 0x01
    54dc:	82 81       	ldd	r24, Z+2	; 0x02
    54de:	93 81       	ldd	r25, Z+3	; 0x03
    54e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e4:	dc 01       	movw	r26, r24
    54e6:	cb 01       	movw	r24, r22
    54e8:	f8 01       	movw	r30, r16
    54ea:	91 83       	std	Z+1, r25	; 0x01
    54ec:	80 83       	st	Z, r24
    54ee:	de 01       	movw	r26, r28
    54f0:	a1 58       	subi	r26, 0x81	; 129
    54f2:	bf 4f       	sbci	r27, 0xFF	; 255
    54f4:	fe 01       	movw	r30, r28
    54f6:	ed 57       	subi	r30, 0x7D	; 125
    54f8:	ff 4f       	sbci	r31, 0xFF	; 255
    54fa:	80 81       	ld	r24, Z
    54fc:	91 81       	ldd	r25, Z+1	; 0x01
    54fe:	11 96       	adiw	r26, 0x01	; 1
    5500:	9c 93       	st	X, r25
    5502:	8e 93       	st	-X, r24
    5504:	fe 01       	movw	r30, r28
    5506:	e1 58       	subi	r30, 0x81	; 129
    5508:	ff 4f       	sbci	r31, 0xFF	; 255
    550a:	80 81       	ld	r24, Z
    550c:	91 81       	ldd	r25, Z+1	; 0x01
    550e:	01 97       	sbiw	r24, 0x01	; 1
    5510:	f1 f7       	brne	.-4      	; 0x550e <EXTI_System+0xe9e>
    5512:	fe 01       	movw	r30, r28
    5514:	e1 58       	subi	r30, 0x81	; 129
    5516:	ff 4f       	sbci	r31, 0xFF	; 255
    5518:	91 83       	std	Z+1, r25	; 0x01
    551a:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == '*'){
    551c:	fe 01       	movw	r30, r28
    551e:	ea 5f       	subi	r30, 0xFA	; 250
    5520:	fe 4f       	sbci	r31, 0xFE	; 254
    5522:	80 81       	ld	r24, Z
    5524:	8a 32       	cpi	r24, 0x2A	; 42
    5526:	09 f0       	breq	.+2      	; 0x552a <EXTI_System+0xeba>
    5528:	c5 c0       	rjmp	.+394    	; 0x56b4 <EXTI_System+0x1044>
				LCD_displayCharacter('*');
    552a:	8a e2       	ldi	r24, 0x2A	; 42
    552c:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '*';
    5530:	80 91 50 01 	lds	r24, 0x0150
    5534:	88 2f       	mov	r24, r24
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	fc 01       	movw	r30, r24
    553a:	ed 5a       	subi	r30, 0xAD	; 173
    553c:	fe 4f       	sbci	r31, 0xFE	; 254
    553e:	8a e2       	ldi	r24, 0x2A	; 42
    5540:	80 83       	st	Z, r24
				c++;
    5542:	80 91 50 01 	lds	r24, 0x0150
    5546:	8f 5f       	subi	r24, 0xFF	; 255
    5548:	80 93 50 01 	sts	0x0150, r24
    554c:	fe 01       	movw	r30, r28
    554e:	e5 58       	subi	r30, 0x85	; 133
    5550:	ff 4f       	sbci	r31, 0xFF	; 255
    5552:	80 e0       	ldi	r24, 0x00	; 0
    5554:	90 e0       	ldi	r25, 0x00	; 0
    5556:	ac e0       	ldi	r26, 0x0C	; 12
    5558:	b2 e4       	ldi	r27, 0x42	; 66
    555a:	80 83       	st	Z, r24
    555c:	91 83       	std	Z+1, r25	; 0x01
    555e:	a2 83       	std	Z+2, r26	; 0x02
    5560:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5562:	8e 01       	movw	r16, r28
    5564:	09 58       	subi	r16, 0x89	; 137
    5566:	1f 4f       	sbci	r17, 0xFF	; 255
    5568:	fe 01       	movw	r30, r28
    556a:	e5 58       	subi	r30, 0x85	; 133
    556c:	ff 4f       	sbci	r31, 0xFF	; 255
    556e:	60 81       	ld	r22, Z
    5570:	71 81       	ldd	r23, Z+1	; 0x01
    5572:	82 81       	ldd	r24, Z+2	; 0x02
    5574:	93 81       	ldd	r25, Z+3	; 0x03
    5576:	20 e0       	ldi	r18, 0x00	; 0
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	4a e7       	ldi	r20, 0x7A	; 122
    557c:	55 e4       	ldi	r21, 0x45	; 69
    557e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	f8 01       	movw	r30, r16
    5588:	80 83       	st	Z, r24
    558a:	91 83       	std	Z+1, r25	; 0x01
    558c:	a2 83       	std	Z+2, r26	; 0x02
    558e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5590:	fe 01       	movw	r30, r28
    5592:	e9 58       	subi	r30, 0x89	; 137
    5594:	ff 4f       	sbci	r31, 0xFF	; 255
    5596:	60 81       	ld	r22, Z
    5598:	71 81       	ldd	r23, Z+1	; 0x01
    559a:	82 81       	ldd	r24, Z+2	; 0x02
    559c:	93 81       	ldd	r25, Z+3	; 0x03
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	40 e8       	ldi	r20, 0x80	; 128
    55a4:	5f e3       	ldi	r21, 0x3F	; 63
    55a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55aa:	88 23       	and	r24, r24
    55ac:	44 f4       	brge	.+16     	; 0x55be <EXTI_System+0xf4e>
		__ticks = 1;
    55ae:	fe 01       	movw	r30, r28
    55b0:	eb 58       	subi	r30, 0x8B	; 139
    55b2:	ff 4f       	sbci	r31, 0xFF	; 255
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	91 83       	std	Z+1, r25	; 0x01
    55ba:	80 83       	st	Z, r24
    55bc:	64 c0       	rjmp	.+200    	; 0x5686 <EXTI_System+0x1016>
	else if (__tmp > 65535)
    55be:	fe 01       	movw	r30, r28
    55c0:	e9 58       	subi	r30, 0x89	; 137
    55c2:	ff 4f       	sbci	r31, 0xFF	; 255
    55c4:	60 81       	ld	r22, Z
    55c6:	71 81       	ldd	r23, Z+1	; 0x01
    55c8:	82 81       	ldd	r24, Z+2	; 0x02
    55ca:	93 81       	ldd	r25, Z+3	; 0x03
    55cc:	20 e0       	ldi	r18, 0x00	; 0
    55ce:	3f ef       	ldi	r19, 0xFF	; 255
    55d0:	4f e7       	ldi	r20, 0x7F	; 127
    55d2:	57 e4       	ldi	r21, 0x47	; 71
    55d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55d8:	18 16       	cp	r1, r24
    55da:	0c f0       	brlt	.+2      	; 0x55de <EXTI_System+0xf6e>
    55dc:	43 c0       	rjmp	.+134    	; 0x5664 <EXTI_System+0xff4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55de:	fe 01       	movw	r30, r28
    55e0:	e5 58       	subi	r30, 0x85	; 133
    55e2:	ff 4f       	sbci	r31, 0xFF	; 255
    55e4:	60 81       	ld	r22, Z
    55e6:	71 81       	ldd	r23, Z+1	; 0x01
    55e8:	82 81       	ldd	r24, Z+2	; 0x02
    55ea:	93 81       	ldd	r25, Z+3	; 0x03
    55ec:	20 e0       	ldi	r18, 0x00	; 0
    55ee:	30 e0       	ldi	r19, 0x00	; 0
    55f0:	40 e2       	ldi	r20, 0x20	; 32
    55f2:	51 e4       	ldi	r21, 0x41	; 65
    55f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	8e 01       	movw	r16, r28
    55fe:	0b 58       	subi	r16, 0x8B	; 139
    5600:	1f 4f       	sbci	r17, 0xFF	; 255
    5602:	bc 01       	movw	r22, r24
    5604:	cd 01       	movw	r24, r26
    5606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560a:	dc 01       	movw	r26, r24
    560c:	cb 01       	movw	r24, r22
    560e:	f8 01       	movw	r30, r16
    5610:	91 83       	std	Z+1, r25	; 0x01
    5612:	80 83       	st	Z, r24
    5614:	1f c0       	rjmp	.+62     	; 0x5654 <EXTI_System+0xfe4>
    5616:	fe 01       	movw	r30, r28
    5618:	ed 58       	subi	r30, 0x8D	; 141
    561a:	ff 4f       	sbci	r31, 0xFF	; 255
    561c:	80 e9       	ldi	r24, 0x90	; 144
    561e:	91 e0       	ldi	r25, 0x01	; 1
    5620:	91 83       	std	Z+1, r25	; 0x01
    5622:	80 83       	st	Z, r24
    5624:	fe 01       	movw	r30, r28
    5626:	ed 58       	subi	r30, 0x8D	; 141
    5628:	ff 4f       	sbci	r31, 0xFF	; 255
    562a:	80 81       	ld	r24, Z
    562c:	91 81       	ldd	r25, Z+1	; 0x01
    562e:	01 97       	sbiw	r24, 0x01	; 1
    5630:	f1 f7       	brne	.-4      	; 0x562e <EXTI_System+0xfbe>
    5632:	fe 01       	movw	r30, r28
    5634:	ed 58       	subi	r30, 0x8D	; 141
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	91 83       	std	Z+1, r25	; 0x01
    563a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    563c:	de 01       	movw	r26, r28
    563e:	ab 58       	subi	r26, 0x8B	; 139
    5640:	bf 4f       	sbci	r27, 0xFF	; 255
    5642:	fe 01       	movw	r30, r28
    5644:	eb 58       	subi	r30, 0x8B	; 139
    5646:	ff 4f       	sbci	r31, 0xFF	; 255
    5648:	80 81       	ld	r24, Z
    564a:	91 81       	ldd	r25, Z+1	; 0x01
    564c:	01 97       	sbiw	r24, 0x01	; 1
    564e:	11 96       	adiw	r26, 0x01	; 1
    5650:	9c 93       	st	X, r25
    5652:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5654:	fe 01       	movw	r30, r28
    5656:	eb 58       	subi	r30, 0x8B	; 139
    5658:	ff 4f       	sbci	r31, 0xFF	; 255
    565a:	80 81       	ld	r24, Z
    565c:	91 81       	ldd	r25, Z+1	; 0x01
    565e:	00 97       	sbiw	r24, 0x00	; 0
    5660:	d1 f6       	brne	.-76     	; 0x5616 <EXTI_System+0xfa6>
    5662:	28 c0       	rjmp	.+80     	; 0x56b4 <EXTI_System+0x1044>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5664:	8e 01       	movw	r16, r28
    5666:	0b 58       	subi	r16, 0x8B	; 139
    5668:	1f 4f       	sbci	r17, 0xFF	; 255
    566a:	fe 01       	movw	r30, r28
    566c:	e9 58       	subi	r30, 0x89	; 137
    566e:	ff 4f       	sbci	r31, 0xFF	; 255
    5670:	60 81       	ld	r22, Z
    5672:	71 81       	ldd	r23, Z+1	; 0x01
    5674:	82 81       	ldd	r24, Z+2	; 0x02
    5676:	93 81       	ldd	r25, Z+3	; 0x03
    5678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    567c:	dc 01       	movw	r26, r24
    567e:	cb 01       	movw	r24, r22
    5680:	f8 01       	movw	r30, r16
    5682:	91 83       	std	Z+1, r25	; 0x01
    5684:	80 83       	st	Z, r24
    5686:	de 01       	movw	r26, r28
    5688:	af 58       	subi	r26, 0x8F	; 143
    568a:	bf 4f       	sbci	r27, 0xFF	; 255
    568c:	fe 01       	movw	r30, r28
    568e:	eb 58       	subi	r30, 0x8B	; 139
    5690:	ff 4f       	sbci	r31, 0xFF	; 255
    5692:	80 81       	ld	r24, Z
    5694:	91 81       	ldd	r25, Z+1	; 0x01
    5696:	11 96       	adiw	r26, 0x01	; 1
    5698:	9c 93       	st	X, r25
    569a:	8e 93       	st	-X, r24
    569c:	fe 01       	movw	r30, r28
    569e:	ef 58       	subi	r30, 0x8F	; 143
    56a0:	ff 4f       	sbci	r31, 0xFF	; 255
    56a2:	80 81       	ld	r24, Z
    56a4:	91 81       	ldd	r25, Z+1	; 0x01
    56a6:	01 97       	sbiw	r24, 0x01	; 1
    56a8:	f1 f7       	brne	.-4      	; 0x56a6 <EXTI_System+0x1036>
    56aa:	fe 01       	movw	r30, r28
    56ac:	ef 58       	subi	r30, 0x8F	; 143
    56ae:	ff 4f       	sbci	r31, 0xFF	; 255
    56b0:	91 83       	std	Z+1, r25	; 0x01
    56b2:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == 0){
    56b4:	fe 01       	movw	r30, r28
    56b6:	ea 5f       	subi	r30, 0xFA	; 250
    56b8:	fe 4f       	sbci	r31, 0xFE	; 254
    56ba:	80 81       	ld	r24, Z
    56bc:	88 23       	and	r24, r24
    56be:	09 f0       	breq	.+2      	; 0x56c2 <EXTI_System+0x1052>
    56c0:	c5 c0       	rjmp	.+394    	; 0x584c <EXTI_System+0x11dc>
				LCD_displayCharacter('*');
    56c2:	8a e2       	ldi	r24, 0x2A	; 42
    56c4:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '0';
    56c8:	80 91 50 01 	lds	r24, 0x0150
    56cc:	88 2f       	mov	r24, r24
    56ce:	90 e0       	ldi	r25, 0x00	; 0
    56d0:	fc 01       	movw	r30, r24
    56d2:	ed 5a       	subi	r30, 0xAD	; 173
    56d4:	fe 4f       	sbci	r31, 0xFE	; 254
    56d6:	80 e3       	ldi	r24, 0x30	; 48
    56d8:	80 83       	st	Z, r24
				c++;
    56da:	80 91 50 01 	lds	r24, 0x0150
    56de:	8f 5f       	subi	r24, 0xFF	; 255
    56e0:	80 93 50 01 	sts	0x0150, r24
    56e4:	fe 01       	movw	r30, r28
    56e6:	e3 59       	subi	r30, 0x93	; 147
    56e8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ea:	80 e0       	ldi	r24, 0x00	; 0
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	ac e0       	ldi	r26, 0x0C	; 12
    56f0:	b2 e4       	ldi	r27, 0x42	; 66
    56f2:	80 83       	st	Z, r24
    56f4:	91 83       	std	Z+1, r25	; 0x01
    56f6:	a2 83       	std	Z+2, r26	; 0x02
    56f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56fa:	8e 01       	movw	r16, r28
    56fc:	07 59       	subi	r16, 0x97	; 151
    56fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5700:	fe 01       	movw	r30, r28
    5702:	e3 59       	subi	r30, 0x93	; 147
    5704:	ff 4f       	sbci	r31, 0xFF	; 255
    5706:	60 81       	ld	r22, Z
    5708:	71 81       	ldd	r23, Z+1	; 0x01
    570a:	82 81       	ldd	r24, Z+2	; 0x02
    570c:	93 81       	ldd	r25, Z+3	; 0x03
    570e:	20 e0       	ldi	r18, 0x00	; 0
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	4a e7       	ldi	r20, 0x7A	; 122
    5714:	55 e4       	ldi	r21, 0x45	; 69
    5716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    571a:	dc 01       	movw	r26, r24
    571c:	cb 01       	movw	r24, r22
    571e:	f8 01       	movw	r30, r16
    5720:	80 83       	st	Z, r24
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	a2 83       	std	Z+2, r26	; 0x02
    5726:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5728:	fe 01       	movw	r30, r28
    572a:	e7 59       	subi	r30, 0x97	; 151
    572c:	ff 4f       	sbci	r31, 0xFF	; 255
    572e:	60 81       	ld	r22, Z
    5730:	71 81       	ldd	r23, Z+1	; 0x01
    5732:	82 81       	ldd	r24, Z+2	; 0x02
    5734:	93 81       	ldd	r25, Z+3	; 0x03
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	40 e8       	ldi	r20, 0x80	; 128
    573c:	5f e3       	ldi	r21, 0x3F	; 63
    573e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5742:	88 23       	and	r24, r24
    5744:	44 f4       	brge	.+16     	; 0x5756 <EXTI_System+0x10e6>
		__ticks = 1;
    5746:	fe 01       	movw	r30, r28
    5748:	e9 59       	subi	r30, 0x99	; 153
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	81 e0       	ldi	r24, 0x01	; 1
    574e:	90 e0       	ldi	r25, 0x00	; 0
    5750:	91 83       	std	Z+1, r25	; 0x01
    5752:	80 83       	st	Z, r24
    5754:	64 c0       	rjmp	.+200    	; 0x581e <EXTI_System+0x11ae>
	else if (__tmp > 65535)
    5756:	fe 01       	movw	r30, r28
    5758:	e7 59       	subi	r30, 0x97	; 151
    575a:	ff 4f       	sbci	r31, 0xFF	; 255
    575c:	60 81       	ld	r22, Z
    575e:	71 81       	ldd	r23, Z+1	; 0x01
    5760:	82 81       	ldd	r24, Z+2	; 0x02
    5762:	93 81       	ldd	r25, Z+3	; 0x03
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	3f ef       	ldi	r19, 0xFF	; 255
    5768:	4f e7       	ldi	r20, 0x7F	; 127
    576a:	57 e4       	ldi	r21, 0x47	; 71
    576c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5770:	18 16       	cp	r1, r24
    5772:	0c f0       	brlt	.+2      	; 0x5776 <EXTI_System+0x1106>
    5774:	43 c0       	rjmp	.+134    	; 0x57fc <EXTI_System+0x118c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5776:	fe 01       	movw	r30, r28
    5778:	e3 59       	subi	r30, 0x93	; 147
    577a:	ff 4f       	sbci	r31, 0xFF	; 255
    577c:	60 81       	ld	r22, Z
    577e:	71 81       	ldd	r23, Z+1	; 0x01
    5780:	82 81       	ldd	r24, Z+2	; 0x02
    5782:	93 81       	ldd	r25, Z+3	; 0x03
    5784:	20 e0       	ldi	r18, 0x00	; 0
    5786:	30 e0       	ldi	r19, 0x00	; 0
    5788:	40 e2       	ldi	r20, 0x20	; 32
    578a:	51 e4       	ldi	r21, 0x41	; 65
    578c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5790:	dc 01       	movw	r26, r24
    5792:	cb 01       	movw	r24, r22
    5794:	8e 01       	movw	r16, r28
    5796:	09 59       	subi	r16, 0x99	; 153
    5798:	1f 4f       	sbci	r17, 0xFF	; 255
    579a:	bc 01       	movw	r22, r24
    579c:	cd 01       	movw	r24, r26
    579e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57a2:	dc 01       	movw	r26, r24
    57a4:	cb 01       	movw	r24, r22
    57a6:	f8 01       	movw	r30, r16
    57a8:	91 83       	std	Z+1, r25	; 0x01
    57aa:	80 83       	st	Z, r24
    57ac:	1f c0       	rjmp	.+62     	; 0x57ec <EXTI_System+0x117c>
    57ae:	fe 01       	movw	r30, r28
    57b0:	eb 59       	subi	r30, 0x9B	; 155
    57b2:	ff 4f       	sbci	r31, 0xFF	; 255
    57b4:	80 e9       	ldi	r24, 0x90	; 144
    57b6:	91 e0       	ldi	r25, 0x01	; 1
    57b8:	91 83       	std	Z+1, r25	; 0x01
    57ba:	80 83       	st	Z, r24
    57bc:	fe 01       	movw	r30, r28
    57be:	eb 59       	subi	r30, 0x9B	; 155
    57c0:	ff 4f       	sbci	r31, 0xFF	; 255
    57c2:	80 81       	ld	r24, Z
    57c4:	91 81       	ldd	r25, Z+1	; 0x01
    57c6:	01 97       	sbiw	r24, 0x01	; 1
    57c8:	f1 f7       	brne	.-4      	; 0x57c6 <EXTI_System+0x1156>
    57ca:	fe 01       	movw	r30, r28
    57cc:	eb 59       	subi	r30, 0x9B	; 155
    57ce:	ff 4f       	sbci	r31, 0xFF	; 255
    57d0:	91 83       	std	Z+1, r25	; 0x01
    57d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57d4:	de 01       	movw	r26, r28
    57d6:	a9 59       	subi	r26, 0x99	; 153
    57d8:	bf 4f       	sbci	r27, 0xFF	; 255
    57da:	fe 01       	movw	r30, r28
    57dc:	e9 59       	subi	r30, 0x99	; 153
    57de:	ff 4f       	sbci	r31, 0xFF	; 255
    57e0:	80 81       	ld	r24, Z
    57e2:	91 81       	ldd	r25, Z+1	; 0x01
    57e4:	01 97       	sbiw	r24, 0x01	; 1
    57e6:	11 96       	adiw	r26, 0x01	; 1
    57e8:	9c 93       	st	X, r25
    57ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57ec:	fe 01       	movw	r30, r28
    57ee:	e9 59       	subi	r30, 0x99	; 153
    57f0:	ff 4f       	sbci	r31, 0xFF	; 255
    57f2:	80 81       	ld	r24, Z
    57f4:	91 81       	ldd	r25, Z+1	; 0x01
    57f6:	00 97       	sbiw	r24, 0x00	; 0
    57f8:	d1 f6       	brne	.-76     	; 0x57ae <EXTI_System+0x113e>
    57fa:	28 c0       	rjmp	.+80     	; 0x584c <EXTI_System+0x11dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57fc:	8e 01       	movw	r16, r28
    57fe:	09 59       	subi	r16, 0x99	; 153
    5800:	1f 4f       	sbci	r17, 0xFF	; 255
    5802:	fe 01       	movw	r30, r28
    5804:	e7 59       	subi	r30, 0x97	; 151
    5806:	ff 4f       	sbci	r31, 0xFF	; 255
    5808:	60 81       	ld	r22, Z
    580a:	71 81       	ldd	r23, Z+1	; 0x01
    580c:	82 81       	ldd	r24, Z+2	; 0x02
    580e:	93 81       	ldd	r25, Z+3	; 0x03
    5810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5814:	dc 01       	movw	r26, r24
    5816:	cb 01       	movw	r24, r22
    5818:	f8 01       	movw	r30, r16
    581a:	91 83       	std	Z+1, r25	; 0x01
    581c:	80 83       	st	Z, r24
    581e:	de 01       	movw	r26, r28
    5820:	ad 59       	subi	r26, 0x9D	; 157
    5822:	bf 4f       	sbci	r27, 0xFF	; 255
    5824:	fe 01       	movw	r30, r28
    5826:	e9 59       	subi	r30, 0x99	; 153
    5828:	ff 4f       	sbci	r31, 0xFF	; 255
    582a:	80 81       	ld	r24, Z
    582c:	91 81       	ldd	r25, Z+1	; 0x01
    582e:	11 96       	adiw	r26, 0x01	; 1
    5830:	9c 93       	st	X, r25
    5832:	8e 93       	st	-X, r24
    5834:	fe 01       	movw	r30, r28
    5836:	ed 59       	subi	r30, 0x9D	; 157
    5838:	ff 4f       	sbci	r31, 0xFF	; 255
    583a:	80 81       	ld	r24, Z
    583c:	91 81       	ldd	r25, Z+1	; 0x01
    583e:	01 97       	sbiw	r24, 0x01	; 1
    5840:	f1 f7       	brne	.-4      	; 0x583e <EXTI_System+0x11ce>
    5842:	fe 01       	movw	r30, r28
    5844:	ed 59       	subi	r30, 0x9D	; 157
    5846:	ff 4f       	sbci	r31, 0xFF	; 255
    5848:	91 83       	std	Z+1, r25	; 0x01
    584a:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(key_Pressed == '#'){
    584c:	fe 01       	movw	r30, r28
    584e:	ea 5f       	subi	r30, 0xFA	; 250
    5850:	fe 4f       	sbci	r31, 0xFE	; 254
    5852:	80 81       	ld	r24, Z
    5854:	83 32       	cpi	r24, 0x23	; 35
    5856:	09 f0       	breq	.+2      	; 0x585a <EXTI_System+0x11ea>
    5858:	c5 c0       	rjmp	.+394    	; 0x59e4 <EXTI_System+0x1374>
				LCD_displayCharacter('*');
    585a:	8a e2       	ldi	r24, 0x2A	; 42
    585c:	0e 94 dd 19 	call	0x33ba	; 0x33ba <LCD_displayCharacter>
				pressed_Keys[c] = '#';
    5860:	80 91 50 01 	lds	r24, 0x0150
    5864:	88 2f       	mov	r24, r24
    5866:	90 e0       	ldi	r25, 0x00	; 0
    5868:	fc 01       	movw	r30, r24
    586a:	ed 5a       	subi	r30, 0xAD	; 173
    586c:	fe 4f       	sbci	r31, 0xFE	; 254
    586e:	83 e2       	ldi	r24, 0x23	; 35
    5870:	80 83       	st	Z, r24
				c++;
    5872:	80 91 50 01 	lds	r24, 0x0150
    5876:	8f 5f       	subi	r24, 0xFF	; 255
    5878:	80 93 50 01 	sts	0x0150, r24
    587c:	fe 01       	movw	r30, r28
    587e:	e1 5a       	subi	r30, 0xA1	; 161
    5880:	ff 4f       	sbci	r31, 0xFF	; 255
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	ac e0       	ldi	r26, 0x0C	; 12
    5888:	b2 e4       	ldi	r27, 0x42	; 66
    588a:	80 83       	st	Z, r24
    588c:	91 83       	std	Z+1, r25	; 0x01
    588e:	a2 83       	std	Z+2, r26	; 0x02
    5890:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5892:	8e 01       	movw	r16, r28
    5894:	05 5a       	subi	r16, 0xA5	; 165
    5896:	1f 4f       	sbci	r17, 0xFF	; 255
    5898:	fe 01       	movw	r30, r28
    589a:	e1 5a       	subi	r30, 0xA1	; 161
    589c:	ff 4f       	sbci	r31, 0xFF	; 255
    589e:	60 81       	ld	r22, Z
    58a0:	71 81       	ldd	r23, Z+1	; 0x01
    58a2:	82 81       	ldd	r24, Z+2	; 0x02
    58a4:	93 81       	ldd	r25, Z+3	; 0x03
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	4a e7       	ldi	r20, 0x7A	; 122
    58ac:	55 e4       	ldi	r21, 0x45	; 69
    58ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	f8 01       	movw	r30, r16
    58b8:	80 83       	st	Z, r24
    58ba:	91 83       	std	Z+1, r25	; 0x01
    58bc:	a2 83       	std	Z+2, r26	; 0x02
    58be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58c0:	fe 01       	movw	r30, r28
    58c2:	e5 5a       	subi	r30, 0xA5	; 165
    58c4:	ff 4f       	sbci	r31, 0xFF	; 255
    58c6:	60 81       	ld	r22, Z
    58c8:	71 81       	ldd	r23, Z+1	; 0x01
    58ca:	82 81       	ldd	r24, Z+2	; 0x02
    58cc:	93 81       	ldd	r25, Z+3	; 0x03
    58ce:	20 e0       	ldi	r18, 0x00	; 0
    58d0:	30 e0       	ldi	r19, 0x00	; 0
    58d2:	40 e8       	ldi	r20, 0x80	; 128
    58d4:	5f e3       	ldi	r21, 0x3F	; 63
    58d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    58da:	88 23       	and	r24, r24
    58dc:	44 f4       	brge	.+16     	; 0x58ee <EXTI_System+0x127e>
		__ticks = 1;
    58de:	fe 01       	movw	r30, r28
    58e0:	e7 5a       	subi	r30, 0xA7	; 167
    58e2:	ff 4f       	sbci	r31, 0xFF	; 255
    58e4:	81 e0       	ldi	r24, 0x01	; 1
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	91 83       	std	Z+1, r25	; 0x01
    58ea:	80 83       	st	Z, r24
    58ec:	64 c0       	rjmp	.+200    	; 0x59b6 <EXTI_System+0x1346>
	else if (__tmp > 65535)
    58ee:	fe 01       	movw	r30, r28
    58f0:	e5 5a       	subi	r30, 0xA5	; 165
    58f2:	ff 4f       	sbci	r31, 0xFF	; 255
    58f4:	60 81       	ld	r22, Z
    58f6:	71 81       	ldd	r23, Z+1	; 0x01
    58f8:	82 81       	ldd	r24, Z+2	; 0x02
    58fa:	93 81       	ldd	r25, Z+3	; 0x03
    58fc:	20 e0       	ldi	r18, 0x00	; 0
    58fe:	3f ef       	ldi	r19, 0xFF	; 255
    5900:	4f e7       	ldi	r20, 0x7F	; 127
    5902:	57 e4       	ldi	r21, 0x47	; 71
    5904:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5908:	18 16       	cp	r1, r24
    590a:	0c f0       	brlt	.+2      	; 0x590e <EXTI_System+0x129e>
    590c:	43 c0       	rjmp	.+134    	; 0x5994 <EXTI_System+0x1324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    590e:	fe 01       	movw	r30, r28
    5910:	e1 5a       	subi	r30, 0xA1	; 161
    5912:	ff 4f       	sbci	r31, 0xFF	; 255
    5914:	60 81       	ld	r22, Z
    5916:	71 81       	ldd	r23, Z+1	; 0x01
    5918:	82 81       	ldd	r24, Z+2	; 0x02
    591a:	93 81       	ldd	r25, Z+3	; 0x03
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	40 e2       	ldi	r20, 0x20	; 32
    5922:	51 e4       	ldi	r21, 0x41	; 65
    5924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5928:	dc 01       	movw	r26, r24
    592a:	cb 01       	movw	r24, r22
    592c:	8e 01       	movw	r16, r28
    592e:	07 5a       	subi	r16, 0xA7	; 167
    5930:	1f 4f       	sbci	r17, 0xFF	; 255
    5932:	bc 01       	movw	r22, r24
    5934:	cd 01       	movw	r24, r26
    5936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    593a:	dc 01       	movw	r26, r24
    593c:	cb 01       	movw	r24, r22
    593e:	f8 01       	movw	r30, r16
    5940:	91 83       	std	Z+1, r25	; 0x01
    5942:	80 83       	st	Z, r24
    5944:	1f c0       	rjmp	.+62     	; 0x5984 <EXTI_System+0x1314>
    5946:	fe 01       	movw	r30, r28
    5948:	e9 5a       	subi	r30, 0xA9	; 169
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	80 e9       	ldi	r24, 0x90	; 144
    594e:	91 e0       	ldi	r25, 0x01	; 1
    5950:	91 83       	std	Z+1, r25	; 0x01
    5952:	80 83       	st	Z, r24
    5954:	fe 01       	movw	r30, r28
    5956:	e9 5a       	subi	r30, 0xA9	; 169
    5958:	ff 4f       	sbci	r31, 0xFF	; 255
    595a:	80 81       	ld	r24, Z
    595c:	91 81       	ldd	r25, Z+1	; 0x01
    595e:	01 97       	sbiw	r24, 0x01	; 1
    5960:	f1 f7       	brne	.-4      	; 0x595e <EXTI_System+0x12ee>
    5962:	fe 01       	movw	r30, r28
    5964:	e9 5a       	subi	r30, 0xA9	; 169
    5966:	ff 4f       	sbci	r31, 0xFF	; 255
    5968:	91 83       	std	Z+1, r25	; 0x01
    596a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    596c:	de 01       	movw	r26, r28
    596e:	a7 5a       	subi	r26, 0xA7	; 167
    5970:	bf 4f       	sbci	r27, 0xFF	; 255
    5972:	fe 01       	movw	r30, r28
    5974:	e7 5a       	subi	r30, 0xA7	; 167
    5976:	ff 4f       	sbci	r31, 0xFF	; 255
    5978:	80 81       	ld	r24, Z
    597a:	91 81       	ldd	r25, Z+1	; 0x01
    597c:	01 97       	sbiw	r24, 0x01	; 1
    597e:	11 96       	adiw	r26, 0x01	; 1
    5980:	9c 93       	st	X, r25
    5982:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5984:	fe 01       	movw	r30, r28
    5986:	e7 5a       	subi	r30, 0xA7	; 167
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	80 81       	ld	r24, Z
    598c:	91 81       	ldd	r25, Z+1	; 0x01
    598e:	00 97       	sbiw	r24, 0x00	; 0
    5990:	d1 f6       	brne	.-76     	; 0x5946 <EXTI_System+0x12d6>
    5992:	28 c0       	rjmp	.+80     	; 0x59e4 <EXTI_System+0x1374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5994:	8e 01       	movw	r16, r28
    5996:	07 5a       	subi	r16, 0xA7	; 167
    5998:	1f 4f       	sbci	r17, 0xFF	; 255
    599a:	fe 01       	movw	r30, r28
    599c:	e5 5a       	subi	r30, 0xA5	; 165
    599e:	ff 4f       	sbci	r31, 0xFF	; 255
    59a0:	60 81       	ld	r22, Z
    59a2:	71 81       	ldd	r23, Z+1	; 0x01
    59a4:	82 81       	ldd	r24, Z+2	; 0x02
    59a6:	93 81       	ldd	r25, Z+3	; 0x03
    59a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59ac:	dc 01       	movw	r26, r24
    59ae:	cb 01       	movw	r24, r22
    59b0:	f8 01       	movw	r30, r16
    59b2:	91 83       	std	Z+1, r25	; 0x01
    59b4:	80 83       	st	Z, r24
    59b6:	de 01       	movw	r26, r28
    59b8:	ab 5a       	subi	r26, 0xAB	; 171
    59ba:	bf 4f       	sbci	r27, 0xFF	; 255
    59bc:	fe 01       	movw	r30, r28
    59be:	e7 5a       	subi	r30, 0xA7	; 167
    59c0:	ff 4f       	sbci	r31, 0xFF	; 255
    59c2:	80 81       	ld	r24, Z
    59c4:	91 81       	ldd	r25, Z+1	; 0x01
    59c6:	11 96       	adiw	r26, 0x01	; 1
    59c8:	9c 93       	st	X, r25
    59ca:	8e 93       	st	-X, r24
    59cc:	fe 01       	movw	r30, r28
    59ce:	eb 5a       	subi	r30, 0xAB	; 171
    59d0:	ff 4f       	sbci	r31, 0xFF	; 255
    59d2:	80 81       	ld	r24, Z
    59d4:	91 81       	ldd	r25, Z+1	; 0x01
    59d6:	01 97       	sbiw	r24, 0x01	; 1
    59d8:	f1 f7       	brne	.-4      	; 0x59d6 <EXTI_System+0x1366>
    59da:	fe 01       	movw	r30, r28
    59dc:	eb 5a       	subi	r30, 0xAB	; 171
    59de:	ff 4f       	sbci	r31, 0xFF	; 255
    59e0:	91 83       	std	Z+1, r25	; 0x01
    59e2:	80 83       	st	Z, r24
				_delay_ms(35);
			}

			if(c == Password_Length){
    59e4:	80 91 50 01 	lds	r24, 0x0150
    59e8:	84 30       	cpi	r24, 0x04	; 4
    59ea:	11 f0       	breq	.+4      	; 0x59f0 <EXTI_System+0x1380>
    59ec:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <EXTI_System+0x48>
				for(int i = 0; i < 5; i++){
    59f0:	fe 01       	movw	r30, r28
    59f2:	ec 5f       	subi	r30, 0xFC	; 252
    59f4:	fe 4f       	sbci	r31, 0xFE	; 254
    59f6:	11 82       	std	Z+1, r1	; 0x01
    59f8:	10 82       	st	Z, r1
    59fa:	fe 01       	movw	r30, r28
    59fc:	ec 5f       	subi	r30, 0xFC	; 252
    59fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5a00:	80 81       	ld	r24, Z
    5a02:	91 81       	ldd	r25, Z+1	; 0x01
    5a04:	85 30       	cpi	r24, 0x05	; 5
    5a06:	91 05       	cpc	r25, r1
    5a08:	14 f0       	brlt	.+4      	; 0x5a0e <EXTI_System+0x139e>
    5a0a:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <EXTI_System+0x48>
					if(pressed_Keys[i] == password[i]){
    5a0e:	fe 01       	movw	r30, r28
    5a10:	ec 5f       	subi	r30, 0xFC	; 252
    5a12:	fe 4f       	sbci	r31, 0xFE	; 254
    5a14:	80 81       	ld	r24, Z
    5a16:	91 81       	ldd	r25, Z+1	; 0x01
    5a18:	fc 01       	movw	r30, r24
    5a1a:	ed 5a       	subi	r30, 0xAD	; 173
    5a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    5a1e:	20 81       	ld	r18, Z
    5a20:	fe 01       	movw	r30, r28
    5a22:	ec 5f       	subi	r30, 0xFC	; 252
    5a24:	fe 4f       	sbci	r31, 0xFE	; 254
    5a26:	80 81       	ld	r24, Z
    5a28:	91 81       	ldd	r25, Z+1	; 0x01
    5a2a:	fc 01       	movw	r30, r24
    5a2c:	ed 5d       	subi	r30, 0xDD	; 221
    5a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    5a30:	80 81       	ld	r24, Z
    5a32:	28 17       	cp	r18, r24
    5a34:	09 f0       	breq	.+2      	; 0x5a38 <EXTI_System+0x13c8>
    5a36:	32 c4       	rjmp	.+2148   	; 0x629c <EXTI_System+0x1c2c>
						LCD_ClearScreen();
    5a38:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
						LCD_displayString("Correct Password");
    5a3c:	84 ec       	ldi	r24, 0xC4	; 196
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
    5a44:	fe 01       	movw	r30, r28
    5a46:	ef 5a       	subi	r30, 0xAF	; 175
    5a48:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4a:	80 e0       	ldi	r24, 0x00	; 0
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	ac e0       	ldi	r26, 0x0C	; 12
    5a50:	b2 e4       	ldi	r27, 0x42	; 66
    5a52:	80 83       	st	Z, r24
    5a54:	91 83       	std	Z+1, r25	; 0x01
    5a56:	a2 83       	std	Z+2, r26	; 0x02
    5a58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a5a:	8e 01       	movw	r16, r28
    5a5c:	03 5b       	subi	r16, 0xB3	; 179
    5a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a60:	fe 01       	movw	r30, r28
    5a62:	ef 5a       	subi	r30, 0xAF	; 175
    5a64:	ff 4f       	sbci	r31, 0xFF	; 255
    5a66:	60 81       	ld	r22, Z
    5a68:	71 81       	ldd	r23, Z+1	; 0x01
    5a6a:	82 81       	ldd	r24, Z+2	; 0x02
    5a6c:	93 81       	ldd	r25, Z+3	; 0x03
    5a6e:	20 e0       	ldi	r18, 0x00	; 0
    5a70:	30 e0       	ldi	r19, 0x00	; 0
    5a72:	4a e7       	ldi	r20, 0x7A	; 122
    5a74:	55 e4       	ldi	r21, 0x45	; 69
    5a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a7a:	dc 01       	movw	r26, r24
    5a7c:	cb 01       	movw	r24, r22
    5a7e:	f8 01       	movw	r30, r16
    5a80:	80 83       	st	Z, r24
    5a82:	91 83       	std	Z+1, r25	; 0x01
    5a84:	a2 83       	std	Z+2, r26	; 0x02
    5a86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a88:	fe 01       	movw	r30, r28
    5a8a:	e3 5b       	subi	r30, 0xB3	; 179
    5a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a8e:	60 81       	ld	r22, Z
    5a90:	71 81       	ldd	r23, Z+1	; 0x01
    5a92:	82 81       	ldd	r24, Z+2	; 0x02
    5a94:	93 81       	ldd	r25, Z+3	; 0x03
    5a96:	20 e0       	ldi	r18, 0x00	; 0
    5a98:	30 e0       	ldi	r19, 0x00	; 0
    5a9a:	40 e8       	ldi	r20, 0x80	; 128
    5a9c:	5f e3       	ldi	r21, 0x3F	; 63
    5a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5aa2:	88 23       	and	r24, r24
    5aa4:	44 f4       	brge	.+16     	; 0x5ab6 <EXTI_System+0x1446>
		__ticks = 1;
    5aa6:	fe 01       	movw	r30, r28
    5aa8:	e5 5b       	subi	r30, 0xB5	; 181
    5aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    5aac:	81 e0       	ldi	r24, 0x01	; 1
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	91 83       	std	Z+1, r25	; 0x01
    5ab2:	80 83       	st	Z, r24
    5ab4:	64 c0       	rjmp	.+200    	; 0x5b7e <EXTI_System+0x150e>
	else if (__tmp > 65535)
    5ab6:	fe 01       	movw	r30, r28
    5ab8:	e3 5b       	subi	r30, 0xB3	; 179
    5aba:	ff 4f       	sbci	r31, 0xFF	; 255
    5abc:	60 81       	ld	r22, Z
    5abe:	71 81       	ldd	r23, Z+1	; 0x01
    5ac0:	82 81       	ldd	r24, Z+2	; 0x02
    5ac2:	93 81       	ldd	r25, Z+3	; 0x03
    5ac4:	20 e0       	ldi	r18, 0x00	; 0
    5ac6:	3f ef       	ldi	r19, 0xFF	; 255
    5ac8:	4f e7       	ldi	r20, 0x7F	; 127
    5aca:	57 e4       	ldi	r21, 0x47	; 71
    5acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ad0:	18 16       	cp	r1, r24
    5ad2:	0c f0       	brlt	.+2      	; 0x5ad6 <EXTI_System+0x1466>
    5ad4:	43 c0       	rjmp	.+134    	; 0x5b5c <EXTI_System+0x14ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ad6:	fe 01       	movw	r30, r28
    5ad8:	ef 5a       	subi	r30, 0xAF	; 175
    5ada:	ff 4f       	sbci	r31, 0xFF	; 255
    5adc:	60 81       	ld	r22, Z
    5ade:	71 81       	ldd	r23, Z+1	; 0x01
    5ae0:	82 81       	ldd	r24, Z+2	; 0x02
    5ae2:	93 81       	ldd	r25, Z+3	; 0x03
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	40 e2       	ldi	r20, 0x20	; 32
    5aea:	51 e4       	ldi	r21, 0x41	; 65
    5aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5af0:	dc 01       	movw	r26, r24
    5af2:	cb 01       	movw	r24, r22
    5af4:	8e 01       	movw	r16, r28
    5af6:	05 5b       	subi	r16, 0xB5	; 181
    5af8:	1f 4f       	sbci	r17, 0xFF	; 255
    5afa:	bc 01       	movw	r22, r24
    5afc:	cd 01       	movw	r24, r26
    5afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b02:	dc 01       	movw	r26, r24
    5b04:	cb 01       	movw	r24, r22
    5b06:	f8 01       	movw	r30, r16
    5b08:	91 83       	std	Z+1, r25	; 0x01
    5b0a:	80 83       	st	Z, r24
    5b0c:	1f c0       	rjmp	.+62     	; 0x5b4c <EXTI_System+0x14dc>
    5b0e:	fe 01       	movw	r30, r28
    5b10:	e7 5b       	subi	r30, 0xB7	; 183
    5b12:	ff 4f       	sbci	r31, 0xFF	; 255
    5b14:	80 e9       	ldi	r24, 0x90	; 144
    5b16:	91 e0       	ldi	r25, 0x01	; 1
    5b18:	91 83       	std	Z+1, r25	; 0x01
    5b1a:	80 83       	st	Z, r24
    5b1c:	fe 01       	movw	r30, r28
    5b1e:	e7 5b       	subi	r30, 0xB7	; 183
    5b20:	ff 4f       	sbci	r31, 0xFF	; 255
    5b22:	80 81       	ld	r24, Z
    5b24:	91 81       	ldd	r25, Z+1	; 0x01
    5b26:	01 97       	sbiw	r24, 0x01	; 1
    5b28:	f1 f7       	brne	.-4      	; 0x5b26 <EXTI_System+0x14b6>
    5b2a:	fe 01       	movw	r30, r28
    5b2c:	e7 5b       	subi	r30, 0xB7	; 183
    5b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b30:	91 83       	std	Z+1, r25	; 0x01
    5b32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b34:	de 01       	movw	r26, r28
    5b36:	a5 5b       	subi	r26, 0xB5	; 181
    5b38:	bf 4f       	sbci	r27, 0xFF	; 255
    5b3a:	fe 01       	movw	r30, r28
    5b3c:	e5 5b       	subi	r30, 0xB5	; 181
    5b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b40:	80 81       	ld	r24, Z
    5b42:	91 81       	ldd	r25, Z+1	; 0x01
    5b44:	01 97       	sbiw	r24, 0x01	; 1
    5b46:	11 96       	adiw	r26, 0x01	; 1
    5b48:	9c 93       	st	X, r25
    5b4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b4c:	fe 01       	movw	r30, r28
    5b4e:	e5 5b       	subi	r30, 0xB5	; 181
    5b50:	ff 4f       	sbci	r31, 0xFF	; 255
    5b52:	80 81       	ld	r24, Z
    5b54:	91 81       	ldd	r25, Z+1	; 0x01
    5b56:	00 97       	sbiw	r24, 0x00	; 0
    5b58:	d1 f6       	brne	.-76     	; 0x5b0e <EXTI_System+0x149e>
    5b5a:	27 c0       	rjmp	.+78     	; 0x5baa <EXTI_System+0x153a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b5c:	8e 01       	movw	r16, r28
    5b5e:	05 5b       	subi	r16, 0xB5	; 181
    5b60:	1f 4f       	sbci	r17, 0xFF	; 255
    5b62:	fe 01       	movw	r30, r28
    5b64:	e3 5b       	subi	r30, 0xB3	; 179
    5b66:	ff 4f       	sbci	r31, 0xFF	; 255
    5b68:	60 81       	ld	r22, Z
    5b6a:	71 81       	ldd	r23, Z+1	; 0x01
    5b6c:	82 81       	ldd	r24, Z+2	; 0x02
    5b6e:	93 81       	ldd	r25, Z+3	; 0x03
    5b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b74:	dc 01       	movw	r26, r24
    5b76:	cb 01       	movw	r24, r22
    5b78:	f8 01       	movw	r30, r16
    5b7a:	91 83       	std	Z+1, r25	; 0x01
    5b7c:	80 83       	st	Z, r24
    5b7e:	de 01       	movw	r26, r28
    5b80:	a9 5b       	subi	r26, 0xB9	; 185
    5b82:	bf 4f       	sbci	r27, 0xFF	; 255
    5b84:	fe 01       	movw	r30, r28
    5b86:	e5 5b       	subi	r30, 0xB5	; 181
    5b88:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8a:	80 81       	ld	r24, Z
    5b8c:	91 81       	ldd	r25, Z+1	; 0x01
    5b8e:	8d 93       	st	X+, r24
    5b90:	9c 93       	st	X, r25
    5b92:	fe 01       	movw	r30, r28
    5b94:	e9 5b       	subi	r30, 0xB9	; 185
    5b96:	ff 4f       	sbci	r31, 0xFF	; 255
    5b98:	80 81       	ld	r24, Z
    5b9a:	91 81       	ldd	r25, Z+1	; 0x01
    5b9c:	01 97       	sbiw	r24, 0x01	; 1
    5b9e:	f1 f7       	brne	.-4      	; 0x5b9c <EXTI_System+0x152c>
    5ba0:	fe 01       	movw	r30, r28
    5ba2:	e9 5b       	subi	r30, 0xB9	; 185
    5ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba6:	91 83       	std	Z+1, r25	; 0x01
    5ba8:	80 83       	st	Z, r24
						_delay_ms(35);
						LCD_ClearScreen();
    5baa:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>

						// Dc Motor

						LCD_displayString("Welcome to Motor");
    5bae:	85 ed       	ldi	r24, 0xD5	; 213
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
						LCD_GoToXY(1, 0);
    5bb6:	81 e0       	ldi	r24, 0x01	; 1
    5bb8:	60 e0       	ldi	r22, 0x00	; 0
    5bba:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <LCD_GoToXY>
						LCD_displayString("DachBoard");
    5bbe:	86 ee       	ldi	r24, 0xE6	; 230
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
						First_Screen();
    5bc6:	0e 94 38 22 	call	0x4470	; 0x4470 <First_Screen>

						while(1){
							u8 key_Motor = Keypad_GetPressedKey();
    5bca:	0e 94 cb 20 	call	0x4196	; 0x4196 <Keypad_GetPressedKey>
    5bce:	fe 01       	movw	r30, r28
    5bd0:	ed 5f       	subi	r30, 0xFD	; 253
    5bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    5bd4:	80 83       	st	Z, r24
							if(key_Motor == 1){
    5bd6:	fe 01       	movw	r30, r28
    5bd8:	ed 5f       	subi	r30, 0xFD	; 253
    5bda:	fe 4f       	sbci	r31, 0xFE	; 254
    5bdc:	80 81       	ld	r24, Z
    5bde:	81 30       	cpi	r24, 0x01	; 1
    5be0:	09 f0       	breq	.+2      	; 0x5be4 <EXTI_System+0x1574>
    5be2:	c8 c2       	rjmp	.+1424   	; 0x6174 <EXTI_System+0x1b04>
								Second_Screen();
    5be4:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <Second_Screen>
    5be8:	fe 01       	movw	r30, r28
    5bea:	ed 5b       	subi	r30, 0xBD	; 189
    5bec:	ff 4f       	sbci	r31, 0xFF	; 255
    5bee:	80 e0       	ldi	r24, 0x00	; 0
    5bf0:	90 e0       	ldi	r25, 0x00	; 0
    5bf2:	ac e0       	ldi	r26, 0x0C	; 12
    5bf4:	b2 e4       	ldi	r27, 0x42	; 66
    5bf6:	80 83       	st	Z, r24
    5bf8:	91 83       	std	Z+1, r25	; 0x01
    5bfa:	a2 83       	std	Z+2, r26	; 0x02
    5bfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bfe:	8e 01       	movw	r16, r28
    5c00:	01 5c       	subi	r16, 0xC1	; 193
    5c02:	1f 4f       	sbci	r17, 0xFF	; 255
    5c04:	fe 01       	movw	r30, r28
    5c06:	ed 5b       	subi	r30, 0xBD	; 189
    5c08:	ff 4f       	sbci	r31, 0xFF	; 255
    5c0a:	60 81       	ld	r22, Z
    5c0c:	71 81       	ldd	r23, Z+1	; 0x01
    5c0e:	82 81       	ldd	r24, Z+2	; 0x02
    5c10:	93 81       	ldd	r25, Z+3	; 0x03
    5c12:	20 e0       	ldi	r18, 0x00	; 0
    5c14:	30 e0       	ldi	r19, 0x00	; 0
    5c16:	4a e7       	ldi	r20, 0x7A	; 122
    5c18:	55 e4       	ldi	r21, 0x45	; 69
    5c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c1e:	dc 01       	movw	r26, r24
    5c20:	cb 01       	movw	r24, r22
    5c22:	f8 01       	movw	r30, r16
    5c24:	80 83       	st	Z, r24
    5c26:	91 83       	std	Z+1, r25	; 0x01
    5c28:	a2 83       	std	Z+2, r26	; 0x02
    5c2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c2c:	fe 01       	movw	r30, r28
    5c2e:	ff 96       	adiw	r30, 0x3f	; 63
    5c30:	60 81       	ld	r22, Z
    5c32:	71 81       	ldd	r23, Z+1	; 0x01
    5c34:	82 81       	ldd	r24, Z+2	; 0x02
    5c36:	93 81       	ldd	r25, Z+3	; 0x03
    5c38:	20 e0       	ldi	r18, 0x00	; 0
    5c3a:	30 e0       	ldi	r19, 0x00	; 0
    5c3c:	40 e8       	ldi	r20, 0x80	; 128
    5c3e:	5f e3       	ldi	r21, 0x3F	; 63
    5c40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c44:	88 23       	and	r24, r24
    5c46:	2c f4       	brge	.+10     	; 0x5c52 <EXTI_System+0x15e2>
		__ticks = 1;
    5c48:	81 e0       	ldi	r24, 0x01	; 1
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	9e af       	std	Y+62, r25	; 0x3e
    5c4e:	8d af       	std	Y+61, r24	; 0x3d
    5c50:	46 c0       	rjmp	.+140    	; 0x5cde <EXTI_System+0x166e>
	else if (__tmp > 65535)
    5c52:	fe 01       	movw	r30, r28
    5c54:	ff 96       	adiw	r30, 0x3f	; 63
    5c56:	60 81       	ld	r22, Z
    5c58:	71 81       	ldd	r23, Z+1	; 0x01
    5c5a:	82 81       	ldd	r24, Z+2	; 0x02
    5c5c:	93 81       	ldd	r25, Z+3	; 0x03
    5c5e:	20 e0       	ldi	r18, 0x00	; 0
    5c60:	3f ef       	ldi	r19, 0xFF	; 255
    5c62:	4f e7       	ldi	r20, 0x7F	; 127
    5c64:	57 e4       	ldi	r21, 0x47	; 71
    5c66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c6a:	18 16       	cp	r1, r24
    5c6c:	64 f5       	brge	.+88     	; 0x5cc6 <EXTI_System+0x1656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c6e:	fe 01       	movw	r30, r28
    5c70:	ed 5b       	subi	r30, 0xBD	; 189
    5c72:	ff 4f       	sbci	r31, 0xFF	; 255
    5c74:	60 81       	ld	r22, Z
    5c76:	71 81       	ldd	r23, Z+1	; 0x01
    5c78:	82 81       	ldd	r24, Z+2	; 0x02
    5c7a:	93 81       	ldd	r25, Z+3	; 0x03
    5c7c:	20 e0       	ldi	r18, 0x00	; 0
    5c7e:	30 e0       	ldi	r19, 0x00	; 0
    5c80:	40 e2       	ldi	r20, 0x20	; 32
    5c82:	51 e4       	ldi	r21, 0x41	; 65
    5c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c88:	dc 01       	movw	r26, r24
    5c8a:	cb 01       	movw	r24, r22
    5c8c:	bc 01       	movw	r22, r24
    5c8e:	cd 01       	movw	r24, r26
    5c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c94:	dc 01       	movw	r26, r24
    5c96:	cb 01       	movw	r24, r22
    5c98:	9e af       	std	Y+62, r25	; 0x3e
    5c9a:	8d af       	std	Y+61, r24	; 0x3d
    5c9c:	0f c0       	rjmp	.+30     	; 0x5cbc <EXTI_System+0x164c>
    5c9e:	80 e9       	ldi	r24, 0x90	; 144
    5ca0:	91 e0       	ldi	r25, 0x01	; 1
    5ca2:	9c af       	std	Y+60, r25	; 0x3c
    5ca4:	8b af       	std	Y+59, r24	; 0x3b
    5ca6:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ca8:	9c ad       	ldd	r25, Y+60	; 0x3c
    5caa:	01 97       	sbiw	r24, 0x01	; 1
    5cac:	f1 f7       	brne	.-4      	; 0x5caa <EXTI_System+0x163a>
    5cae:	9c af       	std	Y+60, r25	; 0x3c
    5cb0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cb6:	01 97       	sbiw	r24, 0x01	; 1
    5cb8:	9e af       	std	Y+62, r25	; 0x3e
    5cba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    5cbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    5cc0:	00 97       	sbiw	r24, 0x00	; 0
    5cc2:	69 f7       	brne	.-38     	; 0x5c9e <EXTI_System+0x162e>
    5cc4:	16 c0       	rjmp	.+44     	; 0x5cf2 <EXTI_System+0x1682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	ff 96       	adiw	r30, 0x3f	; 63
    5cca:	60 81       	ld	r22, Z
    5ccc:	71 81       	ldd	r23, Z+1	; 0x01
    5cce:	82 81       	ldd	r24, Z+2	; 0x02
    5cd0:	93 81       	ldd	r25, Z+3	; 0x03
    5cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cd6:	dc 01       	movw	r26, r24
    5cd8:	cb 01       	movw	r24, r22
    5cda:	9e af       	std	Y+62, r25	; 0x3e
    5cdc:	8d af       	std	Y+61, r24	; 0x3d
    5cde:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ce0:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ce2:	9a af       	std	Y+58, r25	; 0x3a
    5ce4:	89 af       	std	Y+57, r24	; 0x39
    5ce6:	89 ad       	ldd	r24, Y+57	; 0x39
    5ce8:	9a ad       	ldd	r25, Y+58	; 0x3a
    5cea:	01 97       	sbiw	r24, 0x01	; 1
    5cec:	f1 f7       	brne	.-4      	; 0x5cea <EXTI_System+0x167a>
    5cee:	9a af       	std	Y+58, r25	; 0x3a
    5cf0:	89 af       	std	Y+57, r24	; 0x39
								_delay_ms(35);

								while(1){
									u8 Motor_Rotate = Keypad_GetPressedKey();
    5cf2:	0e 94 cb 20 	call	0x4196	; 0x4196 <Keypad_GetPressedKey>
    5cf6:	fe 01       	movw	r30, r28
    5cf8:	ee 5f       	subi	r30, 0xFE	; 254
    5cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    5cfc:	80 83       	st	Z, r24
									if(Motor_Rotate == 1){
    5cfe:	fe 01       	movw	r30, r28
    5d00:	ee 5f       	subi	r30, 0xFE	; 254
    5d02:	fe 4f       	sbci	r31, 0xFE	; 254
    5d04:	80 81       	ld	r24, Z
    5d06:	81 30       	cpi	r24, 0x01	; 1
    5d08:	09 f0       	breq	.+2      	; 0x5d0c <EXTI_System+0x169c>
    5d0a:	7a c0       	rjmp	.+244    	; 0x5e00 <EXTI_System+0x1790>
										DC_Motor_Stop(0);
    5d0c:	80 e0       	ldi	r24, 0x00	; 0
    5d0e:	0e 94 17 22 	call	0x442e	; 0x442e <DC_Motor_Stop>
    5d12:	80 e0       	ldi	r24, 0x00	; 0
    5d14:	90 e0       	ldi	r25, 0x00	; 0
    5d16:	a0 ea       	ldi	r26, 0xA0	; 160
    5d18:	b1 e4       	ldi	r27, 0x41	; 65
    5d1a:	8d ab       	std	Y+53, r24	; 0x35
    5d1c:	9e ab       	std	Y+54, r25	; 0x36
    5d1e:	af ab       	std	Y+55, r26	; 0x37
    5d20:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d22:	6d a9       	ldd	r22, Y+53	; 0x35
    5d24:	7e a9       	ldd	r23, Y+54	; 0x36
    5d26:	8f a9       	ldd	r24, Y+55	; 0x37
    5d28:	98 ad       	ldd	r25, Y+56	; 0x38
    5d2a:	20 e0       	ldi	r18, 0x00	; 0
    5d2c:	30 e0       	ldi	r19, 0x00	; 0
    5d2e:	4a e7       	ldi	r20, 0x7A	; 122
    5d30:	55 e4       	ldi	r21, 0x45	; 69
    5d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d36:	dc 01       	movw	r26, r24
    5d38:	cb 01       	movw	r24, r22
    5d3a:	89 ab       	std	Y+49, r24	; 0x31
    5d3c:	9a ab       	std	Y+50, r25	; 0x32
    5d3e:	ab ab       	std	Y+51, r26	; 0x33
    5d40:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5d42:	69 a9       	ldd	r22, Y+49	; 0x31
    5d44:	7a a9       	ldd	r23, Y+50	; 0x32
    5d46:	8b a9       	ldd	r24, Y+51	; 0x33
    5d48:	9c a9       	ldd	r25, Y+52	; 0x34
    5d4a:	20 e0       	ldi	r18, 0x00	; 0
    5d4c:	30 e0       	ldi	r19, 0x00	; 0
    5d4e:	40 e8       	ldi	r20, 0x80	; 128
    5d50:	5f e3       	ldi	r21, 0x3F	; 63
    5d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5d56:	88 23       	and	r24, r24
    5d58:	2c f4       	brge	.+10     	; 0x5d64 <EXTI_System+0x16f4>
		__ticks = 1;
    5d5a:	81 e0       	ldi	r24, 0x01	; 1
    5d5c:	90 e0       	ldi	r25, 0x00	; 0
    5d5e:	98 ab       	std	Y+48, r25	; 0x30
    5d60:	8f a7       	std	Y+47, r24	; 0x2f
    5d62:	3f c0       	rjmp	.+126    	; 0x5de2 <EXTI_System+0x1772>
	else if (__tmp > 65535)
    5d64:	69 a9       	ldd	r22, Y+49	; 0x31
    5d66:	7a a9       	ldd	r23, Y+50	; 0x32
    5d68:	8b a9       	ldd	r24, Y+51	; 0x33
    5d6a:	9c a9       	ldd	r25, Y+52	; 0x34
    5d6c:	20 e0       	ldi	r18, 0x00	; 0
    5d6e:	3f ef       	ldi	r19, 0xFF	; 255
    5d70:	4f e7       	ldi	r20, 0x7F	; 127
    5d72:	57 e4       	ldi	r21, 0x47	; 71
    5d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5d78:	18 16       	cp	r1, r24
    5d7a:	4c f5       	brge	.+82     	; 0x5dce <EXTI_System+0x175e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d7c:	6d a9       	ldd	r22, Y+53	; 0x35
    5d7e:	7e a9       	ldd	r23, Y+54	; 0x36
    5d80:	8f a9       	ldd	r24, Y+55	; 0x37
    5d82:	98 ad       	ldd	r25, Y+56	; 0x38
    5d84:	20 e0       	ldi	r18, 0x00	; 0
    5d86:	30 e0       	ldi	r19, 0x00	; 0
    5d88:	40 e2       	ldi	r20, 0x20	; 32
    5d8a:	51 e4       	ldi	r21, 0x41	; 65
    5d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d90:	dc 01       	movw	r26, r24
    5d92:	cb 01       	movw	r24, r22
    5d94:	bc 01       	movw	r22, r24
    5d96:	cd 01       	movw	r24, r26
    5d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d9c:	dc 01       	movw	r26, r24
    5d9e:	cb 01       	movw	r24, r22
    5da0:	98 ab       	std	Y+48, r25	; 0x30
    5da2:	8f a7       	std	Y+47, r24	; 0x2f
    5da4:	0f c0       	rjmp	.+30     	; 0x5dc4 <EXTI_System+0x1754>
    5da6:	80 e9       	ldi	r24, 0x90	; 144
    5da8:	91 e0       	ldi	r25, 0x01	; 1
    5daa:	9e a7       	std	Y+46, r25	; 0x2e
    5dac:	8d a7       	std	Y+45, r24	; 0x2d
    5dae:	8d a5       	ldd	r24, Y+45	; 0x2d
    5db0:	9e a5       	ldd	r25, Y+46	; 0x2e
    5db2:	01 97       	sbiw	r24, 0x01	; 1
    5db4:	f1 f7       	brne	.-4      	; 0x5db2 <EXTI_System+0x1742>
    5db6:	9e a7       	std	Y+46, r25	; 0x2e
    5db8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dba:	8f a5       	ldd	r24, Y+47	; 0x2f
    5dbc:	98 a9       	ldd	r25, Y+48	; 0x30
    5dbe:	01 97       	sbiw	r24, 0x01	; 1
    5dc0:	98 ab       	std	Y+48, r25	; 0x30
    5dc2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5dc6:	98 a9       	ldd	r25, Y+48	; 0x30
    5dc8:	00 97       	sbiw	r24, 0x00	; 0
    5dca:	69 f7       	brne	.-38     	; 0x5da6 <EXTI_System+0x1736>
    5dcc:	14 c0       	rjmp	.+40     	; 0x5df6 <EXTI_System+0x1786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dce:	69 a9       	ldd	r22, Y+49	; 0x31
    5dd0:	7a a9       	ldd	r23, Y+50	; 0x32
    5dd2:	8b a9       	ldd	r24, Y+51	; 0x33
    5dd4:	9c a9       	ldd	r25, Y+52	; 0x34
    5dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dda:	dc 01       	movw	r26, r24
    5ddc:	cb 01       	movw	r24, r22
    5dde:	98 ab       	std	Y+48, r25	; 0x30
    5de0:	8f a7       	std	Y+47, r24	; 0x2f
    5de2:	8f a5       	ldd	r24, Y+47	; 0x2f
    5de4:	98 a9       	ldd	r25, Y+48	; 0x30
    5de6:	9c a7       	std	Y+44, r25	; 0x2c
    5de8:	8b a7       	std	Y+43, r24	; 0x2b
    5dea:	8b a5       	ldd	r24, Y+43	; 0x2b
    5dec:	9c a5       	ldd	r25, Y+44	; 0x2c
    5dee:	01 97       	sbiw	r24, 0x01	; 1
    5df0:	f1 f7       	brne	.-4      	; 0x5dee <EXTI_System+0x177e>
    5df2:	9c a7       	std	Y+44, r25	; 0x2c
    5df4:	8b a7       	std	Y+43, r24	; 0x2b
										_delay_ms(20);
										DC_Motor_Rotate(0, 0);
    5df6:	80 e0       	ldi	r24, 0x00	; 0
    5df8:	60 e0       	ldi	r22, 0x00	; 0
    5dfa:	0e 94 8f 21 	call	0x431e	; 0x431e <DC_Motor_Rotate>
    5dfe:	79 cf       	rjmp	.-270    	; 0x5cf2 <EXTI_System+0x1682>
									}

									else if(Motor_Rotate == 2){
    5e00:	fe 01       	movw	r30, r28
    5e02:	ee 5f       	subi	r30, 0xFE	; 254
    5e04:	fe 4f       	sbci	r31, 0xFE	; 254
    5e06:	80 81       	ld	r24, Z
    5e08:	82 30       	cpi	r24, 0x02	; 2
    5e0a:	09 f0       	breq	.+2      	; 0x5e0e <EXTI_System+0x179e>
    5e0c:	7a c0       	rjmp	.+244    	; 0x5f02 <EXTI_System+0x1892>
										DC_Motor_Stop(0);
    5e0e:	80 e0       	ldi	r24, 0x00	; 0
    5e10:	0e 94 17 22 	call	0x442e	; 0x442e <DC_Motor_Stop>
    5e14:	80 e0       	ldi	r24, 0x00	; 0
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	a0 ea       	ldi	r26, 0xA0	; 160
    5e1a:	b1 e4       	ldi	r27, 0x41	; 65
    5e1c:	8f a3       	std	Y+39, r24	; 0x27
    5e1e:	98 a7       	std	Y+40, r25	; 0x28
    5e20:	a9 a7       	std	Y+41, r26	; 0x29
    5e22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e24:	6f a1       	ldd	r22, Y+39	; 0x27
    5e26:	78 a5       	ldd	r23, Y+40	; 0x28
    5e28:	89 a5       	ldd	r24, Y+41	; 0x29
    5e2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e2c:	20 e0       	ldi	r18, 0x00	; 0
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	4a e7       	ldi	r20, 0x7A	; 122
    5e32:	55 e4       	ldi	r21, 0x45	; 69
    5e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e38:	dc 01       	movw	r26, r24
    5e3a:	cb 01       	movw	r24, r22
    5e3c:	8b a3       	std	Y+35, r24	; 0x23
    5e3e:	9c a3       	std	Y+36, r25	; 0x24
    5e40:	ad a3       	std	Y+37, r26	; 0x25
    5e42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5e44:	6b a1       	ldd	r22, Y+35	; 0x23
    5e46:	7c a1       	ldd	r23, Y+36	; 0x24
    5e48:	8d a1       	ldd	r24, Y+37	; 0x25
    5e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    5e4c:	20 e0       	ldi	r18, 0x00	; 0
    5e4e:	30 e0       	ldi	r19, 0x00	; 0
    5e50:	40 e8       	ldi	r20, 0x80	; 128
    5e52:	5f e3       	ldi	r21, 0x3F	; 63
    5e54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5e58:	88 23       	and	r24, r24
    5e5a:	2c f4       	brge	.+10     	; 0x5e66 <EXTI_System+0x17f6>
		__ticks = 1;
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	9a a3       	std	Y+34, r25	; 0x22
    5e62:	89 a3       	std	Y+33, r24	; 0x21
    5e64:	3f c0       	rjmp	.+126    	; 0x5ee4 <EXTI_System+0x1874>
	else if (__tmp > 65535)
    5e66:	6b a1       	ldd	r22, Y+35	; 0x23
    5e68:	7c a1       	ldd	r23, Y+36	; 0x24
    5e6a:	8d a1       	ldd	r24, Y+37	; 0x25
    5e6c:	9e a1       	ldd	r25, Y+38	; 0x26
    5e6e:	20 e0       	ldi	r18, 0x00	; 0
    5e70:	3f ef       	ldi	r19, 0xFF	; 255
    5e72:	4f e7       	ldi	r20, 0x7F	; 127
    5e74:	57 e4       	ldi	r21, 0x47	; 71
    5e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e7a:	18 16       	cp	r1, r24
    5e7c:	4c f5       	brge	.+82     	; 0x5ed0 <EXTI_System+0x1860>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e7e:	6f a1       	ldd	r22, Y+39	; 0x27
    5e80:	78 a5       	ldd	r23, Y+40	; 0x28
    5e82:	89 a5       	ldd	r24, Y+41	; 0x29
    5e84:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e86:	20 e0       	ldi	r18, 0x00	; 0
    5e88:	30 e0       	ldi	r19, 0x00	; 0
    5e8a:	40 e2       	ldi	r20, 0x20	; 32
    5e8c:	51 e4       	ldi	r21, 0x41	; 65
    5e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e92:	dc 01       	movw	r26, r24
    5e94:	cb 01       	movw	r24, r22
    5e96:	bc 01       	movw	r22, r24
    5e98:	cd 01       	movw	r24, r26
    5e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	9a a3       	std	Y+34, r25	; 0x22
    5ea4:	89 a3       	std	Y+33, r24	; 0x21
    5ea6:	0f c0       	rjmp	.+30     	; 0x5ec6 <EXTI_System+0x1856>
    5ea8:	80 e9       	ldi	r24, 0x90	; 144
    5eaa:	91 e0       	ldi	r25, 0x01	; 1
    5eac:	98 a3       	std	Y+32, r25	; 0x20
    5eae:	8f 8f       	std	Y+31, r24	; 0x1f
    5eb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5eb2:	98 a1       	ldd	r25, Y+32	; 0x20
    5eb4:	01 97       	sbiw	r24, 0x01	; 1
    5eb6:	f1 f7       	brne	.-4      	; 0x5eb4 <EXTI_System+0x1844>
    5eb8:	98 a3       	std	Y+32, r25	; 0x20
    5eba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    5ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    5ec0:	01 97       	sbiw	r24, 0x01	; 1
    5ec2:	9a a3       	std	Y+34, r25	; 0x22
    5ec4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ec6:	89 a1       	ldd	r24, Y+33	; 0x21
    5ec8:	9a a1       	ldd	r25, Y+34	; 0x22
    5eca:	00 97       	sbiw	r24, 0x00	; 0
    5ecc:	69 f7       	brne	.-38     	; 0x5ea8 <EXTI_System+0x1838>
    5ece:	14 c0       	rjmp	.+40     	; 0x5ef8 <EXTI_System+0x1888>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ed0:	6b a1       	ldd	r22, Y+35	; 0x23
    5ed2:	7c a1       	ldd	r23, Y+36	; 0x24
    5ed4:	8d a1       	ldd	r24, Y+37	; 0x25
    5ed6:	9e a1       	ldd	r25, Y+38	; 0x26
    5ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5edc:	dc 01       	movw	r26, r24
    5ede:	cb 01       	movw	r24, r22
    5ee0:	9a a3       	std	Y+34, r25	; 0x22
    5ee2:	89 a3       	std	Y+33, r24	; 0x21
    5ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    5ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    5ee8:	9e 8f       	std	Y+30, r25	; 0x1e
    5eea:	8d 8f       	std	Y+29, r24	; 0x1d
    5eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5eee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5ef0:	01 97       	sbiw	r24, 0x01	; 1
    5ef2:	f1 f7       	brne	.-4      	; 0x5ef0 <EXTI_System+0x1880>
    5ef4:	9e 8f       	std	Y+30, r25	; 0x1e
    5ef6:	8d 8f       	std	Y+29, r24	; 0x1d
										_delay_ms(20);
										DC_Motor_Rotate(0, 1);
    5ef8:	80 e0       	ldi	r24, 0x00	; 0
    5efa:	61 e0       	ldi	r22, 0x01	; 1
    5efc:	0e 94 8f 21 	call	0x431e	; 0x431e <DC_Motor_Rotate>
    5f00:	f8 ce       	rjmp	.-528    	; 0x5cf2 <EXTI_System+0x1682>
									}

									else if(Motor_Rotate == 3){
    5f02:	fe 01       	movw	r30, r28
    5f04:	ee 5f       	subi	r30, 0xFE	; 254
    5f06:	fe 4f       	sbci	r31, 0xFE	; 254
    5f08:	80 81       	ld	r24, Z
    5f0a:	83 30       	cpi	r24, 0x03	; 3
    5f0c:	09 f0       	breq	.+2      	; 0x5f10 <EXTI_System+0x18a0>
    5f0e:	f1 ce       	rjmp	.-542    	; 0x5cf2 <EXTI_System+0x1682>
										DC_Motor_Stop(0);
    5f10:	80 e0       	ldi	r24, 0x00	; 0
    5f12:	0e 94 17 22 	call	0x442e	; 0x442e <DC_Motor_Stop>
										First_Screen();
    5f16:	0e 94 38 22 	call	0x4470	; 0x4470 <First_Screen>

										while(1){
											u8 Motor_Back = Keypad_GetPressedKey();
    5f1a:	0e 94 cb 20 	call	0x4196	; 0x4196 <Keypad_GetPressedKey>
    5f1e:	fe 01       	movw	r30, r28
    5f20:	ef 5f       	subi	r30, 0xFF	; 255
    5f22:	fe 4f       	sbci	r31, 0xFE	; 254
    5f24:	80 83       	st	Z, r24
											if(Motor_Back == 1){
    5f26:	fe 01       	movw	r30, r28
    5f28:	ef 5f       	subi	r30, 0xFF	; 255
    5f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f2c:	80 81       	ld	r24, Z
    5f2e:	81 30       	cpi	r24, 0x01	; 1
    5f30:	09 f0       	breq	.+2      	; 0x5f34 <EXTI_System+0x18c4>
    5f32:	13 c1       	rjmp	.+550    	; 0x615a <EXTI_System+0x1aea>
												Second_Screen();
    5f34:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <Second_Screen>
    5f38:	80 e0       	ldi	r24, 0x00	; 0
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	ac e0       	ldi	r26, 0x0C	; 12
    5f3e:	b2 e4       	ldi	r27, 0x42	; 66
    5f40:	89 8f       	std	Y+25, r24	; 0x19
    5f42:	9a 8f       	std	Y+26, r25	; 0x1a
    5f44:	ab 8f       	std	Y+27, r26	; 0x1b
    5f46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f48:	69 8d       	ldd	r22, Y+25	; 0x19
    5f4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f50:	20 e0       	ldi	r18, 0x00	; 0
    5f52:	30 e0       	ldi	r19, 0x00	; 0
    5f54:	4a e7       	ldi	r20, 0x7A	; 122
    5f56:	55 e4       	ldi	r21, 0x45	; 69
    5f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f5c:	dc 01       	movw	r26, r24
    5f5e:	cb 01       	movw	r24, r22
    5f60:	8d 8b       	std	Y+21, r24	; 0x15
    5f62:	9e 8b       	std	Y+22, r25	; 0x16
    5f64:	af 8b       	std	Y+23, r26	; 0x17
    5f66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5f68:	6d 89       	ldd	r22, Y+21	; 0x15
    5f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    5f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    5f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    5f70:	20 e0       	ldi	r18, 0x00	; 0
    5f72:	30 e0       	ldi	r19, 0x00	; 0
    5f74:	40 e8       	ldi	r20, 0x80	; 128
    5f76:	5f e3       	ldi	r21, 0x3F	; 63
    5f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5f7c:	88 23       	and	r24, r24
    5f7e:	2c f4       	brge	.+10     	; 0x5f8a <EXTI_System+0x191a>
		__ticks = 1;
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	9c 8b       	std	Y+20, r25	; 0x14
    5f86:	8b 8b       	std	Y+19, r24	; 0x13
    5f88:	3f c0       	rjmp	.+126    	; 0x6008 <EXTI_System+0x1998>
	else if (__tmp > 65535)
    5f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    5f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    5f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    5f90:	98 8d       	ldd	r25, Y+24	; 0x18
    5f92:	20 e0       	ldi	r18, 0x00	; 0
    5f94:	3f ef       	ldi	r19, 0xFF	; 255
    5f96:	4f e7       	ldi	r20, 0x7F	; 127
    5f98:	57 e4       	ldi	r21, 0x47	; 71
    5f9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5f9e:	18 16       	cp	r1, r24
    5fa0:	4c f5       	brge	.+82     	; 0x5ff4 <EXTI_System+0x1984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fa2:	69 8d       	ldd	r22, Y+25	; 0x19
    5fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5faa:	20 e0       	ldi	r18, 0x00	; 0
    5fac:	30 e0       	ldi	r19, 0x00	; 0
    5fae:	40 e2       	ldi	r20, 0x20	; 32
    5fb0:	51 e4       	ldi	r21, 0x41	; 65
    5fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fb6:	dc 01       	movw	r26, r24
    5fb8:	cb 01       	movw	r24, r22
    5fba:	bc 01       	movw	r22, r24
    5fbc:	cd 01       	movw	r24, r26
    5fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fc2:	dc 01       	movw	r26, r24
    5fc4:	cb 01       	movw	r24, r22
    5fc6:	9c 8b       	std	Y+20, r25	; 0x14
    5fc8:	8b 8b       	std	Y+19, r24	; 0x13
    5fca:	0f c0       	rjmp	.+30     	; 0x5fea <EXTI_System+0x197a>
    5fcc:	80 e9       	ldi	r24, 0x90	; 144
    5fce:	91 e0       	ldi	r25, 0x01	; 1
    5fd0:	9a 8b       	std	Y+18, r25	; 0x12
    5fd2:	89 8b       	std	Y+17, r24	; 0x11
    5fd4:	89 89       	ldd	r24, Y+17	; 0x11
    5fd6:	9a 89       	ldd	r25, Y+18	; 0x12
    5fd8:	01 97       	sbiw	r24, 0x01	; 1
    5fda:	f1 f7       	brne	.-4      	; 0x5fd8 <EXTI_System+0x1968>
    5fdc:	9a 8b       	std	Y+18, r25	; 0x12
    5fde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    5fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    5fe4:	01 97       	sbiw	r24, 0x01	; 1
    5fe6:	9c 8b       	std	Y+20, r25	; 0x14
    5fe8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fea:	8b 89       	ldd	r24, Y+19	; 0x13
    5fec:	9c 89       	ldd	r25, Y+20	; 0x14
    5fee:	00 97       	sbiw	r24, 0x00	; 0
    5ff0:	69 f7       	brne	.-38     	; 0x5fcc <EXTI_System+0x195c>
    5ff2:	14 c0       	rjmp	.+40     	; 0x601c <EXTI_System+0x19ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    5ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    5ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    5ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    5ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6000:	dc 01       	movw	r26, r24
    6002:	cb 01       	movw	r24, r22
    6004:	9c 8b       	std	Y+20, r25	; 0x14
    6006:	8b 8b       	std	Y+19, r24	; 0x13
    6008:	8b 89       	ldd	r24, Y+19	; 0x13
    600a:	9c 89       	ldd	r25, Y+20	; 0x14
    600c:	98 8b       	std	Y+16, r25	; 0x10
    600e:	8f 87       	std	Y+15, r24	; 0x0f
    6010:	8f 85       	ldd	r24, Y+15	; 0x0f
    6012:	98 89       	ldd	r25, Y+16	; 0x10
    6014:	01 97       	sbiw	r24, 0x01	; 1
    6016:	f1 f7       	brne	.-4      	; 0x6014 <EXTI_System+0x19a4>
    6018:	98 8b       	std	Y+16, r25	; 0x10
    601a:	8f 87       	std	Y+15, r24	; 0x0f
												_delay_ms(35);

												while(1){
													u8 new_System = Keypad_GetPressedKey;
    601c:	8b ec       	ldi	r24, 0xCB	; 203
    601e:	90 e2       	ldi	r25, 0x20	; 32
    6020:	fe 01       	movw	r30, r28
    6022:	e0 50       	subi	r30, 0x00	; 0
    6024:	ff 4f       	sbci	r31, 0xFF	; 255
    6026:	80 83       	st	Z, r24

													if(new_System == 1){
    6028:	fe 01       	movw	r30, r28
    602a:	e0 50       	subi	r30, 0x00	; 0
    602c:	ff 4f       	sbci	r31, 0xFF	; 255
    602e:	80 81       	ld	r24, Z
    6030:	81 30       	cpi	r24, 0x01	; 1
    6032:	29 f4       	brne	.+10     	; 0x603e <EXTI_System+0x19ce>
														DC_Motor_Rotate(0, 0);
    6034:	80 e0       	ldi	r24, 0x00	; 0
    6036:	60 e0       	ldi	r22, 0x00	; 0
    6038:	0e 94 8f 21 	call	0x431e	; 0x431e <DC_Motor_Rotate>
    603c:	ef cf       	rjmp	.-34     	; 0x601c <EXTI_System+0x19ac>
													}

													else if(new_System == 2){
    603e:	fe 01       	movw	r30, r28
    6040:	e0 50       	subi	r30, 0x00	; 0
    6042:	ff 4f       	sbci	r31, 0xFF	; 255
    6044:	80 81       	ld	r24, Z
    6046:	82 30       	cpi	r24, 0x02	; 2
    6048:	09 f0       	breq	.+2      	; 0x604c <EXTI_System+0x19dc>
    604a:	7a c0       	rjmp	.+244    	; 0x6140 <EXTI_System+0x1ad0>
														DC_Motor_Stop(0);
    604c:	80 e0       	ldi	r24, 0x00	; 0
    604e:	0e 94 17 22 	call	0x442e	; 0x442e <DC_Motor_Stop>
    6052:	80 e0       	ldi	r24, 0x00	; 0
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	ac e0       	ldi	r26, 0x0C	; 12
    6058:	b2 e4       	ldi	r27, 0x42	; 66
    605a:	8b 87       	std	Y+11, r24	; 0x0b
    605c:	9c 87       	std	Y+12, r25	; 0x0c
    605e:	ad 87       	std	Y+13, r26	; 0x0d
    6060:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6062:	6b 85       	ldd	r22, Y+11	; 0x0b
    6064:	7c 85       	ldd	r23, Y+12	; 0x0c
    6066:	8d 85       	ldd	r24, Y+13	; 0x0d
    6068:	9e 85       	ldd	r25, Y+14	; 0x0e
    606a:	20 e0       	ldi	r18, 0x00	; 0
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	4a e7       	ldi	r20, 0x7A	; 122
    6070:	55 e4       	ldi	r21, 0x45	; 69
    6072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6076:	dc 01       	movw	r26, r24
    6078:	cb 01       	movw	r24, r22
    607a:	8f 83       	std	Y+7, r24	; 0x07
    607c:	98 87       	std	Y+8, r25	; 0x08
    607e:	a9 87       	std	Y+9, r26	; 0x09
    6080:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6082:	6f 81       	ldd	r22, Y+7	; 0x07
    6084:	78 85       	ldd	r23, Y+8	; 0x08
    6086:	89 85       	ldd	r24, Y+9	; 0x09
    6088:	9a 85       	ldd	r25, Y+10	; 0x0a
    608a:	20 e0       	ldi	r18, 0x00	; 0
    608c:	30 e0       	ldi	r19, 0x00	; 0
    608e:	40 e8       	ldi	r20, 0x80	; 128
    6090:	5f e3       	ldi	r21, 0x3F	; 63
    6092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6096:	88 23       	and	r24, r24
    6098:	2c f4       	brge	.+10     	; 0x60a4 <EXTI_System+0x1a34>
		__ticks = 1;
    609a:	81 e0       	ldi	r24, 0x01	; 1
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	9e 83       	std	Y+6, r25	; 0x06
    60a0:	8d 83       	std	Y+5, r24	; 0x05
    60a2:	3f c0       	rjmp	.+126    	; 0x6122 <EXTI_System+0x1ab2>
	else if (__tmp > 65535)
    60a4:	6f 81       	ldd	r22, Y+7	; 0x07
    60a6:	78 85       	ldd	r23, Y+8	; 0x08
    60a8:	89 85       	ldd	r24, Y+9	; 0x09
    60aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    60ac:	20 e0       	ldi	r18, 0x00	; 0
    60ae:	3f ef       	ldi	r19, 0xFF	; 255
    60b0:	4f e7       	ldi	r20, 0x7F	; 127
    60b2:	57 e4       	ldi	r21, 0x47	; 71
    60b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    60b8:	18 16       	cp	r1, r24
    60ba:	4c f5       	brge	.+82     	; 0x610e <EXTI_System+0x1a9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    60be:	7c 85       	ldd	r23, Y+12	; 0x0c
    60c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    60c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    60c4:	20 e0       	ldi	r18, 0x00	; 0
    60c6:	30 e0       	ldi	r19, 0x00	; 0
    60c8:	40 e2       	ldi	r20, 0x20	; 32
    60ca:	51 e4       	ldi	r21, 0x41	; 65
    60cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60d0:	dc 01       	movw	r26, r24
    60d2:	cb 01       	movw	r24, r22
    60d4:	bc 01       	movw	r22, r24
    60d6:	cd 01       	movw	r24, r26
    60d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60dc:	dc 01       	movw	r26, r24
    60de:	cb 01       	movw	r24, r22
    60e0:	9e 83       	std	Y+6, r25	; 0x06
    60e2:	8d 83       	std	Y+5, r24	; 0x05
    60e4:	0f c0       	rjmp	.+30     	; 0x6104 <EXTI_System+0x1a94>
    60e6:	80 e9       	ldi	r24, 0x90	; 144
    60e8:	91 e0       	ldi	r25, 0x01	; 1
    60ea:	9c 83       	std	Y+4, r25	; 0x04
    60ec:	8b 83       	std	Y+3, r24	; 0x03
    60ee:	8b 81       	ldd	r24, Y+3	; 0x03
    60f0:	9c 81       	ldd	r25, Y+4	; 0x04
    60f2:	01 97       	sbiw	r24, 0x01	; 1
    60f4:	f1 f7       	brne	.-4      	; 0x60f2 <EXTI_System+0x1a82>
    60f6:	9c 83       	std	Y+4, r25	; 0x04
    60f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60fa:	8d 81       	ldd	r24, Y+5	; 0x05
    60fc:	9e 81       	ldd	r25, Y+6	; 0x06
    60fe:	01 97       	sbiw	r24, 0x01	; 1
    6100:	9e 83       	std	Y+6, r25	; 0x06
    6102:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6104:	8d 81       	ldd	r24, Y+5	; 0x05
    6106:	9e 81       	ldd	r25, Y+6	; 0x06
    6108:	00 97       	sbiw	r24, 0x00	; 0
    610a:	69 f7       	brne	.-38     	; 0x60e6 <EXTI_System+0x1a76>
    610c:	14 c0       	rjmp	.+40     	; 0x6136 <EXTI_System+0x1ac6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    610e:	6f 81       	ldd	r22, Y+7	; 0x07
    6110:	78 85       	ldd	r23, Y+8	; 0x08
    6112:	89 85       	ldd	r24, Y+9	; 0x09
    6114:	9a 85       	ldd	r25, Y+10	; 0x0a
    6116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    611a:	dc 01       	movw	r26, r24
    611c:	cb 01       	movw	r24, r22
    611e:	9e 83       	std	Y+6, r25	; 0x06
    6120:	8d 83       	std	Y+5, r24	; 0x05
    6122:	8d 81       	ldd	r24, Y+5	; 0x05
    6124:	9e 81       	ldd	r25, Y+6	; 0x06
    6126:	9a 83       	std	Y+2, r25	; 0x02
    6128:	89 83       	std	Y+1, r24	; 0x01
    612a:	89 81       	ldd	r24, Y+1	; 0x01
    612c:	9a 81       	ldd	r25, Y+2	; 0x02
    612e:	01 97       	sbiw	r24, 0x01	; 1
    6130:	f1 f7       	brne	.-4      	; 0x612e <EXTI_System+0x1abe>
    6132:	9a 83       	std	Y+2, r25	; 0x02
    6134:	89 83       	std	Y+1, r24	; 0x01
														_delay_ms(35);
														DC_Motor_Rotate(0, 1);
    6136:	80 e0       	ldi	r24, 0x00	; 0
    6138:	61 e0       	ldi	r22, 0x01	; 1
    613a:	0e 94 8f 21 	call	0x431e	; 0x431e <DC_Motor_Rotate>
    613e:	6e cf       	rjmp	.-292    	; 0x601c <EXTI_System+0x19ac>
													}

													else if(new_System == 3){
    6140:	fe 01       	movw	r30, r28
    6142:	e0 50       	subi	r30, 0x00	; 0
    6144:	ff 4f       	sbci	r31, 0xFF	; 255
    6146:	80 81       	ld	r24, Z
    6148:	83 30       	cpi	r24, 0x03	; 3
    614a:	09 f0       	breq	.+2      	; 0x614e <EXTI_System+0x1ade>
    614c:	67 cf       	rjmp	.-306    	; 0x601c <EXTI_System+0x19ac>
														DC_Motor_Stop(0);
    614e:	80 e0       	ldi	r24, 0x00	; 0
    6150:	0e 94 17 22 	call	0x442e	; 0x442e <DC_Motor_Stop>
														First_Screen();
    6154:	0e 94 38 22 	call	0x4470	; 0x4470 <First_Screen>
    6158:	61 cf       	rjmp	.-318    	; 0x601c <EXTI_System+0x19ac>
													}
												}

											}

											else if(Motor_Back == 2){
    615a:	fe 01       	movw	r30, r28
    615c:	ef 5f       	subi	r30, 0xFF	; 255
    615e:	fe 4f       	sbci	r31, 0xFE	; 254
    6160:	80 81       	ld	r24, Z
    6162:	82 30       	cpi	r24, 0x02	; 2
    6164:	09 f0       	breq	.+2      	; 0x6168 <EXTI_System+0x1af8>
    6166:	d9 ce       	rjmp	.-590    	; 0x5f1a <EXTI_System+0x18aa>
												DC_Motor_Stop(0);
    6168:	80 e0       	ldi	r24, 0x00	; 0
    616a:	0e 94 17 22 	call	0x442e	; 0x442e <DC_Motor_Stop>
												LCD_ClearScreen();
    616e:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
    6172:	d3 ce       	rjmp	.-602    	; 0x5f1a <EXTI_System+0x18aa>
										}
									}
								}
							}

							else if(key_Motor == 2){
    6174:	fe 01       	movw	r30, r28
    6176:	ed 5f       	subi	r30, 0xFD	; 253
    6178:	fe 4f       	sbci	r31, 0xFE	; 254
    617a:	80 81       	ld	r24, Z
    617c:	82 30       	cpi	r24, 0x02	; 2
    617e:	09 f0       	breq	.+2      	; 0x6182 <EXTI_System+0x1b12>
    6180:	54 c0       	rjmp	.+168    	; 0x622a <EXTI_System+0x1bba>
								StepperAngles_Screen();
    6182:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <StepperAngles_Screen>
								while(1){
									u8 Stepper_angle = Keypad_GetPressedKey();
    6186:	0e 94 cb 20 	call	0x4196	; 0x4196 <Keypad_GetPressedKey>
    618a:	fe 01       	movw	r30, r28
    618c:	e1 50       	subi	r30, 0x01	; 1
    618e:	ff 4f       	sbci	r31, 0xFF	; 255
    6190:	80 83       	st	Z, r24
									if(Stepper_angle == 1){
    6192:	fe 01       	movw	r30, r28
    6194:	e1 50       	subi	r30, 0x01	; 1
    6196:	ff 4f       	sbci	r31, 0xFF	; 255
    6198:	80 81       	ld	r24, Z
    619a:	81 30       	cpi	r24, 0x01	; 1
    619c:	01 f5       	brne	.+64     	; 0x61de <EXTI_System+0x1b6e>
										StepperDirection_Screen();
    619e:	0e 94 05 23 	call	0x460a	; 0x460a <StepperDirection_Screen>
										while(1){
											u8 Stepper_Diection90 = Keypad_GetPressedKey();
    61a2:	0e 94 cb 20 	call	0x4196	; 0x4196 <Keypad_GetPressedKey>
    61a6:	fe 01       	movw	r30, r28
    61a8:	e2 50       	subi	r30, 0x02	; 2
    61aa:	ff 4f       	sbci	r31, 0xFF	; 255
    61ac:	80 83       	st	Z, r24
											if(Stepper_Diection90 == 1){
    61ae:	fe 01       	movw	r30, r28
    61b0:	e2 50       	subi	r30, 0x02	; 2
    61b2:	ff 4f       	sbci	r31, 0xFF	; 255
    61b4:	80 81       	ld	r24, Z
    61b6:	81 30       	cpi	r24, 0x01	; 1
    61b8:	31 f4       	brne	.+12     	; 0x61c6 <EXTI_System+0x1b56>
												SelectStepAngle(90, 0);
    61ba:	8a e5       	ldi	r24, 0x5A	; 90
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	60 e0       	ldi	r22, 0x00	; 0
    61c0:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <SelectStepAngle>
    61c4:	ee cf       	rjmp	.-36     	; 0x61a2 <EXTI_System+0x1b32>
											}

											else if(Stepper_Diection90 == 2){
    61c6:	fe 01       	movw	r30, r28
    61c8:	e2 50       	subi	r30, 0x02	; 2
    61ca:	ff 4f       	sbci	r31, 0xFF	; 255
    61cc:	80 81       	ld	r24, Z
    61ce:	82 30       	cpi	r24, 0x02	; 2
    61d0:	41 f7       	brne	.-48     	; 0x61a2 <EXTI_System+0x1b32>
												SelectStepAngle(90, 1);
    61d2:	8a e5       	ldi	r24, 0x5A	; 90
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	61 e0       	ldi	r22, 0x01	; 1
    61d8:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <SelectStepAngle>
    61dc:	e2 cf       	rjmp	.-60     	; 0x61a2 <EXTI_System+0x1b32>
											}
										}
									}

									else if(Stepper_angle == 2){
    61de:	fe 01       	movw	r30, r28
    61e0:	e1 50       	subi	r30, 0x01	; 1
    61e2:	ff 4f       	sbci	r31, 0xFF	; 255
    61e4:	80 81       	ld	r24, Z
    61e6:	82 30       	cpi	r24, 0x02	; 2
    61e8:	71 f6       	brne	.-100    	; 0x6186 <EXTI_System+0x1b16>
										StepperDirection_Screen();
    61ea:	0e 94 05 23 	call	0x460a	; 0x460a <StepperDirection_Screen>
										while(1){
											u8 Stepper_Diection180 = Keypad_GetPressedKey();
    61ee:	0e 94 cb 20 	call	0x4196	; 0x4196 <Keypad_GetPressedKey>
    61f2:	fe 01       	movw	r30, r28
    61f4:	e3 50       	subi	r30, 0x03	; 3
    61f6:	ff 4f       	sbci	r31, 0xFF	; 255
    61f8:	80 83       	st	Z, r24
											if(Stepper_Diection180 == 1){
    61fa:	fe 01       	movw	r30, r28
    61fc:	e3 50       	subi	r30, 0x03	; 3
    61fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6200:	80 81       	ld	r24, Z
    6202:	81 30       	cpi	r24, 0x01	; 1
    6204:	31 f4       	brne	.+12     	; 0x6212 <EXTI_System+0x1ba2>
												SelectStepAngle(180, 0);
    6206:	84 eb       	ldi	r24, 0xB4	; 180
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	60 e0       	ldi	r22, 0x00	; 0
    620c:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <SelectStepAngle>
    6210:	ee cf       	rjmp	.-36     	; 0x61ee <EXTI_System+0x1b7e>
											}

											else if(Stepper_Diection180 == 2){
    6212:	fe 01       	movw	r30, r28
    6214:	e3 50       	subi	r30, 0x03	; 3
    6216:	ff 4f       	sbci	r31, 0xFF	; 255
    6218:	80 81       	ld	r24, Z
    621a:	82 30       	cpi	r24, 0x02	; 2
    621c:	41 f7       	brne	.-48     	; 0x61ee <EXTI_System+0x1b7e>
												SelectStepAngle(180, 1);
    621e:	84 eb       	ldi	r24, 0xB4	; 180
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	61 e0       	ldi	r22, 0x01	; 1
    6224:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <SelectStepAngle>
    6228:	e2 cf       	rjmp	.-60     	; 0x61ee <EXTI_System+0x1b7e>
										}
									}
								}
							}

							else if(key_Motor == 3){
    622a:	fe 01       	movw	r30, r28
    622c:	ed 5f       	subi	r30, 0xFD	; 253
    622e:	fe 4f       	sbci	r31, 0xFE	; 254
    6230:	80 81       	ld	r24, Z
    6232:	83 30       	cpi	r24, 0x03	; 3
    6234:	09 f0       	breq	.+2      	; 0x6238 <EXTI_System+0x1bc8>
    6236:	c9 cc       	rjmp	.-1646   	; 0x5bca <EXTI_System+0x155a>
								LCD_ClearScreen();
    6238:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
								LCD_displayString("Servo Is Running");
    623c:	80 ef       	ldi	r24, 0xF0	; 240
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
								while(1){
									ADC_u8_Get_Digital_ValueSynchNonBlocking(0, &digitalValue);
    6244:	21 e5       	ldi	r18, 0x51	; 81
    6246:	31 e0       	ldi	r19, 0x01	; 1
    6248:	80 e0       	ldi	r24, 0x00	; 0
    624a:	b9 01       	movw	r22, r18
    624c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <ADC_u8_Get_Digital_ValueSynchNonBlocking>
									motorValue = (digitalValue * 1000UL) / 1023;
    6250:	80 91 51 01 	lds	r24, 0x0151
    6254:	90 91 52 01 	lds	r25, 0x0152
    6258:	cc 01       	movw	r24, r24
    625a:	a0 e0       	ldi	r26, 0x00	; 0
    625c:	b0 e0       	ldi	r27, 0x00	; 0
    625e:	28 ee       	ldi	r18, 0xE8	; 232
    6260:	33 e0       	ldi	r19, 0x03	; 3
    6262:	40 e0       	ldi	r20, 0x00	; 0
    6264:	50 e0       	ldi	r21, 0x00	; 0
    6266:	bc 01       	movw	r22, r24
    6268:	cd 01       	movw	r24, r26
    626a:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <__mulsi3>
    626e:	dc 01       	movw	r26, r24
    6270:	cb 01       	movw	r24, r22
    6272:	2f ef       	ldi	r18, 0xFF	; 255
    6274:	33 e0       	ldi	r19, 0x03	; 3
    6276:	40 e0       	ldi	r20, 0x00	; 0
    6278:	50 e0       	ldi	r21, 0x00	; 0
    627a:	bc 01       	movw	r22, r24
    627c:	cd 01       	movw	r24, r26
    627e:	0e 94 89 31 	call	0x6312	; 0x6312 <__udivmodsi4>
    6282:	da 01       	movw	r26, r20
    6284:	c9 01       	movw	r24, r18
    6286:	90 93 5e 01 	sts	0x015E, r25
    628a:	80 93 5d 01 	sts	0x015D, r24
									Servo_SetAngle(motorValue);
    628e:	80 91 5d 01 	lds	r24, 0x015D
    6292:	90 91 5e 01 	lds	r25, 0x015E
    6296:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <Servo_SetAngle>
    629a:	d4 cf       	rjmp	.-88     	; 0x6244 <EXTI_System+0x1bd4>
							}
						}
						break;
					}
					else{
						LCD_ClearScreen();
    629c:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
						LCD_displayString("Wrong Password");
    62a0:	81 e0       	ldi	r24, 0x01	; 1
    62a2:	91 e0       	ldi	r25, 0x01	; 1
    62a4:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <LCD_displayString>
    62a8:	0c 94 5c 23 	jmp	0x46b8	; 0x46b8 <EXTI_System+0x48>
			}

		}

	}
	else if(Local_u8_Flag == 1){
    62ac:	80 91 4f 01 	lds	r24, 0x014F
    62b0:	81 30       	cpi	r24, 0x01	; 1
    62b2:	21 f4       	brne	.+8      	; 0x62bc <EXTI_System+0x1c4c>
		Local_u8_Flag = 0;
    62b4:	10 92 4f 01 	sts	0x014F, r1
		LCD_ClearScreen();
    62b8:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <LCD_ClearScreen>
	}

}
    62bc:	ca 5f       	subi	r28, 0xFA	; 250
    62be:	de 4f       	sbci	r29, 0xFE	; 254
    62c0:	0f b6       	in	r0, 0x3f	; 63
    62c2:	f8 94       	cli
    62c4:	de bf       	out	0x3e, r29	; 62
    62c6:	0f be       	out	0x3f, r0	; 63
    62c8:	cd bf       	out	0x3d, r28	; 61
    62ca:	cf 91       	pop	r28
    62cc:	df 91       	pop	r29
    62ce:	1f 91       	pop	r17
    62d0:	0f 91       	pop	r16
    62d2:	08 95       	ret

000062d4 <__mulsi3>:
    62d4:	62 9f       	mul	r22, r18
    62d6:	d0 01       	movw	r26, r0
    62d8:	73 9f       	mul	r23, r19
    62da:	f0 01       	movw	r30, r0
    62dc:	82 9f       	mul	r24, r18
    62de:	e0 0d       	add	r30, r0
    62e0:	f1 1d       	adc	r31, r1
    62e2:	64 9f       	mul	r22, r20
    62e4:	e0 0d       	add	r30, r0
    62e6:	f1 1d       	adc	r31, r1
    62e8:	92 9f       	mul	r25, r18
    62ea:	f0 0d       	add	r31, r0
    62ec:	83 9f       	mul	r24, r19
    62ee:	f0 0d       	add	r31, r0
    62f0:	74 9f       	mul	r23, r20
    62f2:	f0 0d       	add	r31, r0
    62f4:	65 9f       	mul	r22, r21
    62f6:	f0 0d       	add	r31, r0
    62f8:	99 27       	eor	r25, r25
    62fa:	72 9f       	mul	r23, r18
    62fc:	b0 0d       	add	r27, r0
    62fe:	e1 1d       	adc	r30, r1
    6300:	f9 1f       	adc	r31, r25
    6302:	63 9f       	mul	r22, r19
    6304:	b0 0d       	add	r27, r0
    6306:	e1 1d       	adc	r30, r1
    6308:	f9 1f       	adc	r31, r25
    630a:	bd 01       	movw	r22, r26
    630c:	cf 01       	movw	r24, r30
    630e:	11 24       	eor	r1, r1
    6310:	08 95       	ret

00006312 <__udivmodsi4>:
    6312:	a1 e2       	ldi	r26, 0x21	; 33
    6314:	1a 2e       	mov	r1, r26
    6316:	aa 1b       	sub	r26, r26
    6318:	bb 1b       	sub	r27, r27
    631a:	fd 01       	movw	r30, r26
    631c:	0d c0       	rjmp	.+26     	; 0x6338 <__udivmodsi4_ep>

0000631e <__udivmodsi4_loop>:
    631e:	aa 1f       	adc	r26, r26
    6320:	bb 1f       	adc	r27, r27
    6322:	ee 1f       	adc	r30, r30
    6324:	ff 1f       	adc	r31, r31
    6326:	a2 17       	cp	r26, r18
    6328:	b3 07       	cpc	r27, r19
    632a:	e4 07       	cpc	r30, r20
    632c:	f5 07       	cpc	r31, r21
    632e:	20 f0       	brcs	.+8      	; 0x6338 <__udivmodsi4_ep>
    6330:	a2 1b       	sub	r26, r18
    6332:	b3 0b       	sbc	r27, r19
    6334:	e4 0b       	sbc	r30, r20
    6336:	f5 0b       	sbc	r31, r21

00006338 <__udivmodsi4_ep>:
    6338:	66 1f       	adc	r22, r22
    633a:	77 1f       	adc	r23, r23
    633c:	88 1f       	adc	r24, r24
    633e:	99 1f       	adc	r25, r25
    6340:	1a 94       	dec	r1
    6342:	69 f7       	brne	.-38     	; 0x631e <__udivmodsi4_loop>
    6344:	60 95       	com	r22
    6346:	70 95       	com	r23
    6348:	80 95       	com	r24
    634a:	90 95       	com	r25
    634c:	9b 01       	movw	r18, r22
    634e:	ac 01       	movw	r20, r24
    6350:	bd 01       	movw	r22, r26
    6352:	cf 01       	movw	r24, r30
    6354:	08 95       	ret

00006356 <__prologue_saves__>:
    6356:	2f 92       	push	r2
    6358:	3f 92       	push	r3
    635a:	4f 92       	push	r4
    635c:	5f 92       	push	r5
    635e:	6f 92       	push	r6
    6360:	7f 92       	push	r7
    6362:	8f 92       	push	r8
    6364:	9f 92       	push	r9
    6366:	af 92       	push	r10
    6368:	bf 92       	push	r11
    636a:	cf 92       	push	r12
    636c:	df 92       	push	r13
    636e:	ef 92       	push	r14
    6370:	ff 92       	push	r15
    6372:	0f 93       	push	r16
    6374:	1f 93       	push	r17
    6376:	cf 93       	push	r28
    6378:	df 93       	push	r29
    637a:	cd b7       	in	r28, 0x3d	; 61
    637c:	de b7       	in	r29, 0x3e	; 62
    637e:	ca 1b       	sub	r28, r26
    6380:	db 0b       	sbc	r29, r27
    6382:	0f b6       	in	r0, 0x3f	; 63
    6384:	f8 94       	cli
    6386:	de bf       	out	0x3e, r29	; 62
    6388:	0f be       	out	0x3f, r0	; 63
    638a:	cd bf       	out	0x3d, r28	; 61
    638c:	09 94       	ijmp

0000638e <__epilogue_restores__>:
    638e:	2a 88       	ldd	r2, Y+18	; 0x12
    6390:	39 88       	ldd	r3, Y+17	; 0x11
    6392:	48 88       	ldd	r4, Y+16	; 0x10
    6394:	5f 84       	ldd	r5, Y+15	; 0x0f
    6396:	6e 84       	ldd	r6, Y+14	; 0x0e
    6398:	7d 84       	ldd	r7, Y+13	; 0x0d
    639a:	8c 84       	ldd	r8, Y+12	; 0x0c
    639c:	9b 84       	ldd	r9, Y+11	; 0x0b
    639e:	aa 84       	ldd	r10, Y+10	; 0x0a
    63a0:	b9 84       	ldd	r11, Y+9	; 0x09
    63a2:	c8 84       	ldd	r12, Y+8	; 0x08
    63a4:	df 80       	ldd	r13, Y+7	; 0x07
    63a6:	ee 80       	ldd	r14, Y+6	; 0x06
    63a8:	fd 80       	ldd	r15, Y+5	; 0x05
    63aa:	0c 81       	ldd	r16, Y+4	; 0x04
    63ac:	1b 81       	ldd	r17, Y+3	; 0x03
    63ae:	aa 81       	ldd	r26, Y+2	; 0x02
    63b0:	b9 81       	ldd	r27, Y+1	; 0x01
    63b2:	ce 0f       	add	r28, r30
    63b4:	d1 1d       	adc	r29, r1
    63b6:	0f b6       	in	r0, 0x3f	; 63
    63b8:	f8 94       	cli
    63ba:	de bf       	out	0x3e, r29	; 62
    63bc:	0f be       	out	0x3f, r0	; 63
    63be:	cd bf       	out	0x3d, r28	; 61
    63c0:	ed 01       	movw	r28, r26
    63c2:	08 95       	ret

000063c4 <strlen>:
    63c4:	fc 01       	movw	r30, r24
    63c6:	01 90       	ld	r0, Z+
    63c8:	00 20       	and	r0, r0
    63ca:	e9 f7       	brne	.-6      	; 0x63c6 <strlen+0x2>
    63cc:	80 95       	com	r24
    63ce:	90 95       	com	r25
    63d0:	8e 0f       	add	r24, r30
    63d2:	9f 1f       	adc	r25, r31
    63d4:	08 95       	ret

000063d6 <sprintf>:
    63d6:	ae e0       	ldi	r26, 0x0E	; 14
    63d8:	b0 e0       	ldi	r27, 0x00	; 0
    63da:	e1 ef       	ldi	r30, 0xF1	; 241
    63dc:	f1 e3       	ldi	r31, 0x31	; 49
    63de:	0c 94 b9 31 	jmp	0x6372	; 0x6372 <__prologue_saves__+0x1c>
    63e2:	0d 89       	ldd	r16, Y+21	; 0x15
    63e4:	1e 89       	ldd	r17, Y+22	; 0x16
    63e6:	86 e0       	ldi	r24, 0x06	; 6
    63e8:	8c 83       	std	Y+4, r24	; 0x04
    63ea:	1a 83       	std	Y+2, r17	; 0x02
    63ec:	09 83       	std	Y+1, r16	; 0x01
    63ee:	8f ef       	ldi	r24, 0xFF	; 255
    63f0:	9f e7       	ldi	r25, 0x7F	; 127
    63f2:	9e 83       	std	Y+6, r25	; 0x06
    63f4:	8d 83       	std	Y+5, r24	; 0x05
    63f6:	9e 01       	movw	r18, r28
    63f8:	27 5e       	subi	r18, 0xE7	; 231
    63fa:	3f 4f       	sbci	r19, 0xFF	; 255
    63fc:	ce 01       	movw	r24, r28
    63fe:	01 96       	adiw	r24, 0x01	; 1
    6400:	6f 89       	ldd	r22, Y+23	; 0x17
    6402:	78 8d       	ldd	r23, Y+24	; 0x18
    6404:	a9 01       	movw	r20, r18
    6406:	0e 94 0f 32 	call	0x641e	; 0x641e <vfprintf>
    640a:	2f 81       	ldd	r18, Y+7	; 0x07
    640c:	38 85       	ldd	r19, Y+8	; 0x08
    640e:	02 0f       	add	r16, r18
    6410:	13 1f       	adc	r17, r19
    6412:	f8 01       	movw	r30, r16
    6414:	10 82       	st	Z, r1
    6416:	2e 96       	adiw	r28, 0x0e	; 14
    6418:	e4 e0       	ldi	r30, 0x04	; 4
    641a:	0c 94 d5 31 	jmp	0x63aa	; 0x63aa <__epilogue_restores__+0x1c>

0000641e <vfprintf>:
    641e:	ab e0       	ldi	r26, 0x0B	; 11
    6420:	b0 e0       	ldi	r27, 0x00	; 0
    6422:	e5 e1       	ldi	r30, 0x15	; 21
    6424:	f2 e3       	ldi	r31, 0x32	; 50
    6426:	0c 94 ab 31 	jmp	0x6356	; 0x6356 <__prologue_saves__>
    642a:	3c 01       	movw	r6, r24
    642c:	2b 01       	movw	r4, r22
    642e:	5a 01       	movw	r10, r20
    6430:	fc 01       	movw	r30, r24
    6432:	17 82       	std	Z+7, r1	; 0x07
    6434:	16 82       	std	Z+6, r1	; 0x06
    6436:	83 81       	ldd	r24, Z+3	; 0x03
    6438:	81 fd       	sbrc	r24, 1
    643a:	03 c0       	rjmp	.+6      	; 0x6442 <vfprintf+0x24>
    643c:	6f ef       	ldi	r22, 0xFF	; 255
    643e:	7f ef       	ldi	r23, 0xFF	; 255
    6440:	c6 c1       	rjmp	.+908    	; 0x67ce <vfprintf+0x3b0>
    6442:	9a e0       	ldi	r25, 0x0A	; 10
    6444:	89 2e       	mov	r8, r25
    6446:	1e 01       	movw	r2, r28
    6448:	08 94       	sec
    644a:	21 1c       	adc	r2, r1
    644c:	31 1c       	adc	r3, r1
    644e:	f3 01       	movw	r30, r6
    6450:	23 81       	ldd	r18, Z+3	; 0x03
    6452:	f2 01       	movw	r30, r4
    6454:	23 fd       	sbrc	r18, 3
    6456:	85 91       	lpm	r24, Z+
    6458:	23 ff       	sbrs	r18, 3
    645a:	81 91       	ld	r24, Z+
    645c:	2f 01       	movw	r4, r30
    645e:	88 23       	and	r24, r24
    6460:	09 f4       	brne	.+2      	; 0x6464 <vfprintf+0x46>
    6462:	b2 c1       	rjmp	.+868    	; 0x67c8 <vfprintf+0x3aa>
    6464:	85 32       	cpi	r24, 0x25	; 37
    6466:	39 f4       	brne	.+14     	; 0x6476 <vfprintf+0x58>
    6468:	23 fd       	sbrc	r18, 3
    646a:	85 91       	lpm	r24, Z+
    646c:	23 ff       	sbrs	r18, 3
    646e:	81 91       	ld	r24, Z+
    6470:	2f 01       	movw	r4, r30
    6472:	85 32       	cpi	r24, 0x25	; 37
    6474:	29 f4       	brne	.+10     	; 0x6480 <vfprintf+0x62>
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	b3 01       	movw	r22, r6
    647a:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    647e:	e7 cf       	rjmp	.-50     	; 0x644e <vfprintf+0x30>
    6480:	98 2f       	mov	r25, r24
    6482:	ff 24       	eor	r15, r15
    6484:	ee 24       	eor	r14, r14
    6486:	99 24       	eor	r9, r9
    6488:	ff e1       	ldi	r31, 0x1F	; 31
    648a:	ff 15       	cp	r31, r15
    648c:	d0 f0       	brcs	.+52     	; 0x64c2 <vfprintf+0xa4>
    648e:	9b 32       	cpi	r25, 0x2B	; 43
    6490:	69 f0       	breq	.+26     	; 0x64ac <vfprintf+0x8e>
    6492:	9c 32       	cpi	r25, 0x2C	; 44
    6494:	28 f4       	brcc	.+10     	; 0x64a0 <vfprintf+0x82>
    6496:	90 32       	cpi	r25, 0x20	; 32
    6498:	59 f0       	breq	.+22     	; 0x64b0 <vfprintf+0x92>
    649a:	93 32       	cpi	r25, 0x23	; 35
    649c:	91 f4       	brne	.+36     	; 0x64c2 <vfprintf+0xa4>
    649e:	0e c0       	rjmp	.+28     	; 0x64bc <vfprintf+0x9e>
    64a0:	9d 32       	cpi	r25, 0x2D	; 45
    64a2:	49 f0       	breq	.+18     	; 0x64b6 <vfprintf+0x98>
    64a4:	90 33       	cpi	r25, 0x30	; 48
    64a6:	69 f4       	brne	.+26     	; 0x64c2 <vfprintf+0xa4>
    64a8:	41 e0       	ldi	r20, 0x01	; 1
    64aa:	24 c0       	rjmp	.+72     	; 0x64f4 <vfprintf+0xd6>
    64ac:	52 e0       	ldi	r21, 0x02	; 2
    64ae:	f5 2a       	or	r15, r21
    64b0:	84 e0       	ldi	r24, 0x04	; 4
    64b2:	f8 2a       	or	r15, r24
    64b4:	28 c0       	rjmp	.+80     	; 0x6506 <vfprintf+0xe8>
    64b6:	98 e0       	ldi	r25, 0x08	; 8
    64b8:	f9 2a       	or	r15, r25
    64ba:	25 c0       	rjmp	.+74     	; 0x6506 <vfprintf+0xe8>
    64bc:	e0 e1       	ldi	r30, 0x10	; 16
    64be:	fe 2a       	or	r15, r30
    64c0:	22 c0       	rjmp	.+68     	; 0x6506 <vfprintf+0xe8>
    64c2:	f7 fc       	sbrc	r15, 7
    64c4:	29 c0       	rjmp	.+82     	; 0x6518 <vfprintf+0xfa>
    64c6:	89 2f       	mov	r24, r25
    64c8:	80 53       	subi	r24, 0x30	; 48
    64ca:	8a 30       	cpi	r24, 0x0A	; 10
    64cc:	70 f4       	brcc	.+28     	; 0x64ea <vfprintf+0xcc>
    64ce:	f6 fe       	sbrs	r15, 6
    64d0:	05 c0       	rjmp	.+10     	; 0x64dc <vfprintf+0xbe>
    64d2:	98 9c       	mul	r9, r8
    64d4:	90 2c       	mov	r9, r0
    64d6:	11 24       	eor	r1, r1
    64d8:	98 0e       	add	r9, r24
    64da:	15 c0       	rjmp	.+42     	; 0x6506 <vfprintf+0xe8>
    64dc:	e8 9c       	mul	r14, r8
    64de:	e0 2c       	mov	r14, r0
    64e0:	11 24       	eor	r1, r1
    64e2:	e8 0e       	add	r14, r24
    64e4:	f0 e2       	ldi	r31, 0x20	; 32
    64e6:	ff 2a       	or	r15, r31
    64e8:	0e c0       	rjmp	.+28     	; 0x6506 <vfprintf+0xe8>
    64ea:	9e 32       	cpi	r25, 0x2E	; 46
    64ec:	29 f4       	brne	.+10     	; 0x64f8 <vfprintf+0xda>
    64ee:	f6 fc       	sbrc	r15, 6
    64f0:	6b c1       	rjmp	.+726    	; 0x67c8 <vfprintf+0x3aa>
    64f2:	40 e4       	ldi	r20, 0x40	; 64
    64f4:	f4 2a       	or	r15, r20
    64f6:	07 c0       	rjmp	.+14     	; 0x6506 <vfprintf+0xe8>
    64f8:	9c 36       	cpi	r25, 0x6C	; 108
    64fa:	19 f4       	brne	.+6      	; 0x6502 <vfprintf+0xe4>
    64fc:	50 e8       	ldi	r21, 0x80	; 128
    64fe:	f5 2a       	or	r15, r21
    6500:	02 c0       	rjmp	.+4      	; 0x6506 <vfprintf+0xe8>
    6502:	98 36       	cpi	r25, 0x68	; 104
    6504:	49 f4       	brne	.+18     	; 0x6518 <vfprintf+0xfa>
    6506:	f2 01       	movw	r30, r4
    6508:	23 fd       	sbrc	r18, 3
    650a:	95 91       	lpm	r25, Z+
    650c:	23 ff       	sbrs	r18, 3
    650e:	91 91       	ld	r25, Z+
    6510:	2f 01       	movw	r4, r30
    6512:	99 23       	and	r25, r25
    6514:	09 f0       	breq	.+2      	; 0x6518 <vfprintf+0xfa>
    6516:	b8 cf       	rjmp	.-144    	; 0x6488 <vfprintf+0x6a>
    6518:	89 2f       	mov	r24, r25
    651a:	85 54       	subi	r24, 0x45	; 69
    651c:	83 30       	cpi	r24, 0x03	; 3
    651e:	18 f0       	brcs	.+6      	; 0x6526 <vfprintf+0x108>
    6520:	80 52       	subi	r24, 0x20	; 32
    6522:	83 30       	cpi	r24, 0x03	; 3
    6524:	38 f4       	brcc	.+14     	; 0x6534 <vfprintf+0x116>
    6526:	44 e0       	ldi	r20, 0x04	; 4
    6528:	50 e0       	ldi	r21, 0x00	; 0
    652a:	a4 0e       	add	r10, r20
    652c:	b5 1e       	adc	r11, r21
    652e:	5f e3       	ldi	r21, 0x3F	; 63
    6530:	59 83       	std	Y+1, r21	; 0x01
    6532:	0f c0       	rjmp	.+30     	; 0x6552 <vfprintf+0x134>
    6534:	93 36       	cpi	r25, 0x63	; 99
    6536:	31 f0       	breq	.+12     	; 0x6544 <vfprintf+0x126>
    6538:	93 37       	cpi	r25, 0x73	; 115
    653a:	79 f0       	breq	.+30     	; 0x655a <vfprintf+0x13c>
    653c:	93 35       	cpi	r25, 0x53	; 83
    653e:	09 f0       	breq	.+2      	; 0x6542 <vfprintf+0x124>
    6540:	56 c0       	rjmp	.+172    	; 0x65ee <vfprintf+0x1d0>
    6542:	20 c0       	rjmp	.+64     	; 0x6584 <vfprintf+0x166>
    6544:	f5 01       	movw	r30, r10
    6546:	80 81       	ld	r24, Z
    6548:	89 83       	std	Y+1, r24	; 0x01
    654a:	42 e0       	ldi	r20, 0x02	; 2
    654c:	50 e0       	ldi	r21, 0x00	; 0
    654e:	a4 0e       	add	r10, r20
    6550:	b5 1e       	adc	r11, r21
    6552:	61 01       	movw	r12, r2
    6554:	01 e0       	ldi	r16, 0x01	; 1
    6556:	10 e0       	ldi	r17, 0x00	; 0
    6558:	12 c0       	rjmp	.+36     	; 0x657e <vfprintf+0x160>
    655a:	f5 01       	movw	r30, r10
    655c:	c0 80       	ld	r12, Z
    655e:	d1 80       	ldd	r13, Z+1	; 0x01
    6560:	f6 fc       	sbrc	r15, 6
    6562:	03 c0       	rjmp	.+6      	; 0x656a <vfprintf+0x14c>
    6564:	6f ef       	ldi	r22, 0xFF	; 255
    6566:	7f ef       	ldi	r23, 0xFF	; 255
    6568:	02 c0       	rjmp	.+4      	; 0x656e <vfprintf+0x150>
    656a:	69 2d       	mov	r22, r9
    656c:	70 e0       	ldi	r23, 0x00	; 0
    656e:	42 e0       	ldi	r20, 0x02	; 2
    6570:	50 e0       	ldi	r21, 0x00	; 0
    6572:	a4 0e       	add	r10, r20
    6574:	b5 1e       	adc	r11, r21
    6576:	c6 01       	movw	r24, r12
    6578:	0e 94 f7 33 	call	0x67ee	; 0x67ee <strnlen>
    657c:	8c 01       	movw	r16, r24
    657e:	5f e7       	ldi	r21, 0x7F	; 127
    6580:	f5 22       	and	r15, r21
    6582:	14 c0       	rjmp	.+40     	; 0x65ac <vfprintf+0x18e>
    6584:	f5 01       	movw	r30, r10
    6586:	c0 80       	ld	r12, Z
    6588:	d1 80       	ldd	r13, Z+1	; 0x01
    658a:	f6 fc       	sbrc	r15, 6
    658c:	03 c0       	rjmp	.+6      	; 0x6594 <vfprintf+0x176>
    658e:	6f ef       	ldi	r22, 0xFF	; 255
    6590:	7f ef       	ldi	r23, 0xFF	; 255
    6592:	02 c0       	rjmp	.+4      	; 0x6598 <vfprintf+0x17a>
    6594:	69 2d       	mov	r22, r9
    6596:	70 e0       	ldi	r23, 0x00	; 0
    6598:	42 e0       	ldi	r20, 0x02	; 2
    659a:	50 e0       	ldi	r21, 0x00	; 0
    659c:	a4 0e       	add	r10, r20
    659e:	b5 1e       	adc	r11, r21
    65a0:	c6 01       	movw	r24, r12
    65a2:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <strnlen_P>
    65a6:	8c 01       	movw	r16, r24
    65a8:	50 e8       	ldi	r21, 0x80	; 128
    65aa:	f5 2a       	or	r15, r21
    65ac:	f3 fe       	sbrs	r15, 3
    65ae:	07 c0       	rjmp	.+14     	; 0x65be <vfprintf+0x1a0>
    65b0:	1a c0       	rjmp	.+52     	; 0x65e6 <vfprintf+0x1c8>
    65b2:	80 e2       	ldi	r24, 0x20	; 32
    65b4:	90 e0       	ldi	r25, 0x00	; 0
    65b6:	b3 01       	movw	r22, r6
    65b8:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    65bc:	ea 94       	dec	r14
    65be:	8e 2d       	mov	r24, r14
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	08 17       	cp	r16, r24
    65c4:	19 07       	cpc	r17, r25
    65c6:	a8 f3       	brcs	.-22     	; 0x65b2 <vfprintf+0x194>
    65c8:	0e c0       	rjmp	.+28     	; 0x65e6 <vfprintf+0x1c8>
    65ca:	f6 01       	movw	r30, r12
    65cc:	f7 fc       	sbrc	r15, 7
    65ce:	85 91       	lpm	r24, Z+
    65d0:	f7 fe       	sbrs	r15, 7
    65d2:	81 91       	ld	r24, Z+
    65d4:	6f 01       	movw	r12, r30
    65d6:	90 e0       	ldi	r25, 0x00	; 0
    65d8:	b3 01       	movw	r22, r6
    65da:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    65de:	e1 10       	cpse	r14, r1
    65e0:	ea 94       	dec	r14
    65e2:	01 50       	subi	r16, 0x01	; 1
    65e4:	10 40       	sbci	r17, 0x00	; 0
    65e6:	01 15       	cp	r16, r1
    65e8:	11 05       	cpc	r17, r1
    65ea:	79 f7       	brne	.-34     	; 0x65ca <vfprintf+0x1ac>
    65ec:	ea c0       	rjmp	.+468    	; 0x67c2 <vfprintf+0x3a4>
    65ee:	94 36       	cpi	r25, 0x64	; 100
    65f0:	11 f0       	breq	.+4      	; 0x65f6 <vfprintf+0x1d8>
    65f2:	99 36       	cpi	r25, 0x69	; 105
    65f4:	69 f5       	brne	.+90     	; 0x6650 <vfprintf+0x232>
    65f6:	f7 fe       	sbrs	r15, 7
    65f8:	08 c0       	rjmp	.+16     	; 0x660a <vfprintf+0x1ec>
    65fa:	f5 01       	movw	r30, r10
    65fc:	20 81       	ld	r18, Z
    65fe:	31 81       	ldd	r19, Z+1	; 0x01
    6600:	42 81       	ldd	r20, Z+2	; 0x02
    6602:	53 81       	ldd	r21, Z+3	; 0x03
    6604:	84 e0       	ldi	r24, 0x04	; 4
    6606:	90 e0       	ldi	r25, 0x00	; 0
    6608:	0a c0       	rjmp	.+20     	; 0x661e <vfprintf+0x200>
    660a:	f5 01       	movw	r30, r10
    660c:	80 81       	ld	r24, Z
    660e:	91 81       	ldd	r25, Z+1	; 0x01
    6610:	9c 01       	movw	r18, r24
    6612:	44 27       	eor	r20, r20
    6614:	37 fd       	sbrc	r19, 7
    6616:	40 95       	com	r20
    6618:	54 2f       	mov	r21, r20
    661a:	82 e0       	ldi	r24, 0x02	; 2
    661c:	90 e0       	ldi	r25, 0x00	; 0
    661e:	a8 0e       	add	r10, r24
    6620:	b9 1e       	adc	r11, r25
    6622:	9f e6       	ldi	r25, 0x6F	; 111
    6624:	f9 22       	and	r15, r25
    6626:	57 ff       	sbrs	r21, 7
    6628:	09 c0       	rjmp	.+18     	; 0x663c <vfprintf+0x21e>
    662a:	50 95       	com	r21
    662c:	40 95       	com	r20
    662e:	30 95       	com	r19
    6630:	21 95       	neg	r18
    6632:	3f 4f       	sbci	r19, 0xFF	; 255
    6634:	4f 4f       	sbci	r20, 0xFF	; 255
    6636:	5f 4f       	sbci	r21, 0xFF	; 255
    6638:	e0 e8       	ldi	r30, 0x80	; 128
    663a:	fe 2a       	or	r15, r30
    663c:	ca 01       	movw	r24, r20
    663e:	b9 01       	movw	r22, r18
    6640:	a1 01       	movw	r20, r2
    6642:	2a e0       	ldi	r18, 0x0A	; 10
    6644:	30 e0       	ldi	r19, 0x00	; 0
    6646:	0e 94 2e 34 	call	0x685c	; 0x685c <__ultoa_invert>
    664a:	d8 2e       	mov	r13, r24
    664c:	d2 18       	sub	r13, r2
    664e:	40 c0       	rjmp	.+128    	; 0x66d0 <vfprintf+0x2b2>
    6650:	95 37       	cpi	r25, 0x75	; 117
    6652:	29 f4       	brne	.+10     	; 0x665e <vfprintf+0x240>
    6654:	1f 2d       	mov	r17, r15
    6656:	1f 7e       	andi	r17, 0xEF	; 239
    6658:	2a e0       	ldi	r18, 0x0A	; 10
    665a:	30 e0       	ldi	r19, 0x00	; 0
    665c:	1d c0       	rjmp	.+58     	; 0x6698 <vfprintf+0x27a>
    665e:	1f 2d       	mov	r17, r15
    6660:	19 7f       	andi	r17, 0xF9	; 249
    6662:	9f 36       	cpi	r25, 0x6F	; 111
    6664:	61 f0       	breq	.+24     	; 0x667e <vfprintf+0x260>
    6666:	90 37       	cpi	r25, 0x70	; 112
    6668:	20 f4       	brcc	.+8      	; 0x6672 <vfprintf+0x254>
    666a:	98 35       	cpi	r25, 0x58	; 88
    666c:	09 f0       	breq	.+2      	; 0x6670 <vfprintf+0x252>
    666e:	ac c0       	rjmp	.+344    	; 0x67c8 <vfprintf+0x3aa>
    6670:	0f c0       	rjmp	.+30     	; 0x6690 <vfprintf+0x272>
    6672:	90 37       	cpi	r25, 0x70	; 112
    6674:	39 f0       	breq	.+14     	; 0x6684 <vfprintf+0x266>
    6676:	98 37       	cpi	r25, 0x78	; 120
    6678:	09 f0       	breq	.+2      	; 0x667c <vfprintf+0x25e>
    667a:	a6 c0       	rjmp	.+332    	; 0x67c8 <vfprintf+0x3aa>
    667c:	04 c0       	rjmp	.+8      	; 0x6686 <vfprintf+0x268>
    667e:	28 e0       	ldi	r18, 0x08	; 8
    6680:	30 e0       	ldi	r19, 0x00	; 0
    6682:	0a c0       	rjmp	.+20     	; 0x6698 <vfprintf+0x27a>
    6684:	10 61       	ori	r17, 0x10	; 16
    6686:	14 fd       	sbrc	r17, 4
    6688:	14 60       	ori	r17, 0x04	; 4
    668a:	20 e1       	ldi	r18, 0x10	; 16
    668c:	30 e0       	ldi	r19, 0x00	; 0
    668e:	04 c0       	rjmp	.+8      	; 0x6698 <vfprintf+0x27a>
    6690:	14 fd       	sbrc	r17, 4
    6692:	16 60       	ori	r17, 0x06	; 6
    6694:	20 e1       	ldi	r18, 0x10	; 16
    6696:	32 e0       	ldi	r19, 0x02	; 2
    6698:	17 ff       	sbrs	r17, 7
    669a:	08 c0       	rjmp	.+16     	; 0x66ac <vfprintf+0x28e>
    669c:	f5 01       	movw	r30, r10
    669e:	60 81       	ld	r22, Z
    66a0:	71 81       	ldd	r23, Z+1	; 0x01
    66a2:	82 81       	ldd	r24, Z+2	; 0x02
    66a4:	93 81       	ldd	r25, Z+3	; 0x03
    66a6:	44 e0       	ldi	r20, 0x04	; 4
    66a8:	50 e0       	ldi	r21, 0x00	; 0
    66aa:	08 c0       	rjmp	.+16     	; 0x66bc <vfprintf+0x29e>
    66ac:	f5 01       	movw	r30, r10
    66ae:	80 81       	ld	r24, Z
    66b0:	91 81       	ldd	r25, Z+1	; 0x01
    66b2:	bc 01       	movw	r22, r24
    66b4:	80 e0       	ldi	r24, 0x00	; 0
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	42 e0       	ldi	r20, 0x02	; 2
    66ba:	50 e0       	ldi	r21, 0x00	; 0
    66bc:	a4 0e       	add	r10, r20
    66be:	b5 1e       	adc	r11, r21
    66c0:	a1 01       	movw	r20, r2
    66c2:	0e 94 2e 34 	call	0x685c	; 0x685c <__ultoa_invert>
    66c6:	d8 2e       	mov	r13, r24
    66c8:	d2 18       	sub	r13, r2
    66ca:	8f e7       	ldi	r24, 0x7F	; 127
    66cc:	f8 2e       	mov	r15, r24
    66ce:	f1 22       	and	r15, r17
    66d0:	f6 fe       	sbrs	r15, 6
    66d2:	0b c0       	rjmp	.+22     	; 0x66ea <vfprintf+0x2cc>
    66d4:	5e ef       	ldi	r21, 0xFE	; 254
    66d6:	f5 22       	and	r15, r21
    66d8:	d9 14       	cp	r13, r9
    66da:	38 f4       	brcc	.+14     	; 0x66ea <vfprintf+0x2cc>
    66dc:	f4 fe       	sbrs	r15, 4
    66de:	07 c0       	rjmp	.+14     	; 0x66ee <vfprintf+0x2d0>
    66e0:	f2 fc       	sbrc	r15, 2
    66e2:	05 c0       	rjmp	.+10     	; 0x66ee <vfprintf+0x2d0>
    66e4:	8f ee       	ldi	r24, 0xEF	; 239
    66e6:	f8 22       	and	r15, r24
    66e8:	02 c0       	rjmp	.+4      	; 0x66ee <vfprintf+0x2d0>
    66ea:	1d 2d       	mov	r17, r13
    66ec:	01 c0       	rjmp	.+2      	; 0x66f0 <vfprintf+0x2d2>
    66ee:	19 2d       	mov	r17, r9
    66f0:	f4 fe       	sbrs	r15, 4
    66f2:	0d c0       	rjmp	.+26     	; 0x670e <vfprintf+0x2f0>
    66f4:	fe 01       	movw	r30, r28
    66f6:	ed 0d       	add	r30, r13
    66f8:	f1 1d       	adc	r31, r1
    66fa:	80 81       	ld	r24, Z
    66fc:	80 33       	cpi	r24, 0x30	; 48
    66fe:	19 f4       	brne	.+6      	; 0x6706 <vfprintf+0x2e8>
    6700:	99 ee       	ldi	r25, 0xE9	; 233
    6702:	f9 22       	and	r15, r25
    6704:	08 c0       	rjmp	.+16     	; 0x6716 <vfprintf+0x2f8>
    6706:	1f 5f       	subi	r17, 0xFF	; 255
    6708:	f2 fe       	sbrs	r15, 2
    670a:	05 c0       	rjmp	.+10     	; 0x6716 <vfprintf+0x2f8>
    670c:	03 c0       	rjmp	.+6      	; 0x6714 <vfprintf+0x2f6>
    670e:	8f 2d       	mov	r24, r15
    6710:	86 78       	andi	r24, 0x86	; 134
    6712:	09 f0       	breq	.+2      	; 0x6716 <vfprintf+0x2f8>
    6714:	1f 5f       	subi	r17, 0xFF	; 255
    6716:	0f 2d       	mov	r16, r15
    6718:	f3 fc       	sbrc	r15, 3
    671a:	14 c0       	rjmp	.+40     	; 0x6744 <vfprintf+0x326>
    671c:	f0 fe       	sbrs	r15, 0
    671e:	0f c0       	rjmp	.+30     	; 0x673e <vfprintf+0x320>
    6720:	1e 15       	cp	r17, r14
    6722:	10 f0       	brcs	.+4      	; 0x6728 <vfprintf+0x30a>
    6724:	9d 2c       	mov	r9, r13
    6726:	0b c0       	rjmp	.+22     	; 0x673e <vfprintf+0x320>
    6728:	9d 2c       	mov	r9, r13
    672a:	9e 0c       	add	r9, r14
    672c:	91 1a       	sub	r9, r17
    672e:	1e 2d       	mov	r17, r14
    6730:	06 c0       	rjmp	.+12     	; 0x673e <vfprintf+0x320>
    6732:	80 e2       	ldi	r24, 0x20	; 32
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	b3 01       	movw	r22, r6
    6738:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    673c:	1f 5f       	subi	r17, 0xFF	; 255
    673e:	1e 15       	cp	r17, r14
    6740:	c0 f3       	brcs	.-16     	; 0x6732 <vfprintf+0x314>
    6742:	04 c0       	rjmp	.+8      	; 0x674c <vfprintf+0x32e>
    6744:	1e 15       	cp	r17, r14
    6746:	10 f4       	brcc	.+4      	; 0x674c <vfprintf+0x32e>
    6748:	e1 1a       	sub	r14, r17
    674a:	01 c0       	rjmp	.+2      	; 0x674e <vfprintf+0x330>
    674c:	ee 24       	eor	r14, r14
    674e:	04 ff       	sbrs	r16, 4
    6750:	0f c0       	rjmp	.+30     	; 0x6770 <vfprintf+0x352>
    6752:	80 e3       	ldi	r24, 0x30	; 48
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	b3 01       	movw	r22, r6
    6758:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    675c:	02 ff       	sbrs	r16, 2
    675e:	1d c0       	rjmp	.+58     	; 0x679a <vfprintf+0x37c>
    6760:	01 fd       	sbrc	r16, 1
    6762:	03 c0       	rjmp	.+6      	; 0x676a <vfprintf+0x34c>
    6764:	88 e7       	ldi	r24, 0x78	; 120
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	0e c0       	rjmp	.+28     	; 0x6786 <vfprintf+0x368>
    676a:	88 e5       	ldi	r24, 0x58	; 88
    676c:	90 e0       	ldi	r25, 0x00	; 0
    676e:	0b c0       	rjmp	.+22     	; 0x6786 <vfprintf+0x368>
    6770:	80 2f       	mov	r24, r16
    6772:	86 78       	andi	r24, 0x86	; 134
    6774:	91 f0       	breq	.+36     	; 0x679a <vfprintf+0x37c>
    6776:	01 ff       	sbrs	r16, 1
    6778:	02 c0       	rjmp	.+4      	; 0x677e <vfprintf+0x360>
    677a:	8b e2       	ldi	r24, 0x2B	; 43
    677c:	01 c0       	rjmp	.+2      	; 0x6780 <vfprintf+0x362>
    677e:	80 e2       	ldi	r24, 0x20	; 32
    6780:	f7 fc       	sbrc	r15, 7
    6782:	8d e2       	ldi	r24, 0x2D	; 45
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	b3 01       	movw	r22, r6
    6788:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    678c:	06 c0       	rjmp	.+12     	; 0x679a <vfprintf+0x37c>
    678e:	80 e3       	ldi	r24, 0x30	; 48
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	b3 01       	movw	r22, r6
    6794:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    6798:	9a 94       	dec	r9
    679a:	d9 14       	cp	r13, r9
    679c:	c0 f3       	brcs	.-16     	; 0x678e <vfprintf+0x370>
    679e:	da 94       	dec	r13
    67a0:	f1 01       	movw	r30, r2
    67a2:	ed 0d       	add	r30, r13
    67a4:	f1 1d       	adc	r31, r1
    67a6:	80 81       	ld	r24, Z
    67a8:	90 e0       	ldi	r25, 0x00	; 0
    67aa:	b3 01       	movw	r22, r6
    67ac:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    67b0:	dd 20       	and	r13, r13
    67b2:	a9 f7       	brne	.-22     	; 0x679e <vfprintf+0x380>
    67b4:	06 c0       	rjmp	.+12     	; 0x67c2 <vfprintf+0x3a4>
    67b6:	80 e2       	ldi	r24, 0x20	; 32
    67b8:	90 e0       	ldi	r25, 0x00	; 0
    67ba:	b3 01       	movw	r22, r6
    67bc:	0e 94 02 34 	call	0x6804	; 0x6804 <fputc>
    67c0:	ea 94       	dec	r14
    67c2:	ee 20       	and	r14, r14
    67c4:	c1 f7       	brne	.-16     	; 0x67b6 <vfprintf+0x398>
    67c6:	43 ce       	rjmp	.-890    	; 0x644e <vfprintf+0x30>
    67c8:	f3 01       	movw	r30, r6
    67ca:	66 81       	ldd	r22, Z+6	; 0x06
    67cc:	77 81       	ldd	r23, Z+7	; 0x07
    67ce:	cb 01       	movw	r24, r22
    67d0:	2b 96       	adiw	r28, 0x0b	; 11
    67d2:	e2 e1       	ldi	r30, 0x12	; 18
    67d4:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__epilogue_restores__>

000067d8 <strnlen_P>:
    67d8:	fc 01       	movw	r30, r24
    67da:	05 90       	lpm	r0, Z+
    67dc:	61 50       	subi	r22, 0x01	; 1
    67de:	70 40       	sbci	r23, 0x00	; 0
    67e0:	01 10       	cpse	r0, r1
    67e2:	d8 f7       	brcc	.-10     	; 0x67da <strnlen_P+0x2>
    67e4:	80 95       	com	r24
    67e6:	90 95       	com	r25
    67e8:	8e 0f       	add	r24, r30
    67ea:	9f 1f       	adc	r25, r31
    67ec:	08 95       	ret

000067ee <strnlen>:
    67ee:	fc 01       	movw	r30, r24
    67f0:	61 50       	subi	r22, 0x01	; 1
    67f2:	70 40       	sbci	r23, 0x00	; 0
    67f4:	01 90       	ld	r0, Z+
    67f6:	01 10       	cpse	r0, r1
    67f8:	d8 f7       	brcc	.-10     	; 0x67f0 <strnlen+0x2>
    67fa:	80 95       	com	r24
    67fc:	90 95       	com	r25
    67fe:	8e 0f       	add	r24, r30
    6800:	9f 1f       	adc	r25, r31
    6802:	08 95       	ret

00006804 <fputc>:
    6804:	0f 93       	push	r16
    6806:	1f 93       	push	r17
    6808:	cf 93       	push	r28
    680a:	df 93       	push	r29
    680c:	8c 01       	movw	r16, r24
    680e:	eb 01       	movw	r28, r22
    6810:	8b 81       	ldd	r24, Y+3	; 0x03
    6812:	81 ff       	sbrs	r24, 1
    6814:	1b c0       	rjmp	.+54     	; 0x684c <fputc+0x48>
    6816:	82 ff       	sbrs	r24, 2
    6818:	0d c0       	rjmp	.+26     	; 0x6834 <fputc+0x30>
    681a:	2e 81       	ldd	r18, Y+6	; 0x06
    681c:	3f 81       	ldd	r19, Y+7	; 0x07
    681e:	8c 81       	ldd	r24, Y+4	; 0x04
    6820:	9d 81       	ldd	r25, Y+5	; 0x05
    6822:	28 17       	cp	r18, r24
    6824:	39 07       	cpc	r19, r25
    6826:	64 f4       	brge	.+24     	; 0x6840 <fputc+0x3c>
    6828:	e8 81       	ld	r30, Y
    682a:	f9 81       	ldd	r31, Y+1	; 0x01
    682c:	01 93       	st	Z+, r16
    682e:	f9 83       	std	Y+1, r31	; 0x01
    6830:	e8 83       	st	Y, r30
    6832:	06 c0       	rjmp	.+12     	; 0x6840 <fputc+0x3c>
    6834:	e8 85       	ldd	r30, Y+8	; 0x08
    6836:	f9 85       	ldd	r31, Y+9	; 0x09
    6838:	80 2f       	mov	r24, r16
    683a:	09 95       	icall
    683c:	89 2b       	or	r24, r25
    683e:	31 f4       	brne	.+12     	; 0x684c <fputc+0x48>
    6840:	8e 81       	ldd	r24, Y+6	; 0x06
    6842:	9f 81       	ldd	r25, Y+7	; 0x07
    6844:	01 96       	adiw	r24, 0x01	; 1
    6846:	9f 83       	std	Y+7, r25	; 0x07
    6848:	8e 83       	std	Y+6, r24	; 0x06
    684a:	02 c0       	rjmp	.+4      	; 0x6850 <fputc+0x4c>
    684c:	0f ef       	ldi	r16, 0xFF	; 255
    684e:	1f ef       	ldi	r17, 0xFF	; 255
    6850:	c8 01       	movw	r24, r16
    6852:	df 91       	pop	r29
    6854:	cf 91       	pop	r28
    6856:	1f 91       	pop	r17
    6858:	0f 91       	pop	r16
    685a:	08 95       	ret

0000685c <__ultoa_invert>:
    685c:	fa 01       	movw	r30, r20
    685e:	aa 27       	eor	r26, r26
    6860:	28 30       	cpi	r18, 0x08	; 8
    6862:	51 f1       	breq	.+84     	; 0x68b8 <__ultoa_invert+0x5c>
    6864:	20 31       	cpi	r18, 0x10	; 16
    6866:	81 f1       	breq	.+96     	; 0x68c8 <__ultoa_invert+0x6c>
    6868:	e8 94       	clt
    686a:	6f 93       	push	r22
    686c:	6e 7f       	andi	r22, 0xFE	; 254
    686e:	6e 5f       	subi	r22, 0xFE	; 254
    6870:	7f 4f       	sbci	r23, 0xFF	; 255
    6872:	8f 4f       	sbci	r24, 0xFF	; 255
    6874:	9f 4f       	sbci	r25, 0xFF	; 255
    6876:	af 4f       	sbci	r26, 0xFF	; 255
    6878:	b1 e0       	ldi	r27, 0x01	; 1
    687a:	3e d0       	rcall	.+124    	; 0x68f8 <__ultoa_invert+0x9c>
    687c:	b4 e0       	ldi	r27, 0x04	; 4
    687e:	3c d0       	rcall	.+120    	; 0x68f8 <__ultoa_invert+0x9c>
    6880:	67 0f       	add	r22, r23
    6882:	78 1f       	adc	r23, r24
    6884:	89 1f       	adc	r24, r25
    6886:	9a 1f       	adc	r25, r26
    6888:	a1 1d       	adc	r26, r1
    688a:	68 0f       	add	r22, r24
    688c:	79 1f       	adc	r23, r25
    688e:	8a 1f       	adc	r24, r26
    6890:	91 1d       	adc	r25, r1
    6892:	a1 1d       	adc	r26, r1
    6894:	6a 0f       	add	r22, r26
    6896:	71 1d       	adc	r23, r1
    6898:	81 1d       	adc	r24, r1
    689a:	91 1d       	adc	r25, r1
    689c:	a1 1d       	adc	r26, r1
    689e:	20 d0       	rcall	.+64     	; 0x68e0 <__ultoa_invert+0x84>
    68a0:	09 f4       	brne	.+2      	; 0x68a4 <__ultoa_invert+0x48>
    68a2:	68 94       	set
    68a4:	3f 91       	pop	r19
    68a6:	2a e0       	ldi	r18, 0x0A	; 10
    68a8:	26 9f       	mul	r18, r22
    68aa:	11 24       	eor	r1, r1
    68ac:	30 19       	sub	r19, r0
    68ae:	30 5d       	subi	r19, 0xD0	; 208
    68b0:	31 93       	st	Z+, r19
    68b2:	de f6       	brtc	.-74     	; 0x686a <__ultoa_invert+0xe>
    68b4:	cf 01       	movw	r24, r30
    68b6:	08 95       	ret
    68b8:	46 2f       	mov	r20, r22
    68ba:	47 70       	andi	r20, 0x07	; 7
    68bc:	40 5d       	subi	r20, 0xD0	; 208
    68be:	41 93       	st	Z+, r20
    68c0:	b3 e0       	ldi	r27, 0x03	; 3
    68c2:	0f d0       	rcall	.+30     	; 0x68e2 <__ultoa_invert+0x86>
    68c4:	c9 f7       	brne	.-14     	; 0x68b8 <__ultoa_invert+0x5c>
    68c6:	f6 cf       	rjmp	.-20     	; 0x68b4 <__ultoa_invert+0x58>
    68c8:	46 2f       	mov	r20, r22
    68ca:	4f 70       	andi	r20, 0x0F	; 15
    68cc:	40 5d       	subi	r20, 0xD0	; 208
    68ce:	4a 33       	cpi	r20, 0x3A	; 58
    68d0:	18 f0       	brcs	.+6      	; 0x68d8 <__ultoa_invert+0x7c>
    68d2:	49 5d       	subi	r20, 0xD9	; 217
    68d4:	31 fd       	sbrc	r19, 1
    68d6:	40 52       	subi	r20, 0x20	; 32
    68d8:	41 93       	st	Z+, r20
    68da:	02 d0       	rcall	.+4      	; 0x68e0 <__ultoa_invert+0x84>
    68dc:	a9 f7       	brne	.-22     	; 0x68c8 <__ultoa_invert+0x6c>
    68de:	ea cf       	rjmp	.-44     	; 0x68b4 <__ultoa_invert+0x58>
    68e0:	b4 e0       	ldi	r27, 0x04	; 4
    68e2:	a6 95       	lsr	r26
    68e4:	97 95       	ror	r25
    68e6:	87 95       	ror	r24
    68e8:	77 95       	ror	r23
    68ea:	67 95       	ror	r22
    68ec:	ba 95       	dec	r27
    68ee:	c9 f7       	brne	.-14     	; 0x68e2 <__ultoa_invert+0x86>
    68f0:	00 97       	sbiw	r24, 0x00	; 0
    68f2:	61 05       	cpc	r22, r1
    68f4:	71 05       	cpc	r23, r1
    68f6:	08 95       	ret
    68f8:	9b 01       	movw	r18, r22
    68fa:	ac 01       	movw	r20, r24
    68fc:	0a 2e       	mov	r0, r26
    68fe:	06 94       	lsr	r0
    6900:	57 95       	ror	r21
    6902:	47 95       	ror	r20
    6904:	37 95       	ror	r19
    6906:	27 95       	ror	r18
    6908:	ba 95       	dec	r27
    690a:	c9 f7       	brne	.-14     	; 0x68fe <__ultoa_invert+0xa2>
    690c:	62 0f       	add	r22, r18
    690e:	73 1f       	adc	r23, r19
    6910:	84 1f       	adc	r24, r20
    6912:	95 1f       	adc	r25, r21
    6914:	a0 1d       	adc	r26, r0
    6916:	08 95       	ret

00006918 <_exit>:
    6918:	f8 94       	cli

0000691a <__stop_program>:
    691a:	ff cf       	rjmp	.-2      	; 0x691a <__stop_program>
