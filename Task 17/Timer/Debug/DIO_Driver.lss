
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004600  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00004600  00004694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800070  00800070  000046a4  2**0
                  ALLOC
  3 .stab         00004a4c  00000000  00000000  000046a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002255  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b345  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b485  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e129  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000eed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fa93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5e 0c 	jmp	0x18bc	; 0x18bc <__vector_1>
       8:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__vector_2>
       c:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__vector_10>
      2c:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <main>
      8a:	0c 94 fe 22 	jmp	0x45fc	; 0x45fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 20 	jmp	0x408a	; 0x408a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 20 	jmp	0x408a	; 0x408a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 45 20 	jmp	0x408a	; 0x408a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 45 20 	jmp	0x408a	; 0x408a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 45 20 	jmp	0x408a	; 0x408a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2d 20 	jmp	0x405a	; 0x405a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 49 20 	jmp	0x4092	; 0x4092 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
	/* Set Preload Value */
	TIMERS_u8_TCNT0_REG = 192;
	#else if TIMER_MODE == CTC_MODE
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
	/* SET Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = 99;
     b6a:	ec e5       	ldi	r30, 0x5C	; 92
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	83 e6       	ldi	r24, 0x63	; 99
     b70:	80 83       	st	Z, r24
	
	/* Enable Overflow Interrupt */	
	#if INTERRUPT_MODE == Overflow_Mode
	SET_BIT(TIMERS_u8_TIMSK_REG, TIMERS_TIMSK_TOIE0_PIN);
	#else if INTERRUPT_MODE == CTC_Mode
	SET_BIT(TIMERS_u8_TIMSK_REG, TIMERS_TIMSK_TOIE1_PIN);
     b72:	a9 e5       	ldi	r26, 0x59	; 89
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e9 e5       	ldi	r30, 0x59	; 89
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	8c 93       	st	X, r24
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
     b80:	a3 e5       	ldi	r26, 0x53	; 83
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e3 e5       	ldi	r30, 0x53	; 83
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	8e 7f       	andi	r24, 0xFE	; 254
     b8c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
     b8e:	a3 e5       	ldi	r26, 0x53	; 83
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e3 e5       	ldi	r30, 0x53	; 83
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
     b9c:	a3 e5       	ldi	r26, 0x53	; 83
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8b 7f       	andi	r24, 0xFB	; 251
     ba8:	8c 93       	st	X, r24
}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <TIMERS_u8TIMER0SetCallBack+0x6>
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	9b 83       	std	Y+3, r25	; 0x03
     bbe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	9b 81       	ldd	r25, Y+3	; 0x03
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	39 f0       	breq	.+14     	; 0xbda <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	9b 81       	ldd	r25, Y+3	; 0x03
     bd0:	90 93 71 00 	sts	0x0071, r25
     bd4:	80 93 70 00 	sts	0x0070, r24
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     bda:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <TIMERS_u8TIMER0CTCSetCallBack+0x6>
     bf0:	0f 92       	push	r0
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	9b 83       	std	Y+3, r25	; 0x03
     bf8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	9b 81       	ldd	r25, Y+3	; 0x03
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	39 f0       	breq	.+14     	; 0xc14 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	9b 81       	ldd	r25, Y+3	; 0x03
     c0a:	90 93 73 00 	sts	0x0073, r25
     c0e:	80 93 72 00 	sts	0x0072, r24
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     c14:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     c16:	89 81       	ldd	r24, Y+1	; 0x01
}
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
     c24:	1f 92       	push	r1
     c26:	0f 92       	push	r0
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	0f 92       	push	r0
     c2c:	11 24       	eor	r1, r1
     c2e:	2f 93       	push	r18
     c30:	3f 93       	push	r19
     c32:	4f 93       	push	r20
     c34:	5f 93       	push	r21
     c36:	6f 93       	push	r22
     c38:	7f 93       	push	r23
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	af 93       	push	r26
     c40:	bf 93       	push	r27
     c42:	ef 93       	push	r30
     c44:	ff 93       	push	r31
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     c4e:	80 91 74 00 	lds	r24, 0x0074
     c52:	90 91 75 00 	lds	r25, 0x0075
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	90 93 75 00 	sts	0x0075, r25
     c5c:	80 93 74 00 	sts	0x0074, r24
	if(Local_u16CounterOVF == 3907){
     c60:	80 91 74 00 	lds	r24, 0x0074
     c64:	90 91 75 00 	lds	r25, 0x0075
     c68:	2f e0       	ldi	r18, 0x0F	; 15
     c6a:	83 34       	cpi	r24, 0x43	; 67
     c6c:	92 07       	cpc	r25, r18
     c6e:	99 f4       	brne	.+38     	; 0xc96 <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
     c70:	e2 e5       	ldi	r30, 0x52	; 82
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 ec       	ldi	r24, 0xC0	; 192
     c76:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
     c78:	10 92 75 00 	sts	0x0075, r1
     c7c:	10 92 74 00 	sts	0x0074, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
     c80:	80 91 70 00 	lds	r24, 0x0070
     c84:	90 91 71 00 	lds	r25, 0x0071
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	29 f0       	breq	.+10     	; 0xc96 <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
     c8c:	e0 91 70 00 	lds	r30, 0x0070
     c90:	f0 91 71 00 	lds	r31, 0x0071
     c94:	09 95       	icall
		}
	}
}
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	0f 90       	pop	r0
     cb8:	1f 90       	pop	r1
     cba:	18 95       	reti

00000cbc <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	2f 93       	push	r18
     cc8:	3f 93       	push	r19
     cca:	4f 93       	push	r20
     ccc:	5f 93       	push	r21
     cce:	6f 93       	push	r22
     cd0:	7f 93       	push	r23
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	af 93       	push	r26
     cd8:	bf 93       	push	r27
     cda:	ef 93       	push	r30
     cdc:	ff 93       	push	r31
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
     ce6:	80 91 76 00 	lds	r24, 0x0076
     cea:	90 91 77 00 	lds	r25, 0x0077
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	90 93 77 00 	sts	0x0077, r25
     cf4:	80 93 76 00 	sts	0x0076, r24
	if(Local_u16CounterCTC == 1000){
     cf8:	80 91 76 00 	lds	r24, 0x0076
     cfc:	90 91 77 00 	lds	r25, 0x0077
     d00:	23 e0       	ldi	r18, 0x03	; 3
     d02:	88 3e       	cpi	r24, 0xE8	; 232
     d04:	92 07       	cpc	r25, r18
     d06:	79 f4       	brne	.+30     	; 0xd26 <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
     d08:	10 92 77 00 	sts	0x0077, r1
     d0c:	10 92 76 00 	sts	0x0076, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
     d10:	80 91 72 00 	lds	r24, 0x0072
     d14:	90 91 73 00 	lds	r25, 0x0073
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	29 f0       	breq	.+10     	; 0xd26 <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
     d1c:	e0 91 72 00 	lds	r30, 0x0072
     d20:	f0 91 73 00 	lds	r31, 0x0073
     d24:	09 95       	icall
		}
	}
}
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	ff 91       	pop	r31
     d2c:	ef 91       	pop	r30
     d2e:	bf 91       	pop	r27
     d30:	af 91       	pop	r26
     d32:	9f 91       	pop	r25
     d34:	8f 91       	pop	r24
     d36:	7f 91       	pop	r23
     d38:	6f 91       	pop	r22
     d3a:	5f 91       	pop	r21
     d3c:	4f 91       	pop	r20
     d3e:	3f 91       	pop	r19
     d40:	2f 91       	pop	r18
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	0f 90       	pop	r0
     d48:	1f 90       	pop	r1
     d4a:	18 95       	reti

00000d4c <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	00 d0       	rcall	.+0      	; 0xd52 <Switch_Init+0x6>
     d52:	00 d0       	rcall	.+0      	; 0xd54 <Switch_Init+0x8>
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9c 83       	std	Y+4, r25	; 0x04
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
     d60:	1a 82       	std	Y+2, r1	; 0x02
     d62:	19 82       	std	Y+1, r1	; 0x01
     d64:	50 c0       	rjmp	.+160    	; 0xe06 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
     d66:	29 81       	ldd	r18, Y+1	; 0x01
     d68:	3a 81       	ldd	r19, Y+2	; 0x02
     d6a:	c9 01       	movw	r24, r18
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	28 0f       	add	r18, r24
     d72:	39 1f       	adc	r19, r25
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	fc 01       	movw	r30, r24
     d7a:	e2 0f       	add	r30, r18
     d7c:	f3 1f       	adc	r31, r19
     d7e:	40 81       	ld	r20, Z
     d80:	29 81       	ldd	r18, Y+1	; 0x01
     d82:	3a 81       	ldd	r19, Y+2	; 0x02
     d84:	c9 01       	movw	r24, r18
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	28 0f       	add	r18, r24
     d8c:	39 1f       	adc	r19, r25
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	fc 01       	movw	r30, r24
     d94:	e2 0f       	add	r30, r18
     d96:	f3 1f       	adc	r31, r19
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	84 2f       	mov	r24, r20
     d9c:	69 2f       	mov	r22, r25
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
     da4:	29 81       	ldd	r18, Y+1	; 0x01
     da6:	3a 81       	ldd	r19, Y+2	; 0x02
     da8:	c9 01       	movw	r24, r18
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	28 0f       	add	r18, r24
     db0:	39 1f       	adc	r19, r25
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	fc 01       	movw	r30, r24
     db8:	e2 0f       	add	r30, r18
     dba:	f3 1f       	adc	r31, r19
     dbc:	50 81       	ld	r21, Z
     dbe:	29 81       	ldd	r18, Y+1	; 0x01
     dc0:	3a 81       	ldd	r19, Y+2	; 0x02
     dc2:	c9 01       	movw	r24, r18
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	28 0f       	add	r18, r24
     dca:	39 1f       	adc	r19, r25
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	fc 01       	movw	r30, r24
     dd2:	e2 0f       	add	r30, r18
     dd4:	f3 1f       	adc	r31, r19
     dd6:	41 81       	ldd	r20, Z+1	; 0x01
     dd8:	29 81       	ldd	r18, Y+1	; 0x01
     dda:	3a 81       	ldd	r19, Y+2	; 0x02
     ddc:	c9 01       	movw	r24, r18
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	28 0f       	add	r18, r24
     de4:	39 1f       	adc	r19, r25
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	fc 01       	movw	r30, r24
     dec:	e2 0f       	add	r30, r18
     dee:	f3 1f       	adc	r31, r19
     df0:	92 81       	ldd	r25, Z+2	; 0x02
     df2:	85 2f       	mov	r24, r21
     df4:	64 2f       	mov	r22, r20
     df6:	49 2f       	mov	r20, r25
     df8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	9a 81       	ldd	r25, Y+2	; 0x02
     e10:	82 17       	cp	r24, r18
     e12:	93 07       	cpc	r25, r19
     e14:	0c f4       	brge	.+2      	; 0xe18 <Switch_Init+0xcc>
     e16:	a7 cf       	rjmp	.-178    	; 0xd66 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <Switch_GetValue+0x6>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <Switch_GetValue+0x8>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	7c 83       	std	Y+4, r23	; 0x04
     e3a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
     e3c:	e9 81       	ldd	r30, Y+1	; 0x01
     e3e:	fa 81       	ldd	r31, Y+2	; 0x02
     e40:	80 81       	ld	r24, Z
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	2b 81       	ldd	r18, Y+3	; 0x03
     e4a:	3c 81       	ldd	r19, Y+4	; 0x04
     e4c:	69 2f       	mov	r22, r25
     e4e:	a9 01       	movw	r20, r18
     e50:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <DIO_u8GetPinValue>
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <LCD_setPinDirection+0x6>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <LCD_setPinDirection+0x8>
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	6a 83       	std	Y+2, r22	; 0x02
     e74:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	88 30       	cpi	r24, 0x08	; 8
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <LCD_setPinDirection+0x1c>
     e7c:	d5 c0       	rjmp	.+426    	; 0x1028 <LCD_setPinDirection+0x1c6>
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	08 f0       	brcs	.+2      	; 0xe86 <LCD_setPinDirection+0x24>
     e84:	d1 c0       	rjmp	.+418    	; 0x1028 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	3d 83       	std	Y+5, r19	; 0x05
     e8e:	2c 83       	std	Y+4, r18	; 0x04
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <LCD_setPinDirection+0x3a>
     e9a:	43 c0       	rjmp	.+134    	; 0xf22 <LCD_setPinDirection+0xc0>
     e9c:	2c 81       	ldd	r18, Y+4	; 0x04
     e9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <LCD_setPinDirection+0x4e>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	9d 81       	ldd	r25, Y+5	; 0x05
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	71 f0       	breq	.+28     	; 0xeca <LCD_setPinDirection+0x68>
     eae:	bc c0       	rjmp	.+376    	; 0x1028 <LCD_setPinDirection+0x1c6>
     eb0:	2c 81       	ldd	r18, Y+4	; 0x04
     eb2:	3d 81       	ldd	r19, Y+5	; 0x05
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <LCD_setPinDirection+0x5a>
     eba:	5f c0       	rjmp	.+190    	; 0xf7a <LCD_setPinDirection+0x118>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	91 05       	cpc	r25, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <LCD_setPinDirection+0x66>
     ec6:	85 c0       	rjmp	.+266    	; 0xfd2 <LCD_setPinDirection+0x170>
     ec8:	af c0       	rjmp	.+350    	; 0x1028 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	a1 f4       	brne	.+40     	; 0xef8 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ed0:	aa e3       	ldi	r26, 0x3A	; 58
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ea e3       	ldi	r30, 0x3A	; 58
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <LCD_setPinDirection+0x8c>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <LCD_setPinDirection+0x88>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	98 c0       	rjmp	.+304    	; 0x1028 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
     ef8:	aa e3       	ldi	r26, 0x3A	; 58
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	ea e3       	ldi	r30, 0x3A	; 58
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <LCD_setPinDirection+0xb4>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <LCD_setPinDirection+0xb0>
     f1a:	80 95       	com	r24
     f1c:	84 23       	and	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	83 c0       	rjmp	.+262    	; 0x1028 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	a1 f4       	brne	.+40     	; 0xf50 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f28:	a7 e3       	ldi	r26, 0x37	; 55
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e7 e3       	ldi	r30, 0x37	; 55
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <LCD_setPinDirection+0xe4>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <LCD_setPinDirection+0xe0>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	6c c0       	rjmp	.+216    	; 0x1028 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
     f50:	a7 e3       	ldi	r26, 0x37	; 55
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e7 e3       	ldi	r30, 0x37	; 55
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <LCD_setPinDirection+0x10c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <LCD_setPinDirection+0x108>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	57 c0       	rjmp	.+174    	; 0x1028 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	a1 f4       	brne	.+40     	; 0xfa8 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f80:	a4 e3       	ldi	r26, 0x34	; 52
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e4 e3       	ldi	r30, 0x34	; 52
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <LCD_setPinDirection+0x13c>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <LCD_setPinDirection+0x138>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	40 c0       	rjmp	.+128    	; 0x1028 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
     fa8:	a4 e3       	ldi	r26, 0x34	; 52
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e4 e3       	ldi	r30, 0x34	; 52
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <LCD_setPinDirection+0x164>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <LCD_setPinDirection+0x160>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	2b c0       	rjmp	.+86     	; 0x1028 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	a1 f4       	brne	.+40     	; 0x1000 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fd8:	a1 e3       	ldi	r26, 0x31	; 49
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e1 e3       	ldi	r30, 0x31	; 49
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <LCD_setPinDirection+0x194>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <LCD_setPinDirection+0x190>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	14 c0       	rjmp	.+40     	; 0x1028 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    1000:	a1 e3       	ldi	r26, 0x31	; 49
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e1 e3       	ldi	r30, 0x31	; 49
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <LCD_setPinDirection+0x1bc>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <LCD_setPinDirection+0x1b8>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <LCD_setPinValue+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <LCD_setPinValue+0x8>
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
    104a:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	08 f0       	brcs	.+2      	; 0x1054 <LCD_setPinValue+0x1c>
    1052:	d5 c0       	rjmp	.+426    	; 0x11fe <LCD_setPinValue+0x1c6>
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	08 f0       	brcs	.+2      	; 0x105c <LCD_setPinValue+0x24>
    105a:	d1 c0       	rjmp	.+418    	; 0x11fe <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3d 83       	std	Y+5, r19	; 0x05
    1064:	2c 83       	std	Y+4, r18	; 0x04
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	9d 81       	ldd	r25, Y+5	; 0x05
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <LCD_setPinValue+0x3a>
    1070:	43 c0       	rjmp	.+134    	; 0x10f8 <LCD_setPinValue+0xc0>
    1072:	2c 81       	ldd	r18, Y+4	; 0x04
    1074:	3d 81       	ldd	r19, Y+5	; 0x05
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	2c f4       	brge	.+10     	; 0x1086 <LCD_setPinValue+0x4e>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	71 f0       	breq	.+28     	; 0x10a0 <LCD_setPinValue+0x68>
    1084:	bc c0       	rjmp	.+376    	; 0x11fe <LCD_setPinValue+0x1c6>
    1086:	2c 81       	ldd	r18, Y+4	; 0x04
    1088:	3d 81       	ldd	r19, Y+5	; 0x05
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	09 f4       	brne	.+2      	; 0x1092 <LCD_setPinValue+0x5a>
    1090:	5f c0       	rjmp	.+190    	; 0x1150 <LCD_setPinValue+0x118>
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	9d 81       	ldd	r25, Y+5	; 0x05
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	91 05       	cpc	r25, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <LCD_setPinValue+0x66>
    109c:	85 c0       	rjmp	.+266    	; 0x11a8 <LCD_setPinValue+0x170>
    109e:	af c0       	rjmp	.+350    	; 0x11fe <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	a1 f4       	brne	.+40     	; 0x10ce <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10a6:	ab e3       	ldi	r26, 0x3B	; 59
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	eb e3       	ldi	r30, 0x3B	; 59
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <LCD_setPinValue+0x8c>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <LCD_setPinValue+0x88>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	98 c0       	rjmp	.+304    	; 0x11fe <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    10ce:	ab e3       	ldi	r26, 0x3B	; 59
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	eb e3       	ldi	r30, 0x3B	; 59
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <LCD_setPinValue+0xb4>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <LCD_setPinValue+0xb0>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	83 c0       	rjmp	.+262    	; 0x11fe <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	a1 f4       	brne	.+40     	; 0x1126 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    10fe:	a8 e3       	ldi	r26, 0x38	; 56
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e8 e3       	ldi	r30, 0x38	; 56
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <LCD_setPinValue+0xe4>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <LCD_setPinValue+0xe0>
    1120:	84 2b       	or	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	6c c0       	rjmp	.+216    	; 0x11fe <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    1126:	a8 e3       	ldi	r26, 0x38	; 56
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e8 e3       	ldi	r30, 0x38	; 56
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <LCD_setPinValue+0x10c>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <LCD_setPinValue+0x108>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	57 c0       	rjmp	.+174    	; 0x11fe <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	a1 f4       	brne	.+40     	; 0x117e <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1156:	a5 e3       	ldi	r26, 0x35	; 53
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <LCD_setPinValue+0x13c>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <LCD_setPinValue+0x138>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	40 c0       	rjmp	.+128    	; 0x11fe <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    117e:	a5 e3       	ldi	r26, 0x35	; 53
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e5 e3       	ldi	r30, 0x35	; 53
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <LCD_setPinValue+0x164>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <LCD_setPinValue+0x160>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	2b c0       	rjmp	.+86     	; 0x11fe <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	a1 f4       	brne	.+40     	; 0x11d6 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11ae:	a2 e3       	ldi	r26, 0x32	; 50
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e2 e3       	ldi	r30, 0x32	; 50
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <LCD_setPinValue+0x194>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <LCD_setPinValue+0x190>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    11d6:	a2 e3       	ldi	r26, 0x32	; 50
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e2 e3       	ldi	r30, 0x32	; 50
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <LCD_setPinValue+0x1bc>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <LCD_setPinValue+0x1b8>
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <LCD_getPinValue+0x6>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <LCD_getPinValue+0x8>
    1216:	0f 92       	push	r0
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	8a 83       	std	Y+2, r24	; 0x02
    121e:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1220:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	88 30       	cpi	r24, 0x08	; 8
    1226:	08 f0       	brcs	.+2      	; 0x122a <LCD_getPinValue+0x1c>
    1228:	84 c0       	rjmp	.+264    	; 0x1332 <LCD_getPinValue+0x124>
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	08 f0       	brcs	.+2      	; 0x1232 <LCD_getPinValue+0x24>
    1230:	80 c0       	rjmp	.+256    	; 0x1332 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3d 83       	std	Y+5, r19	; 0x05
    123a:	2c 83       	std	Y+4, r18	; 0x04
    123c:	4c 81       	ldd	r20, Y+4	; 0x04
    123e:	5d 81       	ldd	r21, Y+5	; 0x05
    1240:	41 30       	cpi	r20, 0x01	; 1
    1242:	51 05       	cpc	r21, r1
    1244:	79 f1       	breq	.+94     	; 0x12a4 <LCD_getPinValue+0x96>
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	91 05       	cpc	r25, r1
    124e:	34 f4       	brge	.+12     	; 0x125c <LCD_getPinValue+0x4e>
    1250:	2c 81       	ldd	r18, Y+4	; 0x04
    1252:	3d 81       	ldd	r19, Y+5	; 0x05
    1254:	21 15       	cp	r18, r1
    1256:	31 05       	cpc	r19, r1
    1258:	69 f0       	breq	.+26     	; 0x1274 <LCD_getPinValue+0x66>
    125a:	6b c0       	rjmp	.+214    	; 0x1332 <LCD_getPinValue+0x124>
    125c:	4c 81       	ldd	r20, Y+4	; 0x04
    125e:	5d 81       	ldd	r21, Y+5	; 0x05
    1260:	42 30       	cpi	r20, 0x02	; 2
    1262:	51 05       	cpc	r21, r1
    1264:	b9 f1       	breq	.+110    	; 0x12d4 <LCD_getPinValue+0xc6>
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <LCD_getPinValue+0x64>
    1270:	49 c0       	rjmp	.+146    	; 0x1304 <LCD_getPinValue+0xf6>
    1272:	5f c0       	rjmp	.+190    	; 0x1332 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1274:	e9 e3       	ldi	r30, 0x39	; 57
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a9 01       	movw	r20, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <LCD_getPinValue+0x7e>
    1288:	55 95       	asr	r21
    128a:	47 95       	ror	r20
    128c:	8a 95       	dec	r24
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <LCD_getPinValue+0x7a>
    1290:	ca 01       	movw	r24, r20
    1292:	81 70       	andi	r24, 0x01	; 1
    1294:	90 70       	andi	r25, 0x00	; 0
    1296:	88 23       	and	r24, r24
    1298:	19 f0       	breq	.+6      	; 0x12a0 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	49 c0       	rjmp	.+146    	; 0x1332 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12a0:	19 82       	std	Y+1, r1	; 0x01
    12a2:	47 c0       	rjmp	.+142    	; 0x1332 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12a4:	e6 e3       	ldi	r30, 0x36	; 54
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a9 01       	movw	r20, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <LCD_getPinValue+0xae>
    12b8:	55 95       	asr	r21
    12ba:	47 95       	ror	r20
    12bc:	8a 95       	dec	r24
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <LCD_getPinValue+0xaa>
    12c0:	ca 01       	movw	r24, r20
    12c2:	81 70       	andi	r24, 0x01	; 1
    12c4:	90 70       	andi	r25, 0x00	; 0
    12c6:	88 23       	and	r24, r24
    12c8:	19 f0       	breq	.+6      	; 0x12d0 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	31 c0       	rjmp	.+98     	; 0x1332 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12d0:	19 82       	std	Y+1, r1	; 0x01
    12d2:	2f c0       	rjmp	.+94     	; 0x1332 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12d4:	e3 e3       	ldi	r30, 0x33	; 51
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a9 01       	movw	r20, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <LCD_getPinValue+0xde>
    12e8:	55 95       	asr	r21
    12ea:	47 95       	ror	r20
    12ec:	8a 95       	dec	r24
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <LCD_getPinValue+0xda>
    12f0:	ca 01       	movw	r24, r20
    12f2:	81 70       	andi	r24, 0x01	; 1
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	88 23       	and	r24, r24
    12f8:	19 f0       	breq	.+6      	; 0x1300 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	19 c0       	rjmp	.+50     	; 0x1332 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1300:	19 82       	std	Y+1, r1	; 0x01
    1302:	17 c0       	rjmp	.+46     	; 0x1332 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1304:	e0 e3       	ldi	r30, 0x30	; 48
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <LCD_getPinValue+0x10e>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <LCD_getPinValue+0x10a>
    1320:	ca 01       	movw	r24, r20
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	90 70       	andi	r25, 0x00	; 0
    1326:	88 23       	and	r24, r24
    1328:	19 f0       	breq	.+6      	; 0x1330 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	01 c0       	rjmp	.+2      	; 0x1332 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1330:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <LCD_setPortDirection+0x6>
    134a:	00 d0       	rcall	.+0      	; 0x134c <LCD_setPortDirection+0x8>
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	90 f5       	brcc	.+100    	; 0x13be <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3c 83       	std	Y+4, r19	; 0x04
    1362:	2b 83       	std	Y+3, r18	; 0x03
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	d1 f0       	breq	.+52     	; 0x13a2 <LCD_setPortDirection+0x5e>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	2c f4       	brge	.+10     	; 0x1382 <LCD_setPortDirection+0x3e>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	61 f0       	breq	.+24     	; 0x1398 <LCD_setPortDirection+0x54>
    1380:	1e c0       	rjmp	.+60     	; 0x13be <LCD_setPortDirection+0x7a>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	81 f0       	breq	.+32     	; 0x13ac <LCD_setPortDirection+0x68>
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	81 f0       	breq	.+32     	; 0x13b6 <LCD_setPortDirection+0x72>
    1396:	13 c0       	rjmp	.+38     	; 0x13be <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	80 83       	st	Z, r24
    13a0:	0e c0       	rjmp	.+28     	; 0x13be <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13a2:	e7 e3       	ldi	r30, 0x37	; 55
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 83       	st	Z, r24
    13aa:	09 c0       	rjmp	.+18     	; 0x13be <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13ac:	e4 e3       	ldi	r30, 0x34	; 52
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	80 83       	st	Z, r24
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13b6:	e1 e3       	ldi	r30, 0x31	; 49
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <LCD_setPortValue+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <LCD_setPortValue+0x8>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	90 f5       	brcc	.+100    	; 0x1446 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	3c 83       	std	Y+4, r19	; 0x04
    13ea:	2b 83       	std	Y+3, r18	; 0x03
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	91 05       	cpc	r25, r1
    13f4:	d1 f0       	breq	.+52     	; 0x142a <LCD_setPortValue+0x5e>
    13f6:	2b 81       	ldd	r18, Y+3	; 0x03
    13f8:	3c 81       	ldd	r19, Y+4	; 0x04
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	2c f4       	brge	.+10     	; 0x140a <LCD_setPortValue+0x3e>
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	61 f0       	breq	.+24     	; 0x1420 <LCD_setPortValue+0x54>
    1408:	1e c0       	rjmp	.+60     	; 0x1446 <LCD_setPortValue+0x7a>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	81 f0       	breq	.+32     	; 0x1434 <LCD_setPortValue+0x68>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	83 30       	cpi	r24, 0x03	; 3
    141a:	91 05       	cpc	r25, r1
    141c:	81 f0       	breq	.+32     	; 0x143e <LCD_setPortValue+0x72>
    141e:	13 c0       	rjmp	.+38     	; 0x1446 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1420:	eb e3       	ldi	r30, 0x3B	; 59
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	80 83       	st	Z, r24
    1428:	0e c0       	rjmp	.+28     	; 0x1446 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    142a:	e8 e3       	ldi	r30, 0x38	; 56
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	80 83       	st	Z, r24
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1434:	e5 e3       	ldi	r30, 0x35	; 53
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	80 83       	st	Z, r24
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    143e:	e2 e3       	ldi	r30, 0x32	; 50
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 83       	st	Z, r24
			break;
		}
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <LCD_getPortValue+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <LCD_getPortValue+0x8>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1462:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	90 f5       	brcc	.+100    	; 0x14ce <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3c 83       	std	Y+4, r19	; 0x04
    1472:	2b 83       	std	Y+3, r18	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	d1 f0       	breq	.+52     	; 0x14b2 <LCD_getPortValue+0x5e>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	2c f4       	brge	.+10     	; 0x1492 <LCD_getPortValue+0x3e>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	61 f0       	breq	.+24     	; 0x14a8 <LCD_getPortValue+0x54>
    1490:	1e c0       	rjmp	.+60     	; 0x14ce <LCD_getPortValue+0x7a>
    1492:	2b 81       	ldd	r18, Y+3	; 0x03
    1494:	3c 81       	ldd	r19, Y+4	; 0x04
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	81 f0       	breq	.+32     	; 0x14bc <LCD_getPortValue+0x68>
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	81 f0       	breq	.+32     	; 0x14c6 <LCD_getPortValue+0x72>
    14a6:	13 c0       	rjmp	.+38     	; 0x14ce <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14a8:	e9 e3       	ldi	r30, 0x39	; 57
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	0e c0       	rjmp	.+28     	; 0x14ce <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14b2:	e6 e3       	ldi	r30, 0x36	; 54
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14bc:	e3 e3       	ldi	r30, 0x33	; 51
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14c6:	e0 e3       	ldi	r30, 0x30	; 48
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    14e6:	af e5       	ldi	r26, 0x5F	; 95
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ef e5       	ldi	r30, 0x5F	; 95
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 68       	ori	r24, 0x80	; 128
    14f2:	8c 93       	st	X, r24
}
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1502:	af e5       	ldi	r26, 0x5F	; 95
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	ef e5       	ldi	r30, 0x5F	; 95
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 77       	andi	r24, 0x7F	; 127
    150e:	8c 93       	st	X, r24
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <setCallBack+0x6>
    151c:	0f 92       	push	r0
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	fc 01       	movw	r30, r24
    1534:	e8 58       	subi	r30, 0x88	; 136
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8e 7f       	andi	r24, 0xFE	; 254
    1560:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1562:	a5 e5       	ldi	r26, 0x55	; 85
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e5       	ldi	r30, 0x55	; 85
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8d 7f       	andi	r24, 0xFD	; 253
    156e:	8c 93       	st	X, r24
}
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    157e:	a5 e5       	ldi	r26, 0x55	; 85
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 e5       	ldi	r30, 0x55	; 85
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	82 60       	ori	r24, 0x02	; 2
    158a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    158c:	a5 e5       	ldi	r26, 0x55	; 85
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e5       	ldi	r30, 0x55	; 85
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8e 7f       	andi	r24, 0xFE	; 254
    1598:	8c 93       	st	X, r24
}
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    15a8:	a5 e5       	ldi	r26, 0x55	; 85
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e5       	ldi	r30, 0x55	; 85
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8d 7f       	andi	r24, 0xFD	; 253
    15b4:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    15b6:	a5 e5       	ldi	r26, 0x55	; 85
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e5 e5       	ldi	r30, 0x55	; 85
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	81 60       	ori	r24, 0x01	; 1
    15c2:	8c 93       	st	X, r24
}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    15d2:	a5 e5       	ldi	r26, 0x55	; 85
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e5       	ldi	r30, 0x55	; 85
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	82 60       	ori	r24, 0x02	; 2
    15de:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    15e0:	a5 e5       	ldi	r26, 0x55	; 85
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e5       	ldi	r30, 0x55	; 85
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	81 60       	ori	r24, 0x01	; 1
    15ec:	8c 93       	st	X, r24
}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    15fc:	a5 e5       	ldi	r26, 0x55	; 85
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e5 e5       	ldi	r30, 0x55	; 85
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	8b 7f       	andi	r24, 0xFB	; 251
    1608:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    160a:	a5 e5       	ldi	r26, 0x55	; 85
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e5       	ldi	r30, 0x55	; 85
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	87 7f       	andi	r24, 0xF7	; 247
    1616:	8c 93       	st	X, r24
}
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1626:	a5 e5       	ldi	r26, 0x55	; 85
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e5       	ldi	r30, 0x55	; 85
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	88 60       	ori	r24, 0x08	; 8
    1632:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1634:	a5 e5       	ldi	r26, 0x55	; 85
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e5 e5       	ldi	r30, 0x55	; 85
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	8b 7f       	andi	r24, 0xFB	; 251
    1640:	8c 93       	st	X, r24
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1650:	a5 e5       	ldi	r26, 0x55	; 85
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e5 e5       	ldi	r30, 0x55	; 85
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	87 7f       	andi	r24, 0xF7	; 247
    165c:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    165e:	a5 e5       	ldi	r26, 0x55	; 85
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e5       	ldi	r30, 0x55	; 85
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	84 60       	ori	r24, 0x04	; 4
    166a:	8c 93       	st	X, r24
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    167a:	a5 e5       	ldi	r26, 0x55	; 85
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e5       	ldi	r30, 0x55	; 85
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 60       	ori	r24, 0x08	; 8
    1686:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1688:	a5 e5       	ldi	r26, 0x55	; 85
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e5 e5       	ldi	r30, 0x55	; 85
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	84 60       	ori	r24, 0x04	; 4
    1694:	8c 93       	st	X, r24
}
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    16a4:	a4 e5       	ldi	r26, 0x54	; 84
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e4 e5       	ldi	r30, 0x54	; 84
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	80 64       	ori	r24, 0x40	; 64
    16b0:	8c 93       	st	X, r24
}
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    16c0:	a4 e5       	ldi	r26, 0x54	; 84
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e4 e5       	ldi	r30, 0x54	; 84
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 7b       	andi	r24, 0xBF	; 191
    16cc:	8c 93       	st	X, r24
}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_AnyLogicalChange_MODE();
    16dc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <EXTI0_AnyLogicalChange_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    16e0:	ab e5       	ldi	r26, 0x5B	; 91
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	eb e5       	ldi	r30, 0x5B	; 91
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 64       	ori	r24, 0x40	; 64
    16ec:	8c 93       	st	X, r24
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    16fc:	0e 94 24 0b 	call	0x1648	; 0x1648 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1700:	ab e5       	ldi	r26, 0x5B	; 91
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e5       	ldi	r30, 0x5B	; 91
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	80 68       	ori	r24, 0x80	; 128
    170c:	8c 93       	st	X, r24
}
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <EXTI_voidEnable>:


void EXTI_voidEnable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Mode){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	2a 97       	sbiw	r28, 0x0a	; 10
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_EXTI_Index){
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	3a 87       	std	Y+10, r19	; 0x0a
    1734:	29 87       	std	Y+9, r18	; 0x09
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	e9 f1       	breq	.+122    	; 0x17ba <EXTI_voidEnable+0xa6>
    1740:	29 85       	ldd	r18, Y+9	; 0x09
    1742:	3a 85       	ldd	r19, Y+10	; 0x0a
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <EXTI_voidEnable+0x38>
    174a:	69 c0       	rjmp	.+210    	; 0x181e <EXTI_voidEnable+0x10a>
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	09 f0       	breq	.+2      	; 0x1756 <EXTI_voidEnable+0x42>
    1754:	7f c0       	rjmp	.+254    	; 0x1854 <EXTI_voidEnable+0x140>
		case EXTI0_Index:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1756:	ab e5       	ldi	r26, 0x5B	; 91
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	eb e5       	ldi	r30, 0x5B	; 91
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 64       	ori	r24, 0x40	; 64
    1762:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	38 87       	std	Y+8, r19	; 0x08
    176c:	2f 83       	std	Y+7, r18	; 0x07
    176e:	8f 81       	ldd	r24, Y+7	; 0x07
    1770:	98 85       	ldd	r25, Y+8	; 0x08
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	c1 f0       	breq	.+48     	; 0x17a8 <EXTI_voidEnable+0x94>
    1778:	2f 81       	ldd	r18, Y+7	; 0x07
    177a:	38 85       	ldd	r19, Y+8	; 0x08
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	2c f4       	brge	.+10     	; 0x178c <EXTI_voidEnable+0x78>
    1782:	8f 81       	ldd	r24, Y+7	; 0x07
    1784:	98 85       	ldd	r25, Y+8	; 0x08
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	61 f0       	breq	.+24     	; 0x17a2 <EXTI_voidEnable+0x8e>
    178a:	64 c0       	rjmp	.+200    	; 0x1854 <EXTI_voidEnable+0x140>
    178c:	2f 81       	ldd	r18, Y+7	; 0x07
    178e:	38 85       	ldd	r19, Y+8	; 0x08
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	61 f0       	breq	.+24     	; 0x17ae <EXTI_voidEnable+0x9a>
    1796:	8f 81       	ldd	r24, Y+7	; 0x07
    1798:	98 85       	ldd	r25, Y+8	; 0x08
    179a:	83 30       	cpi	r24, 0x03	; 3
    179c:	91 05       	cpc	r25, r1
    179e:	51 f0       	breq	.+20     	; 0x17b4 <EXTI_voidEnable+0xa0>
    17a0:	59 c0       	rjmp	.+178    	; 0x1854 <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    17a2:	0e 94 a6 0a 	call	0x154c	; 0x154c <EXTI0_LowLevel_MODE>
    17a6:	56 c0       	rjmp	.+172    	; 0x1854 <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    17a8:	0e 94 bb 0a 	call	0x1576	; 0x1576 <EXTI0_FALLING_MODE>
    17ac:	53 c0       	rjmp	.+166    	; 0x1854 <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    17ae:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <EXTI0_AnyLogicalChange_MODE>
    17b2:	50 c0       	rjmp	.+160    	; 0x1854 <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    17b4:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <EXTI0_RISING_MODE>
    17b8:	4d c0       	rjmp	.+154    	; 0x1854 <EXTI_voidEnable+0x140>
			}
			break;

		case EXTI1_Index:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    17ba:	ab e5       	ldi	r26, 0x5B	; 91
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	eb e5       	ldi	r30, 0x5B	; 91
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	80 68       	ori	r24, 0x80	; 128
    17c6:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3e 83       	std	Y+6, r19	; 0x06
    17d0:	2d 83       	std	Y+5, r18	; 0x05
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	91 05       	cpc	r25, r1
    17da:	c1 f0       	breq	.+48     	; 0x180c <EXTI_voidEnable+0xf8>
    17dc:	2d 81       	ldd	r18, Y+5	; 0x05
    17de:	3e 81       	ldd	r19, Y+6	; 0x06
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <EXTI_voidEnable+0xdc>
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	61 f0       	breq	.+24     	; 0x1806 <EXTI_voidEnable+0xf2>
    17ee:	32 c0       	rjmp	.+100    	; 0x1854 <EXTI_voidEnable+0x140>
    17f0:	2d 81       	ldd	r18, Y+5	; 0x05
    17f2:	3e 81       	ldd	r19, Y+6	; 0x06
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	61 f0       	breq	.+24     	; 0x1812 <EXTI_voidEnable+0xfe>
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	83 30       	cpi	r24, 0x03	; 3
    1800:	91 05       	cpc	r25, r1
    1802:	51 f0       	breq	.+20     	; 0x1818 <EXTI_voidEnable+0x104>
    1804:	27 c0       	rjmp	.+78     	; 0x1854 <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    1806:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <EXTI1_LowLevel_MODE>
    180a:	24 c0       	rjmp	.+72     	; 0x1854 <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    180c:	0e 94 0f 0b 	call	0x161e	; 0x161e <EXTI1_FALLING_MODE>
    1810:	21 c0       	rjmp	.+66     	; 0x1854 <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    1812:	0e 94 24 0b 	call	0x1648	; 0x1648 <EXTI1_AnyLogicalChange_MODE>
    1816:	1e c0       	rjmp	.+60     	; 0x1854 <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1818:	0e 94 39 0b 	call	0x1672	; 0x1672 <EXTI1_RISING_MODE>
    181c:	1b c0       	rjmp	.+54     	; 0x1854 <EXTI_voidEnable+0x140>
					break;
			}
			break;
		case EXTI2_Index:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    181e:	ab e5       	ldi	r26, 0x5B	; 91
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	eb e5       	ldi	r30, 0x5B	; 91
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 62       	ori	r24, 0x20	; 32
    182a:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3c 83       	std	Y+4, r19	; 0x04
    1834:	2b 83       	std	Y+3, r18	; 0x03
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	41 f0       	breq	.+16     	; 0x1850 <EXTI_voidEnable+0x13c>
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	3c 81       	ldd	r19, Y+4	; 0x04
    1844:	23 30       	cpi	r18, 0x03	; 3
    1846:	31 05       	cpc	r19, r1
    1848:	29 f4       	brne	.+10     	; 0x1854 <EXTI_voidEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    184a:	0e 94 4e 0b 	call	0x169c	; 0x169c <EXTI2_RISING_MODE>
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <EXTI_voidEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    1850:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    1854:	2a 96       	adiw	r28, 0x0a	; 10
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8_EXTI_Index){
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <EXTI_voidDisable+0x6>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTI_Index){
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3b 83       	std	Y+3, r19	; 0x03
    187c:	2a 83       	std	Y+2, r18	; 0x02
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	31 f0       	breq	.+12     	; 0x1892 <EXTI_voidDisable+0x2c>
    1886:	2a 81       	ldd	r18, Y+2	; 0x02
    1888:	3b 81       	ldd	r19, Y+3	; 0x03
    188a:	21 30       	cpi	r18, 0x01	; 1
    188c:	31 05       	cpc	r19, r1
    188e:	49 f0       	breq	.+18     	; 0x18a2 <EXTI_voidDisable+0x3c>
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <EXTI_voidDisable+0x4a>
		case EXTI0_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1892:	ab e5       	ldi	r26, 0x5B	; 91
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	eb e5       	ldi	r30, 0x5B	; 91
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 7b       	andi	r24, 0xBF	; 191
    189e:	8c 93       	st	X, r24
    18a0:	07 c0       	rjmp	.+14     	; 0x18b0 <EXTI_voidDisable+0x4a>
			break;

		case EXTI1_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    18a2:	ab e5       	ldi	r26, 0x5B	; 91
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	eb e5       	ldi	r30, 0x5B	; 91
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 77       	andi	r24, 0x7F	; 127
    18ae:	8c 93       	st	X, r24
			break;
	}
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    18bc:	1f 92       	push	r1
    18be:	0f 92       	push	r0
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	0f 92       	push	r0
    18c4:	11 24       	eor	r1, r1
    18c6:	2f 93       	push	r18
    18c8:	3f 93       	push	r19
    18ca:	4f 93       	push	r20
    18cc:	5f 93       	push	r21
    18ce:	6f 93       	push	r22
    18d0:	7f 93       	push	r23
    18d2:	8f 93       	push	r24
    18d4:	9f 93       	push	r25
    18d6:	af 93       	push	r26
    18d8:	bf 93       	push	r27
    18da:	ef 93       	push	r30
    18dc:	ff 93       	push	r31
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI0_Index] != NULL){
    18e6:	80 91 78 00 	lds	r24, 0x0078
    18ea:	90 91 79 00 	lds	r25, 0x0079
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	29 f0       	breq	.+10     	; 0x18fc <__vector_1+0x40>
		EXTI[0]();
    18f2:	e0 91 78 00 	lds	r30, 0x0078
    18f6:	f0 91 79 00 	lds	r31, 0x0079
    18fa:	09 95       	icall
	}

}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	0f 90       	pop	r0
    191e:	1f 90       	pop	r1
    1920:	18 95       	reti

00001922 <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    1922:	1f 92       	push	r1
    1924:	0f 92       	push	r0
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	0f 92       	push	r0
    192a:	11 24       	eor	r1, r1
    192c:	2f 93       	push	r18
    192e:	3f 93       	push	r19
    1930:	4f 93       	push	r20
    1932:	5f 93       	push	r21
    1934:	6f 93       	push	r22
    1936:	7f 93       	push	r23
    1938:	8f 93       	push	r24
    193a:	9f 93       	push	r25
    193c:	af 93       	push	r26
    193e:	bf 93       	push	r27
    1940:	ef 93       	push	r30
    1942:	ff 93       	push	r31
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI1_Index] != NULL){
    194c:	80 91 7a 00 	lds	r24, 0x007A
    1950:	90 91 7b 00 	lds	r25, 0x007B
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	29 f0       	breq	.+10     	; 0x1962 <__vector_2+0x40>
			EXTI[1]();
    1958:	e0 91 7a 00 	lds	r30, 0x007A
    195c:	f0 91 7b 00 	lds	r31, 0x007B
    1960:	09 95       	icall
	}

}
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	ff 91       	pop	r31
    1968:	ef 91       	pop	r30
    196a:	bf 91       	pop	r27
    196c:	af 91       	pop	r26
    196e:	9f 91       	pop	r25
    1970:	8f 91       	pop	r24
    1972:	7f 91       	pop	r23
    1974:	6f 91       	pop	r22
    1976:	5f 91       	pop	r21
    1978:	4f 91       	pop	r20
    197a:	3f 91       	pop	r19
    197c:	2f 91       	pop	r18
    197e:	0f 90       	pop	r0
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	0f 90       	pop	r0
    1984:	1f 90       	pop	r1
    1986:	18 95       	reti

00001988 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1988:	1f 92       	push	r1
    198a:	0f 92       	push	r0
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	0f 92       	push	r0
    1990:	11 24       	eor	r1, r1
    1992:	2f 93       	push	r18
    1994:	3f 93       	push	r19
    1996:	4f 93       	push	r20
    1998:	5f 93       	push	r21
    199a:	6f 93       	push	r22
    199c:	7f 93       	push	r23
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	af 93       	push	r26
    19a4:	bf 93       	push	r27
    19a6:	ef 93       	push	r30
    19a8:	ff 93       	push	r31
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI2_Index] != NULL){
    19b2:	80 91 7c 00 	lds	r24, 0x007C
    19b6:	90 91 7d 00 	lds	r25, 0x007D
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	29 f0       	breq	.+10     	; 0x19c8 <__vector_3+0x40>
			EXTI[2]();
    19be:	e0 91 7c 00 	lds	r30, 0x007C
    19c2:	f0 91 7d 00 	lds	r31, 0x007D
    19c6:	09 95       	icall
	}

}
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	ff 91       	pop	r31
    19ce:	ef 91       	pop	r30
    19d0:	bf 91       	pop	r27
    19d2:	af 91       	pop	r26
    19d4:	9f 91       	pop	r25
    19d6:	8f 91       	pop	r24
    19d8:	7f 91       	pop	r23
    19da:	6f 91       	pop	r22
    19dc:	5f 91       	pop	r21
    19de:	4f 91       	pop	r20
    19e0:	3f 91       	pop	r19
    19e2:	2f 91       	pop	r18
    19e4:	0f 90       	pop	r0
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	0f 90       	pop	r0
    19ea:	1f 90       	pop	r1
    19ec:	18 95       	reti

000019ee <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    19f6:	ea e3       	ldi	r30, 0x3A	; 58
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    19fc:	e7 e3       	ldi	r30, 0x37	; 55
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    1a02:	e4 e3       	ldi	r30, 0x34	; 52
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1a0a:	e1 e3       	ldi	r30, 0x31	; 49
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 e3       	ldi	r24, 0x30	; 48
    1a10:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    1a12:	eb e3       	ldi	r30, 0x3B	; 59
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    1a18:	e8 e3       	ldi	r30, 0x38	; 56
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    1a1e:	e5 e3       	ldi	r30, 0x35	; 53
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    1a24:	e2 e3       	ldi	r30, 0x32	; 50
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	10 82       	st	Z, r1

}
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	2e 97       	sbiw	r28, 0x0e	; 14
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	8a 83       	std	Y+2, r24	; 0x02
    1a46:	6b 83       	std	Y+3, r22	; 0x03
    1a48:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <DIO_u8SetPinDirection+0x26>
    1a54:	0c c1       	rjmp	.+536    	; 0x1c6e <DIO_u8SetPinDirection+0x23e>
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	88 30       	cpi	r24, 0x08	; 8
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <DIO_u8SetPinDirection+0x2e>
    1a5c:	08 c1       	rjmp	.+528    	; 0x1c6e <DIO_u8SetPinDirection+0x23e>
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <DIO_u8SetPinDirection+0x3c>
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	88 23       	and	r24, r24
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <DIO_u8SetPinDirection+0x3c>
    1a6a:	01 c1       	rjmp	.+514    	; 0x1c6e <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3e 87       	std	Y+14, r19	; 0x0e
    1a74:	2d 87       	std	Y+13, r18	; 0x0d
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <DIO_u8SetPinDirection+0x52>
    1a80:	4f c0       	rjmp	.+158    	; 0x1b20 <DIO_u8SetPinDirection+0xf0>
    1a82:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a84:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <DIO_u8SetPinDirection+0x66>
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	71 f0       	breq	.+28     	; 0x1ab0 <DIO_u8SetPinDirection+0x80>
    1a94:	ed c0       	rjmp	.+474    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
    1a96:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a98:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a9a:	22 30       	cpi	r18, 0x02	; 2
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <DIO_u8SetPinDirection+0x72>
    1aa0:	77 c0       	rjmp	.+238    	; 0x1b90 <DIO_u8SetPinDirection+0x160>
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <DIO_u8SetPinDirection+0x7e>
    1aac:	a9 c0       	rjmp	.+338    	; 0x1c00 <DIO_u8SetPinDirection+0x1d0>
    1aae:	e0 c0       	rjmp	.+448    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3c 87       	std	Y+12, r19	; 0x0c
    1ab8:	2b 87       	std	Y+11, r18	; 0x0b
    1aba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1abc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	d1 f0       	breq	.+52     	; 0x1af6 <DIO_u8SetPinDirection+0xc6>
    1ac2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ac4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ac6:	21 30       	cpi	r18, 0x01	; 1
    1ac8:	31 05       	cpc	r19, r1
    1aca:	09 f0       	breq	.+2      	; 0x1ace <DIO_u8SetPinDirection+0x9e>
    1acc:	d1 c0       	rjmp	.+418    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1ace:	aa e3       	ldi	r26, 0x3A	; 58
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	ea e3       	ldi	r30, 0x3A	; 58
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	02 2e       	mov	r0, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <DIO_u8SetPinDirection+0xbc>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <DIO_u8SetPinDirection+0xb8>
    1af0:	84 2b       	or	r24, r20
    1af2:	8c 93       	st	X, r24
    1af4:	bd c0       	rjmp	.+378    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1af6:	aa e3       	ldi	r26, 0x3A	; 58
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	ea e3       	ldi	r30, 0x3A	; 58
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <DIO_u8SetPinDirection+0xe4>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <DIO_u8SetPinDirection+0xe0>
    1b18:	80 95       	com	r24
    1b1a:	84 23       	and	r24, r20
    1b1c:	8c 93       	st	X, r24
    1b1e:	a8 c0       	rjmp	.+336    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	3a 87       	std	Y+10, r19	; 0x0a
    1b28:	29 87       	std	Y+9, r18	; 0x09
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	d1 f0       	breq	.+52     	; 0x1b66 <DIO_u8SetPinDirection+0x136>
    1b32:	29 85       	ldd	r18, Y+9	; 0x09
    1b34:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b36:	21 30       	cpi	r18, 0x01	; 1
    1b38:	31 05       	cpc	r19, r1
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <DIO_u8SetPinDirection+0x10e>
    1b3c:	99 c0       	rjmp	.+306    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1b3e:	a7 e3       	ldi	r26, 0x37	; 55
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e7 e3       	ldi	r30, 0x37	; 55
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	48 2f       	mov	r20, r24
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 2e       	mov	r0, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <DIO_u8SetPinDirection+0x12c>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0a 94       	dec	r0
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <DIO_u8SetPinDirection+0x128>
    1b60:	84 2b       	or	r24, r20
    1b62:	8c 93       	st	X, r24
    1b64:	85 c0       	rjmp	.+266    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1b66:	a7 e3       	ldi	r26, 0x37	; 55
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e7 e3       	ldi	r30, 0x37	; 55
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <DIO_u8SetPinDirection+0x154>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <DIO_u8SetPinDirection+0x150>
    1b88:	80 95       	com	r24
    1b8a:	84 23       	and	r24, r20
    1b8c:	8c 93       	st	X, r24
    1b8e:	70 c0       	rjmp	.+224    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	38 87       	std	Y+8, r19	; 0x08
    1b98:	2f 83       	std	Y+7, r18	; 0x07
    1b9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9c:	98 85       	ldd	r25, Y+8	; 0x08
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	d1 f0       	breq	.+52     	; 0x1bd6 <DIO_u8SetPinDirection+0x1a6>
    1ba2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ba4:	38 85       	ldd	r19, Y+8	; 0x08
    1ba6:	21 30       	cpi	r18, 0x01	; 1
    1ba8:	31 05       	cpc	r19, r1
    1baa:	09 f0       	breq	.+2      	; 0x1bae <DIO_u8SetPinDirection+0x17e>
    1bac:	61 c0       	rjmp	.+194    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1bae:	a4 e3       	ldi	r26, 0x34	; 52
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e4 e3       	ldi	r30, 0x34	; 52
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	48 2f       	mov	r20, r24
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 2e       	mov	r0, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <DIO_u8SetPinDirection+0x19c>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	0a 94       	dec	r0
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <DIO_u8SetPinDirection+0x198>
    1bd0:	84 2b       	or	r24, r20
    1bd2:	8c 93       	st	X, r24
    1bd4:	4d c0       	rjmp	.+154    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1bd6:	a4 e3       	ldi	r26, 0x34	; 52
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e4 e3       	ldi	r30, 0x34	; 52
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <DIO_u8SetPinDirection+0x1c4>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <DIO_u8SetPinDirection+0x1c0>
    1bf8:	80 95       	com	r24
    1bfa:	84 23       	and	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	38 c0       	rjmp	.+112    	; 0x1c70 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3e 83       	std	Y+6, r19	; 0x06
    1c08:	2d 83       	std	Y+5, r18	; 0x05
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	c9 f0       	breq	.+50     	; 0x1c44 <DIO_u8SetPinDirection+0x214>
    1c12:	2d 81       	ldd	r18, Y+5	; 0x05
    1c14:	3e 81       	ldd	r19, Y+6	; 0x06
    1c16:	21 30       	cpi	r18, 0x01	; 1
    1c18:	31 05       	cpc	r19, r1
    1c1a:	51 f5       	brne	.+84     	; 0x1c70 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1c1c:	a1 e3       	ldi	r26, 0x31	; 49
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e1 e3       	ldi	r30, 0x31	; 49
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_u8SetPinDirection+0x20a>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <DIO_u8SetPinDirection+0x206>
    1c3e:	84 2b       	or	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	16 c0       	rjmp	.+44     	; 0x1c70 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1c44:	a1 e3       	ldi	r26, 0x31	; 49
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e1 e3       	ldi	r30, 0x31	; 49
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 2e       	mov	r0, r18
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <DIO_u8SetPinDirection+0x232>
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	0a 94       	dec	r0
    1c64:	e2 f7       	brpl	.-8      	; 0x1c5e <DIO_u8SetPinDirection+0x22e>
    1c66:	80 95       	com	r24
    1c68:	84 23       	and	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1c6e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c72:	2e 96       	adiw	r28, 0x0e	; 14
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	2f 97       	sbiw	r28, 0x0f	; 15
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	8b 83       	std	Y+3, r24	; 0x03
    1c9a:	6c 83       	std	Y+4, r22	; 0x04
    1c9c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <DIO_u8SetPinValue+0x26>
    1ca8:	13 c1       	rjmp	.+550    	; 0x1ed0 <DIO_u8SetPinValue+0x24c>
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	88 30       	cpi	r24, 0x08	; 8
    1cae:	08 f0       	brcs	.+2      	; 0x1cb2 <DIO_u8SetPinValue+0x2e>
    1cb0:	0f c1       	rjmp	.+542    	; 0x1ed0 <DIO_u8SetPinValue+0x24c>
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	88 23       	and	r24, r24
    1cb6:	21 f0       	breq	.+8      	; 0x1cc0 <DIO_u8SetPinValue+0x3c>
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <DIO_u8SetPinValue+0x3c>
    1cbe:	08 c1       	rjmp	.+528    	; 0x1ed0 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	3f 87       	std	Y+15, r19	; 0x0f
    1cc8:	2e 87       	std	Y+14, r18	; 0x0e
    1cca:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ccc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <DIO_u8SetPinValue+0x52>
    1cd4:	50 c0       	rjmp	.+160    	; 0x1d76 <DIO_u8SetPinValue+0xf2>
    1cd6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1cd8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	2c f4       	brge	.+10     	; 0x1cea <DIO_u8SetPinValue+0x66>
    1ce0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ce2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	71 f0       	breq	.+28     	; 0x1d04 <DIO_u8SetPinValue+0x80>
    1ce8:	f4 c0       	rjmp	.+488    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
    1cea:	2e 85       	ldd	r18, Y+14	; 0x0e
    1cec:	3f 85       	ldd	r19, Y+15	; 0x0f
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <DIO_u8SetPinValue+0x72>
    1cf4:	79 c0       	rjmp	.+242    	; 0x1de8 <DIO_u8SetPinValue+0x164>
    1cf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <DIO_u8SetPinValue+0x7e>
    1d00:	ad c0       	rjmp	.+346    	; 0x1e5c <DIO_u8SetPinValue+0x1d8>
    1d02:	e7 c0       	rjmp	.+462    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	3d 87       	std	Y+13, r19	; 0x0d
    1d0c:	2c 87       	std	Y+12, r18	; 0x0c
    1d0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d10:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	c9 f0       	breq	.+50     	; 0x1d48 <DIO_u8SetPinValue+0xc4>
    1d16:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d18:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d1a:	21 30       	cpi	r18, 0x01	; 1
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	49 f5       	brne	.+82     	; 0x1d72 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1d20:	ab e3       	ldi	r26, 0x3B	; 59
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	eb e3       	ldi	r30, 0x3B	; 59
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 2e       	mov	r0, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_u8SetPinValue+0xba>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <DIO_u8SetPinValue+0xb6>
    1d42:	84 2b       	or	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	c5 c0       	rjmp	.+394    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1d48:	ab e3       	ldi	r26, 0x3B	; 59
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	eb e3       	ldi	r30, 0x3B	; 59
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	48 2f       	mov	r20, r24
    1d54:	8c 81       	ldd	r24, Y+4	; 0x04
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	02 2e       	mov	r0, r18
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_u8SetPinValue+0xe2>
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <DIO_u8SetPinValue+0xde>
    1d6a:	80 95       	com	r24
    1d6c:	84 23       	and	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	b0 c0       	rjmp	.+352    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1d72:	1a 82       	std	Y+2, r1	; 0x02
    1d74:	ae c0       	rjmp	.+348    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	3b 87       	std	Y+11, r19	; 0x0b
    1d7e:	2a 87       	std	Y+10, r18	; 0x0a
    1d80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	c9 f0       	breq	.+50     	; 0x1dba <DIO_u8SetPinValue+0x136>
    1d88:	2a 85       	ldd	r18, Y+10	; 0x0a
    1d8a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d8c:	21 30       	cpi	r18, 0x01	; 1
    1d8e:	31 05       	cpc	r19, r1
    1d90:	49 f5       	brne	.+82     	; 0x1de4 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1d92:	a8 e3       	ldi	r26, 0x38	; 56
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e8 e3       	ldi	r30, 0x38	; 56
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	48 2f       	mov	r20, r24
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	02 2e       	mov	r0, r18
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <DIO_u8SetPinValue+0x12c>
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	0a 94       	dec	r0
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <DIO_u8SetPinValue+0x128>
    1db4:	84 2b       	or	r24, r20
    1db6:	8c 93       	st	X, r24
    1db8:	8c c0       	rjmp	.+280    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1dba:	a8 e3       	ldi	r26, 0x38	; 56
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e8 e3       	ldi	r30, 0x38	; 56
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <DIO_u8SetPinValue+0x154>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <DIO_u8SetPinValue+0x150>
    1ddc:	80 95       	com	r24
    1dde:	84 23       	and	r24, r20
    1de0:	8c 93       	st	X, r24
    1de2:	77 c0       	rjmp	.+238    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1de4:	1a 82       	std	Y+2, r1	; 0x02
    1de6:	75 c0       	rjmp	.+234    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	39 87       	std	Y+9, r19	; 0x09
    1df0:	28 87       	std	Y+8, r18	; 0x08
    1df2:	88 85       	ldd	r24, Y+8	; 0x08
    1df4:	99 85       	ldd	r25, Y+9	; 0x09
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	31 f0       	breq	.+12     	; 0x1e06 <DIO_u8SetPinValue+0x182>
    1dfa:	28 85       	ldd	r18, Y+8	; 0x08
    1dfc:	39 85       	ldd	r19, Y+9	; 0x09
    1dfe:	21 30       	cpi	r18, 0x01	; 1
    1e00:	31 05       	cpc	r19, r1
    1e02:	b1 f0       	breq	.+44     	; 0x1e30 <DIO_u8SetPinValue+0x1ac>
    1e04:	29 c0       	rjmp	.+82     	; 0x1e58 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1e06:	a5 e3       	ldi	r26, 0x35	; 53
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e3       	ldi	r30, 0x35	; 53
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <DIO_u8SetPinValue+0x1a0>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <DIO_u8SetPinValue+0x19c>
    1e28:	80 95       	com	r24
    1e2a:	84 23       	and	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	51 c0       	rjmp	.+162    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1e30:	a5 e3       	ldi	r26, 0x35	; 53
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e3       	ldi	r30, 0x35	; 53
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <DIO_u8SetPinValue+0x1ca>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <DIO_u8SetPinValue+0x1c6>
    1e52:	84 2b       	or	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	3d c0       	rjmp	.+122    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1e58:	1a 82       	std	Y+2, r1	; 0x02
    1e5a:	3b c0       	rjmp	.+118    	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	3f 83       	std	Y+7, r19	; 0x07
    1e64:	2e 83       	std	Y+6, r18	; 0x06
    1e66:	8e 81       	ldd	r24, Y+6	; 0x06
    1e68:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	31 f0       	breq	.+12     	; 0x1e7a <DIO_u8SetPinValue+0x1f6>
    1e6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e70:	3f 81       	ldd	r19, Y+7	; 0x07
    1e72:	21 30       	cpi	r18, 0x01	; 1
    1e74:	31 05       	cpc	r19, r1
    1e76:	b1 f0       	breq	.+44     	; 0x1ea4 <DIO_u8SetPinValue+0x220>
    1e78:	29 c0       	rjmp	.+82     	; 0x1ecc <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1e7a:	a5 e3       	ldi	r26, 0x35	; 53
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e5 e3       	ldi	r30, 0x35	; 53
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	48 2f       	mov	r20, r24
    1e86:	8c 81       	ldd	r24, Y+4	; 0x04
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 2e       	mov	r0, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <DIO_u8SetPinValue+0x214>
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	0a 94       	dec	r0
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <DIO_u8SetPinValue+0x210>
    1e9c:	80 95       	com	r24
    1e9e:	84 23       	and	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	17 c0       	rjmp	.+46     	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1ea4:	a2 e3       	ldi	r26, 0x32	; 50
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e2 e3       	ldi	r30, 0x32	; 50
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <DIO_u8SetPinValue+0x23e>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <DIO_u8SetPinValue+0x23a>
    1ec6:	84 2b       	or	r24, r20
    1ec8:	8c 93       	st	X, r24
    1eca:	03 c0       	rjmp	.+6      	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1ecc:	1a 82       	std	Y+2, r1	; 0x02
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    1ed0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ed4:	2f 96       	adiw	r28, 0x0f	; 15
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	28 97       	sbiw	r28, 0x08	; 8
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	6c 83       	std	Y+4, r22	; 0x04
    1efe:	5e 83       	std	Y+6, r21	; 0x06
    1f00:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	84 30       	cpi	r24, 0x04	; 4
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <DIO_u8GetPinValue+0x28>
    1f0c:	9f c0       	rjmp	.+318    	; 0x204c <DIO_u8GetPinValue+0x166>
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	88 30       	cpi	r24, 0x08	; 8
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <DIO_u8GetPinValue+0x30>
    1f14:	9b c0       	rjmp	.+310    	; 0x204c <DIO_u8GetPinValue+0x166>
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <DIO_u8GetPinValue+0x3a>
    1f1e:	96 c0       	rjmp	.+300    	; 0x204c <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	38 87       	std	Y+8, r19	; 0x08
    1f28:	2f 83       	std	Y+7, r18	; 0x07
    1f2a:	4f 81       	ldd	r20, Y+7	; 0x07
    1f2c:	58 85       	ldd	r21, Y+8	; 0x08
    1f2e:	41 30       	cpi	r20, 0x01	; 1
    1f30:	51 05       	cpc	r21, r1
    1f32:	a9 f1       	breq	.+106    	; 0x1f9e <DIO_u8GetPinValue+0xb8>
    1f34:	8f 81       	ldd	r24, Y+7	; 0x07
    1f36:	98 85       	ldd	r25, Y+8	; 0x08
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	34 f4       	brge	.+12     	; 0x1f4a <DIO_u8GetPinValue+0x64>
    1f3e:	2f 81       	ldd	r18, Y+7	; 0x07
    1f40:	38 85       	ldd	r19, Y+8	; 0x08
    1f42:	21 15       	cp	r18, r1
    1f44:	31 05       	cpc	r19, r1
    1f46:	71 f0       	breq	.+28     	; 0x1f64 <DIO_u8GetPinValue+0x7e>
    1f48:	82 c0       	rjmp	.+260    	; 0x204e <DIO_u8GetPinValue+0x168>
    1f4a:	4f 81       	ldd	r20, Y+7	; 0x07
    1f4c:	58 85       	ldd	r21, Y+8	; 0x08
    1f4e:	42 30       	cpi	r20, 0x02	; 2
    1f50:	51 05       	cpc	r21, r1
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <DIO_u8GetPinValue+0x70>
    1f54:	41 c0       	rjmp	.+130    	; 0x1fd8 <DIO_u8GetPinValue+0xf2>
    1f56:	8f 81       	ldd	r24, Y+7	; 0x07
    1f58:	98 85       	ldd	r25, Y+8	; 0x08
    1f5a:	83 30       	cpi	r24, 0x03	; 3
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <DIO_u8GetPinValue+0x7c>
    1f60:	58 c0       	rjmp	.+176    	; 0x2012 <DIO_u8GetPinValue+0x12c>
    1f62:	75 c0       	rjmp	.+234    	; 0x204e <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1f64:	e9 e3       	ldi	r30, 0x39	; 57
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a9 01       	movw	r20, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_u8GetPinValue+0x96>
    1f78:	55 95       	asr	r21
    1f7a:	47 95       	ror	r20
    1f7c:	8a 95       	dec	r24
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_u8GetPinValue+0x92>
    1f80:	ca 01       	movw	r24, r20
    1f82:	81 70       	andi	r24, 0x01	; 1
    1f84:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	88 23       	and	r24, r24
    1f8a:	21 f4       	brne	.+8      	; 0x1f94 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1f8c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f8e:	fe 81       	ldd	r31, Y+6	; 0x06
    1f90:	10 82       	st	Z, r1
    1f92:	5d c0       	rjmp	.+186    	; 0x204e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1f94:	ed 81       	ldd	r30, Y+5	; 0x05
    1f96:	fe 81       	ldd	r31, Y+6	; 0x06
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	80 83       	st	Z, r24
    1f9c:	58 c0       	rjmp	.+176    	; 0x204e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1f9e:	e6 e3       	ldi	r30, 0x36	; 54
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a9 01       	movw	r20, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_u8GetPinValue+0xd0>
    1fb2:	55 95       	asr	r21
    1fb4:	47 95       	ror	r20
    1fb6:	8a 95       	dec	r24
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_u8GetPinValue+0xcc>
    1fba:	ca 01       	movw	r24, r20
    1fbc:	81 70       	andi	r24, 0x01	; 1
    1fbe:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	88 23       	and	r24, r24
    1fc4:	21 f4       	brne	.+8      	; 0x1fce <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1fc6:	ed 81       	ldd	r30, Y+5	; 0x05
    1fc8:	fe 81       	ldd	r31, Y+6	; 0x06
    1fca:	10 82       	st	Z, r1
    1fcc:	40 c0       	rjmp	.+128    	; 0x204e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1fce:	ed 81       	ldd	r30, Y+5	; 0x05
    1fd0:	fe 81       	ldd	r31, Y+6	; 0x06
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	80 83       	st	Z, r24
    1fd6:	3b c0       	rjmp	.+118    	; 0x204e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1fd8:	e3 e3       	ldi	r30, 0x33	; 51
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a9 01       	movw	r20, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <DIO_u8GetPinValue+0x10a>
    1fec:	55 95       	asr	r21
    1fee:	47 95       	ror	r20
    1ff0:	8a 95       	dec	r24
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <DIO_u8GetPinValue+0x106>
    1ff4:	ca 01       	movw	r24, r20
    1ff6:	81 70       	andi	r24, 0x01	; 1
    1ff8:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	88 23       	and	r24, r24
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2000:	ed 81       	ldd	r30, Y+5	; 0x05
    2002:	fe 81       	ldd	r31, Y+6	; 0x06
    2004:	10 82       	st	Z, r1
    2006:	23 c0       	rjmp	.+70     	; 0x204e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2008:	ed 81       	ldd	r30, Y+5	; 0x05
    200a:	fe 81       	ldd	r31, Y+6	; 0x06
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 83       	st	Z, r24
    2010:	1e c0       	rjmp	.+60     	; 0x204e <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    2012:	e0 e3       	ldi	r30, 0x30	; 48
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	88 2f       	mov	r24, r24
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a9 01       	movw	r20, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <DIO_u8GetPinValue+0x144>
    2026:	55 95       	asr	r21
    2028:	47 95       	ror	r20
    202a:	8a 95       	dec	r24
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <DIO_u8GetPinValue+0x140>
    202e:	ca 01       	movw	r24, r20
    2030:	81 70       	andi	r24, 0x01	; 1
    2032:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	88 23       	and	r24, r24
    2038:	21 f4       	brne	.+8      	; 0x2042 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    203a:	ed 81       	ldd	r30, Y+5	; 0x05
    203c:	fe 81       	ldd	r31, Y+6	; 0x06
    203e:	10 82       	st	Z, r1
    2040:	06 c0       	rjmp	.+12     	; 0x204e <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2042:	ed 81       	ldd	r30, Y+5	; 0x05
    2044:	fe 81       	ldd	r31, Y+6	; 0x06
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	80 83       	st	Z, r24
    204a:	01 c0       	rjmp	.+2      	; 0x204e <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    204c:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2050:	28 96       	adiw	r28, 0x08	; 8
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	00 d0       	rcall	.+0      	; 0x2068 <DIO_getPinValueWithoutPointer+0x6>
    2068:	00 d0       	rcall	.+0      	; 0x206a <DIO_getPinValueWithoutPointer+0x8>
    206a:	0f 92       	push	r0
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	8a 83       	std	Y+2, r24	; 0x02
    2072:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    2074:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	88 30       	cpi	r24, 0x08	; 8
    207a:	08 f0       	brcs	.+2      	; 0x207e <DIO_getPinValueWithoutPointer+0x1c>
    207c:	6b c0       	rjmp	.+214    	; 0x2154 <DIO_getPinValueWithoutPointer+0xf2>
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	08 f0       	brcs	.+2      	; 0x2086 <DIO_getPinValueWithoutPointer+0x24>
    2084:	67 c0       	rjmp	.+206    	; 0x2154 <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	3d 83       	std	Y+5, r19	; 0x05
    208e:	2c 83       	std	Y+4, r18	; 0x04
    2090:	4c 81       	ldd	r20, Y+4	; 0x04
    2092:	5d 81       	ldd	r21, Y+5	; 0x05
    2094:	41 30       	cpi	r20, 0x01	; 1
    2096:	51 05       	cpc	r21, r1
    2098:	41 f1       	breq	.+80     	; 0x20ea <DIO_getPinValueWithoutPointer+0x88>
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
    209c:	9d 81       	ldd	r25, Y+5	; 0x05
    209e:	82 30       	cpi	r24, 0x02	; 2
    20a0:	91 05       	cpc	r25, r1
    20a2:	34 f4       	brge	.+12     	; 0x20b0 <DIO_getPinValueWithoutPointer+0x4e>
    20a4:	2c 81       	ldd	r18, Y+4	; 0x04
    20a6:	3d 81       	ldd	r19, Y+5	; 0x05
    20a8:	21 15       	cp	r18, r1
    20aa:	31 05       	cpc	r19, r1
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <DIO_getPinValueWithoutPointer+0x64>
    20ae:	52 c0       	rjmp	.+164    	; 0x2154 <DIO_getPinValueWithoutPointer+0xf2>
    20b0:	4c 81       	ldd	r20, Y+4	; 0x04
    20b2:	5d 81       	ldd	r21, Y+5	; 0x05
    20b4:	42 30       	cpi	r20, 0x02	; 2
    20b6:	51 05       	cpc	r21, r1
    20b8:	51 f1       	breq	.+84     	; 0x210e <DIO_getPinValueWithoutPointer+0xac>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	91 05       	cpc	r25, r1
    20c2:	b9 f1       	breq	.+110    	; 0x2132 <DIO_getPinValueWithoutPointer+0xd0>
    20c4:	47 c0       	rjmp	.+142    	; 0x2154 <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    20c6:	e9 e3       	ldi	r30, 0x39	; 57
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <DIO_getPinValueWithoutPointer+0x7c>
    20da:	55 95       	asr	r21
    20dc:	47 95       	ror	r20
    20de:	8a 95       	dec	r24
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <DIO_getPinValueWithoutPointer+0x78>
    20e2:	ca 01       	movw	r24, r20
    20e4:	81 70       	andi	r24, 0x01	; 1
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	35 c0       	rjmp	.+106    	; 0x2154 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    20ea:	e6 e3       	ldi	r30, 0x36	; 54
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a9 01       	movw	r20, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <DIO_getPinValueWithoutPointer+0xa0>
    20fe:	55 95       	asr	r21
    2100:	47 95       	ror	r20
    2102:	8a 95       	dec	r24
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <DIO_getPinValueWithoutPointer+0x9c>
    2106:	ca 01       	movw	r24, r20
    2108:	81 70       	andi	r24, 0x01	; 1
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	23 c0       	rjmp	.+70     	; 0x2154 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    210e:	e3 e3       	ldi	r30, 0x33	; 51
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	88 2f       	mov	r24, r24
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a9 01       	movw	r20, r18
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <DIO_getPinValueWithoutPointer+0xc4>
    2122:	55 95       	asr	r21
    2124:	47 95       	ror	r20
    2126:	8a 95       	dec	r24
    2128:	e2 f7       	brpl	.-8      	; 0x2122 <DIO_getPinValueWithoutPointer+0xc0>
    212a:	ca 01       	movw	r24, r20
    212c:	81 70       	andi	r24, 0x01	; 1
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	11 c0       	rjmp	.+34     	; 0x2154 <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    2132:	e0 e3       	ldi	r30, 0x30	; 48
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a9 01       	movw	r20, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <DIO_getPinValueWithoutPointer+0xe8>
    2146:	55 95       	asr	r21
    2148:	47 95       	ror	r20
    214a:	8a 95       	dec	r24
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <DIO_getPinValueWithoutPointer+0xe4>
    214e:	ca 01       	movw	r24, r20
    2150:	81 70       	andi	r24, 0x01	; 1
    2152:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
}
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	2d 97       	sbiw	r28, 0x0d	; 13
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	3c 87       	std	Y+12, r19	; 0x0c
    2186:	2b 87       	std	Y+11, r18	; 0x0b
    2188:	8b 85       	ldd	r24, Y+11	; 0x0b
    218a:	9c 85       	ldd	r25, Y+12	; 0x0c
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	91 05       	cpc	r25, r1
    2190:	71 f1       	breq	.+92     	; 0x21ee <DIO_u8SetPortDirection+0x88>
    2192:	2b 85       	ldd	r18, Y+11	; 0x0b
    2194:	3c 85       	ldd	r19, Y+12	; 0x0c
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	2c f4       	brge	.+10     	; 0x21a6 <DIO_u8SetPortDirection+0x40>
    219c:	8b 85       	ldd	r24, Y+11	; 0x0b
    219e:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f0       	breq	.+26     	; 0x21be <DIO_u8SetPortDirection+0x58>
    21a4:	6b c0       	rjmp	.+214    	; 0x227c <DIO_u8SetPortDirection+0x116>
    21a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    21a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	b9 f1       	breq	.+110    	; 0x221e <DIO_u8SetPortDirection+0xb8>
    21b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	91 05       	cpc	r25, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <DIO_u8SetPortDirection+0x56>
    21ba:	49 c0       	rjmp	.+146    	; 0x224e <DIO_u8SetPortDirection+0xe8>
    21bc:	5f c0       	rjmp	.+190    	; 0x227c <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	3a 87       	std	Y+10, r19	; 0x0a
    21c6:	29 87       	std	Y+9, r18	; 0x09
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	31 f0       	breq	.+12     	; 0x21dc <DIO_u8SetPortDirection+0x76>
    21d0:	29 85       	ldd	r18, Y+9	; 0x09
    21d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    21d4:	21 30       	cpi	r18, 0x01	; 1
    21d6:	31 05       	cpc	r19, r1
    21d8:	29 f0       	breq	.+10     	; 0x21e4 <DIO_u8SetPortDirection+0x7e>
    21da:	50 c0       	rjmp	.+160    	; 0x227c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    21dc:	ea e3       	ldi	r30, 0x3A	; 58
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	10 82       	st	Z, r1
    21e2:	4c c0       	rjmp	.+152    	; 0x227c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    21e4:	ea e3       	ldi	r30, 0x3A	; 58
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8f ef       	ldi	r24, 0xFF	; 255
    21ea:	80 83       	st	Z, r24
    21ec:	47 c0       	rjmp	.+142    	; 0x227c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	38 87       	std	Y+8, r19	; 0x08
    21f6:	2f 83       	std	Y+7, r18	; 0x07
    21f8:	8f 81       	ldd	r24, Y+7	; 0x07
    21fa:	98 85       	ldd	r25, Y+8	; 0x08
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	31 f0       	breq	.+12     	; 0x220c <DIO_u8SetPortDirection+0xa6>
    2200:	2f 81       	ldd	r18, Y+7	; 0x07
    2202:	38 85       	ldd	r19, Y+8	; 0x08
    2204:	21 30       	cpi	r18, 0x01	; 1
    2206:	31 05       	cpc	r19, r1
    2208:	29 f0       	breq	.+10     	; 0x2214 <DIO_u8SetPortDirection+0xae>
    220a:	38 c0       	rjmp	.+112    	; 0x227c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    220c:	e7 e3       	ldi	r30, 0x37	; 55
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	10 82       	st	Z, r1
    2212:	34 c0       	rjmp	.+104    	; 0x227c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    2214:	e7 e3       	ldi	r30, 0x37	; 55
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	8f ef       	ldi	r24, 0xFF	; 255
    221a:	80 83       	st	Z, r24
    221c:	2f c0       	rjmp	.+94     	; 0x227c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	3e 83       	std	Y+6, r19	; 0x06
    2226:	2d 83       	std	Y+5, r18	; 0x05
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	31 f0       	breq	.+12     	; 0x223c <DIO_u8SetPortDirection+0xd6>
    2230:	2d 81       	ldd	r18, Y+5	; 0x05
    2232:	3e 81       	ldd	r19, Y+6	; 0x06
    2234:	21 30       	cpi	r18, 0x01	; 1
    2236:	31 05       	cpc	r19, r1
    2238:	29 f0       	breq	.+10     	; 0x2244 <DIO_u8SetPortDirection+0xde>
    223a:	20 c0       	rjmp	.+64     	; 0x227c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    223c:	e4 e3       	ldi	r30, 0x34	; 52
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	10 82       	st	Z, r1
    2242:	1c c0       	rjmp	.+56     	; 0x227c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    2244:	e4 e3       	ldi	r30, 0x34	; 52
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	80 83       	st	Z, r24
    224c:	17 c0       	rjmp	.+46     	; 0x227c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	3c 83       	std	Y+4, r19	; 0x04
    2256:	2b 83       	std	Y+3, r18	; 0x03
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	31 f0       	breq	.+12     	; 0x226c <DIO_u8SetPortDirection+0x106>
    2260:	2b 81       	ldd	r18, Y+3	; 0x03
    2262:	3c 81       	ldd	r19, Y+4	; 0x04
    2264:	21 30       	cpi	r18, 0x01	; 1
    2266:	31 05       	cpc	r19, r1
    2268:	29 f0       	breq	.+10     	; 0x2274 <DIO_u8SetPortDirection+0x10e>
    226a:	08 c0       	rjmp	.+16     	; 0x227c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    226c:	e1 e3       	ldi	r30, 0x31	; 49
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	10 82       	st	Z, r1
    2272:	04 c0       	rjmp	.+8      	; 0x227c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    2274:	e1 e3       	ldi	r30, 0x31	; 49
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    227c:	2d 96       	adiw	r28, 0x0d	; 13
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	2d 97       	sbiw	r28, 0x0d	; 13
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	8a 83       	std	Y+2, r24	; 0x02
    22a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	84 30       	cpi	r24, 0x04	; 4
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <DIO_u8SetPortValue+0x24>
    22b0:	80 c0       	rjmp	.+256    	; 0x23b2 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	3d 87       	std	Y+13, r19	; 0x0d
    22ba:	2c 87       	std	Y+12, r18	; 0x0c
    22bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    22be:	9d 85       	ldd	r25, Y+13	; 0x0d
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	91 05       	cpc	r25, r1
    22c4:	71 f1       	breq	.+92     	; 0x2322 <DIO_u8SetPortValue+0x94>
    22c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    22c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    22ca:	22 30       	cpi	r18, 0x02	; 2
    22cc:	31 05       	cpc	r19, r1
    22ce:	2c f4       	brge	.+10     	; 0x22da <DIO_u8SetPortValue+0x4c>
    22d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    22d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	69 f0       	breq	.+26     	; 0x22f2 <DIO_u8SetPortValue+0x64>
    22d8:	6d c0       	rjmp	.+218    	; 0x23b4 <DIO_u8SetPortValue+0x126>
    22da:	2c 85       	ldd	r18, Y+12	; 0x0c
    22dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    22de:	22 30       	cpi	r18, 0x02	; 2
    22e0:	31 05       	cpc	r19, r1
    22e2:	b9 f1       	breq	.+110    	; 0x2352 <DIO_u8SetPortValue+0xc4>
    22e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    22e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    22e8:	83 30       	cpi	r24, 0x03	; 3
    22ea:	91 05       	cpc	r25, r1
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <DIO_u8SetPortValue+0x62>
    22ee:	49 c0       	rjmp	.+146    	; 0x2382 <DIO_u8SetPortValue+0xf4>
    22f0:	61 c0       	rjmp	.+194    	; 0x23b4 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	3b 87       	std	Y+11, r19	; 0x0b
    22fa:	2a 87       	std	Y+10, r18	; 0x0a
    22fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	31 f0       	breq	.+12     	; 0x2310 <DIO_u8SetPortValue+0x82>
    2304:	2a 85       	ldd	r18, Y+10	; 0x0a
    2306:	3b 85       	ldd	r19, Y+11	; 0x0b
    2308:	21 30       	cpi	r18, 0x01	; 1
    230a:	31 05       	cpc	r19, r1
    230c:	29 f0       	breq	.+10     	; 0x2318 <DIO_u8SetPortValue+0x8a>
    230e:	52 c0       	rjmp	.+164    	; 0x23b4 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    2310:	eb e3       	ldi	r30, 0x3B	; 59
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	10 82       	st	Z, r1
    2316:	4e c0       	rjmp	.+156    	; 0x23b4 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    2318:	eb e3       	ldi	r30, 0x3B	; 59
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	80 83       	st	Z, r24
    2320:	49 c0       	rjmp	.+146    	; 0x23b4 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	39 87       	std	Y+9, r19	; 0x09
    232a:	28 87       	std	Y+8, r18	; 0x08
    232c:	88 85       	ldd	r24, Y+8	; 0x08
    232e:	99 85       	ldd	r25, Y+9	; 0x09
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	31 f0       	breq	.+12     	; 0x2340 <DIO_u8SetPortValue+0xb2>
    2334:	28 85       	ldd	r18, Y+8	; 0x08
    2336:	39 85       	ldd	r19, Y+9	; 0x09
    2338:	21 30       	cpi	r18, 0x01	; 1
    233a:	31 05       	cpc	r19, r1
    233c:	29 f0       	breq	.+10     	; 0x2348 <DIO_u8SetPortValue+0xba>
    233e:	3a c0       	rjmp	.+116    	; 0x23b4 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    2340:	e8 e3       	ldi	r30, 0x38	; 56
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	10 82       	st	Z, r1
    2346:	36 c0       	rjmp	.+108    	; 0x23b4 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2348:	e8 e3       	ldi	r30, 0x38	; 56
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	8f ef       	ldi	r24, 0xFF	; 255
    234e:	80 83       	st	Z, r24
    2350:	31 c0       	rjmp	.+98     	; 0x23b4 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	3f 83       	std	Y+7, r19	; 0x07
    235a:	2e 83       	std	Y+6, r18	; 0x06
    235c:	8e 81       	ldd	r24, Y+6	; 0x06
    235e:	9f 81       	ldd	r25, Y+7	; 0x07
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	31 f0       	breq	.+12     	; 0x2370 <DIO_u8SetPortValue+0xe2>
    2364:	2e 81       	ldd	r18, Y+6	; 0x06
    2366:	3f 81       	ldd	r19, Y+7	; 0x07
    2368:	21 30       	cpi	r18, 0x01	; 1
    236a:	31 05       	cpc	r19, r1
    236c:	29 f0       	breq	.+10     	; 0x2378 <DIO_u8SetPortValue+0xea>
    236e:	22 c0       	rjmp	.+68     	; 0x23b4 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    2370:	e5 e3       	ldi	r30, 0x35	; 53
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	10 82       	st	Z, r1
    2376:	1e c0       	rjmp	.+60     	; 0x23b4 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2378:	e5 e3       	ldi	r30, 0x35	; 53
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	8f ef       	ldi	r24, 0xFF	; 255
    237e:	80 83       	st	Z, r24
    2380:	19 c0       	rjmp	.+50     	; 0x23b4 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	3d 83       	std	Y+5, r19	; 0x05
    238a:	2c 83       	std	Y+4, r18	; 0x04
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	31 f0       	breq	.+12     	; 0x23a0 <DIO_u8SetPortValue+0x112>
    2394:	2c 81       	ldd	r18, Y+4	; 0x04
    2396:	3d 81       	ldd	r19, Y+5	; 0x05
    2398:	21 30       	cpi	r18, 0x01	; 1
    239a:	31 05       	cpc	r19, r1
    239c:	29 f0       	breq	.+10     	; 0x23a8 <DIO_u8SetPortValue+0x11a>
    239e:	0a c0       	rjmp	.+20     	; 0x23b4 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    23a0:	e2 e3       	ldi	r30, 0x32	; 50
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	10 82       	st	Z, r1
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    23a8:	e2 e3       	ldi	r30, 0x32	; 50
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	80 83       	st	Z, r24
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    23b2:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b6:	2d 96       	adiw	r28, 0x0d	; 13
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <DIO_u8GetPortValue+0x6>
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <DIO_u8GetPortValue+0x8>
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <DIO_u8GetPortValue+0xa>
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	8a 83       	std	Y+2, r24	; 0x02
    23d8:	7c 83       	std	Y+4, r23	; 0x04
    23da:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	84 30       	cpi	r24, 0x04	; 4
    23e4:	08 f0       	brcs	.+2      	; 0x23e8 <DIO_u8GetPortValue+0x20>
    23e6:	3f c0       	rjmp	.+126    	; 0x2466 <DIO_u8GetPortValue+0x9e>
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	d9 f1       	breq	.+118    	; 0x2466 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	3e 83       	std	Y+6, r19	; 0x06
    23f8:	2d 83       	std	Y+5, r18	; 0x05
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	91 05       	cpc	r25, r1
    2402:	e1 f0       	breq	.+56     	; 0x243c <DIO_u8GetPortValue+0x74>
    2404:	2d 81       	ldd	r18, Y+5	; 0x05
    2406:	3e 81       	ldd	r19, Y+6	; 0x06
    2408:	22 30       	cpi	r18, 0x02	; 2
    240a:	31 05       	cpc	r19, r1
    240c:	2c f4       	brge	.+10     	; 0x2418 <DIO_u8GetPortValue+0x50>
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	61 f0       	breq	.+24     	; 0x242e <DIO_u8GetPortValue+0x66>
    2416:	28 c0       	rjmp	.+80     	; 0x2468 <DIO_u8GetPortValue+0xa0>
    2418:	2d 81       	ldd	r18, Y+5	; 0x05
    241a:	3e 81       	ldd	r19, Y+6	; 0x06
    241c:	22 30       	cpi	r18, 0x02	; 2
    241e:	31 05       	cpc	r19, r1
    2420:	a1 f0       	breq	.+40     	; 0x244a <DIO_u8GetPortValue+0x82>
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	83 30       	cpi	r24, 0x03	; 3
    2428:	91 05       	cpc	r25, r1
    242a:	b1 f0       	breq	.+44     	; 0x2458 <DIO_u8GetPortValue+0x90>
    242c:	1d c0       	rjmp	.+58     	; 0x2468 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    242e:	e9 e3       	ldi	r30, 0x39	; 57
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	eb 81       	ldd	r30, Y+3	; 0x03
    2436:	fc 81       	ldd	r31, Y+4	; 0x04
    2438:	80 83       	st	Z, r24
    243a:	16 c0       	rjmp	.+44     	; 0x2468 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    243c:	e6 e3       	ldi	r30, 0x36	; 54
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	eb 81       	ldd	r30, Y+3	; 0x03
    2444:	fc 81       	ldd	r31, Y+4	; 0x04
    2446:	80 83       	st	Z, r24
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    244a:	e3 e3       	ldi	r30, 0x33	; 51
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	eb 81       	ldd	r30, Y+3	; 0x03
    2452:	fc 81       	ldd	r31, Y+4	; 0x04
    2454:	80 83       	st	Z, r24
    2456:	08 c0       	rjmp	.+16     	; 0x2468 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2458:	e0 e3       	ldi	r30, 0x30	; 48
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	eb 81       	ldd	r30, Y+3	; 0x03
    2460:	fc 81       	ldd	r31, Y+4	; 0x04
    2462:	80 83       	st	Z, r24
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2466:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2468:	89 81       	ldd	r24, Y+1	; 0x01
}
    246a:	26 96       	adiw	r28, 0x06	; 6
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    247c:	8f 92       	push	r8
    247e:	af 92       	push	r10
    2480:	cf 92       	push	r12
    2482:	ef 92       	push	r14
    2484:	0f 93       	push	r16
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	2c 97       	sbiw	r28, 0x0c	; 12
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	6a 83       	std	Y+2, r22	; 0x02
    249e:	4b 83       	std	Y+3, r20	; 0x03
    24a0:	2c 83       	std	Y+4, r18	; 0x04
    24a2:	0d 83       	std	Y+5, r16	; 0x05
    24a4:	ee 82       	std	Y+6, r14	; 0x06
    24a6:	cf 82       	std	Y+7, r12	; 0x07
    24a8:	a8 86       	std	Y+8, r10	; 0x08
    24aa:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	3b 87       	std	Y+11, r19	; 0x0b
    24b4:	2a 87       	std	Y+10, r18	; 0x0a
    24b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	91 05       	cpc	r25, r1
    24be:	09 f4       	brne	.+2      	; 0x24c2 <DIO_u8SetValueToAllPins+0x46>
    24c0:	a8 c0       	rjmp	.+336    	; 0x2612 <DIO_u8SetValueToAllPins+0x196>
    24c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    24c4:	3b 85       	ldd	r19, Y+11	; 0x0b
    24c6:	22 30       	cpi	r18, 0x02	; 2
    24c8:	31 05       	cpc	r19, r1
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <DIO_u8SetValueToAllPins+0x5a>
    24cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <DIO_u8SetValueToAllPins+0x74>
    24d4:	50 c2       	rjmp	.+1184   	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
    24d6:	2a 85       	ldd	r18, Y+10	; 0x0a
    24d8:	3b 85       	ldd	r19, Y+11	; 0x0b
    24da:	22 30       	cpi	r18, 0x02	; 2
    24dc:	31 05       	cpc	r19, r1
    24de:	09 f4       	brne	.+2      	; 0x24e2 <DIO_u8SetValueToAllPins+0x66>
    24e0:	29 c1       	rjmp	.+594    	; 0x2734 <DIO_u8SetValueToAllPins+0x2b8>
    24e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    24e6:	83 30       	cpi	r24, 0x03	; 3
    24e8:	91 05       	cpc	r25, r1
    24ea:	09 f4       	brne	.+2      	; 0x24ee <DIO_u8SetValueToAllPins+0x72>
    24ec:	b4 c1       	rjmp	.+872    	; 0x2856 <DIO_u8SetValueToAllPins+0x3da>
    24ee:	43 c2       	rjmp	.+1158   	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	41 f4       	brne	.+16     	; 0x2506 <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    24f6:	ab e3       	ldi	r26, 0x3B	; 59
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	eb e3       	ldi	r30, 0x3B	; 59
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	81 60       	ori	r24, 0x01	; 1
    2502:	8c 93       	st	X, r24
    2504:	07 c0       	rjmp	.+14     	; 0x2514 <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    2506:	ab e3       	ldi	r26, 0x3B	; 59
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	eb e3       	ldi	r30, 0x3B	; 59
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	8e 7f       	andi	r24, 0xFE	; 254
    2512:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	41 f4       	brne	.+16     	; 0x252a <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    251a:	ab e3       	ldi	r26, 0x3B	; 59
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	eb e3       	ldi	r30, 0x3B	; 59
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	82 60       	ori	r24, 0x02	; 2
    2526:	8c 93       	st	X, r24
    2528:	07 c0       	rjmp	.+14     	; 0x2538 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    252a:	ab e3       	ldi	r26, 0x3B	; 59
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	eb e3       	ldi	r30, 0x3B	; 59
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	8d 7f       	andi	r24, 0xFD	; 253
    2536:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2538:	8c 81       	ldd	r24, Y+4	; 0x04
    253a:	81 30       	cpi	r24, 0x01	; 1
    253c:	41 f4       	brne	.+16     	; 0x254e <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    253e:	ab e3       	ldi	r26, 0x3B	; 59
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	eb e3       	ldi	r30, 0x3B	; 59
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	84 60       	ori	r24, 0x04	; 4
    254a:	8c 93       	st	X, r24
    254c:	07 c0       	rjmp	.+14     	; 0x255c <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    254e:	ab e3       	ldi	r26, 0x3B	; 59
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	eb e3       	ldi	r30, 0x3B	; 59
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8b 7f       	andi	r24, 0xFB	; 251
    255a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    255c:	8d 81       	ldd	r24, Y+5	; 0x05
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	41 f4       	brne	.+16     	; 0x2572 <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    2562:	ab e3       	ldi	r26, 0x3B	; 59
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	eb e3       	ldi	r30, 0x3B	; 59
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	88 60       	ori	r24, 0x08	; 8
    256e:	8c 93       	st	X, r24
    2570:	07 c0       	rjmp	.+14     	; 0x2580 <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    2572:	ab e3       	ldi	r26, 0x3B	; 59
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	eb e3       	ldi	r30, 0x3B	; 59
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	87 7f       	andi	r24, 0xF7	; 247
    257e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    2580:	8e 81       	ldd	r24, Y+6	; 0x06
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	41 f4       	brne	.+16     	; 0x2596 <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2586:	ab e3       	ldi	r26, 0x3B	; 59
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	eb e3       	ldi	r30, 0x3B	; 59
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	80 61       	ori	r24, 0x10	; 16
    2592:	8c 93       	st	X, r24
    2594:	07 c0       	rjmp	.+14     	; 0x25a4 <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2596:	ab e3       	ldi	r26, 0x3B	; 59
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	eb e3       	ldi	r30, 0x3B	; 59
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	8f 7e       	andi	r24, 0xEF	; 239
    25a2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    25a4:	8f 81       	ldd	r24, Y+7	; 0x07
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	41 f4       	brne	.+16     	; 0x25ba <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    25aa:	ab e3       	ldi	r26, 0x3B	; 59
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	eb e3       	ldi	r30, 0x3B	; 59
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	80 62       	ori	r24, 0x20	; 32
    25b6:	8c 93       	st	X, r24
    25b8:	07 c0       	rjmp	.+14     	; 0x25c8 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    25ba:	ab e3       	ldi	r26, 0x3B	; 59
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	eb e3       	ldi	r30, 0x3B	; 59
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 7d       	andi	r24, 0xDF	; 223
    25c6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    25c8:	88 85       	ldd	r24, Y+8	; 0x08
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	41 f4       	brne	.+16     	; 0x25de <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    25ce:	ab e3       	ldi	r26, 0x3B	; 59
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	eb e3       	ldi	r30, 0x3B	; 59
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	80 64       	ori	r24, 0x40	; 64
    25da:	8c 93       	st	X, r24
    25dc:	07 c0       	rjmp	.+14     	; 0x25ec <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    25de:	ab e3       	ldi	r26, 0x3B	; 59
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	eb e3       	ldi	r30, 0x3B	; 59
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 7b       	andi	r24, 0xBF	; 191
    25ea:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    25ec:	89 85       	ldd	r24, Y+9	; 0x09
    25ee:	81 30       	cpi	r24, 0x01	; 1
    25f0:	41 f4       	brne	.+16     	; 0x2602 <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    25f2:	ab e3       	ldi	r26, 0x3B	; 59
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	eb e3       	ldi	r30, 0x3B	; 59
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	80 68       	ori	r24, 0x80	; 128
    25fe:	8c 93       	st	X, r24
    2600:	ba c1       	rjmp	.+884    	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    2602:	ab e3       	ldi	r26, 0x3B	; 59
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	eb e3       	ldi	r30, 0x3B	; 59
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	8f 77       	andi	r24, 0x7F	; 127
    260e:	8c 93       	st	X, r24
    2610:	b2 c1       	rjmp	.+868    	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	81 30       	cpi	r24, 0x01	; 1
    2616:	41 f4       	brne	.+16     	; 0x2628 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2618:	a8 e3       	ldi	r26, 0x38	; 56
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e8 e3       	ldi	r30, 0x38	; 56
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	81 60       	ori	r24, 0x01	; 1
    2624:	8c 93       	st	X, r24
    2626:	07 c0       	rjmp	.+14     	; 0x2636 <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2628:	a8 e3       	ldi	r26, 0x38	; 56
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e8 e3       	ldi	r30, 0x38	; 56
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	8e 7f       	andi	r24, 0xFE	; 254
    2634:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	41 f4       	brne	.+16     	; 0x264c <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    263c:	a8 e3       	ldi	r26, 0x38	; 56
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e8 e3       	ldi	r30, 0x38	; 56
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	82 60       	ori	r24, 0x02	; 2
    2648:	8c 93       	st	X, r24
    264a:	07 c0       	rjmp	.+14     	; 0x265a <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    264c:	a8 e3       	ldi	r26, 0x38	; 56
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e8 e3       	ldi	r30, 0x38	; 56
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	8d 7f       	andi	r24, 0xFD	; 253
    2658:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	81 30       	cpi	r24, 0x01	; 1
    265e:	41 f4       	brne	.+16     	; 0x2670 <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    2660:	a8 e3       	ldi	r26, 0x38	; 56
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e8 e3       	ldi	r30, 0x38	; 56
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	84 60       	ori	r24, 0x04	; 4
    266c:	8c 93       	st	X, r24
    266e:	07 c0       	rjmp	.+14     	; 0x267e <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    2670:	a8 e3       	ldi	r26, 0x38	; 56
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e8 e3       	ldi	r30, 0x38	; 56
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	8b 7f       	andi	r24, 0xFB	; 251
    267c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	41 f4       	brne	.+16     	; 0x2694 <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    2684:	a8 e3       	ldi	r26, 0x38	; 56
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	e8 e3       	ldi	r30, 0x38	; 56
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 60       	ori	r24, 0x08	; 8
    2690:	8c 93       	st	X, r24
    2692:	07 c0       	rjmp	.+14     	; 0x26a2 <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    2694:	a8 e3       	ldi	r26, 0x38	; 56
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e8 e3       	ldi	r30, 0x38	; 56
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	87 7f       	andi	r24, 0xF7	; 247
    26a0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    26a2:	8e 81       	ldd	r24, Y+6	; 0x06
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	41 f4       	brne	.+16     	; 0x26b8 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    26a8:	a8 e3       	ldi	r26, 0x38	; 56
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e8 e3       	ldi	r30, 0x38	; 56
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	80 61       	ori	r24, 0x10	; 16
    26b4:	8c 93       	st	X, r24
    26b6:	07 c0       	rjmp	.+14     	; 0x26c6 <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    26b8:	a8 e3       	ldi	r26, 0x38	; 56
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e8 e3       	ldi	r30, 0x38	; 56
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8f 7e       	andi	r24, 0xEF	; 239
    26c4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    26c6:	8f 81       	ldd	r24, Y+7	; 0x07
    26c8:	81 30       	cpi	r24, 0x01	; 1
    26ca:	41 f4       	brne	.+16     	; 0x26dc <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    26cc:	a8 e3       	ldi	r26, 0x38	; 56
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e8 e3       	ldi	r30, 0x38	; 56
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	80 62       	ori	r24, 0x20	; 32
    26d8:	8c 93       	st	X, r24
    26da:	07 c0       	rjmp	.+14     	; 0x26ea <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    26dc:	a8 e3       	ldi	r26, 0x38	; 56
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e8 e3       	ldi	r30, 0x38	; 56
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	8f 7d       	andi	r24, 0xDF	; 223
    26e8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    26ea:	88 85       	ldd	r24, Y+8	; 0x08
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	41 f4       	brne	.+16     	; 0x2700 <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    26f0:	a8 e3       	ldi	r26, 0x38	; 56
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	e8 e3       	ldi	r30, 0x38	; 56
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	80 64       	ori	r24, 0x40	; 64
    26fc:	8c 93       	st	X, r24
    26fe:	07 c0       	rjmp	.+14     	; 0x270e <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    2700:	a8 e3       	ldi	r26, 0x38	; 56
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e8 e3       	ldi	r30, 0x38	; 56
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8f 7b       	andi	r24, 0xBF	; 191
    270c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	81 30       	cpi	r24, 0x01	; 1
    2712:	41 f4       	brne	.+16     	; 0x2724 <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    2714:	a8 e3       	ldi	r26, 0x38	; 56
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e8 e3       	ldi	r30, 0x38	; 56
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	80 68       	ori	r24, 0x80	; 128
    2720:	8c 93       	st	X, r24
    2722:	29 c1       	rjmp	.+594    	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    2724:	a8 e3       	ldi	r26, 0x38	; 56
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e8 e3       	ldi	r30, 0x38	; 56
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	8f 77       	andi	r24, 0x7F	; 127
    2730:	8c 93       	st	X, r24
    2732:	21 c1       	rjmp	.+578    	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	81 30       	cpi	r24, 0x01	; 1
    2738:	41 f4       	brne	.+16     	; 0x274a <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    273a:	a5 e3       	ldi	r26, 0x35	; 53
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e5 e3       	ldi	r30, 0x35	; 53
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	81 60       	ori	r24, 0x01	; 1
    2746:	8c 93       	st	X, r24
    2748:	07 c0       	rjmp	.+14     	; 0x2758 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    274a:	a5 e3       	ldi	r26, 0x35	; 53
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e5 e3       	ldi	r30, 0x35	; 53
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	8e 7f       	andi	r24, 0xFE	; 254
    2756:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	41 f4       	brne	.+16     	; 0x276e <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    275e:	a5 e3       	ldi	r26, 0x35	; 53
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e5 e3       	ldi	r30, 0x35	; 53
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	82 60       	ori	r24, 0x02	; 2
    276a:	8c 93       	st	X, r24
    276c:	07 c0       	rjmp	.+14     	; 0x277c <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    276e:	a5 e3       	ldi	r26, 0x35	; 53
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e5 e3       	ldi	r30, 0x35	; 53
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	8d 7f       	andi	r24, 0xFD	; 253
    277a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    277c:	8c 81       	ldd	r24, Y+4	; 0x04
    277e:	81 30       	cpi	r24, 0x01	; 1
    2780:	41 f4       	brne	.+16     	; 0x2792 <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    2782:	a5 e3       	ldi	r26, 0x35	; 53
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e5 e3       	ldi	r30, 0x35	; 53
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	84 60       	ori	r24, 0x04	; 4
    278e:	8c 93       	st	X, r24
    2790:	07 c0       	rjmp	.+14     	; 0x27a0 <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    2792:	a5 e3       	ldi	r26, 0x35	; 53
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e5 e3       	ldi	r30, 0x35	; 53
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	8b 7f       	andi	r24, 0xFB	; 251
    279e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	41 f4       	brne	.+16     	; 0x27b6 <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    27a6:	a5 e3       	ldi	r26, 0x35	; 53
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e5 e3       	ldi	r30, 0x35	; 53
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	88 60       	ori	r24, 0x08	; 8
    27b2:	8c 93       	st	X, r24
    27b4:	07 c0       	rjmp	.+14     	; 0x27c4 <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    27b6:	a5 e3       	ldi	r26, 0x35	; 53
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e5 e3       	ldi	r30, 0x35	; 53
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	87 7f       	andi	r24, 0xF7	; 247
    27c2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    27c4:	8e 81       	ldd	r24, Y+6	; 0x06
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	41 f4       	brne	.+16     	; 0x27da <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    27ca:	a5 e3       	ldi	r26, 0x35	; 53
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	e5 e3       	ldi	r30, 0x35	; 53
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 61       	ori	r24, 0x10	; 16
    27d6:	8c 93       	st	X, r24
    27d8:	07 c0       	rjmp	.+14     	; 0x27e8 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    27da:	a5 e3       	ldi	r26, 0x35	; 53
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e5 e3       	ldi	r30, 0x35	; 53
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8f 7e       	andi	r24, 0xEF	; 239
    27e6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    27e8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ea:	81 30       	cpi	r24, 0x01	; 1
    27ec:	41 f4       	brne	.+16     	; 0x27fe <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    27ee:	a5 e3       	ldi	r26, 0x35	; 53
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e5 e3       	ldi	r30, 0x35	; 53
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	80 62       	ori	r24, 0x20	; 32
    27fa:	8c 93       	st	X, r24
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    27fe:	a5 e3       	ldi	r26, 0x35	; 53
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e5 e3       	ldi	r30, 0x35	; 53
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	8f 7d       	andi	r24, 0xDF	; 223
    280a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    280c:	88 85       	ldd	r24, Y+8	; 0x08
    280e:	81 30       	cpi	r24, 0x01	; 1
    2810:	41 f4       	brne	.+16     	; 0x2822 <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    2812:	a5 e3       	ldi	r26, 0x35	; 53
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e5 e3       	ldi	r30, 0x35	; 53
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	80 64       	ori	r24, 0x40	; 64
    281e:	8c 93       	st	X, r24
    2820:	07 c0       	rjmp	.+14     	; 0x2830 <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    2822:	a5 e3       	ldi	r26, 0x35	; 53
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e5 e3       	ldi	r30, 0x35	; 53
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	8f 7b       	andi	r24, 0xBF	; 191
    282e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	81 30       	cpi	r24, 0x01	; 1
    2834:	41 f4       	brne	.+16     	; 0x2846 <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2836:	a5 e3       	ldi	r26, 0x35	; 53
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	e5 e3       	ldi	r30, 0x35	; 53
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	80 68       	ori	r24, 0x80	; 128
    2842:	8c 93       	st	X, r24
    2844:	98 c0       	rjmp	.+304    	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2846:	a5 e3       	ldi	r26, 0x35	; 53
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e5 e3       	ldi	r30, 0x35	; 53
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	8f 77       	andi	r24, 0x7F	; 127
    2852:	8c 93       	st	X, r24
    2854:	90 c0       	rjmp	.+288    	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	41 f4       	brne	.+16     	; 0x286c <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    285c:	a2 e3       	ldi	r26, 0x32	; 50
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e2 e3       	ldi	r30, 0x32	; 50
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	81 60       	ori	r24, 0x01	; 1
    2868:	8c 93       	st	X, r24
    286a:	07 c0       	rjmp	.+14     	; 0x287a <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    286c:	a2 e3       	ldi	r26, 0x32	; 50
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e2 e3       	ldi	r30, 0x32	; 50
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	8e 7f       	andi	r24, 0xFE	; 254
    2878:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	81 30       	cpi	r24, 0x01	; 1
    287e:	41 f4       	brne	.+16     	; 0x2890 <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    2880:	a2 e3       	ldi	r26, 0x32	; 50
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e2 e3       	ldi	r30, 0x32	; 50
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	82 60       	ori	r24, 0x02	; 2
    288c:	8c 93       	st	X, r24
    288e:	07 c0       	rjmp	.+14     	; 0x289e <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    2890:	a2 e3       	ldi	r26, 0x32	; 50
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e2 e3       	ldi	r30, 0x32	; 50
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8d 7f       	andi	r24, 0xFD	; 253
    289c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	41 f4       	brne	.+16     	; 0x28b4 <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    28a4:	a2 e3       	ldi	r26, 0x32	; 50
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e2 e3       	ldi	r30, 0x32	; 50
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	84 60       	ori	r24, 0x04	; 4
    28b0:	8c 93       	st	X, r24
    28b2:	07 c0       	rjmp	.+14     	; 0x28c2 <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    28b4:	a2 e3       	ldi	r26, 0x32	; 50
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e2 e3       	ldi	r30, 0x32	; 50
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	8b 7f       	andi	r24, 0xFB	; 251
    28c0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	41 f4       	brne	.+16     	; 0x28d8 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    28c8:	a2 e3       	ldi	r26, 0x32	; 50
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	e2 e3       	ldi	r30, 0x32	; 50
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	88 60       	ori	r24, 0x08	; 8
    28d4:	8c 93       	st	X, r24
    28d6:	07 c0       	rjmp	.+14     	; 0x28e6 <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    28d8:	a2 e3       	ldi	r26, 0x32	; 50
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e2 e3       	ldi	r30, 0x32	; 50
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	87 7f       	andi	r24, 0xF7	; 247
    28e4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    28e6:	8e 81       	ldd	r24, Y+6	; 0x06
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	41 f4       	brne	.+16     	; 0x28fc <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    28ec:	a2 e3       	ldi	r26, 0x32	; 50
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e2 e3       	ldi	r30, 0x32	; 50
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	80 61       	ori	r24, 0x10	; 16
    28f8:	8c 93       	st	X, r24
    28fa:	07 c0       	rjmp	.+14     	; 0x290a <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    28fc:	a2 e3       	ldi	r26, 0x32	; 50
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e2 e3       	ldi	r30, 0x32	; 50
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	8f 7e       	andi	r24, 0xEF	; 239
    2908:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    290a:	8f 81       	ldd	r24, Y+7	; 0x07
    290c:	81 30       	cpi	r24, 0x01	; 1
    290e:	41 f4       	brne	.+16     	; 0x2920 <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    2910:	a2 e3       	ldi	r26, 0x32	; 50
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e2 e3       	ldi	r30, 0x32	; 50
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	80 62       	ori	r24, 0x20	; 32
    291c:	8c 93       	st	X, r24
    291e:	07 c0       	rjmp	.+14     	; 0x292e <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    2920:	a2 e3       	ldi	r26, 0x32	; 50
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e2 e3       	ldi	r30, 0x32	; 50
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	8f 7d       	andi	r24, 0xDF	; 223
    292c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    292e:	88 85       	ldd	r24, Y+8	; 0x08
    2930:	81 30       	cpi	r24, 0x01	; 1
    2932:	41 f4       	brne	.+16     	; 0x2944 <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2934:	a2 e3       	ldi	r26, 0x32	; 50
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e2 e3       	ldi	r30, 0x32	; 50
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	80 64       	ori	r24, 0x40	; 64
    2940:	8c 93       	st	X, r24
    2942:	07 c0       	rjmp	.+14     	; 0x2952 <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2944:	a2 e3       	ldi	r26, 0x32	; 50
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	e2 e3       	ldi	r30, 0x32	; 50
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	8f 7b       	andi	r24, 0xBF	; 191
    2950:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	41 f4       	brne	.+16     	; 0x2968 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2958:	a2 e3       	ldi	r26, 0x32	; 50
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e2 e3       	ldi	r30, 0x32	; 50
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	80 68       	ori	r24, 0x80	; 128
    2964:	8c 93       	st	X, r24
    2966:	07 c0       	rjmp	.+14     	; 0x2976 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2968:	a2 e3       	ldi	r26, 0x32	; 50
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e2 e3       	ldi	r30, 0x32	; 50
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	8f 77       	andi	r24, 0x7F	; 127
    2974:	8c 93       	st	X, r24
		}
		break;
	}
}
    2976:	2c 96       	adiw	r28, 0x0c	; 12
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	0f 91       	pop	r16
    2988:	ef 90       	pop	r14
    298a:	cf 90       	pop	r12
    298c:	af 90       	pop	r10
    298e:	8f 90       	pop	r8
    2990:	08 95       	ret

00002992 <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    299a:	a7 e2       	ldi	r26, 0x27	; 39
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	e7 e2       	ldi	r30, 0x27	; 39
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	8f 77       	andi	r24, 0x7F	; 127
    29a6:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    29a8:	a7 e2       	ldi	r26, 0x27	; 39
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e7 e2       	ldi	r30, 0x27	; 39
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	80 64       	ori	r24, 0x40	; 64
    29b4:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    29b6:	a7 e2       	ldi	r26, 0x27	; 39
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e7 e2       	ldi	r30, 0x27	; 39
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	8f 7d       	andi	r24, 0xDF	; 223
    29c2:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    29c4:	a6 e2       	ldi	r26, 0x26	; 38
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e6 e2       	ldi	r30, 0x26	; 38
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	8f 7d       	andi	r24, 0xDF	; 223
    29d0:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    29d2:	a6 e2       	ldi	r26, 0x26	; 38
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e6 e2       	ldi	r30, 0x26	; 38
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	84 60       	ori	r24, 0x04	; 4
    29de:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    29e0:	a6 e2       	ldi	r26, 0x26	; 38
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e6 e2       	ldi	r30, 0x26	; 38
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	82 60       	ori	r24, 0x02	; 2
    29ec:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    29ee:	a6 e2       	ldi	r26, 0x26	; 38
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e6 e2       	ldi	r30, 0x26	; 38
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	8e 7f       	andi	r24, 0xFE	; 254
    29fa:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    29fc:	a6 e2       	ldi	r26, 0x26	; 38
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e6 e2       	ldi	r30, 0x26	; 38
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	80 68       	ori	r24, 0x80	; 128
    2a08:	8c 93       	st	X, r24

}
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	28 97       	sbiw	r28, 0x08	; 8
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	8e 83       	std	Y+6, r24	; 0x06
    2a26:	78 87       	std	Y+8, r23	; 0x08
    2a28:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2a2e:	19 82       	std	Y+1, r1	; 0x01
    2a30:	1a 82       	std	Y+2, r1	; 0x02
    2a32:	1b 82       	std	Y+3, r1	; 0x03
    2a34:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2a36:	8e 81       	ldd	r24, Y+6	; 0x06
    2a38:	80 32       	cpi	r24, 0x20	; 32
    2a3a:	08 f0       	brcs	.+2      	; 0x2a3e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2a3c:	5b c0       	rjmp	.+182    	; 0x2af4 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a40:	98 85       	ldd	r25, Y+8	; 0x08
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2a46:	56 c0       	rjmp	.+172    	; 0x2af4 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2a48:	a7 e2       	ldi	r26, 0x27	; 39
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e7 e2       	ldi	r30, 0x27	; 39
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	80 7e       	andi	r24, 0xE0	; 224
    2a54:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2a56:	a7 e2       	ldi	r26, 0x27	; 39
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e7 e2       	ldi	r30, 0x27	; 39
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	90 81       	ld	r25, Z
    2a60:	8e 81       	ldd	r24, Y+6	; 0x06
    2a62:	89 2b       	or	r24, r25
    2a64:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2a66:	a6 e2       	ldi	r26, 0x26	; 38
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e6 e2       	ldi	r30, 0x26	; 38
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	80 64       	ori	r24, 0x40	; 64
    2a72:	8c 93       	st	X, r24
    2a74:	0b c0       	rjmp	.+22     	; 0x2a8c <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	ab 81       	ldd	r26, Y+3	; 0x03
    2a7c:	bc 81       	ldd	r27, Y+4	; 0x04
    2a7e:	01 96       	adiw	r24, 0x01	; 1
    2a80:	a1 1d       	adc	r26, r1
    2a82:	b1 1d       	adc	r27, r1
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	ab 83       	std	Y+3, r26	; 0x03
    2a8a:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    2a8c:	e6 e2       	ldi	r30, 0x26	; 38
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	82 95       	swap	r24
    2a94:	8f 70       	andi	r24, 0x0F	; 15
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	81 70       	andi	r24, 0x01	; 1
    2a9c:	90 70       	andi	r25, 0x00	; 0
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	61 f4       	brne	.+24     	; 0x2aba <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	ab 81       	ldd	r26, Y+3	; 0x03
    2aa8:	bc 81       	ldd	r27, Y+4	; 0x04
    2aaa:	80 35       	cpi	r24, 0x50	; 80
    2aac:	23 ec       	ldi	r18, 0xC3	; 195
    2aae:	92 07       	cpc	r25, r18
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	a2 07       	cpc	r26, r18
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	b2 07       	cpc	r27, r18
    2ab8:	f0 f2       	brcs	.-68     	; 0x2a76 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    2aba:	e6 e2       	ldi	r30, 0x26	; 38
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	82 95       	swap	r24
    2ac2:	8f 70       	andi	r24, 0x0F	; 15
    2ac4:	88 2f       	mov	r24, r24
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	81 70       	andi	r24, 0x01	; 1
    2aca:	90 70       	andi	r25, 0x00	; 0
    2acc:	88 23       	and	r24, r24
    2ace:	81 f0       	breq	.+32     	; 0x2af0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    2ad0:	a6 e2       	ldi	r26, 0x26	; 38
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e6 e2       	ldi	r30, 0x26	; 38
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	80 61       	ori	r24, 0x10	; 16
    2adc:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2ade:	e4 e2       	ldi	r30, 0x24	; 36
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ae8:	f8 85       	ldd	r31, Y+8	; 0x08
    2aea:	91 83       	std	Z+1, r25	; 0x01
    2aec:	80 83       	st	Z, r24
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2af0:	1d 82       	std	Y+5, r1	; 0x05
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2af4:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2af6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2af8:	28 96       	adiw	r28, 0x08	; 8
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	8a 83       	std	Y+2, r24	; 0x02
    2b18:	7c 83       	std	Y+4, r23	; 0x04
    2b1a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	80 32       	cpi	r24, 0x20	; 32
    2b24:	78 f5       	brcc	.+94     	; 0x2b84 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	59 f1       	breq	.+86     	; 0x2b84 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2b2e:	80 91 80 00 	lds	r24, 0x0080
    2b32:	88 23       	and	r24, r24
    2b34:	39 f5       	brne	.+78     	; 0x2b84 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	80 93 80 00 	sts	0x0080, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	90 93 7f 00 	sts	0x007F, r25
    2b44:	80 93 7e 00 	sts	0x007E, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2b48:	a6 e2       	ldi	r26, 0x26	; 38
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e6 e2       	ldi	r30, 0x26	; 38
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	88 60       	ori	r24, 0x08	; 8
    2b54:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2b56:	a7 e2       	ldi	r26, 0x27	; 39
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e7 e2       	ldi	r30, 0x27	; 39
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	80 7e       	andi	r24, 0xE0	; 224
    2b62:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2b64:	a7 e2       	ldi	r26, 0x27	; 39
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e7 e2       	ldi	r30, 0x27	; 39
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	90 81       	ld	r25, Z
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	89 2b       	or	r24, r25
    2b72:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2b74:	a6 e2       	ldi	r26, 0x26	; 38
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e6 e2       	ldi	r30, 0x26	; 38
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	80 64       	ori	r24, 0x40	; 64
    2b80:	8c 93       	st	X, r24
    2b82:	01 c0       	rjmp	.+2      	; 0x2b86 <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2b84:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <ADC_u8GetADCRegValue+0x6>
    2b9c:	0f 92       	push	r0
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	9b 83       	std	Y+3, r25	; 0x03
    2ba4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	39 f0       	breq	.+14     	; 0x2bc0 <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    2bb2:	e4 e2       	ldi	r30, 0x24	; 36
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	91 81       	ldd	r25, Z+1	; 0x01
    2bba:	9b 83       	std	Y+3, r25	; 0x03
    2bbc:	8a 83       	std	Y+2, r24	; 0x02
    2bbe:	01 c0       	rjmp	.+2      	; 0x2bc2 <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2bc0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    2bd0:	1f 92       	push	r1
    2bd2:	0f 92       	push	r0
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	0f 92       	push	r0
    2bd8:	11 24       	eor	r1, r1
    2bda:	2f 93       	push	r18
    2bdc:	3f 93       	push	r19
    2bde:	4f 93       	push	r20
    2be0:	5f 93       	push	r21
    2be2:	6f 93       	push	r22
    2be4:	7f 93       	push	r23
    2be6:	8f 93       	push	r24
    2be8:	9f 93       	push	r25
    2bea:	af 93       	push	r26
    2bec:	bf 93       	push	r27
    2bee:	ef 93       	push	r30
    2bf0:	ff 93       	push	r31
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2bfa:	80 91 7e 00 	lds	r24, 0x007E
    2bfe:	90 91 7f 00 	lds	r25, 0x007F
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	99 f0       	breq	.+38     	; 0x2c2c <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2c06:	10 92 80 00 	sts	0x0080, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2c0a:	a6 e2       	ldi	r26, 0x26	; 38
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e6 e2       	ldi	r30, 0x26	; 38
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	87 7f       	andi	r24, 0xF7	; 247
    2c16:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2c18:	20 91 7e 00 	lds	r18, 0x007E
    2c1c:	30 91 7f 00 	lds	r19, 0x007F
    2c20:	e4 e2       	ldi	r30, 0x24	; 36
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	91 81       	ldd	r25, Z+1	; 0x01
    2c28:	f9 01       	movw	r30, r18
    2c2a:	09 95       	icall
	}
}
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	ff 91       	pop	r31
    2c32:	ef 91       	pop	r30
    2c34:	bf 91       	pop	r27
    2c36:	af 91       	pop	r26
    2c38:	9f 91       	pop	r25
    2c3a:	8f 91       	pop	r24
    2c3c:	7f 91       	pop	r23
    2c3e:	6f 91       	pop	r22
    2c40:	5f 91       	pop	r21
    2c42:	4f 91       	pop	r20
    2c44:	3f 91       	pop	r19
    2c46:	2f 91       	pop	r18
    2c48:	0f 90       	pop	r0
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	0f 90       	pop	r0
    2c4e:	1f 90       	pop	r1
    2c50:	18 95       	reti

00002c52 <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2c5a:	83 e0       	ldi	r24, 0x03	; 3
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	41 e0       	ldi	r20, 0x01	; 1
    2c60:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2c64:	83 e0       	ldi	r24, 0x03	; 3
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2c6e:	83 e0       	ldi	r24, 0x03	; 3
    2c70:	62 e0       	ldi	r22, 0x02	; 2
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	63 e0       	ldi	r22, 0x03	; 3
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
}
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <ActivatePins1+0x6>
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <ActivatePins1+0x8>
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	6a 83       	std	Y+2, r22	; 0x02
    2c98:	4b 83       	std	Y+3, r20	; 0x03
    2c9a:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2c9c:	83 e0       	ldi	r24, 0x03	; 3
    2c9e:	60 e0       	ldi	r22, 0x00	; 0
    2ca0:	49 81       	ldd	r20, Y+1	; 0x01
    2ca2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2ca6:	83 e0       	ldi	r24, 0x03	; 3
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	4a 81       	ldd	r20, Y+2	; 0x02
    2cac:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	62 e0       	ldi	r22, 0x02	; 2
    2cb4:	4b 81       	ldd	r20, Y+3	; 0x03
    2cb6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2cba:	83 e0       	ldi	r24, 0x03	; 3
    2cbc:	63 e0       	ldi	r22, 0x03	; 3
    2cbe:	4c 81       	ldd	r20, Y+4	; 0x04
    2cc0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
}
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	08 95       	ret

00002cd2 <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2cd2:	df 93       	push	r29
    2cd4:	cf 93       	push	r28
    2cd6:	00 d0       	rcall	.+0      	; 0x2cd8 <ActivatePins2+0x6>
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <ActivatePins2+0x8>
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	6a 83       	std	Y+2, r22	; 0x02
    2ce2:	4b 83       	std	Y+3, r20	; 0x03
    2ce4:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2ce6:	83 e0       	ldi	r24, 0x03	; 3
    2ce8:	63 e0       	ldi	r22, 0x03	; 3
    2cea:	4c 81       	ldd	r20, Y+4	; 0x04
    2cec:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2cf0:	83 e0       	ldi	r24, 0x03	; 3
    2cf2:	62 e0       	ldi	r22, 0x02	; 2
    2cf4:	4b 81       	ldd	r20, Y+3	; 0x03
    2cf6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2cfa:	83 e0       	ldi	r24, 0x03	; 3
    2cfc:	61 e0       	ldi	r22, 0x01	; 1
    2cfe:	4a 81       	ldd	r20, Y+2	; 0x02
    2d00:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2d04:	83 e0       	ldi	r24, 0x03	; 3
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	49 81       	ldd	r20, Y+1	; 0x01
    2d0a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
}
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	29 97       	sbiw	r28, 0x09	; 9
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	9a 83       	std	Y+2, r25	; 0x02
    2d32:	89 83       	std	Y+1, r24	; 0x01
    2d34:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2d36:	29 81       	ldd	r18, Y+1	; 0x01
    2d38:	3a 81       	ldd	r19, Y+2	; 0x02
    2d3a:	39 87       	std	Y+9, r19	; 0x09
    2d3c:	28 87       	std	Y+8, r18	; 0x08
    2d3e:	88 85       	ldd	r24, Y+8	; 0x08
    2d40:	99 85       	ldd	r25, Y+9	; 0x09
    2d42:	8a 35       	cpi	r24, 0x5A	; 90
    2d44:	91 05       	cpc	r25, r1
    2d46:	31 f0       	breq	.+12     	; 0x2d54 <SelectStepAngle+0x38>
    2d48:	28 85       	ldd	r18, Y+8	; 0x08
    2d4a:	39 85       	ldd	r19, Y+9	; 0x09
    2d4c:	24 3b       	cpi	r18, 0xB4	; 180
    2d4e:	31 05       	cpc	r19, r1
    2d50:	f1 f0       	breq	.+60     	; 0x2d8e <SelectStepAngle+0x72>
    2d52:	39 c0       	rjmp	.+114    	; 0x2dc6 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2d54:	8b 81       	ldd	r24, Y+3	; 0x03
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	3f 83       	std	Y+7, r19	; 0x07
    2d5c:	2e 83       	std	Y+6, r18	; 0x06
    2d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d60:	9f 81       	ldd	r25, Y+7	; 0x07
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	31 f0       	breq	.+12     	; 0x2d72 <SelectStepAngle+0x56>
    2d66:	2e 81       	ldd	r18, Y+6	; 0x06
    2d68:	3f 81       	ldd	r19, Y+7	; 0x07
    2d6a:	21 30       	cpi	r18, 0x01	; 1
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	41 f0       	breq	.+16     	; 0x2d80 <SelectStepAngle+0x64>
    2d70:	2a c0       	rjmp	.+84     	; 0x2dc6 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	60 e0       	ldi	r22, 0x00	; 0
    2d76:	41 e0       	ldi	r20, 0x01	; 1
    2d78:	21 e0       	ldi	r18, 0x01	; 1
    2d7a:	0e 94 44 16 	call	0x2c88	; 0x2c88 <ActivatePins1>
    2d7e:	23 c0       	rjmp	.+70     	; 0x2dc6 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <ActivatePins2>
    2d8c:	1c c0       	rjmp	.+56     	; 0x2dc6 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	28 2f       	mov	r18, r24
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	3d 83       	std	Y+5, r19	; 0x05
    2d96:	2c 83       	std	Y+4, r18	; 0x04
    2d98:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	31 f0       	breq	.+12     	; 0x2dac <SelectStepAngle+0x90>
    2da0:	2c 81       	ldd	r18, Y+4	; 0x04
    2da2:	3d 81       	ldd	r19, Y+5	; 0x05
    2da4:	21 30       	cpi	r18, 0x01	; 1
    2da6:	31 05       	cpc	r19, r1
    2da8:	41 f0       	breq	.+16     	; 0x2dba <SelectStepAngle+0x9e>
    2daa:	0d c0       	rjmp	.+26     	; 0x2dc6 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	61 e0       	ldi	r22, 0x01	; 1
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <ActivatePins2>
    2db8:	06 c0       	rjmp	.+12     	; 0x2dc6 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	61 e0       	ldi	r22, 0x01	; 1
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	0e 94 44 16 	call	0x2c88	; 0x2c88 <ActivatePins1>
						break;
				}
				break;
	}
}
    2dc6:	29 96       	adiw	r28, 0x09	; 9
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	f8 94       	cli
    2dcc:	de bf       	out	0x3e, r29	; 62
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	cd bf       	out	0x3d, r28	; 61
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	e9 97       	sbiw	r28, 0x39	; 57
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2dee:	83 e0       	ldi	r24, 0x03	; 3
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	64 e0       	ldi	r22, 0x04	; 4
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	40 e0       	ldi	r20, 0x00	; 0
    2df8:	50 e0       	ldi	r21, 0x00	; 0
    2dfa:	0e 94 1c 08 	call	0x1038	; 0x1038 <LCD_setPinValue>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	a0 e8       	ldi	r26, 0x80	; 128
    2e04:	bf e3       	ldi	r27, 0x3F	; 63
    2e06:	8d ab       	std	Y+53, r24	; 0x35
    2e08:	9e ab       	std	Y+54, r25	; 0x36
    2e0a:	af ab       	std	Y+55, r26	; 0x37
    2e0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e10:	7e a9       	ldd	r23, Y+54	; 0x36
    2e12:	8f a9       	ldd	r24, Y+55	; 0x37
    2e14:	98 ad       	ldd	r25, Y+56	; 0x38
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	4a e7       	ldi	r20, 0x7A	; 122
    2e1c:	55 e4       	ldi	r21, 0x45	; 69
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	89 ab       	std	Y+49, r24	; 0x31
    2e28:	9a ab       	std	Y+50, r25	; 0x32
    2e2a:	ab ab       	std	Y+51, r26	; 0x33
    2e2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e30:	7a a9       	ldd	r23, Y+50	; 0x32
    2e32:	8b a9       	ldd	r24, Y+51	; 0x33
    2e34:	9c a9       	ldd	r25, Y+52	; 0x34
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e42:	88 23       	and	r24, r24
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <LCD_sendCommand+0x78>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	98 ab       	std	Y+48, r25	; 0x30
    2e4c:	8f a7       	std	Y+47, r24	; 0x2f
    2e4e:	3f c0       	rjmp	.+126    	; 0x2ece <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    2e50:	69 a9       	ldd	r22, Y+49	; 0x31
    2e52:	7a a9       	ldd	r23, Y+50	; 0x32
    2e54:	8b a9       	ldd	r24, Y+51	; 0x33
    2e56:	9c a9       	ldd	r25, Y+52	; 0x34
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	3f ef       	ldi	r19, 0xFF	; 255
    2e5c:	4f e7       	ldi	r20, 0x7F	; 127
    2e5e:	57 e4       	ldi	r21, 0x47	; 71
    2e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	4c f5       	brge	.+82     	; 0x2eba <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	6d a9       	ldd	r22, Y+53	; 0x35
    2e6a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	98 ab       	std	Y+48, r25	; 0x30
    2e8e:	8f a7       	std	Y+47, r24	; 0x2f
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <LCD_sendCommand+0xd8>
    2e92:	80 e9       	ldi	r24, 0x90	; 144
    2e94:	91 e0       	ldi	r25, 0x01	; 1
    2e96:	9e a7       	std	Y+46, r25	; 0x2e
    2e98:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <LCD_sendCommand+0xc6>
    2ea2:	9e a7       	std	Y+46, r25	; 0x2e
    2ea4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	98 ab       	std	Y+48, r25	; 0x30
    2eae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	69 f7       	brne	.-38     	; 0x2e92 <LCD_sendCommand+0xba>
    2eb8:	14 c0       	rjmp	.+40     	; 0x2ee2 <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eba:	69 a9       	ldd	r22, Y+49	; 0x31
    2ebc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ebe:	8b a9       	ldd	r24, Y+51	; 0x33
    2ec0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	98 ab       	std	Y+48, r25	; 0x30
    2ecc:	8f a7       	std	Y+47, r24	; 0x2f
    2ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed2:	9c a7       	std	Y+44, r25	; 0x2c
    2ed4:	8b a7       	std	Y+43, r24	; 0x2b
    2ed6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <LCD_sendCommand+0x102>
    2ede:	9c a7       	std	Y+44, r25	; 0x2c
    2ee0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2ee2:	83 e0       	ldi	r24, 0x03	; 3
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	65 e0       	ldi	r22, 0x05	; 5
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	41 e0       	ldi	r20, 0x01	; 1
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	0e 94 1c 08 	call	0x1038	; 0x1038 <LCD_setPinValue>
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	a0 e8       	ldi	r26, 0x80	; 128
    2ef8:	bf e3       	ldi	r27, 0x3F	; 63
    2efa:	8f a3       	std	Y+39, r24	; 0x27
    2efc:	98 a7       	std	Y+40, r25	; 0x28
    2efe:	a9 a7       	std	Y+41, r26	; 0x29
    2f00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f02:	6f a1       	ldd	r22, Y+39	; 0x27
    2f04:	78 a5       	ldd	r23, Y+40	; 0x28
    2f06:	89 a5       	ldd	r24, Y+41	; 0x29
    2f08:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a e7       	ldi	r20, 0x7A	; 122
    2f10:	55 e4       	ldi	r21, 0x45	; 69
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	8b a3       	std	Y+35, r24	; 0x23
    2f1c:	9c a3       	std	Y+36, r25	; 0x24
    2f1e:	ad a3       	std	Y+37, r26	; 0x25
    2f20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f22:	6b a1       	ldd	r22, Y+35	; 0x23
    2f24:	7c a1       	ldd	r23, Y+36	; 0x24
    2f26:	8d a1       	ldd	r24, Y+37	; 0x25
    2f28:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	40 e8       	ldi	r20, 0x80	; 128
    2f30:	5f e3       	ldi	r21, 0x3F	; 63
    2f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f36:	88 23       	and	r24, r24
    2f38:	2c f4       	brge	.+10     	; 0x2f44 <LCD_sendCommand+0x16c>
		__ticks = 1;
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	9a a3       	std	Y+34, r25	; 0x22
    2f40:	89 a3       	std	Y+33, r24	; 0x21
    2f42:	3f c0       	rjmp	.+126    	; 0x2fc2 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2f44:	6b a1       	ldd	r22, Y+35	; 0x23
    2f46:	7c a1       	ldd	r23, Y+36	; 0x24
    2f48:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	3f ef       	ldi	r19, 0xFF	; 255
    2f50:	4f e7       	ldi	r20, 0x7F	; 127
    2f52:	57 e4       	ldi	r21, 0x47	; 71
    2f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f58:	18 16       	cp	r1, r24
    2f5a:	4c f5       	brge	.+82     	; 0x2fae <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f60:	89 a5       	ldd	r24, Y+41	; 0x29
    2f62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e2       	ldi	r20, 0x20	; 32
    2f6a:	51 e4       	ldi	r21, 0x41	; 65
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9a a3       	std	Y+34, r25	; 0x22
    2f82:	89 a3       	std	Y+33, r24	; 0x21
    2f84:	0f c0       	rjmp	.+30     	; 0x2fa4 <LCD_sendCommand+0x1cc>
    2f86:	80 e9       	ldi	r24, 0x90	; 144
    2f88:	91 e0       	ldi	r25, 0x01	; 1
    2f8a:	98 a3       	std	Y+32, r25	; 0x20
    2f8c:	8f 8f       	std	Y+31, r24	; 0x1f
    2f8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f90:	98 a1       	ldd	r25, Y+32	; 0x20
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <LCD_sendCommand+0x1ba>
    2f96:	98 a3       	std	Y+32, r25	; 0x20
    2f98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	9a a3       	std	Y+34, r25	; 0x22
    2fa2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	69 f7       	brne	.-38     	; 0x2f86 <LCD_sendCommand+0x1ae>
    2fac:	14 c0       	rjmp	.+40     	; 0x2fd6 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fae:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
    2fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc6:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc8:	8d 8f       	std	Y+29, r24	; 0x1d
    2fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <LCD_sendCommand+0x1f6>
    2fd2:	9e 8f       	std	Y+30, r25	; 0x1e
    2fd4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2fd6:	89 ad       	ldd	r24, Y+57	; 0x39
    2fd8:	28 2f       	mov	r18, r24
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	b9 01       	movw	r22, r18
    2fe2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <LCD_setPortValue>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	a0 e8       	ldi	r26, 0x80	; 128
    2fec:	bf e3       	ldi	r27, 0x3F	; 63
    2fee:	89 8f       	std	Y+25, r24	; 0x19
    2ff0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ff2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	4a e7       	ldi	r20, 0x7A	; 122
    3004:	55 e4       	ldi	r21, 0x45	; 69
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	8d 8b       	std	Y+21, r24	; 0x15
    3010:	9e 8b       	std	Y+22, r25	; 0x16
    3012:	af 8b       	std	Y+23, r26	; 0x17
    3014:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3016:	6d 89       	ldd	r22, Y+21	; 0x15
    3018:	7e 89       	ldd	r23, Y+22	; 0x16
    301a:	8f 89       	ldd	r24, Y+23	; 0x17
    301c:	98 8d       	ldd	r25, Y+24	; 0x18
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	2c f4       	brge	.+10     	; 0x3038 <LCD_sendCommand+0x260>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9c 8b       	std	Y+20, r25	; 0x14
    3034:	8b 8b       	std	Y+19, r24	; 0x13
    3036:	3f c0       	rjmp	.+126    	; 0x30b6 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    3038:	6d 89       	ldd	r22, Y+21	; 0x15
    303a:	7e 89       	ldd	r23, Y+22	; 0x16
    303c:	8f 89       	ldd	r24, Y+23	; 0x17
    303e:	98 8d       	ldd	r25, Y+24	; 0x18
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	3f ef       	ldi	r19, 0xFF	; 255
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	57 e4       	ldi	r21, 0x47	; 71
    3048:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304c:	18 16       	cp	r1, r24
    304e:	4c f5       	brge	.+82     	; 0x30a2 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	69 8d       	ldd	r22, Y+25	; 0x19
    3052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9c 8b       	std	Y+20, r25	; 0x14
    3076:	8b 8b       	std	Y+19, r24	; 0x13
    3078:	0f c0       	rjmp	.+30     	; 0x3098 <LCD_sendCommand+0x2c0>
    307a:	80 e9       	ldi	r24, 0x90	; 144
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	9a 8b       	std	Y+18, r25	; 0x12
    3080:	89 8b       	std	Y+17, r24	; 0x11
    3082:	89 89       	ldd	r24, Y+17	; 0x11
    3084:	9a 89       	ldd	r25, Y+18	; 0x12
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <LCD_sendCommand+0x2ae>
    308a:	9a 8b       	std	Y+18, r25	; 0x12
    308c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	9c 8b       	std	Y+20, r25	; 0x14
    3096:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3098:	8b 89       	ldd	r24, Y+19	; 0x13
    309a:	9c 89       	ldd	r25, Y+20	; 0x14
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	69 f7       	brne	.-38     	; 0x307a <LCD_sendCommand+0x2a2>
    30a0:	14 c0       	rjmp	.+40     	; 0x30ca <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a2:	6d 89       	ldd	r22, Y+21	; 0x15
    30a4:	7e 89       	ldd	r23, Y+22	; 0x16
    30a6:	8f 89       	ldd	r24, Y+23	; 0x17
    30a8:	98 8d       	ldd	r25, Y+24	; 0x18
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9c 8b       	std	Y+20, r25	; 0x14
    30b4:	8b 8b       	std	Y+19, r24	; 0x13
    30b6:	8b 89       	ldd	r24, Y+19	; 0x13
    30b8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ba:	98 8b       	std	Y+16, r25	; 0x10
    30bc:	8f 87       	std	Y+15, r24	; 0x0f
    30be:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c0:	98 89       	ldd	r25, Y+16	; 0x10
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <LCD_sendCommand+0x2ea>
    30c6:	98 8b       	std	Y+16, r25	; 0x10
    30c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    30ca:	83 e0       	ldi	r24, 0x03	; 3
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	65 e0       	ldi	r22, 0x05	; 5
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	40 e0       	ldi	r20, 0x00	; 0
    30d4:	50 e0       	ldi	r21, 0x00	; 0
    30d6:	0e 94 1c 08 	call	0x1038	; 0x1038 <LCD_setPinValue>
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	a0 e8       	ldi	r26, 0x80	; 128
    30e0:	bf e3       	ldi	r27, 0x3F	; 63
    30e2:	8b 87       	std	Y+11, r24	; 0x0b
    30e4:	9c 87       	std	Y+12, r25	; 0x0c
    30e6:	ad 87       	std	Y+13, r26	; 0x0d
    30e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	4a e7       	ldi	r20, 0x7A	; 122
    30f8:	55 e4       	ldi	r21, 0x45	; 69
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	8f 83       	std	Y+7, r24	; 0x07
    3104:	98 87       	std	Y+8, r25	; 0x08
    3106:	a9 87       	std	Y+9, r26	; 0x09
    3108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    310a:	6f 81       	ldd	r22, Y+7	; 0x07
    310c:	78 85       	ldd	r23, Y+8	; 0x08
    310e:	89 85       	ldd	r24, Y+9	; 0x09
    3110:	9a 85       	ldd	r25, Y+10	; 0x0a
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e8       	ldi	r20, 0x80	; 128
    3118:	5f e3       	ldi	r21, 0x3F	; 63
    311a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    311e:	88 23       	and	r24, r24
    3120:	2c f4       	brge	.+10     	; 0x312c <LCD_sendCommand+0x354>
		__ticks = 1;
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	3f c0       	rjmp	.+126    	; 0x31aa <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    312c:	6f 81       	ldd	r22, Y+7	; 0x07
    312e:	78 85       	ldd	r23, Y+8	; 0x08
    3130:	89 85       	ldd	r24, Y+9	; 0x09
    3132:	9a 85       	ldd	r25, Y+10	; 0x0a
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	3f ef       	ldi	r19, 0xFF	; 255
    3138:	4f e7       	ldi	r20, 0x7F	; 127
    313a:	57 e4       	ldi	r21, 0x47	; 71
    313c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3140:	18 16       	cp	r1, r24
    3142:	4c f5       	brge	.+82     	; 0x3196 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3144:	6b 85       	ldd	r22, Y+11	; 0x0b
    3146:	7c 85       	ldd	r23, Y+12	; 0x0c
    3148:	8d 85       	ldd	r24, Y+13	; 0x0d
    314a:	9e 85       	ldd	r25, Y+14	; 0x0e
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e2       	ldi	r20, 0x20	; 32
    3152:	51 e4       	ldi	r21, 0x41	; 65
    3154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	9e 83       	std	Y+6, r25	; 0x06
    316a:	8d 83       	std	Y+5, r24	; 0x05
    316c:	0f c0       	rjmp	.+30     	; 0x318c <LCD_sendCommand+0x3b4>
    316e:	80 e9       	ldi	r24, 0x90	; 144
    3170:	91 e0       	ldi	r25, 0x01	; 1
    3172:	9c 83       	std	Y+4, r25	; 0x04
    3174:	8b 83       	std	Y+3, r24	; 0x03
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	9c 81       	ldd	r25, Y+4	; 0x04
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <LCD_sendCommand+0x3a2>
    317e:	9c 83       	std	Y+4, r25	; 0x04
    3180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318c:	8d 81       	ldd	r24, Y+5	; 0x05
    318e:	9e 81       	ldd	r25, Y+6	; 0x06
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	69 f7       	brne	.-38     	; 0x316e <LCD_sendCommand+0x396>
    3194:	14 c0       	rjmp	.+40     	; 0x31be <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3196:	6f 81       	ldd	r22, Y+7	; 0x07
    3198:	78 85       	ldd	r23, Y+8	; 0x08
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	9a 85       	ldd	r25, Y+10	; 0x0a
    319e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	9e 83       	std	Y+6, r25	; 0x06
    31a8:	8d 83       	std	Y+5, r24	; 0x05
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	9a 83       	std	Y+2, r25	; 0x02
    31b0:	89 83       	std	Y+1, r24	; 0x01
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	9a 81       	ldd	r25, Y+2	; 0x02
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	f1 f7       	brne	.-4      	; 0x31b6 <LCD_sendCommand+0x3de>
    31ba:	9a 83       	std	Y+2, r25	; 0x02
    31bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    31be:	e9 96       	adiw	r28, 0x39	; 57
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    31d0:	df 93       	push	r29
    31d2:	cf 93       	push	r28
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	e9 97       	sbiw	r28, 0x39	; 57
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    31e6:	83 e0       	ldi	r24, 0x03	; 3
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	64 e0       	ldi	r22, 0x04	; 4
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	41 e0       	ldi	r20, 0x01	; 1
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	0e 94 1c 08 	call	0x1038	; 0x1038 <LCD_setPinValue>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a0 e8       	ldi	r26, 0x80	; 128
    31fc:	bf e3       	ldi	r27, 0x3F	; 63
    31fe:	8d ab       	std	Y+53, r24	; 0x35
    3200:	9e ab       	std	Y+54, r25	; 0x36
    3202:	af ab       	std	Y+55, r26	; 0x37
    3204:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3206:	6d a9       	ldd	r22, Y+53	; 0x35
    3208:	7e a9       	ldd	r23, Y+54	; 0x36
    320a:	8f a9       	ldd	r24, Y+55	; 0x37
    320c:	98 ad       	ldd	r25, Y+56	; 0x38
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	4a e7       	ldi	r20, 0x7A	; 122
    3214:	55 e4       	ldi	r21, 0x45	; 69
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	89 ab       	std	Y+49, r24	; 0x31
    3220:	9a ab       	std	Y+50, r25	; 0x32
    3222:	ab ab       	std	Y+51, r26	; 0x33
    3224:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3226:	69 a9       	ldd	r22, Y+49	; 0x31
    3228:	7a a9       	ldd	r23, Y+50	; 0x32
    322a:	8b a9       	ldd	r24, Y+51	; 0x33
    322c:	9c a9       	ldd	r25, Y+52	; 0x34
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e8       	ldi	r20, 0x80	; 128
    3234:	5f e3       	ldi	r21, 0x3F	; 63
    3236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    323a:	88 23       	and	r24, r24
    323c:	2c f4       	brge	.+10     	; 0x3248 <LCD_displayCharacter+0x78>
		__ticks = 1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	98 ab       	std	Y+48, r25	; 0x30
    3244:	8f a7       	std	Y+47, r24	; 0x2f
    3246:	3f c0       	rjmp	.+126    	; 0x32c6 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    3248:	69 a9       	ldd	r22, Y+49	; 0x31
    324a:	7a a9       	ldd	r23, Y+50	; 0x32
    324c:	8b a9       	ldd	r24, Y+51	; 0x33
    324e:	9c a9       	ldd	r25, Y+52	; 0x34
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	3f ef       	ldi	r19, 0xFF	; 255
    3254:	4f e7       	ldi	r20, 0x7F	; 127
    3256:	57 e4       	ldi	r21, 0x47	; 71
    3258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    325c:	18 16       	cp	r1, r24
    325e:	4c f5       	brge	.+82     	; 0x32b2 <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3260:	6d a9       	ldd	r22, Y+53	; 0x35
    3262:	7e a9       	ldd	r23, Y+54	; 0x36
    3264:	8f a9       	ldd	r24, Y+55	; 0x37
    3266:	98 ad       	ldd	r25, Y+56	; 0x38
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e2       	ldi	r20, 0x20	; 32
    326e:	51 e4       	ldi	r21, 0x41	; 65
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	98 ab       	std	Y+48, r25	; 0x30
    3286:	8f a7       	std	Y+47, r24	; 0x2f
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <LCD_displayCharacter+0xd8>
    328a:	80 e9       	ldi	r24, 0x90	; 144
    328c:	91 e0       	ldi	r25, 0x01	; 1
    328e:	9e a7       	std	Y+46, r25	; 0x2e
    3290:	8d a7       	std	Y+45, r24	; 0x2d
    3292:	8d a5       	ldd	r24, Y+45	; 0x2d
    3294:	9e a5       	ldd	r25, Y+46	; 0x2e
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <LCD_displayCharacter+0xc6>
    329a:	9e a7       	std	Y+46, r25	; 0x2e
    329c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329e:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a0:	98 a9       	ldd	r25, Y+48	; 0x30
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	98 ab       	std	Y+48, r25	; 0x30
    32a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    32aa:	98 a9       	ldd	r25, Y+48	; 0x30
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	69 f7       	brne	.-38     	; 0x328a <LCD_displayCharacter+0xba>
    32b0:	14 c0       	rjmp	.+40     	; 0x32da <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b2:	69 a9       	ldd	r22, Y+49	; 0x31
    32b4:	7a a9       	ldd	r23, Y+50	; 0x32
    32b6:	8b a9       	ldd	r24, Y+51	; 0x33
    32b8:	9c a9       	ldd	r25, Y+52	; 0x34
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	98 ab       	std	Y+48, r25	; 0x30
    32c4:	8f a7       	std	Y+47, r24	; 0x2f
    32c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32c8:	98 a9       	ldd	r25, Y+48	; 0x30
    32ca:	9c a7       	std	Y+44, r25	; 0x2c
    32cc:	8b a7       	std	Y+43, r24	; 0x2b
    32ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <LCD_displayCharacter+0x102>
    32d6:	9c a7       	std	Y+44, r25	; 0x2c
    32d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    32da:	83 e0       	ldi	r24, 0x03	; 3
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	65 e0       	ldi	r22, 0x05	; 5
    32e0:	70 e0       	ldi	r23, 0x00	; 0
    32e2:	41 e0       	ldi	r20, 0x01	; 1
    32e4:	50 e0       	ldi	r21, 0x00	; 0
    32e6:	0e 94 1c 08 	call	0x1038	; 0x1038 <LCD_setPinValue>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a0 e8       	ldi	r26, 0x80	; 128
    32f0:	bf e3       	ldi	r27, 0x3F	; 63
    32f2:	8f a3       	std	Y+39, r24	; 0x27
    32f4:	98 a7       	std	Y+40, r25	; 0x28
    32f6:	a9 a7       	std	Y+41, r26	; 0x29
    32f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	6f a1       	ldd	r22, Y+39	; 0x27
    32fc:	78 a5       	ldd	r23, Y+40	; 0x28
    32fe:	89 a5       	ldd	r24, Y+41	; 0x29
    3300:	9a a5       	ldd	r25, Y+42	; 0x2a
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a e7       	ldi	r20, 0x7A	; 122
    3308:	55 e4       	ldi	r21, 0x45	; 69
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	8b a3       	std	Y+35, r24	; 0x23
    3314:	9c a3       	std	Y+36, r25	; 0x24
    3316:	ad a3       	std	Y+37, r26	; 0x25
    3318:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    331a:	6b a1       	ldd	r22, Y+35	; 0x23
    331c:	7c a1       	ldd	r23, Y+36	; 0x24
    331e:	8d a1       	ldd	r24, Y+37	; 0x25
    3320:	9e a1       	ldd	r25, Y+38	; 0x26
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <LCD_displayCharacter+0x16c>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9a a3       	std	Y+34, r25	; 0x22
    3338:	89 a3       	std	Y+33, r24	; 0x21
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    333c:	6b a1       	ldd	r22, Y+35	; 0x23
    333e:	7c a1       	ldd	r23, Y+36	; 0x24
    3340:	8d a1       	ldd	r24, Y+37	; 0x25
    3342:	9e a1       	ldd	r25, Y+38	; 0x26
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	6f a1       	ldd	r22, Y+39	; 0x27
    3356:	78 a5       	ldd	r23, Y+40	; 0x28
    3358:	89 a5       	ldd	r24, Y+41	; 0x29
    335a:	9a a5       	ldd	r25, Y+42	; 0x2a
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9a a3       	std	Y+34, r25	; 0x22
    337a:	89 a3       	std	Y+33, r24	; 0x21
    337c:	0f c0       	rjmp	.+30     	; 0x339c <LCD_displayCharacter+0x1cc>
    337e:	80 e9       	ldi	r24, 0x90	; 144
    3380:	91 e0       	ldi	r25, 0x01	; 1
    3382:	98 a3       	std	Y+32, r25	; 0x20
    3384:	8f 8f       	std	Y+31, r24	; 0x1f
    3386:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3388:	98 a1       	ldd	r25, Y+32	; 0x20
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <LCD_displayCharacter+0x1ba>
    338e:	98 a3       	std	Y+32, r25	; 0x20
    3390:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	89 a1       	ldd	r24, Y+33	; 0x21
    3394:	9a a1       	ldd	r25, Y+34	; 0x22
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	9a a3       	std	Y+34, r25	; 0x22
    339a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	89 a1       	ldd	r24, Y+33	; 0x21
    339e:	9a a1       	ldd	r25, Y+34	; 0x22
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <LCD_displayCharacter+0x1ae>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	6b a1       	ldd	r22, Y+35	; 0x23
    33a8:	7c a1       	ldd	r23, Y+36	; 0x24
    33aa:	8d a1       	ldd	r24, Y+37	; 0x25
    33ac:	9e a1       	ldd	r25, Y+38	; 0x26
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	9a a3       	std	Y+34, r25	; 0x22
    33b8:	89 a3       	std	Y+33, r24	; 0x21
    33ba:	89 a1       	ldd	r24, Y+33	; 0x21
    33bc:	9a a1       	ldd	r25, Y+34	; 0x22
    33be:	9e 8f       	std	Y+30, r25	; 0x1e
    33c0:	8d 8f       	std	Y+29, r24	; 0x1d
    33c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <LCD_displayCharacter+0x1f6>
    33ca:	9e 8f       	std	Y+30, r25	; 0x1e
    33cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    33ce:	89 ad       	ldd	r24, Y+57	; 0x39
    33d0:	28 2f       	mov	r18, r24
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	82 e0       	ldi	r24, 0x02	; 2
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	b9 01       	movw	r22, r18
    33da:	0e 94 e6 09 	call	0x13cc	; 0x13cc <LCD_setPortValue>
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	a0 e8       	ldi	r26, 0x80	; 128
    33e4:	bf e3       	ldi	r27, 0x3F	; 63
    33e6:	89 8f       	std	Y+25, r24	; 0x19
    33e8:	9a 8f       	std	Y+26, r25	; 0x1a
    33ea:	ab 8f       	std	Y+27, r26	; 0x1b
    33ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ee:	69 8d       	ldd	r22, Y+25	; 0x19
    33f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	4a e7       	ldi	r20, 0x7A	; 122
    33fc:	55 e4       	ldi	r21, 0x45	; 69
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	8d 8b       	std	Y+21, r24	; 0x15
    3408:	9e 8b       	std	Y+22, r25	; 0x16
    340a:	af 8b       	std	Y+23, r26	; 0x17
    340c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    340e:	6d 89       	ldd	r22, Y+21	; 0x15
    3410:	7e 89       	ldd	r23, Y+22	; 0x16
    3412:	8f 89       	ldd	r24, Y+23	; 0x17
    3414:	98 8d       	ldd	r25, Y+24	; 0x18
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e8       	ldi	r20, 0x80	; 128
    341c:	5f e3       	ldi	r21, 0x3F	; 63
    341e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3422:	88 23       	and	r24, r24
    3424:	2c f4       	brge	.+10     	; 0x3430 <LCD_displayCharacter+0x260>
		__ticks = 1;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	9c 8b       	std	Y+20, r25	; 0x14
    342c:	8b 8b       	std	Y+19, r24	; 0x13
    342e:	3f c0       	rjmp	.+126    	; 0x34ae <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    3430:	6d 89       	ldd	r22, Y+21	; 0x15
    3432:	7e 89       	ldd	r23, Y+22	; 0x16
    3434:	8f 89       	ldd	r24, Y+23	; 0x17
    3436:	98 8d       	ldd	r25, Y+24	; 0x18
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	3f ef       	ldi	r19, 0xFF	; 255
    343c:	4f e7       	ldi	r20, 0x7F	; 127
    343e:	57 e4       	ldi	r21, 0x47	; 71
    3440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3444:	18 16       	cp	r1, r24
    3446:	4c f5       	brge	.+82     	; 0x349a <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3448:	69 8d       	ldd	r22, Y+25	; 0x19
    344a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    344c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    344e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e2       	ldi	r20, 0x20	; 32
    3456:	51 e4       	ldi	r21, 0x41	; 65
    3458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	bc 01       	movw	r22, r24
    3462:	cd 01       	movw	r24, r26
    3464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	9c 8b       	std	Y+20, r25	; 0x14
    346e:	8b 8b       	std	Y+19, r24	; 0x13
    3470:	0f c0       	rjmp	.+30     	; 0x3490 <LCD_displayCharacter+0x2c0>
    3472:	80 e9       	ldi	r24, 0x90	; 144
    3474:	91 e0       	ldi	r25, 0x01	; 1
    3476:	9a 8b       	std	Y+18, r25	; 0x12
    3478:	89 8b       	std	Y+17, r24	; 0x11
    347a:	89 89       	ldd	r24, Y+17	; 0x11
    347c:	9a 89       	ldd	r25, Y+18	; 0x12
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <LCD_displayCharacter+0x2ae>
    3482:	9a 8b       	std	Y+18, r25	; 0x12
    3484:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3486:	8b 89       	ldd	r24, Y+19	; 0x13
    3488:	9c 89       	ldd	r25, Y+20	; 0x14
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	9c 8b       	std	Y+20, r25	; 0x14
    348e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3490:	8b 89       	ldd	r24, Y+19	; 0x13
    3492:	9c 89       	ldd	r25, Y+20	; 0x14
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	69 f7       	brne	.-38     	; 0x3472 <LCD_displayCharacter+0x2a2>
    3498:	14 c0       	rjmp	.+40     	; 0x34c2 <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349a:	6d 89       	ldd	r22, Y+21	; 0x15
    349c:	7e 89       	ldd	r23, Y+22	; 0x16
    349e:	8f 89       	ldd	r24, Y+23	; 0x17
    34a0:	98 8d       	ldd	r25, Y+24	; 0x18
    34a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	9c 8b       	std	Y+20, r25	; 0x14
    34ac:	8b 8b       	std	Y+19, r24	; 0x13
    34ae:	8b 89       	ldd	r24, Y+19	; 0x13
    34b0:	9c 89       	ldd	r25, Y+20	; 0x14
    34b2:	98 8b       	std	Y+16, r25	; 0x10
    34b4:	8f 87       	std	Y+15, r24	; 0x0f
    34b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b8:	98 89       	ldd	r25, Y+16	; 0x10
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <LCD_displayCharacter+0x2ea>
    34be:	98 8b       	std	Y+16, r25	; 0x10
    34c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    34c2:	83 e0       	ldi	r24, 0x03	; 3
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	65 e0       	ldi	r22, 0x05	; 5
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	0e 94 1c 08 	call	0x1038	; 0x1038 <LCD_setPinValue>
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	a0 e8       	ldi	r26, 0x80	; 128
    34d8:	bf e3       	ldi	r27, 0x3F	; 63
    34da:	8b 87       	std	Y+11, r24	; 0x0b
    34dc:	9c 87       	std	Y+12, r25	; 0x0c
    34de:	ad 87       	std	Y+13, r26	; 0x0d
    34e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	4a e7       	ldi	r20, 0x7A	; 122
    34f0:	55 e4       	ldi	r21, 0x45	; 69
    34f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	8f 83       	std	Y+7, r24	; 0x07
    34fc:	98 87       	std	Y+8, r25	; 0x08
    34fe:	a9 87       	std	Y+9, r26	; 0x09
    3500:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3502:	6f 81       	ldd	r22, Y+7	; 0x07
    3504:	78 85       	ldd	r23, Y+8	; 0x08
    3506:	89 85       	ldd	r24, Y+9	; 0x09
    3508:	9a 85       	ldd	r25, Y+10	; 0x0a
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e8       	ldi	r20, 0x80	; 128
    3510:	5f e3       	ldi	r21, 0x3F	; 63
    3512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3516:	88 23       	and	r24, r24
    3518:	2c f4       	brge	.+10     	; 0x3524 <LCD_displayCharacter+0x354>
		__ticks = 1;
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	9e 83       	std	Y+6, r25	; 0x06
    3520:	8d 83       	std	Y+5, r24	; 0x05
    3522:	3f c0       	rjmp	.+126    	; 0x35a2 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    3524:	6f 81       	ldd	r22, Y+7	; 0x07
    3526:	78 85       	ldd	r23, Y+8	; 0x08
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	9a 85       	ldd	r25, Y+10	; 0x0a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	3f ef       	ldi	r19, 0xFF	; 255
    3530:	4f e7       	ldi	r20, 0x7F	; 127
    3532:	57 e4       	ldi	r21, 0x47	; 71
    3534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3538:	18 16       	cp	r1, r24
    353a:	4c f5       	brge	.+82     	; 0x358e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    353c:	6b 85       	ldd	r22, Y+11	; 0x0b
    353e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3540:	8d 85       	ldd	r24, Y+13	; 0x0d
    3542:	9e 85       	ldd	r25, Y+14	; 0x0e
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e2       	ldi	r20, 0x20	; 32
    354a:	51 e4       	ldi	r21, 0x41	; 65
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	bc 01       	movw	r22, r24
    3556:	cd 01       	movw	r24, r26
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	9e 83       	std	Y+6, r25	; 0x06
    3562:	8d 83       	std	Y+5, r24	; 0x05
    3564:	0f c0       	rjmp	.+30     	; 0x3584 <LCD_displayCharacter+0x3b4>
    3566:	80 e9       	ldi	r24, 0x90	; 144
    3568:	91 e0       	ldi	r25, 0x01	; 1
    356a:	9c 83       	std	Y+4, r25	; 0x04
    356c:	8b 83       	std	Y+3, r24	; 0x03
    356e:	8b 81       	ldd	r24, Y+3	; 0x03
    3570:	9c 81       	ldd	r25, Y+4	; 0x04
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <LCD_displayCharacter+0x3a2>
    3576:	9c 83       	std	Y+4, r25	; 0x04
    3578:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	9e 83       	std	Y+6, r25	; 0x06
    3582:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	69 f7       	brne	.-38     	; 0x3566 <LCD_displayCharacter+0x396>
    358c:	14 c0       	rjmp	.+40     	; 0x35b6 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358e:	6f 81       	ldd	r22, Y+7	; 0x07
    3590:	78 85       	ldd	r23, Y+8	; 0x08
    3592:	89 85       	ldd	r24, Y+9	; 0x09
    3594:	9a 85       	ldd	r25, Y+10	; 0x0a
    3596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	9e 83       	std	Y+6, r25	; 0x06
    35a0:	8d 83       	std	Y+5, r24	; 0x05
    35a2:	8d 81       	ldd	r24, Y+5	; 0x05
    35a4:	9e 81       	ldd	r25, Y+6	; 0x06
    35a6:	9a 83       	std	Y+2, r25	; 0x02
    35a8:	89 83       	std	Y+1, r24	; 0x01
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	9a 81       	ldd	r25, Y+2	; 0x02
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	f1 f7       	brne	.-4      	; 0x35ae <LCD_displayCharacter+0x3de>
    35b2:	9a 83       	std	Y+2, r25	; 0x02
    35b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    35b6:	e9 96       	adiw	r28, 0x39	; 57
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	f8 94       	cli
    35bc:	de bf       	out	0x3e, r29	; 62
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	cd bf       	out	0x3d, r28	; 61
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <LCD_display_32bit>:

void LCD_display_32bit(u32 num){
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	df 93       	push	r29
    35ce:	cf 93       	push	r28
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	a6 97       	sbiw	r28, 0x26	; 38
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	6b a3       	std	Y+35, r22	; 0x23
    35e2:	7c a3       	std	Y+36, r23	; 0x24
    35e4:	8d a3       	std	Y+37, r24	; 0x25
    35e6:	9e a3       	std	Y+38, r25	; 0x26
    u8 str[32];
    sprintf(str, "%lu", num);
    35e8:	8d b7       	in	r24, 0x3d	; 61
    35ea:	9e b7       	in	r25, 0x3e	; 62
    35ec:	08 97       	sbiw	r24, 0x08	; 8
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	f8 94       	cli
    35f2:	9e bf       	out	0x3e, r25	; 62
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	8d bf       	out	0x3d, r24	; 61
    35f8:	ed b7       	in	r30, 0x3d	; 61
    35fa:	fe b7       	in	r31, 0x3e	; 62
    35fc:	31 96       	adiw	r30, 0x01	; 1
    35fe:	ce 01       	movw	r24, r28
    3600:	03 96       	adiw	r24, 0x03	; 3
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	80 83       	st	Z, r24
    3606:	80 e6       	ldi	r24, 0x60	; 96
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	93 83       	std	Z+3, r25	; 0x03
    360c:	82 83       	std	Z+2, r24	; 0x02
    360e:	8b a1       	ldd	r24, Y+35	; 0x23
    3610:	9c a1       	ldd	r25, Y+36	; 0x24
    3612:	ad a1       	ldd	r26, Y+37	; 0x25
    3614:	be a1       	ldd	r27, Y+38	; 0x26
    3616:	84 83       	std	Z+4, r24	; 0x04
    3618:	95 83       	std	Z+5, r25	; 0x05
    361a:	a6 83       	std	Z+6, r26	; 0x06
    361c:	b7 83       	std	Z+7, r27	; 0x07
    361e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <sprintf>
    3622:	8d b7       	in	r24, 0x3d	; 61
    3624:	9e b7       	in	r25, 0x3e	; 62
    3626:	08 96       	adiw	r24, 0x08	; 8
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	9e bf       	out	0x3e, r25	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	8d bf       	out	0x3d, r24	; 61
    for (int i = 0; i < strlen(str); i++)
    3632:	1a 82       	std	Y+2, r1	; 0x02
    3634:	19 82       	std	Y+1, r1	; 0x01
    3636:	0f c0       	rjmp	.+30     	; 0x3656 <LCD_display_32bit+0x8e>
    {
    	LCD_displayCharacter(str[i]);
    3638:	29 81       	ldd	r18, Y+1	; 0x01
    363a:	3a 81       	ldd	r19, Y+2	; 0x02
    363c:	ce 01       	movw	r24, r28
    363e:	03 96       	adiw	r24, 0x03	; 3
    3640:	fc 01       	movw	r30, r24
    3642:	e2 0f       	add	r30, r18
    3644:	f3 1f       	adc	r31, r19
    3646:	80 81       	ld	r24, Z
    3648:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_displayCharacter>
}

void LCD_display_32bit(u32 num){
    u8 str[32];
    sprintf(str, "%lu", num);
    for (int i = 0; i < strlen(str); i++)
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	9a 83       	std	Y+2, r25	; 0x02
    3654:	89 83       	std	Y+1, r24	; 0x01
    3656:	09 81       	ldd	r16, Y+1	; 0x01
    3658:	1a 81       	ldd	r17, Y+2	; 0x02
    365a:	ce 01       	movw	r24, r28
    365c:	03 96       	adiw	r24, 0x03	; 3
    365e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <strlen>
    3662:	08 17       	cp	r16, r24
    3664:	19 07       	cpc	r17, r25
    3666:	40 f3       	brcs	.-48     	; 0x3638 <LCD_display_32bit+0x70>
    {
    	LCD_displayCharacter(str[i]);
    }
}
    3668:	a6 96       	adiw	r28, 0x26	; 38
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    367c:	08 95       	ret

0000367e <LCD_init>:


void LCD_init(void)
{
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	2e 97       	sbiw	r28, 0x0e	; 14
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	64 e0       	ldi	r22, 0x04	; 4
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	41 e0       	ldi	r20, 0x01	; 1
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	0e 94 31 07 	call	0xe62	; 0xe62 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    36a2:	83 e0       	ldi	r24, 0x03	; 3
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	65 e0       	ldi	r22, 0x05	; 5
    36a8:	70 e0       	ldi	r23, 0x00	; 0
    36aa:	41 e0       	ldi	r20, 0x01	; 1
    36ac:	50 e0       	ldi	r21, 0x00	; 0
    36ae:	0e 94 31 07 	call	0xe62	; 0xe62 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    36b2:	82 e0       	ldi	r24, 0x02	; 2
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	6f ef       	ldi	r22, 0xFF	; 255
    36b8:	70 e0       	ldi	r23, 0x00	; 0
    36ba:	0e 94 a2 09 	call	0x1344	; 0x1344 <LCD_setPortDirection>
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	a0 ea       	ldi	r26, 0xA0	; 160
    36c4:	b1 e4       	ldi	r27, 0x41	; 65
    36c6:	8b 87       	std	Y+11, r24	; 0x0b
    36c8:	9c 87       	std	Y+12, r25	; 0x0c
    36ca:	ad 87       	std	Y+13, r26	; 0x0d
    36cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	4a e7       	ldi	r20, 0x7A	; 122
    36dc:	55 e4       	ldi	r21, 0x45	; 69
    36de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	8f 83       	std	Y+7, r24	; 0x07
    36e8:	98 87       	std	Y+8, r25	; 0x08
    36ea:	a9 87       	std	Y+9, r26	; 0x09
    36ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36ee:	6f 81       	ldd	r22, Y+7	; 0x07
    36f0:	78 85       	ldd	r23, Y+8	; 0x08
    36f2:	89 85       	ldd	r24, Y+9	; 0x09
    36f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e8       	ldi	r20, 0x80	; 128
    36fc:	5f e3       	ldi	r21, 0x3F	; 63
    36fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3702:	88 23       	and	r24, r24
    3704:	2c f4       	brge	.+10     	; 0x3710 <LCD_init+0x92>
		__ticks = 1;
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9e 83       	std	Y+6, r25	; 0x06
    370c:	8d 83       	std	Y+5, r24	; 0x05
    370e:	3f c0       	rjmp	.+126    	; 0x378e <LCD_init+0x110>
	else if (__tmp > 65535)
    3710:	6f 81       	ldd	r22, Y+7	; 0x07
    3712:	78 85       	ldd	r23, Y+8	; 0x08
    3714:	89 85       	ldd	r24, Y+9	; 0x09
    3716:	9a 85       	ldd	r25, Y+10	; 0x0a
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	3f ef       	ldi	r19, 0xFF	; 255
    371c:	4f e7       	ldi	r20, 0x7F	; 127
    371e:	57 e4       	ldi	r21, 0x47	; 71
    3720:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3724:	18 16       	cp	r1, r24
    3726:	4c f5       	brge	.+82     	; 0x377a <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3728:	6b 85       	ldd	r22, Y+11	; 0x0b
    372a:	7c 85       	ldd	r23, Y+12	; 0x0c
    372c:	8d 85       	ldd	r24, Y+13	; 0x0d
    372e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e2       	ldi	r20, 0x20	; 32
    3736:	51 e4       	ldi	r21, 0x41	; 65
    3738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	9e 83       	std	Y+6, r25	; 0x06
    374e:	8d 83       	std	Y+5, r24	; 0x05
    3750:	0f c0       	rjmp	.+30     	; 0x3770 <LCD_init+0xf2>
    3752:	80 e9       	ldi	r24, 0x90	; 144
    3754:	91 e0       	ldi	r25, 0x01	; 1
    3756:	9c 83       	std	Y+4, r25	; 0x04
    3758:	8b 83       	std	Y+3, r24	; 0x03
    375a:	8b 81       	ldd	r24, Y+3	; 0x03
    375c:	9c 81       	ldd	r25, Y+4	; 0x04
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <LCD_init+0xe0>
    3762:	9c 83       	std	Y+4, r25	; 0x04
    3764:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3766:	8d 81       	ldd	r24, Y+5	; 0x05
    3768:	9e 81       	ldd	r25, Y+6	; 0x06
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	9e 81       	ldd	r25, Y+6	; 0x06
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	69 f7       	brne	.-38     	; 0x3752 <LCD_init+0xd4>
    3778:	14 c0       	rjmp	.+40     	; 0x37a2 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377a:	6f 81       	ldd	r22, Y+7	; 0x07
    377c:	78 85       	ldd	r23, Y+8	; 0x08
    377e:	89 85       	ldd	r24, Y+9	; 0x09
    3780:	9a 85       	ldd	r25, Y+10	; 0x0a
    3782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	9e 83       	std	Y+6, r25	; 0x06
    378c:	8d 83       	std	Y+5, r24	; 0x05
    378e:	8d 81       	ldd	r24, Y+5	; 0x05
    3790:	9e 81       	ldd	r25, Y+6	; 0x06
    3792:	9a 83       	std	Y+2, r25	; 0x02
    3794:	89 83       	std	Y+1, r24	; 0x01
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	9a 81       	ldd	r25, Y+2	; 0x02
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <LCD_init+0x11c>
    379e:	9a 83       	std	Y+2, r25	; 0x02
    37a0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    37a2:	88 e3       	ldi	r24, 0x38	; 56
    37a4:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    37a8:	8c e0       	ldi	r24, 0x0C	; 12
    37aa:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
}
    37b4:	2e 96       	adiw	r28, 0x0e	; 14
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <LCD_GoToXY+0x6>
    37cc:	00 d0       	rcall	.+0      	; 0x37ce <LCD_GoToXY+0x8>
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	89 83       	std	Y+1, r24	; 0x01
    37d4:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	88 32       	cpi	r24, 0x28	; 40
    37da:	c0 f4       	brcc	.+48     	; 0x380c <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	28 2f       	mov	r18, r24
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	3c 83       	std	Y+4, r19	; 0x04
    37e4:	2b 83       	std	Y+3, r18	; 0x03
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	31 f0       	breq	.+12     	; 0x37fa <LCD_GoToXY+0x34>
    37ee:	2b 81       	ldd	r18, Y+3	; 0x03
    37f0:	3c 81       	ldd	r19, Y+4	; 0x04
    37f2:	21 30       	cpi	r18, 0x01	; 1
    37f4:	31 05       	cpc	r19, r1
    37f6:	31 f0       	breq	.+12     	; 0x3804 <LCD_GoToXY+0x3e>
    37f8:	09 c0       	rjmp	.+18     	; 0x380c <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	80 58       	subi	r24, 0x80	; 128
    37fe:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
    3802:	04 c0       	rjmp	.+8      	; 0x380c <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    3804:	8a 81       	ldd	r24, Y+2	; 0x02
    3806:	80 54       	subi	r24, 0x40	; 64
    3808:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
			break;
		}
	}
}
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	cf 91       	pop	r28
    3816:	df 91       	pop	r29
    3818:	08 95       	ret

0000381a <LCD_displayString>:

void LCD_displayString(const char *str)
{
    381a:	df 93       	push	r29
    381c:	cf 93       	push	r28
    381e:	00 d0       	rcall	.+0      	; 0x3820 <LCD_displayString+0x6>
    3820:	0f 92       	push	r0
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	9b 83       	std	Y+3, r25	; 0x03
    3828:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    382a:	19 82       	std	Y+1, r1	; 0x01
    382c:	0e c0       	rjmp	.+28     	; 0x384a <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	28 2f       	mov	r18, r24
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	8a 81       	ldd	r24, Y+2	; 0x02
    3836:	9b 81       	ldd	r25, Y+3	; 0x03
    3838:	fc 01       	movw	r30, r24
    383a:	e2 0f       	add	r30, r18
    383c:	f3 1f       	adc	r31, r19
    383e:	80 81       	ld	r24, Z
    3840:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_displayCharacter>
		i++;
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	8f 5f       	subi	r24, 0xFF	; 255
    3848:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	28 2f       	mov	r18, r24
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	8a 81       	ldd	r24, Y+2	; 0x02
    3852:	9b 81       	ldd	r25, Y+3	; 0x03
    3854:	fc 01       	movw	r30, r24
    3856:	e2 0f       	add	r30, r18
    3858:	f3 1f       	adc	r31, r19
    385a:	80 81       	ld	r24, Z
    385c:	88 23       	and	r24, r24
    385e:	39 f7       	brne	.-50     	; 0x382e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	cf 91       	pop	r28
    3868:	df 91       	pop	r29
    386a:	08 95       	ret

0000386c <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	28 97       	sbiw	r28, 0x08	; 8
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	8b 83       	std	Y+3, r24	; 0x03
    3882:	6c 83       	std	Y+4, r22	; 0x04
    3884:	5e 83       	std	Y+6, r21	; 0x06
    3886:	4d 83       	std	Y+5, r20	; 0x05
    3888:	38 87       	std	Y+8, r19	; 0x08
    388a:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    388c:	1a 82       	std	Y+2, r1	; 0x02
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	88 23       	and	r24, r24
    3896:	49 f4       	brne	.+18     	; 0x38aa <LCD_String_xy+0x3e>
    3898:	8c 81       	ldd	r24, Y+4	; 0x04
    389a:	80 31       	cpi	r24, 0x10	; 16
    389c:	30 f4       	brcc	.+12     	; 0x38aa <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    389e:	8c 81       	ldd	r24, Y+4	; 0x04
    38a0:	8f 70       	andi	r24, 0x0F	; 15
    38a2:	80 68       	ori	r24, 0x80	; 128
    38a4:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
    38a8:	3a c0       	rjmp	.+116    	; 0x391e <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    38aa:	8b 81       	ldd	r24, Y+3	; 0x03
    38ac:	81 30       	cpi	r24, 0x01	; 1
    38ae:	b9 f5       	brne	.+110    	; 0x391e <LCD_String_xy+0xb2>
    38b0:	8c 81       	ldd	r24, Y+4	; 0x04
    38b2:	80 31       	cpi	r24, 0x10	; 16
    38b4:	a0 f5       	brcc	.+104    	; 0x391e <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    38b6:	8c 81       	ldd	r24, Y+4	; 0x04
    38b8:	8f 70       	andi	r24, 0x0F	; 15
    38ba:	80 6c       	ori	r24, 0xC0	; 192
    38bc:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
    38c0:	2e c0       	rjmp	.+92     	; 0x391e <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	28 2f       	mov	r18, r24
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ca:	9e 81       	ldd	r25, Y+6	; 0x06
    38cc:	fc 01       	movw	r30, r24
    38ce:	e2 0f       	add	r30, r18
    38d0:	f3 1f       	adc	r31, r19
    38d2:	80 81       	ld	r24, Z
    38d4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_displayCharacter>
		i++;
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	8f 5f       	subi	r24, 0xFF	; 255
    38dc:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    38de:	8b 81       	ldd	r24, Y+3	; 0x03
    38e0:	88 23       	and	r24, r24
    38e2:	71 f4       	brne	.+28     	; 0x3900 <LCD_String_xy+0x94>
    38e4:	8c 81       	ldd	r24, Y+4	; 0x04
    38e6:	83 30       	cpi	r24, 0x03	; 3
    38e8:	58 f0       	brcs	.+22     	; 0x3900 <LCD_String_xy+0x94>
    38ea:	8a 81       	ldd	r24, Y+2	; 0x02
    38ec:	8b 30       	cpi	r24, 0x0B	; 11
    38ee:	41 f4       	brne	.+16     	; 0x3900 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	60 e0       	ldi	r22, 0x00	; 0
    38f4:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <LCD_GoToXY>
			c++;
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	8f 5f       	subi	r24, 0xFF	; 255
    38fc:	89 83       	std	Y+1, r24	; 0x01
    38fe:	0b c0       	rjmp	.+22     	; 0x3916 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3900:	8b 81       	ldd	r24, Y+3	; 0x03
    3902:	81 30       	cpi	r24, 0x01	; 1
    3904:	41 f4       	brne	.+16     	; 0x3916 <LCD_String_xy+0xaa>
    3906:	8c 81       	ldd	r24, Y+4	; 0x04
    3908:	83 30       	cpi	r24, 0x03	; 3
    390a:	28 f0       	brcs	.+10     	; 0x3916 <LCD_String_xy+0xaa>
    390c:	8a 81       	ldd	r24, Y+2	; 0x02
    390e:	8b 30       	cpi	r24, 0x0B	; 11
    3910:	11 f4       	brne	.+4      	; 0x3916 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3912:	0e 94 a3 1c 	call	0x3946	; 0x3946 <LCD_ClearScreen>
		}

		*count = c;
    3916:	ef 81       	ldd	r30, Y+7	; 0x07
    3918:	f8 85       	ldd	r31, Y+8	; 0x08
    391a:	89 81       	ldd	r24, Y+1	; 0x01
    391c:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    391e:	8a 81       	ldd	r24, Y+2	; 0x02
    3920:	28 2f       	mov	r18, r24
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	8d 81       	ldd	r24, Y+5	; 0x05
    3926:	9e 81       	ldd	r25, Y+6	; 0x06
    3928:	fc 01       	movw	r30, r24
    392a:	e2 0f       	add	r30, r18
    392c:	f3 1f       	adc	r31, r19
    392e:	80 81       	ld	r24, Z
    3930:	88 23       	and	r24, r24
    3932:	39 f6       	brne	.-114    	; 0x38c2 <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3934:	28 96       	adiw	r28, 0x08	; 8
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	2e 97       	sbiw	r28, 0x0e	; 14
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	a0 e0       	ldi	r26, 0x00	; 0
    3966:	b0 e4       	ldi	r27, 0x40	; 64
    3968:	8b 87       	std	Y+11, r24	; 0x0b
    396a:	9c 87       	std	Y+12, r25	; 0x0c
    396c:	ad 87       	std	Y+13, r26	; 0x0d
    396e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3970:	6b 85       	ldd	r22, Y+11	; 0x0b
    3972:	7c 85       	ldd	r23, Y+12	; 0x0c
    3974:	8d 85       	ldd	r24, Y+13	; 0x0d
    3976:	9e 85       	ldd	r25, Y+14	; 0x0e
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	4a e7       	ldi	r20, 0x7A	; 122
    397e:	55 e4       	ldi	r21, 0x45	; 69
    3980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	8f 83       	std	Y+7, r24	; 0x07
    398a:	98 87       	std	Y+8, r25	; 0x08
    398c:	a9 87       	std	Y+9, r26	; 0x09
    398e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3990:	6f 81       	ldd	r22, Y+7	; 0x07
    3992:	78 85       	ldd	r23, Y+8	; 0x08
    3994:	89 85       	ldd	r24, Y+9	; 0x09
    3996:	9a 85       	ldd	r25, Y+10	; 0x0a
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e8       	ldi	r20, 0x80	; 128
    399e:	5f e3       	ldi	r21, 0x3F	; 63
    39a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39a4:	88 23       	and	r24, r24
    39a6:	2c f4       	brge	.+10     	; 0x39b2 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	9e 83       	std	Y+6, r25	; 0x06
    39ae:	8d 83       	std	Y+5, r24	; 0x05
    39b0:	3f c0       	rjmp	.+126    	; 0x3a30 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    39b2:	6f 81       	ldd	r22, Y+7	; 0x07
    39b4:	78 85       	ldd	r23, Y+8	; 0x08
    39b6:	89 85       	ldd	r24, Y+9	; 0x09
    39b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	3f ef       	ldi	r19, 0xFF	; 255
    39be:	4f e7       	ldi	r20, 0x7F	; 127
    39c0:	57 e4       	ldi	r21, 0x47	; 71
    39c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39c6:	18 16       	cp	r1, r24
    39c8:	4c f5       	brge	.+82     	; 0x3a1c <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    39cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e2       	ldi	r20, 0x20	; 32
    39d8:	51 e4       	ldi	r21, 0x41	; 65
    39da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	bc 01       	movw	r22, r24
    39e4:	cd 01       	movw	r24, r26
    39e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9e 83       	std	Y+6, r25	; 0x06
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	0f c0       	rjmp	.+30     	; 0x3a12 <LCD_ClearScreen+0xcc>
    39f4:	80 e9       	ldi	r24, 0x90	; 144
    39f6:	91 e0       	ldi	r25, 0x01	; 1
    39f8:	9c 83       	std	Y+4, r25	; 0x04
    39fa:	8b 83       	std	Y+3, r24	; 0x03
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	f1 f7       	brne	.-4      	; 0x3a00 <LCD_ClearScreen+0xba>
    3a04:	9c 83       	std	Y+4, r25	; 0x04
    3a06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a08:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	9e 83       	std	Y+6, r25	; 0x06
    3a10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a12:	8d 81       	ldd	r24, Y+5	; 0x05
    3a14:	9e 81       	ldd	r25, Y+6	; 0x06
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	69 f7       	brne	.-38     	; 0x39f4 <LCD_ClearScreen+0xae>
    3a1a:	14 c0       	rjmp	.+40     	; 0x3a44 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1e:	78 85       	ldd	r23, Y+8	; 0x08
    3a20:	89 85       	ldd	r24, Y+9	; 0x09
    3a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	89 83       	std	Y+1, r24	; 0x01
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	f1 f7       	brne	.-4      	; 0x3a3c <LCD_ClearScreen+0xf6>
    3a40:	9a 83       	std	Y+2, r25	; 0x02
    3a42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3a44:	2e 96       	adiw	r28, 0x0e	; 14
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	cf 91       	pop	r28
    3a52:	df 91       	pop	r29
    3a54:	08 95       	ret

00003a56 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3a56:	df 93       	push	r29
    3a58:	cf 93       	push	r28
    3a5a:	cd b7       	in	r28, 0x3d	; 61
    3a5c:	de b7       	in	r29, 0x3e	; 62
    3a5e:	2e 97       	sbiw	r28, 0x0e	; 14
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3a6a:	88 e1       	ldi	r24, 0x18	; 24
    3a6c:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	a0 ea       	ldi	r26, 0xA0	; 160
    3a76:	b1 e4       	ldi	r27, 0x41	; 65
    3a78:	8b 87       	std	Y+11, r24	; 0x0b
    3a7a:	9c 87       	std	Y+12, r25	; 0x0c
    3a7c:	ad 87       	std	Y+13, r26	; 0x0d
    3a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	4a e7       	ldi	r20, 0x7A	; 122
    3a8e:	55 e4       	ldi	r21, 0x45	; 69
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	8f 83       	std	Y+7, r24	; 0x07
    3a9a:	98 87       	std	Y+8, r25	; 0x08
    3a9c:	a9 87       	std	Y+9, r26	; 0x09
    3a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa2:	78 85       	ldd	r23, Y+8	; 0x08
    3aa4:	89 85       	ldd	r24, Y+9	; 0x09
    3aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	40 e8       	ldi	r20, 0x80	; 128
    3aae:	5f e3       	ldi	r21, 0x3F	; 63
    3ab0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ab4:	88 23       	and	r24, r24
    3ab6:	2c f4       	brge	.+10     	; 0x3ac2 <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	9e 83       	std	Y+6, r25	; 0x06
    3abe:	8d 83       	std	Y+5, r24	; 0x05
    3ac0:	3f c0       	rjmp	.+126    	; 0x3b40 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac4:	78 85       	ldd	r23, Y+8	; 0x08
    3ac6:	89 85       	ldd	r24, Y+9	; 0x09
    3ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	3f ef       	ldi	r19, 0xFF	; 255
    3ace:	4f e7       	ldi	r20, 0x7F	; 127
    3ad0:	57 e4       	ldi	r21, 0x47	; 71
    3ad2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ad6:	18 16       	cp	r1, r24
    3ad8:	4c f5       	brge	.+82     	; 0x3b2c <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    3adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e2       	ldi	r20, 0x20	; 32
    3ae8:	51 e4       	ldi	r21, 0x41	; 65
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	bc 01       	movw	r22, r24
    3af4:	cd 01       	movw	r24, r26
    3af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	9e 83       	std	Y+6, r25	; 0x06
    3b00:	8d 83       	std	Y+5, r24	; 0x05
    3b02:	0f c0       	rjmp	.+30     	; 0x3b22 <LCD_ShiftingLeft+0xcc>
    3b04:	80 e9       	ldi	r24, 0x90	; 144
    3b06:	91 e0       	ldi	r25, 0x01	; 1
    3b08:	9c 83       	std	Y+4, r25	; 0x04
    3b0a:	8b 83       	std	Y+3, r24	; 0x03
    3b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	f1 f7       	brne	.-4      	; 0x3b10 <LCD_ShiftingLeft+0xba>
    3b14:	9c 83       	std	Y+4, r25	; 0x04
    3b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b18:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	9e 83       	std	Y+6, r25	; 0x06
    3b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b22:	8d 81       	ldd	r24, Y+5	; 0x05
    3b24:	9e 81       	ldd	r25, Y+6	; 0x06
    3b26:	00 97       	sbiw	r24, 0x00	; 0
    3b28:	69 f7       	brne	.-38     	; 0x3b04 <LCD_ShiftingLeft+0xae>
    3b2a:	14 c0       	rjmp	.+40     	; 0x3b54 <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b2e:	78 85       	ldd	r23, Y+8	; 0x08
    3b30:	89 85       	ldd	r24, Y+9	; 0x09
    3b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
    3b40:	8d 81       	ldd	r24, Y+5	; 0x05
    3b42:	9e 81       	ldd	r25, Y+6	; 0x06
    3b44:	9a 83       	std	Y+2, r25	; 0x02
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <LCD_ShiftingLeft+0xf6>
    3b50:	9a 83       	std	Y+2, r25	; 0x02
    3b52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3b54:	2e 96       	adiw	r28, 0x0e	; 14
    3b56:	0f b6       	in	r0, 0x3f	; 63
    3b58:	f8 94       	cli
    3b5a:	de bf       	out	0x3e, r29	; 62
    3b5c:	0f be       	out	0x3f, r0	; 63
    3b5e:	cd bf       	out	0x3d, r28	; 61
    3b60:	cf 91       	pop	r28
    3b62:	df 91       	pop	r29
    3b64:	08 95       	ret

00003b66 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3b66:	df 93       	push	r29
    3b68:	cf 93       	push	r28
    3b6a:	cd b7       	in	r28, 0x3d	; 61
    3b6c:	de b7       	in	r29, 0x3e	; 62
    3b6e:	2e 97       	sbiw	r28, 0x0e	; 14
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	de bf       	out	0x3e, r29	; 62
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3b7a:	8c e1       	ldi	r24, 0x1C	; 28
    3b7c:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	a0 ea       	ldi	r26, 0xA0	; 160
    3b86:	b1 e4       	ldi	r27, 0x41	; 65
    3b88:	8b 87       	std	Y+11, r24	; 0x0b
    3b8a:	9c 87       	std	Y+12, r25	; 0x0c
    3b8c:	ad 87       	std	Y+13, r26	; 0x0d
    3b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	4a e7       	ldi	r20, 0x7A	; 122
    3b9e:	55 e4       	ldi	r21, 0x45	; 69
    3ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	8f 83       	std	Y+7, r24	; 0x07
    3baa:	98 87       	std	Y+8, r25	; 0x08
    3bac:	a9 87       	std	Y+9, r26	; 0x09
    3bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb2:	78 85       	ldd	r23, Y+8	; 0x08
    3bb4:	89 85       	ldd	r24, Y+9	; 0x09
    3bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	40 e8       	ldi	r20, 0x80	; 128
    3bbe:	5f e3       	ldi	r21, 0x3F	; 63
    3bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bc4:	88 23       	and	r24, r24
    3bc6:	2c f4       	brge	.+10     	; 0x3bd2 <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	9e 83       	std	Y+6, r25	; 0x06
    3bce:	8d 83       	std	Y+5, r24	; 0x05
    3bd0:	3f c0       	rjmp	.+126    	; 0x3c50 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd4:	78 85       	ldd	r23, Y+8	; 0x08
    3bd6:	89 85       	ldd	r24, Y+9	; 0x09
    3bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	3f ef       	ldi	r19, 0xFF	; 255
    3bde:	4f e7       	ldi	r20, 0x7F	; 127
    3be0:	57 e4       	ldi	r21, 0x47	; 71
    3be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3be6:	18 16       	cp	r1, r24
    3be8:	4c f5       	brge	.+82     	; 0x3c3c <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bf2:	20 e0       	ldi	r18, 0x00	; 0
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	40 e2       	ldi	r20, 0x20	; 32
    3bf8:	51 e4       	ldi	r21, 0x41	; 65
    3bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	bc 01       	movw	r22, r24
    3c04:	cd 01       	movw	r24, r26
    3c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	9e 83       	std	Y+6, r25	; 0x06
    3c10:	8d 83       	std	Y+5, r24	; 0x05
    3c12:	0f c0       	rjmp	.+30     	; 0x3c32 <LCD_ShiftingRight+0xcc>
    3c14:	80 e9       	ldi	r24, 0x90	; 144
    3c16:	91 e0       	ldi	r25, 0x01	; 1
    3c18:	9c 83       	std	Y+4, r25	; 0x04
    3c1a:	8b 83       	std	Y+3, r24	; 0x03
    3c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	f1 f7       	brne	.-4      	; 0x3c20 <LCD_ShiftingRight+0xba>
    3c24:	9c 83       	std	Y+4, r25	; 0x04
    3c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c28:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	9e 83       	std	Y+6, r25	; 0x06
    3c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c32:	8d 81       	ldd	r24, Y+5	; 0x05
    3c34:	9e 81       	ldd	r25, Y+6	; 0x06
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	69 f7       	brne	.-38     	; 0x3c14 <LCD_ShiftingRight+0xae>
    3c3a:	14 c0       	rjmp	.+40     	; 0x3c64 <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3e:	78 85       	ldd	r23, Y+8	; 0x08
    3c40:	89 85       	ldd	r24, Y+9	; 0x09
    3c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	9e 83       	std	Y+6, r25	; 0x06
    3c4e:	8d 83       	std	Y+5, r24	; 0x05
    3c50:	8d 81       	ldd	r24, Y+5	; 0x05
    3c52:	9e 81       	ldd	r25, Y+6	; 0x06
    3c54:	9a 83       	std	Y+2, r25	; 0x02
    3c56:	89 83       	std	Y+1, r24	; 0x01
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5c:	01 97       	sbiw	r24, 0x01	; 1
    3c5e:	f1 f7       	brne	.-4      	; 0x3c5c <LCD_ShiftingRight+0xf6>
    3c60:	9a 83       	std	Y+2, r25	; 0x02
    3c62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3c64:	2e 96       	adiw	r28, 0x0e	; 14
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3c76:	0f 93       	push	r16
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	cd b7       	in	r28, 0x3d	; 61
    3c7e:	de b7       	in	r29, 0x3e	; 62
    3c80:	28 97       	sbiw	r28, 0x08	; 8
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	cd bf       	out	0x3d, r28	; 61
    3c8c:	8b 83       	std	Y+3, r24	; 0x03
    3c8e:	7d 83       	std	Y+5, r23	; 0x05
    3c90:	6c 83       	std	Y+4, r22	; 0x04
    3c92:	4e 83       	std	Y+6, r20	; 0x06
    3c94:	2f 83       	std	Y+7, r18	; 0x07
    3c96:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3c98:	88 85       	ldd	r24, Y+8	; 0x08
    3c9a:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3c9e:	1a 82       	std	Y+2, r1	; 0x02
    3ca0:	19 82       	std	Y+1, r1	; 0x01
    3ca2:	0f c0       	rjmp	.+30     	; 0x3cc2 <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3ca4:	29 81       	ldd	r18, Y+1	; 0x01
    3ca6:	3a 81       	ldd	r19, Y+2	; 0x02
    3ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    3caa:	9d 81       	ldd	r25, Y+5	; 0x05
    3cac:	fc 01       	movw	r30, r24
    3cae:	e2 0f       	add	r30, r18
    3cb0:	f3 1f       	adc	r31, r19
    3cb2:	80 81       	ld	r24, Z
    3cb4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	9a 81       	ldd	r25, Y+2	; 0x02
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	9a 83       	std	Y+2, r25	; 0x02
    3cc0:	89 83       	std	Y+1, r24	; 0x01
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc6:	88 30       	cpi	r24, 0x08	; 8
    3cc8:	91 05       	cpc	r25, r1
    3cca:	64 f3       	brlt	.-40     	; 0x3ca4 <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3ccc:	8e 81       	ldd	r24, Y+6	; 0x06
    3cce:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd0:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    3cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd6:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    3cda:	8f 81       	ldd	r24, Y+7	; 0x07
    3cdc:	80 31       	cpi	r24, 0x10	; 16
    3cde:	48 f0       	brcs	.+18     	; 0x3cf2 <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3ce0:	0e 94 a3 1c 	call	0x3946	; 0x3946 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	60 e0       	ldi	r22, 0x00	; 0
    3ce8:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3cec:	8b 81       	ldd	r24, Y+3	; 0x03
    3cee:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <LCD_displayCharacter>
	}
}
    3cf2:	28 96       	adiw	r28, 0x08	; 8
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	de bf       	out	0x3e, r29	; 62
    3cfa:	0f be       	out	0x3f, r0	; 63
    3cfc:	cd bf       	out	0x3d, r28	; 61
    3cfe:	cf 91       	pop	r28
    3d00:	df 91       	pop	r29
    3d02:	0f 91       	pop	r16
    3d04:	08 95       	ret

00003d06 <Keypad_GetPressedKey>:
#include "Keypad.h";

u8 Keypad_GetPressedKey(){
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	00 d0       	rcall	.+0      	; 0x3d0c <Keypad_GetPressedKey+0x6>
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    3d10:	1a 82       	std	Y+2, r1	; 0x02
    3d12:	4d c0       	rjmp	.+154    	; 0x3dae <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    3d14:	ea e3       	ldi	r30, 0x3A	; 58
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	28 2f       	mov	r18, r24
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	80 e1       	ldi	r24, 0x10	; 16
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	02 c0       	rjmp	.+4      	; 0x3d28 <Keypad_GetPressedKey+0x22>
    3d24:	88 0f       	add	r24, r24
    3d26:	99 1f       	adc	r25, r25
    3d28:	2a 95       	dec	r18
    3d2a:	e2 f7       	brpl	.-8      	; 0x3d24 <Keypad_GetPressedKey+0x1e>
    3d2c:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    3d2e:	eb e3       	ldi	r30, 0x3B	; 59
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	8a 81       	ldd	r24, Y+2	; 0x02
    3d34:	28 2f       	mov	r18, r24
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	80 e1       	ldi	r24, 0x10	; 16
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	02 2e       	mov	r0, r18
    3d3e:	02 c0       	rjmp	.+4      	; 0x3d44 <Keypad_GetPressedKey+0x3e>
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	0a 94       	dec	r0
    3d46:	e2 f7       	brpl	.-8      	; 0x3d40 <Keypad_GetPressedKey+0x3a>
    3d48:	80 95       	com	r24
    3d4a:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    3d4c:	19 82       	std	Y+1, r1	; 0x01
    3d4e:	29 c0       	rjmp	.+82     	; 0x3da2 <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    3d50:	e9 e3       	ldi	r30, 0x39	; 57
    3d52:	f0 e0       	ldi	r31, 0x00	; 0
    3d54:	80 81       	ld	r24, Z
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	88 2f       	mov	r24, r24
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	a9 01       	movw	r20, r18
    3d62:	02 c0       	rjmp	.+4      	; 0x3d68 <Keypad_GetPressedKey+0x62>
    3d64:	55 95       	asr	r21
    3d66:	47 95       	ror	r20
    3d68:	8a 95       	dec	r24
    3d6a:	e2 f7       	brpl	.-8      	; 0x3d64 <Keypad_GetPressedKey+0x5e>
    3d6c:	ca 01       	movw	r24, r20
    3d6e:	81 70       	andi	r24, 0x01	; 1
    3d70:	90 70       	andi	r25, 0x00	; 0
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	99 f4       	brne	.+38     	; 0x3d9c <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	28 2f       	mov	r18, r24
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	c9 01       	movw	r24, r18
    3d7e:	88 0f       	add	r24, r24
    3d80:	99 1f       	adc	r25, r25
    3d82:	82 0f       	add	r24, r18
    3d84:	93 1f       	adc	r25, r19
    3d86:	98 2f       	mov	r25, r24
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	89 0f       	add	r24, r25
    3d8c:	8f 5f       	subi	r24, 0xFF	; 255
    3d8e:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <Keypad_4x3>
				}
			}
		}
	}
}
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	8f 5f       	subi	r24, 0xFF	; 255
    3da0:	89 83       	std	Y+1, r24	; 0x01
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	84 30       	cpi	r24, 0x04	; 4
    3da6:	a0 f2       	brcs	.-88     	; 0x3d50 <Keypad_GetPressedKey+0x4a>

u8 Keypad_GetPressedKey(){
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    3da8:	8a 81       	ldd	r24, Y+2	; 0x02
    3daa:	8f 5f       	subi	r24, 0xFF	; 255
    3dac:	8a 83       	std	Y+2, r24	; 0x02
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
    3db0:	83 30       	cpi	r24, 0x03	; 3
    3db2:	08 f4       	brcc	.+2      	; 0x3db6 <Keypad_GetPressedKey+0xb0>
    3db4:	af cf       	rjmp	.-162    	; 0x3d14 <Keypad_GetPressedKey+0xe>
    3db6:	ac cf       	rjmp	.-168    	; 0x3d10 <Keypad_GetPressedKey+0xa>

00003db8 <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    3db8:	df 93       	push	r29
    3dba:	cf 93       	push	r28
    3dbc:	00 d0       	rcall	.+0      	; 0x3dbe <Keypad_4x3+0x6>
    3dbe:	00 d0       	rcall	.+0      	; 0x3dc0 <Keypad_4x3+0x8>
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	28 2f       	mov	r18, r24
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	3c 83       	std	Y+4, r19	; 0x04
    3dce:	2b 83       	std	Y+3, r18	; 0x03
    3dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd4:	8a 30       	cpi	r24, 0x0A	; 10
    3dd6:	91 05       	cpc	r25, r1
    3dd8:	81 f0       	breq	.+32     	; 0x3dfa <Keypad_4x3+0x42>
    3dda:	2b 81       	ldd	r18, Y+3	; 0x03
    3ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    3dde:	2a 30       	cpi	r18, 0x0A	; 10
    3de0:	31 05       	cpc	r19, r1
    3de2:	9c f0       	brlt	.+38     	; 0x3e0a <Keypad_4x3+0x52>
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	9c 81       	ldd	r25, Y+4	; 0x04
    3de8:	8b 30       	cpi	r24, 0x0B	; 11
    3dea:	91 05       	cpc	r25, r1
    3dec:	49 f0       	breq	.+18     	; 0x3e00 <Keypad_4x3+0x48>
    3dee:	2b 81       	ldd	r18, Y+3	; 0x03
    3df0:	3c 81       	ldd	r19, Y+4	; 0x04
    3df2:	2c 30       	cpi	r18, 0x0C	; 12
    3df4:	31 05       	cpc	r19, r1
    3df6:	31 f0       	breq	.+12     	; 0x3e04 <Keypad_4x3+0x4c>
    3df8:	08 c0       	rjmp	.+16     	; 0x3e0a <Keypad_4x3+0x52>
	case 10:
		return '*';
    3dfa:	3a e2       	ldi	r19, 0x2A	; 42
    3dfc:	3a 83       	std	Y+2, r19	; 0x02
    3dfe:	07 c0       	rjmp	.+14     	; 0x3e0e <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    3e00:	1a 82       	std	Y+2, r1	; 0x02
    3e02:	05 c0       	rjmp	.+10     	; 0x3e0e <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    3e04:	83 e2       	ldi	r24, 0x23	; 35
    3e06:	8a 83       	std	Y+2, r24	; 0x02
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <Keypad_4x3+0x56>
	default:
		return Num;
    3e0a:	99 81       	ldd	r25, Y+1	; 0x01
    3e0c:	9a 83       	std	Y+2, r25	; 0x02
    3e0e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	08 95       	ret

00003e1e <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    3e1e:	df 93       	push	r29
    3e20:	cf 93       	push	r28
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <DC_Motor_Init+0x6>
    3e24:	0f 92       	push	r0
    3e26:	cd b7       	in	r28, 0x3d	; 61
    3e28:	de b7       	in	r29, 0x3e	; 62
    3e2a:	8a 83       	std	Y+2, r24	; 0x02
    3e2c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    3e32:	8a 81       	ldd	r24, Y+2	; 0x02
    3e34:	81 30       	cpi	r24, 0x01	; 1
    3e36:	81 f4       	brne	.+32     	; 0x3e58 <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	62 e0       	ldi	r22, 0x02	; 2
    3e3c:	41 e0       	ldi	r20, 0x01	; 1
    3e3e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    3e42:	82 e0       	ldi	r24, 0x02	; 2
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	41 e0       	ldi	r20, 0x01	; 1
    3e48:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    3e4c:	82 e0       	ldi	r24, 0x02	; 2
    3e4e:	61 e0       	ldi	r22, 0x01	; 1
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
    3e56:	14 c0       	rjmp	.+40     	; 0x3e80 <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    3e58:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5a:	81 30       	cpi	r24, 0x01	; 1
    3e5c:	81 f4       	brne	.+32     	; 0x3e7e <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	62 e0       	ldi	r22, 0x02	; 2
    3e62:	41 e0       	ldi	r20, 0x01	; 1
    3e64:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	61 e0       	ldi	r22, 0x01	; 1
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	60 e0       	ldi	r22, 0x00	; 0
    3e76:	41 e0       	ldi	r20, 0x01	; 1
    3e78:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
    3e7c:	01 c0       	rjmp	.+2      	; 0x3e80 <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3e7e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e82:	0f 90       	pop	r0
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	29 97       	sbiw	r28, 0x09	; 9
    3e98:	0f b6       	in	r0, 0x3f	; 63
    3e9a:	f8 94       	cli
    3e9c:	de bf       	out	0x3e, r29	; 62
    3e9e:	0f be       	out	0x3f, r0	; 63
    3ea0:	cd bf       	out	0x3d, r28	; 61
    3ea2:	8a 83       	std	Y+2, r24	; 0x02
    3ea4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    3eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3eac:	28 2f       	mov	r18, r24
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	39 87       	std	Y+9, r19	; 0x09
    3eb2:	28 87       	std	Y+8, r18	; 0x08
    3eb4:	88 85       	ldd	r24, Y+8	; 0x08
    3eb6:	99 85       	ldd	r25, Y+9	; 0x09
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	31 f0       	breq	.+12     	; 0x3ec8 <DC_Motor_Rotate+0x3a>
    3ebc:	28 85       	ldd	r18, Y+8	; 0x08
    3ebe:	39 85       	ldd	r19, Y+9	; 0x09
    3ec0:	21 30       	cpi	r18, 0x01	; 1
    3ec2:	31 05       	cpc	r19, r1
    3ec4:	89 f1       	breq	.+98     	; 0x3f28 <DC_Motor_Rotate+0x9a>
    3ec6:	60 c0       	rjmp	.+192    	; 0x3f88 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    3ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eca:	28 2f       	mov	r18, r24
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	3f 83       	std	Y+7, r19	; 0x07
    3ed0:	2e 83       	std	Y+6, r18	; 0x06
    3ed2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	a9 f0       	breq	.+42     	; 0x3f04 <DC_Motor_Rotate+0x76>
    3eda:	2e 81       	ldd	r18, Y+6	; 0x06
    3edc:	3f 81       	ldd	r19, Y+7	; 0x07
    3ede:	21 30       	cpi	r18, 0x01	; 1
    3ee0:	31 05       	cpc	r19, r1
    3ee2:	01 f5       	brne	.+64     	; 0x3f24 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3ee4:	82 e0       	ldi	r24, 0x02	; 2
    3ee6:	62 e0       	ldi	r22, 0x02	; 2
    3ee8:	41 e0       	ldi	r20, 0x01	; 1
    3eea:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    3eee:	82 e0       	ldi	r24, 0x02	; 2
    3ef0:	60 e0       	ldi	r22, 0x00	; 0
    3ef2:	41 e0       	ldi	r20, 0x01	; 1
    3ef4:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    3ef8:	82 e0       	ldi	r24, 0x02	; 2
    3efa:	61 e0       	ldi	r22, 0x01	; 1
    3efc:	40 e0       	ldi	r20, 0x00	; 0
    3efe:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
    3f02:	43 c0       	rjmp	.+134    	; 0x3f8a <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	62 e0       	ldi	r22, 0x02	; 2
    3f08:	41 e0       	ldi	r20, 0x01	; 1
    3f0a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    3f0e:	82 e0       	ldi	r24, 0x02	; 2
    3f10:	60 e0       	ldi	r22, 0x00	; 0
    3f12:	40 e0       	ldi	r20, 0x00	; 0
    3f14:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    3f18:	82 e0       	ldi	r24, 0x02	; 2
    3f1a:	61 e0       	ldi	r22, 0x01	; 1
    3f1c:	41 e0       	ldi	r20, 0x01	; 1
    3f1e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
    3f22:	33 c0       	rjmp	.+102    	; 0x3f8a <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    3f24:	19 82       	std	Y+1, r1	; 0x01
    3f26:	31 c0       	rjmp	.+98     	; 0x3f8a <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    3f28:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2a:	28 2f       	mov	r18, r24
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	3d 83       	std	Y+5, r19	; 0x05
    3f30:	2c 83       	std	Y+4, r18	; 0x04
    3f32:	8c 81       	ldd	r24, Y+4	; 0x04
    3f34:	9d 81       	ldd	r25, Y+5	; 0x05
    3f36:	00 97       	sbiw	r24, 0x00	; 0
    3f38:	a9 f0       	breq	.+42     	; 0x3f64 <DC_Motor_Rotate+0xd6>
    3f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    3f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    3f3e:	21 30       	cpi	r18, 0x01	; 1
    3f40:	31 05       	cpc	r19, r1
    3f42:	01 f5       	brne	.+64     	; 0x3f84 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	62 e0       	ldi	r22, 0x02	; 2
    3f48:	41 e0       	ldi	r20, 0x01	; 1
    3f4a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	61 e0       	ldi	r22, 0x01	; 1
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
    3f62:	13 c0       	rjmp	.+38     	; 0x3f8a <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	62 e0       	ldi	r22, 0x02	; 2
    3f68:	41 e0       	ldi	r20, 0x01	; 1
    3f6a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	61 e0       	ldi	r22, 0x01	; 1
    3f72:	40 e0       	ldi	r20, 0x00	; 0
    3f74:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	60 e0       	ldi	r22, 0x00	; 0
    3f7c:	41 e0       	ldi	r20, 0x01	; 1
    3f7e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
    3f82:	03 c0       	rjmp	.+6      	; 0x3f8a <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    3f84:	19 82       	std	Y+1, r1	; 0x01
    3f86:	01 c0       	rjmp	.+2      	; 0x3f8a <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    3f88:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f8c:	29 96       	adiw	r28, 0x09	; 9
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	cf 91       	pop	r28
    3f9a:	df 91       	pop	r29
    3f9c:	08 95       	ret

00003f9e <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    3f9e:	df 93       	push	r29
    3fa0:	cf 93       	push	r28
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <DC_Motor_Stop+0x6>
    3fa4:	cd b7       	in	r28, 0x3d	; 61
    3fa6:	de b7       	in	r29, 0x3e	; 62
    3fa8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    3fae:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb0:	88 23       	and	r24, r24
    3fb2:	31 f4       	brne	.+12     	; 0x3fc0 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    3fb4:	82 e0       	ldi	r24, 0x02	; 2
    3fb6:	62 e0       	ldi	r22, 0x02	; 2
    3fb8:	40 e0       	ldi	r20, 0x00	; 0
    3fba:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
    3fbe:	0a c0       	rjmp	.+20     	; 0x3fd4 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    3fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc2:	81 30       	cpi	r24, 0x01	; 1
    3fc4:	31 f4       	brne	.+12     	; 0x3fd2 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	62 e0       	ldi	r22, 0x02	; 2
    3fca:	40 e0       	ldi	r20, 0x00	; 0
    3fcc:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
    3fd0:	01 c0       	rjmp	.+2      	; 0x3fd4 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3fd2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fd6:	0f 90       	pop	r0
    3fd8:	0f 90       	pop	r0
    3fda:	cf 91       	pop	r28
    3fdc:	df 91       	pop	r29
    3fde:	08 95       	ret

00003fe0 <main>:
#include<util/delay.h>
#define F_CPU 16000000UL

void ToggleLed(void);

int main(void){
    3fe0:	df 93       	push	r29
    3fe2:	cf 93       	push	r28
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(1, 0, 1);
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	60 e0       	ldi	r22, 0x00	; 0
    3fec:	41 e0       	ldi	r20, 0x01	; 1
    3fee:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <DIO_u8SetPinDirection>
	EXTI_voidEnable_GIE();
    3ff2:	0e 94 6f 0a 	call	0x14de	; 0x14de <EXTI_voidEnable_GIE>
	
	TIMERS_u8TIMER0CTCSetCallBack(&ToggleLed);
    3ff6:	82 e0       	ldi	r24, 0x02	; 2
    3ff8:	90 e2       	ldi	r25, 0x20	; 32
    3ffa:	0e 94 f5 05 	call	0xbea	; 0xbea <TIMERS_u8TIMER0CTCSetCallBack>
	TIMERS_voidTimer0Init();
    3ffe:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMERS_voidTimer0Init>
    4002:	ff cf       	rjmp	.-2      	; 0x4002 <main+0x22>

00004004 <ToggleLed>:
	while(1);
	return 0;
}

void ToggleLed(void){
    4004:	df 93       	push	r29
    4006:	cf 93       	push	r28
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0){
    400c:	80 91 81 00 	lds	r24, 0x0081
    4010:	88 23       	and	r24, r24
    4012:	49 f4       	brne	.+18     	; 0x4026 <ToggleLed+0x22>
		DIO_u8SetPinValue(1, 0, 1);
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	41 e0       	ldi	r20, 0x01	; 1
    401a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
		Local_u8Flag = 1;
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	80 93 81 00 	sts	0x0081, r24
    4024:	07 c0       	rjmp	.+14     	; 0x4034 <ToggleLed+0x30>
	}
	
	else{
		DIO_u8SetPinValue(1, 0, 0);
    4026:	81 e0       	ldi	r24, 0x01	; 1
    4028:	60 e0       	ldi	r22, 0x00	; 0
    402a:	40 e0       	ldi	r20, 0x00	; 0
    402c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <DIO_u8SetPinValue>
		Local_u8Flag = 0;
    4030:	10 92 81 00 	sts	0x0081, r1
	}
}
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	08 95       	ret

0000403a <__prologue_saves__>:
    403a:	2f 92       	push	r2
    403c:	3f 92       	push	r3
    403e:	4f 92       	push	r4
    4040:	5f 92       	push	r5
    4042:	6f 92       	push	r6
    4044:	7f 92       	push	r7
    4046:	8f 92       	push	r8
    4048:	9f 92       	push	r9
    404a:	af 92       	push	r10
    404c:	bf 92       	push	r11
    404e:	cf 92       	push	r12
    4050:	df 92       	push	r13
    4052:	ef 92       	push	r14
    4054:	ff 92       	push	r15
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62
    4062:	ca 1b       	sub	r28, r26
    4064:	db 0b       	sbc	r29, r27
    4066:	0f b6       	in	r0, 0x3f	; 63
    4068:	f8 94       	cli
    406a:	de bf       	out	0x3e, r29	; 62
    406c:	0f be       	out	0x3f, r0	; 63
    406e:	cd bf       	out	0x3d, r28	; 61
    4070:	09 94       	ijmp

00004072 <__epilogue_restores__>:
    4072:	2a 88       	ldd	r2, Y+18	; 0x12
    4074:	39 88       	ldd	r3, Y+17	; 0x11
    4076:	48 88       	ldd	r4, Y+16	; 0x10
    4078:	5f 84       	ldd	r5, Y+15	; 0x0f
    407a:	6e 84       	ldd	r6, Y+14	; 0x0e
    407c:	7d 84       	ldd	r7, Y+13	; 0x0d
    407e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4080:	9b 84       	ldd	r9, Y+11	; 0x0b
    4082:	aa 84       	ldd	r10, Y+10	; 0x0a
    4084:	b9 84       	ldd	r11, Y+9	; 0x09
    4086:	c8 84       	ldd	r12, Y+8	; 0x08
    4088:	df 80       	ldd	r13, Y+7	; 0x07
    408a:	ee 80       	ldd	r14, Y+6	; 0x06
    408c:	fd 80       	ldd	r15, Y+5	; 0x05
    408e:	0c 81       	ldd	r16, Y+4	; 0x04
    4090:	1b 81       	ldd	r17, Y+3	; 0x03
    4092:	aa 81       	ldd	r26, Y+2	; 0x02
    4094:	b9 81       	ldd	r27, Y+1	; 0x01
    4096:	ce 0f       	add	r28, r30
    4098:	d1 1d       	adc	r29, r1
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	ed 01       	movw	r28, r26
    40a6:	08 95       	ret

000040a8 <strlen>:
    40a8:	fc 01       	movw	r30, r24
    40aa:	01 90       	ld	r0, Z+
    40ac:	00 20       	and	r0, r0
    40ae:	e9 f7       	brne	.-6      	; 0x40aa <strlen+0x2>
    40b0:	80 95       	com	r24
    40b2:	90 95       	com	r25
    40b4:	8e 0f       	add	r24, r30
    40b6:	9f 1f       	adc	r25, r31
    40b8:	08 95       	ret

000040ba <sprintf>:
    40ba:	ae e0       	ldi	r26, 0x0E	; 14
    40bc:	b0 e0       	ldi	r27, 0x00	; 0
    40be:	e3 e6       	ldi	r30, 0x63	; 99
    40c0:	f0 e2       	ldi	r31, 0x20	; 32
    40c2:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <__prologue_saves__+0x1c>
    40c6:	0d 89       	ldd	r16, Y+21	; 0x15
    40c8:	1e 89       	ldd	r17, Y+22	; 0x16
    40ca:	86 e0       	ldi	r24, 0x06	; 6
    40cc:	8c 83       	std	Y+4, r24	; 0x04
    40ce:	1a 83       	std	Y+2, r17	; 0x02
    40d0:	09 83       	std	Y+1, r16	; 0x01
    40d2:	8f ef       	ldi	r24, 0xFF	; 255
    40d4:	9f e7       	ldi	r25, 0x7F	; 127
    40d6:	9e 83       	std	Y+6, r25	; 0x06
    40d8:	8d 83       	std	Y+5, r24	; 0x05
    40da:	9e 01       	movw	r18, r28
    40dc:	27 5e       	subi	r18, 0xE7	; 231
    40de:	3f 4f       	sbci	r19, 0xFF	; 255
    40e0:	ce 01       	movw	r24, r28
    40e2:	01 96       	adiw	r24, 0x01	; 1
    40e4:	6f 89       	ldd	r22, Y+23	; 0x17
    40e6:	78 8d       	ldd	r23, Y+24	; 0x18
    40e8:	a9 01       	movw	r20, r18
    40ea:	0e 94 81 20 	call	0x4102	; 0x4102 <vfprintf>
    40ee:	2f 81       	ldd	r18, Y+7	; 0x07
    40f0:	38 85       	ldd	r19, Y+8	; 0x08
    40f2:	02 0f       	add	r16, r18
    40f4:	13 1f       	adc	r17, r19
    40f6:	f8 01       	movw	r30, r16
    40f8:	10 82       	st	Z, r1
    40fa:	2e 96       	adiw	r28, 0x0e	; 14
    40fc:	e4 e0       	ldi	r30, 0x04	; 4
    40fe:	0c 94 47 20 	jmp	0x408e	; 0x408e <__epilogue_restores__+0x1c>

00004102 <vfprintf>:
    4102:	ab e0       	ldi	r26, 0x0B	; 11
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	e7 e8       	ldi	r30, 0x87	; 135
    4108:	f0 e2       	ldi	r31, 0x20	; 32
    410a:	0c 94 1d 20 	jmp	0x403a	; 0x403a <__prologue_saves__>
    410e:	3c 01       	movw	r6, r24
    4110:	2b 01       	movw	r4, r22
    4112:	5a 01       	movw	r10, r20
    4114:	fc 01       	movw	r30, r24
    4116:	17 82       	std	Z+7, r1	; 0x07
    4118:	16 82       	std	Z+6, r1	; 0x06
    411a:	83 81       	ldd	r24, Z+3	; 0x03
    411c:	81 fd       	sbrc	r24, 1
    411e:	03 c0       	rjmp	.+6      	; 0x4126 <vfprintf+0x24>
    4120:	6f ef       	ldi	r22, 0xFF	; 255
    4122:	7f ef       	ldi	r23, 0xFF	; 255
    4124:	c6 c1       	rjmp	.+908    	; 0x44b2 <vfprintf+0x3b0>
    4126:	9a e0       	ldi	r25, 0x0A	; 10
    4128:	89 2e       	mov	r8, r25
    412a:	1e 01       	movw	r2, r28
    412c:	08 94       	sec
    412e:	21 1c       	adc	r2, r1
    4130:	31 1c       	adc	r3, r1
    4132:	f3 01       	movw	r30, r6
    4134:	23 81       	ldd	r18, Z+3	; 0x03
    4136:	f2 01       	movw	r30, r4
    4138:	23 fd       	sbrc	r18, 3
    413a:	85 91       	lpm	r24, Z+
    413c:	23 ff       	sbrs	r18, 3
    413e:	81 91       	ld	r24, Z+
    4140:	2f 01       	movw	r4, r30
    4142:	88 23       	and	r24, r24
    4144:	09 f4       	brne	.+2      	; 0x4148 <vfprintf+0x46>
    4146:	b2 c1       	rjmp	.+868    	; 0x44ac <vfprintf+0x3aa>
    4148:	85 32       	cpi	r24, 0x25	; 37
    414a:	39 f4       	brne	.+14     	; 0x415a <vfprintf+0x58>
    414c:	23 fd       	sbrc	r18, 3
    414e:	85 91       	lpm	r24, Z+
    4150:	23 ff       	sbrs	r18, 3
    4152:	81 91       	ld	r24, Z+
    4154:	2f 01       	movw	r4, r30
    4156:	85 32       	cpi	r24, 0x25	; 37
    4158:	29 f4       	brne	.+10     	; 0x4164 <vfprintf+0x62>
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	b3 01       	movw	r22, r6
    415e:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    4162:	e7 cf       	rjmp	.-50     	; 0x4132 <vfprintf+0x30>
    4164:	98 2f       	mov	r25, r24
    4166:	ff 24       	eor	r15, r15
    4168:	ee 24       	eor	r14, r14
    416a:	99 24       	eor	r9, r9
    416c:	ff e1       	ldi	r31, 0x1F	; 31
    416e:	ff 15       	cp	r31, r15
    4170:	d0 f0       	brcs	.+52     	; 0x41a6 <vfprintf+0xa4>
    4172:	9b 32       	cpi	r25, 0x2B	; 43
    4174:	69 f0       	breq	.+26     	; 0x4190 <vfprintf+0x8e>
    4176:	9c 32       	cpi	r25, 0x2C	; 44
    4178:	28 f4       	brcc	.+10     	; 0x4184 <vfprintf+0x82>
    417a:	90 32       	cpi	r25, 0x20	; 32
    417c:	59 f0       	breq	.+22     	; 0x4194 <vfprintf+0x92>
    417e:	93 32       	cpi	r25, 0x23	; 35
    4180:	91 f4       	brne	.+36     	; 0x41a6 <vfprintf+0xa4>
    4182:	0e c0       	rjmp	.+28     	; 0x41a0 <vfprintf+0x9e>
    4184:	9d 32       	cpi	r25, 0x2D	; 45
    4186:	49 f0       	breq	.+18     	; 0x419a <vfprintf+0x98>
    4188:	90 33       	cpi	r25, 0x30	; 48
    418a:	69 f4       	brne	.+26     	; 0x41a6 <vfprintf+0xa4>
    418c:	41 e0       	ldi	r20, 0x01	; 1
    418e:	24 c0       	rjmp	.+72     	; 0x41d8 <vfprintf+0xd6>
    4190:	52 e0       	ldi	r21, 0x02	; 2
    4192:	f5 2a       	or	r15, r21
    4194:	84 e0       	ldi	r24, 0x04	; 4
    4196:	f8 2a       	or	r15, r24
    4198:	28 c0       	rjmp	.+80     	; 0x41ea <vfprintf+0xe8>
    419a:	98 e0       	ldi	r25, 0x08	; 8
    419c:	f9 2a       	or	r15, r25
    419e:	25 c0       	rjmp	.+74     	; 0x41ea <vfprintf+0xe8>
    41a0:	e0 e1       	ldi	r30, 0x10	; 16
    41a2:	fe 2a       	or	r15, r30
    41a4:	22 c0       	rjmp	.+68     	; 0x41ea <vfprintf+0xe8>
    41a6:	f7 fc       	sbrc	r15, 7
    41a8:	29 c0       	rjmp	.+82     	; 0x41fc <vfprintf+0xfa>
    41aa:	89 2f       	mov	r24, r25
    41ac:	80 53       	subi	r24, 0x30	; 48
    41ae:	8a 30       	cpi	r24, 0x0A	; 10
    41b0:	70 f4       	brcc	.+28     	; 0x41ce <vfprintf+0xcc>
    41b2:	f6 fe       	sbrs	r15, 6
    41b4:	05 c0       	rjmp	.+10     	; 0x41c0 <vfprintf+0xbe>
    41b6:	98 9c       	mul	r9, r8
    41b8:	90 2c       	mov	r9, r0
    41ba:	11 24       	eor	r1, r1
    41bc:	98 0e       	add	r9, r24
    41be:	15 c0       	rjmp	.+42     	; 0x41ea <vfprintf+0xe8>
    41c0:	e8 9c       	mul	r14, r8
    41c2:	e0 2c       	mov	r14, r0
    41c4:	11 24       	eor	r1, r1
    41c6:	e8 0e       	add	r14, r24
    41c8:	f0 e2       	ldi	r31, 0x20	; 32
    41ca:	ff 2a       	or	r15, r31
    41cc:	0e c0       	rjmp	.+28     	; 0x41ea <vfprintf+0xe8>
    41ce:	9e 32       	cpi	r25, 0x2E	; 46
    41d0:	29 f4       	brne	.+10     	; 0x41dc <vfprintf+0xda>
    41d2:	f6 fc       	sbrc	r15, 6
    41d4:	6b c1       	rjmp	.+726    	; 0x44ac <vfprintf+0x3aa>
    41d6:	40 e4       	ldi	r20, 0x40	; 64
    41d8:	f4 2a       	or	r15, r20
    41da:	07 c0       	rjmp	.+14     	; 0x41ea <vfprintf+0xe8>
    41dc:	9c 36       	cpi	r25, 0x6C	; 108
    41de:	19 f4       	brne	.+6      	; 0x41e6 <vfprintf+0xe4>
    41e0:	50 e8       	ldi	r21, 0x80	; 128
    41e2:	f5 2a       	or	r15, r21
    41e4:	02 c0       	rjmp	.+4      	; 0x41ea <vfprintf+0xe8>
    41e6:	98 36       	cpi	r25, 0x68	; 104
    41e8:	49 f4       	brne	.+18     	; 0x41fc <vfprintf+0xfa>
    41ea:	f2 01       	movw	r30, r4
    41ec:	23 fd       	sbrc	r18, 3
    41ee:	95 91       	lpm	r25, Z+
    41f0:	23 ff       	sbrs	r18, 3
    41f2:	91 91       	ld	r25, Z+
    41f4:	2f 01       	movw	r4, r30
    41f6:	99 23       	and	r25, r25
    41f8:	09 f0       	breq	.+2      	; 0x41fc <vfprintf+0xfa>
    41fa:	b8 cf       	rjmp	.-144    	; 0x416c <vfprintf+0x6a>
    41fc:	89 2f       	mov	r24, r25
    41fe:	85 54       	subi	r24, 0x45	; 69
    4200:	83 30       	cpi	r24, 0x03	; 3
    4202:	18 f0       	brcs	.+6      	; 0x420a <vfprintf+0x108>
    4204:	80 52       	subi	r24, 0x20	; 32
    4206:	83 30       	cpi	r24, 0x03	; 3
    4208:	38 f4       	brcc	.+14     	; 0x4218 <vfprintf+0x116>
    420a:	44 e0       	ldi	r20, 0x04	; 4
    420c:	50 e0       	ldi	r21, 0x00	; 0
    420e:	a4 0e       	add	r10, r20
    4210:	b5 1e       	adc	r11, r21
    4212:	5f e3       	ldi	r21, 0x3F	; 63
    4214:	59 83       	std	Y+1, r21	; 0x01
    4216:	0f c0       	rjmp	.+30     	; 0x4236 <vfprintf+0x134>
    4218:	93 36       	cpi	r25, 0x63	; 99
    421a:	31 f0       	breq	.+12     	; 0x4228 <vfprintf+0x126>
    421c:	93 37       	cpi	r25, 0x73	; 115
    421e:	79 f0       	breq	.+30     	; 0x423e <vfprintf+0x13c>
    4220:	93 35       	cpi	r25, 0x53	; 83
    4222:	09 f0       	breq	.+2      	; 0x4226 <vfprintf+0x124>
    4224:	56 c0       	rjmp	.+172    	; 0x42d2 <vfprintf+0x1d0>
    4226:	20 c0       	rjmp	.+64     	; 0x4268 <vfprintf+0x166>
    4228:	f5 01       	movw	r30, r10
    422a:	80 81       	ld	r24, Z
    422c:	89 83       	std	Y+1, r24	; 0x01
    422e:	42 e0       	ldi	r20, 0x02	; 2
    4230:	50 e0       	ldi	r21, 0x00	; 0
    4232:	a4 0e       	add	r10, r20
    4234:	b5 1e       	adc	r11, r21
    4236:	61 01       	movw	r12, r2
    4238:	01 e0       	ldi	r16, 0x01	; 1
    423a:	10 e0       	ldi	r17, 0x00	; 0
    423c:	12 c0       	rjmp	.+36     	; 0x4262 <vfprintf+0x160>
    423e:	f5 01       	movw	r30, r10
    4240:	c0 80       	ld	r12, Z
    4242:	d1 80       	ldd	r13, Z+1	; 0x01
    4244:	f6 fc       	sbrc	r15, 6
    4246:	03 c0       	rjmp	.+6      	; 0x424e <vfprintf+0x14c>
    4248:	6f ef       	ldi	r22, 0xFF	; 255
    424a:	7f ef       	ldi	r23, 0xFF	; 255
    424c:	02 c0       	rjmp	.+4      	; 0x4252 <vfprintf+0x150>
    424e:	69 2d       	mov	r22, r9
    4250:	70 e0       	ldi	r23, 0x00	; 0
    4252:	42 e0       	ldi	r20, 0x02	; 2
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	a4 0e       	add	r10, r20
    4258:	b5 1e       	adc	r11, r21
    425a:	c6 01       	movw	r24, r12
    425c:	0e 94 69 22 	call	0x44d2	; 0x44d2 <strnlen>
    4260:	8c 01       	movw	r16, r24
    4262:	5f e7       	ldi	r21, 0x7F	; 127
    4264:	f5 22       	and	r15, r21
    4266:	14 c0       	rjmp	.+40     	; 0x4290 <vfprintf+0x18e>
    4268:	f5 01       	movw	r30, r10
    426a:	c0 80       	ld	r12, Z
    426c:	d1 80       	ldd	r13, Z+1	; 0x01
    426e:	f6 fc       	sbrc	r15, 6
    4270:	03 c0       	rjmp	.+6      	; 0x4278 <vfprintf+0x176>
    4272:	6f ef       	ldi	r22, 0xFF	; 255
    4274:	7f ef       	ldi	r23, 0xFF	; 255
    4276:	02 c0       	rjmp	.+4      	; 0x427c <vfprintf+0x17a>
    4278:	69 2d       	mov	r22, r9
    427a:	70 e0       	ldi	r23, 0x00	; 0
    427c:	42 e0       	ldi	r20, 0x02	; 2
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	a4 0e       	add	r10, r20
    4282:	b5 1e       	adc	r11, r21
    4284:	c6 01       	movw	r24, r12
    4286:	0e 94 5e 22 	call	0x44bc	; 0x44bc <strnlen_P>
    428a:	8c 01       	movw	r16, r24
    428c:	50 e8       	ldi	r21, 0x80	; 128
    428e:	f5 2a       	or	r15, r21
    4290:	f3 fe       	sbrs	r15, 3
    4292:	07 c0       	rjmp	.+14     	; 0x42a2 <vfprintf+0x1a0>
    4294:	1a c0       	rjmp	.+52     	; 0x42ca <vfprintf+0x1c8>
    4296:	80 e2       	ldi	r24, 0x20	; 32
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	b3 01       	movw	r22, r6
    429c:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    42a0:	ea 94       	dec	r14
    42a2:	8e 2d       	mov	r24, r14
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	08 17       	cp	r16, r24
    42a8:	19 07       	cpc	r17, r25
    42aa:	a8 f3       	brcs	.-22     	; 0x4296 <vfprintf+0x194>
    42ac:	0e c0       	rjmp	.+28     	; 0x42ca <vfprintf+0x1c8>
    42ae:	f6 01       	movw	r30, r12
    42b0:	f7 fc       	sbrc	r15, 7
    42b2:	85 91       	lpm	r24, Z+
    42b4:	f7 fe       	sbrs	r15, 7
    42b6:	81 91       	ld	r24, Z+
    42b8:	6f 01       	movw	r12, r30
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	b3 01       	movw	r22, r6
    42be:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    42c2:	e1 10       	cpse	r14, r1
    42c4:	ea 94       	dec	r14
    42c6:	01 50       	subi	r16, 0x01	; 1
    42c8:	10 40       	sbci	r17, 0x00	; 0
    42ca:	01 15       	cp	r16, r1
    42cc:	11 05       	cpc	r17, r1
    42ce:	79 f7       	brne	.-34     	; 0x42ae <vfprintf+0x1ac>
    42d0:	ea c0       	rjmp	.+468    	; 0x44a6 <vfprintf+0x3a4>
    42d2:	94 36       	cpi	r25, 0x64	; 100
    42d4:	11 f0       	breq	.+4      	; 0x42da <vfprintf+0x1d8>
    42d6:	99 36       	cpi	r25, 0x69	; 105
    42d8:	69 f5       	brne	.+90     	; 0x4334 <vfprintf+0x232>
    42da:	f7 fe       	sbrs	r15, 7
    42dc:	08 c0       	rjmp	.+16     	; 0x42ee <vfprintf+0x1ec>
    42de:	f5 01       	movw	r30, r10
    42e0:	20 81       	ld	r18, Z
    42e2:	31 81       	ldd	r19, Z+1	; 0x01
    42e4:	42 81       	ldd	r20, Z+2	; 0x02
    42e6:	53 81       	ldd	r21, Z+3	; 0x03
    42e8:	84 e0       	ldi	r24, 0x04	; 4
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	0a c0       	rjmp	.+20     	; 0x4302 <vfprintf+0x200>
    42ee:	f5 01       	movw	r30, r10
    42f0:	80 81       	ld	r24, Z
    42f2:	91 81       	ldd	r25, Z+1	; 0x01
    42f4:	9c 01       	movw	r18, r24
    42f6:	44 27       	eor	r20, r20
    42f8:	37 fd       	sbrc	r19, 7
    42fa:	40 95       	com	r20
    42fc:	54 2f       	mov	r21, r20
    42fe:	82 e0       	ldi	r24, 0x02	; 2
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	a8 0e       	add	r10, r24
    4304:	b9 1e       	adc	r11, r25
    4306:	9f e6       	ldi	r25, 0x6F	; 111
    4308:	f9 22       	and	r15, r25
    430a:	57 ff       	sbrs	r21, 7
    430c:	09 c0       	rjmp	.+18     	; 0x4320 <vfprintf+0x21e>
    430e:	50 95       	com	r21
    4310:	40 95       	com	r20
    4312:	30 95       	com	r19
    4314:	21 95       	neg	r18
    4316:	3f 4f       	sbci	r19, 0xFF	; 255
    4318:	4f 4f       	sbci	r20, 0xFF	; 255
    431a:	5f 4f       	sbci	r21, 0xFF	; 255
    431c:	e0 e8       	ldi	r30, 0x80	; 128
    431e:	fe 2a       	or	r15, r30
    4320:	ca 01       	movw	r24, r20
    4322:	b9 01       	movw	r22, r18
    4324:	a1 01       	movw	r20, r2
    4326:	2a e0       	ldi	r18, 0x0A	; 10
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	0e 94 a0 22 	call	0x4540	; 0x4540 <__ultoa_invert>
    432e:	d8 2e       	mov	r13, r24
    4330:	d2 18       	sub	r13, r2
    4332:	40 c0       	rjmp	.+128    	; 0x43b4 <vfprintf+0x2b2>
    4334:	95 37       	cpi	r25, 0x75	; 117
    4336:	29 f4       	brne	.+10     	; 0x4342 <vfprintf+0x240>
    4338:	1f 2d       	mov	r17, r15
    433a:	1f 7e       	andi	r17, 0xEF	; 239
    433c:	2a e0       	ldi	r18, 0x0A	; 10
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	1d c0       	rjmp	.+58     	; 0x437c <vfprintf+0x27a>
    4342:	1f 2d       	mov	r17, r15
    4344:	19 7f       	andi	r17, 0xF9	; 249
    4346:	9f 36       	cpi	r25, 0x6F	; 111
    4348:	61 f0       	breq	.+24     	; 0x4362 <vfprintf+0x260>
    434a:	90 37       	cpi	r25, 0x70	; 112
    434c:	20 f4       	brcc	.+8      	; 0x4356 <vfprintf+0x254>
    434e:	98 35       	cpi	r25, 0x58	; 88
    4350:	09 f0       	breq	.+2      	; 0x4354 <vfprintf+0x252>
    4352:	ac c0       	rjmp	.+344    	; 0x44ac <vfprintf+0x3aa>
    4354:	0f c0       	rjmp	.+30     	; 0x4374 <vfprintf+0x272>
    4356:	90 37       	cpi	r25, 0x70	; 112
    4358:	39 f0       	breq	.+14     	; 0x4368 <vfprintf+0x266>
    435a:	98 37       	cpi	r25, 0x78	; 120
    435c:	09 f0       	breq	.+2      	; 0x4360 <vfprintf+0x25e>
    435e:	a6 c0       	rjmp	.+332    	; 0x44ac <vfprintf+0x3aa>
    4360:	04 c0       	rjmp	.+8      	; 0x436a <vfprintf+0x268>
    4362:	28 e0       	ldi	r18, 0x08	; 8
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	0a c0       	rjmp	.+20     	; 0x437c <vfprintf+0x27a>
    4368:	10 61       	ori	r17, 0x10	; 16
    436a:	14 fd       	sbrc	r17, 4
    436c:	14 60       	ori	r17, 0x04	; 4
    436e:	20 e1       	ldi	r18, 0x10	; 16
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	04 c0       	rjmp	.+8      	; 0x437c <vfprintf+0x27a>
    4374:	14 fd       	sbrc	r17, 4
    4376:	16 60       	ori	r17, 0x06	; 6
    4378:	20 e1       	ldi	r18, 0x10	; 16
    437a:	32 e0       	ldi	r19, 0x02	; 2
    437c:	17 ff       	sbrs	r17, 7
    437e:	08 c0       	rjmp	.+16     	; 0x4390 <vfprintf+0x28e>
    4380:	f5 01       	movw	r30, r10
    4382:	60 81       	ld	r22, Z
    4384:	71 81       	ldd	r23, Z+1	; 0x01
    4386:	82 81       	ldd	r24, Z+2	; 0x02
    4388:	93 81       	ldd	r25, Z+3	; 0x03
    438a:	44 e0       	ldi	r20, 0x04	; 4
    438c:	50 e0       	ldi	r21, 0x00	; 0
    438e:	08 c0       	rjmp	.+16     	; 0x43a0 <vfprintf+0x29e>
    4390:	f5 01       	movw	r30, r10
    4392:	80 81       	ld	r24, Z
    4394:	91 81       	ldd	r25, Z+1	; 0x01
    4396:	bc 01       	movw	r22, r24
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	42 e0       	ldi	r20, 0x02	; 2
    439e:	50 e0       	ldi	r21, 0x00	; 0
    43a0:	a4 0e       	add	r10, r20
    43a2:	b5 1e       	adc	r11, r21
    43a4:	a1 01       	movw	r20, r2
    43a6:	0e 94 a0 22 	call	0x4540	; 0x4540 <__ultoa_invert>
    43aa:	d8 2e       	mov	r13, r24
    43ac:	d2 18       	sub	r13, r2
    43ae:	8f e7       	ldi	r24, 0x7F	; 127
    43b0:	f8 2e       	mov	r15, r24
    43b2:	f1 22       	and	r15, r17
    43b4:	f6 fe       	sbrs	r15, 6
    43b6:	0b c0       	rjmp	.+22     	; 0x43ce <vfprintf+0x2cc>
    43b8:	5e ef       	ldi	r21, 0xFE	; 254
    43ba:	f5 22       	and	r15, r21
    43bc:	d9 14       	cp	r13, r9
    43be:	38 f4       	brcc	.+14     	; 0x43ce <vfprintf+0x2cc>
    43c0:	f4 fe       	sbrs	r15, 4
    43c2:	07 c0       	rjmp	.+14     	; 0x43d2 <vfprintf+0x2d0>
    43c4:	f2 fc       	sbrc	r15, 2
    43c6:	05 c0       	rjmp	.+10     	; 0x43d2 <vfprintf+0x2d0>
    43c8:	8f ee       	ldi	r24, 0xEF	; 239
    43ca:	f8 22       	and	r15, r24
    43cc:	02 c0       	rjmp	.+4      	; 0x43d2 <vfprintf+0x2d0>
    43ce:	1d 2d       	mov	r17, r13
    43d0:	01 c0       	rjmp	.+2      	; 0x43d4 <vfprintf+0x2d2>
    43d2:	19 2d       	mov	r17, r9
    43d4:	f4 fe       	sbrs	r15, 4
    43d6:	0d c0       	rjmp	.+26     	; 0x43f2 <vfprintf+0x2f0>
    43d8:	fe 01       	movw	r30, r28
    43da:	ed 0d       	add	r30, r13
    43dc:	f1 1d       	adc	r31, r1
    43de:	80 81       	ld	r24, Z
    43e0:	80 33       	cpi	r24, 0x30	; 48
    43e2:	19 f4       	brne	.+6      	; 0x43ea <vfprintf+0x2e8>
    43e4:	99 ee       	ldi	r25, 0xE9	; 233
    43e6:	f9 22       	and	r15, r25
    43e8:	08 c0       	rjmp	.+16     	; 0x43fa <vfprintf+0x2f8>
    43ea:	1f 5f       	subi	r17, 0xFF	; 255
    43ec:	f2 fe       	sbrs	r15, 2
    43ee:	05 c0       	rjmp	.+10     	; 0x43fa <vfprintf+0x2f8>
    43f0:	03 c0       	rjmp	.+6      	; 0x43f8 <vfprintf+0x2f6>
    43f2:	8f 2d       	mov	r24, r15
    43f4:	86 78       	andi	r24, 0x86	; 134
    43f6:	09 f0       	breq	.+2      	; 0x43fa <vfprintf+0x2f8>
    43f8:	1f 5f       	subi	r17, 0xFF	; 255
    43fa:	0f 2d       	mov	r16, r15
    43fc:	f3 fc       	sbrc	r15, 3
    43fe:	14 c0       	rjmp	.+40     	; 0x4428 <vfprintf+0x326>
    4400:	f0 fe       	sbrs	r15, 0
    4402:	0f c0       	rjmp	.+30     	; 0x4422 <vfprintf+0x320>
    4404:	1e 15       	cp	r17, r14
    4406:	10 f0       	brcs	.+4      	; 0x440c <vfprintf+0x30a>
    4408:	9d 2c       	mov	r9, r13
    440a:	0b c0       	rjmp	.+22     	; 0x4422 <vfprintf+0x320>
    440c:	9d 2c       	mov	r9, r13
    440e:	9e 0c       	add	r9, r14
    4410:	91 1a       	sub	r9, r17
    4412:	1e 2d       	mov	r17, r14
    4414:	06 c0       	rjmp	.+12     	; 0x4422 <vfprintf+0x320>
    4416:	80 e2       	ldi	r24, 0x20	; 32
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	b3 01       	movw	r22, r6
    441c:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    4420:	1f 5f       	subi	r17, 0xFF	; 255
    4422:	1e 15       	cp	r17, r14
    4424:	c0 f3       	brcs	.-16     	; 0x4416 <vfprintf+0x314>
    4426:	04 c0       	rjmp	.+8      	; 0x4430 <vfprintf+0x32e>
    4428:	1e 15       	cp	r17, r14
    442a:	10 f4       	brcc	.+4      	; 0x4430 <vfprintf+0x32e>
    442c:	e1 1a       	sub	r14, r17
    442e:	01 c0       	rjmp	.+2      	; 0x4432 <vfprintf+0x330>
    4430:	ee 24       	eor	r14, r14
    4432:	04 ff       	sbrs	r16, 4
    4434:	0f c0       	rjmp	.+30     	; 0x4454 <vfprintf+0x352>
    4436:	80 e3       	ldi	r24, 0x30	; 48
    4438:	90 e0       	ldi	r25, 0x00	; 0
    443a:	b3 01       	movw	r22, r6
    443c:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    4440:	02 ff       	sbrs	r16, 2
    4442:	1d c0       	rjmp	.+58     	; 0x447e <vfprintf+0x37c>
    4444:	01 fd       	sbrc	r16, 1
    4446:	03 c0       	rjmp	.+6      	; 0x444e <vfprintf+0x34c>
    4448:	88 e7       	ldi	r24, 0x78	; 120
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	0e c0       	rjmp	.+28     	; 0x446a <vfprintf+0x368>
    444e:	88 e5       	ldi	r24, 0x58	; 88
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0b c0       	rjmp	.+22     	; 0x446a <vfprintf+0x368>
    4454:	80 2f       	mov	r24, r16
    4456:	86 78       	andi	r24, 0x86	; 134
    4458:	91 f0       	breq	.+36     	; 0x447e <vfprintf+0x37c>
    445a:	01 ff       	sbrs	r16, 1
    445c:	02 c0       	rjmp	.+4      	; 0x4462 <vfprintf+0x360>
    445e:	8b e2       	ldi	r24, 0x2B	; 43
    4460:	01 c0       	rjmp	.+2      	; 0x4464 <vfprintf+0x362>
    4462:	80 e2       	ldi	r24, 0x20	; 32
    4464:	f7 fc       	sbrc	r15, 7
    4466:	8d e2       	ldi	r24, 0x2D	; 45
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	b3 01       	movw	r22, r6
    446c:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    4470:	06 c0       	rjmp	.+12     	; 0x447e <vfprintf+0x37c>
    4472:	80 e3       	ldi	r24, 0x30	; 48
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	b3 01       	movw	r22, r6
    4478:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    447c:	9a 94       	dec	r9
    447e:	d9 14       	cp	r13, r9
    4480:	c0 f3       	brcs	.-16     	; 0x4472 <vfprintf+0x370>
    4482:	da 94       	dec	r13
    4484:	f1 01       	movw	r30, r2
    4486:	ed 0d       	add	r30, r13
    4488:	f1 1d       	adc	r31, r1
    448a:	80 81       	ld	r24, Z
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	b3 01       	movw	r22, r6
    4490:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    4494:	dd 20       	and	r13, r13
    4496:	a9 f7       	brne	.-22     	; 0x4482 <vfprintf+0x380>
    4498:	06 c0       	rjmp	.+12     	; 0x44a6 <vfprintf+0x3a4>
    449a:	80 e2       	ldi	r24, 0x20	; 32
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	b3 01       	movw	r22, r6
    44a0:	0e 94 74 22 	call	0x44e8	; 0x44e8 <fputc>
    44a4:	ea 94       	dec	r14
    44a6:	ee 20       	and	r14, r14
    44a8:	c1 f7       	brne	.-16     	; 0x449a <vfprintf+0x398>
    44aa:	43 ce       	rjmp	.-890    	; 0x4132 <vfprintf+0x30>
    44ac:	f3 01       	movw	r30, r6
    44ae:	66 81       	ldd	r22, Z+6	; 0x06
    44b0:	77 81       	ldd	r23, Z+7	; 0x07
    44b2:	cb 01       	movw	r24, r22
    44b4:	2b 96       	adiw	r28, 0x0b	; 11
    44b6:	e2 e1       	ldi	r30, 0x12	; 18
    44b8:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__epilogue_restores__>

000044bc <strnlen_P>:
    44bc:	fc 01       	movw	r30, r24
    44be:	05 90       	lpm	r0, Z+
    44c0:	61 50       	subi	r22, 0x01	; 1
    44c2:	70 40       	sbci	r23, 0x00	; 0
    44c4:	01 10       	cpse	r0, r1
    44c6:	d8 f7       	brcc	.-10     	; 0x44be <strnlen_P+0x2>
    44c8:	80 95       	com	r24
    44ca:	90 95       	com	r25
    44cc:	8e 0f       	add	r24, r30
    44ce:	9f 1f       	adc	r25, r31
    44d0:	08 95       	ret

000044d2 <strnlen>:
    44d2:	fc 01       	movw	r30, r24
    44d4:	61 50       	subi	r22, 0x01	; 1
    44d6:	70 40       	sbci	r23, 0x00	; 0
    44d8:	01 90       	ld	r0, Z+
    44da:	01 10       	cpse	r0, r1
    44dc:	d8 f7       	brcc	.-10     	; 0x44d4 <strnlen+0x2>
    44de:	80 95       	com	r24
    44e0:	90 95       	com	r25
    44e2:	8e 0f       	add	r24, r30
    44e4:	9f 1f       	adc	r25, r31
    44e6:	08 95       	ret

000044e8 <fputc>:
    44e8:	0f 93       	push	r16
    44ea:	1f 93       	push	r17
    44ec:	cf 93       	push	r28
    44ee:	df 93       	push	r29
    44f0:	8c 01       	movw	r16, r24
    44f2:	eb 01       	movw	r28, r22
    44f4:	8b 81       	ldd	r24, Y+3	; 0x03
    44f6:	81 ff       	sbrs	r24, 1
    44f8:	1b c0       	rjmp	.+54     	; 0x4530 <fputc+0x48>
    44fa:	82 ff       	sbrs	r24, 2
    44fc:	0d c0       	rjmp	.+26     	; 0x4518 <fputc+0x30>
    44fe:	2e 81       	ldd	r18, Y+6	; 0x06
    4500:	3f 81       	ldd	r19, Y+7	; 0x07
    4502:	8c 81       	ldd	r24, Y+4	; 0x04
    4504:	9d 81       	ldd	r25, Y+5	; 0x05
    4506:	28 17       	cp	r18, r24
    4508:	39 07       	cpc	r19, r25
    450a:	64 f4       	brge	.+24     	; 0x4524 <fputc+0x3c>
    450c:	e8 81       	ld	r30, Y
    450e:	f9 81       	ldd	r31, Y+1	; 0x01
    4510:	01 93       	st	Z+, r16
    4512:	f9 83       	std	Y+1, r31	; 0x01
    4514:	e8 83       	st	Y, r30
    4516:	06 c0       	rjmp	.+12     	; 0x4524 <fputc+0x3c>
    4518:	e8 85       	ldd	r30, Y+8	; 0x08
    451a:	f9 85       	ldd	r31, Y+9	; 0x09
    451c:	80 2f       	mov	r24, r16
    451e:	09 95       	icall
    4520:	89 2b       	or	r24, r25
    4522:	31 f4       	brne	.+12     	; 0x4530 <fputc+0x48>
    4524:	8e 81       	ldd	r24, Y+6	; 0x06
    4526:	9f 81       	ldd	r25, Y+7	; 0x07
    4528:	01 96       	adiw	r24, 0x01	; 1
    452a:	9f 83       	std	Y+7, r25	; 0x07
    452c:	8e 83       	std	Y+6, r24	; 0x06
    452e:	02 c0       	rjmp	.+4      	; 0x4534 <fputc+0x4c>
    4530:	0f ef       	ldi	r16, 0xFF	; 255
    4532:	1f ef       	ldi	r17, 0xFF	; 255
    4534:	c8 01       	movw	r24, r16
    4536:	df 91       	pop	r29
    4538:	cf 91       	pop	r28
    453a:	1f 91       	pop	r17
    453c:	0f 91       	pop	r16
    453e:	08 95       	ret

00004540 <__ultoa_invert>:
    4540:	fa 01       	movw	r30, r20
    4542:	aa 27       	eor	r26, r26
    4544:	28 30       	cpi	r18, 0x08	; 8
    4546:	51 f1       	breq	.+84     	; 0x459c <__ultoa_invert+0x5c>
    4548:	20 31       	cpi	r18, 0x10	; 16
    454a:	81 f1       	breq	.+96     	; 0x45ac <__ultoa_invert+0x6c>
    454c:	e8 94       	clt
    454e:	6f 93       	push	r22
    4550:	6e 7f       	andi	r22, 0xFE	; 254
    4552:	6e 5f       	subi	r22, 0xFE	; 254
    4554:	7f 4f       	sbci	r23, 0xFF	; 255
    4556:	8f 4f       	sbci	r24, 0xFF	; 255
    4558:	9f 4f       	sbci	r25, 0xFF	; 255
    455a:	af 4f       	sbci	r26, 0xFF	; 255
    455c:	b1 e0       	ldi	r27, 0x01	; 1
    455e:	3e d0       	rcall	.+124    	; 0x45dc <__ultoa_invert+0x9c>
    4560:	b4 e0       	ldi	r27, 0x04	; 4
    4562:	3c d0       	rcall	.+120    	; 0x45dc <__ultoa_invert+0x9c>
    4564:	67 0f       	add	r22, r23
    4566:	78 1f       	adc	r23, r24
    4568:	89 1f       	adc	r24, r25
    456a:	9a 1f       	adc	r25, r26
    456c:	a1 1d       	adc	r26, r1
    456e:	68 0f       	add	r22, r24
    4570:	79 1f       	adc	r23, r25
    4572:	8a 1f       	adc	r24, r26
    4574:	91 1d       	adc	r25, r1
    4576:	a1 1d       	adc	r26, r1
    4578:	6a 0f       	add	r22, r26
    457a:	71 1d       	adc	r23, r1
    457c:	81 1d       	adc	r24, r1
    457e:	91 1d       	adc	r25, r1
    4580:	a1 1d       	adc	r26, r1
    4582:	20 d0       	rcall	.+64     	; 0x45c4 <__ultoa_invert+0x84>
    4584:	09 f4       	brne	.+2      	; 0x4588 <__ultoa_invert+0x48>
    4586:	68 94       	set
    4588:	3f 91       	pop	r19
    458a:	2a e0       	ldi	r18, 0x0A	; 10
    458c:	26 9f       	mul	r18, r22
    458e:	11 24       	eor	r1, r1
    4590:	30 19       	sub	r19, r0
    4592:	30 5d       	subi	r19, 0xD0	; 208
    4594:	31 93       	st	Z+, r19
    4596:	de f6       	brtc	.-74     	; 0x454e <__ultoa_invert+0xe>
    4598:	cf 01       	movw	r24, r30
    459a:	08 95       	ret
    459c:	46 2f       	mov	r20, r22
    459e:	47 70       	andi	r20, 0x07	; 7
    45a0:	40 5d       	subi	r20, 0xD0	; 208
    45a2:	41 93       	st	Z+, r20
    45a4:	b3 e0       	ldi	r27, 0x03	; 3
    45a6:	0f d0       	rcall	.+30     	; 0x45c6 <__ultoa_invert+0x86>
    45a8:	c9 f7       	brne	.-14     	; 0x459c <__ultoa_invert+0x5c>
    45aa:	f6 cf       	rjmp	.-20     	; 0x4598 <__ultoa_invert+0x58>
    45ac:	46 2f       	mov	r20, r22
    45ae:	4f 70       	andi	r20, 0x0F	; 15
    45b0:	40 5d       	subi	r20, 0xD0	; 208
    45b2:	4a 33       	cpi	r20, 0x3A	; 58
    45b4:	18 f0       	brcs	.+6      	; 0x45bc <__ultoa_invert+0x7c>
    45b6:	49 5d       	subi	r20, 0xD9	; 217
    45b8:	31 fd       	sbrc	r19, 1
    45ba:	40 52       	subi	r20, 0x20	; 32
    45bc:	41 93       	st	Z+, r20
    45be:	02 d0       	rcall	.+4      	; 0x45c4 <__ultoa_invert+0x84>
    45c0:	a9 f7       	brne	.-22     	; 0x45ac <__ultoa_invert+0x6c>
    45c2:	ea cf       	rjmp	.-44     	; 0x4598 <__ultoa_invert+0x58>
    45c4:	b4 e0       	ldi	r27, 0x04	; 4
    45c6:	a6 95       	lsr	r26
    45c8:	97 95       	ror	r25
    45ca:	87 95       	ror	r24
    45cc:	77 95       	ror	r23
    45ce:	67 95       	ror	r22
    45d0:	ba 95       	dec	r27
    45d2:	c9 f7       	brne	.-14     	; 0x45c6 <__ultoa_invert+0x86>
    45d4:	00 97       	sbiw	r24, 0x00	; 0
    45d6:	61 05       	cpc	r22, r1
    45d8:	71 05       	cpc	r23, r1
    45da:	08 95       	ret
    45dc:	9b 01       	movw	r18, r22
    45de:	ac 01       	movw	r20, r24
    45e0:	0a 2e       	mov	r0, r26
    45e2:	06 94       	lsr	r0
    45e4:	57 95       	ror	r21
    45e6:	47 95       	ror	r20
    45e8:	37 95       	ror	r19
    45ea:	27 95       	ror	r18
    45ec:	ba 95       	dec	r27
    45ee:	c9 f7       	brne	.-14     	; 0x45e2 <__ultoa_invert+0xa2>
    45f0:	62 0f       	add	r22, r18
    45f2:	73 1f       	adc	r23, r19
    45f4:	84 1f       	adc	r24, r20
    45f6:	95 1f       	adc	r25, r21
    45f8:	a0 1d       	adc	r26, r0
    45fa:	08 95       	ret

000045fc <_exit>:
    45fc:	f8 94       	cli

000045fe <__stop_program>:
    45fe:	ff cf       	rjmp	.-2      	; 0x45fe <__stop_program>
