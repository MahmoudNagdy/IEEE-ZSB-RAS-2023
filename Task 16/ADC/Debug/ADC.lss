
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00003976  00003a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080007a  0080007a  00003a24  2**0
                  ALLOC
  3 .stab         00002f4c  00000000  00000000  00003a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ac4  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000086e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a32d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bfc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 19 	call	0x3210	; 0x3210 <main>
      8a:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_setPinDirection>:
#include "avr/io.h"

#include "../../LIB/BIT_MATH.h"
#include "Dio_Interface.h"
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <LCD_setPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <LCD_setPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <LCD_setPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <LCD_setPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <LCD_setPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <LCD_setPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <LCD_setPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <LCD_setPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <LCD_setPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <LCD_setPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <LCD_setPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <LCD_setPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <LCD_setPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <LCD_setPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == AVR_PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <LCD_setPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <LCD_setPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <LCD_setPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <LCD_setPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == AVR_PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <LCD_setPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <LCD_setPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <LCD_setPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <LCD_setPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == AVR_PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <LCD_setPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <LCD_setPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <LCD_setPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <LCD_setPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == AVR_PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <LCD_setPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <LCD_setPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <LCD_setPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <LCD_setPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <LCD_setPinValue+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <LCD_setPinValue+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <LCD_setPinValue+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <LCD_setPinValue+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <LCD_setPinValue+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <LCD_setPinValue+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <LCD_setPinValue+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <LCD_setPinValue+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <LCD_setPinValue+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <LCD_setPinValue+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <LCD_setPinValue+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <LCD_setPinValue+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <LCD_setPinValue+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <LCD_setPinValue+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <LCD_setPinValue+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <LCD_setPinValue+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <LCD_setPinValue+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <LCD_setPinValue+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <LCD_setPinValue+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <LCD_setPinValue+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <LCD_setPinValue+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <LCD_setPinValue+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <LCD_setPinValue+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <LCD_setPinValue+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <LCD_setPinValue+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <LCD_setPinValue+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <LCD_setPinValue+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <LCD_setPinValue+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <LCD_setPinValue+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <LCD_setPinValue+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <LCD_getPinValue+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <LCD_getPinValue+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <LCD_getPinValue+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <LCD_getPinValue+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <LCD_getPinValue+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <LCD_getPinValue+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <LCD_getPinValue+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <LCD_getPinValue+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <LCD_getPinValue+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <LCD_getPinValue+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <LCD_getPinValue+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <LCD_getPinValue+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <LCD_getPinValue+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <LCD_getPinValue+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <LCD_getPinValue+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <LCD_getPinValue+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <LCD_getPinValue+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <LCD_getPinValue+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <LCD_getPinValue+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <LCD_getPinValue+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <LCD_setPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <LCD_setPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <LCD_setPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <LCD_setPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <LCD_setPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <LCD_setPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <LCD_setPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <LCD_setPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <LCD_setPortValue+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <LCD_setPortValue+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <LCD_setPortValue+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <LCD_setPortValue+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <LCD_setPortValue+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <LCD_setPortValue+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <LCD_setPortValue+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <LCD_setPortValue+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <LCD_getPortValue+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <LCD_getPortValue+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <LCD_getPortValue+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <LCD_getPortValue+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <LCD_getPortValue+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <LCD_getPortValue+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <LCD_getPortValue+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <LCD_getPortValue+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    11ca:	ea e3       	ldi	r30, 0x3A	; 58
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    11d0:	e7 e3       	ldi	r30, 0x37	; 55
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    11d6:	e4 e3       	ldi	r30, 0x34	; 52
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    11de:	e1 e3       	ldi	r30, 0x31	; 49
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 e3       	ldi	r24, 0x30	; 48
    11e4:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    11ec:	e8 e3       	ldi	r30, 0x38	; 56
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    11f2:	e5 e3       	ldi	r30, 0x35	; 53
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	10 82       	st	Z, r1

}
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	2e 97       	sbiw	r28, 0x0e	; 14
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	8a 83       	std	Y+2, r24	; 0x02
    121a:	6b 83       	std	Y+3, r22	; 0x03
    121c:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	84 30       	cpi	r24, 0x04	; 4
    1226:	08 f0       	brcs	.+2      	; 0x122a <DIO_u8SetPinDirection+0x26>
    1228:	0c c1       	rjmp	.+536    	; 0x1442 <DIO_u8SetPinDirection+0x23e>
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	88 30       	cpi	r24, 0x08	; 8
    122e:	08 f0       	brcs	.+2      	; 0x1232 <DIO_u8SetPinDirection+0x2e>
    1230:	08 c1       	rjmp	.+528    	; 0x1442 <DIO_u8SetPinDirection+0x23e>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	21 f0       	breq	.+8      	; 0x1240 <DIO_u8SetPinDirection+0x3c>
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	88 23       	and	r24, r24
    123c:	09 f0       	breq	.+2      	; 0x1240 <DIO_u8SetPinDirection+0x3c>
    123e:	01 c1       	rjmp	.+514    	; 0x1442 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3e 87       	std	Y+14, r19	; 0x0e
    1248:	2d 87       	std	Y+13, r18	; 0x0d
    124a:	8d 85       	ldd	r24, Y+13	; 0x0d
    124c:	9e 85       	ldd	r25, Y+14	; 0x0e
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <DIO_u8SetPinDirection+0x52>
    1254:	4f c0       	rjmp	.+158    	; 0x12f4 <DIO_u8SetPinDirection+0xf0>
    1256:	2d 85       	ldd	r18, Y+13	; 0x0d
    1258:	3e 85       	ldd	r19, Y+14	; 0x0e
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	2c f4       	brge	.+10     	; 0x126a <DIO_u8SetPinDirection+0x66>
    1260:	8d 85       	ldd	r24, Y+13	; 0x0d
    1262:	9e 85       	ldd	r25, Y+14	; 0x0e
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	71 f0       	breq	.+28     	; 0x1284 <DIO_u8SetPinDirection+0x80>
    1268:	ed c0       	rjmp	.+474    	; 0x1444 <DIO_u8SetPinDirection+0x240>
    126a:	2d 85       	ldd	r18, Y+13	; 0x0d
    126c:	3e 85       	ldd	r19, Y+14	; 0x0e
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <DIO_u8SetPinDirection+0x72>
    1274:	77 c0       	rjmp	.+238    	; 0x1364 <DIO_u8SetPinDirection+0x160>
    1276:	8d 85       	ldd	r24, Y+13	; 0x0d
    1278:	9e 85       	ldd	r25, Y+14	; 0x0e
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <DIO_u8SetPinDirection+0x7e>
    1280:	a9 c0       	rjmp	.+338    	; 0x13d4 <DIO_u8SetPinDirection+0x1d0>
    1282:	e0 c0       	rjmp	.+448    	; 0x1444 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3c 87       	std	Y+12, r19	; 0x0c
    128c:	2b 87       	std	Y+11, r18	; 0x0b
    128e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1290:	9c 85       	ldd	r25, Y+12	; 0x0c
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	d1 f0       	breq	.+52     	; 0x12ca <DIO_u8SetPinDirection+0xc6>
    1296:	2b 85       	ldd	r18, Y+11	; 0x0b
    1298:	3c 85       	ldd	r19, Y+12	; 0x0c
    129a:	21 30       	cpi	r18, 0x01	; 1
    129c:	31 05       	cpc	r19, r1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <DIO_u8SetPinDirection+0x9e>
    12a0:	d1 c0       	rjmp	.+418    	; 0x1444 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    12a2:	aa e3       	ldi	r26, 0x3A	; 58
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ea e3       	ldi	r30, 0x3A	; 58
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8SetPinDirection+0xbc>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8SetPinDirection+0xb8>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	bd c0       	rjmp	.+378    	; 0x1444 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    12ca:	aa e3       	ldi	r26, 0x3A	; 58
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ea e3       	ldi	r30, 0x3A	; 58
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8SetPinDirection+0xe4>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8SetPinDirection+0xe0>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	a8 c0       	rjmp	.+336    	; 0x1444 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3a 87       	std	Y+10, r19	; 0x0a
    12fc:	29 87       	std	Y+9, r18	; 0x09
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	d1 f0       	breq	.+52     	; 0x133a <DIO_u8SetPinDirection+0x136>
    1306:	29 85       	ldd	r18, Y+9	; 0x09
    1308:	3a 85       	ldd	r19, Y+10	; 0x0a
    130a:	21 30       	cpi	r18, 0x01	; 1
    130c:	31 05       	cpc	r19, r1
    130e:	09 f0       	breq	.+2      	; 0x1312 <DIO_u8SetPinDirection+0x10e>
    1310:	99 c0       	rjmp	.+306    	; 0x1444 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1312:	a7 e3       	ldi	r26, 0x37	; 55
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e7 e3       	ldi	r30, 0x37	; 55
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_u8SetPinDirection+0x12c>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_u8SetPinDirection+0x128>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	85 c0       	rjmp	.+266    	; 0x1444 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    133a:	a7 e3       	ldi	r26, 0x37	; 55
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e7 e3       	ldi	r30, 0x37	; 55
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_u8SetPinDirection+0x154>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_u8SetPinDirection+0x150>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	70 c0       	rjmp	.+224    	; 0x1444 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	38 87       	std	Y+8, r19	; 0x08
    136c:	2f 83       	std	Y+7, r18	; 0x07
    136e:	8f 81       	ldd	r24, Y+7	; 0x07
    1370:	98 85       	ldd	r25, Y+8	; 0x08
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	d1 f0       	breq	.+52     	; 0x13aa <DIO_u8SetPinDirection+0x1a6>
    1376:	2f 81       	ldd	r18, Y+7	; 0x07
    1378:	38 85       	ldd	r19, Y+8	; 0x08
    137a:	21 30       	cpi	r18, 0x01	; 1
    137c:	31 05       	cpc	r19, r1
    137e:	09 f0       	breq	.+2      	; 0x1382 <DIO_u8SetPinDirection+0x17e>
    1380:	61 c0       	rjmp	.+194    	; 0x1444 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1382:	a4 e3       	ldi	r26, 0x34	; 52
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e4 e3       	ldi	r30, 0x34	; 52
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_u8SetPinDirection+0x19c>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_u8SetPinDirection+0x198>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	4d c0       	rjmp	.+154    	; 0x1444 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    13aa:	a4 e3       	ldi	r26, 0x34	; 52
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e4 e3       	ldi	r30, 0x34	; 52
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8SetPinDirection+0x1c4>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_u8SetPinDirection+0x1c0>
    13cc:	80 95       	com	r24
    13ce:	84 23       	and	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	38 c0       	rjmp	.+112    	; 0x1444 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3e 83       	std	Y+6, r19	; 0x06
    13dc:	2d 83       	std	Y+5, r18	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	c9 f0       	breq	.+50     	; 0x1418 <DIO_u8SetPinDirection+0x214>
    13e6:	2d 81       	ldd	r18, Y+5	; 0x05
    13e8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ea:	21 30       	cpi	r18, 0x01	; 1
    13ec:	31 05       	cpc	r19, r1
    13ee:	51 f5       	brne	.+84     	; 0x1444 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    13f0:	a1 e3       	ldi	r26, 0x31	; 49
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e1 e3       	ldi	r30, 0x31	; 49
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_u8SetPinDirection+0x20a>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_u8SetPinDirection+0x206>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1418:	a1 e3       	ldi	r26, 0x31	; 49
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e1 e3       	ldi	r30, 0x31	; 49
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_u8SetPinDirection+0x232>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_u8SetPinDirection+0x22e>
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1442:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1444:	89 81       	ldd	r24, Y+1	; 0x01
}
    1446:	2e 96       	adiw	r28, 0x0e	; 14
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	2f 97       	sbiw	r28, 0x0f	; 15
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	8b 83       	std	Y+3, r24	; 0x03
    146e:	6c 83       	std	Y+4, r22	; 0x04
    1470:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	08 f0       	brcs	.+2      	; 0x147e <DIO_u8SetPinValue+0x26>
    147c:	13 c1       	rjmp	.+550    	; 0x16a4 <DIO_u8SetPinValue+0x24c>
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	88 30       	cpi	r24, 0x08	; 8
    1482:	08 f0       	brcs	.+2      	; 0x1486 <DIO_u8SetPinValue+0x2e>
    1484:	0f c1       	rjmp	.+542    	; 0x16a4 <DIO_u8SetPinValue+0x24c>
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	88 23       	and	r24, r24
    148a:	21 f0       	breq	.+8      	; 0x1494 <DIO_u8SetPinValue+0x3c>
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <DIO_u8SetPinValue+0x3c>
    1492:	08 c1       	rjmp	.+528    	; 0x16a4 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3f 87       	std	Y+15, r19	; 0x0f
    149c:	2e 87       	std	Y+14, r18	; 0x0e
    149e:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <DIO_u8SetPinValue+0x52>
    14a8:	50 c0       	rjmp	.+160    	; 0x154a <DIO_u8SetPinValue+0xf2>
    14aa:	2e 85       	ldd	r18, Y+14	; 0x0e
    14ac:	3f 85       	ldd	r19, Y+15	; 0x0f
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	2c f4       	brge	.+10     	; 0x14be <DIO_u8SetPinValue+0x66>
    14b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    14b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	71 f0       	breq	.+28     	; 0x14d8 <DIO_u8SetPinValue+0x80>
    14bc:	f4 c0       	rjmp	.+488    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
    14be:	2e 85       	ldd	r18, Y+14	; 0x0e
    14c0:	3f 85       	ldd	r19, Y+15	; 0x0f
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <DIO_u8SetPinValue+0x72>
    14c8:	79 c0       	rjmp	.+242    	; 0x15bc <DIO_u8SetPinValue+0x164>
    14ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    14cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <DIO_u8SetPinValue+0x7e>
    14d4:	ad c0       	rjmp	.+346    	; 0x1630 <DIO_u8SetPinValue+0x1d8>
    14d6:	e7 c0       	rjmp	.+462    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	3d 87       	std	Y+13, r19	; 0x0d
    14e0:	2c 87       	std	Y+12, r18	; 0x0c
    14e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    14e4:	9d 85       	ldd	r25, Y+13	; 0x0d
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	c9 f0       	breq	.+50     	; 0x151c <DIO_u8SetPinValue+0xc4>
    14ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    14ee:	21 30       	cpi	r18, 0x01	; 1
    14f0:	31 05       	cpc	r19, r1
    14f2:	49 f5       	brne	.+82     	; 0x1546 <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    14f4:	ab e3       	ldi	r26, 0x3B	; 59
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	eb e3       	ldi	r30, 0x3B	; 59
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_u8SetPinValue+0xba>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_u8SetPinValue+0xb6>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	c5 c0       	rjmp	.+394    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    151c:	ab e3       	ldi	r26, 0x3B	; 59
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	eb e3       	ldi	r30, 0x3B	; 59
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8SetPinValue+0xe2>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8SetPinValue+0xde>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	b0 c0       	rjmp	.+352    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1546:	1a 82       	std	Y+2, r1	; 0x02
    1548:	ae c0       	rjmp	.+348    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3b 87       	std	Y+11, r19	; 0x0b
    1552:	2a 87       	std	Y+10, r18	; 0x0a
    1554:	8a 85       	ldd	r24, Y+10	; 0x0a
    1556:	9b 85       	ldd	r25, Y+11	; 0x0b
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	c9 f0       	breq	.+50     	; 0x158e <DIO_u8SetPinValue+0x136>
    155c:	2a 85       	ldd	r18, Y+10	; 0x0a
    155e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1560:	21 30       	cpi	r18, 0x01	; 1
    1562:	31 05       	cpc	r19, r1
    1564:	49 f5       	brne	.+82     	; 0x15b8 <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1566:	a8 e3       	ldi	r26, 0x38	; 56
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 e3       	ldi	r30, 0x38	; 56
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_u8SetPinValue+0x12c>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_u8SetPinValue+0x128>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	8c c0       	rjmp	.+280    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    158e:	a8 e3       	ldi	r26, 0x38	; 56
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e3       	ldi	r30, 0x38	; 56
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_u8SetPinValue+0x154>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_u8SetPinValue+0x150>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	77 c0       	rjmp	.+238    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    15b8:	1a 82       	std	Y+2, r1	; 0x02
    15ba:	75 c0       	rjmp	.+234    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	39 87       	std	Y+9, r19	; 0x09
    15c4:	28 87       	std	Y+8, r18	; 0x08
    15c6:	88 85       	ldd	r24, Y+8	; 0x08
    15c8:	99 85       	ldd	r25, Y+9	; 0x09
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	31 f0       	breq	.+12     	; 0x15da <DIO_u8SetPinValue+0x182>
    15ce:	28 85       	ldd	r18, Y+8	; 0x08
    15d0:	39 85       	ldd	r19, Y+9	; 0x09
    15d2:	21 30       	cpi	r18, 0x01	; 1
    15d4:	31 05       	cpc	r19, r1
    15d6:	b1 f0       	breq	.+44     	; 0x1604 <DIO_u8SetPinValue+0x1ac>
    15d8:	29 c0       	rjmp	.+82     	; 0x162c <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    15da:	a5 e3       	ldi	r26, 0x35	; 53
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e3       	ldi	r30, 0x35	; 53
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <DIO_u8SetPinValue+0x1a0>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <DIO_u8SetPinValue+0x19c>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	51 c0       	rjmp	.+162    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1604:	a5 e3       	ldi	r26, 0x35	; 53
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e5 e3       	ldi	r30, 0x35	; 53
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_u8SetPinValue+0x1ca>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_u8SetPinValue+0x1c6>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	3d c0       	rjmp	.+122    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    162c:	1a 82       	std	Y+2, r1	; 0x02
    162e:	3b c0       	rjmp	.+118    	; 0x16a6 <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	3f 83       	std	Y+7, r19	; 0x07
    1638:	2e 83       	std	Y+6, r18	; 0x06
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	9f 81       	ldd	r25, Y+7	; 0x07
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	31 f0       	breq	.+12     	; 0x164e <DIO_u8SetPinValue+0x1f6>
    1642:	2e 81       	ldd	r18, Y+6	; 0x06
    1644:	3f 81       	ldd	r19, Y+7	; 0x07
    1646:	21 30       	cpi	r18, 0x01	; 1
    1648:	31 05       	cpc	r19, r1
    164a:	b1 f0       	breq	.+44     	; 0x1678 <DIO_u8SetPinValue+0x220>
    164c:	29 c0       	rjmp	.+82     	; 0x16a0 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    164e:	a5 e3       	ldi	r26, 0x35	; 53
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e3       	ldi	r30, 0x35	; 53
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8c 81       	ldd	r24, Y+4	; 0x04
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <DIO_u8SetPinValue+0x214>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <DIO_u8SetPinValue+0x210>
    1670:	80 95       	com	r24
    1672:	84 23       	and	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	17 c0       	rjmp	.+46     	; 0x16a6 <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1678:	a2 e3       	ldi	r26, 0x32	; 50
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e2 e3       	ldi	r30, 0x32	; 50
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <DIO_u8SetPinValue+0x23e>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <DIO_u8SetPinValue+0x23a>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    16a0:	1a 82       	std	Y+2, r1	; 0x02
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    16a4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16a8:	2f 96       	adiw	r28, 0x0f	; 15
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	28 97       	sbiw	r28, 0x08	; 8
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	8b 83       	std	Y+3, r24	; 0x03
    16d0:	6c 83       	std	Y+4, r22	; 0x04
    16d2:	5e 83       	std	Y+6, r21	; 0x06
    16d4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	84 30       	cpi	r24, 0x04	; 4
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <DIO_u8GetPinValue+0x28>
    16e0:	9f c0       	rjmp	.+318    	; 0x1820 <DIO_u8GetPinValue+0x166>
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	88 30       	cpi	r24, 0x08	; 8
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <DIO_u8GetPinValue+0x30>
    16e8:	9b c0       	rjmp	.+310    	; 0x1820 <DIO_u8GetPinValue+0x166>
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <DIO_u8GetPinValue+0x3a>
    16f2:	96 c0       	rjmp	.+300    	; 0x1820 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	38 87       	std	Y+8, r19	; 0x08
    16fc:	2f 83       	std	Y+7, r18	; 0x07
    16fe:	4f 81       	ldd	r20, Y+7	; 0x07
    1700:	58 85       	ldd	r21, Y+8	; 0x08
    1702:	41 30       	cpi	r20, 0x01	; 1
    1704:	51 05       	cpc	r21, r1
    1706:	a9 f1       	breq	.+106    	; 0x1772 <DIO_u8GetPinValue+0xb8>
    1708:	8f 81       	ldd	r24, Y+7	; 0x07
    170a:	98 85       	ldd	r25, Y+8	; 0x08
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	91 05       	cpc	r25, r1
    1710:	34 f4       	brge	.+12     	; 0x171e <DIO_u8GetPinValue+0x64>
    1712:	2f 81       	ldd	r18, Y+7	; 0x07
    1714:	38 85       	ldd	r19, Y+8	; 0x08
    1716:	21 15       	cp	r18, r1
    1718:	31 05       	cpc	r19, r1
    171a:	71 f0       	breq	.+28     	; 0x1738 <DIO_u8GetPinValue+0x7e>
    171c:	82 c0       	rjmp	.+260    	; 0x1822 <DIO_u8GetPinValue+0x168>
    171e:	4f 81       	ldd	r20, Y+7	; 0x07
    1720:	58 85       	ldd	r21, Y+8	; 0x08
    1722:	42 30       	cpi	r20, 0x02	; 2
    1724:	51 05       	cpc	r21, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <DIO_u8GetPinValue+0x70>
    1728:	41 c0       	rjmp	.+130    	; 0x17ac <DIO_u8GetPinValue+0xf2>
    172a:	8f 81       	ldd	r24, Y+7	; 0x07
    172c:	98 85       	ldd	r25, Y+8	; 0x08
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	91 05       	cpc	r25, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <DIO_u8GetPinValue+0x7c>
    1734:	58 c0       	rjmp	.+176    	; 0x17e6 <DIO_u8GetPinValue+0x12c>
    1736:	75 c0       	rjmp	.+234    	; 0x1822 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1738:	e9 e3       	ldi	r30, 0x39	; 57
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_u8GetPinValue+0x96>
    174c:	55 95       	asr	r21
    174e:	47 95       	ror	r20
    1750:	8a 95       	dec	r24
    1752:	e2 f7       	brpl	.-8      	; 0x174c <DIO_u8GetPinValue+0x92>
    1754:	ca 01       	movw	r24, r20
    1756:	81 70       	andi	r24, 0x01	; 1
    1758:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 23       	and	r24, r24
    175e:	21 f4       	brne	.+8      	; 0x1768 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1760:	ed 81       	ldd	r30, Y+5	; 0x05
    1762:	fe 81       	ldd	r31, Y+6	; 0x06
    1764:	10 82       	st	Z, r1
    1766:	5d c0       	rjmp	.+186    	; 0x1822 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1768:	ed 81       	ldd	r30, Y+5	; 0x05
    176a:	fe 81       	ldd	r31, Y+6	; 0x06
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 83       	st	Z, r24
    1770:	58 c0       	rjmp	.+176    	; 0x1822 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1772:	e6 e3       	ldi	r30, 0x36	; 54
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a9 01       	movw	r20, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_u8GetPinValue+0xd0>
    1786:	55 95       	asr	r21
    1788:	47 95       	ror	r20
    178a:	8a 95       	dec	r24
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_u8GetPinValue+0xcc>
    178e:	ca 01       	movw	r24, r20
    1790:	81 70       	andi	r24, 0x01	; 1
    1792:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	88 23       	and	r24, r24
    1798:	21 f4       	brne	.+8      	; 0x17a2 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    179a:	ed 81       	ldd	r30, Y+5	; 0x05
    179c:	fe 81       	ldd	r31, Y+6	; 0x06
    179e:	10 82       	st	Z, r1
    17a0:	40 c0       	rjmp	.+128    	; 0x1822 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    17a2:	ed 81       	ldd	r30, Y+5	; 0x05
    17a4:	fe 81       	ldd	r31, Y+6	; 0x06
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	80 83       	st	Z, r24
    17aa:	3b c0       	rjmp	.+118    	; 0x1822 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    17ac:	e3 e3       	ldi	r30, 0x33	; 51
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a9 01       	movw	r20, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_u8GetPinValue+0x10a>
    17c0:	55 95       	asr	r21
    17c2:	47 95       	ror	r20
    17c4:	8a 95       	dec	r24
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_u8GetPinValue+0x106>
    17c8:	ca 01       	movw	r24, r20
    17ca:	81 70       	andi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	88 23       	and	r24, r24
    17d2:	21 f4       	brne	.+8      	; 0x17dc <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    17d4:	ed 81       	ldd	r30, Y+5	; 0x05
    17d6:	fe 81       	ldd	r31, Y+6	; 0x06
    17d8:	10 82       	st	Z, r1
    17da:	23 c0       	rjmp	.+70     	; 0x1822 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    17dc:	ed 81       	ldd	r30, Y+5	; 0x05
    17de:	fe 81       	ldd	r31, Y+6	; 0x06
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	80 83       	st	Z, r24
    17e4:	1e c0       	rjmp	.+60     	; 0x1822 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    17e6:	e0 e3       	ldi	r30, 0x30	; 48
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a9 01       	movw	r20, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_u8GetPinValue+0x144>
    17fa:	55 95       	asr	r21
    17fc:	47 95       	ror	r20
    17fe:	8a 95       	dec	r24
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_u8GetPinValue+0x140>
    1802:	ca 01       	movw	r24, r20
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	88 23       	and	r24, r24
    180c:	21 f4       	brne	.+8      	; 0x1816 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    180e:	ed 81       	ldd	r30, Y+5	; 0x05
    1810:	fe 81       	ldd	r31, Y+6	; 0x06
    1812:	10 82       	st	Z, r1
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1816:	ed 81       	ldd	r30, Y+5	; 0x05
    1818:	fe 81       	ldd	r31, Y+6	; 0x06
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	80 83       	st	Z, r24
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1820:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1824:	28 96       	adiw	r28, 0x08	; 8
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	2d 97       	sbiw	r28, 0x0d	; 13
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3c 87       	std	Y+12, r19	; 0x0c
    1856:	2b 87       	std	Y+11, r18	; 0x0b
    1858:	8b 85       	ldd	r24, Y+11	; 0x0b
    185a:	9c 85       	ldd	r25, Y+12	; 0x0c
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	71 f1       	breq	.+92     	; 0x18be <DIO_u8SetPortDirection+0x88>
    1862:	2b 85       	ldd	r18, Y+11	; 0x0b
    1864:	3c 85       	ldd	r19, Y+12	; 0x0c
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <DIO_u8SetPortDirection+0x40>
    186c:	8b 85       	ldd	r24, Y+11	; 0x0b
    186e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f0       	breq	.+26     	; 0x188e <DIO_u8SetPortDirection+0x58>
    1874:	6b c0       	rjmp	.+214    	; 0x194c <DIO_u8SetPortDirection+0x116>
    1876:	2b 85       	ldd	r18, Y+11	; 0x0b
    1878:	3c 85       	ldd	r19, Y+12	; 0x0c
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	b9 f1       	breq	.+110    	; 0x18ee <DIO_u8SetPortDirection+0xb8>
    1880:	8b 85       	ldd	r24, Y+11	; 0x0b
    1882:	9c 85       	ldd	r25, Y+12	; 0x0c
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <DIO_u8SetPortDirection+0x56>
    188a:	49 c0       	rjmp	.+146    	; 0x191e <DIO_u8SetPortDirection+0xe8>
    188c:	5f c0       	rjmp	.+190    	; 0x194c <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	3a 87       	std	Y+10, r19	; 0x0a
    1896:	29 87       	std	Y+9, r18	; 0x09
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	9a 85       	ldd	r25, Y+10	; 0x0a
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	31 f0       	breq	.+12     	; 0x18ac <DIO_u8SetPortDirection+0x76>
    18a0:	29 85       	ldd	r18, Y+9	; 0x09
    18a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    18a4:	21 30       	cpi	r18, 0x01	; 1
    18a6:	31 05       	cpc	r19, r1
    18a8:	29 f0       	breq	.+10     	; 0x18b4 <DIO_u8SetPortDirection+0x7e>
    18aa:	50 c0       	rjmp	.+160    	; 0x194c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    18ac:	ea e3       	ldi	r30, 0x3A	; 58
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	10 82       	st	Z, r1
    18b2:	4c c0       	rjmp	.+152    	; 0x194c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    18b4:	ea e3       	ldi	r30, 0x3A	; 58
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	80 83       	st	Z, r24
    18bc:	47 c0       	rjmp	.+142    	; 0x194c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	38 87       	std	Y+8, r19	; 0x08
    18c6:	2f 83       	std	Y+7, r18	; 0x07
    18c8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ca:	98 85       	ldd	r25, Y+8	; 0x08
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	31 f0       	breq	.+12     	; 0x18dc <DIO_u8SetPortDirection+0xa6>
    18d0:	2f 81       	ldd	r18, Y+7	; 0x07
    18d2:	38 85       	ldd	r19, Y+8	; 0x08
    18d4:	21 30       	cpi	r18, 0x01	; 1
    18d6:	31 05       	cpc	r19, r1
    18d8:	29 f0       	breq	.+10     	; 0x18e4 <DIO_u8SetPortDirection+0xae>
    18da:	38 c0       	rjmp	.+112    	; 0x194c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    18dc:	e7 e3       	ldi	r30, 0x37	; 55
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	10 82       	st	Z, r1
    18e2:	34 c0       	rjmp	.+104    	; 0x194c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    18e4:	e7 e3       	ldi	r30, 0x37	; 55
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	80 83       	st	Z, r24
    18ec:	2f c0       	rjmp	.+94     	; 0x194c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3e 83       	std	Y+6, r19	; 0x06
    18f6:	2d 83       	std	Y+5, r18	; 0x05
    18f8:	8d 81       	ldd	r24, Y+5	; 0x05
    18fa:	9e 81       	ldd	r25, Y+6	; 0x06
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	31 f0       	breq	.+12     	; 0x190c <DIO_u8SetPortDirection+0xd6>
    1900:	2d 81       	ldd	r18, Y+5	; 0x05
    1902:	3e 81       	ldd	r19, Y+6	; 0x06
    1904:	21 30       	cpi	r18, 0x01	; 1
    1906:	31 05       	cpc	r19, r1
    1908:	29 f0       	breq	.+10     	; 0x1914 <DIO_u8SetPortDirection+0xde>
    190a:	20 c0       	rjmp	.+64     	; 0x194c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    190c:	e4 e3       	ldi	r30, 0x34	; 52
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	10 82       	st	Z, r1
    1912:	1c c0       	rjmp	.+56     	; 0x194c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    1914:	e4 e3       	ldi	r30, 0x34	; 52
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	80 83       	st	Z, r24
    191c:	17 c0       	rjmp	.+46     	; 0x194c <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	3c 83       	std	Y+4, r19	; 0x04
    1926:	2b 83       	std	Y+3, r18	; 0x03
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	31 f0       	breq	.+12     	; 0x193c <DIO_u8SetPortDirection+0x106>
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	21 30       	cpi	r18, 0x01	; 1
    1936:	31 05       	cpc	r19, r1
    1938:	29 f0       	breq	.+10     	; 0x1944 <DIO_u8SetPortDirection+0x10e>
    193a:	08 c0       	rjmp	.+16     	; 0x194c <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    193c:	e1 e3       	ldi	r30, 0x31	; 49
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	10 82       	st	Z, r1
    1942:	04 c0       	rjmp	.+8      	; 0x194c <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    1944:	e1 e3       	ldi	r30, 0x31	; 49
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	8f ef       	ldi	r24, 0xFF	; 255
    194a:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    194c:	2d 96       	adiw	r28, 0x0d	; 13
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	2d 97       	sbiw	r28, 0x0d	; 13
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	8a 83       	std	Y+2, r24	; 0x02
    1974:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	84 30       	cpi	r24, 0x04	; 4
    197e:	08 f0       	brcs	.+2      	; 0x1982 <DIO_u8SetPortValue+0x24>
    1980:	80 c0       	rjmp	.+256    	; 0x1a82 <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3d 87       	std	Y+13, r19	; 0x0d
    198a:	2c 87       	std	Y+12, r18	; 0x0c
    198c:	8c 85       	ldd	r24, Y+12	; 0x0c
    198e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	91 05       	cpc	r25, r1
    1994:	71 f1       	breq	.+92     	; 0x19f2 <DIO_u8SetPortValue+0x94>
    1996:	2c 85       	ldd	r18, Y+12	; 0x0c
    1998:	3d 85       	ldd	r19, Y+13	; 0x0d
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	2c f4       	brge	.+10     	; 0x19aa <DIO_u8SetPortValue+0x4c>
    19a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    19a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	69 f0       	breq	.+26     	; 0x19c2 <DIO_u8SetPortValue+0x64>
    19a8:	6d c0       	rjmp	.+218    	; 0x1a84 <DIO_u8SetPortValue+0x126>
    19aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    19ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	b9 f1       	breq	.+110    	; 0x1a22 <DIO_u8SetPortValue+0xc4>
    19b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    19b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	91 05       	cpc	r25, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <DIO_u8SetPortValue+0x62>
    19be:	49 c0       	rjmp	.+146    	; 0x1a52 <DIO_u8SetPortValue+0xf4>
    19c0:	61 c0       	rjmp	.+194    	; 0x1a84 <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3b 87       	std	Y+11, r19	; 0x0b
    19ca:	2a 87       	std	Y+10, r18	; 0x0a
    19cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	31 f0       	breq	.+12     	; 0x19e0 <DIO_u8SetPortValue+0x82>
    19d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    19d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    19d8:	21 30       	cpi	r18, 0x01	; 1
    19da:	31 05       	cpc	r19, r1
    19dc:	29 f0       	breq	.+10     	; 0x19e8 <DIO_u8SetPortValue+0x8a>
    19de:	52 c0       	rjmp	.+164    	; 0x1a84 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    19e0:	eb e3       	ldi	r30, 0x3B	; 59
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	10 82       	st	Z, r1
    19e6:	4e c0       	rjmp	.+156    	; 0x1a84 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    19e8:	eb e3       	ldi	r30, 0x3B	; 59
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	80 83       	st	Z, r24
    19f0:	49 c0       	rjmp	.+146    	; 0x1a84 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	39 87       	std	Y+9, r19	; 0x09
    19fa:	28 87       	std	Y+8, r18	; 0x08
    19fc:	88 85       	ldd	r24, Y+8	; 0x08
    19fe:	99 85       	ldd	r25, Y+9	; 0x09
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	31 f0       	breq	.+12     	; 0x1a10 <DIO_u8SetPortValue+0xb2>
    1a04:	28 85       	ldd	r18, Y+8	; 0x08
    1a06:	39 85       	ldd	r19, Y+9	; 0x09
    1a08:	21 30       	cpi	r18, 0x01	; 1
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <DIO_u8SetPortValue+0xba>
    1a0e:	3a c0       	rjmp	.+116    	; 0x1a84 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    1a10:	e8 e3       	ldi	r30, 0x38	; 56
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	10 82       	st	Z, r1
    1a16:	36 c0       	rjmp	.+108    	; 0x1a84 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    1a18:	e8 e3       	ldi	r30, 0x38	; 56
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
    1a1e:	80 83       	st	Z, r24
    1a20:	31 c0       	rjmp	.+98     	; 0x1a84 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3f 83       	std	Y+7, r19	; 0x07
    1a2a:	2e 83       	std	Y+6, r18	; 0x06
    1a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	31 f0       	breq	.+12     	; 0x1a40 <DIO_u8SetPortValue+0xe2>
    1a34:	2e 81       	ldd	r18, Y+6	; 0x06
    1a36:	3f 81       	ldd	r19, Y+7	; 0x07
    1a38:	21 30       	cpi	r18, 0x01	; 1
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	29 f0       	breq	.+10     	; 0x1a48 <DIO_u8SetPortValue+0xea>
    1a3e:	22 c0       	rjmp	.+68     	; 0x1a84 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    1a40:	e5 e3       	ldi	r30, 0x35	; 53
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	10 82       	st	Z, r1
    1a46:	1e c0       	rjmp	.+60     	; 0x1a84 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    1a48:	e5 e3       	ldi	r30, 0x35	; 53
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	80 83       	st	Z, r24
    1a50:	19 c0       	rjmp	.+50     	; 0x1a84 <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	3d 83       	std	Y+5, r19	; 0x05
    1a5a:	2c 83       	std	Y+4, r18	; 0x04
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	31 f0       	breq	.+12     	; 0x1a70 <DIO_u8SetPortValue+0x112>
    1a64:	2c 81       	ldd	r18, Y+4	; 0x04
    1a66:	3d 81       	ldd	r19, Y+5	; 0x05
    1a68:	21 30       	cpi	r18, 0x01	; 1
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <DIO_u8SetPortValue+0x11a>
    1a6e:	0a c0       	rjmp	.+20     	; 0x1a84 <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    1a70:	e2 e3       	ldi	r30, 0x32	; 50
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	10 82       	st	Z, r1
    1a76:	06 c0       	rjmp	.+12     	; 0x1a84 <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    1a78:	e2 e3       	ldi	r30, 0x32	; 50
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	80 83       	st	Z, r24
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1a82:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a86:	2d 96       	adiw	r28, 0x0d	; 13
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <DIO_u8GetPortValue+0x6>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <DIO_u8GetPortValue+0x8>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <DIO_u8GetPortValue+0xa>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
    1aa8:	7c 83       	std	Y+4, r23	; 0x04
    1aaa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	84 30       	cpi	r24, 0x04	; 4
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <DIO_u8GetPortValue+0x20>
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <DIO_u8GetPortValue+0x9e>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	d9 f1       	breq	.+118    	; 0x1b36 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3e 83       	std	Y+6, r19	; 0x06
    1ac8:	2d 83       	std	Y+5, r18	; 0x05
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	e1 f0       	breq	.+56     	; 0x1b0c <DIO_u8GetPortValue+0x74>
    1ad4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <DIO_u8GetPortValue+0x50>
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <DIO_u8GetPortValue+0x66>
    1ae6:	28 c0       	rjmp	.+80     	; 0x1b38 <DIO_u8GetPortValue+0xa0>
    1ae8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aea:	3e 81       	ldd	r19, Y+6	; 0x06
    1aec:	22 30       	cpi	r18, 0x02	; 2
    1aee:	31 05       	cpc	r19, r1
    1af0:	a1 f0       	breq	.+40     	; 0x1b1a <DIO_u8GetPortValue+0x82>
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	b1 f0       	breq	.+44     	; 0x1b28 <DIO_u8GetPortValue+0x90>
    1afc:	1d c0       	rjmp	.+58     	; 0x1b38 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    1afe:	e9 e3       	ldi	r30, 0x39	; 57
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	eb 81       	ldd	r30, Y+3	; 0x03
    1b06:	fc 81       	ldd	r31, Y+4	; 0x04
    1b08:	80 83       	st	Z, r24
    1b0a:	16 c0       	rjmp	.+44     	; 0x1b38 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    1b0c:	e6 e3       	ldi	r30, 0x36	; 54
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	eb 81       	ldd	r30, Y+3	; 0x03
    1b14:	fc 81       	ldd	r31, Y+4	; 0x04
    1b16:	80 83       	st	Z, r24
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1b1a:	e3 e3       	ldi	r30, 0x33	; 51
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	eb 81       	ldd	r30, Y+3	; 0x03
    1b22:	fc 81       	ldd	r31, Y+4	; 0x04
    1b24:	80 83       	st	Z, r24
    1b26:	08 c0       	rjmp	.+16     	; 0x1b38 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1b28:	e0 e3       	ldi	r30, 0x30	; 48
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b30:	fc 81       	ldd	r31, Y+4	; 0x04
    1b32:	80 83       	st	Z, r24
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1b36:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3a:	26 96       	adiw	r28, 0x06	; 6
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    1b4c:	8f 92       	push	r8
    1b4e:	af 92       	push	r10
    1b50:	cf 92       	push	r12
    1b52:	ef 92       	push	r14
    1b54:	0f 93       	push	r16
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	2c 97       	sbiw	r28, 0x0c	; 12
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	6a 83       	std	Y+2, r22	; 0x02
    1b6e:	4b 83       	std	Y+3, r20	; 0x03
    1b70:	2c 83       	std	Y+4, r18	; 0x04
    1b72:	0d 83       	std	Y+5, r16	; 0x05
    1b74:	ee 82       	std	Y+6, r14	; 0x06
    1b76:	cf 82       	std	Y+7, r12	; 0x07
    1b78:	a8 86       	std	Y+8, r10	; 0x08
    1b7a:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3b 87       	std	Y+11, r19	; 0x0b
    1b84:	2a 87       	std	Y+10, r18	; 0x0a
    1b86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <DIO_u8SetValueToAllPins+0x46>
    1b90:	a8 c0       	rjmp	.+336    	; 0x1ce2 <DIO_u8SetValueToAllPins+0x196>
    1b92:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b94:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b96:	22 30       	cpi	r18, 0x02	; 2
    1b98:	31 05       	cpc	r19, r1
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <DIO_u8SetValueToAllPins+0x5a>
    1b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	71 f0       	breq	.+28     	; 0x1bc0 <DIO_u8SetValueToAllPins+0x74>
    1ba4:	50 c2       	rjmp	.+1184   	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
    1ba6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ba8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <DIO_u8SetValueToAllPins+0x66>
    1bb0:	29 c1       	rjmp	.+594    	; 0x1e04 <DIO_u8SetValueToAllPins+0x2b8>
    1bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb6:	83 30       	cpi	r24, 0x03	; 3
    1bb8:	91 05       	cpc	r25, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <DIO_u8SetValueToAllPins+0x72>
    1bbc:	b4 c1       	rjmp	.+872    	; 0x1f26 <DIO_u8SetValueToAllPins+0x3da>
    1bbe:	43 c2       	rjmp	.+1158   	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	41 f4       	brne	.+16     	; 0x1bd6 <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    1bc6:	ab e3       	ldi	r26, 0x3B	; 59
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	eb e3       	ldi	r30, 0x3B	; 59
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	81 60       	ori	r24, 0x01	; 1
    1bd2:	8c 93       	st	X, r24
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    1bd6:	ab e3       	ldi	r26, 0x3B	; 59
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	eb e3       	ldi	r30, 0x3B	; 59
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8e 7f       	andi	r24, 0xFE	; 254
    1be2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	41 f4       	brne	.+16     	; 0x1bfa <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    1bea:	ab e3       	ldi	r26, 0x3B	; 59
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	82 60       	ori	r24, 0x02	; 2
    1bf6:	8c 93       	st	X, r24
    1bf8:	07 c0       	rjmp	.+14     	; 0x1c08 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8d 7f       	andi	r24, 0xFD	; 253
    1c06:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	41 f4       	brne	.+16     	; 0x1c1e <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1c0e:	ab e3       	ldi	r26, 0x3B	; 59
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	eb e3       	ldi	r30, 0x3B	; 59
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	84 60       	ori	r24, 0x04	; 4
    1c1a:	8c 93       	st	X, r24
    1c1c:	07 c0       	rjmp	.+14     	; 0x1c2c <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    1c1e:	ab e3       	ldi	r26, 0x3B	; 59
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	eb e3       	ldi	r30, 0x3B	; 59
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	8b 7f       	andi	r24, 0xFB	; 251
    1c2a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	81 30       	cpi	r24, 0x01	; 1
    1c30:	41 f4       	brne	.+16     	; 0x1c42 <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    1c32:	ab e3       	ldi	r26, 0x3B	; 59
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	eb e3       	ldi	r30, 0x3B	; 59
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	88 60       	ori	r24, 0x08	; 8
    1c3e:	8c 93       	st	X, r24
    1c40:	07 c0       	rjmp	.+14     	; 0x1c50 <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    1c42:	ab e3       	ldi	r26, 0x3B	; 59
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	eb e3       	ldi	r30, 0x3B	; 59
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	87 7f       	andi	r24, 0xF7	; 247
    1c4e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1c50:	8e 81       	ldd	r24, Y+6	; 0x06
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	41 f4       	brne	.+16     	; 0x1c66 <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    1c56:	ab e3       	ldi	r26, 0x3B	; 59
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	eb e3       	ldi	r30, 0x3B	; 59
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 61       	ori	r24, 0x10	; 16
    1c62:	8c 93       	st	X, r24
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    1c66:	ab e3       	ldi	r26, 0x3B	; 59
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	eb e3       	ldi	r30, 0x3B	; 59
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8f 7e       	andi	r24, 0xEF	; 239
    1c72:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1c74:	8f 81       	ldd	r24, Y+7	; 0x07
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	41 f4       	brne	.+16     	; 0x1c8a <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1c7a:	ab e3       	ldi	r26, 0x3B	; 59
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	eb e3       	ldi	r30, 0x3B	; 59
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	8c 93       	st	X, r24
    1c88:	07 c0       	rjmp	.+14     	; 0x1c98 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    1c8a:	ab e3       	ldi	r26, 0x3B	; 59
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	eb e3       	ldi	r30, 0x3B	; 59
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 7d       	andi	r24, 0xDF	; 223
    1c96:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1c98:	88 85       	ldd	r24, Y+8	; 0x08
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	41 f4       	brne	.+16     	; 0x1cae <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    1c9e:	ab e3       	ldi	r26, 0x3B	; 59
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	eb e3       	ldi	r30, 0x3B	; 59
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	80 64       	ori	r24, 0x40	; 64
    1caa:	8c 93       	st	X, r24
    1cac:	07 c0       	rjmp	.+14     	; 0x1cbc <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    1cae:	ab e3       	ldi	r26, 0x3B	; 59
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	eb e3       	ldi	r30, 0x3B	; 59
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8f 7b       	andi	r24, 0xBF	; 191
    1cba:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	41 f4       	brne	.+16     	; 0x1cd2 <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    1cc2:	ab e3       	ldi	r26, 0x3B	; 59
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	eb e3       	ldi	r30, 0x3B	; 59
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 68       	ori	r24, 0x80	; 128
    1cce:	8c 93       	st	X, r24
    1cd0:	ba c1       	rjmp	.+884    	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    1cd2:	ab e3       	ldi	r26, 0x3B	; 59
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	eb e3       	ldi	r30, 0x3B	; 59
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	8f 77       	andi	r24, 0x7F	; 127
    1cde:	8c 93       	st	X, r24
    1ce0:	b2 c1       	rjmp	.+868    	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	41 f4       	brne	.+16     	; 0x1cf8 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    1ce8:	a8 e3       	ldi	r26, 0x38	; 56
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e8 e3       	ldi	r30, 0x38	; 56
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	81 60       	ori	r24, 0x01	; 1
    1cf4:	8c 93       	st	X, r24
    1cf6:	07 c0       	rjmp	.+14     	; 0x1d06 <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    1cf8:	a8 e3       	ldi	r26, 0x38	; 56
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e8 e3       	ldi	r30, 0x38	; 56
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8e 7f       	andi	r24, 0xFE	; 254
    1d04:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	41 f4       	brne	.+16     	; 0x1d1c <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1d0c:	a8 e3       	ldi	r26, 0x38	; 56
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e8 e3       	ldi	r30, 0x38	; 56
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	82 60       	ori	r24, 0x02	; 2
    1d18:	8c 93       	st	X, r24
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    1d1c:	a8 e3       	ldi	r26, 0x38	; 56
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e8 e3       	ldi	r30, 0x38	; 56
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8d 7f       	andi	r24, 0xFD	; 253
    1d28:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	41 f4       	brne	.+16     	; 0x1d40 <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    1d30:	a8 e3       	ldi	r26, 0x38	; 56
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	84 60       	ori	r24, 0x04	; 4
    1d3c:	8c 93       	st	X, r24
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    1d40:	a8 e3       	ldi	r26, 0x38	; 56
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e8 e3       	ldi	r30, 0x38	; 56
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8b 7f       	andi	r24, 0xFB	; 251
    1d4c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	41 f4       	brne	.+16     	; 0x1d64 <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    1d54:	a8 e3       	ldi	r26, 0x38	; 56
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 60       	ori	r24, 0x08	; 8
    1d60:	8c 93       	st	X, r24
    1d62:	07 c0       	rjmp	.+14     	; 0x1d72 <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    1d64:	a8 e3       	ldi	r26, 0x38	; 56
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e8 e3       	ldi	r30, 0x38	; 56
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	87 7f       	andi	r24, 0xF7	; 247
    1d70:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1d72:	8e 81       	ldd	r24, Y+6	; 0x06
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	41 f4       	brne	.+16     	; 0x1d88 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    1d78:	a8 e3       	ldi	r26, 0x38	; 56
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e8 e3       	ldi	r30, 0x38	; 56
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	80 61       	ori	r24, 0x10	; 16
    1d84:	8c 93       	st	X, r24
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    1d88:	a8 e3       	ldi	r26, 0x38	; 56
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e8 e3       	ldi	r30, 0x38	; 56
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	8f 7e       	andi	r24, 0xEF	; 239
    1d94:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1d96:	8f 81       	ldd	r24, Y+7	; 0x07
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	41 f4       	brne	.+16     	; 0x1dac <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    1d9c:	a8 e3       	ldi	r26, 0x38	; 56
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e8 e3       	ldi	r30, 0x38	; 56
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 62       	ori	r24, 0x20	; 32
    1da8:	8c 93       	st	X, r24
    1daa:	07 c0       	rjmp	.+14     	; 0x1dba <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    1dac:	a8 e3       	ldi	r26, 0x38	; 56
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e8 e3       	ldi	r30, 0x38	; 56
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 7d       	andi	r24, 0xDF	; 223
    1db8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1dba:	88 85       	ldd	r24, Y+8	; 0x08
    1dbc:	81 30       	cpi	r24, 0x01	; 1
    1dbe:	41 f4       	brne	.+16     	; 0x1dd0 <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    1dc0:	a8 e3       	ldi	r26, 0x38	; 56
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e8 e3       	ldi	r30, 0x38	; 56
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 64       	ori	r24, 0x40	; 64
    1dcc:	8c 93       	st	X, r24
    1dce:	07 c0       	rjmp	.+14     	; 0x1dde <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    1dd0:	a8 e3       	ldi	r26, 0x38	; 56
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e8 e3       	ldi	r30, 0x38	; 56
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	8f 7b       	andi	r24, 0xBF	; 191
    1ddc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	41 f4       	brne	.+16     	; 0x1df4 <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    1de4:	a8 e3       	ldi	r26, 0x38	; 56
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e8 e3       	ldi	r30, 0x38	; 56
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 68       	ori	r24, 0x80	; 128
    1df0:	8c 93       	st	X, r24
    1df2:	29 c1       	rjmp	.+594    	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    1df4:	a8 e3       	ldi	r26, 0x38	; 56
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e8 e3       	ldi	r30, 0x38	; 56
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8f 77       	andi	r24, 0x7F	; 127
    1e00:	8c 93       	st	X, r24
    1e02:	21 c1       	rjmp	.+578    	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	41 f4       	brne	.+16     	; 0x1e1a <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    1e0a:	a5 e3       	ldi	r26, 0x35	; 53
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e5 e3       	ldi	r30, 0x35	; 53
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	81 60       	ori	r24, 0x01	; 1
    1e16:	8c 93       	st	X, r24
    1e18:	07 c0       	rjmp	.+14     	; 0x1e28 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    1e1a:	a5 e3       	ldi	r26, 0x35	; 53
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e5 e3       	ldi	r30, 0x35	; 53
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8e 7f       	andi	r24, 0xFE	; 254
    1e26:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	41 f4       	brne	.+16     	; 0x1e3e <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    1e2e:	a5 e3       	ldi	r26, 0x35	; 53
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e5 e3       	ldi	r30, 0x35	; 53
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	82 60       	ori	r24, 0x02	; 2
    1e3a:	8c 93       	st	X, r24
    1e3c:	07 c0       	rjmp	.+14     	; 0x1e4c <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    1e3e:	a5 e3       	ldi	r26, 0x35	; 53
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e5 e3       	ldi	r30, 0x35	; 53
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8d 7f       	andi	r24, 0xFD	; 253
    1e4a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	41 f4       	brne	.+16     	; 0x1e62 <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    1e52:	a5 e3       	ldi	r26, 0x35	; 53
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e5 e3       	ldi	r30, 0x35	; 53
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	84 60       	ori	r24, 0x04	; 4
    1e5e:	8c 93       	st	X, r24
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    1e62:	a5 e3       	ldi	r26, 0x35	; 53
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e3       	ldi	r30, 0x35	; 53
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8b 7f       	andi	r24, 0xFB	; 251
    1e6e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	41 f4       	brne	.+16     	; 0x1e86 <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    1e76:	a5 e3       	ldi	r26, 0x35	; 53
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e3       	ldi	r30, 0x35	; 53
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 60       	ori	r24, 0x08	; 8
    1e82:	8c 93       	st	X, r24
    1e84:	07 c0       	rjmp	.+14     	; 0x1e94 <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    1e86:	a5 e3       	ldi	r26, 0x35	; 53
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e5 e3       	ldi	r30, 0x35	; 53
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	87 7f       	andi	r24, 0xF7	; 247
    1e92:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1e94:	8e 81       	ldd	r24, Y+6	; 0x06
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	41 f4       	brne	.+16     	; 0x1eaa <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    1e9a:	a5 e3       	ldi	r26, 0x35	; 53
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e5 e3       	ldi	r30, 0x35	; 53
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 61       	ori	r24, 0x10	; 16
    1ea6:	8c 93       	st	X, r24
    1ea8:	07 c0       	rjmp	.+14     	; 0x1eb8 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    1eaa:	a5 e3       	ldi	r26, 0x35	; 53
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e5 e3       	ldi	r30, 0x35	; 53
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8f 7e       	andi	r24, 0xEF	; 239
    1eb6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	41 f4       	brne	.+16     	; 0x1ece <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    1ebe:	a5 e3       	ldi	r26, 0x35	; 53
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e5 e3       	ldi	r30, 0x35	; 53
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 62       	ori	r24, 0x20	; 32
    1eca:	8c 93       	st	X, r24
    1ecc:	07 c0       	rjmp	.+14     	; 0x1edc <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    1ece:	a5 e3       	ldi	r26, 0x35	; 53
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	e5 e3       	ldi	r30, 0x35	; 53
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	8f 7d       	andi	r24, 0xDF	; 223
    1eda:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1edc:	88 85       	ldd	r24, Y+8	; 0x08
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	41 f4       	brne	.+16     	; 0x1ef2 <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    1ee2:	a5 e3       	ldi	r26, 0x35	; 53
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e5 e3       	ldi	r30, 0x35	; 53
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 64       	ori	r24, 0x40	; 64
    1eee:	8c 93       	st	X, r24
    1ef0:	07 c0       	rjmp	.+14     	; 0x1f00 <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    1ef2:	a5 e3       	ldi	r26, 0x35	; 53
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e5 e3       	ldi	r30, 0x35	; 53
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8f 7b       	andi	r24, 0xBF	; 191
    1efe:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	41 f4       	brne	.+16     	; 0x1f16 <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    1f06:	a5 e3       	ldi	r26, 0x35	; 53
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e5 e3       	ldi	r30, 0x35	; 53
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	80 68       	ori	r24, 0x80	; 128
    1f12:	8c 93       	st	X, r24
    1f14:	98 c0       	rjmp	.+304    	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    1f16:	a5 e3       	ldi	r26, 0x35	; 53
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e5 e3       	ldi	r30, 0x35	; 53
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	8f 77       	andi	r24, 0x7F	; 127
    1f22:	8c 93       	st	X, r24
    1f24:	90 c0       	rjmp	.+288    	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	41 f4       	brne	.+16     	; 0x1f3c <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    1f2c:	a2 e3       	ldi	r26, 0x32	; 50
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e2 e3       	ldi	r30, 0x32	; 50
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	81 60       	ori	r24, 0x01	; 1
    1f38:	8c 93       	st	X, r24
    1f3a:	07 c0       	rjmp	.+14     	; 0x1f4a <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    1f3c:	a2 e3       	ldi	r26, 0x32	; 50
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e2 e3       	ldi	r30, 0x32	; 50
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	8e 7f       	andi	r24, 0xFE	; 254
    1f48:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	41 f4       	brne	.+16     	; 0x1f60 <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    1f50:	a2 e3       	ldi	r26, 0x32	; 50
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e2 e3       	ldi	r30, 0x32	; 50
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 60       	ori	r24, 0x02	; 2
    1f5c:	8c 93       	st	X, r24
    1f5e:	07 c0       	rjmp	.+14     	; 0x1f6e <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    1f60:	a2 e3       	ldi	r26, 0x32	; 50
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e2 e3       	ldi	r30, 0x32	; 50
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	8d 7f       	andi	r24, 0xFD	; 253
    1f6c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    1f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	41 f4       	brne	.+16     	; 0x1f84 <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    1f74:	a2 e3       	ldi	r26, 0x32	; 50
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e2 e3       	ldi	r30, 0x32	; 50
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	84 60       	ori	r24, 0x04	; 4
    1f80:	8c 93       	st	X, r24
    1f82:	07 c0       	rjmp	.+14     	; 0x1f92 <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    1f84:	a2 e3       	ldi	r26, 0x32	; 50
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e2 e3       	ldi	r30, 0x32	; 50
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8b 7f       	andi	r24, 0xFB	; 251
    1f90:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	41 f4       	brne	.+16     	; 0x1fa8 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    1f98:	a2 e3       	ldi	r26, 0x32	; 50
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e2 e3       	ldi	r30, 0x32	; 50
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	88 60       	ori	r24, 0x08	; 8
    1fa4:	8c 93       	st	X, r24
    1fa6:	07 c0       	rjmp	.+14     	; 0x1fb6 <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    1fa8:	a2 e3       	ldi	r26, 0x32	; 50
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e2 e3       	ldi	r30, 0x32	; 50
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	87 7f       	andi	r24, 0xF7	; 247
    1fb4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    1fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	41 f4       	brne	.+16     	; 0x1fcc <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    1fbc:	a2 e3       	ldi	r26, 0x32	; 50
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e2 e3       	ldi	r30, 0x32	; 50
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 61       	ori	r24, 0x10	; 16
    1fc8:	8c 93       	st	X, r24
    1fca:	07 c0       	rjmp	.+14     	; 0x1fda <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    1fcc:	a2 e3       	ldi	r26, 0x32	; 50
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e2 e3       	ldi	r30, 0x32	; 50
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8f 7e       	andi	r24, 0xEF	; 239
    1fd8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    1fda:	8f 81       	ldd	r24, Y+7	; 0x07
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	41 f4       	brne	.+16     	; 0x1ff0 <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    1fe0:	a2 e3       	ldi	r26, 0x32	; 50
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e2 e3       	ldi	r30, 0x32	; 50
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 62       	ori	r24, 0x20	; 32
    1fec:	8c 93       	st	X, r24
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    1ff0:	a2 e3       	ldi	r26, 0x32	; 50
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e2 e3       	ldi	r30, 0x32	; 50
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 7d       	andi	r24, 0xDF	; 223
    1ffc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    1ffe:	88 85       	ldd	r24, Y+8	; 0x08
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	41 f4       	brne	.+16     	; 0x2014 <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2004:	a2 e3       	ldi	r26, 0x32	; 50
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e2 e3       	ldi	r30, 0x32	; 50
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	80 64       	ori	r24, 0x40	; 64
    2010:	8c 93       	st	X, r24
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2014:	a2 e3       	ldi	r26, 0x32	; 50
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e2 e3       	ldi	r30, 0x32	; 50
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	8f 7b       	andi	r24, 0xBF	; 191
    2020:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	41 f4       	brne	.+16     	; 0x2038 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2028:	a2 e3       	ldi	r26, 0x32	; 50
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e2 e3       	ldi	r30, 0x32	; 50
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 68       	ori	r24, 0x80	; 128
    2034:	8c 93       	st	X, r24
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2038:	a2 e3       	ldi	r26, 0x32	; 50
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e2 e3       	ldi	r30, 0x32	; 50
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8f 77       	andi	r24, 0x7F	; 127
    2044:	8c 93       	st	X, r24
		}
		break;
	}
}
    2046:	2c 96       	adiw	r28, 0x0c	; 12
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	0f 91       	pop	r16
    2058:	ef 90       	pop	r14
    205a:	cf 90       	pop	r12
    205c:	af 90       	pop	r10
    205e:	8f 90       	pop	r8
    2060:	08 95       	ret

00002062 <LCD_sendCommand>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/LCD_DIO/Dio_Interface.h"

#define LDR_PIN 0 // Define the LDR input pin

void LCD_sendCommand(u8 command){
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	e9 97       	sbiw	r28, 0x39	; 57
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	64 e0       	ldi	r22, 0x04	; 4
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <LCD_setPinValue>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e8       	ldi	r26, 0x80	; 128
    2088:	bf e3       	ldi	r27, 0x3F	; 63
    208a:	8d ab       	std	Y+53, r24	; 0x35
    208c:	9e ab       	std	Y+54, r25	; 0x36
    208e:	af ab       	std	Y+55, r26	; 0x37
    2090:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	6d a9       	ldd	r22, Y+53	; 0x35
    2094:	7e a9       	ldd	r23, Y+54	; 0x36
    2096:	8f a9       	ldd	r24, Y+55	; 0x37
    2098:	98 ad       	ldd	r25, Y+56	; 0x38
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	55 e4       	ldi	r21, 0x45	; 69
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	89 ab       	std	Y+49, r24	; 0x31
    20ac:	9a ab       	std	Y+50, r25	; 0x32
    20ae:	ab ab       	std	Y+51, r26	; 0x33
    20b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20b2:	69 a9       	ldd	r22, Y+49	; 0x31
    20b4:	7a a9       	ldd	r23, Y+50	; 0x32
    20b6:	8b a9       	ldd	r24, Y+51	; 0x33
    20b8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_sendCommand+0x72>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	98 ab       	std	Y+48, r25	; 0x30
    20d0:	8f a7       	std	Y+47, r24	; 0x2f
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    20d4:	69 a9       	ldd	r22, Y+49	; 0x31
    20d6:	7a a9       	ldd	r23, Y+50	; 0x32
    20d8:	8b a9       	ldd	r24, Y+51	; 0x33
    20da:	9c a9       	ldd	r25, Y+52	; 0x34
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	6d a9       	ldd	r22, Y+53	; 0x35
    20ee:	7e a9       	ldd	r23, Y+54	; 0x36
    20f0:	8f a9       	ldd	r24, Y+55	; 0x37
    20f2:	98 ad       	ldd	r25, Y+56	; 0x38
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	98 ab       	std	Y+48, r25	; 0x30
    2112:	8f a7       	std	Y+47, r24	; 0x2f
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_sendCommand+0xd2>
    2116:	80 e9       	ldi	r24, 0x90	; 144
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	9e a7       	std	Y+46, r25	; 0x2e
    211c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    211e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2120:	9e a5       	ldd	r25, Y+46	; 0x2e
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_sendCommand+0xc0>
    2126:	9e a7       	std	Y+46, r25	; 0x2e
    2128:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8f a5       	ldd	r24, Y+47	; 0x2f
    212c:	98 a9       	ldd	r25, Y+48	; 0x30
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	98 ab       	std	Y+48, r25	; 0x30
    2132:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8f a5       	ldd	r24, Y+47	; 0x2f
    2136:	98 a9       	ldd	r25, Y+48	; 0x30
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <LCD_sendCommand+0xb4>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	69 a9       	ldd	r22, Y+49	; 0x31
    2140:	7a a9       	ldd	r23, Y+50	; 0x32
    2142:	8b a9       	ldd	r24, Y+51	; 0x33
    2144:	9c a9       	ldd	r25, Y+52	; 0x34
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	98 ab       	std	Y+48, r25	; 0x30
    2150:	8f a7       	std	Y+47, r24	; 0x2f
    2152:	8f a5       	ldd	r24, Y+47	; 0x2f
    2154:	98 a9       	ldd	r25, Y+48	; 0x30
    2156:	9c a7       	std	Y+44, r25	; 0x2c
    2158:	8b a7       	std	Y+43, r24	; 0x2b
    215a:	8b a5       	ldd	r24, Y+43	; 0x2b
    215c:	9c a5       	ldd	r25, Y+44	; 0x2c
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_sendCommand+0xfc>
    2162:	9c a7       	std	Y+44, r25	; 0x2c
    2164:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2166:	83 e0       	ldi	r24, 0x03	; 3
    2168:	65 e0       	ldi	r22, 0x05	; 5
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <LCD_setPinValue>
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	a0 e8       	ldi	r26, 0x80	; 128
    2176:	bf e3       	ldi	r27, 0x3F	; 63
    2178:	8f a3       	std	Y+39, r24	; 0x27
    217a:	98 a7       	std	Y+40, r25	; 0x28
    217c:	a9 a7       	std	Y+41, r26	; 0x29
    217e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	6f a1       	ldd	r22, Y+39	; 0x27
    2182:	78 a5       	ldd	r23, Y+40	; 0x28
    2184:	89 a5       	ldd	r24, Y+41	; 0x29
    2186:	9a a5       	ldd	r25, Y+42	; 0x2a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a e7       	ldi	r20, 0x7A	; 122
    218e:	55 e4       	ldi	r21, 0x45	; 69
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8b a3       	std	Y+35, r24	; 0x23
    219a:	9c a3       	std	Y+36, r25	; 0x24
    219c:	ad a3       	std	Y+37, r26	; 0x25
    219e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21a0:	6b a1       	ldd	r22, Y+35	; 0x23
    21a2:	7c a1       	ldd	r23, Y+36	; 0x24
    21a4:	8d a1       	ldd	r24, Y+37	; 0x25
    21a6:	9e a1       	ldd	r25, Y+38	; 0x26
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <LCD_sendCommand+0x160>
		__ticks = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9a a3       	std	Y+34, r25	; 0x22
    21be:	89 a3       	std	Y+33, r24	; 0x21
    21c0:	3f c0       	rjmp	.+126    	; 0x2240 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    21c2:	6b a1       	ldd	r22, Y+35	; 0x23
    21c4:	7c a1       	ldd	r23, Y+36	; 0x24
    21c6:	8d a1       	ldd	r24, Y+37	; 0x25
    21c8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	57 e4       	ldi	r21, 0x47	; 71
    21d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d6:	18 16       	cp	r1, r24
    21d8:	4c f5       	brge	.+82     	; 0x222c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21da:	6f a1       	ldd	r22, Y+39	; 0x27
    21dc:	78 a5       	ldd	r23, Y+40	; 0x28
    21de:	89 a5       	ldd	r24, Y+41	; 0x29
    21e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9a a3       	std	Y+34, r25	; 0x22
    2200:	89 a3       	std	Y+33, r24	; 0x21
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <LCD_sendCommand+0x1c0>
    2204:	80 e9       	ldi	r24, 0x90	; 144
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	98 a3       	std	Y+32, r25	; 0x20
    220a:	8f 8f       	std	Y+31, r24	; 0x1f
    220c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    220e:	98 a1       	ldd	r25, Y+32	; 0x20
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <LCD_sendCommand+0x1ae>
    2214:	98 a3       	std	Y+32, r25	; 0x20
    2216:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	89 a1       	ldd	r24, Y+33	; 0x21
    221a:	9a a1       	ldd	r25, Y+34	; 0x22
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9a a3       	std	Y+34, r25	; 0x22
    2220:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2222:	89 a1       	ldd	r24, Y+33	; 0x21
    2224:	9a a1       	ldd	r25, Y+34	; 0x22
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	69 f7       	brne	.-38     	; 0x2204 <LCD_sendCommand+0x1a2>
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222c:	6b a1       	ldd	r22, Y+35	; 0x23
    222e:	7c a1       	ldd	r23, Y+36	; 0x24
    2230:	8d a1       	ldd	r24, Y+37	; 0x25
    2232:	9e a1       	ldd	r25, Y+38	; 0x26
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9a a3       	std	Y+34, r25	; 0x22
    223e:	89 a3       	std	Y+33, r24	; 0x21
    2240:	89 a1       	ldd	r24, Y+33	; 0x21
    2242:	9a a1       	ldd	r25, Y+34	; 0x22
    2244:	9e 8f       	std	Y+30, r25	; 0x1e
    2246:	8d 8f       	std	Y+29, r24	; 0x1d
    2248:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_sendCommand+0x1ea>
    2250:	9e 8f       	std	Y+30, r25	; 0x1e
    2252:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	69 ad       	ldd	r22, Y+57	; 0x39
    2258:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_setPortValue>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	89 8f       	std	Y+25, r24	; 0x19
    2266:	9a 8f       	std	Y+26, r25	; 0x1a
    2268:	ab 8f       	std	Y+27, r26	; 0x1b
    226a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	69 8d       	ldd	r22, Y+25	; 0x19
    226e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	55 e4       	ldi	r21, 0x45	; 69
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8d 8b       	std	Y+21, r24	; 0x15
    2286:	9e 8b       	std	Y+22, r25	; 0x16
    2288:	af 8b       	std	Y+23, r26	; 0x17
    228a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    228c:	6d 89       	ldd	r22, Y+21	; 0x15
    228e:	7e 89       	ldd	r23, Y+22	; 0x16
    2290:	8f 89       	ldd	r24, Y+23	; 0x17
    2292:	98 8d       	ldd	r25, Y+24	; 0x18
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_sendCommand+0x24c>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    22ae:	6d 89       	ldd	r22, Y+21	; 0x15
    22b0:	7e 89       	ldd	r23, Y+22	; 0x16
    22b2:	8f 89       	ldd	r24, Y+23	; 0x17
    22b4:	98 8d       	ldd	r25, Y+24	; 0x18
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	69 8d       	ldd	r22, Y+25	; 0x19
    22c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9c 8b       	std	Y+20, r25	; 0x14
    22ec:	8b 8b       	std	Y+19, r24	; 0x13
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_sendCommand+0x2ac>
    22f0:	80 e9       	ldi	r24, 0x90	; 144
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	9a 8b       	std	Y+18, r25	; 0x12
    22f6:	89 8b       	std	Y+17, r24	; 0x11
    22f8:	89 89       	ldd	r24, Y+17	; 0x11
    22fa:	9a 89       	ldd	r25, Y+18	; 0x12
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_sendCommand+0x29a>
    2300:	9a 8b       	std	Y+18, r25	; 0x12
    2302:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_sendCommand+0x28e>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	6d 89       	ldd	r22, Y+21	; 0x15
    231a:	7e 89       	ldd	r23, Y+22	; 0x16
    231c:	8f 89       	ldd	r24, Y+23	; 0x17
    231e:	98 8d       	ldd	r25, Y+24	; 0x18
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9c 8b       	std	Y+20, r25	; 0x14
    232a:	8b 8b       	std	Y+19, r24	; 0x13
    232c:	8b 89       	ldd	r24, Y+19	; 0x13
    232e:	9c 89       	ldd	r25, Y+20	; 0x14
    2330:	98 8b       	std	Y+16, r25	; 0x10
    2332:	8f 87       	std	Y+15, r24	; 0x0f
    2334:	8f 85       	ldd	r24, Y+15	; 0x0f
    2336:	98 89       	ldd	r25, Y+16	; 0x10
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_sendCommand+0x2d6>
    233c:	98 8b       	std	Y+16, r25	; 0x10
    233e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	65 e0       	ldi	r22, 0x05	; 5
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	0e 94 8e 06 	call	0xd1c	; 0xd1c <LCD_setPinValue>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	8b 87       	std	Y+11, r24	; 0x0b
    2354:	9c 87       	std	Y+12, r25	; 0x0c
    2356:	ad 87       	std	Y+13, r26	; 0x0d
    2358:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2360:	9e 85       	ldd	r25, Y+14	; 0x0e
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	55 e4       	ldi	r21, 0x45	; 69
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8f 83       	std	Y+7, r24	; 0x07
    2374:	98 87       	std	Y+8, r25	; 0x08
    2376:	a9 87       	std	Y+9, r26	; 0x09
    2378:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237a:	6f 81       	ldd	r22, Y+7	; 0x07
    237c:	78 85       	ldd	r23, Y+8	; 0x08
    237e:	89 85       	ldd	r24, Y+9	; 0x09
    2380:	9a 85       	ldd	r25, Y+10	; 0x0a
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_sendCommand+0x33a>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    239c:	6f 81       	ldd	r22, Y+7	; 0x07
    239e:	78 85       	ldd	r23, Y+8	; 0x08
    23a0:	89 85       	ldd	r24, Y+9	; 0x09
    23a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_sendCommand+0x39a>
    23de:	80 e9       	ldi	r24, 0x90	; 144
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	9c 83       	std	Y+4, r25	; 0x04
    23e4:	8b 83       	std	Y+3, r24	; 0x03
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_sendCommand+0x388>
    23ee:	9c 83       	std	Y+4, r25	; 0x04
    23f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_sendCommand+0x37c>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	6f 81       	ldd	r22, Y+7	; 0x07
    2408:	78 85       	ldd	r23, Y+8	; 0x08
    240a:	89 85       	ldd	r24, Y+9	; 0x09
    240c:	9a 85       	ldd	r25, Y+10	; 0x0a
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_sendCommand+0x3c4>
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    242e:	e9 96       	adiw	r28, 0x39	; 57
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_display_32bit>:

void LCD_display_32bit(u32 num){
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	a6 97       	sbiw	r28, 0x26	; 38
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	6b a3       	std	Y+35, r22	; 0x23
    245a:	7c a3       	std	Y+36, r23	; 0x24
    245c:	8d a3       	std	Y+37, r24	; 0x25
    245e:	9e a3       	std	Y+38, r25	; 0x26
    u8 str[32];
    sprintf(str, "%lu", num);
    2460:	8d b7       	in	r24, 0x3d	; 61
    2462:	9e b7       	in	r25, 0x3e	; 62
    2464:	08 97       	sbiw	r24, 0x08	; 8
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	9e bf       	out	0x3e, r25	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	8d bf       	out	0x3d, r24	; 61
    2470:	ed b7       	in	r30, 0x3d	; 61
    2472:	fe b7       	in	r31, 0x3e	; 62
    2474:	31 96       	adiw	r30, 0x01	; 1
    2476:	ce 01       	movw	r24, r28
    2478:	03 96       	adiw	r24, 0x03	; 3
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
    247e:	80 e6       	ldi	r24, 0x60	; 96
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	93 83       	std	Z+3, r25	; 0x03
    2484:	82 83       	std	Z+2, r24	; 0x02
    2486:	8b a1       	ldd	r24, Y+35	; 0x23
    2488:	9c a1       	ldd	r25, Y+36	; 0x24
    248a:	ad a1       	ldd	r26, Y+37	; 0x25
    248c:	be a1       	ldd	r27, Y+38	; 0x26
    248e:	84 83       	std	Z+4, r24	; 0x04
    2490:	95 83       	std	Z+5, r25	; 0x05
    2492:	a6 83       	std	Z+6, r26	; 0x06
    2494:	b7 83       	std	Z+7, r27	; 0x07
    2496:	0e 94 18 1a 	call	0x3430	; 0x3430 <sprintf>
    249a:	8d b7       	in	r24, 0x3d	; 61
    249c:	9e b7       	in	r25, 0x3e	; 62
    249e:	08 96       	adiw	r24, 0x08	; 8
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	9e bf       	out	0x3e, r25	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	8d bf       	out	0x3d, r24	; 61
    for (int i = 0; i < strlen(str); i++)
    24aa:	1a 82       	std	Y+2, r1	; 0x02
    24ac:	19 82       	std	Y+1, r1	; 0x01
    24ae:	11 c0       	rjmp	.+34     	; 0x24d2 <LCD_display_32bit+0x92>
    {
    	LCD_displayCharacter(str[i]);
    24b0:	29 81       	ldd	r18, Y+1	; 0x01
    24b2:	3a 81       	ldd	r19, Y+2	; 0x02
    24b4:	ce 01       	movw	r24, r28
    24b6:	03 96       	adiw	r24, 0x03	; 3
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_displayCharacter>
}

void LCD_display_32bit(u32 num){
    u8 str[32];
    sprintf(str, "%lu", num);
    for (int i = 0; i < strlen(str); i++)
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	9a 81       	ldd	r25, Y+2	; 0x02
    24cc:	01 96       	adiw	r24, 0x01	; 1
    24ce:	9a 83       	std	Y+2, r25	; 0x02
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	09 81       	ldd	r16, Y+1	; 0x01
    24d4:	1a 81       	ldd	r17, Y+2	; 0x02
    24d6:	ce 01       	movw	r24, r28
    24d8:	03 96       	adiw	r24, 0x03	; 3
    24da:	0e 94 0f 1a 	call	0x341e	; 0x341e <strlen>
    24de:	08 17       	cp	r16, r24
    24e0:	19 07       	cpc	r17, r25
    24e2:	30 f3       	brcs	.-52     	; 0x24b0 <LCD_display_32bit+0x70>
    {
    	LCD_displayCharacter(str[i]);
    }
}
    24e4:	a6 96       	adiw	r28, 0x26	; 38
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	08 95       	ret

000024fa <LCD_displayCharacter>:

void LCD_displayCharacter(u8 data){
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	e9 97       	sbiw	r28, 0x39	; 57
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2510:	83 e0       	ldi	r24, 0x03	; 3
    2512:	64 e0       	ldi	r22, 0x04	; 4
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	0e 94 8e 06 	call	0xd1c	; 0xd1c <LCD_setPinValue>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a0 e8       	ldi	r26, 0x80	; 128
    2520:	bf e3       	ldi	r27, 0x3F	; 63
    2522:	8d ab       	std	Y+53, r24	; 0x35
    2524:	9e ab       	std	Y+54, r25	; 0x36
    2526:	af ab       	std	Y+55, r26	; 0x37
    2528:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	6d a9       	ldd	r22, Y+53	; 0x35
    252c:	7e a9       	ldd	r23, Y+54	; 0x36
    252e:	8f a9       	ldd	r24, Y+55	; 0x37
    2530:	98 ad       	ldd	r25, Y+56	; 0x38
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a e7       	ldi	r20, 0x7A	; 122
    2538:	55 e4       	ldi	r21, 0x45	; 69
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	89 ab       	std	Y+49, r24	; 0x31
    2544:	9a ab       	std	Y+50, r25	; 0x32
    2546:	ab ab       	std	Y+51, r26	; 0x33
    2548:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    254a:	69 a9       	ldd	r22, Y+49	; 0x31
    254c:	7a a9       	ldd	r23, Y+50	; 0x32
    254e:	8b a9       	ldd	r24, Y+51	; 0x33
    2550:	9c a9       	ldd	r25, Y+52	; 0x34
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	98 ab       	std	Y+48, r25	; 0x30
    2568:	8f a7       	std	Y+47, r24	; 0x2f
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    256c:	69 a9       	ldd	r22, Y+49	; 0x31
    256e:	7a a9       	ldd	r23, Y+50	; 0x32
    2570:	8b a9       	ldd	r24, Y+51	; 0x33
    2572:	9c a9       	ldd	r25, Y+52	; 0x34
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	6d a9       	ldd	r22, Y+53	; 0x35
    2586:	7e a9       	ldd	r23, Y+54	; 0x36
    2588:	8f a9       	ldd	r24, Y+55	; 0x37
    258a:	98 ad       	ldd	r25, Y+56	; 0x38
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	98 ab       	std	Y+48, r25	; 0x30
    25aa:	8f a7       	std	Y+47, r24	; 0x2f
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <LCD_displayCharacter+0xd2>
    25ae:	80 e9       	ldi	r24, 0x90	; 144
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	9e a7       	std	Y+46, r25	; 0x2e
    25b4:	8d a7       	std	Y+45, r24	; 0x2d
    25b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    25b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_displayCharacter+0xc0>
    25be:	9e a7       	std	Y+46, r25	; 0x2e
    25c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c4:	98 a9       	ldd	r25, Y+48	; 0x30
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	98 ab       	std	Y+48, r25	; 0x30
    25ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ce:	98 a9       	ldd	r25, Y+48	; 0x30
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <LCD_displayCharacter+0xb4>
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	69 a9       	ldd	r22, Y+49	; 0x31
    25d8:	7a a9       	ldd	r23, Y+50	; 0x32
    25da:	8b a9       	ldd	r24, Y+51	; 0x33
    25dc:	9c a9       	ldd	r25, Y+52	; 0x34
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	98 ab       	std	Y+48, r25	; 0x30
    25e8:	8f a7       	std	Y+47, r24	; 0x2f
    25ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ec:	98 a9       	ldd	r25, Y+48	; 0x30
    25ee:	9c a7       	std	Y+44, r25	; 0x2c
    25f0:	8b a7       	std	Y+43, r24	; 0x2b
    25f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <LCD_displayCharacter+0xfc>
    25fa:	9c a7       	std	Y+44, r25	; 0x2c
    25fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	65 e0       	ldi	r22, 0x05	; 5
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 8e 06 	call	0xd1c	; 0xd1c <LCD_setPinValue>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e8       	ldi	r26, 0x80	; 128
    260e:	bf e3       	ldi	r27, 0x3F	; 63
    2610:	8f a3       	std	Y+39, r24	; 0x27
    2612:	98 a7       	std	Y+40, r25	; 0x28
    2614:	a9 a7       	std	Y+41, r26	; 0x29
    2616:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	6f a1       	ldd	r22, Y+39	; 0x27
    261a:	78 a5       	ldd	r23, Y+40	; 0x28
    261c:	89 a5       	ldd	r24, Y+41	; 0x29
    261e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	4a e7       	ldi	r20, 0x7A	; 122
    2626:	55 e4       	ldi	r21, 0x45	; 69
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	8b a3       	std	Y+35, r24	; 0x23
    2632:	9c a3       	std	Y+36, r25	; 0x24
    2634:	ad a3       	std	Y+37, r26	; 0x25
    2636:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2638:	6b a1       	ldd	r22, Y+35	; 0x23
    263a:	7c a1       	ldd	r23, Y+36	; 0x24
    263c:	8d a1       	ldd	r24, Y+37	; 0x25
    263e:	9e a1       	ldd	r25, Y+38	; 0x26
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264c:	88 23       	and	r24, r24
    264e:	2c f4       	brge	.+10     	; 0x265a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9a a3       	std	Y+34, r25	; 0x22
    2656:	89 a3       	std	Y+33, r24	; 0x21
    2658:	3f c0       	rjmp	.+126    	; 0x26d8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    265a:	6b a1       	ldd	r22, Y+35	; 0x23
    265c:	7c a1       	ldd	r23, Y+36	; 0x24
    265e:	8d a1       	ldd	r24, Y+37	; 0x25
    2660:	9e a1       	ldd	r25, Y+38	; 0x26
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	3f ef       	ldi	r19, 0xFF	; 255
    2666:	4f e7       	ldi	r20, 0x7F	; 127
    2668:	57 e4       	ldi	r21, 0x47	; 71
    266a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266e:	18 16       	cp	r1, r24
    2670:	4c f5       	brge	.+82     	; 0x26c4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2672:	6f a1       	ldd	r22, Y+39	; 0x27
    2674:	78 a5       	ldd	r23, Y+40	; 0x28
    2676:	89 a5       	ldd	r24, Y+41	; 0x29
    2678:	9a a5       	ldd	r25, Y+42	; 0x2a
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e2       	ldi	r20, 0x20	; 32
    2680:	51 e4       	ldi	r21, 0x41	; 65
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	bc 01       	movw	r22, r24
    268c:	cd 01       	movw	r24, r26
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	9a a3       	std	Y+34, r25	; 0x22
    2698:	89 a3       	std	Y+33, r24	; 0x21
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <LCD_displayCharacter+0x1c0>
    269c:	80 e9       	ldi	r24, 0x90	; 144
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	98 a3       	std	Y+32, r25	; 0x20
    26a2:	8f 8f       	std	Y+31, r24	; 0x1f
    26a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26a6:	98 a1       	ldd	r25, Y+32	; 0x20
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <LCD_displayCharacter+0x1ae>
    26ac:	98 a3       	std	Y+32, r25	; 0x20
    26ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b0:	89 a1       	ldd	r24, Y+33	; 0x21
    26b2:	9a a1       	ldd	r25, Y+34	; 0x22
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	9a a3       	std	Y+34, r25	; 0x22
    26b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ba:	89 a1       	ldd	r24, Y+33	; 0x21
    26bc:	9a a1       	ldd	r25, Y+34	; 0x22
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	69 f7       	brne	.-38     	; 0x269c <LCD_displayCharacter+0x1a2>
    26c2:	14 c0       	rjmp	.+40     	; 0x26ec <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c4:	6b a1       	ldd	r22, Y+35	; 0x23
    26c6:	7c a1       	ldd	r23, Y+36	; 0x24
    26c8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ca:	9e a1       	ldd	r25, Y+38	; 0x26
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9a a3       	std	Y+34, r25	; 0x22
    26d6:	89 a3       	std	Y+33, r24	; 0x21
    26d8:	89 a1       	ldd	r24, Y+33	; 0x21
    26da:	9a a1       	ldd	r25, Y+34	; 0x22
    26dc:	9e 8f       	std	Y+30, r25	; 0x1e
    26de:	8d 8f       	std	Y+29, r24	; 0x1d
    26e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_displayCharacter+0x1ea>
    26e8:	9e 8f       	std	Y+30, r25	; 0x1e
    26ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	69 ad       	ldd	r22, Y+57	; 0x39
    26f0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <LCD_setPortValue>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e8       	ldi	r26, 0x80	; 128
    26fa:	bf e3       	ldi	r27, 0x3F	; 63
    26fc:	89 8f       	std	Y+25, r24	; 0x19
    26fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2700:	ab 8f       	std	Y+27, r26	; 0x1b
    2702:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	69 8d       	ldd	r22, Y+25	; 0x19
    2706:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a e7       	ldi	r20, 0x7A	; 122
    2712:	55 e4       	ldi	r21, 0x45	; 69
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8d 8b       	std	Y+21, r24	; 0x15
    271e:	9e 8b       	std	Y+22, r25	; 0x16
    2720:	af 8b       	std	Y+23, r26	; 0x17
    2722:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2724:	6d 89       	ldd	r22, Y+21	; 0x15
    2726:	7e 89       	ldd	r23, Y+22	; 0x16
    2728:	8f 89       	ldd	r24, Y+23	; 0x17
    272a:	98 8d       	ldd	r25, Y+24	; 0x18
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9c 8b       	std	Y+20, r25	; 0x14
    2742:	8b 8b       	std	Y+19, r24	; 0x13
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2746:	6d 89       	ldd	r22, Y+21	; 0x15
    2748:	7e 89       	ldd	r23, Y+22	; 0x16
    274a:	8f 89       	ldd	r24, Y+23	; 0x17
    274c:	98 8d       	ldd	r25, Y+24	; 0x18
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	69 8d       	ldd	r22, Y+25	; 0x19
    2760:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2762:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2764:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9c 8b       	std	Y+20, r25	; 0x14
    2784:	8b 8b       	std	Y+19, r24	; 0x13
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <LCD_displayCharacter+0x2ac>
    2788:	80 e9       	ldi	r24, 0x90	; 144
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	9a 8b       	std	Y+18, r25	; 0x12
    278e:	89 8b       	std	Y+17, r24	; 0x11
    2790:	89 89       	ldd	r24, Y+17	; 0x11
    2792:	9a 89       	ldd	r25, Y+18	; 0x12
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_displayCharacter+0x29a>
    2798:	9a 8b       	std	Y+18, r25	; 0x12
    279a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8b 89       	ldd	r24, Y+19	; 0x13
    279e:	9c 89       	ldd	r25, Y+20	; 0x14
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9c 8b       	std	Y+20, r25	; 0x14
    27a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	9c 89       	ldd	r25, Y+20	; 0x14
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <LCD_displayCharacter+0x28e>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6d 89       	ldd	r22, Y+21	; 0x15
    27b2:	7e 89       	ldd	r23, Y+22	; 0x16
    27b4:	8f 89       	ldd	r24, Y+23	; 0x17
    27b6:	98 8d       	ldd	r25, Y+24	; 0x18
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9c 8b       	std	Y+20, r25	; 0x14
    27c2:	8b 8b       	std	Y+19, r24	; 0x13
    27c4:	8b 89       	ldd	r24, Y+19	; 0x13
    27c6:	9c 89       	ldd	r25, Y+20	; 0x14
    27c8:	98 8b       	std	Y+16, r25	; 0x10
    27ca:	8f 87       	std	Y+15, r24	; 0x0f
    27cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ce:	98 89       	ldd	r25, Y+16	; 0x10
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <LCD_displayCharacter+0x2d6>
    27d4:	98 8b       	std	Y+16, r25	; 0x10
    27d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    27d8:	83 e0       	ldi	r24, 0x03	; 3
    27da:	65 e0       	ldi	r22, 0x05	; 5
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	0e 94 8e 06 	call	0xd1c	; 0xd1c <LCD_setPinValue>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a0 e8       	ldi	r26, 0x80	; 128
    27e8:	bf e3       	ldi	r27, 0x3F	; 63
    27ea:	8b 87       	std	Y+11, r24	; 0x0b
    27ec:	9c 87       	std	Y+12, r25	; 0x0c
    27ee:	ad 87       	std	Y+13, r26	; 0x0d
    27f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a e7       	ldi	r20, 0x7A	; 122
    2800:	55 e4       	ldi	r21, 0x45	; 69
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	8f 83       	std	Y+7, r24	; 0x07
    280c:	98 87       	std	Y+8, r25	; 0x08
    280e:	a9 87       	std	Y+9, r26	; 0x09
    2810:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2826:	88 23       	and	r24, r24
    2828:	2c f4       	brge	.+10     	; 0x2834 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	3f c0       	rjmp	.+126    	; 0x28b2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2834:	6f 81       	ldd	r22, Y+7	; 0x07
    2836:	78 85       	ldd	r23, Y+8	; 0x08
    2838:	89 85       	ldd	r24, Y+9	; 0x09
    283a:	9a 85       	ldd	r25, Y+10	; 0x0a
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	4c f5       	brge	.+82     	; 0x289e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284c:	6b 85       	ldd	r22, Y+11	; 0x0b
    284e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2850:	8d 85       	ldd	r24, Y+13	; 0x0d
    2852:	9e 85       	ldd	r25, Y+14	; 0x0e
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <LCD_displayCharacter+0x39a>
    2876:	80 e9       	ldi	r24, 0x90	; 144
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	9c 83       	std	Y+4, r25	; 0x04
    287c:	8b 83       	std	Y+3, r24	; 0x03
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_displayCharacter+0x388>
    2886:	9c 83       	std	Y+4, r25	; 0x04
    2888:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	69 f7       	brne	.-38     	; 0x2876 <LCD_displayCharacter+0x37c>
    289c:	14 c0       	rjmp	.+40     	; 0x28c6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289e:	6f 81       	ldd	r22, Y+7	; 0x07
    28a0:	78 85       	ldd	r23, Y+8	; 0x08
    28a2:	89 85       	ldd	r24, Y+9	; 0x09
    28a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9e 83       	std	Y+6, r25	; 0x06
    28b0:	8d 83       	std	Y+5, r24	; 0x05
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	9e 81       	ldd	r25, Y+6	; 0x06
    28b6:	9a 83       	std	Y+2, r25	; 0x02
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_displayCharacter+0x3c4>
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    28c6:	e9 96       	adiw	r28, 0x39	; 57
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <LCD_init>:

void LCD_init(void){
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	2e 97       	sbiw	r28, 0x0e	; 14
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, AVR_PIN_OUTPUT);
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	64 e0       	ldi	r22, 0x04	; 4
    28f0:	41 e0       	ldi	r20, 0x01	; 1
    28f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, AVR_PIN_OUTPUT);
    28f6:	83 e0       	ldi	r24, 0x03	; 3
    28f8:	65 e0       	ldi	r22, 0x05	; 5
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, AVR_PIN_OUTPUT);
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	61 e0       	ldi	r22, 0x01	; 1
    2904:	0e 94 14 08 	call	0x1028	; 0x1028 <LCD_setPortDirection>
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a0 ea       	ldi	r26, 0xA0	; 160
    290e:	b1 e4       	ldi	r27, 0x41	; 65
    2910:	8b 87       	std	Y+11, r24	; 0x0b
    2912:	9c 87       	std	Y+12, r25	; 0x0c
    2914:	ad 87       	std	Y+13, r26	; 0x0d
    2916:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	6b 85       	ldd	r22, Y+11	; 0x0b
    291a:	7c 85       	ldd	r23, Y+12	; 0x0c
    291c:	8d 85       	ldd	r24, Y+13	; 0x0d
    291e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a e7       	ldi	r20, 0x7A	; 122
    2926:	55 e4       	ldi	r21, 0x45	; 69
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8f 83       	std	Y+7, r24	; 0x07
    2932:	98 87       	std	Y+8, r25	; 0x08
    2934:	a9 87       	std	Y+9, r26	; 0x09
    2936:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2938:	6f 81       	ldd	r22, Y+7	; 0x07
    293a:	78 85       	ldd	r23, Y+8	; 0x08
    293c:	89 85       	ldd	r24, Y+9	; 0x09
    293e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e8       	ldi	r20, 0x80	; 128
    2946:	5f e3       	ldi	r21, 0x3F	; 63
    2948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    294c:	88 23       	and	r24, r24
    294e:	2c f4       	brge	.+10     	; 0x295a <LCD_init+0x82>
		__ticks = 1;
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	3f c0       	rjmp	.+126    	; 0x29d8 <LCD_init+0x100>
	else if (__tmp > 65535)
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	3f ef       	ldi	r19, 0xFF	; 255
    2966:	4f e7       	ldi	r20, 0x7F	; 127
    2968:	57 e4       	ldi	r21, 0x47	; 71
    296a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296e:	18 16       	cp	r1, r24
    2970:	4c f5       	brge	.+82     	; 0x29c4 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	6b 85       	ldd	r22, Y+11	; 0x0b
    2974:	7c 85       	ldd	r23, Y+12	; 0x0c
    2976:	8d 85       	ldd	r24, Y+13	; 0x0d
    2978:	9e 85       	ldd	r25, Y+14	; 0x0e
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e2       	ldi	r20, 0x20	; 32
    2980:	51 e4       	ldi	r21, 0x41	; 65
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	8d 83       	std	Y+5, r24	; 0x05
    299a:	0f c0       	rjmp	.+30     	; 0x29ba <LCD_init+0xe2>
    299c:	80 e9       	ldi	r24, 0x90	; 144
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <LCD_init+0xd0>
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	9e 83       	std	Y+6, r25	; 0x06
    29b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	00 97       	sbiw	r24, 0x00	; 0
    29c0:	69 f7       	brne	.-38     	; 0x299c <LCD_init+0xc4>
    29c2:	14 c0       	rjmp	.+40     	; 0x29ec <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c4:	6f 81       	ldd	r22, Y+7	; 0x07
    29c6:	78 85       	ldd	r23, Y+8	; 0x08
    29c8:	89 85       	ldd	r24, Y+9	; 0x09
    29ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9e 83       	std	Y+6, r25	; 0x06
    29d6:	8d 83       	std	Y+5, r24	; 0x05
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	9a 81       	ldd	r25, Y+2	; 0x02
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_init+0x10c>
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    29ec:	88 e3       	ldi	r24, 0x38	; 56
    29ee:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    29f2:	8c e0       	ldi	r24, 0x0C	; 12
    29f4:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
}
    29fe:	2e 96       	adiw	r28, 0x0e	; 14
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location){
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <LCD_GoToXY+0x6>
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <LCD_GoToXY+0x8>
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	88 32       	cpi	r24, 0x28	; 40
    2a24:	c0 f4       	brcc	.+48     	; 0x2a56 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	28 2f       	mov	r18, r24
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	3c 83       	std	Y+4, r19	; 0x04
    2a2e:	2b 83       	std	Y+3, r18	; 0x03
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	9c 81       	ldd	r25, Y+4	; 0x04
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	31 f0       	breq	.+12     	; 0x2a44 <LCD_GoToXY+0x34>
    2a38:	2b 81       	ldd	r18, Y+3	; 0x03
    2a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a3c:	21 30       	cpi	r18, 0x01	; 1
    2a3e:	31 05       	cpc	r19, r1
    2a40:	31 f0       	breq	.+12     	; 0x2a4e <LCD_GoToXY+0x3e>
    2a42:	09 c0       	rjmp	.+18     	; 0x2a56 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	80 58       	subi	r24, 0x80	; 128
    2a48:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
    2a4c:	04 c0       	rjmp	.+8      	; 0x2a56 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    2a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a50:	80 54       	subi	r24, 0x40	; 64
    2a52:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
			break;
		}
	}
}
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <LCD_displayString>:

void LCD_displayString(const char *str){
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <LCD_displayString+0x6>
    2a6a:	0f 92       	push	r0
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	9b 83       	std	Y+3, r25	; 0x03
    2a72:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2a74:	19 82       	std	Y+1, r1	; 0x01
    2a76:	0e c0       	rjmp	.+28     	; 0x2a94 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	fc 01       	movw	r30, r24
    2a84:	e2 0f       	add	r30, r18
    2a86:	f3 1f       	adc	r31, r19
    2a88:	80 81       	ld	r24, Z
    2a8a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_displayCharacter>
		i++;
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	8f 5f       	subi	r24, 0xFF	; 255
    2a92:	89 83       	std	Y+1, r24	; 0x01
	}
}

void LCD_displayString(const char *str){
	u8 i = 0;
	while (str[i] != '\0')
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	e2 0f       	add	r30, r18
    2aa2:	f3 1f       	adc	r31, r19
    2aa4:	80 81       	ld	r24, Z
    2aa6:	88 23       	and	r24, r24
    2aa8:	39 f7       	brne	.-50     	; 0x2a78 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	28 97       	sbiw	r28, 0x08	; 8
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	6c 83       	std	Y+4, r22	; 0x04
    2ace:	5e 83       	std	Y+6, r21	; 0x06
    2ad0:	4d 83       	std	Y+5, r20	; 0x05
    2ad2:	38 87       	std	Y+8, r19	; 0x08
    2ad4:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    2ad6:	1a 82       	std	Y+2, r1	; 0x02
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	88 23       	and	r24, r24
    2ae0:	49 f4       	brne	.+18     	; 0x2af4 <LCD_String_xy+0x3e>
    2ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae4:	80 31       	cpi	r24, 0x10	; 16
    2ae6:	30 f4       	brcc	.+12     	; 0x2af4 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    2ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aea:	8f 70       	andi	r24, 0x0F	; 15
    2aec:	80 68       	ori	r24, 0x80	; 128
    2aee:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
    2af2:	3a c0       	rjmp	.+116    	; 0x2b68 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	81 30       	cpi	r24, 0x01	; 1
    2af8:	b9 f5       	brne	.+110    	; 0x2b68 <LCD_String_xy+0xb2>
    2afa:	8c 81       	ldd	r24, Y+4	; 0x04
    2afc:	80 31       	cpi	r24, 0x10	; 16
    2afe:	a0 f5       	brcc	.+104    	; 0x2b68 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    2b00:	8c 81       	ldd	r24, Y+4	; 0x04
    2b02:	8f 70       	andi	r24, 0x0F	; 15
    2b04:	80 6c       	ori	r24, 0xC0	; 192
    2b06:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
    2b0a:	2e c0       	rjmp	.+92     	; 0x2b68 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
    2b14:	9e 81       	ldd	r25, Y+6	; 0x06
    2b16:	fc 01       	movw	r30, r24
    2b18:	e2 0f       	add	r30, r18
    2b1a:	f3 1f       	adc	r31, r19
    2b1c:	80 81       	ld	r24, Z
    2b1e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_displayCharacter>
		i++;
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	8f 5f       	subi	r24, 0xFF	; 255
    2b26:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	88 23       	and	r24, r24
    2b2c:	71 f4       	brne	.+28     	; 0x2b4a <LCD_String_xy+0x94>
    2b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b30:	83 30       	cpi	r24, 0x03	; 3
    2b32:	58 f0       	brcs	.+22     	; 0x2b4a <LCD_String_xy+0x94>
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	8b 30       	cpi	r24, 0x0B	; 11
    2b38:	41 f4       	brne	.+16     	; 0x2b4a <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_GoToXY>
			c++;
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	0b c0       	rjmp	.+22     	; 0x2b60 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	41 f4       	brne	.+16     	; 0x2b60 <LCD_String_xy+0xaa>
    2b50:	8c 81       	ldd	r24, Y+4	; 0x04
    2b52:	83 30       	cpi	r24, 0x03	; 3
    2b54:	28 f0       	brcs	.+10     	; 0x2b60 <LCD_String_xy+0xaa>
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	8b 30       	cpi	r24, 0x0B	; 11
    2b5a:	11 f4       	brne	.+4      	; 0x2b60 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    2b5c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_ClearScreen>
		}

		*count = c;
    2b60:	ef 81       	ldd	r30, Y+7	; 0x07
    2b62:	f8 85       	ldd	r31, Y+8	; 0x08
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	fc 01       	movw	r30, r24
    2b74:	e2 0f       	add	r30, r18
    2b76:	f3 1f       	adc	r31, r19
    2b78:	80 81       	ld	r24, Z
    2b7a:	88 23       	and	r24, r24
    2b7c:	39 f6       	brne	.-114    	; 0x2b0c <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    2b7e:	28 96       	adiw	r28, 0x08	; 8
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	08 95       	ret

00002b90 <LCD_ClearScreen>:

void LCD_ClearScreen(void){
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	2e 97       	sbiw	r28, 0x0e	; 14
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	a0 e0       	ldi	r26, 0x00	; 0
    2bb0:	b0 e4       	ldi	r27, 0x40	; 64
    2bb2:	8b 87       	std	Y+11, r24	; 0x0b
    2bb4:	9c 87       	std	Y+12, r25	; 0x0c
    2bb6:	ad 87       	std	Y+13, r26	; 0x0d
    2bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	4a e7       	ldi	r20, 0x7A	; 122
    2bc8:	55 e4       	ldi	r21, 0x45	; 69
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	8f 83       	std	Y+7, r24	; 0x07
    2bd4:	98 87       	std	Y+8, r25	; 0x08
    2bd6:	a9 87       	std	Y+9, r26	; 0x09
    2bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bda:	6f 81       	ldd	r22, Y+7	; 0x07
    2bdc:	78 85       	ldd	r23, Y+8	; 0x08
    2bde:	89 85       	ldd	r24, Y+9	; 0x09
    2be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e8       	ldi	r20, 0x80	; 128
    2be8:	5f e3       	ldi	r21, 0x3F	; 63
    2bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bee:	88 23       	and	r24, r24
    2bf0:	2c f4       	brge	.+10     	; 0x2bfc <LCD_ClearScreen+0x6c>
		__ticks = 1;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	3f c0       	rjmp	.+126    	; 0x2c7a <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	3f ef       	ldi	r19, 0xFF	; 255
    2c08:	4f e7       	ldi	r20, 0x7F	; 127
    2c0a:	57 e4       	ldi	r21, 0x47	; 71
    2c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c10:	18 16       	cp	r1, r24
    2c12:	4c f5       	brge	.+82     	; 0x2c66 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e2       	ldi	r20, 0x20	; 32
    2c22:	51 e4       	ldi	r21, 0x41	; 65
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	0f c0       	rjmp	.+30     	; 0x2c5c <LCD_ClearScreen+0xcc>
    2c3e:	80 e9       	ldi	r24, 0x90	; 144
    2c40:	91 e0       	ldi	r25, 0x01	; 1
    2c42:	9c 83       	std	Y+4, r25	; 0x04
    2c44:	8b 83       	std	Y+3, r24	; 0x03
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <LCD_ClearScreen+0xba>
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	9e 81       	ldd	r25, Y+6	; 0x06
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	9e 83       	std	Y+6, r25	; 0x06
    2c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	69 f7       	brne	.-38     	; 0x2c3e <LCD_ClearScreen+0xae>
    2c64:	14 c0       	rjmp	.+40     	; 0x2c8e <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	9a 83       	std	Y+2, r25	; 0x02
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <LCD_ClearScreen+0xf6>
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2c8e:	2e 96       	adiw	r28, 0x0e	; 14
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void){
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	2e 97       	sbiw	r28, 0x0e	; 14
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    2cb4:	88 e1       	ldi	r24, 0x18	; 24
    2cb6:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a0 ea       	ldi	r26, 0xA0	; 160
    2cc0:	b1 e4       	ldi	r27, 0x41	; 65
    2cc2:	8b 87       	std	Y+11, r24	; 0x0b
    2cc4:	9c 87       	std	Y+12, r25	; 0x0c
    2cc6:	ad 87       	std	Y+13, r26	; 0x0d
    2cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	4a e7       	ldi	r20, 0x7A	; 122
    2cd8:	55 e4       	ldi	r21, 0x45	; 69
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	8f 83       	std	Y+7, r24	; 0x07
    2ce4:	98 87       	std	Y+8, r25	; 0x08
    2ce6:	a9 87       	std	Y+9, r26	; 0x09
    2ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e8       	ldi	r20, 0x80	; 128
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cfe:	88 23       	and	r24, r24
    2d00:	2c f4       	brge	.+10     	; 0x2d0c <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	3f c0       	rjmp	.+126    	; 0x2d8a <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	4c f5       	brge	.+82     	; 0x2d76 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	0f c0       	rjmp	.+30     	; 0x2d6c <LCD_ShiftingLeft+0xcc>
    2d4e:	80 e9       	ldi	r24, 0x90	; 144
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	8b 83       	std	Y+3, r24	; 0x03
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <LCD_ShiftingLeft+0xba>
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	69 f7       	brne	.-38     	; 0x2d4e <LCD_ShiftingLeft+0xae>
    2d74:	14 c0       	rjmp	.+40     	; 0x2d9e <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	6f 81       	ldd	r22, Y+7	; 0x07
    2d78:	78 85       	ldd	r23, Y+8	; 0x08
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_ShiftingLeft+0xf6>
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2d9e:	2e 96       	adiw	r28, 0x0e	; 14
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void){
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	2e 97       	sbiw	r28, 0x0e	; 14
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    2dc4:	8c e1       	ldi	r24, 0x1C	; 28
    2dc6:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	a0 ea       	ldi	r26, 0xA0	; 160
    2dd0:	b1 e4       	ldi	r27, 0x41	; 65
    2dd2:	8b 87       	std	Y+11, r24	; 0x0b
    2dd4:	9c 87       	std	Y+12, r25	; 0x0c
    2dd6:	ad 87       	std	Y+13, r26	; 0x0d
    2dd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	4a e7       	ldi	r20, 0x7A	; 122
    2de8:	55 e4       	ldi	r21, 0x45	; 69
    2dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	8f 83       	std	Y+7, r24	; 0x07
    2df4:	98 87       	std	Y+8, r25	; 0x08
    2df6:	a9 87       	std	Y+9, r26	; 0x09
    2df8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfc:	78 85       	ldd	r23, Y+8	; 0x08
    2dfe:	89 85       	ldd	r24, Y+9	; 0x09
    2e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e8       	ldi	r20, 0x80	; 128
    2e08:	5f e3       	ldi	r21, 0x3F	; 63
    2e0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0e:	88 23       	and	r24, r24
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	3f c0       	rjmp	.+126    	; 0x2e9a <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    2e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1e:	78 85       	ldd	r23, Y+8	; 0x08
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	4c f5       	brge	.+82     	; 0x2e86 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e2       	ldi	r20, 0x20	; 32
    2e42:	51 e4       	ldi	r21, 0x41	; 65
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <LCD_ShiftingRight+0xcc>
    2e5e:	80 e9       	ldi	r24, 0x90	; 144
    2e60:	91 e0       	ldi	r25, 0x01	; 1
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	8b 83       	std	Y+3, r24	; 0x03
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_ShiftingRight+0xba>
    2e6e:	9c 83       	std	Y+4, r25	; 0x04
    2e70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	8d 81       	ldd	r24, Y+5	; 0x05
    2e74:	9e 81       	ldd	r25, Y+6	; 0x06
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <LCD_ShiftingRight+0xae>
    2e84:	14 c0       	rjmp	.+40     	; 0x2eae <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	6f 81       	ldd	r22, Y+7	; 0x07
    2e88:	78 85       	ldd	r23, Y+8	; 0x08
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9e 83       	std	Y+6, r25	; 0x06
    2e98:	8d 83       	std	Y+5, r24	; 0x05
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	9a 83       	std	Y+2, r25	; 0x02
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <LCD_ShiftingRight+0xf6>
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2eae:	2e 96       	adiw	r28, 0x0e	; 14
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit){
    2ec0:	0f 93       	push	r16
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	28 97       	sbiw	r28, 0x08	; 8
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
    2ed8:	7d 83       	std	Y+5, r23	; 0x05
    2eda:	6c 83       	std	Y+4, r22	; 0x04
    2edc:	4e 83       	std	Y+6, r20	; 0x06
    2ede:	2f 83       	std	Y+7, r18	; 0x07
    2ee0:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    2ee2:	88 85       	ldd	r24, Y+8	; 0x08
    2ee4:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    2ee8:	1a 82       	std	Y+2, r1	; 0x02
    2eea:	19 82       	std	Y+1, r1	; 0x01
    2eec:	0f c0       	rjmp	.+30     	; 0x2f0c <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    2eee:	29 81       	ldd	r18, Y+1	; 0x01
    2ef0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	e2 0f       	add	r30, r18
    2efa:	f3 1f       	adc	r31, r19
    2efc:	80 81       	ld	r24, Z
    2efe:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_displayCharacter>
	_delay_ms(20);
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit){
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	01 96       	adiw	r24, 0x01	; 1
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f10:	88 30       	cpi	r24, 0x08	; 8
    2f12:	91 05       	cpc	r25, r1
    2f14:	64 f3       	brlt	.-40     	; 0x2eee <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    2f16:	8e 81       	ldd	r24, Y+6	; 0x06
    2f18:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    2f24:	8f 81       	ldd	r24, Y+7	; 0x07
    2f26:	80 31       	cpi	r24, 0x10	; 16
    2f28:	48 f0       	brcs	.+18     	; 0x2f3c <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    2f2a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_displayCharacter>
	}
}
    2f3c:	28 96       	adiw	r28, 0x08	; 8
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	0f 91       	pop	r16
    2f4e:	08 95       	ret

00002f50 <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    2f58:	a7 e2       	ldi	r26, 0x27	; 39
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e7 e2       	ldi	r30, 0x27	; 39
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	8f 77       	andi	r24, 0x7F	; 127
    2f64:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    2f66:	a7 e2       	ldi	r26, 0x27	; 39
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	e7 e2       	ldi	r30, 0x27	; 39
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	80 64       	ori	r24, 0x40	; 64
    2f72:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    2f74:	a7 e2       	ldi	r26, 0x27	; 39
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	e7 e2       	ldi	r30, 0x27	; 39
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	8f 7d       	andi	r24, 0xDF	; 223
    2f80:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    2f82:	a6 e2       	ldi	r26, 0x26	; 38
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e6 e2       	ldi	r30, 0x26	; 38
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	8f 7d       	andi	r24, 0xDF	; 223
    2f8e:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    2f90:	a6 e2       	ldi	r26, 0x26	; 38
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e6 e2       	ldi	r30, 0x26	; 38
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	84 60       	ori	r24, 0x04	; 4
    2f9c:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    2f9e:	a6 e2       	ldi	r26, 0x26	; 38
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	e6 e2       	ldi	r30, 0x26	; 38
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	82 60       	ori	r24, 0x02	; 2
    2faa:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2fac:	a6 e2       	ldi	r26, 0x26	; 38
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e6 e2       	ldi	r30, 0x26	; 38
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	8e 7f       	andi	r24, 0xFE	; 254
    2fb8:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2fba:	a6 e2       	ldi	r26, 0x26	; 38
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	e6 e2       	ldi	r30, 0x26	; 38
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	80 68       	ori	r24, 0x80	; 128
    2fc6:	8c 93       	st	X, r24

}
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	08 95       	ret

00002fce <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2fce:	df 93       	push	r29
    2fd0:	cf 93       	push	r28
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	28 97       	sbiw	r28, 0x08	; 8
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	f8 94       	cli
    2fdc:	de bf       	out	0x3e, r29	; 62
    2fde:	0f be       	out	0x3f, r0	; 63
    2fe0:	cd bf       	out	0x3d, r28	; 61
    2fe2:	8e 83       	std	Y+6, r24	; 0x06
    2fe4:	78 87       	std	Y+8, r23	; 0x08
    2fe6:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2fec:	19 82       	std	Y+1, r1	; 0x01
    2fee:	1a 82       	std	Y+2, r1	; 0x02
    2ff0:	1b 82       	std	Y+3, r1	; 0x03
    2ff2:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff6:	80 32       	cpi	r24, 0x20	; 32
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2ffa:	5b c0       	rjmp	.+182    	; 0x30b2 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffe:	98 85       	ldd	r25, Y+8	; 0x08
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	09 f4       	brne	.+2      	; 0x3006 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    3004:	56 c0       	rjmp	.+172    	; 0x30b2 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    3006:	a7 e2       	ldi	r26, 0x27	; 39
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e7 e2       	ldi	r30, 0x27	; 39
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	80 7e       	andi	r24, 0xE0	; 224
    3012:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    3014:	a7 e2       	ldi	r26, 0x27	; 39
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e7 e2       	ldi	r30, 0x27	; 39
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	90 81       	ld	r25, Z
    301e:	8e 81       	ldd	r24, Y+6	; 0x06
    3020:	89 2b       	or	r24, r25
    3022:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    3024:	a6 e2       	ldi	r26, 0x26	; 38
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e6 e2       	ldi	r30, 0x26	; 38
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	80 64       	ori	r24, 0x40	; 64
    3030:	8c 93       	st	X, r24
    3032:	0b c0       	rjmp	.+22     	; 0x304a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	ab 81       	ldd	r26, Y+3	; 0x03
    303a:	bc 81       	ldd	r27, Y+4	; 0x04
    303c:	01 96       	adiw	r24, 0x01	; 1
    303e:	a1 1d       	adc	r26, r1
    3040:	b1 1d       	adc	r27, r1
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	ab 83       	std	Y+3, r26	; 0x03
    3048:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    304a:	e6 e2       	ldi	r30, 0x26	; 38
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	82 95       	swap	r24
    3052:	8f 70       	andi	r24, 0x0F	; 15
    3054:	88 2f       	mov	r24, r24
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	81 70       	andi	r24, 0x01	; 1
    305a:	90 70       	andi	r25, 0x00	; 0
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	61 f4       	brne	.+24     	; 0x3078 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	ab 81       	ldd	r26, Y+3	; 0x03
    3066:	bc 81       	ldd	r27, Y+4	; 0x04
    3068:	80 35       	cpi	r24, 0x50	; 80
    306a:	23 ec       	ldi	r18, 0xC3	; 195
    306c:	92 07       	cpc	r25, r18
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	a2 07       	cpc	r26, r18
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	b2 07       	cpc	r27, r18
    3076:	f0 f2       	brcs	.-68     	; 0x3034 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    3078:	e6 e2       	ldi	r30, 0x26	; 38
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	82 95       	swap	r24
    3080:	8f 70       	andi	r24, 0x0F	; 15
    3082:	88 2f       	mov	r24, r24
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	81 70       	andi	r24, 0x01	; 1
    3088:	90 70       	andi	r25, 0x00	; 0
    308a:	88 23       	and	r24, r24
    308c:	81 f0       	breq	.+32     	; 0x30ae <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    308e:	a6 e2       	ldi	r26, 0x26	; 38
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	e6 e2       	ldi	r30, 0x26	; 38
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	80 61       	ori	r24, 0x10	; 16
    309a:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    309c:	e4 e2       	ldi	r30, 0x24	; 36
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	ef 81       	ldd	r30, Y+7	; 0x07
    30a6:	f8 85       	ldd	r31, Y+8	; 0x08
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	80 83       	st	Z, r24
    30ac:	03 c0       	rjmp	.+6      	; 0x30b4 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    30ae:	1d 82       	std	Y+5, r1	; 0x05
    30b0:	01 c0       	rjmp	.+2      	; 0x30b4 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    30b2:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    30b6:	28 96       	adiw	r28, 0x08	; 8
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <ADC_u8_Get_Digital_ValueAsynch+0x6>
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <ADC_u8_Get_Digital_ValueAsynch+0x8>
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	8a 83       	std	Y+2, r24	; 0x02
    30d6:	7c 83       	std	Y+4, r23	; 0x04
    30d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	80 32       	cpi	r24, 0x20	; 32
    30e2:	78 f5       	brcc	.+94     	; 0x3142 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	9c 81       	ldd	r25, Y+4	; 0x04
    30e8:	00 97       	sbiw	r24, 0x00	; 0
    30ea:	59 f1       	breq	.+86     	; 0x3142 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    30ec:	80 91 7c 00 	lds	r24, 0x007C
    30f0:	88 23       	and	r24, r24
    30f2:	39 f5       	brne	.+78     	; 0x3142 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	80 93 7c 00 	sts	0x007C, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    30fa:	8b 81       	ldd	r24, Y+3	; 0x03
    30fc:	9c 81       	ldd	r25, Y+4	; 0x04
    30fe:	90 93 7b 00 	sts	0x007B, r25
    3102:	80 93 7a 00 	sts	0x007A, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    3106:	a6 e2       	ldi	r26, 0x26	; 38
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	e6 e2       	ldi	r30, 0x26	; 38
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	88 60       	ori	r24, 0x08	; 8
    3112:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    3114:	a7 e2       	ldi	r26, 0x27	; 39
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e7 e2       	ldi	r30, 0x27	; 39
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	80 7e       	andi	r24, 0xE0	; 224
    3120:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    3122:	a7 e2       	ldi	r26, 0x27	; 39
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e7 e2       	ldi	r30, 0x27	; 39
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	90 81       	ld	r25, Z
    312c:	8a 81       	ldd	r24, Y+2	; 0x02
    312e:	89 2b       	or	r24, r25
    3130:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    3132:	a6 e2       	ldi	r26, 0x26	; 38
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	e6 e2       	ldi	r30, 0x26	; 38
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	80 64       	ori	r24, 0x40	; 64
    313e:	8c 93       	st	X, r24
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    3142:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3144:	89 81       	ldd	r24, Y+1	; 0x01
}
    3146:	0f 90       	pop	r0
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	00 d0       	rcall	.+0      	; 0x315a <ADC_u8GetADCRegValue+0x6>
    315a:	0f 92       	push	r0
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	9b 83       	std	Y+3, r25	; 0x03
    3162:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	9b 81       	ldd	r25, Y+3	; 0x03
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	39 f0       	breq	.+14     	; 0x317e <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    3170:	e4 e2       	ldi	r30, 0x24	; 36
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	91 81       	ldd	r25, Z+1	; 0x01
    3178:	9b 83       	std	Y+3, r25	; 0x03
    317a:	8a 83       	std	Y+2, r24	; 0x02
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    317e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3180:	89 81       	ldd	r24, Y+1	; 0x01
}
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    318e:	1f 92       	push	r1
    3190:	0f 92       	push	r0
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	0f 92       	push	r0
    3196:	11 24       	eor	r1, r1
    3198:	2f 93       	push	r18
    319a:	3f 93       	push	r19
    319c:	4f 93       	push	r20
    319e:	5f 93       	push	r21
    31a0:	6f 93       	push	r22
    31a2:	7f 93       	push	r23
    31a4:	8f 93       	push	r24
    31a6:	9f 93       	push	r25
    31a8:	af 93       	push	r26
    31aa:	bf 93       	push	r27
    31ac:	ef 93       	push	r30
    31ae:	ff 93       	push	r31
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    31b8:	80 91 7a 00 	lds	r24, 0x007A
    31bc:	90 91 7b 00 	lds	r25, 0x007B
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	99 f0       	breq	.+38     	; 0x31ea <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    31c4:	10 92 7c 00 	sts	0x007C, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    31c8:	a6 e2       	ldi	r26, 0x26	; 38
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	e6 e2       	ldi	r30, 0x26	; 38
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	87 7f       	andi	r24, 0xF7	; 247
    31d4:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    31d6:	20 91 7a 00 	lds	r18, 0x007A
    31da:	30 91 7b 00 	lds	r19, 0x007B
    31de:	e4 e2       	ldi	r30, 0x24	; 36
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	91 81       	ldd	r25, Z+1	; 0x01
    31e6:	f9 01       	movw	r30, r18
    31e8:	09 95       	icall
	}
}
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	ff 91       	pop	r31
    31f0:	ef 91       	pop	r30
    31f2:	bf 91       	pop	r27
    31f4:	af 91       	pop	r26
    31f6:	9f 91       	pop	r25
    31f8:	8f 91       	pop	r24
    31fa:	7f 91       	pop	r23
    31fc:	6f 91       	pop	r22
    31fe:	5f 91       	pop	r21
    3200:	4f 91       	pop	r20
    3202:	3f 91       	pop	r19
    3204:	2f 91       	pop	r18
    3206:	0f 90       	pop	r0
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	0f 90       	pop	r0
    320c:	1f 90       	pop	r1
    320e:	18 95       	reti

00003210 <main>:
#define F_CPU 16000000UL

void App_voidADCCallBack(u16 Copy_u16ADCValue);
static u16 App_u16DigitalValue;

int main(void){
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	28 97       	sbiw	r28, 0x08	; 8
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDirection(0, 4, 0);
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	64 e0       	ldi	r22, 0x04	; 4
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	0e 94 02 09 	call	0x1204	; 0x1204 <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(2, 1);
    322e:	82 e0       	ldi	r24, 0x02	; 2
    3230:	61 e0       	ldi	r22, 0x01	; 1
    3232:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(3, 1);
    3236:	83 e0       	ldi	r24, 0x03	; 3
    3238:	61 e0       	ldi	r22, 0x01	; 1
    323a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_u8SetPortDirection>
	LCD_init();
    323e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <LCD_init>
	ADC_void_Init();
    3242:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ADC_void_Init>

	u16 DigitalValue, AnalogValue;
	u32 Res;

	LCD_GoToXY(0, 0);
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	60 e0       	ldi	r22, 0x00	; 0
    324a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_GoToXY>
	LCD_displayString("Volt: ");
    324e:	84 e6       	ldi	r24, 0x64	; 100
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_displayString>

	LCD_GoToXY(1, 0);
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_GoToXY>
	LCD_displayString("Res: ");
    325e:	8b e6       	ldi	r24, 0x6B	; 107
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_displayString>
	while(1){
		/********************** Asynch App   *******************************/
		//ADC_u8_Get_Digital_ValueAsynch(4, &App_voidADCCallBack);
		//AnalogValue = (App_u16DigitalValue * 5000UL) / 1024;
		/*******************************************************************/
		ADC_u8_Get_Digital_ValueSynchNonBlocking(4, &DigitalValue);
    3266:	9e 01       	movw	r18, r28
    3268:	29 5f       	subi	r18, 0xF9	; 249
    326a:	3f 4f       	sbci	r19, 0xFF	; 255
    326c:	84 e0       	ldi	r24, 0x04	; 4
    326e:	b9 01       	movw	r22, r18
    3270:	0e 94 e7 17 	call	0x2fce	; 0x2fce <ADC_u8_Get_Digital_ValueSynchNonBlocking>
		AnalogValue = (DigitalValue * 5000UL) / 1024;
    3274:	8f 81       	ldd	r24, Y+7	; 0x07
    3276:	98 85       	ldd	r25, Y+8	; 0x08
    3278:	cc 01       	movw	r24, r24
    327a:	a0 e0       	ldi	r26, 0x00	; 0
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	28 e8       	ldi	r18, 0x88	; 136
    3280:	33 e1       	ldi	r19, 0x13	; 19
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	50 e0       	ldi	r21, 0x00	; 0
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	0e 94 97 19 	call	0x332e	; 0x332e <__mulsi3>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	07 2e       	mov	r0, r23
    3294:	7a e0       	ldi	r23, 0x0A	; 10
    3296:	b6 95       	lsr	r27
    3298:	a7 95       	ror	r26
    329a:	97 95       	ror	r25
    329c:	87 95       	ror	r24
    329e:	7a 95       	dec	r23
    32a0:	d1 f7       	brne	.-12     	; 0x3296 <main+0x86>
    32a2:	70 2d       	mov	r23, r0
    32a4:	9e 83       	std	Y+6, r25	; 0x06
    32a6:	8d 83       	std	Y+5, r24	; 0x05
		Res = ((10000*1024UL)/DigitalValue) - 10000;;
    32a8:	8f 81       	ldd	r24, Y+7	; 0x07
    32aa:	98 85       	ldd	r25, Y+8	; 0x08
    32ac:	9c 01       	movw	r18, r24
    32ae:	40 e0       	ldi	r20, 0x00	; 0
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	90 e4       	ldi	r25, 0x40	; 64
    32b6:	ac e9       	ldi	r26, 0x9C	; 156
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	0e 94 b6 19 	call	0x336c	; 0x336c <__udivmodsi4>
    32c2:	da 01       	movw	r26, r20
    32c4:	c9 01       	movw	r24, r18
    32c6:	80 51       	subi	r24, 0x10	; 16
    32c8:	97 42       	sbci	r25, 0x27	; 39
    32ca:	a0 40       	sbci	r26, 0x00	; 0
    32cc:	b0 40       	sbci	r27, 0x00	; 0
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	ab 83       	std	Y+3, r26	; 0x03
    32d4:	bc 83       	std	Y+4, r27	; 0x04
		LCD_GoToXY(0, 5);
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	65 e0       	ldi	r22, 0x05	; 5
    32da:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_GoToXY>
		LCD_display_32bit(AnalogValue);
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	9e 81       	ldd	r25, Y+6	; 0x06
    32e2:	cc 01       	movw	r24, r24
    32e4:	a0 e0       	ldi	r26, 0x00	; 0
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_display_32bit>

		LCD_GoToXY(1, 5);
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	65 e0       	ldi	r22, 0x05	; 5
    32f4:	0e 94 08 15 	call	0x2a10	; 0x2a10 <LCD_GoToXY>
		LCD_display_32bit(Res);
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	9a 81       	ldd	r25, Y+2	; 0x02
    32fc:	ab 81       	ldd	r26, Y+3	; 0x03
    32fe:	bc 81       	ldd	r27, Y+4	; 0x04
    3300:	bc 01       	movw	r22, r24
    3302:	cd 01       	movw	r24, r26
    3304:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_display_32bit>
    3308:	ae cf       	rjmp	.-164    	; 0x3266 <main+0x56>

0000330a <App_voidADCCallBack>:

	}
	return 0;
}

void App_voidADCCallBack(u16 Copy_u16ADCValue){
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	00 d0       	rcall	.+0      	; 0x3310 <App_voidADCCallBack+0x6>
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	9a 83       	std	Y+2, r25	; 0x02
    3316:	89 83       	std	Y+1, r24	; 0x01
	App_u16DigitalValue = Copy_u16ADCValue;
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	90 93 7e 00 	sts	0x007E, r25
    3320:	80 93 7d 00 	sts	0x007D, r24
}
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <__mulsi3>:
    332e:	62 9f       	mul	r22, r18
    3330:	d0 01       	movw	r26, r0
    3332:	73 9f       	mul	r23, r19
    3334:	f0 01       	movw	r30, r0
    3336:	82 9f       	mul	r24, r18
    3338:	e0 0d       	add	r30, r0
    333a:	f1 1d       	adc	r31, r1
    333c:	64 9f       	mul	r22, r20
    333e:	e0 0d       	add	r30, r0
    3340:	f1 1d       	adc	r31, r1
    3342:	92 9f       	mul	r25, r18
    3344:	f0 0d       	add	r31, r0
    3346:	83 9f       	mul	r24, r19
    3348:	f0 0d       	add	r31, r0
    334a:	74 9f       	mul	r23, r20
    334c:	f0 0d       	add	r31, r0
    334e:	65 9f       	mul	r22, r21
    3350:	f0 0d       	add	r31, r0
    3352:	99 27       	eor	r25, r25
    3354:	72 9f       	mul	r23, r18
    3356:	b0 0d       	add	r27, r0
    3358:	e1 1d       	adc	r30, r1
    335a:	f9 1f       	adc	r31, r25
    335c:	63 9f       	mul	r22, r19
    335e:	b0 0d       	add	r27, r0
    3360:	e1 1d       	adc	r30, r1
    3362:	f9 1f       	adc	r31, r25
    3364:	bd 01       	movw	r22, r26
    3366:	cf 01       	movw	r24, r30
    3368:	11 24       	eor	r1, r1
    336a:	08 95       	ret

0000336c <__udivmodsi4>:
    336c:	a1 e2       	ldi	r26, 0x21	; 33
    336e:	1a 2e       	mov	r1, r26
    3370:	aa 1b       	sub	r26, r26
    3372:	bb 1b       	sub	r27, r27
    3374:	fd 01       	movw	r30, r26
    3376:	0d c0       	rjmp	.+26     	; 0x3392 <__udivmodsi4_ep>

00003378 <__udivmodsi4_loop>:
    3378:	aa 1f       	adc	r26, r26
    337a:	bb 1f       	adc	r27, r27
    337c:	ee 1f       	adc	r30, r30
    337e:	ff 1f       	adc	r31, r31
    3380:	a2 17       	cp	r26, r18
    3382:	b3 07       	cpc	r27, r19
    3384:	e4 07       	cpc	r30, r20
    3386:	f5 07       	cpc	r31, r21
    3388:	20 f0       	brcs	.+8      	; 0x3392 <__udivmodsi4_ep>
    338a:	a2 1b       	sub	r26, r18
    338c:	b3 0b       	sbc	r27, r19
    338e:	e4 0b       	sbc	r30, r20
    3390:	f5 0b       	sbc	r31, r21

00003392 <__udivmodsi4_ep>:
    3392:	66 1f       	adc	r22, r22
    3394:	77 1f       	adc	r23, r23
    3396:	88 1f       	adc	r24, r24
    3398:	99 1f       	adc	r25, r25
    339a:	1a 94       	dec	r1
    339c:	69 f7       	brne	.-38     	; 0x3378 <__udivmodsi4_loop>
    339e:	60 95       	com	r22
    33a0:	70 95       	com	r23
    33a2:	80 95       	com	r24
    33a4:	90 95       	com	r25
    33a6:	9b 01       	movw	r18, r22
    33a8:	ac 01       	movw	r20, r24
    33aa:	bd 01       	movw	r22, r26
    33ac:	cf 01       	movw	r24, r30
    33ae:	08 95       	ret

000033b0 <__prologue_saves__>:
    33b0:	2f 92       	push	r2
    33b2:	3f 92       	push	r3
    33b4:	4f 92       	push	r4
    33b6:	5f 92       	push	r5
    33b8:	6f 92       	push	r6
    33ba:	7f 92       	push	r7
    33bc:	8f 92       	push	r8
    33be:	9f 92       	push	r9
    33c0:	af 92       	push	r10
    33c2:	bf 92       	push	r11
    33c4:	cf 92       	push	r12
    33c6:	df 92       	push	r13
    33c8:	ef 92       	push	r14
    33ca:	ff 92       	push	r15
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
    33d0:	cf 93       	push	r28
    33d2:	df 93       	push	r29
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	ca 1b       	sub	r28, r26
    33da:	db 0b       	sbc	r29, r27
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	09 94       	ijmp

000033e8 <__epilogue_restores__>:
    33e8:	2a 88       	ldd	r2, Y+18	; 0x12
    33ea:	39 88       	ldd	r3, Y+17	; 0x11
    33ec:	48 88       	ldd	r4, Y+16	; 0x10
    33ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    33f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    33f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    33f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    33f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    33f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    33fa:	b9 84       	ldd	r11, Y+9	; 0x09
    33fc:	c8 84       	ldd	r12, Y+8	; 0x08
    33fe:	df 80       	ldd	r13, Y+7	; 0x07
    3400:	ee 80       	ldd	r14, Y+6	; 0x06
    3402:	fd 80       	ldd	r15, Y+5	; 0x05
    3404:	0c 81       	ldd	r16, Y+4	; 0x04
    3406:	1b 81       	ldd	r17, Y+3	; 0x03
    3408:	aa 81       	ldd	r26, Y+2	; 0x02
    340a:	b9 81       	ldd	r27, Y+1	; 0x01
    340c:	ce 0f       	add	r28, r30
    340e:	d1 1d       	adc	r29, r1
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	ed 01       	movw	r28, r26
    341c:	08 95       	ret

0000341e <strlen>:
    341e:	fc 01       	movw	r30, r24
    3420:	01 90       	ld	r0, Z+
    3422:	00 20       	and	r0, r0
    3424:	e9 f7       	brne	.-6      	; 0x3420 <strlen+0x2>
    3426:	80 95       	com	r24
    3428:	90 95       	com	r25
    342a:	8e 0f       	add	r24, r30
    342c:	9f 1f       	adc	r25, r31
    342e:	08 95       	ret

00003430 <sprintf>:
    3430:	ae e0       	ldi	r26, 0x0E	; 14
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	ee e1       	ldi	r30, 0x1E	; 30
    3436:	fa e1       	ldi	r31, 0x1A	; 26
    3438:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x1c>
    343c:	0d 89       	ldd	r16, Y+21	; 0x15
    343e:	1e 89       	ldd	r17, Y+22	; 0x16
    3440:	86 e0       	ldi	r24, 0x06	; 6
    3442:	8c 83       	std	Y+4, r24	; 0x04
    3444:	1a 83       	std	Y+2, r17	; 0x02
    3446:	09 83       	std	Y+1, r16	; 0x01
    3448:	8f ef       	ldi	r24, 0xFF	; 255
    344a:	9f e7       	ldi	r25, 0x7F	; 127
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	9e 01       	movw	r18, r28
    3452:	27 5e       	subi	r18, 0xE7	; 231
    3454:	3f 4f       	sbci	r19, 0xFF	; 255
    3456:	ce 01       	movw	r24, r28
    3458:	01 96       	adiw	r24, 0x01	; 1
    345a:	6f 89       	ldd	r22, Y+23	; 0x17
    345c:	78 8d       	ldd	r23, Y+24	; 0x18
    345e:	a9 01       	movw	r20, r18
    3460:	0e 94 3c 1a 	call	0x3478	; 0x3478 <vfprintf>
    3464:	2f 81       	ldd	r18, Y+7	; 0x07
    3466:	38 85       	ldd	r19, Y+8	; 0x08
    3468:	02 0f       	add	r16, r18
    346a:	13 1f       	adc	r17, r19
    346c:	f8 01       	movw	r30, r16
    346e:	10 82       	st	Z, r1
    3470:	2e 96       	adiw	r28, 0x0e	; 14
    3472:	e4 e0       	ldi	r30, 0x04	; 4
    3474:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x1c>

00003478 <vfprintf>:
    3478:	ab e0       	ldi	r26, 0x0B	; 11
    347a:	b0 e0       	ldi	r27, 0x00	; 0
    347c:	e2 e4       	ldi	r30, 0x42	; 66
    347e:	fa e1       	ldi	r31, 0x1A	; 26
    3480:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__>
    3484:	3c 01       	movw	r6, r24
    3486:	2b 01       	movw	r4, r22
    3488:	5a 01       	movw	r10, r20
    348a:	fc 01       	movw	r30, r24
    348c:	17 82       	std	Z+7, r1	; 0x07
    348e:	16 82       	std	Z+6, r1	; 0x06
    3490:	83 81       	ldd	r24, Z+3	; 0x03
    3492:	81 fd       	sbrc	r24, 1
    3494:	03 c0       	rjmp	.+6      	; 0x349c <vfprintf+0x24>
    3496:	6f ef       	ldi	r22, 0xFF	; 255
    3498:	7f ef       	ldi	r23, 0xFF	; 255
    349a:	c6 c1       	rjmp	.+908    	; 0x3828 <vfprintf+0x3b0>
    349c:	9a e0       	ldi	r25, 0x0A	; 10
    349e:	89 2e       	mov	r8, r25
    34a0:	1e 01       	movw	r2, r28
    34a2:	08 94       	sec
    34a4:	21 1c       	adc	r2, r1
    34a6:	31 1c       	adc	r3, r1
    34a8:	f3 01       	movw	r30, r6
    34aa:	23 81       	ldd	r18, Z+3	; 0x03
    34ac:	f2 01       	movw	r30, r4
    34ae:	23 fd       	sbrc	r18, 3
    34b0:	85 91       	lpm	r24, Z+
    34b2:	23 ff       	sbrs	r18, 3
    34b4:	81 91       	ld	r24, Z+
    34b6:	2f 01       	movw	r4, r30
    34b8:	88 23       	and	r24, r24
    34ba:	09 f4       	brne	.+2      	; 0x34be <vfprintf+0x46>
    34bc:	b2 c1       	rjmp	.+868    	; 0x3822 <vfprintf+0x3aa>
    34be:	85 32       	cpi	r24, 0x25	; 37
    34c0:	39 f4       	brne	.+14     	; 0x34d0 <vfprintf+0x58>
    34c2:	23 fd       	sbrc	r18, 3
    34c4:	85 91       	lpm	r24, Z+
    34c6:	23 ff       	sbrs	r18, 3
    34c8:	81 91       	ld	r24, Z+
    34ca:	2f 01       	movw	r4, r30
    34cc:	85 32       	cpi	r24, 0x25	; 37
    34ce:	29 f4       	brne	.+10     	; 0x34da <vfprintf+0x62>
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	b3 01       	movw	r22, r6
    34d4:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    34d8:	e7 cf       	rjmp	.-50     	; 0x34a8 <vfprintf+0x30>
    34da:	98 2f       	mov	r25, r24
    34dc:	ff 24       	eor	r15, r15
    34de:	ee 24       	eor	r14, r14
    34e0:	99 24       	eor	r9, r9
    34e2:	ff e1       	ldi	r31, 0x1F	; 31
    34e4:	ff 15       	cp	r31, r15
    34e6:	d0 f0       	brcs	.+52     	; 0x351c <vfprintf+0xa4>
    34e8:	9b 32       	cpi	r25, 0x2B	; 43
    34ea:	69 f0       	breq	.+26     	; 0x3506 <vfprintf+0x8e>
    34ec:	9c 32       	cpi	r25, 0x2C	; 44
    34ee:	28 f4       	brcc	.+10     	; 0x34fa <vfprintf+0x82>
    34f0:	90 32       	cpi	r25, 0x20	; 32
    34f2:	59 f0       	breq	.+22     	; 0x350a <vfprintf+0x92>
    34f4:	93 32       	cpi	r25, 0x23	; 35
    34f6:	91 f4       	brne	.+36     	; 0x351c <vfprintf+0xa4>
    34f8:	0e c0       	rjmp	.+28     	; 0x3516 <vfprintf+0x9e>
    34fa:	9d 32       	cpi	r25, 0x2D	; 45
    34fc:	49 f0       	breq	.+18     	; 0x3510 <vfprintf+0x98>
    34fe:	90 33       	cpi	r25, 0x30	; 48
    3500:	69 f4       	brne	.+26     	; 0x351c <vfprintf+0xa4>
    3502:	41 e0       	ldi	r20, 0x01	; 1
    3504:	24 c0       	rjmp	.+72     	; 0x354e <vfprintf+0xd6>
    3506:	52 e0       	ldi	r21, 0x02	; 2
    3508:	f5 2a       	or	r15, r21
    350a:	84 e0       	ldi	r24, 0x04	; 4
    350c:	f8 2a       	or	r15, r24
    350e:	28 c0       	rjmp	.+80     	; 0x3560 <vfprintf+0xe8>
    3510:	98 e0       	ldi	r25, 0x08	; 8
    3512:	f9 2a       	or	r15, r25
    3514:	25 c0       	rjmp	.+74     	; 0x3560 <vfprintf+0xe8>
    3516:	e0 e1       	ldi	r30, 0x10	; 16
    3518:	fe 2a       	or	r15, r30
    351a:	22 c0       	rjmp	.+68     	; 0x3560 <vfprintf+0xe8>
    351c:	f7 fc       	sbrc	r15, 7
    351e:	29 c0       	rjmp	.+82     	; 0x3572 <vfprintf+0xfa>
    3520:	89 2f       	mov	r24, r25
    3522:	80 53       	subi	r24, 0x30	; 48
    3524:	8a 30       	cpi	r24, 0x0A	; 10
    3526:	70 f4       	brcc	.+28     	; 0x3544 <vfprintf+0xcc>
    3528:	f6 fe       	sbrs	r15, 6
    352a:	05 c0       	rjmp	.+10     	; 0x3536 <vfprintf+0xbe>
    352c:	98 9c       	mul	r9, r8
    352e:	90 2c       	mov	r9, r0
    3530:	11 24       	eor	r1, r1
    3532:	98 0e       	add	r9, r24
    3534:	15 c0       	rjmp	.+42     	; 0x3560 <vfprintf+0xe8>
    3536:	e8 9c       	mul	r14, r8
    3538:	e0 2c       	mov	r14, r0
    353a:	11 24       	eor	r1, r1
    353c:	e8 0e       	add	r14, r24
    353e:	f0 e2       	ldi	r31, 0x20	; 32
    3540:	ff 2a       	or	r15, r31
    3542:	0e c0       	rjmp	.+28     	; 0x3560 <vfprintf+0xe8>
    3544:	9e 32       	cpi	r25, 0x2E	; 46
    3546:	29 f4       	brne	.+10     	; 0x3552 <vfprintf+0xda>
    3548:	f6 fc       	sbrc	r15, 6
    354a:	6b c1       	rjmp	.+726    	; 0x3822 <vfprintf+0x3aa>
    354c:	40 e4       	ldi	r20, 0x40	; 64
    354e:	f4 2a       	or	r15, r20
    3550:	07 c0       	rjmp	.+14     	; 0x3560 <vfprintf+0xe8>
    3552:	9c 36       	cpi	r25, 0x6C	; 108
    3554:	19 f4       	brne	.+6      	; 0x355c <vfprintf+0xe4>
    3556:	50 e8       	ldi	r21, 0x80	; 128
    3558:	f5 2a       	or	r15, r21
    355a:	02 c0       	rjmp	.+4      	; 0x3560 <vfprintf+0xe8>
    355c:	98 36       	cpi	r25, 0x68	; 104
    355e:	49 f4       	brne	.+18     	; 0x3572 <vfprintf+0xfa>
    3560:	f2 01       	movw	r30, r4
    3562:	23 fd       	sbrc	r18, 3
    3564:	95 91       	lpm	r25, Z+
    3566:	23 ff       	sbrs	r18, 3
    3568:	91 91       	ld	r25, Z+
    356a:	2f 01       	movw	r4, r30
    356c:	99 23       	and	r25, r25
    356e:	09 f0       	breq	.+2      	; 0x3572 <vfprintf+0xfa>
    3570:	b8 cf       	rjmp	.-144    	; 0x34e2 <vfprintf+0x6a>
    3572:	89 2f       	mov	r24, r25
    3574:	85 54       	subi	r24, 0x45	; 69
    3576:	83 30       	cpi	r24, 0x03	; 3
    3578:	18 f0       	brcs	.+6      	; 0x3580 <vfprintf+0x108>
    357a:	80 52       	subi	r24, 0x20	; 32
    357c:	83 30       	cpi	r24, 0x03	; 3
    357e:	38 f4       	brcc	.+14     	; 0x358e <vfprintf+0x116>
    3580:	44 e0       	ldi	r20, 0x04	; 4
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	a4 0e       	add	r10, r20
    3586:	b5 1e       	adc	r11, r21
    3588:	5f e3       	ldi	r21, 0x3F	; 63
    358a:	59 83       	std	Y+1, r21	; 0x01
    358c:	0f c0       	rjmp	.+30     	; 0x35ac <vfprintf+0x134>
    358e:	93 36       	cpi	r25, 0x63	; 99
    3590:	31 f0       	breq	.+12     	; 0x359e <vfprintf+0x126>
    3592:	93 37       	cpi	r25, 0x73	; 115
    3594:	79 f0       	breq	.+30     	; 0x35b4 <vfprintf+0x13c>
    3596:	93 35       	cpi	r25, 0x53	; 83
    3598:	09 f0       	breq	.+2      	; 0x359c <vfprintf+0x124>
    359a:	56 c0       	rjmp	.+172    	; 0x3648 <vfprintf+0x1d0>
    359c:	20 c0       	rjmp	.+64     	; 0x35de <vfprintf+0x166>
    359e:	f5 01       	movw	r30, r10
    35a0:	80 81       	ld	r24, Z
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	42 e0       	ldi	r20, 0x02	; 2
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	a4 0e       	add	r10, r20
    35aa:	b5 1e       	adc	r11, r21
    35ac:	61 01       	movw	r12, r2
    35ae:	01 e0       	ldi	r16, 0x01	; 1
    35b0:	10 e0       	ldi	r17, 0x00	; 0
    35b2:	12 c0       	rjmp	.+36     	; 0x35d8 <vfprintf+0x160>
    35b4:	f5 01       	movw	r30, r10
    35b6:	c0 80       	ld	r12, Z
    35b8:	d1 80       	ldd	r13, Z+1	; 0x01
    35ba:	f6 fc       	sbrc	r15, 6
    35bc:	03 c0       	rjmp	.+6      	; 0x35c4 <vfprintf+0x14c>
    35be:	6f ef       	ldi	r22, 0xFF	; 255
    35c0:	7f ef       	ldi	r23, 0xFF	; 255
    35c2:	02 c0       	rjmp	.+4      	; 0x35c8 <vfprintf+0x150>
    35c4:	69 2d       	mov	r22, r9
    35c6:	70 e0       	ldi	r23, 0x00	; 0
    35c8:	42 e0       	ldi	r20, 0x02	; 2
    35ca:	50 e0       	ldi	r21, 0x00	; 0
    35cc:	a4 0e       	add	r10, r20
    35ce:	b5 1e       	adc	r11, r21
    35d0:	c6 01       	movw	r24, r12
    35d2:	0e 94 24 1c 	call	0x3848	; 0x3848 <strnlen>
    35d6:	8c 01       	movw	r16, r24
    35d8:	5f e7       	ldi	r21, 0x7F	; 127
    35da:	f5 22       	and	r15, r21
    35dc:	14 c0       	rjmp	.+40     	; 0x3606 <vfprintf+0x18e>
    35de:	f5 01       	movw	r30, r10
    35e0:	c0 80       	ld	r12, Z
    35e2:	d1 80       	ldd	r13, Z+1	; 0x01
    35e4:	f6 fc       	sbrc	r15, 6
    35e6:	03 c0       	rjmp	.+6      	; 0x35ee <vfprintf+0x176>
    35e8:	6f ef       	ldi	r22, 0xFF	; 255
    35ea:	7f ef       	ldi	r23, 0xFF	; 255
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <vfprintf+0x17a>
    35ee:	69 2d       	mov	r22, r9
    35f0:	70 e0       	ldi	r23, 0x00	; 0
    35f2:	42 e0       	ldi	r20, 0x02	; 2
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	a4 0e       	add	r10, r20
    35f8:	b5 1e       	adc	r11, r21
    35fa:	c6 01       	movw	r24, r12
    35fc:	0e 94 19 1c 	call	0x3832	; 0x3832 <strnlen_P>
    3600:	8c 01       	movw	r16, r24
    3602:	50 e8       	ldi	r21, 0x80	; 128
    3604:	f5 2a       	or	r15, r21
    3606:	f3 fe       	sbrs	r15, 3
    3608:	07 c0       	rjmp	.+14     	; 0x3618 <vfprintf+0x1a0>
    360a:	1a c0       	rjmp	.+52     	; 0x3640 <vfprintf+0x1c8>
    360c:	80 e2       	ldi	r24, 0x20	; 32
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	b3 01       	movw	r22, r6
    3612:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    3616:	ea 94       	dec	r14
    3618:	8e 2d       	mov	r24, r14
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	08 17       	cp	r16, r24
    361e:	19 07       	cpc	r17, r25
    3620:	a8 f3       	brcs	.-22     	; 0x360c <vfprintf+0x194>
    3622:	0e c0       	rjmp	.+28     	; 0x3640 <vfprintf+0x1c8>
    3624:	f6 01       	movw	r30, r12
    3626:	f7 fc       	sbrc	r15, 7
    3628:	85 91       	lpm	r24, Z+
    362a:	f7 fe       	sbrs	r15, 7
    362c:	81 91       	ld	r24, Z+
    362e:	6f 01       	movw	r12, r30
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	b3 01       	movw	r22, r6
    3634:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    3638:	e1 10       	cpse	r14, r1
    363a:	ea 94       	dec	r14
    363c:	01 50       	subi	r16, 0x01	; 1
    363e:	10 40       	sbci	r17, 0x00	; 0
    3640:	01 15       	cp	r16, r1
    3642:	11 05       	cpc	r17, r1
    3644:	79 f7       	brne	.-34     	; 0x3624 <vfprintf+0x1ac>
    3646:	ea c0       	rjmp	.+468    	; 0x381c <vfprintf+0x3a4>
    3648:	94 36       	cpi	r25, 0x64	; 100
    364a:	11 f0       	breq	.+4      	; 0x3650 <vfprintf+0x1d8>
    364c:	99 36       	cpi	r25, 0x69	; 105
    364e:	69 f5       	brne	.+90     	; 0x36aa <vfprintf+0x232>
    3650:	f7 fe       	sbrs	r15, 7
    3652:	08 c0       	rjmp	.+16     	; 0x3664 <vfprintf+0x1ec>
    3654:	f5 01       	movw	r30, r10
    3656:	20 81       	ld	r18, Z
    3658:	31 81       	ldd	r19, Z+1	; 0x01
    365a:	42 81       	ldd	r20, Z+2	; 0x02
    365c:	53 81       	ldd	r21, Z+3	; 0x03
    365e:	84 e0       	ldi	r24, 0x04	; 4
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	0a c0       	rjmp	.+20     	; 0x3678 <vfprintf+0x200>
    3664:	f5 01       	movw	r30, r10
    3666:	80 81       	ld	r24, Z
    3668:	91 81       	ldd	r25, Z+1	; 0x01
    366a:	9c 01       	movw	r18, r24
    366c:	44 27       	eor	r20, r20
    366e:	37 fd       	sbrc	r19, 7
    3670:	40 95       	com	r20
    3672:	54 2f       	mov	r21, r20
    3674:	82 e0       	ldi	r24, 0x02	; 2
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	a8 0e       	add	r10, r24
    367a:	b9 1e       	adc	r11, r25
    367c:	9f e6       	ldi	r25, 0x6F	; 111
    367e:	f9 22       	and	r15, r25
    3680:	57 ff       	sbrs	r21, 7
    3682:	09 c0       	rjmp	.+18     	; 0x3696 <vfprintf+0x21e>
    3684:	50 95       	com	r21
    3686:	40 95       	com	r20
    3688:	30 95       	com	r19
    368a:	21 95       	neg	r18
    368c:	3f 4f       	sbci	r19, 0xFF	; 255
    368e:	4f 4f       	sbci	r20, 0xFF	; 255
    3690:	5f 4f       	sbci	r21, 0xFF	; 255
    3692:	e0 e8       	ldi	r30, 0x80	; 128
    3694:	fe 2a       	or	r15, r30
    3696:	ca 01       	movw	r24, r20
    3698:	b9 01       	movw	r22, r18
    369a:	a1 01       	movw	r20, r2
    369c:	2a e0       	ldi	r18, 0x0A	; 10
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__ultoa_invert>
    36a4:	d8 2e       	mov	r13, r24
    36a6:	d2 18       	sub	r13, r2
    36a8:	40 c0       	rjmp	.+128    	; 0x372a <vfprintf+0x2b2>
    36aa:	95 37       	cpi	r25, 0x75	; 117
    36ac:	29 f4       	brne	.+10     	; 0x36b8 <vfprintf+0x240>
    36ae:	1f 2d       	mov	r17, r15
    36b0:	1f 7e       	andi	r17, 0xEF	; 239
    36b2:	2a e0       	ldi	r18, 0x0A	; 10
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	1d c0       	rjmp	.+58     	; 0x36f2 <vfprintf+0x27a>
    36b8:	1f 2d       	mov	r17, r15
    36ba:	19 7f       	andi	r17, 0xF9	; 249
    36bc:	9f 36       	cpi	r25, 0x6F	; 111
    36be:	61 f0       	breq	.+24     	; 0x36d8 <vfprintf+0x260>
    36c0:	90 37       	cpi	r25, 0x70	; 112
    36c2:	20 f4       	brcc	.+8      	; 0x36cc <vfprintf+0x254>
    36c4:	98 35       	cpi	r25, 0x58	; 88
    36c6:	09 f0       	breq	.+2      	; 0x36ca <vfprintf+0x252>
    36c8:	ac c0       	rjmp	.+344    	; 0x3822 <vfprintf+0x3aa>
    36ca:	0f c0       	rjmp	.+30     	; 0x36ea <vfprintf+0x272>
    36cc:	90 37       	cpi	r25, 0x70	; 112
    36ce:	39 f0       	breq	.+14     	; 0x36de <vfprintf+0x266>
    36d0:	98 37       	cpi	r25, 0x78	; 120
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <vfprintf+0x25e>
    36d4:	a6 c0       	rjmp	.+332    	; 0x3822 <vfprintf+0x3aa>
    36d6:	04 c0       	rjmp	.+8      	; 0x36e0 <vfprintf+0x268>
    36d8:	28 e0       	ldi	r18, 0x08	; 8
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	0a c0       	rjmp	.+20     	; 0x36f2 <vfprintf+0x27a>
    36de:	10 61       	ori	r17, 0x10	; 16
    36e0:	14 fd       	sbrc	r17, 4
    36e2:	14 60       	ori	r17, 0x04	; 4
    36e4:	20 e1       	ldi	r18, 0x10	; 16
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	04 c0       	rjmp	.+8      	; 0x36f2 <vfprintf+0x27a>
    36ea:	14 fd       	sbrc	r17, 4
    36ec:	16 60       	ori	r17, 0x06	; 6
    36ee:	20 e1       	ldi	r18, 0x10	; 16
    36f0:	32 e0       	ldi	r19, 0x02	; 2
    36f2:	17 ff       	sbrs	r17, 7
    36f4:	08 c0       	rjmp	.+16     	; 0x3706 <vfprintf+0x28e>
    36f6:	f5 01       	movw	r30, r10
    36f8:	60 81       	ld	r22, Z
    36fa:	71 81       	ldd	r23, Z+1	; 0x01
    36fc:	82 81       	ldd	r24, Z+2	; 0x02
    36fe:	93 81       	ldd	r25, Z+3	; 0x03
    3700:	44 e0       	ldi	r20, 0x04	; 4
    3702:	50 e0       	ldi	r21, 0x00	; 0
    3704:	08 c0       	rjmp	.+16     	; 0x3716 <vfprintf+0x29e>
    3706:	f5 01       	movw	r30, r10
    3708:	80 81       	ld	r24, Z
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	bc 01       	movw	r22, r24
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	42 e0       	ldi	r20, 0x02	; 2
    3714:	50 e0       	ldi	r21, 0x00	; 0
    3716:	a4 0e       	add	r10, r20
    3718:	b5 1e       	adc	r11, r21
    371a:	a1 01       	movw	r20, r2
    371c:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__ultoa_invert>
    3720:	d8 2e       	mov	r13, r24
    3722:	d2 18       	sub	r13, r2
    3724:	8f e7       	ldi	r24, 0x7F	; 127
    3726:	f8 2e       	mov	r15, r24
    3728:	f1 22       	and	r15, r17
    372a:	f6 fe       	sbrs	r15, 6
    372c:	0b c0       	rjmp	.+22     	; 0x3744 <vfprintf+0x2cc>
    372e:	5e ef       	ldi	r21, 0xFE	; 254
    3730:	f5 22       	and	r15, r21
    3732:	d9 14       	cp	r13, r9
    3734:	38 f4       	brcc	.+14     	; 0x3744 <vfprintf+0x2cc>
    3736:	f4 fe       	sbrs	r15, 4
    3738:	07 c0       	rjmp	.+14     	; 0x3748 <vfprintf+0x2d0>
    373a:	f2 fc       	sbrc	r15, 2
    373c:	05 c0       	rjmp	.+10     	; 0x3748 <vfprintf+0x2d0>
    373e:	8f ee       	ldi	r24, 0xEF	; 239
    3740:	f8 22       	and	r15, r24
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <vfprintf+0x2d0>
    3744:	1d 2d       	mov	r17, r13
    3746:	01 c0       	rjmp	.+2      	; 0x374a <vfprintf+0x2d2>
    3748:	19 2d       	mov	r17, r9
    374a:	f4 fe       	sbrs	r15, 4
    374c:	0d c0       	rjmp	.+26     	; 0x3768 <vfprintf+0x2f0>
    374e:	fe 01       	movw	r30, r28
    3750:	ed 0d       	add	r30, r13
    3752:	f1 1d       	adc	r31, r1
    3754:	80 81       	ld	r24, Z
    3756:	80 33       	cpi	r24, 0x30	; 48
    3758:	19 f4       	brne	.+6      	; 0x3760 <vfprintf+0x2e8>
    375a:	99 ee       	ldi	r25, 0xE9	; 233
    375c:	f9 22       	and	r15, r25
    375e:	08 c0       	rjmp	.+16     	; 0x3770 <vfprintf+0x2f8>
    3760:	1f 5f       	subi	r17, 0xFF	; 255
    3762:	f2 fe       	sbrs	r15, 2
    3764:	05 c0       	rjmp	.+10     	; 0x3770 <vfprintf+0x2f8>
    3766:	03 c0       	rjmp	.+6      	; 0x376e <vfprintf+0x2f6>
    3768:	8f 2d       	mov	r24, r15
    376a:	86 78       	andi	r24, 0x86	; 134
    376c:	09 f0       	breq	.+2      	; 0x3770 <vfprintf+0x2f8>
    376e:	1f 5f       	subi	r17, 0xFF	; 255
    3770:	0f 2d       	mov	r16, r15
    3772:	f3 fc       	sbrc	r15, 3
    3774:	14 c0       	rjmp	.+40     	; 0x379e <vfprintf+0x326>
    3776:	f0 fe       	sbrs	r15, 0
    3778:	0f c0       	rjmp	.+30     	; 0x3798 <vfprintf+0x320>
    377a:	1e 15       	cp	r17, r14
    377c:	10 f0       	brcs	.+4      	; 0x3782 <vfprintf+0x30a>
    377e:	9d 2c       	mov	r9, r13
    3780:	0b c0       	rjmp	.+22     	; 0x3798 <vfprintf+0x320>
    3782:	9d 2c       	mov	r9, r13
    3784:	9e 0c       	add	r9, r14
    3786:	91 1a       	sub	r9, r17
    3788:	1e 2d       	mov	r17, r14
    378a:	06 c0       	rjmp	.+12     	; 0x3798 <vfprintf+0x320>
    378c:	80 e2       	ldi	r24, 0x20	; 32
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	b3 01       	movw	r22, r6
    3792:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    3796:	1f 5f       	subi	r17, 0xFF	; 255
    3798:	1e 15       	cp	r17, r14
    379a:	c0 f3       	brcs	.-16     	; 0x378c <vfprintf+0x314>
    379c:	04 c0       	rjmp	.+8      	; 0x37a6 <vfprintf+0x32e>
    379e:	1e 15       	cp	r17, r14
    37a0:	10 f4       	brcc	.+4      	; 0x37a6 <vfprintf+0x32e>
    37a2:	e1 1a       	sub	r14, r17
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <vfprintf+0x330>
    37a6:	ee 24       	eor	r14, r14
    37a8:	04 ff       	sbrs	r16, 4
    37aa:	0f c0       	rjmp	.+30     	; 0x37ca <vfprintf+0x352>
    37ac:	80 e3       	ldi	r24, 0x30	; 48
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	b3 01       	movw	r22, r6
    37b2:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    37b6:	02 ff       	sbrs	r16, 2
    37b8:	1d c0       	rjmp	.+58     	; 0x37f4 <vfprintf+0x37c>
    37ba:	01 fd       	sbrc	r16, 1
    37bc:	03 c0       	rjmp	.+6      	; 0x37c4 <vfprintf+0x34c>
    37be:	88 e7       	ldi	r24, 0x78	; 120
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	0e c0       	rjmp	.+28     	; 0x37e0 <vfprintf+0x368>
    37c4:	88 e5       	ldi	r24, 0x58	; 88
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	0b c0       	rjmp	.+22     	; 0x37e0 <vfprintf+0x368>
    37ca:	80 2f       	mov	r24, r16
    37cc:	86 78       	andi	r24, 0x86	; 134
    37ce:	91 f0       	breq	.+36     	; 0x37f4 <vfprintf+0x37c>
    37d0:	01 ff       	sbrs	r16, 1
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <vfprintf+0x360>
    37d4:	8b e2       	ldi	r24, 0x2B	; 43
    37d6:	01 c0       	rjmp	.+2      	; 0x37da <vfprintf+0x362>
    37d8:	80 e2       	ldi	r24, 0x20	; 32
    37da:	f7 fc       	sbrc	r15, 7
    37dc:	8d e2       	ldi	r24, 0x2D	; 45
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	b3 01       	movw	r22, r6
    37e2:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    37e6:	06 c0       	rjmp	.+12     	; 0x37f4 <vfprintf+0x37c>
    37e8:	80 e3       	ldi	r24, 0x30	; 48
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	b3 01       	movw	r22, r6
    37ee:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    37f2:	9a 94       	dec	r9
    37f4:	d9 14       	cp	r13, r9
    37f6:	c0 f3       	brcs	.-16     	; 0x37e8 <vfprintf+0x370>
    37f8:	da 94       	dec	r13
    37fa:	f1 01       	movw	r30, r2
    37fc:	ed 0d       	add	r30, r13
    37fe:	f1 1d       	adc	r31, r1
    3800:	80 81       	ld	r24, Z
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	b3 01       	movw	r22, r6
    3806:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    380a:	dd 20       	and	r13, r13
    380c:	a9 f7       	brne	.-22     	; 0x37f8 <vfprintf+0x380>
    380e:	06 c0       	rjmp	.+12     	; 0x381c <vfprintf+0x3a4>
    3810:	80 e2       	ldi	r24, 0x20	; 32
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	b3 01       	movw	r22, r6
    3816:	0e 94 2f 1c 	call	0x385e	; 0x385e <fputc>
    381a:	ea 94       	dec	r14
    381c:	ee 20       	and	r14, r14
    381e:	c1 f7       	brne	.-16     	; 0x3810 <vfprintf+0x398>
    3820:	43 ce       	rjmp	.-890    	; 0x34a8 <vfprintf+0x30>
    3822:	f3 01       	movw	r30, r6
    3824:	66 81       	ldd	r22, Z+6	; 0x06
    3826:	77 81       	ldd	r23, Z+7	; 0x07
    3828:	cb 01       	movw	r24, r22
    382a:	2b 96       	adiw	r28, 0x0b	; 11
    382c:	e2 e1       	ldi	r30, 0x12	; 18
    382e:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__>

00003832 <strnlen_P>:
    3832:	fc 01       	movw	r30, r24
    3834:	05 90       	lpm	r0, Z+
    3836:	61 50       	subi	r22, 0x01	; 1
    3838:	70 40       	sbci	r23, 0x00	; 0
    383a:	01 10       	cpse	r0, r1
    383c:	d8 f7       	brcc	.-10     	; 0x3834 <strnlen_P+0x2>
    383e:	80 95       	com	r24
    3840:	90 95       	com	r25
    3842:	8e 0f       	add	r24, r30
    3844:	9f 1f       	adc	r25, r31
    3846:	08 95       	ret

00003848 <strnlen>:
    3848:	fc 01       	movw	r30, r24
    384a:	61 50       	subi	r22, 0x01	; 1
    384c:	70 40       	sbci	r23, 0x00	; 0
    384e:	01 90       	ld	r0, Z+
    3850:	01 10       	cpse	r0, r1
    3852:	d8 f7       	brcc	.-10     	; 0x384a <strnlen+0x2>
    3854:	80 95       	com	r24
    3856:	90 95       	com	r25
    3858:	8e 0f       	add	r24, r30
    385a:	9f 1f       	adc	r25, r31
    385c:	08 95       	ret

0000385e <fputc>:
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	8c 01       	movw	r16, r24
    3868:	eb 01       	movw	r28, r22
    386a:	8b 81       	ldd	r24, Y+3	; 0x03
    386c:	81 ff       	sbrs	r24, 1
    386e:	1b c0       	rjmp	.+54     	; 0x38a6 <fputc+0x48>
    3870:	82 ff       	sbrs	r24, 2
    3872:	0d c0       	rjmp	.+26     	; 0x388e <fputc+0x30>
    3874:	2e 81       	ldd	r18, Y+6	; 0x06
    3876:	3f 81       	ldd	r19, Y+7	; 0x07
    3878:	8c 81       	ldd	r24, Y+4	; 0x04
    387a:	9d 81       	ldd	r25, Y+5	; 0x05
    387c:	28 17       	cp	r18, r24
    387e:	39 07       	cpc	r19, r25
    3880:	64 f4       	brge	.+24     	; 0x389a <fputc+0x3c>
    3882:	e8 81       	ld	r30, Y
    3884:	f9 81       	ldd	r31, Y+1	; 0x01
    3886:	01 93       	st	Z+, r16
    3888:	f9 83       	std	Y+1, r31	; 0x01
    388a:	e8 83       	st	Y, r30
    388c:	06 c0       	rjmp	.+12     	; 0x389a <fputc+0x3c>
    388e:	e8 85       	ldd	r30, Y+8	; 0x08
    3890:	f9 85       	ldd	r31, Y+9	; 0x09
    3892:	80 2f       	mov	r24, r16
    3894:	09 95       	icall
    3896:	89 2b       	or	r24, r25
    3898:	31 f4       	brne	.+12     	; 0x38a6 <fputc+0x48>
    389a:	8e 81       	ldd	r24, Y+6	; 0x06
    389c:	9f 81       	ldd	r25, Y+7	; 0x07
    389e:	01 96       	adiw	r24, 0x01	; 1
    38a0:	9f 83       	std	Y+7, r25	; 0x07
    38a2:	8e 83       	std	Y+6, r24	; 0x06
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <fputc+0x4c>
    38a6:	0f ef       	ldi	r16, 0xFF	; 255
    38a8:	1f ef       	ldi	r17, 0xFF	; 255
    38aa:	c8 01       	movw	r24, r16
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	1f 91       	pop	r17
    38b2:	0f 91       	pop	r16
    38b4:	08 95       	ret

000038b6 <__ultoa_invert>:
    38b6:	fa 01       	movw	r30, r20
    38b8:	aa 27       	eor	r26, r26
    38ba:	28 30       	cpi	r18, 0x08	; 8
    38bc:	51 f1       	breq	.+84     	; 0x3912 <__ultoa_invert+0x5c>
    38be:	20 31       	cpi	r18, 0x10	; 16
    38c0:	81 f1       	breq	.+96     	; 0x3922 <__ultoa_invert+0x6c>
    38c2:	e8 94       	clt
    38c4:	6f 93       	push	r22
    38c6:	6e 7f       	andi	r22, 0xFE	; 254
    38c8:	6e 5f       	subi	r22, 0xFE	; 254
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	8f 4f       	sbci	r24, 0xFF	; 255
    38ce:	9f 4f       	sbci	r25, 0xFF	; 255
    38d0:	af 4f       	sbci	r26, 0xFF	; 255
    38d2:	b1 e0       	ldi	r27, 0x01	; 1
    38d4:	3e d0       	rcall	.+124    	; 0x3952 <__ultoa_invert+0x9c>
    38d6:	b4 e0       	ldi	r27, 0x04	; 4
    38d8:	3c d0       	rcall	.+120    	; 0x3952 <__ultoa_invert+0x9c>
    38da:	67 0f       	add	r22, r23
    38dc:	78 1f       	adc	r23, r24
    38de:	89 1f       	adc	r24, r25
    38e0:	9a 1f       	adc	r25, r26
    38e2:	a1 1d       	adc	r26, r1
    38e4:	68 0f       	add	r22, r24
    38e6:	79 1f       	adc	r23, r25
    38e8:	8a 1f       	adc	r24, r26
    38ea:	91 1d       	adc	r25, r1
    38ec:	a1 1d       	adc	r26, r1
    38ee:	6a 0f       	add	r22, r26
    38f0:	71 1d       	adc	r23, r1
    38f2:	81 1d       	adc	r24, r1
    38f4:	91 1d       	adc	r25, r1
    38f6:	a1 1d       	adc	r26, r1
    38f8:	20 d0       	rcall	.+64     	; 0x393a <__ultoa_invert+0x84>
    38fa:	09 f4       	brne	.+2      	; 0x38fe <__ultoa_invert+0x48>
    38fc:	68 94       	set
    38fe:	3f 91       	pop	r19
    3900:	2a e0       	ldi	r18, 0x0A	; 10
    3902:	26 9f       	mul	r18, r22
    3904:	11 24       	eor	r1, r1
    3906:	30 19       	sub	r19, r0
    3908:	30 5d       	subi	r19, 0xD0	; 208
    390a:	31 93       	st	Z+, r19
    390c:	de f6       	brtc	.-74     	; 0x38c4 <__ultoa_invert+0xe>
    390e:	cf 01       	movw	r24, r30
    3910:	08 95       	ret
    3912:	46 2f       	mov	r20, r22
    3914:	47 70       	andi	r20, 0x07	; 7
    3916:	40 5d       	subi	r20, 0xD0	; 208
    3918:	41 93       	st	Z+, r20
    391a:	b3 e0       	ldi	r27, 0x03	; 3
    391c:	0f d0       	rcall	.+30     	; 0x393c <__ultoa_invert+0x86>
    391e:	c9 f7       	brne	.-14     	; 0x3912 <__ultoa_invert+0x5c>
    3920:	f6 cf       	rjmp	.-20     	; 0x390e <__ultoa_invert+0x58>
    3922:	46 2f       	mov	r20, r22
    3924:	4f 70       	andi	r20, 0x0F	; 15
    3926:	40 5d       	subi	r20, 0xD0	; 208
    3928:	4a 33       	cpi	r20, 0x3A	; 58
    392a:	18 f0       	brcs	.+6      	; 0x3932 <__ultoa_invert+0x7c>
    392c:	49 5d       	subi	r20, 0xD9	; 217
    392e:	31 fd       	sbrc	r19, 1
    3930:	40 52       	subi	r20, 0x20	; 32
    3932:	41 93       	st	Z+, r20
    3934:	02 d0       	rcall	.+4      	; 0x393a <__ultoa_invert+0x84>
    3936:	a9 f7       	brne	.-22     	; 0x3922 <__ultoa_invert+0x6c>
    3938:	ea cf       	rjmp	.-44     	; 0x390e <__ultoa_invert+0x58>
    393a:	b4 e0       	ldi	r27, 0x04	; 4
    393c:	a6 95       	lsr	r26
    393e:	97 95       	ror	r25
    3940:	87 95       	ror	r24
    3942:	77 95       	ror	r23
    3944:	67 95       	ror	r22
    3946:	ba 95       	dec	r27
    3948:	c9 f7       	brne	.-14     	; 0x393c <__ultoa_invert+0x86>
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	61 05       	cpc	r22, r1
    394e:	71 05       	cpc	r23, r1
    3950:	08 95       	ret
    3952:	9b 01       	movw	r18, r22
    3954:	ac 01       	movw	r20, r24
    3956:	0a 2e       	mov	r0, r26
    3958:	06 94       	lsr	r0
    395a:	57 95       	ror	r21
    395c:	47 95       	ror	r20
    395e:	37 95       	ror	r19
    3960:	27 95       	ror	r18
    3962:	ba 95       	dec	r27
    3964:	c9 f7       	brne	.-14     	; 0x3958 <__ultoa_invert+0xa2>
    3966:	62 0f       	add	r22, r18
    3968:	73 1f       	adc	r23, r19
    396a:	84 1f       	adc	r24, r20
    396c:	95 1f       	adc	r25, r21
    396e:	a0 1d       	adc	r26, r0
    3970:	08 95       	ret

00003972 <_exit>:
    3972:	f8 94       	cli

00003974 <__stop_program>:
    3974:	ff cf       	rjmp	.-2      	; 0x3974 <__stop_program>
