
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004540  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00004540  000045d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080007c  0080007c  000045f0  2**0
                  ALLOC
  3 .stab         00004644  00000000  00000000  000045f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020e8  00000000  00000000  00008c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ad1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ae5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000afcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cc15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000db00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ea10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ec9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f46b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__vector_1>
       8:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_2>
       c:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <main>
      8a:	0c 94 9e 22 	jmp	0x453c	; 0x453c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c9 1f 	jmp	0x3f92	; 0x3f92 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Switch_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Switch_Init+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
     b58:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
     b5a:	1a 82       	std	Y+2, r1	; 0x02
     b5c:	19 82       	std	Y+1, r1	; 0x01
     b5e:	50 c0       	rjmp	.+160    	; 0xc00 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
     b60:	29 81       	ldd	r18, Y+1	; 0x01
     b62:	3a 81       	ldd	r19, Y+2	; 0x02
     b64:	c9 01       	movw	r24, r18
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	28 0f       	add	r18, r24
     b6c:	39 1f       	adc	r19, r25
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	fc 01       	movw	r30, r24
     b74:	e2 0f       	add	r30, r18
     b76:	f3 1f       	adc	r31, r19
     b78:	40 81       	ld	r20, Z
     b7a:	29 81       	ldd	r18, Y+1	; 0x01
     b7c:	3a 81       	ldd	r19, Y+2	; 0x02
     b7e:	c9 01       	movw	r24, r18
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	28 0f       	add	r18, r24
     b86:	39 1f       	adc	r19, r25
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	fc 01       	movw	r30, r24
     b8e:	e2 0f       	add	r30, r18
     b90:	f3 1f       	adc	r31, r19
     b92:	91 81       	ldd	r25, Z+1	; 0x01
     b94:	84 2f       	mov	r24, r20
     b96:	69 2f       	mov	r22, r25
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
     b9e:	29 81       	ldd	r18, Y+1	; 0x01
     ba0:	3a 81       	ldd	r19, Y+2	; 0x02
     ba2:	c9 01       	movw	r24, r18
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	28 0f       	add	r18, r24
     baa:	39 1f       	adc	r19, r25
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	fc 01       	movw	r30, r24
     bb2:	e2 0f       	add	r30, r18
     bb4:	f3 1f       	adc	r31, r19
     bb6:	50 81       	ld	r21, Z
     bb8:	29 81       	ldd	r18, Y+1	; 0x01
     bba:	3a 81       	ldd	r19, Y+2	; 0x02
     bbc:	c9 01       	movw	r24, r18
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	28 0f       	add	r18, r24
     bc4:	39 1f       	adc	r19, r25
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	fc 01       	movw	r30, r24
     bcc:	e2 0f       	add	r30, r18
     bce:	f3 1f       	adc	r31, r19
     bd0:	41 81       	ldd	r20, Z+1	; 0x01
     bd2:	29 81       	ldd	r18, Y+1	; 0x01
     bd4:	3a 81       	ldd	r19, Y+2	; 0x02
     bd6:	c9 01       	movw	r24, r18
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	28 0f       	add	r18, r24
     bde:	39 1f       	adc	r19, r25
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	fc 01       	movw	r30, r24
     be6:	e2 0f       	add	r30, r18
     be8:	f3 1f       	adc	r31, r19
     bea:	92 81       	ldd	r25, Z+2	; 0x02
     bec:	85 2f       	mov	r24, r21
     bee:	64 2f       	mov	r22, r20
     bf0:	49 2f       	mov	r20, r25
     bf2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	9a 83       	std	Y+2, r25	; 0x02
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	8d 81       	ldd	r24, Y+5	; 0x05
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	82 17       	cp	r24, r18
     c0c:	93 07       	cpc	r25, r19
     c0e:	0c f4       	brge	.+2      	; 0xc12 <Switch_Init+0xcc>
     c10:	a7 cf       	rjmp	.-178    	; 0xb60 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <Switch_GetValue+0x6>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <Switch_GetValue+0x8>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	7c 83       	std	Y+4, r23	; 0x04
     c34:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	80 81       	ld	r24, Z
     c3c:	e9 81       	ldd	r30, Y+1	; 0x01
     c3e:	fa 81       	ldd	r31, Y+2	; 0x02
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	2b 81       	ldd	r18, Y+3	; 0x03
     c44:	3c 81       	ldd	r19, Y+4	; 0x04
     c46:	69 2f       	mov	r22, r25
     c48:	a9 01       	movw	r20, r18
     c4a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <DIO_u8GetPinValue>
}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <LCD_setPinDirection+0x6>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <LCD_setPinDirection+0x8>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	6a 83       	std	Y+2, r22	; 0x02
     c6e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	88 30       	cpi	r24, 0x08	; 8
     c74:	08 f0       	brcs	.+2      	; 0xc78 <LCD_setPinDirection+0x1c>
     c76:	d5 c0       	rjmp	.+426    	; 0xe22 <LCD_setPinDirection+0x1c6>
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <LCD_setPinDirection+0x24>
     c7e:	d1 c0       	rjmp	.+418    	; 0xe22 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	3d 83       	std	Y+5, r19	; 0x05
     c88:	2c 83       	std	Y+4, r18	; 0x04
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	91 05       	cpc	r25, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <LCD_setPinDirection+0x3a>
     c94:	43 c0       	rjmp	.+134    	; 0xd1c <LCD_setPinDirection+0xc0>
     c96:	2c 81       	ldd	r18, Y+4	; 0x04
     c98:	3d 81       	ldd	r19, Y+5	; 0x05
     c9a:	22 30       	cpi	r18, 0x02	; 2
     c9c:	31 05       	cpc	r19, r1
     c9e:	2c f4       	brge	.+10     	; 0xcaa <LCD_setPinDirection+0x4e>
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
     ca2:	9d 81       	ldd	r25, Y+5	; 0x05
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	71 f0       	breq	.+28     	; 0xcc4 <LCD_setPinDirection+0x68>
     ca8:	bc c0       	rjmp	.+376    	; 0xe22 <LCD_setPinDirection+0x1c6>
     caa:	2c 81       	ldd	r18, Y+4	; 0x04
     cac:	3d 81       	ldd	r19, Y+5	; 0x05
     cae:	22 30       	cpi	r18, 0x02	; 2
     cb0:	31 05       	cpc	r19, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <LCD_setPinDirection+0x5a>
     cb4:	5f c0       	rjmp	.+190    	; 0xd74 <LCD_setPinDirection+0x118>
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <LCD_setPinDirection+0x66>
     cc0:	85 c0       	rjmp	.+266    	; 0xdcc <LCD_setPinDirection+0x170>
     cc2:	af c0       	rjmp	.+350    	; 0xe22 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	a1 f4       	brne	.+40     	; 0xcf2 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     cca:	aa e3       	ldi	r26, 0x3A	; 58
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ea e3       	ldi	r30, 0x3A	; 58
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <LCD_setPinDirection+0x8c>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <LCD_setPinDirection+0x88>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	98 c0       	rjmp	.+304    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
     cf2:	aa e3       	ldi	r26, 0x3A	; 58
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ea e3       	ldi	r30, 0x3A	; 58
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <LCD_setPinDirection+0xb4>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <LCD_setPinDirection+0xb0>
     d14:	80 95       	com	r24
     d16:	84 23       	and	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	83 c0       	rjmp	.+262    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	a1 f4       	brne	.+40     	; 0xd4a <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d22:	a7 e3       	ldi	r26, 0x37	; 55
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e3       	ldi	r30, 0x37	; 55
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <LCD_setPinDirection+0xe4>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <LCD_setPinDirection+0xe0>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	6c c0       	rjmp	.+216    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <LCD_setPinDirection+0x10c>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <LCD_setPinDirection+0x108>
     d6c:	80 95       	com	r24
     d6e:	84 23       	and	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	57 c0       	rjmp	.+174    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d7a:	a4 e3       	ldi	r26, 0x34	; 52
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e4 e3       	ldi	r30, 0x34	; 52
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <LCD_setPinDirection+0x13c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <LCD_setPinDirection+0x138>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	40 c0       	rjmp	.+128    	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
     da2:	a4 e3       	ldi	r26, 0x34	; 52
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e4 e3       	ldi	r30, 0x34	; 52
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <LCD_setPinDirection+0x164>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <LCD_setPinDirection+0x160>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	2b c0       	rjmp	.+86     	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     dd2:	a1 e3       	ldi	r26, 0x31	; 49
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e1 e3       	ldi	r30, 0x31	; 49
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <LCD_setPinDirection+0x194>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <LCD_setPinDirection+0x190>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
     dfa:	a1 e3       	ldi	r26, 0x31	; 49
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e1 e3       	ldi	r30, 0x31	; 49
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <LCD_setPinDirection+0x1bc>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <LCD_setPinDirection+0x1b8>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <LCD_setPinValue+0x6>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <LCD_setPinValue+0x8>
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	6a 83       	std	Y+2, r22	; 0x02
     e44:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <LCD_setPinValue+0x1c>
     e4c:	d5 c0       	rjmp	.+426    	; 0xff8 <LCD_setPinValue+0x1c6>
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	08 f0       	brcs	.+2      	; 0xe56 <LCD_setPinValue+0x24>
     e54:	d1 c0       	rjmp	.+418    	; 0xff8 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3d 83       	std	Y+5, r19	; 0x05
     e5e:	2c 83       	std	Y+4, r18	; 0x04
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <LCD_setPinValue+0x3a>
     e6a:	43 c0       	rjmp	.+134    	; 0xef2 <LCD_setPinValue+0xc0>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	2c f4       	brge	.+10     	; 0xe80 <LCD_setPinValue+0x4e>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	71 f0       	breq	.+28     	; 0xe9a <LCD_setPinValue+0x68>
     e7e:	bc c0       	rjmp	.+376    	; 0xff8 <LCD_setPinValue+0x1c6>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <LCD_setPinValue+0x5a>
     e8a:	5f c0       	rjmp	.+190    	; 0xf4a <LCD_setPinValue+0x118>
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	91 05       	cpc	r25, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <LCD_setPinValue+0x66>
     e96:	85 c0       	rjmp	.+266    	; 0xfa2 <LCD_setPinValue+0x170>
     e98:	af c0       	rjmp	.+350    	; 0xff8 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	a1 f4       	brne	.+40     	; 0xec8 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ea0:	ab e3       	ldi	r26, 0x3B	; 59
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	eb e3       	ldi	r30, 0x3B	; 59
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <LCD_setPinValue+0x8c>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <LCD_setPinValue+0x88>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	98 c0       	rjmp	.+304    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
     ec8:	ab e3       	ldi	r26, 0x3B	; 59
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e3       	ldi	r30, 0x3B	; 59
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <LCD_setPinValue+0xb4>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <LCD_setPinValue+0xb0>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	83 c0       	rjmp	.+262    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	a1 f4       	brne	.+40     	; 0xf20 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ef8:	a8 e3       	ldi	r26, 0x38	; 56
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e8 e3       	ldi	r30, 0x38	; 56
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <LCD_setPinValue+0xe4>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <LCD_setPinValue+0xe0>
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	6c c0       	rjmp	.+216    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
     f20:	a8 e3       	ldi	r26, 0x38	; 56
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e8 e3       	ldi	r30, 0x38	; 56
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <LCD_setPinValue+0x10c>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <LCD_setPinValue+0x108>
     f42:	80 95       	com	r24
     f44:	84 23       	and	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	57 c0       	rjmp	.+174    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	a1 f4       	brne	.+40     	; 0xf78 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <LCD_setPinValue+0x13c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <LCD_setPinValue+0x138>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	40 c0       	rjmp	.+128    	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
     f78:	a5 e3       	ldi	r26, 0x35	; 53
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e3       	ldi	r30, 0x35	; 53
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <LCD_setPinValue+0x164>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <LCD_setPinValue+0x160>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	2b c0       	rjmp	.+86     	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	a1 f4       	brne	.+40     	; 0xfd0 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fa8:	a2 e3       	ldi	r26, 0x32	; 50
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e2 e3       	ldi	r30, 0x32	; 50
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <LCD_setPinValue+0x194>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <LCD_setPinValue+0x190>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
     fd0:	a2 e3       	ldi	r26, 0x32	; 50
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e2 e3       	ldi	r30, 0x32	; 50
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <LCD_setPinValue+0x1bc>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <LCD_setPinValue+0x1b8>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <LCD_getPinValue+0x6>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <LCD_getPinValue+0x8>
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    101a:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	08 f0       	brcs	.+2      	; 0x1024 <LCD_getPinValue+0x1c>
    1022:	84 c0       	rjmp	.+264    	; 0x112c <LCD_getPinValue+0x124>
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	08 f0       	brcs	.+2      	; 0x102c <LCD_getPinValue+0x24>
    102a:	80 c0       	rjmp	.+256    	; 0x112c <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	3d 83       	std	Y+5, r19	; 0x05
    1034:	2c 83       	std	Y+4, r18	; 0x04
    1036:	4c 81       	ldd	r20, Y+4	; 0x04
    1038:	5d 81       	ldd	r21, Y+5	; 0x05
    103a:	41 30       	cpi	r20, 0x01	; 1
    103c:	51 05       	cpc	r21, r1
    103e:	79 f1       	breq	.+94     	; 0x109e <LCD_getPinValue+0x96>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	91 05       	cpc	r25, r1
    1048:	34 f4       	brge	.+12     	; 0x1056 <LCD_getPinValue+0x4e>
    104a:	2c 81       	ldd	r18, Y+4	; 0x04
    104c:	3d 81       	ldd	r19, Y+5	; 0x05
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	69 f0       	breq	.+26     	; 0x106e <LCD_getPinValue+0x66>
    1054:	6b c0       	rjmp	.+214    	; 0x112c <LCD_getPinValue+0x124>
    1056:	4c 81       	ldd	r20, Y+4	; 0x04
    1058:	5d 81       	ldd	r21, Y+5	; 0x05
    105a:	42 30       	cpi	r20, 0x02	; 2
    105c:	51 05       	cpc	r21, r1
    105e:	b9 f1       	breq	.+110    	; 0x10ce <LCD_getPinValue+0xc6>
    1060:	8c 81       	ldd	r24, Y+4	; 0x04
    1062:	9d 81       	ldd	r25, Y+5	; 0x05
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <LCD_getPinValue+0x64>
    106a:	49 c0       	rjmp	.+146    	; 0x10fe <LCD_getPinValue+0xf6>
    106c:	5f c0       	rjmp	.+190    	; 0x112c <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    106e:	e9 e3       	ldi	r30, 0x39	; 57
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a9 01       	movw	r20, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <LCD_getPinValue+0x7e>
    1082:	55 95       	asr	r21
    1084:	47 95       	ror	r20
    1086:	8a 95       	dec	r24
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <LCD_getPinValue+0x7a>
    108a:	ca 01       	movw	r24, r20
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	90 70       	andi	r25, 0x00	; 0
    1090:	88 23       	and	r24, r24
    1092:	19 f0       	breq	.+6      	; 0x109a <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	49 c0       	rjmp	.+146    	; 0x112c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    109a:	19 82       	std	Y+1, r1	; 0x01
    109c:	47 c0       	rjmp	.+142    	; 0x112c <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    109e:	e6 e3       	ldi	r30, 0x36	; 54
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <LCD_getPinValue+0xae>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <LCD_getPinValue+0xaa>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	88 23       	and	r24, r24
    10c2:	19 f0       	breq	.+6      	; 0x10ca <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	31 c0       	rjmp	.+98     	; 0x112c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10ca:	19 82       	std	Y+1, r1	; 0x01
    10cc:	2f c0       	rjmp	.+94     	; 0x112c <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10ce:	e3 e3       	ldi	r30, 0x33	; 51
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <LCD_getPinValue+0xde>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <LCD_getPinValue+0xda>
    10ea:	ca 01       	movw	r24, r20
    10ec:	81 70       	andi	r24, 0x01	; 1
    10ee:	90 70       	andi	r25, 0x00	; 0
    10f0:	88 23       	and	r24, r24
    10f2:	19 f0       	breq	.+6      	; 0x10fa <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	19 c0       	rjmp	.+50     	; 0x112c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	17 c0       	rjmp	.+46     	; 0x112c <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    10fe:	e0 e3       	ldi	r30, 0x30	; 48
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <LCD_getPinValue+0x10e>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <LCD_getPinValue+0x10a>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	88 23       	and	r24, r24
    1122:	19 f0       	breq	.+6      	; 0x112a <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	01 c0       	rjmp	.+2      	; 0x112c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    112a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    112c:	89 81       	ldd	r24, Y+1	; 0x01
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <LCD_setPortDirection+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <LCD_setPortDirection+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	84 30       	cpi	r24, 0x04	; 4
    1152:	90 f5       	brcc	.+100    	; 0x11b8 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3c 83       	std	Y+4, r19	; 0x04
    115c:	2b 83       	std	Y+3, r18	; 0x03
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	d1 f0       	breq	.+52     	; 0x119c <LCD_setPortDirection+0x5e>
    1168:	2b 81       	ldd	r18, Y+3	; 0x03
    116a:	3c 81       	ldd	r19, Y+4	; 0x04
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <LCD_setPortDirection+0x3e>
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f0       	breq	.+24     	; 0x1192 <LCD_setPortDirection+0x54>
    117a:	1e c0       	rjmp	.+60     	; 0x11b8 <LCD_setPortDirection+0x7a>
    117c:	2b 81       	ldd	r18, Y+3	; 0x03
    117e:	3c 81       	ldd	r19, Y+4	; 0x04
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <LCD_setPortDirection+0x68>
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <LCD_setPortDirection+0x72>
    1190:	13 c0       	rjmp	.+38     	; 0x11b8 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1192:	ea e3       	ldi	r30, 0x3A	; 58
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	80 83       	st	Z, r24
    119a:	0e c0       	rjmp	.+28     	; 0x11b8 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    119c:	e7 e3       	ldi	r30, 0x37	; 55
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11a6:	e4 e3       	ldi	r30, 0x34	; 52
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 83       	st	Z, r24
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11b0:	e1 e3       	ldi	r30, 0x31	; 49
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <LCD_setPortValue+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <LCD_setPortValue+0x8>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	90 f5       	brcc	.+100    	; 0x1240 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	3c 83       	std	Y+4, r19	; 0x04
    11e4:	2b 83       	std	Y+3, r18	; 0x03
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	d1 f0       	breq	.+52     	; 0x1224 <LCD_setPortValue+0x5e>
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	3c 81       	ldd	r19, Y+4	; 0x04
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <LCD_setPortValue+0x3e>
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	61 f0       	breq	.+24     	; 0x121a <LCD_setPortValue+0x54>
    1202:	1e c0       	rjmp	.+60     	; 0x1240 <LCD_setPortValue+0x7a>
    1204:	2b 81       	ldd	r18, Y+3	; 0x03
    1206:	3c 81       	ldd	r19, Y+4	; 0x04
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	81 f0       	breq	.+32     	; 0x122e <LCD_setPortValue+0x68>
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <LCD_setPortValue+0x72>
    1218:	13 c0       	rjmp	.+38     	; 0x1240 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 83       	st	Z, r24
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1224:	e8 e3       	ldi	r30, 0x38	; 56
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1238:	e2 e3       	ldi	r30, 0x32	; 50
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <LCD_getPortValue+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <LCD_getPortValue+0x8>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    125c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	90 f5       	brcc	.+100    	; 0x12c8 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3c 83       	std	Y+4, r19	; 0x04
    126c:	2b 83       	std	Y+3, r18	; 0x03
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	d1 f0       	breq	.+52     	; 0x12ac <LCD_getPortValue+0x5e>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	2c f4       	brge	.+10     	; 0x128c <LCD_getPortValue+0x3e>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	61 f0       	breq	.+24     	; 0x12a2 <LCD_getPortValue+0x54>
    128a:	1e c0       	rjmp	.+60     	; 0x12c8 <LCD_getPortValue+0x7a>
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3c 81       	ldd	r19, Y+4	; 0x04
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	81 f0       	breq	.+32     	; 0x12b6 <LCD_getPortValue+0x68>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <LCD_getPortValue+0x72>
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12a2:	e9 e3       	ldi	r30, 0x39	; 57
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	0e c0       	rjmp	.+28     	; 0x12c8 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12ac:	e6 e3       	ldi	r30, 0x36	; 54
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12b6:	e3 e3       	ldi	r30, 0x33	; 51
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12c0:	e0 e3       	ldi	r30, 0x30	; 48
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    12e0:	af e5       	ldi	r26, 0x5F	; 95
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ef e5       	ldi	r30, 0x5F	; 95
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 68       	ori	r24, 0x80	; 128
    12ec:	8c 93       	st	X, r24
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    12fc:	af e5       	ldi	r26, 0x5F	; 95
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	ef e5       	ldi	r30, 0x5F	; 95
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8f 77       	andi	r24, 0x7F	; 127
    1308:	8c 93       	st	X, r24
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <setCallBack+0x6>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	fc 01       	movw	r30, r24
    132e:	e4 58       	subi	r30, 0x84	; 132
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    134e:	a5 e5       	ldi	r26, 0x55	; 85
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e5 e5       	ldi	r30, 0x55	; 85
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8e 7f       	andi	r24, 0xFE	; 254
    135a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    135c:	a5 e5       	ldi	r26, 0x55	; 85
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e5       	ldi	r30, 0x55	; 85
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8d 7f       	andi	r24, 0xFD	; 253
    1368:	8c 93       	st	X, r24
}
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	82 60       	ori	r24, 0x02	; 2
    1384:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	8e 7f       	andi	r24, 0xFE	; 254
    1392:	8c 93       	st	X, r24
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    13a2:	a5 e5       	ldi	r26, 0x55	; 85
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e5 e5       	ldi	r30, 0x55	; 85
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8d 7f       	andi	r24, 0xFD	; 253
    13ae:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    13b0:	a5 e5       	ldi	r26, 0x55	; 85
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e5       	ldi	r30, 0x55	; 85
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	8c 93       	st	X, r24
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    13cc:	a5 e5       	ldi	r26, 0x55	; 85
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e5       	ldi	r30, 0x55	; 85
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	82 60       	ori	r24, 0x02	; 2
    13d8:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    13da:	a5 e5       	ldi	r26, 0x55	; 85
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e5       	ldi	r30, 0x55	; 85
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	81 60       	ori	r24, 0x01	; 1
    13e6:	8c 93       	st	X, r24
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    13f6:	a5 e5       	ldi	r26, 0x55	; 85
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e5       	ldi	r30, 0x55	; 85
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8b 7f       	andi	r24, 0xFB	; 251
    1402:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1404:	a5 e5       	ldi	r26, 0x55	; 85
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e5 e5       	ldi	r30, 0x55	; 85
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	87 7f       	andi	r24, 0xF7	; 247
    1410:	8c 93       	st	X, r24
}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1420:	a5 e5       	ldi	r26, 0x55	; 85
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e5 e5       	ldi	r30, 0x55	; 85
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	88 60       	ori	r24, 0x08	; 8
    142c:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    142e:	a5 e5       	ldi	r26, 0x55	; 85
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e5       	ldi	r30, 0x55	; 85
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8b 7f       	andi	r24, 0xFB	; 251
    143a:	8c 93       	st	X, r24
}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    144a:	a5 e5       	ldi	r26, 0x55	; 85
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e5 e5       	ldi	r30, 0x55	; 85
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	87 7f       	andi	r24, 0xF7	; 247
    1456:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1458:	a5 e5       	ldi	r26, 0x55	; 85
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e5 e5       	ldi	r30, 0x55	; 85
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	84 60       	ori	r24, 0x04	; 4
    1464:	8c 93       	st	X, r24
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1474:	a5 e5       	ldi	r26, 0x55	; 85
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e5       	ldi	r30, 0x55	; 85
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	88 60       	ori	r24, 0x08	; 8
    1480:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1482:	a5 e5       	ldi	r26, 0x55	; 85
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e5 e5       	ldi	r30, 0x55	; 85
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	84 60       	ori	r24, 0x04	; 4
    148e:	8c 93       	st	X, r24
}
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    149e:	a4 e5       	ldi	r26, 0x54	; 84
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e4 e5       	ldi	r30, 0x54	; 84
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 64       	ori	r24, 0x40	; 64
    14aa:	8c 93       	st	X, r24
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    14ba:	a4 e5       	ldi	r26, 0x54	; 84
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e4 e5       	ldi	r30, 0x54	; 84
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8f 7b       	andi	r24, 0xBF	; 191
    14c6:	8c 93       	st	X, r24
}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_AnyLogicalChange_MODE();
    14d6:	0e 94 cd 09 	call	0x139a	; 0x139a <EXTI0_AnyLogicalChange_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    14da:	ab e5       	ldi	r26, 0x5B	; 91
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e5       	ldi	r30, 0x5B	; 91
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 64       	ori	r24, 0x40	; 64
    14e6:	8c 93       	st	X, r24
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    14f6:	0e 94 21 0a 	call	0x1442	; 0x1442 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    14fa:	ab e5       	ldi	r26, 0x5B	; 91
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	eb e5       	ldi	r30, 0x5B	; 91
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	8c 93       	st	X, r24
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <EXTI_voidEnable>:


void EXTI_voidEnable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Mode){
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	2a 97       	sbiw	r28, 0x0a	; 10
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_EXTI_Index){
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3a 87       	std	Y+10, r19	; 0x0a
    152e:	29 87       	std	Y+9, r18	; 0x09
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	e9 f1       	breq	.+122    	; 0x15b4 <EXTI_voidEnable+0xa6>
    153a:	29 85       	ldd	r18, Y+9	; 0x09
    153c:	3a 85       	ldd	r19, Y+10	; 0x0a
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <EXTI_voidEnable+0x38>
    1544:	69 c0       	rjmp	.+210    	; 0x1618 <EXTI_voidEnable+0x10a>
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	09 f0       	breq	.+2      	; 0x1550 <EXTI_voidEnable+0x42>
    154e:	7f c0       	rjmp	.+254    	; 0x164e <EXTI_voidEnable+0x140>
		case EXTI0_Index:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1550:	ab e5       	ldi	r26, 0x5B	; 91
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	eb e5       	ldi	r30, 0x5B	; 91
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 64       	ori	r24, 0x40	; 64
    155c:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	38 87       	std	Y+8, r19	; 0x08
    1566:	2f 83       	std	Y+7, r18	; 0x07
    1568:	8f 81       	ldd	r24, Y+7	; 0x07
    156a:	98 85       	ldd	r25, Y+8	; 0x08
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	91 05       	cpc	r25, r1
    1570:	c1 f0       	breq	.+48     	; 0x15a2 <EXTI_voidEnable+0x94>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	2c f4       	brge	.+10     	; 0x1586 <EXTI_voidEnable+0x78>
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	98 85       	ldd	r25, Y+8	; 0x08
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	61 f0       	breq	.+24     	; 0x159c <EXTI_voidEnable+0x8e>
    1584:	64 c0       	rjmp	.+200    	; 0x164e <EXTI_voidEnable+0x140>
    1586:	2f 81       	ldd	r18, Y+7	; 0x07
    1588:	38 85       	ldd	r19, Y+8	; 0x08
    158a:	22 30       	cpi	r18, 0x02	; 2
    158c:	31 05       	cpc	r19, r1
    158e:	61 f0       	breq	.+24     	; 0x15a8 <EXTI_voidEnable+0x9a>
    1590:	8f 81       	ldd	r24, Y+7	; 0x07
    1592:	98 85       	ldd	r25, Y+8	; 0x08
    1594:	83 30       	cpi	r24, 0x03	; 3
    1596:	91 05       	cpc	r25, r1
    1598:	51 f0       	breq	.+20     	; 0x15ae <EXTI_voidEnable+0xa0>
    159a:	59 c0       	rjmp	.+178    	; 0x164e <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    159c:	0e 94 a3 09 	call	0x1346	; 0x1346 <EXTI0_LowLevel_MODE>
    15a0:	56 c0       	rjmp	.+172    	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    15a2:	0e 94 b8 09 	call	0x1370	; 0x1370 <EXTI0_FALLING_MODE>
    15a6:	53 c0       	rjmp	.+166    	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    15a8:	0e 94 cd 09 	call	0x139a	; 0x139a <EXTI0_AnyLogicalChange_MODE>
    15ac:	50 c0       	rjmp	.+160    	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    15ae:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <EXTI0_RISING_MODE>
    15b2:	4d c0       	rjmp	.+154    	; 0x164e <EXTI_voidEnable+0x140>
			}
			break;

		case EXTI1_Index:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    15b4:	ab e5       	ldi	r26, 0x5B	; 91
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	eb e5       	ldi	r30, 0x5B	; 91
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 68       	ori	r24, 0x80	; 128
    15c0:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3e 83       	std	Y+6, r19	; 0x06
    15ca:	2d 83       	std	Y+5, r18	; 0x05
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	c1 f0       	breq	.+48     	; 0x1606 <EXTI_voidEnable+0xf8>
    15d6:	2d 81       	ldd	r18, Y+5	; 0x05
    15d8:	3e 81       	ldd	r19, Y+6	; 0x06
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <EXTI_voidEnable+0xdc>
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	61 f0       	breq	.+24     	; 0x1600 <EXTI_voidEnable+0xf2>
    15e8:	32 c0       	rjmp	.+100    	; 0x164e <EXTI_voidEnable+0x140>
    15ea:	2d 81       	ldd	r18, Y+5	; 0x05
    15ec:	3e 81       	ldd	r19, Y+6	; 0x06
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	61 f0       	breq	.+24     	; 0x160c <EXTI_voidEnable+0xfe>
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	91 05       	cpc	r25, r1
    15fc:	51 f0       	breq	.+20     	; 0x1612 <EXTI_voidEnable+0x104>
    15fe:	27 c0       	rjmp	.+78     	; 0x164e <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    1600:	0e 94 f7 09 	call	0x13ee	; 0x13ee <EXTI1_LowLevel_MODE>
    1604:	24 c0       	rjmp	.+72     	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    1606:	0e 94 0c 0a 	call	0x1418	; 0x1418 <EXTI1_FALLING_MODE>
    160a:	21 c0       	rjmp	.+66     	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    160c:	0e 94 21 0a 	call	0x1442	; 0x1442 <EXTI1_AnyLogicalChange_MODE>
    1610:	1e c0       	rjmp	.+60     	; 0x164e <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1612:	0e 94 36 0a 	call	0x146c	; 0x146c <EXTI1_RISING_MODE>
    1616:	1b c0       	rjmp	.+54     	; 0x164e <EXTI_voidEnable+0x140>
					break;
			}
			break;
		case EXTI2_Index:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1618:	ab e5       	ldi	r26, 0x5B	; 91
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e5       	ldi	r30, 0x5B	; 91
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 62       	ori	r24, 0x20	; 32
    1624:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3c 83       	std	Y+4, r19	; 0x04
    162e:	2b 83       	std	Y+3, r18	; 0x03
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	41 f0       	breq	.+16     	; 0x164a <EXTI_voidEnable+0x13c>
    163a:	2b 81       	ldd	r18, Y+3	; 0x03
    163c:	3c 81       	ldd	r19, Y+4	; 0x04
    163e:	23 30       	cpi	r18, 0x03	; 3
    1640:	31 05       	cpc	r19, r1
    1642:	29 f4       	brne	.+10     	; 0x164e <EXTI_voidEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1644:	0e 94 4b 0a 	call	0x1496	; 0x1496 <EXTI2_RISING_MODE>
    1648:	02 c0       	rjmp	.+4      	; 0x164e <EXTI_voidEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    164a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    164e:	2a 96       	adiw	r28, 0x0a	; 10
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8_EXTI_Index){
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <EXTI_voidDisable+0x6>
    1666:	0f 92       	push	r0
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTI_Index){
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3b 83       	std	Y+3, r19	; 0x03
    1676:	2a 83       	std	Y+2, r18	; 0x02
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	31 f0       	breq	.+12     	; 0x168c <EXTI_voidDisable+0x2c>
    1680:	2a 81       	ldd	r18, Y+2	; 0x02
    1682:	3b 81       	ldd	r19, Y+3	; 0x03
    1684:	21 30       	cpi	r18, 0x01	; 1
    1686:	31 05       	cpc	r19, r1
    1688:	49 f0       	breq	.+18     	; 0x169c <EXTI_voidDisable+0x3c>
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <EXTI_voidDisable+0x4a>
		case EXTI0_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    168c:	ab e5       	ldi	r26, 0x5B	; 91
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e5       	ldi	r30, 0x5B	; 91
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8f 7b       	andi	r24, 0xBF	; 191
    1698:	8c 93       	st	X, r24
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <EXTI_voidDisable+0x4a>
			break;

		case EXTI1_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    169c:	ab e5       	ldi	r26, 0x5B	; 91
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	eb e5       	ldi	r30, 0x5B	; 91
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 77       	andi	r24, 0x7F	; 127
    16a8:	8c 93       	st	X, r24
			break;
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    16b6:	1f 92       	push	r1
    16b8:	0f 92       	push	r0
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	0f 92       	push	r0
    16be:	11 24       	eor	r1, r1
    16c0:	2f 93       	push	r18
    16c2:	3f 93       	push	r19
    16c4:	4f 93       	push	r20
    16c6:	5f 93       	push	r21
    16c8:	6f 93       	push	r22
    16ca:	7f 93       	push	r23
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
    16d0:	af 93       	push	r26
    16d2:	bf 93       	push	r27
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI0_Index] != NULL){
    16e0:	80 91 7c 00 	lds	r24, 0x007C
    16e4:	90 91 7d 00 	lds	r25, 0x007D
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <__vector_1+0x40>
		EXTI[0]();
    16ec:	e0 91 7c 00 	lds	r30, 0x007C
    16f0:	f0 91 7d 00 	lds	r31, 0x007D
    16f4:	09 95       	icall
	}

}
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	ff 91       	pop	r31
    16fc:	ef 91       	pop	r30
    16fe:	bf 91       	pop	r27
    1700:	af 91       	pop	r26
    1702:	9f 91       	pop	r25
    1704:	8f 91       	pop	r24
    1706:	7f 91       	pop	r23
    1708:	6f 91       	pop	r22
    170a:	5f 91       	pop	r21
    170c:	4f 91       	pop	r20
    170e:	3f 91       	pop	r19
    1710:	2f 91       	pop	r18
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI1_Index] != NULL){
    1746:	80 91 7e 00 	lds	r24, 0x007E
    174a:	90 91 7f 00 	lds	r25, 0x007F
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	29 f0       	breq	.+10     	; 0x175c <__vector_2+0x40>
			EXTI[1]();
    1752:	e0 91 7e 00 	lds	r30, 0x007E
    1756:	f0 91 7f 00 	lds	r31, 0x007F
    175a:	09 95       	icall
	}

}
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	ff 91       	pop	r31
    1762:	ef 91       	pop	r30
    1764:	bf 91       	pop	r27
    1766:	af 91       	pop	r26
    1768:	9f 91       	pop	r25
    176a:	8f 91       	pop	r24
    176c:	7f 91       	pop	r23
    176e:	6f 91       	pop	r22
    1770:	5f 91       	pop	r21
    1772:	4f 91       	pop	r20
    1774:	3f 91       	pop	r19
    1776:	2f 91       	pop	r18
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f 90       	pop	r0
    177e:	1f 90       	pop	r1
    1780:	18 95       	reti

00001782 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	6f 93       	push	r22
    1796:	7f 93       	push	r23
    1798:	8f 93       	push	r24
    179a:	9f 93       	push	r25
    179c:	af 93       	push	r26
    179e:	bf 93       	push	r27
    17a0:	ef 93       	push	r30
    17a2:	ff 93       	push	r31
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI2_Index] != NULL){
    17ac:	80 91 80 00 	lds	r24, 0x0080
    17b0:	90 91 81 00 	lds	r25, 0x0081
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	29 f0       	breq	.+10     	; 0x17c2 <__vector_3+0x40>
			EXTI[2]();
    17b8:	e0 91 80 00 	lds	r30, 0x0080
    17bc:	f0 91 81 00 	lds	r31, 0x0081
    17c0:	09 95       	icall
	}

}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	0f 90       	pop	r0
    17e4:	1f 90       	pop	r1
    17e6:	18 95       	reti

000017e8 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    17f0:	ea e3       	ldi	r30, 0x3A	; 58
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    17f6:	e7 e3       	ldi	r30, 0x37	; 55
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    17fc:	e4 e3       	ldi	r30, 0x34	; 52
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1804:	e1 e3       	ldi	r30, 0x31	; 49
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 e3       	ldi	r24, 0x30	; 48
    180a:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    180c:	eb e3       	ldi	r30, 0x3B	; 59
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    1812:	e8 e3       	ldi	r30, 0x38	; 56
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    1818:	e5 e3       	ldi	r30, 0x35	; 53
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    181e:	e2 e3       	ldi	r30, 0x32	; 50
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	10 82       	st	Z, r1

}
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	2e 97       	sbiw	r28, 0x0e	; 14
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	8a 83       	std	Y+2, r24	; 0x02
    1840:	6b 83       	std	Y+3, r22	; 0x03
    1842:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	08 f0       	brcs	.+2      	; 0x1850 <DIO_u8SetPinDirection+0x26>
    184e:	0c c1       	rjmp	.+536    	; 0x1a68 <DIO_u8SetPinDirection+0x23e>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	88 30       	cpi	r24, 0x08	; 8
    1854:	08 f0       	brcs	.+2      	; 0x1858 <DIO_u8SetPinDirection+0x2e>
    1856:	08 c1       	rjmp	.+528    	; 0x1a68 <DIO_u8SetPinDirection+0x23e>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	21 f0       	breq	.+8      	; 0x1866 <DIO_u8SetPinDirection+0x3c>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	88 23       	and	r24, r24
    1862:	09 f0       	breq	.+2      	; 0x1866 <DIO_u8SetPinDirection+0x3c>
    1864:	01 c1       	rjmp	.+514    	; 0x1a68 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	3e 87       	std	Y+14, r19	; 0x0e
    186e:	2d 87       	std	Y+13, r18	; 0x0d
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	91 05       	cpc	r25, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <DIO_u8SetPinDirection+0x52>
    187a:	4f c0       	rjmp	.+158    	; 0x191a <DIO_u8SetPinDirection+0xf0>
    187c:	2d 85       	ldd	r18, Y+13	; 0x0d
    187e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1880:	22 30       	cpi	r18, 0x02	; 2
    1882:	31 05       	cpc	r19, r1
    1884:	2c f4       	brge	.+10     	; 0x1890 <DIO_u8SetPinDirection+0x66>
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	71 f0       	breq	.+28     	; 0x18aa <DIO_u8SetPinDirection+0x80>
    188e:	ed c0       	rjmp	.+474    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
    1890:	2d 85       	ldd	r18, Y+13	; 0x0d
    1892:	3e 85       	ldd	r19, Y+14	; 0x0e
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	09 f4       	brne	.+2      	; 0x189c <DIO_u8SetPinDirection+0x72>
    189a:	77 c0       	rjmp	.+238    	; 0x198a <DIO_u8SetPinDirection+0x160>
    189c:	8d 85       	ldd	r24, Y+13	; 0x0d
    189e:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a0:	83 30       	cpi	r24, 0x03	; 3
    18a2:	91 05       	cpc	r25, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <DIO_u8SetPinDirection+0x7e>
    18a6:	a9 c0       	rjmp	.+338    	; 0x19fa <DIO_u8SetPinDirection+0x1d0>
    18a8:	e0 c0       	rjmp	.+448    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3c 87       	std	Y+12, r19	; 0x0c
    18b2:	2b 87       	std	Y+11, r18	; 0x0b
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	d1 f0       	breq	.+52     	; 0x18f0 <DIO_u8SetPinDirection+0xc6>
    18bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    18be:	3c 85       	ldd	r19, Y+12	; 0x0c
    18c0:	21 30       	cpi	r18, 0x01	; 1
    18c2:	31 05       	cpc	r19, r1
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <DIO_u8SetPinDirection+0x9e>
    18c6:	d1 c0       	rjmp	.+418    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    18c8:	aa e3       	ldi	r26, 0x3A	; 58
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e3       	ldi	r30, 0x3A	; 58
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_u8SetPinDirection+0xbc>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_u8SetPinDirection+0xb8>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	bd c0       	rjmp	.+378    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    18f0:	aa e3       	ldi	r26, 0x3A	; 58
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ea e3       	ldi	r30, 0x3A	; 58
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8SetPinDirection+0xe4>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_u8SetPinDirection+0xe0>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	a8 c0       	rjmp	.+336    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	3a 87       	std	Y+10, r19	; 0x0a
    1922:	29 87       	std	Y+9, r18	; 0x09
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	d1 f0       	breq	.+52     	; 0x1960 <DIO_u8SetPinDirection+0x136>
    192c:	29 85       	ldd	r18, Y+9	; 0x09
    192e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1930:	21 30       	cpi	r18, 0x01	; 1
    1932:	31 05       	cpc	r19, r1
    1934:	09 f0       	breq	.+2      	; 0x1938 <DIO_u8SetPinDirection+0x10e>
    1936:	99 c0       	rjmp	.+306    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1938:	a7 e3       	ldi	r26, 0x37	; 55
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e7 e3       	ldi	r30, 0x37	; 55
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_u8SetPinDirection+0x12c>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_u8SetPinDirection+0x128>
    195a:	84 2b       	or	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	85 c0       	rjmp	.+266    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1960:	a7 e3       	ldi	r26, 0x37	; 55
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e7 e3       	ldi	r30, 0x37	; 55
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_u8SetPinDirection+0x154>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_u8SetPinDirection+0x150>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	70 c0       	rjmp	.+224    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	38 87       	std	Y+8, r19	; 0x08
    1992:	2f 83       	std	Y+7, r18	; 0x07
    1994:	8f 81       	ldd	r24, Y+7	; 0x07
    1996:	98 85       	ldd	r25, Y+8	; 0x08
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	d1 f0       	breq	.+52     	; 0x19d0 <DIO_u8SetPinDirection+0x1a6>
    199c:	2f 81       	ldd	r18, Y+7	; 0x07
    199e:	38 85       	ldd	r19, Y+8	; 0x08
    19a0:	21 30       	cpi	r18, 0x01	; 1
    19a2:	31 05       	cpc	r19, r1
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <DIO_u8SetPinDirection+0x17e>
    19a6:	61 c0       	rjmp	.+194    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    19a8:	a4 e3       	ldi	r26, 0x34	; 52
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e4 e3       	ldi	r30, 0x34	; 52
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_u8SetPinDirection+0x19c>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_u8SetPinDirection+0x198>
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	4d c0       	rjmp	.+154    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    19d0:	a4 e3       	ldi	r26, 0x34	; 52
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e4 e3       	ldi	r30, 0x34	; 52
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <DIO_u8SetPinDirection+0x1c4>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <DIO_u8SetPinDirection+0x1c0>
    19f2:	80 95       	com	r24
    19f4:	84 23       	and	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	38 c0       	rjmp	.+112    	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3e 83       	std	Y+6, r19	; 0x06
    1a02:	2d 83       	std	Y+5, r18	; 0x05
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	c9 f0       	breq	.+50     	; 0x1a3e <DIO_u8SetPinDirection+0x214>
    1a0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a10:	21 30       	cpi	r18, 0x01	; 1
    1a12:	31 05       	cpc	r19, r1
    1a14:	51 f5       	brne	.+84     	; 0x1a6a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1a16:	a1 e3       	ldi	r26, 0x31	; 49
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e1 e3       	ldi	r30, 0x31	; 49
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_u8SetPinDirection+0x20a>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_u8SetPinDirection+0x206>
    1a38:	84 2b       	or	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	16 c0       	rjmp	.+44     	; 0x1a6a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1a3e:	a1 e3       	ldi	r26, 0x31	; 49
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e1 e3       	ldi	r30, 0x31	; 49
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_u8SetPinDirection+0x232>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_u8SetPinDirection+0x22e>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1a68:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6c:	2e 96       	adiw	r28, 0x0e	; 14
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	2f 97       	sbiw	r28, 0x0f	; 15
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	8b 83       	std	Y+3, r24	; 0x03
    1a94:	6c 83       	std	Y+4, r22	; 0x04
    1a96:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	84 30       	cpi	r24, 0x04	; 4
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <DIO_u8SetPinValue+0x26>
    1aa2:	13 c1       	rjmp	.+550    	; 0x1cca <DIO_u8SetPinValue+0x24c>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <DIO_u8SetPinValue+0x2e>
    1aaa:	0f c1       	rjmp	.+542    	; 0x1cca <DIO_u8SetPinValue+0x24c>
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	88 23       	and	r24, r24
    1ab0:	21 f0       	breq	.+8      	; 0x1aba <DIO_u8SetPinValue+0x3c>
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <DIO_u8SetPinValue+0x3c>
    1ab8:	08 c1       	rjmp	.+528    	; 0x1cca <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3f 87       	std	Y+15, r19	; 0x0f
    1ac2:	2e 87       	std	Y+14, r18	; 0x0e
    1ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <DIO_u8SetPinValue+0x52>
    1ace:	50 c0       	rjmp	.+160    	; 0x1b70 <DIO_u8SetPinValue+0xf2>
    1ad0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ad2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <DIO_u8SetPinValue+0x66>
    1ada:	8e 85       	ldd	r24, Y+14	; 0x0e
    1adc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	71 f0       	breq	.+28     	; 0x1afe <DIO_u8SetPinValue+0x80>
    1ae2:	f4 c0       	rjmp	.+488    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
    1ae4:	2e 85       	ldd	r18, Y+14	; 0x0e
    1ae6:	3f 85       	ldd	r19, Y+15	; 0x0f
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <DIO_u8SetPinValue+0x72>
    1aee:	79 c0       	rjmp	.+242    	; 0x1be2 <DIO_u8SetPinValue+0x164>
    1af0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1af2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1af4:	83 30       	cpi	r24, 0x03	; 3
    1af6:	91 05       	cpc	r25, r1
    1af8:	09 f4       	brne	.+2      	; 0x1afc <DIO_u8SetPinValue+0x7e>
    1afa:	ad c0       	rjmp	.+346    	; 0x1c56 <DIO_u8SetPinValue+0x1d8>
    1afc:	e7 c0       	rjmp	.+462    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	3d 87       	std	Y+13, r19	; 0x0d
    1b06:	2c 87       	std	Y+12, r18	; 0x0c
    1b08:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	c9 f0       	breq	.+50     	; 0x1b42 <DIO_u8SetPinValue+0xc4>
    1b10:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b12:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b14:	21 30       	cpi	r18, 0x01	; 1
    1b16:	31 05       	cpc	r19, r1
    1b18:	49 f5       	brne	.+82     	; 0x1b6c <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1b1a:	ab e3       	ldi	r26, 0x3B	; 59
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	eb e3       	ldi	r30, 0x3B	; 59
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_u8SetPinValue+0xba>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_u8SetPinValue+0xb6>
    1b3c:	84 2b       	or	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	c5 c0       	rjmp	.+394    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1b42:	ab e3       	ldi	r26, 0x3B	; 59
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	eb e3       	ldi	r30, 0x3B	; 59
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_u8SetPinValue+0xe2>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_u8SetPinValue+0xde>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	b0 c0       	rjmp	.+352    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1b6c:	1a 82       	std	Y+2, r1	; 0x02
    1b6e:	ae c0       	rjmp	.+348    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	3b 87       	std	Y+11, r19	; 0x0b
    1b78:	2a 87       	std	Y+10, r18	; 0x0a
    1b7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	c9 f0       	breq	.+50     	; 0x1bb4 <DIO_u8SetPinValue+0x136>
    1b82:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b84:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b86:	21 30       	cpi	r18, 0x01	; 1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	49 f5       	brne	.+82     	; 0x1bde <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1b8c:	a8 e3       	ldi	r26, 0x38	; 56
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e8 e3       	ldi	r30, 0x38	; 56
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <DIO_u8SetPinValue+0x12c>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <DIO_u8SetPinValue+0x128>
    1bae:	84 2b       	or	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	8c c0       	rjmp	.+280    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1bb4:	a8 e3       	ldi	r26, 0x38	; 56
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e8 e3       	ldi	r30, 0x38	; 56
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_u8SetPinValue+0x154>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_u8SetPinValue+0x150>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	77 c0       	rjmp	.+238    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1bde:	1a 82       	std	Y+2, r1	; 0x02
    1be0:	75 c0       	rjmp	.+234    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	39 87       	std	Y+9, r19	; 0x09
    1bea:	28 87       	std	Y+8, r18	; 0x08
    1bec:	88 85       	ldd	r24, Y+8	; 0x08
    1bee:	99 85       	ldd	r25, Y+9	; 0x09
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	31 f0       	breq	.+12     	; 0x1c00 <DIO_u8SetPinValue+0x182>
    1bf4:	28 85       	ldd	r18, Y+8	; 0x08
    1bf6:	39 85       	ldd	r19, Y+9	; 0x09
    1bf8:	21 30       	cpi	r18, 0x01	; 1
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	b1 f0       	breq	.+44     	; 0x1c2a <DIO_u8SetPinValue+0x1ac>
    1bfe:	29 c0       	rjmp	.+82     	; 0x1c52 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1c00:	a5 e3       	ldi	r26, 0x35	; 53
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e5 e3       	ldi	r30, 0x35	; 53
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <DIO_u8SetPinValue+0x1a0>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <DIO_u8SetPinValue+0x19c>
    1c22:	80 95       	com	r24
    1c24:	84 23       	and	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	51 c0       	rjmp	.+162    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1c2a:	a5 e3       	ldi	r26, 0x35	; 53
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e5 e3       	ldi	r30, 0x35	; 53
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_u8SetPinValue+0x1ca>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_u8SetPinValue+0x1c6>
    1c4c:	84 2b       	or	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	3d c0       	rjmp	.+122    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1c52:	1a 82       	std	Y+2, r1	; 0x02
    1c54:	3b c0       	rjmp	.+118    	; 0x1ccc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	3f 83       	std	Y+7, r19	; 0x07
    1c5e:	2e 83       	std	Y+6, r18	; 0x06
    1c60:	8e 81       	ldd	r24, Y+6	; 0x06
    1c62:	9f 81       	ldd	r25, Y+7	; 0x07
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	31 f0       	breq	.+12     	; 0x1c74 <DIO_u8SetPinValue+0x1f6>
    1c68:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6c:	21 30       	cpi	r18, 0x01	; 1
    1c6e:	31 05       	cpc	r19, r1
    1c70:	b1 f0       	breq	.+44     	; 0x1c9e <DIO_u8SetPinValue+0x220>
    1c72:	29 c0       	rjmp	.+82     	; 0x1cc6 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1c74:	a5 e3       	ldi	r26, 0x35	; 53
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e5 e3       	ldi	r30, 0x35	; 53
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_u8SetPinValue+0x214>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_u8SetPinValue+0x210>
    1c96:	80 95       	com	r24
    1c98:	84 23       	and	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	17 c0       	rjmp	.+46     	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1c9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e2 e3       	ldi	r30, 0x32	; 50
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <DIO_u8SetPinValue+0x23e>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <DIO_u8SetPinValue+0x23a>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1cc6:	1a 82       	std	Y+2, r1	; 0x02
    1cc8:	01 c0       	rjmp	.+2      	; 0x1ccc <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    1cca:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cce:	2f 96       	adiw	r28, 0x0f	; 15
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	28 97       	sbiw	r28, 0x08	; 8
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
    1cf6:	6c 83       	std	Y+4, r22	; 0x04
    1cf8:	5e 83       	std	Y+6, r21	; 0x06
    1cfa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	84 30       	cpi	r24, 0x04	; 4
    1d04:	08 f0       	brcs	.+2      	; 0x1d08 <DIO_u8GetPinValue+0x28>
    1d06:	9f c0       	rjmp	.+318    	; 0x1e46 <DIO_u8GetPinValue+0x166>
    1d08:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0a:	88 30       	cpi	r24, 0x08	; 8
    1d0c:	08 f0       	brcs	.+2      	; 0x1d10 <DIO_u8GetPinValue+0x30>
    1d0e:	9b c0       	rjmp	.+310    	; 0x1e46 <DIO_u8GetPinValue+0x166>
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <DIO_u8GetPinValue+0x3a>
    1d18:	96 c0       	rjmp	.+300    	; 0x1e46 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	38 87       	std	Y+8, r19	; 0x08
    1d22:	2f 83       	std	Y+7, r18	; 0x07
    1d24:	4f 81       	ldd	r20, Y+7	; 0x07
    1d26:	58 85       	ldd	r21, Y+8	; 0x08
    1d28:	41 30       	cpi	r20, 0x01	; 1
    1d2a:	51 05       	cpc	r21, r1
    1d2c:	a9 f1       	breq	.+106    	; 0x1d98 <DIO_u8GetPinValue+0xb8>
    1d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d30:	98 85       	ldd	r25, Y+8	; 0x08
    1d32:	82 30       	cpi	r24, 0x02	; 2
    1d34:	91 05       	cpc	r25, r1
    1d36:	34 f4       	brge	.+12     	; 0x1d44 <DIO_u8GetPinValue+0x64>
    1d38:	2f 81       	ldd	r18, Y+7	; 0x07
    1d3a:	38 85       	ldd	r19, Y+8	; 0x08
    1d3c:	21 15       	cp	r18, r1
    1d3e:	31 05       	cpc	r19, r1
    1d40:	71 f0       	breq	.+28     	; 0x1d5e <DIO_u8GetPinValue+0x7e>
    1d42:	82 c0       	rjmp	.+260    	; 0x1e48 <DIO_u8GetPinValue+0x168>
    1d44:	4f 81       	ldd	r20, Y+7	; 0x07
    1d46:	58 85       	ldd	r21, Y+8	; 0x08
    1d48:	42 30       	cpi	r20, 0x02	; 2
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <DIO_u8GetPinValue+0x70>
    1d4e:	41 c0       	rjmp	.+130    	; 0x1dd2 <DIO_u8GetPinValue+0xf2>
    1d50:	8f 81       	ldd	r24, Y+7	; 0x07
    1d52:	98 85       	ldd	r25, Y+8	; 0x08
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	91 05       	cpc	r25, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <DIO_u8GetPinValue+0x7c>
    1d5a:	58 c0       	rjmp	.+176    	; 0x1e0c <DIO_u8GetPinValue+0x12c>
    1d5c:	75 c0       	rjmp	.+234    	; 0x1e48 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    1d5e:	e9 e3       	ldi	r30, 0x39	; 57
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a9 01       	movw	r20, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <DIO_u8GetPinValue+0x96>
    1d72:	55 95       	asr	r21
    1d74:	47 95       	ror	r20
    1d76:	8a 95       	dec	r24
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <DIO_u8GetPinValue+0x92>
    1d7a:	ca 01       	movw	r24, r20
    1d7c:	81 70       	andi	r24, 0x01	; 1
    1d7e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	88 23       	and	r24, r24
    1d84:	21 f4       	brne	.+8      	; 0x1d8e <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1d86:	ed 81       	ldd	r30, Y+5	; 0x05
    1d88:	fe 81       	ldd	r31, Y+6	; 0x06
    1d8a:	10 82       	st	Z, r1
    1d8c:	5d c0       	rjmp	.+186    	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1d8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d90:	fe 81       	ldd	r31, Y+6	; 0x06
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	80 83       	st	Z, r24
    1d96:	58 c0       	rjmp	.+176    	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    1d98:	e6 e3       	ldi	r30, 0x36	; 54
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a9 01       	movw	r20, r18
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <DIO_u8GetPinValue+0xd0>
    1dac:	55 95       	asr	r21
    1dae:	47 95       	ror	r20
    1db0:	8a 95       	dec	r24
    1db2:	e2 f7       	brpl	.-8      	; 0x1dac <DIO_u8GetPinValue+0xcc>
    1db4:	ca 01       	movw	r24, r20
    1db6:	81 70       	andi	r24, 0x01	; 1
    1db8:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	88 23       	and	r24, r24
    1dbe:	21 f4       	brne	.+8      	; 0x1dc8 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1dc0:	ed 81       	ldd	r30, Y+5	; 0x05
    1dc2:	fe 81       	ldd	r31, Y+6	; 0x06
    1dc4:	10 82       	st	Z, r1
    1dc6:	40 c0       	rjmp	.+128    	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1dc8:	ed 81       	ldd	r30, Y+5	; 0x05
    1dca:	fe 81       	ldd	r31, Y+6	; 0x06
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	80 83       	st	Z, r24
    1dd0:	3b c0       	rjmp	.+118    	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    1dd2:	e3 e3       	ldi	r30, 0x33	; 51
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a9 01       	movw	r20, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_u8GetPinValue+0x10a>
    1de6:	55 95       	asr	r21
    1de8:	47 95       	ror	r20
    1dea:	8a 95       	dec	r24
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_u8GetPinValue+0x106>
    1dee:	ca 01       	movw	r24, r20
    1df0:	81 70       	andi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	88 23       	and	r24, r24
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1dfa:	ed 81       	ldd	r30, Y+5	; 0x05
    1dfc:	fe 81       	ldd	r31, Y+6	; 0x06
    1dfe:	10 82       	st	Z, r1
    1e00:	23 c0       	rjmp	.+70     	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1e02:	ed 81       	ldd	r30, Y+5	; 0x05
    1e04:	fe 81       	ldd	r31, Y+6	; 0x06
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	80 83       	st	Z, r24
    1e0a:	1e c0       	rjmp	.+60     	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    1e0c:	e0 e3       	ldi	r30, 0x30	; 48
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a9 01       	movw	r20, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <DIO_u8GetPinValue+0x144>
    1e20:	55 95       	asr	r21
    1e22:	47 95       	ror	r20
    1e24:	8a 95       	dec	r24
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <DIO_u8GetPinValue+0x140>
    1e28:	ca 01       	movw	r24, r20
    1e2a:	81 70       	andi	r24, 0x01	; 1
    1e2c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	88 23       	and	r24, r24
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1e34:	ed 81       	ldd	r30, Y+5	; 0x05
    1e36:	fe 81       	ldd	r31, Y+6	; 0x06
    1e38:	10 82       	st	Z, r1
    1e3a:	06 c0       	rjmp	.+12     	; 0x1e48 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1e3c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e3e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	80 83       	st	Z, r24
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1e46:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e4a:	28 96       	adiw	r28, 0x08	; 8
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <DIO_getPinValueWithoutPointer+0x6>
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <DIO_getPinValueWithoutPointer+0x8>
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    1e6e:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	88 30       	cpi	r24, 0x08	; 8
    1e74:	08 f0       	brcs	.+2      	; 0x1e78 <DIO_getPinValueWithoutPointer+0x1c>
    1e76:	6b c0       	rjmp	.+214    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <DIO_getPinValueWithoutPointer+0x24>
    1e7e:	67 c0       	rjmp	.+206    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	3d 83       	std	Y+5, r19	; 0x05
    1e88:	2c 83       	std	Y+4, r18	; 0x04
    1e8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e8e:	41 30       	cpi	r20, 0x01	; 1
    1e90:	51 05       	cpc	r21, r1
    1e92:	41 f1       	breq	.+80     	; 0x1ee4 <DIO_getPinValueWithoutPointer+0x88>
    1e94:	8c 81       	ldd	r24, Y+4	; 0x04
    1e96:	9d 81       	ldd	r25, Y+5	; 0x05
    1e98:	82 30       	cpi	r24, 0x02	; 2
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	34 f4       	brge	.+12     	; 0x1eaa <DIO_getPinValueWithoutPointer+0x4e>
    1e9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea2:	21 15       	cp	r18, r1
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	61 f0       	breq	.+24     	; 0x1ec0 <DIO_getPinValueWithoutPointer+0x64>
    1ea8:	52 c0       	rjmp	.+164    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
    1eaa:	4c 81       	ldd	r20, Y+4	; 0x04
    1eac:	5d 81       	ldd	r21, Y+5	; 0x05
    1eae:	42 30       	cpi	r20, 0x02	; 2
    1eb0:	51 05       	cpc	r21, r1
    1eb2:	51 f1       	breq	.+84     	; 0x1f08 <DIO_getPinValueWithoutPointer+0xac>
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	83 30       	cpi	r24, 0x03	; 3
    1eba:	91 05       	cpc	r25, r1
    1ebc:	b9 f1       	breq	.+110    	; 0x1f2c <DIO_getPinValueWithoutPointer+0xd0>
    1ebe:	47 c0       	rjmp	.+142    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    1ec0:	e9 e3       	ldi	r30, 0x39	; 57
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a9 01       	movw	r20, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <DIO_getPinValueWithoutPointer+0x7c>
    1ed4:	55 95       	asr	r21
    1ed6:	47 95       	ror	r20
    1ed8:	8a 95       	dec	r24
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <DIO_getPinValueWithoutPointer+0x78>
    1edc:	ca 01       	movw	r24, r20
    1ede:	81 70       	andi	r24, 0x01	; 1
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	35 c0       	rjmp	.+106    	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    1ee4:	e6 e3       	ldi	r30, 0x36	; 54
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a9 01       	movw	r20, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <DIO_getPinValueWithoutPointer+0xa0>
    1ef8:	55 95       	asr	r21
    1efa:	47 95       	ror	r20
    1efc:	8a 95       	dec	r24
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <DIO_getPinValueWithoutPointer+0x9c>
    1f00:	ca 01       	movw	r24, r20
    1f02:	81 70       	andi	r24, 0x01	; 1
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	23 c0       	rjmp	.+70     	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    1f08:	e3 e3       	ldi	r30, 0x33	; 51
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a9 01       	movw	r20, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_getPinValueWithoutPointer+0xc4>
    1f1c:	55 95       	asr	r21
    1f1e:	47 95       	ror	r20
    1f20:	8a 95       	dec	r24
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <DIO_getPinValueWithoutPointer+0xc0>
    1f24:	ca 01       	movw	r24, r20
    1f26:	81 70       	andi	r24, 0x01	; 1
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	11 c0       	rjmp	.+34     	; 0x1f4e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    1f2c:	e0 e3       	ldi	r30, 0x30	; 48
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	88 2f       	mov	r24, r24
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	a9 01       	movw	r20, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <DIO_getPinValueWithoutPointer+0xe8>
    1f40:	55 95       	asr	r21
    1f42:	47 95       	ror	r20
    1f44:	8a 95       	dec	r24
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <DIO_getPinValueWithoutPointer+0xe4>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	2d 97       	sbiw	r28, 0x0d	; 13
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	3c 87       	std	Y+12, r19	; 0x0c
    1f80:	2b 87       	std	Y+11, r18	; 0x0b
    1f82:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f84:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	91 05       	cpc	r25, r1
    1f8a:	71 f1       	breq	.+92     	; 0x1fe8 <DIO_u8SetPortDirection+0x88>
    1f8c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f8e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f90:	22 30       	cpi	r18, 0x02	; 2
    1f92:	31 05       	cpc	r19, r1
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <DIO_u8SetPortDirection+0x40>
    1f96:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f98:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f0       	breq	.+26     	; 0x1fb8 <DIO_u8SetPortDirection+0x58>
    1f9e:	6b c0       	rjmp	.+214    	; 0x2076 <DIO_u8SetPortDirection+0x116>
    1fa0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fa2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fa4:	22 30       	cpi	r18, 0x02	; 2
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	b9 f1       	breq	.+110    	; 0x2018 <DIO_u8SetPortDirection+0xb8>
    1faa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fac:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <DIO_u8SetPortDirection+0x56>
    1fb4:	49 c0       	rjmp	.+146    	; 0x2048 <DIO_u8SetPortDirection+0xe8>
    1fb6:	5f c0       	rjmp	.+190    	; 0x2076 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	3a 87       	std	Y+10, r19	; 0x0a
    1fc0:	29 87       	std	Y+9, r18	; 0x09
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	31 f0       	breq	.+12     	; 0x1fd6 <DIO_u8SetPortDirection+0x76>
    1fca:	29 85       	ldd	r18, Y+9	; 0x09
    1fcc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fce:	21 30       	cpi	r18, 0x01	; 1
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	29 f0       	breq	.+10     	; 0x1fde <DIO_u8SetPortDirection+0x7e>
    1fd4:	50 c0       	rjmp	.+160    	; 0x2076 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    1fd6:	ea e3       	ldi	r30, 0x3A	; 58
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	10 82       	st	Z, r1
    1fdc:	4c c0       	rjmp	.+152    	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    1fde:	ea e3       	ldi	r30, 0x3A	; 58
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	8f ef       	ldi	r24, 0xFF	; 255
    1fe4:	80 83       	st	Z, r24
    1fe6:	47 c0       	rjmp	.+142    	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	38 87       	std	Y+8, r19	; 0x08
    1ff0:	2f 83       	std	Y+7, r18	; 0x07
    1ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff4:	98 85       	ldd	r25, Y+8	; 0x08
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	31 f0       	breq	.+12     	; 0x2006 <DIO_u8SetPortDirection+0xa6>
    1ffa:	2f 81       	ldd	r18, Y+7	; 0x07
    1ffc:	38 85       	ldd	r19, Y+8	; 0x08
    1ffe:	21 30       	cpi	r18, 0x01	; 1
    2000:	31 05       	cpc	r19, r1
    2002:	29 f0       	breq	.+10     	; 0x200e <DIO_u8SetPortDirection+0xae>
    2004:	38 c0       	rjmp	.+112    	; 0x2076 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    2006:	e7 e3       	ldi	r30, 0x37	; 55
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	10 82       	st	Z, r1
    200c:	34 c0       	rjmp	.+104    	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    200e:	e7 e3       	ldi	r30, 0x37	; 55
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	8f ef       	ldi	r24, 0xFF	; 255
    2014:	80 83       	st	Z, r24
    2016:	2f c0       	rjmp	.+94     	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	3e 83       	std	Y+6, r19	; 0x06
    2020:	2d 83       	std	Y+5, r18	; 0x05
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	31 f0       	breq	.+12     	; 0x2036 <DIO_u8SetPortDirection+0xd6>
    202a:	2d 81       	ldd	r18, Y+5	; 0x05
    202c:	3e 81       	ldd	r19, Y+6	; 0x06
    202e:	21 30       	cpi	r18, 0x01	; 1
    2030:	31 05       	cpc	r19, r1
    2032:	29 f0       	breq	.+10     	; 0x203e <DIO_u8SetPortDirection+0xde>
    2034:	20 c0       	rjmp	.+64     	; 0x2076 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    2036:	e4 e3       	ldi	r30, 0x34	; 52
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	10 82       	st	Z, r1
    203c:	1c c0       	rjmp	.+56     	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    203e:	e4 e3       	ldi	r30, 0x34	; 52
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	80 83       	st	Z, r24
    2046:	17 c0       	rjmp	.+46     	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3c 83       	std	Y+4, r19	; 0x04
    2050:	2b 83       	std	Y+3, r18	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	31 f0       	breq	.+12     	; 0x2066 <DIO_u8SetPortDirection+0x106>
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	21 30       	cpi	r18, 0x01	; 1
    2060:	31 05       	cpc	r19, r1
    2062:	29 f0       	breq	.+10     	; 0x206e <DIO_u8SetPortDirection+0x10e>
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2066:	e1 e3       	ldi	r30, 0x31	; 49
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	10 82       	st	Z, r1
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    206e:	e1 e3       	ldi	r30, 0x31	; 49
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    2076:	2d 96       	adiw	r28, 0x0d	; 13
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	2d 97       	sbiw	r28, 0x0d	; 13
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	8a 83       	std	Y+2, r24	; 0x02
    209e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <DIO_u8SetPortValue+0x24>
    20aa:	80 c0       	rjmp	.+256    	; 0x21ac <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3d 87       	std	Y+13, r19	; 0x0d
    20b4:	2c 87       	std	Y+12, r18	; 0x0c
    20b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    20b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	71 f1       	breq	.+92     	; 0x211c <DIO_u8SetPortValue+0x94>
    20c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    20c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <DIO_u8SetPortValue+0x4c>
    20ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    20cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f0       	breq	.+26     	; 0x20ec <DIO_u8SetPortValue+0x64>
    20d2:	6d c0       	rjmp	.+218    	; 0x21ae <DIO_u8SetPortValue+0x126>
    20d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    20d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	b9 f1       	breq	.+110    	; 0x214c <DIO_u8SetPortValue+0xc4>
    20de:	8c 85       	ldd	r24, Y+12	; 0x0c
    20e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    20e2:	83 30       	cpi	r24, 0x03	; 3
    20e4:	91 05       	cpc	r25, r1
    20e6:	09 f4       	brne	.+2      	; 0x20ea <DIO_u8SetPortValue+0x62>
    20e8:	49 c0       	rjmp	.+146    	; 0x217c <DIO_u8SetPortValue+0xf4>
    20ea:	61 c0       	rjmp	.+194    	; 0x21ae <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	3b 87       	std	Y+11, r19	; 0x0b
    20f4:	2a 87       	std	Y+10, r18	; 0x0a
    20f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	31 f0       	breq	.+12     	; 0x210a <DIO_u8SetPortValue+0x82>
    20fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2100:	3b 85       	ldd	r19, Y+11	; 0x0b
    2102:	21 30       	cpi	r18, 0x01	; 1
    2104:	31 05       	cpc	r19, r1
    2106:	29 f0       	breq	.+10     	; 0x2112 <DIO_u8SetPortValue+0x8a>
    2108:	52 c0       	rjmp	.+164    	; 0x21ae <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    210a:	eb e3       	ldi	r30, 0x3B	; 59
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	10 82       	st	Z, r1
    2110:	4e c0       	rjmp	.+156    	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    2112:	eb e3       	ldi	r30, 0x3B	; 59
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	8f ef       	ldi	r24, 0xFF	; 255
    2118:	80 83       	st	Z, r24
    211a:	49 c0       	rjmp	.+146    	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	39 87       	std	Y+9, r19	; 0x09
    2124:	28 87       	std	Y+8, r18	; 0x08
    2126:	88 85       	ldd	r24, Y+8	; 0x08
    2128:	99 85       	ldd	r25, Y+9	; 0x09
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	31 f0       	breq	.+12     	; 0x213a <DIO_u8SetPortValue+0xb2>
    212e:	28 85       	ldd	r18, Y+8	; 0x08
    2130:	39 85       	ldd	r19, Y+9	; 0x09
    2132:	21 30       	cpi	r18, 0x01	; 1
    2134:	31 05       	cpc	r19, r1
    2136:	29 f0       	breq	.+10     	; 0x2142 <DIO_u8SetPortValue+0xba>
    2138:	3a c0       	rjmp	.+116    	; 0x21ae <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    213a:	e8 e3       	ldi	r30, 0x38	; 56
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	10 82       	st	Z, r1
    2140:	36 c0       	rjmp	.+108    	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2142:	e8 e3       	ldi	r30, 0x38	; 56
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	8f ef       	ldi	r24, 0xFF	; 255
    2148:	80 83       	st	Z, r24
    214a:	31 c0       	rjmp	.+98     	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	3f 83       	std	Y+7, r19	; 0x07
    2154:	2e 83       	std	Y+6, r18	; 0x06
    2156:	8e 81       	ldd	r24, Y+6	; 0x06
    2158:	9f 81       	ldd	r25, Y+7	; 0x07
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	31 f0       	breq	.+12     	; 0x216a <DIO_u8SetPortValue+0xe2>
    215e:	2e 81       	ldd	r18, Y+6	; 0x06
    2160:	3f 81       	ldd	r19, Y+7	; 0x07
    2162:	21 30       	cpi	r18, 0x01	; 1
    2164:	31 05       	cpc	r19, r1
    2166:	29 f0       	breq	.+10     	; 0x2172 <DIO_u8SetPortValue+0xea>
    2168:	22 c0       	rjmp	.+68     	; 0x21ae <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    216a:	e5 e3       	ldi	r30, 0x35	; 53
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	10 82       	st	Z, r1
    2170:	1e c0       	rjmp	.+60     	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2172:	e5 e3       	ldi	r30, 0x35	; 53
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	80 83       	st	Z, r24
    217a:	19 c0       	rjmp	.+50     	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	3d 83       	std	Y+5, r19	; 0x05
    2184:	2c 83       	std	Y+4, r18	; 0x04
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	9d 81       	ldd	r25, Y+5	; 0x05
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	31 f0       	breq	.+12     	; 0x219a <DIO_u8SetPortValue+0x112>
    218e:	2c 81       	ldd	r18, Y+4	; 0x04
    2190:	3d 81       	ldd	r19, Y+5	; 0x05
    2192:	21 30       	cpi	r18, 0x01	; 1
    2194:	31 05       	cpc	r19, r1
    2196:	29 f0       	breq	.+10     	; 0x21a2 <DIO_u8SetPortValue+0x11a>
    2198:	0a c0       	rjmp	.+20     	; 0x21ae <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    219a:	e2 e3       	ldi	r30, 0x32	; 50
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	10 82       	st	Z, r1
    21a0:	06 c0       	rjmp	.+12     	; 0x21ae <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    21a2:	e2 e3       	ldi	r30, 0x32	; 50
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	80 83       	st	Z, r24
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    21ac:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b0:	2d 96       	adiw	r28, 0x0d	; 13
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <DIO_u8GetPortValue+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <DIO_u8GetPortValue+0x8>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <DIO_u8GetPortValue+0xa>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	8a 83       	std	Y+2, r24	; 0x02
    21d2:	7c 83       	std	Y+4, r23	; 0x04
    21d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	08 f0       	brcs	.+2      	; 0x21e2 <DIO_u8GetPortValue+0x20>
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <DIO_u8GetPortValue+0x9e>
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	d9 f1       	breq	.+118    	; 0x2260 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	3e 83       	std	Y+6, r19	; 0x06
    21f2:	2d 83       	std	Y+5, r18	; 0x05
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	91 05       	cpc	r25, r1
    21fc:	e1 f0       	breq	.+56     	; 0x2236 <DIO_u8GetPortValue+0x74>
    21fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2200:	3e 81       	ldd	r19, Y+6	; 0x06
    2202:	22 30       	cpi	r18, 0x02	; 2
    2204:	31 05       	cpc	r19, r1
    2206:	2c f4       	brge	.+10     	; 0x2212 <DIO_u8GetPortValue+0x50>
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	61 f0       	breq	.+24     	; 0x2228 <DIO_u8GetPortValue+0x66>
    2210:	28 c0       	rjmp	.+80     	; 0x2262 <DIO_u8GetPortValue+0xa0>
    2212:	2d 81       	ldd	r18, Y+5	; 0x05
    2214:	3e 81       	ldd	r19, Y+6	; 0x06
    2216:	22 30       	cpi	r18, 0x02	; 2
    2218:	31 05       	cpc	r19, r1
    221a:	a1 f0       	breq	.+40     	; 0x2244 <DIO_u8GetPortValue+0x82>
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	91 05       	cpc	r25, r1
    2224:	b1 f0       	breq	.+44     	; 0x2252 <DIO_u8GetPortValue+0x90>
    2226:	1d c0       	rjmp	.+58     	; 0x2262 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    2228:	e9 e3       	ldi	r30, 0x39	; 57
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	eb 81       	ldd	r30, Y+3	; 0x03
    2230:	fc 81       	ldd	r31, Y+4	; 0x04
    2232:	80 83       	st	Z, r24
    2234:	16 c0       	rjmp	.+44     	; 0x2262 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    2236:	e6 e3       	ldi	r30, 0x36	; 54
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	eb 81       	ldd	r30, Y+3	; 0x03
    223e:	fc 81       	ldd	r31, Y+4	; 0x04
    2240:	80 83       	st	Z, r24
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    2244:	e3 e3       	ldi	r30, 0x33	; 51
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	eb 81       	ldd	r30, Y+3	; 0x03
    224c:	fc 81       	ldd	r31, Y+4	; 0x04
    224e:	80 83       	st	Z, r24
    2250:	08 c0       	rjmp	.+16     	; 0x2262 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2252:	e0 e3       	ldi	r30, 0x30	; 48
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	eb 81       	ldd	r30, Y+3	; 0x03
    225a:	fc 81       	ldd	r31, Y+4	; 0x04
    225c:	80 83       	st	Z, r24
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2260:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
}
    2264:	26 96       	adiw	r28, 0x06	; 6
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    2276:	8f 92       	push	r8
    2278:	af 92       	push	r10
    227a:	cf 92       	push	r12
    227c:	ef 92       	push	r14
    227e:	0f 93       	push	r16
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	2c 97       	sbiw	r28, 0x0c	; 12
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	6a 83       	std	Y+2, r22	; 0x02
    2298:	4b 83       	std	Y+3, r20	; 0x03
    229a:	2c 83       	std	Y+4, r18	; 0x04
    229c:	0d 83       	std	Y+5, r16	; 0x05
    229e:	ee 82       	std	Y+6, r14	; 0x06
    22a0:	cf 82       	std	Y+7, r12	; 0x07
    22a2:	a8 86       	std	Y+8, r10	; 0x08
    22a4:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	3b 87       	std	Y+11, r19	; 0x0b
    22ae:	2a 87       	std	Y+10, r18	; 0x0a
    22b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b4:	81 30       	cpi	r24, 0x01	; 1
    22b6:	91 05       	cpc	r25, r1
    22b8:	09 f4       	brne	.+2      	; 0x22bc <DIO_u8SetValueToAllPins+0x46>
    22ba:	a8 c0       	rjmp	.+336    	; 0x240c <DIO_u8SetValueToAllPins+0x196>
    22bc:	2a 85       	ldd	r18, Y+10	; 0x0a
    22be:	3b 85       	ldd	r19, Y+11	; 0x0b
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	2c f4       	brge	.+10     	; 0x22d0 <DIO_u8SetValueToAllPins+0x5a>
    22c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	71 f0       	breq	.+28     	; 0x22ea <DIO_u8SetValueToAllPins+0x74>
    22ce:	50 c2       	rjmp	.+1184   	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
    22d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    22d2:	3b 85       	ldd	r19, Y+11	; 0x0b
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <DIO_u8SetValueToAllPins+0x66>
    22da:	29 c1       	rjmp	.+594    	; 0x252e <DIO_u8SetValueToAllPins+0x2b8>
    22dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22de:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e0:	83 30       	cpi	r24, 0x03	; 3
    22e2:	91 05       	cpc	r25, r1
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <DIO_u8SetValueToAllPins+0x72>
    22e6:	b4 c1       	rjmp	.+872    	; 0x2650 <DIO_u8SetValueToAllPins+0x3da>
    22e8:	43 c2       	rjmp	.+1158   	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	41 f4       	brne	.+16     	; 0x2300 <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    22f0:	ab e3       	ldi	r26, 0x3B	; 59
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	eb e3       	ldi	r30, 0x3B	; 59
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	81 60       	ori	r24, 0x01	; 1
    22fc:	8c 93       	st	X, r24
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    2300:	ab e3       	ldi	r26, 0x3B	; 59
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	eb e3       	ldi	r30, 0x3B	; 59
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	8e 7f       	andi	r24, 0xFE	; 254
    230c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	41 f4       	brne	.+16     	; 0x2324 <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    2314:	ab e3       	ldi	r26, 0x3B	; 59
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	eb e3       	ldi	r30, 0x3B	; 59
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	82 60       	ori	r24, 0x02	; 2
    2320:	8c 93       	st	X, r24
    2322:	07 c0       	rjmp	.+14     	; 0x2332 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    2324:	ab e3       	ldi	r26, 0x3B	; 59
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	eb e3       	ldi	r30, 0x3B	; 59
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	8d 7f       	andi	r24, 0xFD	; 253
    2330:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	41 f4       	brne	.+16     	; 0x2348 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    2338:	ab e3       	ldi	r26, 0x3B	; 59
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	eb e3       	ldi	r30, 0x3B	; 59
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	84 60       	ori	r24, 0x04	; 4
    2344:	8c 93       	st	X, r24
    2346:	07 c0       	rjmp	.+14     	; 0x2356 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    2348:	ab e3       	ldi	r26, 0x3B	; 59
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	eb e3       	ldi	r30, 0x3B	; 59
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	8b 7f       	andi	r24, 0xFB	; 251
    2354:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	41 f4       	brne	.+16     	; 0x236c <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    235c:	ab e3       	ldi	r26, 0x3B	; 59
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	eb e3       	ldi	r30, 0x3B	; 59
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	88 60       	ori	r24, 0x08	; 8
    2368:	8c 93       	st	X, r24
    236a:	07 c0       	rjmp	.+14     	; 0x237a <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    236c:	ab e3       	ldi	r26, 0x3B	; 59
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	eb e3       	ldi	r30, 0x3B	; 59
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	87 7f       	andi	r24, 0xF7	; 247
    2378:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    237a:	8e 81       	ldd	r24, Y+6	; 0x06
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	41 f4       	brne	.+16     	; 0x2390 <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2380:	ab e3       	ldi	r26, 0x3B	; 59
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	eb e3       	ldi	r30, 0x3B	; 59
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	80 61       	ori	r24, 0x10	; 16
    238c:	8c 93       	st	X, r24
    238e:	07 c0       	rjmp	.+14     	; 0x239e <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2390:	ab e3       	ldi	r26, 0x3B	; 59
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	eb e3       	ldi	r30, 0x3B	; 59
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8f 7e       	andi	r24, 0xEF	; 239
    239c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    239e:	8f 81       	ldd	r24, Y+7	; 0x07
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	41 f4       	brne	.+16     	; 0x23b4 <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    23a4:	ab e3       	ldi	r26, 0x3B	; 59
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	eb e3       	ldi	r30, 0x3B	; 59
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	80 62       	ori	r24, 0x20	; 32
    23b0:	8c 93       	st	X, r24
    23b2:	07 c0       	rjmp	.+14     	; 0x23c2 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    23b4:	ab e3       	ldi	r26, 0x3B	; 59
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e3       	ldi	r30, 0x3B	; 59
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	8f 7d       	andi	r24, 0xDF	; 223
    23c0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    23c2:	88 85       	ldd	r24, Y+8	; 0x08
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	41 f4       	brne	.+16     	; 0x23d8 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    23c8:	ab e3       	ldi	r26, 0x3B	; 59
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	eb e3       	ldi	r30, 0x3B	; 59
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	80 64       	ori	r24, 0x40	; 64
    23d4:	8c 93       	st	X, r24
    23d6:	07 c0       	rjmp	.+14     	; 0x23e6 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    23d8:	ab e3       	ldi	r26, 0x3B	; 59
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	eb e3       	ldi	r30, 0x3B	; 59
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 7b       	andi	r24, 0xBF	; 191
    23e4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	41 f4       	brne	.+16     	; 0x23fc <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    23ec:	ab e3       	ldi	r26, 0x3B	; 59
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	eb e3       	ldi	r30, 0x3B	; 59
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 68       	ori	r24, 0x80	; 128
    23f8:	8c 93       	st	X, r24
    23fa:	ba c1       	rjmp	.+884    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    23fc:	ab e3       	ldi	r26, 0x3B	; 59
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	eb e3       	ldi	r30, 0x3B	; 59
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	8f 77       	andi	r24, 0x7F	; 127
    2408:	8c 93       	st	X, r24
    240a:	b2 c1       	rjmp	.+868    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	41 f4       	brne	.+16     	; 0x2422 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2412:	a8 e3       	ldi	r26, 0x38	; 56
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e8 e3       	ldi	r30, 0x38	; 56
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	81 60       	ori	r24, 0x01	; 1
    241e:	8c 93       	st	X, r24
    2420:	07 c0       	rjmp	.+14     	; 0x2430 <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2422:	a8 e3       	ldi	r26, 0x38	; 56
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e8 e3       	ldi	r30, 0x38	; 56
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8e 7f       	andi	r24, 0xFE	; 254
    242e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	41 f4       	brne	.+16     	; 0x2446 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    2436:	a8 e3       	ldi	r26, 0x38	; 56
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e8 e3       	ldi	r30, 0x38	; 56
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	82 60       	ori	r24, 0x02	; 2
    2442:	8c 93       	st	X, r24
    2444:	07 c0       	rjmp	.+14     	; 0x2454 <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    2446:	a8 e3       	ldi	r26, 0x38	; 56
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e8 e3       	ldi	r30, 0x38	; 56
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8d 7f       	andi	r24, 0xFD	; 253
    2452:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	41 f4       	brne	.+16     	; 0x246a <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    245a:	a8 e3       	ldi	r26, 0x38	; 56
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e8 e3       	ldi	r30, 0x38	; 56
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	84 60       	ori	r24, 0x04	; 4
    2466:	8c 93       	st	X, r24
    2468:	07 c0       	rjmp	.+14     	; 0x2478 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    246a:	a8 e3       	ldi	r26, 0x38	; 56
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e8 e3       	ldi	r30, 0x38	; 56
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	8b 7f       	andi	r24, 0xFB	; 251
    2476:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	81 30       	cpi	r24, 0x01	; 1
    247c:	41 f4       	brne	.+16     	; 0x248e <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    247e:	a8 e3       	ldi	r26, 0x38	; 56
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e8 e3       	ldi	r30, 0x38	; 56
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	88 60       	ori	r24, 0x08	; 8
    248a:	8c 93       	st	X, r24
    248c:	07 c0       	rjmp	.+14     	; 0x249c <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    248e:	a8 e3       	ldi	r26, 0x38	; 56
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e8 e3       	ldi	r30, 0x38	; 56
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	87 7f       	andi	r24, 0xF7	; 247
    249a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    249c:	8e 81       	ldd	r24, Y+6	; 0x06
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	41 f4       	brne	.+16     	; 0x24b2 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    24a2:	a8 e3       	ldi	r26, 0x38	; 56
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e8 e3       	ldi	r30, 0x38	; 56
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	80 61       	ori	r24, 0x10	; 16
    24ae:	8c 93       	st	X, r24
    24b0:	07 c0       	rjmp	.+14     	; 0x24c0 <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    24b2:	a8 e3       	ldi	r26, 0x38	; 56
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e8 e3       	ldi	r30, 0x38	; 56
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	8f 7e       	andi	r24, 0xEF	; 239
    24be:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    24c0:	8f 81       	ldd	r24, Y+7	; 0x07
    24c2:	81 30       	cpi	r24, 0x01	; 1
    24c4:	41 f4       	brne	.+16     	; 0x24d6 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    24c6:	a8 e3       	ldi	r26, 0x38	; 56
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e8 e3       	ldi	r30, 0x38	; 56
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	80 62       	ori	r24, 0x20	; 32
    24d2:	8c 93       	st	X, r24
    24d4:	07 c0       	rjmp	.+14     	; 0x24e4 <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    24d6:	a8 e3       	ldi	r26, 0x38	; 56
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e8 e3       	ldi	r30, 0x38	; 56
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 7d       	andi	r24, 0xDF	; 223
    24e2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    24e4:	88 85       	ldd	r24, Y+8	; 0x08
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	41 f4       	brne	.+16     	; 0x24fa <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    24ea:	a8 e3       	ldi	r26, 0x38	; 56
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e8 e3       	ldi	r30, 0x38	; 56
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	80 64       	ori	r24, 0x40	; 64
    24f6:	8c 93       	st	X, r24
    24f8:	07 c0       	rjmp	.+14     	; 0x2508 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    24fa:	a8 e3       	ldi	r26, 0x38	; 56
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e8 e3       	ldi	r30, 0x38	; 56
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	8f 7b       	andi	r24, 0xBF	; 191
    2506:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	41 f4       	brne	.+16     	; 0x251e <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    250e:	a8 e3       	ldi	r26, 0x38	; 56
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e8 e3       	ldi	r30, 0x38	; 56
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	80 68       	ori	r24, 0x80	; 128
    251a:	8c 93       	st	X, r24
    251c:	29 c1       	rjmp	.+594    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    251e:	a8 e3       	ldi	r26, 0x38	; 56
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e8 e3       	ldi	r30, 0x38	; 56
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	8f 77       	andi	r24, 0x7F	; 127
    252a:	8c 93       	st	X, r24
    252c:	21 c1       	rjmp	.+578    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	41 f4       	brne	.+16     	; 0x2544 <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2534:	a5 e3       	ldi	r26, 0x35	; 53
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e5 e3       	ldi	r30, 0x35	; 53
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	81 60       	ori	r24, 0x01	; 1
    2540:	8c 93       	st	X, r24
    2542:	07 c0       	rjmp	.+14     	; 0x2552 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2544:	a5 e3       	ldi	r26, 0x35	; 53
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e5 e3       	ldi	r30, 0x35	; 53
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	8e 7f       	andi	r24, 0xFE	; 254
    2550:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	41 f4       	brne	.+16     	; 0x2568 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2558:	a5 e3       	ldi	r26, 0x35	; 53
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e5 e3       	ldi	r30, 0x35	; 53
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	82 60       	ori	r24, 0x02	; 2
    2564:	8c 93       	st	X, r24
    2566:	07 c0       	rjmp	.+14     	; 0x2576 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2568:	a5 e3       	ldi	r26, 0x35	; 53
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e5 e3       	ldi	r30, 0x35	; 53
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8d 7f       	andi	r24, 0xFD	; 253
    2574:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2576:	8c 81       	ldd	r24, Y+4	; 0x04
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	41 f4       	brne	.+16     	; 0x258c <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    257c:	a5 e3       	ldi	r26, 0x35	; 53
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e5 e3       	ldi	r30, 0x35	; 53
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	84 60       	ori	r24, 0x04	; 4
    2588:	8c 93       	st	X, r24
    258a:	07 c0       	rjmp	.+14     	; 0x259a <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    258c:	a5 e3       	ldi	r26, 0x35	; 53
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e5 e3       	ldi	r30, 0x35	; 53
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8b 7f       	andi	r24, 0xFB	; 251
    2598:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	41 f4       	brne	.+16     	; 0x25b0 <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    25a0:	a5 e3       	ldi	r26, 0x35	; 53
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e5 e3       	ldi	r30, 0x35	; 53
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	88 60       	ori	r24, 0x08	; 8
    25ac:	8c 93       	st	X, r24
    25ae:	07 c0       	rjmp	.+14     	; 0x25be <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    25b0:	a5 e3       	ldi	r26, 0x35	; 53
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e5 e3       	ldi	r30, 0x35	; 53
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	87 7f       	andi	r24, 0xF7	; 247
    25bc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    25be:	8e 81       	ldd	r24, Y+6	; 0x06
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	41 f4       	brne	.+16     	; 0x25d4 <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    25c4:	a5 e3       	ldi	r26, 0x35	; 53
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e5 e3       	ldi	r30, 0x35	; 53
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	80 61       	ori	r24, 0x10	; 16
    25d0:	8c 93       	st	X, r24
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    25d4:	a5 e3       	ldi	r26, 0x35	; 53
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e5 e3       	ldi	r30, 0x35	; 53
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	8f 7e       	andi	r24, 0xEF	; 239
    25e0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    25e2:	8f 81       	ldd	r24, Y+7	; 0x07
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	41 f4       	brne	.+16     	; 0x25f8 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    25e8:	a5 e3       	ldi	r26, 0x35	; 53
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e5 e3       	ldi	r30, 0x35	; 53
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	80 62       	ori	r24, 0x20	; 32
    25f4:	8c 93       	st	X, r24
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    25f8:	a5 e3       	ldi	r26, 0x35	; 53
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e5 e3       	ldi	r30, 0x35	; 53
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	8f 7d       	andi	r24, 0xDF	; 223
    2604:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    2606:	88 85       	ldd	r24, Y+8	; 0x08
    2608:	81 30       	cpi	r24, 0x01	; 1
    260a:	41 f4       	brne	.+16     	; 0x261c <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    260c:	a5 e3       	ldi	r26, 0x35	; 53
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e5 e3       	ldi	r30, 0x35	; 53
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	80 64       	ori	r24, 0x40	; 64
    2618:	8c 93       	st	X, r24
    261a:	07 c0       	rjmp	.+14     	; 0x262a <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    261c:	a5 e3       	ldi	r26, 0x35	; 53
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e5 e3       	ldi	r30, 0x35	; 53
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	8f 7b       	andi	r24, 0xBF	; 191
    2628:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	81 30       	cpi	r24, 0x01	; 1
    262e:	41 f4       	brne	.+16     	; 0x2640 <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2630:	a5 e3       	ldi	r26, 0x35	; 53
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e5 e3       	ldi	r30, 0x35	; 53
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	80 68       	ori	r24, 0x80	; 128
    263c:	8c 93       	st	X, r24
    263e:	98 c0       	rjmp	.+304    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2640:	a5 e3       	ldi	r26, 0x35	; 53
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e5 e3       	ldi	r30, 0x35	; 53
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	8f 77       	andi	r24, 0x7F	; 127
    264c:	8c 93       	st	X, r24
    264e:	90 c0       	rjmp	.+288    	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	41 f4       	brne	.+16     	; 0x2666 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2656:	a2 e3       	ldi	r26, 0x32	; 50
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e2 e3       	ldi	r30, 0x32	; 50
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	81 60       	ori	r24, 0x01	; 1
    2662:	8c 93       	st	X, r24
    2664:	07 c0       	rjmp	.+14     	; 0x2674 <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2666:	a2 e3       	ldi	r26, 0x32	; 50
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e2 e3       	ldi	r30, 0x32	; 50
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	8e 7f       	andi	r24, 0xFE	; 254
    2672:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	41 f4       	brne	.+16     	; 0x268a <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    267a:	a2 e3       	ldi	r26, 0x32	; 50
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e2 e3       	ldi	r30, 0x32	; 50
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	82 60       	ori	r24, 0x02	; 2
    2686:	8c 93       	st	X, r24
    2688:	07 c0       	rjmp	.+14     	; 0x2698 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    268a:	a2 e3       	ldi	r26, 0x32	; 50
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e2 e3       	ldi	r30, 0x32	; 50
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	8d 7f       	andi	r24, 0xFD	; 253
    2696:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	41 f4       	brne	.+16     	; 0x26ae <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    269e:	a2 e3       	ldi	r26, 0x32	; 50
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e2 e3       	ldi	r30, 0x32	; 50
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	84 60       	ori	r24, 0x04	; 4
    26aa:	8c 93       	st	X, r24
    26ac:	07 c0       	rjmp	.+14     	; 0x26bc <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    26ae:	a2 e3       	ldi	r26, 0x32	; 50
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e2 e3       	ldi	r30, 0x32	; 50
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8b 7f       	andi	r24, 0xFB	; 251
    26ba:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	41 f4       	brne	.+16     	; 0x26d2 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    26c2:	a2 e3       	ldi	r26, 0x32	; 50
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e2 e3       	ldi	r30, 0x32	; 50
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	88 60       	ori	r24, 0x08	; 8
    26ce:	8c 93       	st	X, r24
    26d0:	07 c0       	rjmp	.+14     	; 0x26e0 <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    26d2:	a2 e3       	ldi	r26, 0x32	; 50
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e2 e3       	ldi	r30, 0x32	; 50
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	87 7f       	andi	r24, 0xF7	; 247
    26de:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
    26e2:	81 30       	cpi	r24, 0x01	; 1
    26e4:	41 f4       	brne	.+16     	; 0x26f6 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    26e6:	a2 e3       	ldi	r26, 0x32	; 50
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e2 e3       	ldi	r30, 0x32	; 50
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	80 61       	ori	r24, 0x10	; 16
    26f2:	8c 93       	st	X, r24
    26f4:	07 c0       	rjmp	.+14     	; 0x2704 <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    26f6:	a2 e3       	ldi	r26, 0x32	; 50
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e2 e3       	ldi	r30, 0x32	; 50
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	8f 7e       	andi	r24, 0xEF	; 239
    2702:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    2704:	8f 81       	ldd	r24, Y+7	; 0x07
    2706:	81 30       	cpi	r24, 0x01	; 1
    2708:	41 f4       	brne	.+16     	; 0x271a <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    270a:	a2 e3       	ldi	r26, 0x32	; 50
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e2 e3       	ldi	r30, 0x32	; 50
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	80 62       	ori	r24, 0x20	; 32
    2716:	8c 93       	st	X, r24
    2718:	07 c0       	rjmp	.+14     	; 0x2728 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    271a:	a2 e3       	ldi	r26, 0x32	; 50
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e2 e3       	ldi	r30, 0x32	; 50
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 7d       	andi	r24, 0xDF	; 223
    2726:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    2728:	88 85       	ldd	r24, Y+8	; 0x08
    272a:	81 30       	cpi	r24, 0x01	; 1
    272c:	41 f4       	brne	.+16     	; 0x273e <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    272e:	a2 e3       	ldi	r26, 0x32	; 50
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e2 e3       	ldi	r30, 0x32	; 50
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	80 64       	ori	r24, 0x40	; 64
    273a:	8c 93       	st	X, r24
    273c:	07 c0       	rjmp	.+14     	; 0x274c <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    273e:	a2 e3       	ldi	r26, 0x32	; 50
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e2 e3       	ldi	r30, 0x32	; 50
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8f 7b       	andi	r24, 0xBF	; 191
    274a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	41 f4       	brne	.+16     	; 0x2762 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2752:	a2 e3       	ldi	r26, 0x32	; 50
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e2 e3       	ldi	r30, 0x32	; 50
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 68       	ori	r24, 0x80	; 128
    275e:	8c 93       	st	X, r24
    2760:	07 c0       	rjmp	.+14     	; 0x2770 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2762:	a2 e3       	ldi	r26, 0x32	; 50
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e2 e3       	ldi	r30, 0x32	; 50
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	8f 77       	andi	r24, 0x7F	; 127
    276e:	8c 93       	st	X, r24
		}
		break;
	}
}
    2770:	2c 96       	adiw	r28, 0x0c	; 12
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	0f 91       	pop	r16
    2782:	ef 90       	pop	r14
    2784:	cf 90       	pop	r12
    2786:	af 90       	pop	r10
    2788:	8f 90       	pop	r8
    278a:	08 95       	ret

0000278c <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    2794:	a7 e2       	ldi	r26, 0x27	; 39
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e7 e2       	ldi	r30, 0x27	; 39
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	8f 77       	andi	r24, 0x7F	; 127
    27a0:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    27a2:	a7 e2       	ldi	r26, 0x27	; 39
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e7 e2       	ldi	r30, 0x27	; 39
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	80 64       	ori	r24, 0x40	; 64
    27ae:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    27b0:	a7 e2       	ldi	r26, 0x27	; 39
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e7 e2       	ldi	r30, 0x27	; 39
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	8f 7d       	andi	r24, 0xDF	; 223
    27bc:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    27be:	a6 e2       	ldi	r26, 0x26	; 38
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e6 e2       	ldi	r30, 0x26	; 38
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 7d       	andi	r24, 0xDF	; 223
    27ca:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    27cc:	a6 e2       	ldi	r26, 0x26	; 38
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e6 e2       	ldi	r30, 0x26	; 38
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	84 60       	ori	r24, 0x04	; 4
    27d8:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    27da:	a6 e2       	ldi	r26, 0x26	; 38
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e6 e2       	ldi	r30, 0x26	; 38
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	82 60       	ori	r24, 0x02	; 2
    27e6:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    27e8:	a6 e2       	ldi	r26, 0x26	; 38
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e6 e2       	ldi	r30, 0x26	; 38
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	8e 7f       	andi	r24, 0xFE	; 254
    27f4:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    27f6:	a6 e2       	ldi	r26, 0x26	; 38
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e6 e2       	ldi	r30, 0x26	; 38
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	80 68       	ori	r24, 0x80	; 128
    2802:	8c 93       	st	X, r24

}
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	28 97       	sbiw	r28, 0x08	; 8
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	8e 83       	std	Y+6, r24	; 0x06
    2820:	78 87       	std	Y+8, r23	; 0x08
    2822:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2828:	19 82       	std	Y+1, r1	; 0x01
    282a:	1a 82       	std	Y+2, r1	; 0x02
    282c:	1b 82       	std	Y+3, r1	; 0x03
    282e:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2830:	8e 81       	ldd	r24, Y+6	; 0x06
    2832:	80 32       	cpi	r24, 0x20	; 32
    2834:	08 f0       	brcs	.+2      	; 0x2838 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2836:	5b c0       	rjmp	.+182    	; 0x28ee <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2838:	8f 81       	ldd	r24, Y+7	; 0x07
    283a:	98 85       	ldd	r25, Y+8	; 0x08
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	09 f4       	brne	.+2      	; 0x2842 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2840:	56 c0       	rjmp	.+172    	; 0x28ee <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2842:	a7 e2       	ldi	r26, 0x27	; 39
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e7 e2       	ldi	r30, 0x27	; 39
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	80 7e       	andi	r24, 0xE0	; 224
    284e:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2850:	a7 e2       	ldi	r26, 0x27	; 39
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e7 e2       	ldi	r30, 0x27	; 39
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	90 81       	ld	r25, Z
    285a:	8e 81       	ldd	r24, Y+6	; 0x06
    285c:	89 2b       	or	r24, r25
    285e:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2860:	a6 e2       	ldi	r26, 0x26	; 38
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e6 e2       	ldi	r30, 0x26	; 38
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	80 64       	ori	r24, 0x40	; 64
    286c:	8c 93       	st	X, r24
    286e:	0b c0       	rjmp	.+22     	; 0x2886 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	ab 81       	ldd	r26, Y+3	; 0x03
    2876:	bc 81       	ldd	r27, Y+4	; 0x04
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	a1 1d       	adc	r26, r1
    287c:	b1 1d       	adc	r27, r1
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	ab 83       	std	Y+3, r26	; 0x03
    2884:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    2886:	e6 e2       	ldi	r30, 0x26	; 38
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	82 95       	swap	r24
    288e:	8f 70       	andi	r24, 0x0F	; 15
    2890:	88 2f       	mov	r24, r24
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	81 70       	andi	r24, 0x01	; 1
    2896:	90 70       	andi	r25, 0x00	; 0
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	61 f4       	brne	.+24     	; 0x28b4 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	ab 81       	ldd	r26, Y+3	; 0x03
    28a2:	bc 81       	ldd	r27, Y+4	; 0x04
    28a4:	80 35       	cpi	r24, 0x50	; 80
    28a6:	23 ec       	ldi	r18, 0xC3	; 195
    28a8:	92 07       	cpc	r25, r18
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	a2 07       	cpc	r26, r18
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	b2 07       	cpc	r27, r18
    28b2:	f0 f2       	brcs	.-68     	; 0x2870 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    28b4:	e6 e2       	ldi	r30, 0x26	; 38
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	82 95       	swap	r24
    28bc:	8f 70       	andi	r24, 0x0F	; 15
    28be:	88 2f       	mov	r24, r24
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	81 70       	andi	r24, 0x01	; 1
    28c4:	90 70       	andi	r25, 0x00	; 0
    28c6:	88 23       	and	r24, r24
    28c8:	81 f0       	breq	.+32     	; 0x28ea <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    28ca:	a6 e2       	ldi	r26, 0x26	; 38
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e6 e2       	ldi	r30, 0x26	; 38
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	80 61       	ori	r24, 0x10	; 16
    28d6:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    28d8:	e4 e2       	ldi	r30, 0x24	; 36
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	91 81       	ldd	r25, Z+1	; 0x01
    28e0:	ef 81       	ldd	r30, Y+7	; 0x07
    28e2:	f8 85       	ldd	r31, Y+8	; 0x08
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	03 c0       	rjmp	.+6      	; 0x28f0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    28ea:	1d 82       	std	Y+5, r1	; 0x05
    28ec:	01 c0       	rjmp	.+2      	; 0x28f0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    28ee:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    28f2:	28 96       	adiw	r28, 0x08	; 8
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	00 d0       	rcall	.+0      	; 0x290a <ADC_u8_Get_Digital_ValueAsynch+0x6>
    290a:	00 d0       	rcall	.+0      	; 0x290c <ADC_u8_Get_Digital_ValueAsynch+0x8>
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	8a 83       	std	Y+2, r24	; 0x02
    2912:	7c 83       	std	Y+4, r23	; 0x04
    2914:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	80 32       	cpi	r24, 0x20	; 32
    291e:	78 f5       	brcc	.+94     	; 0x297e <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	59 f1       	breq	.+86     	; 0x297e <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2928:	80 91 84 00 	lds	r24, 0x0084
    292c:	88 23       	and	r24, r24
    292e:	39 f5       	brne	.+78     	; 0x297e <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	80 93 84 00 	sts	0x0084, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	90 93 83 00 	sts	0x0083, r25
    293e:	80 93 82 00 	sts	0x0082, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2942:	a6 e2       	ldi	r26, 0x26	; 38
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e6 e2       	ldi	r30, 0x26	; 38
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	88 60       	ori	r24, 0x08	; 8
    294e:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2950:	a7 e2       	ldi	r26, 0x27	; 39
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e7 e2       	ldi	r30, 0x27	; 39
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	80 7e       	andi	r24, 0xE0	; 224
    295c:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    295e:	a7 e2       	ldi	r26, 0x27	; 39
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e7 e2       	ldi	r30, 0x27	; 39
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	90 81       	ld	r25, Z
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	89 2b       	or	r24, r25
    296c:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    296e:	a6 e2       	ldi	r26, 0x26	; 38
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e6 e2       	ldi	r30, 0x26	; 38
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	80 64       	ori	r24, 0x40	; 64
    297a:	8c 93       	st	X, r24
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    297e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2980:	89 81       	ldd	r24, Y+1	; 0x01
}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	00 d0       	rcall	.+0      	; 0x2996 <ADC_u8GetADCRegValue+0x6>
    2996:	0f 92       	push	r0
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	9b 83       	std	Y+3, r25	; 0x03
    299e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	39 f0       	breq	.+14     	; 0x29ba <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    29ac:	e4 e2       	ldi	r30, 0x24	; 36
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	9b 83       	std	Y+3, r25	; 0x03
    29b6:	8a 83       	std	Y+2, r24	; 0x02
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    29ba:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    29ca:	1f 92       	push	r1
    29cc:	0f 92       	push	r0
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	0f 92       	push	r0
    29d2:	11 24       	eor	r1, r1
    29d4:	2f 93       	push	r18
    29d6:	3f 93       	push	r19
    29d8:	4f 93       	push	r20
    29da:	5f 93       	push	r21
    29dc:	6f 93       	push	r22
    29de:	7f 93       	push	r23
    29e0:	8f 93       	push	r24
    29e2:	9f 93       	push	r25
    29e4:	af 93       	push	r26
    29e6:	bf 93       	push	r27
    29e8:	ef 93       	push	r30
    29ea:	ff 93       	push	r31
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    29f4:	80 91 82 00 	lds	r24, 0x0082
    29f8:	90 91 83 00 	lds	r25, 0x0083
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	99 f0       	breq	.+38     	; 0x2a26 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2a00:	10 92 84 00 	sts	0x0084, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2a04:	a6 e2       	ldi	r26, 0x26	; 38
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e6 e2       	ldi	r30, 0x26	; 38
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	87 7f       	andi	r24, 0xF7	; 247
    2a10:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2a12:	20 91 82 00 	lds	r18, 0x0082
    2a16:	30 91 83 00 	lds	r19, 0x0083
    2a1a:	e4 e2       	ldi	r30, 0x24	; 36
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	f9 01       	movw	r30, r18
    2a24:	09 95       	icall
	}
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	ff 91       	pop	r31
    2a2c:	ef 91       	pop	r30
    2a2e:	bf 91       	pop	r27
    2a30:	af 91       	pop	r26
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	7f 91       	pop	r23
    2a38:	6f 91       	pop	r22
    2a3a:	5f 91       	pop	r21
    2a3c:	4f 91       	pop	r20
    2a3e:	3f 91       	pop	r19
    2a40:	2f 91       	pop	r18
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	1f 90       	pop	r1
    2a4a:	18 95       	reti

00002a4c <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2a54:	83 e0       	ldi	r24, 0x03	; 3
    2a56:	60 e0       	ldi	r22, 0x00	; 0
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2a5e:	83 e0       	ldi	r24, 0x03	; 3
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	41 e0       	ldi	r20, 0x01	; 1
    2a64:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2a68:	83 e0       	ldi	r24, 0x03	; 3
    2a6a:	62 e0       	ldi	r22, 0x02	; 2
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	63 e0       	ldi	r22, 0x03	; 3
    2a76:	41 e0       	ldi	r20, 0x01	; 1
    2a78:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
}
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <ActivatePins1+0x6>
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <ActivatePins1+0x8>
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	6a 83       	std	Y+2, r22	; 0x02
    2a92:	4b 83       	std	Y+3, r20	; 0x03
    2a94:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	49 81       	ldd	r20, Y+1	; 0x01
    2a9c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2aa0:	83 e0       	ldi	r24, 0x03	; 3
    2aa2:	61 e0       	ldi	r22, 0x01	; 1
    2aa4:	4a 81       	ldd	r20, Y+2	; 0x02
    2aa6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2aaa:	83 e0       	ldi	r24, 0x03	; 3
    2aac:	62 e0       	ldi	r22, 0x02	; 2
    2aae:	4b 81       	ldd	r20, Y+3	; 0x03
    2ab0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2ab4:	83 e0       	ldi	r24, 0x03	; 3
    2ab6:	63 e0       	ldi	r22, 0x03	; 3
    2ab8:	4c 81       	ldd	r20, Y+4	; 0x04
    2aba:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
}
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <ActivatePins2+0x6>
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <ActivatePins2+0x8>
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	6a 83       	std	Y+2, r22	; 0x02
    2adc:	4b 83       	std	Y+3, r20	; 0x03
    2ade:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2ae0:	83 e0       	ldi	r24, 0x03	; 3
    2ae2:	63 e0       	ldi	r22, 0x03	; 3
    2ae4:	4c 81       	ldd	r20, Y+4	; 0x04
    2ae6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	62 e0       	ldi	r22, 0x02	; 2
    2aee:	4b 81       	ldd	r20, Y+3	; 0x03
    2af0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2af4:	83 e0       	ldi	r24, 0x03	; 3
    2af6:	61 e0       	ldi	r22, 0x01	; 1
    2af8:	4a 81       	ldd	r20, Y+2	; 0x02
    2afa:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2afe:	83 e0       	ldi	r24, 0x03	; 3
    2b00:	60 e0       	ldi	r22, 0x00	; 0
    2b02:	49 81       	ldd	r20, Y+1	; 0x01
    2b04:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
}
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
    2b1e:	29 97       	sbiw	r28, 0x09	; 9
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2b30:	29 81       	ldd	r18, Y+1	; 0x01
    2b32:	3a 81       	ldd	r19, Y+2	; 0x02
    2b34:	39 87       	std	Y+9, r19	; 0x09
    2b36:	28 87       	std	Y+8, r18	; 0x08
    2b38:	88 85       	ldd	r24, Y+8	; 0x08
    2b3a:	99 85       	ldd	r25, Y+9	; 0x09
    2b3c:	8a 35       	cpi	r24, 0x5A	; 90
    2b3e:	91 05       	cpc	r25, r1
    2b40:	31 f0       	breq	.+12     	; 0x2b4e <SelectStepAngle+0x38>
    2b42:	28 85       	ldd	r18, Y+8	; 0x08
    2b44:	39 85       	ldd	r19, Y+9	; 0x09
    2b46:	24 3b       	cpi	r18, 0xB4	; 180
    2b48:	31 05       	cpc	r19, r1
    2b4a:	f1 f0       	breq	.+60     	; 0x2b88 <SelectStepAngle+0x72>
    2b4c:	39 c0       	rjmp	.+114    	; 0x2bc0 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	3f 83       	std	Y+7, r19	; 0x07
    2b56:	2e 83       	std	Y+6, r18	; 0x06
    2b58:	8e 81       	ldd	r24, Y+6	; 0x06
    2b5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	31 f0       	breq	.+12     	; 0x2b6c <SelectStepAngle+0x56>
    2b60:	2e 81       	ldd	r18, Y+6	; 0x06
    2b62:	3f 81       	ldd	r19, Y+7	; 0x07
    2b64:	21 30       	cpi	r18, 0x01	; 1
    2b66:	31 05       	cpc	r19, r1
    2b68:	41 f0       	breq	.+16     	; 0x2b7a <SelectStepAngle+0x64>
    2b6a:	2a c0       	rjmp	.+84     	; 0x2bc0 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	21 e0       	ldi	r18, 0x01	; 1
    2b74:	0e 94 41 15 	call	0x2a82	; 0x2a82 <ActivatePins1>
    2b78:	23 c0       	rjmp	.+70     	; 0x2bc0 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	0e 94 66 15 	call	0x2acc	; 0x2acc <ActivatePins2>
    2b86:	1c c0       	rjmp	.+56     	; 0x2bc0 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	3d 83       	std	Y+5, r19	; 0x05
    2b90:	2c 83       	std	Y+4, r18	; 0x04
    2b92:	8c 81       	ldd	r24, Y+4	; 0x04
    2b94:	9d 81       	ldd	r25, Y+5	; 0x05
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	31 f0       	breq	.+12     	; 0x2ba6 <SelectStepAngle+0x90>
    2b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b9e:	21 30       	cpi	r18, 0x01	; 1
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	41 f0       	breq	.+16     	; 0x2bb4 <SelectStepAngle+0x9e>
    2ba4:	0d c0       	rjmp	.+26     	; 0x2bc0 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	41 e0       	ldi	r20, 0x01	; 1
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	0e 94 66 15 	call	0x2acc	; 0x2acc <ActivatePins2>
    2bb2:	06 c0       	rjmp	.+12     	; 0x2bc0 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	61 e0       	ldi	r22, 0x01	; 1
    2bb8:	41 e0       	ldi	r20, 0x01	; 1
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	0e 94 41 15 	call	0x2a82	; 0x2a82 <ActivatePins1>
						break;
				}
				break;
	}
}
    2bc0:	29 96       	adiw	r28, 0x09	; 9
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	e9 97       	sbiw	r28, 0x39	; 57
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	64 e0       	ldi	r22, 0x04	; 4
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e8       	ldi	r26, 0x80	; 128
    2bfe:	bf e3       	ldi	r27, 0x3F	; 63
    2c00:	8d ab       	std	Y+53, r24	; 0x35
    2c02:	9e ab       	std	Y+54, r25	; 0x36
    2c04:	af ab       	std	Y+55, r26	; 0x37
    2c06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c08:	6d a9       	ldd	r22, Y+53	; 0x35
    2c0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a e7       	ldi	r20, 0x7A	; 122
    2c16:	55 e4       	ldi	r21, 0x45	; 69
    2c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	89 ab       	std	Y+49, r24	; 0x31
    2c22:	9a ab       	std	Y+50, r25	; 0x32
    2c24:	ab ab       	std	Y+51, r26	; 0x33
    2c26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c28:	69 a9       	ldd	r22, Y+49	; 0x31
    2c2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e8       	ldi	r20, 0x80	; 128
    2c36:	5f e3       	ldi	r21, 0x3F	; 63
    2c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c3c:	88 23       	and	r24, r24
    2c3e:	2c f4       	brge	.+10     	; 0x2c4a <LCD_sendCommand+0x78>
		__ticks = 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	98 ab       	std	Y+48, r25	; 0x30
    2c46:	8f a7       	std	Y+47, r24	; 0x2f
    2c48:	3f c0       	rjmp	.+126    	; 0x2cc8 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    2c4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c50:	9c a9       	ldd	r25, Y+52	; 0x34
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	3f ef       	ldi	r19, 0xFF	; 255
    2c56:	4f e7       	ldi	r20, 0x7F	; 127
    2c58:	57 e4       	ldi	r21, 0x47	; 71
    2c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c5e:	18 16       	cp	r1, r24
    2c60:	4c f5       	brge	.+82     	; 0x2cb4 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c62:	6d a9       	ldd	r22, Y+53	; 0x35
    2c64:	7e a9       	ldd	r23, Y+54	; 0x36
    2c66:	8f a9       	ldd	r24, Y+55	; 0x37
    2c68:	98 ad       	ldd	r25, Y+56	; 0x38
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e2       	ldi	r20, 0x20	; 32
    2c70:	51 e4       	ldi	r21, 0x41	; 65
    2c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	98 ab       	std	Y+48, r25	; 0x30
    2c88:	8f a7       	std	Y+47, r24	; 0x2f
    2c8a:	0f c0       	rjmp	.+30     	; 0x2caa <LCD_sendCommand+0xd8>
    2c8c:	80 e9       	ldi	r24, 0x90	; 144
    2c8e:	91 e0       	ldi	r25, 0x01	; 1
    2c90:	9e a7       	std	Y+46, r25	; 0x2e
    2c92:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c94:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c96:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LCD_sendCommand+0xc6>
    2c9c:	9e a7       	std	Y+46, r25	; 0x2e
    2c9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	98 ab       	std	Y+48, r25	; 0x30
    2ca8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2caa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cac:	98 a9       	ldd	r25, Y+48	; 0x30
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	69 f7       	brne	.-38     	; 0x2c8c <LCD_sendCommand+0xba>
    2cb2:	14 c0       	rjmp	.+40     	; 0x2cdc <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb4:	69 a9       	ldd	r22, Y+49	; 0x31
    2cb6:	7a a9       	ldd	r23, Y+50	; 0x32
    2cb8:	8b a9       	ldd	r24, Y+51	; 0x33
    2cba:	9c a9       	ldd	r25, Y+52	; 0x34
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	98 ab       	std	Y+48, r25	; 0x30
    2cc6:	8f a7       	std	Y+47, r24	; 0x2f
    2cc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cca:	98 a9       	ldd	r25, Y+48	; 0x30
    2ccc:	9c a7       	std	Y+44, r25	; 0x2c
    2cce:	8b a7       	std	Y+43, r24	; 0x2b
    2cd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <LCD_sendCommand+0x102>
    2cd8:	9c a7       	std	Y+44, r25	; 0x2c
    2cda:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2cdc:	83 e0       	ldi	r24, 0x03	; 3
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	65 e0       	ldi	r22, 0x05	; 5
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a0 e8       	ldi	r26, 0x80	; 128
    2cf2:	bf e3       	ldi	r27, 0x3F	; 63
    2cf4:	8f a3       	std	Y+39, r24	; 0x27
    2cf6:	98 a7       	std	Y+40, r25	; 0x28
    2cf8:	a9 a7       	std	Y+41, r26	; 0x29
    2cfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cfe:	78 a5       	ldd	r23, Y+40	; 0x28
    2d00:	89 a5       	ldd	r24, Y+41	; 0x29
    2d02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4a e7       	ldi	r20, 0x7A	; 122
    2d0a:	55 e4       	ldi	r21, 0x45	; 69
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	8b a3       	std	Y+35, r24	; 0x23
    2d16:	9c a3       	std	Y+36, r25	; 0x24
    2d18:	ad a3       	std	Y+37, r26	; 0x25
    2d1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d20:	8d a1       	ldd	r24, Y+37	; 0x25
    2d22:	9e a1       	ldd	r25, Y+38	; 0x26
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e8       	ldi	r20, 0x80	; 128
    2d2a:	5f e3       	ldi	r21, 0x3F	; 63
    2d2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <LCD_sendCommand+0x16c>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9a a3       	std	Y+34, r25	; 0x22
    2d3a:	89 a3       	std	Y+33, r24	; 0x21
    2d3c:	3f c0       	rjmp	.+126    	; 0x2dbc <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2d3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d40:	7c a1       	ldd	r23, Y+36	; 0x24
    2d42:	8d a1       	ldd	r24, Y+37	; 0x25
    2d44:	9e a1       	ldd	r25, Y+38	; 0x26
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	4c f5       	brge	.+82     	; 0x2da8 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	6f a1       	ldd	r22, Y+39	; 0x27
    2d58:	78 a5       	ldd	r23, Y+40	; 0x28
    2d5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e2       	ldi	r20, 0x20	; 32
    2d64:	51 e4       	ldi	r21, 0x41	; 65
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9a a3       	std	Y+34, r25	; 0x22
    2d7c:	89 a3       	std	Y+33, r24	; 0x21
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <LCD_sendCommand+0x1cc>
    2d80:	80 e9       	ldi	r24, 0x90	; 144
    2d82:	91 e0       	ldi	r25, 0x01	; 1
    2d84:	98 a3       	std	Y+32, r25	; 0x20
    2d86:	8f 8f       	std	Y+31, r24	; 0x1f
    2d88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <LCD_sendCommand+0x1ba>
    2d90:	98 a3       	std	Y+32, r25	; 0x20
    2d92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d94:	89 a1       	ldd	r24, Y+33	; 0x21
    2d96:	9a a1       	ldd	r25, Y+34	; 0x22
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	9a a3       	std	Y+34, r25	; 0x22
    2d9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2da0:	9a a1       	ldd	r25, Y+34	; 0x22
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	69 f7       	brne	.-38     	; 0x2d80 <LCD_sendCommand+0x1ae>
    2da6:	14 c0       	rjmp	.+40     	; 0x2dd0 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da8:	6b a1       	ldd	r22, Y+35	; 0x23
    2daa:	7c a1       	ldd	r23, Y+36	; 0x24
    2dac:	8d a1       	ldd	r24, Y+37	; 0x25
    2dae:	9e a1       	ldd	r25, Y+38	; 0x26
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	9a a3       	std	Y+34, r25	; 0x22
    2dba:	89 a3       	std	Y+33, r24	; 0x21
    2dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2dbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc2:	8d 8f       	std	Y+29, r24	; 0x1d
    2dc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <LCD_sendCommand+0x1f6>
    2dcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2dce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2dd0:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	82 e0       	ldi	r24, 0x02	; 2
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	b9 01       	movw	r22, r18
    2ddc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_setPortValue>
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a0 e8       	ldi	r26, 0x80	; 128
    2de6:	bf e3       	ldi	r27, 0x3F	; 63
    2de8:	89 8f       	std	Y+25, r24	; 0x19
    2dea:	9a 8f       	std	Y+26, r25	; 0x1a
    2dec:	ab 8f       	std	Y+27, r26	; 0x1b
    2dee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df0:	69 8d       	ldd	r22, Y+25	; 0x19
    2df2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2df4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2df6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	4a e7       	ldi	r20, 0x7A	; 122
    2dfe:	55 e4       	ldi	r21, 0x45	; 69
    2e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	8d 8b       	std	Y+21, r24	; 0x15
    2e0a:	9e 8b       	std	Y+22, r25	; 0x16
    2e0c:	af 8b       	std	Y+23, r26	; 0x17
    2e0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e10:	6d 89       	ldd	r22, Y+21	; 0x15
    2e12:	7e 89       	ldd	r23, Y+22	; 0x16
    2e14:	8f 89       	ldd	r24, Y+23	; 0x17
    2e16:	98 8d       	ldd	r25, Y+24	; 0x18
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	2c f4       	brge	.+10     	; 0x2e32 <LCD_sendCommand+0x260>
		__ticks = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9c 8b       	std	Y+20, r25	; 0x14
    2e2e:	8b 8b       	std	Y+19, r24	; 0x13
    2e30:	3f c0       	rjmp	.+126    	; 0x2eb0 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    2e32:	6d 89       	ldd	r22, Y+21	; 0x15
    2e34:	7e 89       	ldd	r23, Y+22	; 0x16
    2e36:	8f 89       	ldd	r24, Y+23	; 0x17
    2e38:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
    2e3e:	4f e7       	ldi	r20, 0x7F	; 127
    2e40:	57 e4       	ldi	r21, 0x47	; 71
    2e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e46:	18 16       	cp	r1, r24
    2e48:	4c f5       	brge	.+82     	; 0x2e9c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e2       	ldi	r20, 0x20	; 32
    2e58:	51 e4       	ldi	r21, 0x41	; 65
    2e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	9c 8b       	std	Y+20, r25	; 0x14
    2e70:	8b 8b       	std	Y+19, r24	; 0x13
    2e72:	0f c0       	rjmp	.+30     	; 0x2e92 <LCD_sendCommand+0x2c0>
    2e74:	80 e9       	ldi	r24, 0x90	; 144
    2e76:	91 e0       	ldi	r25, 0x01	; 1
    2e78:	9a 8b       	std	Y+18, r25	; 0x12
    2e7a:	89 8b       	std	Y+17, r24	; 0x11
    2e7c:	89 89       	ldd	r24, Y+17	; 0x11
    2e7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_sendCommand+0x2ae>
    2e84:	9a 8b       	std	Y+18, r25	; 0x12
    2e86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e88:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	9c 8b       	std	Y+20, r25	; 0x14
    2e90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e92:	8b 89       	ldd	r24, Y+19	; 0x13
    2e94:	9c 89       	ldd	r25, Y+20	; 0x14
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	69 f7       	brne	.-38     	; 0x2e74 <LCD_sendCommand+0x2a2>
    2e9a:	14 c0       	rjmp	.+40     	; 0x2ec4 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	9c 8b       	std	Y+20, r25	; 0x14
    2eae:	8b 8b       	std	Y+19, r24	; 0x13
    2eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb4:	98 8b       	std	Y+16, r25	; 0x10
    2eb6:	8f 87       	std	Y+15, r24	; 0x0f
    2eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eba:	98 89       	ldd	r25, Y+16	; 0x10
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_sendCommand+0x2ea>
    2ec0:	98 8b       	std	Y+16, r25	; 0x10
    2ec2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2ec4:	83 e0       	ldi	r24, 0x03	; 3
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	65 e0       	ldi	r22, 0x05	; 5
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	50 e0       	ldi	r21, 0x00	; 0
    2ed0:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e8       	ldi	r26, 0x80	; 128
    2eda:	bf e3       	ldi	r27, 0x3F	; 63
    2edc:	8b 87       	std	Y+11, r24	; 0x0b
    2ede:	9c 87       	std	Y+12, r25	; 0x0c
    2ee0:	ad 87       	std	Y+13, r26	; 0x0d
    2ee2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4a e7       	ldi	r20, 0x7A	; 122
    2ef2:	55 e4       	ldi	r21, 0x45	; 69
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8f 83       	std	Y+7, r24	; 0x07
    2efe:	98 87       	std	Y+8, r25	; 0x08
    2f00:	a9 87       	std	Y+9, r26	; 0x09
    2f02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <LCD_sendCommand+0x354>
		__ticks = 1;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9e 83       	std	Y+6, r25	; 0x06
    2f22:	8d 83       	std	Y+5, r24	; 0x05
    2f24:	3f c0       	rjmp	.+126    	; 0x2fa4 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2f26:	6f 81       	ldd	r22, Y+7	; 0x07
    2f28:	78 85       	ldd	r23, Y+8	; 0x08
    2f2a:	89 85       	ldd	r24, Y+9	; 0x09
    2f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	4c f5       	brge	.+82     	; 0x2f90 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9e 83       	std	Y+6, r25	; 0x06
    2f64:	8d 83       	std	Y+5, r24	; 0x05
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <LCD_sendCommand+0x3b4>
    2f68:	80 e9       	ldi	r24, 0x90	; 144
    2f6a:	91 e0       	ldi	r25, 0x01	; 1
    2f6c:	9c 83       	std	Y+4, r25	; 0x04
    2f6e:	8b 83       	std	Y+3, r24	; 0x03
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	9c 81       	ldd	r25, Y+4	; 0x04
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <LCD_sendCommand+0x3a2>
    2f78:	9c 83       	std	Y+4, r25	; 0x04
    2f7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	9e 83       	std	Y+6, r25	; 0x06
    2f84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f86:	8d 81       	ldd	r24, Y+5	; 0x05
    2f88:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <LCD_sendCommand+0x396>
    2f8e:	14 c0       	rjmp	.+40     	; 0x2fb8 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9e 83       	std	Y+6, r25	; 0x06
    2fa2:	8d 83       	std	Y+5, r24	; 0x05
    2fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa8:	9a 83       	std	Y+2, r25	; 0x02
    2faa:	89 83       	std	Y+1, r24	; 0x01
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <LCD_sendCommand+0x3de>
    2fb4:	9a 83       	std	Y+2, r25	; 0x02
    2fb6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2fb8:	e9 96       	adiw	r28, 0x39	; 57
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	e9 97       	sbiw	r28, 0x39	; 57
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2fe0:	83 e0       	ldi	r24, 0x03	; 3
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	64 e0       	ldi	r22, 0x04	; 4
    2fe6:	70 e0       	ldi	r23, 0x00	; 0
    2fe8:	41 e0       	ldi	r20, 0x01	; 1
    2fea:	50 e0       	ldi	r21, 0x00	; 0
    2fec:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	a0 e8       	ldi	r26, 0x80	; 128
    2ff6:	bf e3       	ldi	r27, 0x3F	; 63
    2ff8:	8d ab       	std	Y+53, r24	; 0x35
    2ffa:	9e ab       	std	Y+54, r25	; 0x36
    2ffc:	af ab       	std	Y+55, r26	; 0x37
    2ffe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3000:	6d a9       	ldd	r22, Y+53	; 0x35
    3002:	7e a9       	ldd	r23, Y+54	; 0x36
    3004:	8f a9       	ldd	r24, Y+55	; 0x37
    3006:	98 ad       	ldd	r25, Y+56	; 0x38
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	4a e7       	ldi	r20, 0x7A	; 122
    300e:	55 e4       	ldi	r21, 0x45	; 69
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	89 ab       	std	Y+49, r24	; 0x31
    301a:	9a ab       	std	Y+50, r25	; 0x32
    301c:	ab ab       	std	Y+51, r26	; 0x33
    301e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3020:	69 a9       	ldd	r22, Y+49	; 0x31
    3022:	7a a9       	ldd	r23, Y+50	; 0x32
    3024:	8b a9       	ldd	r24, Y+51	; 0x33
    3026:	9c a9       	ldd	r25, Y+52	; 0x34
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e8       	ldi	r20, 0x80	; 128
    302e:	5f e3       	ldi	r21, 0x3F	; 63
    3030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3034:	88 23       	and	r24, r24
    3036:	2c f4       	brge	.+10     	; 0x3042 <LCD_displayCharacter+0x78>
		__ticks = 1;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	98 ab       	std	Y+48, r25	; 0x30
    303e:	8f a7       	std	Y+47, r24	; 0x2f
    3040:	3f c0       	rjmp	.+126    	; 0x30c0 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    3042:	69 a9       	ldd	r22, Y+49	; 0x31
    3044:	7a a9       	ldd	r23, Y+50	; 0x32
    3046:	8b a9       	ldd	r24, Y+51	; 0x33
    3048:	9c a9       	ldd	r25, Y+52	; 0x34
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	3f ef       	ldi	r19, 0xFF	; 255
    304e:	4f e7       	ldi	r20, 0x7F	; 127
    3050:	57 e4       	ldi	r21, 0x47	; 71
    3052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3056:	18 16       	cp	r1, r24
    3058:	4c f5       	brge	.+82     	; 0x30ac <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305a:	6d a9       	ldd	r22, Y+53	; 0x35
    305c:	7e a9       	ldd	r23, Y+54	; 0x36
    305e:	8f a9       	ldd	r24, Y+55	; 0x37
    3060:	98 ad       	ldd	r25, Y+56	; 0x38
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e2       	ldi	r20, 0x20	; 32
    3068:	51 e4       	ldi	r21, 0x41	; 65
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	bc 01       	movw	r22, r24
    3074:	cd 01       	movw	r24, r26
    3076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	98 ab       	std	Y+48, r25	; 0x30
    3080:	8f a7       	std	Y+47, r24	; 0x2f
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <LCD_displayCharacter+0xd8>
    3084:	80 e9       	ldi	r24, 0x90	; 144
    3086:	91 e0       	ldi	r25, 0x01	; 1
    3088:	9e a7       	std	Y+46, r25	; 0x2e
    308a:	8d a7       	std	Y+45, r24	; 0x2d
    308c:	8d a5       	ldd	r24, Y+45	; 0x2d
    308e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <LCD_displayCharacter+0xc6>
    3094:	9e a7       	std	Y+46, r25	; 0x2e
    3096:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3098:	8f a5       	ldd	r24, Y+47	; 0x2f
    309a:	98 a9       	ldd	r25, Y+48	; 0x30
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	98 ab       	std	Y+48, r25	; 0x30
    30a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30a4:	98 a9       	ldd	r25, Y+48	; 0x30
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	69 f7       	brne	.-38     	; 0x3084 <LCD_displayCharacter+0xba>
    30aa:	14 c0       	rjmp	.+40     	; 0x30d4 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ac:	69 a9       	ldd	r22, Y+49	; 0x31
    30ae:	7a a9       	ldd	r23, Y+50	; 0x32
    30b0:	8b a9       	ldd	r24, Y+51	; 0x33
    30b2:	9c a9       	ldd	r25, Y+52	; 0x34
    30b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	98 ab       	std	Y+48, r25	; 0x30
    30be:	8f a7       	std	Y+47, r24	; 0x2f
    30c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c2:	98 a9       	ldd	r25, Y+48	; 0x30
    30c4:	9c a7       	std	Y+44, r25	; 0x2c
    30c6:	8b a7       	std	Y+43, r24	; 0x2b
    30c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <LCD_displayCharacter+0x102>
    30d0:	9c a7       	std	Y+44, r25	; 0x2c
    30d2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    30d4:	83 e0       	ldi	r24, 0x03	; 3
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	65 e0       	ldi	r22, 0x05	; 5
    30da:	70 e0       	ldi	r23, 0x00	; 0
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	50 e0       	ldi	r21, 0x00	; 0
    30e0:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	a0 e8       	ldi	r26, 0x80	; 128
    30ea:	bf e3       	ldi	r27, 0x3F	; 63
    30ec:	8f a3       	std	Y+39, r24	; 0x27
    30ee:	98 a7       	std	Y+40, r25	; 0x28
    30f0:	a9 a7       	std	Y+41, r26	; 0x29
    30f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f4:	6f a1       	ldd	r22, Y+39	; 0x27
    30f6:	78 a5       	ldd	r23, Y+40	; 0x28
    30f8:	89 a5       	ldd	r24, Y+41	; 0x29
    30fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	4a e7       	ldi	r20, 0x7A	; 122
    3102:	55 e4       	ldi	r21, 0x45	; 69
    3104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	8b a3       	std	Y+35, r24	; 0x23
    310e:	9c a3       	std	Y+36, r25	; 0x24
    3110:	ad a3       	std	Y+37, r26	; 0x25
    3112:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3114:	6b a1       	ldd	r22, Y+35	; 0x23
    3116:	7c a1       	ldd	r23, Y+36	; 0x24
    3118:	8d a1       	ldd	r24, Y+37	; 0x25
    311a:	9e a1       	ldd	r25, Y+38	; 0x26
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e8       	ldi	r20, 0x80	; 128
    3122:	5f e3       	ldi	r21, 0x3F	; 63
    3124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3128:	88 23       	and	r24, r24
    312a:	2c f4       	brge	.+10     	; 0x3136 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	9a a3       	std	Y+34, r25	; 0x22
    3132:	89 a3       	std	Y+33, r24	; 0x21
    3134:	3f c0       	rjmp	.+126    	; 0x31b4 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    3136:	6b a1       	ldd	r22, Y+35	; 0x23
    3138:	7c a1       	ldd	r23, Y+36	; 0x24
    313a:	8d a1       	ldd	r24, Y+37	; 0x25
    313c:	9e a1       	ldd	r25, Y+38	; 0x26
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	3f ef       	ldi	r19, 0xFF	; 255
    3142:	4f e7       	ldi	r20, 0x7F	; 127
    3144:	57 e4       	ldi	r21, 0x47	; 71
    3146:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    314a:	18 16       	cp	r1, r24
    314c:	4c f5       	brge	.+82     	; 0x31a0 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314e:	6f a1       	ldd	r22, Y+39	; 0x27
    3150:	78 a5       	ldd	r23, Y+40	; 0x28
    3152:	89 a5       	ldd	r24, Y+41	; 0x29
    3154:	9a a5       	ldd	r25, Y+42	; 0x2a
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e2       	ldi	r20, 0x20	; 32
    315c:	51 e4       	ldi	r21, 0x41	; 65
    315e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	9a a3       	std	Y+34, r25	; 0x22
    3174:	89 a3       	std	Y+33, r24	; 0x21
    3176:	0f c0       	rjmp	.+30     	; 0x3196 <LCD_displayCharacter+0x1cc>
    3178:	80 e9       	ldi	r24, 0x90	; 144
    317a:	91 e0       	ldi	r25, 0x01	; 1
    317c:	98 a3       	std	Y+32, r25	; 0x20
    317e:	8f 8f       	std	Y+31, r24	; 0x1f
    3180:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3182:	98 a1       	ldd	r25, Y+32	; 0x20
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <LCD_displayCharacter+0x1ba>
    3188:	98 a3       	std	Y+32, r25	; 0x20
    318a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318c:	89 a1       	ldd	r24, Y+33	; 0x21
    318e:	9a a1       	ldd	r25, Y+34	; 0x22
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	9a a3       	std	Y+34, r25	; 0x22
    3194:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3196:	89 a1       	ldd	r24, Y+33	; 0x21
    3198:	9a a1       	ldd	r25, Y+34	; 0x22
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	69 f7       	brne	.-38     	; 0x3178 <LCD_displayCharacter+0x1ae>
    319e:	14 c0       	rjmp	.+40     	; 0x31c8 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a0:	6b a1       	ldd	r22, Y+35	; 0x23
    31a2:	7c a1       	ldd	r23, Y+36	; 0x24
    31a4:	8d a1       	ldd	r24, Y+37	; 0x25
    31a6:	9e a1       	ldd	r25, Y+38	; 0x26
    31a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	9a a3       	std	Y+34, r25	; 0x22
    31b2:	89 a3       	std	Y+33, r24	; 0x21
    31b4:	89 a1       	ldd	r24, Y+33	; 0x21
    31b6:	9a a1       	ldd	r25, Y+34	; 0x22
    31b8:	9e 8f       	std	Y+30, r25	; 0x1e
    31ba:	8d 8f       	std	Y+29, r24	; 0x1d
    31bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <LCD_displayCharacter+0x1f6>
    31c4:	9e 8f       	std	Y+30, r25	; 0x1e
    31c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    31c8:	89 ad       	ldd	r24, Y+57	; 0x39
    31ca:	28 2f       	mov	r18, r24
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	82 e0       	ldi	r24, 0x02	; 2
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	b9 01       	movw	r22, r18
    31d4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_setPortValue>
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	a0 e8       	ldi	r26, 0x80	; 128
    31de:	bf e3       	ldi	r27, 0x3F	; 63
    31e0:	89 8f       	std	Y+25, r24	; 0x19
    31e2:	9a 8f       	std	Y+26, r25	; 0x1a
    31e4:	ab 8f       	std	Y+27, r26	; 0x1b
    31e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e8:	69 8d       	ldd	r22, Y+25	; 0x19
    31ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	4a e7       	ldi	r20, 0x7A	; 122
    31f6:	55 e4       	ldi	r21, 0x45	; 69
    31f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	8d 8b       	std	Y+21, r24	; 0x15
    3202:	9e 8b       	std	Y+22, r25	; 0x16
    3204:	af 8b       	std	Y+23, r26	; 0x17
    3206:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3208:	6d 89       	ldd	r22, Y+21	; 0x15
    320a:	7e 89       	ldd	r23, Y+22	; 0x16
    320c:	8f 89       	ldd	r24, Y+23	; 0x17
    320e:	98 8d       	ldd	r25, Y+24	; 0x18
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	40 e8       	ldi	r20, 0x80	; 128
    3216:	5f e3       	ldi	r21, 0x3F	; 63
    3218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    321c:	88 23       	and	r24, r24
    321e:	2c f4       	brge	.+10     	; 0x322a <LCD_displayCharacter+0x260>
		__ticks = 1;
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	9c 8b       	std	Y+20, r25	; 0x14
    3226:	8b 8b       	std	Y+19, r24	; 0x13
    3228:	3f c0       	rjmp	.+126    	; 0x32a8 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    322a:	6d 89       	ldd	r22, Y+21	; 0x15
    322c:	7e 89       	ldd	r23, Y+22	; 0x16
    322e:	8f 89       	ldd	r24, Y+23	; 0x17
    3230:	98 8d       	ldd	r25, Y+24	; 0x18
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	3f ef       	ldi	r19, 0xFF	; 255
    3236:	4f e7       	ldi	r20, 0x7F	; 127
    3238:	57 e4       	ldi	r21, 0x47	; 71
    323a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    323e:	18 16       	cp	r1, r24
    3240:	4c f5       	brge	.+82     	; 0x3294 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3242:	69 8d       	ldd	r22, Y+25	; 0x19
    3244:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3248:	9c 8d       	ldd	r25, Y+28	; 0x1c
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e2       	ldi	r20, 0x20	; 32
    3250:	51 e4       	ldi	r21, 0x41	; 65
    3252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	9c 8b       	std	Y+20, r25	; 0x14
    3268:	8b 8b       	std	Y+19, r24	; 0x13
    326a:	0f c0       	rjmp	.+30     	; 0x328a <LCD_displayCharacter+0x2c0>
    326c:	80 e9       	ldi	r24, 0x90	; 144
    326e:	91 e0       	ldi	r25, 0x01	; 1
    3270:	9a 8b       	std	Y+18, r25	; 0x12
    3272:	89 8b       	std	Y+17, r24	; 0x11
    3274:	89 89       	ldd	r24, Y+17	; 0x11
    3276:	9a 89       	ldd	r25, Y+18	; 0x12
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <LCD_displayCharacter+0x2ae>
    327c:	9a 8b       	std	Y+18, r25	; 0x12
    327e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3280:	8b 89       	ldd	r24, Y+19	; 0x13
    3282:	9c 89       	ldd	r25, Y+20	; 0x14
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	9c 8b       	std	Y+20, r25	; 0x14
    3288:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328a:	8b 89       	ldd	r24, Y+19	; 0x13
    328c:	9c 89       	ldd	r25, Y+20	; 0x14
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	69 f7       	brne	.-38     	; 0x326c <LCD_displayCharacter+0x2a2>
    3292:	14 c0       	rjmp	.+40     	; 0x32bc <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3294:	6d 89       	ldd	r22, Y+21	; 0x15
    3296:	7e 89       	ldd	r23, Y+22	; 0x16
    3298:	8f 89       	ldd	r24, Y+23	; 0x17
    329a:	98 8d       	ldd	r25, Y+24	; 0x18
    329c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	9c 8b       	std	Y+20, r25	; 0x14
    32a6:	8b 8b       	std	Y+19, r24	; 0x13
    32a8:	8b 89       	ldd	r24, Y+19	; 0x13
    32aa:	9c 89       	ldd	r25, Y+20	; 0x14
    32ac:	98 8b       	std	Y+16, r25	; 0x10
    32ae:	8f 87       	std	Y+15, r24	; 0x0f
    32b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b2:	98 89       	ldd	r25, Y+16	; 0x10
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	f1 f7       	brne	.-4      	; 0x32b4 <LCD_displayCharacter+0x2ea>
    32b8:	98 8b       	std	Y+16, r25	; 0x10
    32ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	65 e0       	ldi	r22, 0x05	; 5
    32c2:	70 e0       	ldi	r23, 0x00	; 0
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	50 e0       	ldi	r21, 0x00	; 0
    32c8:	0e 94 19 07 	call	0xe32	; 0xe32 <LCD_setPinValue>
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	a0 e8       	ldi	r26, 0x80	; 128
    32d2:	bf e3       	ldi	r27, 0x3F	; 63
    32d4:	8b 87       	std	Y+11, r24	; 0x0b
    32d6:	9c 87       	std	Y+12, r25	; 0x0c
    32d8:	ad 87       	std	Y+13, r26	; 0x0d
    32da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32de:	7c 85       	ldd	r23, Y+12	; 0x0c
    32e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	4a e7       	ldi	r20, 0x7A	; 122
    32ea:	55 e4       	ldi	r21, 0x45	; 69
    32ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	8f 83       	std	Y+7, r24	; 0x07
    32f6:	98 87       	std	Y+8, r25	; 0x08
    32f8:	a9 87       	std	Y+9, r26	; 0x09
    32fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32fc:	6f 81       	ldd	r22, Y+7	; 0x07
    32fe:	78 85       	ldd	r23, Y+8	; 0x08
    3300:	89 85       	ldd	r24, Y+9	; 0x09
    3302:	9a 85       	ldd	r25, Y+10	; 0x0a
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e8       	ldi	r20, 0x80	; 128
    330a:	5f e3       	ldi	r21, 0x3F	; 63
    330c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3310:	88 23       	and	r24, r24
    3312:	2c f4       	brge	.+10     	; 0x331e <LCD_displayCharacter+0x354>
		__ticks = 1;
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	3f c0       	rjmp	.+126    	; 0x339c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    331e:	6f 81       	ldd	r22, Y+7	; 0x07
    3320:	78 85       	ldd	r23, Y+8	; 0x08
    3322:	89 85       	ldd	r24, Y+9	; 0x09
    3324:	9a 85       	ldd	r25, Y+10	; 0x0a
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	3f ef       	ldi	r19, 0xFF	; 255
    332a:	4f e7       	ldi	r20, 0x7F	; 127
    332c:	57 e4       	ldi	r21, 0x47	; 71
    332e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3332:	18 16       	cp	r1, r24
    3334:	4c f5       	brge	.+82     	; 0x3388 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3336:	6b 85       	ldd	r22, Y+11	; 0x0b
    3338:	7c 85       	ldd	r23, Y+12	; 0x0c
    333a:	8d 85       	ldd	r24, Y+13	; 0x0d
    333c:	9e 85       	ldd	r25, Y+14	; 0x0e
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e2       	ldi	r20, 0x20	; 32
    3344:	51 e4       	ldi	r21, 0x41	; 65
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	bc 01       	movw	r22, r24
    3350:	cd 01       	movw	r24, r26
    3352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	9e 83       	std	Y+6, r25	; 0x06
    335c:	8d 83       	std	Y+5, r24	; 0x05
    335e:	0f c0       	rjmp	.+30     	; 0x337e <LCD_displayCharacter+0x3b4>
    3360:	80 e9       	ldi	r24, 0x90	; 144
    3362:	91 e0       	ldi	r25, 0x01	; 1
    3364:	9c 83       	std	Y+4, r25	; 0x04
    3366:	8b 83       	std	Y+3, r24	; 0x03
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	9c 81       	ldd	r25, Y+4	; 0x04
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <LCD_displayCharacter+0x3a2>
    3370:	9c 83       	std	Y+4, r25	; 0x04
    3372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3374:	8d 81       	ldd	r24, Y+5	; 0x05
    3376:	9e 81       	ldd	r25, Y+6	; 0x06
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9e 81       	ldd	r25, Y+6	; 0x06
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	69 f7       	brne	.-38     	; 0x3360 <LCD_displayCharacter+0x396>
    3386:	14 c0       	rjmp	.+40     	; 0x33b0 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3388:	6f 81       	ldd	r22, Y+7	; 0x07
    338a:	78 85       	ldd	r23, Y+8	; 0x08
    338c:	89 85       	ldd	r24, Y+9	; 0x09
    338e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	9e 83       	std	Y+6, r25	; 0x06
    339a:	8d 83       	std	Y+5, r24	; 0x05
    339c:	8d 81       	ldd	r24, Y+5	; 0x05
    339e:	9e 81       	ldd	r25, Y+6	; 0x06
    33a0:	9a 83       	std	Y+2, r25	; 0x02
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	9a 81       	ldd	r25, Y+2	; 0x02
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	f1 f7       	brne	.-4      	; 0x33a8 <LCD_displayCharacter+0x3de>
    33ac:	9a 83       	std	Y+2, r25	; 0x02
    33ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    33b0:	e9 96       	adiw	r28, 0x39	; 57
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	08 95       	ret

000033c2 <LCD_display_32bit>:

void LCD_display_32bit(u32 num){
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	a6 97       	sbiw	r28, 0x26	; 38
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	6b a3       	std	Y+35, r22	; 0x23
    33dc:	7c a3       	std	Y+36, r23	; 0x24
    33de:	8d a3       	std	Y+37, r24	; 0x25
    33e0:	9e a3       	std	Y+38, r25	; 0x26
    u8 str[32];
    sprintf(str, "%lu", num);
    33e2:	8d b7       	in	r24, 0x3d	; 61
    33e4:	9e b7       	in	r25, 0x3e	; 62
    33e6:	08 97       	sbiw	r24, 0x08	; 8
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	9e bf       	out	0x3e, r25	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	8d bf       	out	0x3d, r24	; 61
    33f2:	ed b7       	in	r30, 0x3d	; 61
    33f4:	fe b7       	in	r31, 0x3e	; 62
    33f6:	31 96       	adiw	r30, 0x01	; 1
    33f8:	ce 01       	movw	r24, r28
    33fa:	03 96       	adiw	r24, 0x03	; 3
    33fc:	91 83       	std	Z+1, r25	; 0x01
    33fe:	80 83       	st	Z, r24
    3400:	80 e6       	ldi	r24, 0x60	; 96
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	93 83       	std	Z+3, r25	; 0x03
    3406:	82 83       	std	Z+2, r24	; 0x02
    3408:	8b a1       	ldd	r24, Y+35	; 0x23
    340a:	9c a1       	ldd	r25, Y+36	; 0x24
    340c:	ad a1       	ldd	r26, Y+37	; 0x25
    340e:	be a1       	ldd	r27, Y+38	; 0x26
    3410:	84 83       	std	Z+4, r24	; 0x04
    3412:	95 83       	std	Z+5, r25	; 0x05
    3414:	a6 83       	std	Z+6, r26	; 0x06
    3416:	b7 83       	std	Z+7, r27	; 0x07
    3418:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <sprintf>
    341c:	8d b7       	in	r24, 0x3d	; 61
    341e:	9e b7       	in	r25, 0x3e	; 62
    3420:	08 96       	adiw	r24, 0x08	; 8
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	9e bf       	out	0x3e, r25	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	8d bf       	out	0x3d, r24	; 61
    for (int i = 0; i < strlen(str); i++)
    342c:	1a 82       	std	Y+2, r1	; 0x02
    342e:	19 82       	std	Y+1, r1	; 0x01
    3430:	0f c0       	rjmp	.+30     	; 0x3450 <LCD_display_32bit+0x8e>
    {
    	LCD_displayCharacter(str[i]);
    3432:	29 81       	ldd	r18, Y+1	; 0x01
    3434:	3a 81       	ldd	r19, Y+2	; 0x02
    3436:	ce 01       	movw	r24, r28
    3438:	03 96       	adiw	r24, 0x03	; 3
    343a:	fc 01       	movw	r30, r24
    343c:	e2 0f       	add	r30, r18
    343e:	f3 1f       	adc	r31, r19
    3440:	80 81       	ld	r24, Z
    3442:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_displayCharacter>
}

void LCD_display_32bit(u32 num){
    u8 str[32];
    sprintf(str, "%lu", num);
    for (int i = 0; i < strlen(str); i++)
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	9a 81       	ldd	r25, Y+2	; 0x02
    344a:	01 96       	adiw	r24, 0x01	; 1
    344c:	9a 83       	std	Y+2, r25	; 0x02
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	09 81       	ldd	r16, Y+1	; 0x01
    3452:	1a 81       	ldd	r17, Y+2	; 0x02
    3454:	ce 01       	movw	r24, r28
    3456:	03 96       	adiw	r24, 0x03	; 3
    3458:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <strlen>
    345c:	08 17       	cp	r16, r24
    345e:	19 07       	cpc	r17, r25
    3460:	40 f3       	brcs	.-48     	; 0x3432 <LCD_display_32bit+0x70>
    {
    	LCD_displayCharacter(str[i]);
    }
}
    3462:	a6 96       	adiw	r28, 0x26	; 38
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	08 95       	ret

00003478 <LCD_init>:


void LCD_init(void)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	2e 97       	sbiw	r28, 0x0e	; 14
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	64 e0       	ldi	r22, 0x04	; 4
    3492:	70 e0       	ldi	r23, 0x00	; 0
    3494:	41 e0       	ldi	r20, 0x01	; 1
    3496:	50 e0       	ldi	r21, 0x00	; 0
    3498:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    349c:	83 e0       	ldi	r24, 0x03	; 3
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	65 e0       	ldi	r22, 0x05	; 5
    34a2:	70 e0       	ldi	r23, 0x00	; 0
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	6f ef       	ldi	r22, 0xFF	; 255
    34b2:	70 e0       	ldi	r23, 0x00	; 0
    34b4:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_setPortDirection>
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	a0 ea       	ldi	r26, 0xA0	; 160
    34be:	b1 e4       	ldi	r27, 0x41	; 65
    34c0:	8b 87       	std	Y+11, r24	; 0x0b
    34c2:	9c 87       	std	Y+12, r25	; 0x0c
    34c4:	ad 87       	std	Y+13, r26	; 0x0d
    34c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    34cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	4a e7       	ldi	r20, 0x7A	; 122
    34d6:	55 e4       	ldi	r21, 0x45	; 69
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	8f 83       	std	Y+7, r24	; 0x07
    34e2:	98 87       	std	Y+8, r25	; 0x08
    34e4:	a9 87       	std	Y+9, r26	; 0x09
    34e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ea:	78 85       	ldd	r23, Y+8	; 0x08
    34ec:	89 85       	ldd	r24, Y+9	; 0x09
    34ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e8       	ldi	r20, 0x80	; 128
    34f6:	5f e3       	ldi	r21, 0x3F	; 63
    34f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34fc:	88 23       	and	r24, r24
    34fe:	2c f4       	brge	.+10     	; 0x350a <LCD_init+0x92>
		__ticks = 1;
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	9e 83       	std	Y+6, r25	; 0x06
    3506:	8d 83       	std	Y+5, r24	; 0x05
    3508:	3f c0       	rjmp	.+126    	; 0x3588 <LCD_init+0x110>
	else if (__tmp > 65535)
    350a:	6f 81       	ldd	r22, Y+7	; 0x07
    350c:	78 85       	ldd	r23, Y+8	; 0x08
    350e:	89 85       	ldd	r24, Y+9	; 0x09
    3510:	9a 85       	ldd	r25, Y+10	; 0x0a
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	3f ef       	ldi	r19, 0xFF	; 255
    3516:	4f e7       	ldi	r20, 0x7F	; 127
    3518:	57 e4       	ldi	r21, 0x47	; 71
    351a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    351e:	18 16       	cp	r1, r24
    3520:	4c f5       	brge	.+82     	; 0x3574 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3522:	6b 85       	ldd	r22, Y+11	; 0x0b
    3524:	7c 85       	ldd	r23, Y+12	; 0x0c
    3526:	8d 85       	ldd	r24, Y+13	; 0x0d
    3528:	9e 85       	ldd	r25, Y+14	; 0x0e
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e2       	ldi	r20, 0x20	; 32
    3530:	51 e4       	ldi	r21, 0x41	; 65
    3532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	bc 01       	movw	r22, r24
    353c:	cd 01       	movw	r24, r26
    353e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
    354a:	0f c0       	rjmp	.+30     	; 0x356a <LCD_init+0xf2>
    354c:	80 e9       	ldi	r24, 0x90	; 144
    354e:	91 e0       	ldi	r25, 0x01	; 1
    3550:	9c 83       	std	Y+4, r25	; 0x04
    3552:	8b 83       	std	Y+3, r24	; 0x03
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	9c 81       	ldd	r25, Y+4	; 0x04
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <LCD_init+0xe0>
    355c:	9c 83       	std	Y+4, r25	; 0x04
    355e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3560:	8d 81       	ldd	r24, Y+5	; 0x05
    3562:	9e 81       	ldd	r25, Y+6	; 0x06
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356a:	8d 81       	ldd	r24, Y+5	; 0x05
    356c:	9e 81       	ldd	r25, Y+6	; 0x06
    356e:	00 97       	sbiw	r24, 0x00	; 0
    3570:	69 f7       	brne	.-38     	; 0x354c <LCD_init+0xd4>
    3572:	14 c0       	rjmp	.+40     	; 0x359c <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3574:	6f 81       	ldd	r22, Y+7	; 0x07
    3576:	78 85       	ldd	r23, Y+8	; 0x08
    3578:	89 85       	ldd	r24, Y+9	; 0x09
    357a:	9a 85       	ldd	r25, Y+10	; 0x0a
    357c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	9e 83       	std	Y+6, r25	; 0x06
    3586:	8d 83       	std	Y+5, r24	; 0x05
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	9e 81       	ldd	r25, Y+6	; 0x06
    358c:	9a 83       	std	Y+2, r25	; 0x02
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	9a 81       	ldd	r25, Y+2	; 0x02
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <LCD_init+0x11c>
    3598:	9a 83       	std	Y+2, r25	; 0x02
    359a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    359c:	88 e3       	ldi	r24, 0x38	; 56
    359e:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    35a2:	8c e0       	ldi	r24, 0x0C	; 12
    35a4:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
}
    35ae:	2e 96       	adiw	r28, 0x0e	; 14
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	08 95       	ret

000035c0 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <LCD_GoToXY+0x6>
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <LCD_GoToXY+0x8>
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	89 83       	std	Y+1, r24	; 0x01
    35ce:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	88 32       	cpi	r24, 0x28	; 40
    35d4:	c0 f4       	brcc	.+48     	; 0x3606 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    35d6:	89 81       	ldd	r24, Y+1	; 0x01
    35d8:	28 2f       	mov	r18, r24
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	3c 83       	std	Y+4, r19	; 0x04
    35de:	2b 83       	std	Y+3, r18	; 0x03
    35e0:	8b 81       	ldd	r24, Y+3	; 0x03
    35e2:	9c 81       	ldd	r25, Y+4	; 0x04
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	31 f0       	breq	.+12     	; 0x35f4 <LCD_GoToXY+0x34>
    35e8:	2b 81       	ldd	r18, Y+3	; 0x03
    35ea:	3c 81       	ldd	r19, Y+4	; 0x04
    35ec:	21 30       	cpi	r18, 0x01	; 1
    35ee:	31 05       	cpc	r19, r1
    35f0:	31 f0       	breq	.+12     	; 0x35fe <LCD_GoToXY+0x3e>
    35f2:	09 c0       	rjmp	.+18     	; 0x3606 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	80 58       	subi	r24, 0x80	; 128
    35f8:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
    35fc:	04 c0       	rjmp	.+8      	; 0x3606 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    35fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3600:	80 54       	subi	r24, 0x40	; 64
    3602:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
			break;
		}
	}
}
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	08 95       	ret

00003614 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	00 d0       	rcall	.+0      	; 0x361a <LCD_displayString+0x6>
    361a:	0f 92       	push	r0
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	9b 83       	std	Y+3, r25	; 0x03
    3622:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3624:	19 82       	std	Y+1, r1	; 0x01
    3626:	0e c0       	rjmp	.+28     	; 0x3644 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	28 2f       	mov	r18, r24
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	8a 81       	ldd	r24, Y+2	; 0x02
    3630:	9b 81       	ldd	r25, Y+3	; 0x03
    3632:	fc 01       	movw	r30, r24
    3634:	e2 0f       	add	r30, r18
    3636:	f3 1f       	adc	r31, r19
    3638:	80 81       	ld	r24, Z
    363a:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_displayCharacter>
		i++;
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	8f 5f       	subi	r24, 0xFF	; 255
    3642:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	28 2f       	mov	r18, r24
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	fc 01       	movw	r30, r24
    3650:	e2 0f       	add	r30, r18
    3652:	f3 1f       	adc	r31, r19
    3654:	80 81       	ld	r24, Z
    3656:	88 23       	and	r24, r24
    3658:	39 f7       	brne	.-50     	; 0x3628 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	28 97       	sbiw	r28, 0x08	; 8
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	8b 83       	std	Y+3, r24	; 0x03
    367c:	6c 83       	std	Y+4, r22	; 0x04
    367e:	5e 83       	std	Y+6, r21	; 0x06
    3680:	4d 83       	std	Y+5, r20	; 0x05
    3682:	38 87       	std	Y+8, r19	; 0x08
    3684:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    3686:	1a 82       	std	Y+2, r1	; 0x02
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	88 23       	and	r24, r24
    3690:	49 f4       	brne	.+18     	; 0x36a4 <LCD_String_xy+0x3e>
    3692:	8c 81       	ldd	r24, Y+4	; 0x04
    3694:	80 31       	cpi	r24, 0x10	; 16
    3696:	30 f4       	brcc	.+12     	; 0x36a4 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    3698:	8c 81       	ldd	r24, Y+4	; 0x04
    369a:	8f 70       	andi	r24, 0x0F	; 15
    369c:	80 68       	ori	r24, 0x80	; 128
    369e:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
    36a2:	3a c0       	rjmp	.+116    	; 0x3718 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    36a4:	8b 81       	ldd	r24, Y+3	; 0x03
    36a6:	81 30       	cpi	r24, 0x01	; 1
    36a8:	b9 f5       	brne	.+110    	; 0x3718 <LCD_String_xy+0xb2>
    36aa:	8c 81       	ldd	r24, Y+4	; 0x04
    36ac:	80 31       	cpi	r24, 0x10	; 16
    36ae:	a0 f5       	brcc	.+104    	; 0x3718 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    36b0:	8c 81       	ldd	r24, Y+4	; 0x04
    36b2:	8f 70       	andi	r24, 0x0F	; 15
    36b4:	80 6c       	ori	r24, 0xC0	; 192
    36b6:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
    36ba:	2e c0       	rjmp	.+92     	; 0x3718 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	28 2f       	mov	r18, r24
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	fc 01       	movw	r30, r24
    36c8:	e2 0f       	add	r30, r18
    36ca:	f3 1f       	adc	r31, r19
    36cc:	80 81       	ld	r24, Z
    36ce:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_displayCharacter>
		i++;
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	8f 5f       	subi	r24, 0xFF	; 255
    36d6:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    36d8:	8b 81       	ldd	r24, Y+3	; 0x03
    36da:	88 23       	and	r24, r24
    36dc:	71 f4       	brne	.+28     	; 0x36fa <LCD_String_xy+0x94>
    36de:	8c 81       	ldd	r24, Y+4	; 0x04
    36e0:	83 30       	cpi	r24, 0x03	; 3
    36e2:	58 f0       	brcs	.+22     	; 0x36fa <LCD_String_xy+0x94>
    36e4:	8a 81       	ldd	r24, Y+2	; 0x02
    36e6:	8b 30       	cpi	r24, 0x0B	; 11
    36e8:	41 f4       	brne	.+16     	; 0x36fa <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_GoToXY>
			c++;
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	8f 5f       	subi	r24, 0xFF	; 255
    36f6:	89 83       	std	Y+1, r24	; 0x01
    36f8:	0b c0       	rjmp	.+22     	; 0x3710 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    36fa:	8b 81       	ldd	r24, Y+3	; 0x03
    36fc:	81 30       	cpi	r24, 0x01	; 1
    36fe:	41 f4       	brne	.+16     	; 0x3710 <LCD_String_xy+0xaa>
    3700:	8c 81       	ldd	r24, Y+4	; 0x04
    3702:	83 30       	cpi	r24, 0x03	; 3
    3704:	28 f0       	brcs	.+10     	; 0x3710 <LCD_String_xy+0xaa>
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	8b 30       	cpi	r24, 0x0B	; 11
    370a:	11 f4       	brne	.+4      	; 0x3710 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    370c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <LCD_ClearScreen>
		}

		*count = c;
    3710:	ef 81       	ldd	r30, Y+7	; 0x07
    3712:	f8 85       	ldd	r31, Y+8	; 0x08
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3718:	8a 81       	ldd	r24, Y+2	; 0x02
    371a:	28 2f       	mov	r18, r24
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	8d 81       	ldd	r24, Y+5	; 0x05
    3720:	9e 81       	ldd	r25, Y+6	; 0x06
    3722:	fc 01       	movw	r30, r24
    3724:	e2 0f       	add	r30, r18
    3726:	f3 1f       	adc	r31, r19
    3728:	80 81       	ld	r24, Z
    372a:	88 23       	and	r24, r24
    372c:	39 f6       	brne	.-114    	; 0x36bc <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    372e:	28 96       	adiw	r28, 0x08	; 8
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret

00003740 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
    3748:	2e 97       	sbiw	r28, 0x0e	; 14
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	a0 e0       	ldi	r26, 0x00	; 0
    3760:	b0 e4       	ldi	r27, 0x40	; 64
    3762:	8b 87       	std	Y+11, r24	; 0x0b
    3764:	9c 87       	std	Y+12, r25	; 0x0c
    3766:	ad 87       	std	Y+13, r26	; 0x0d
    3768:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    376a:	6b 85       	ldd	r22, Y+11	; 0x0b
    376c:	7c 85       	ldd	r23, Y+12	; 0x0c
    376e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3770:	9e 85       	ldd	r25, Y+14	; 0x0e
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4a e7       	ldi	r20, 0x7A	; 122
    3778:	55 e4       	ldi	r21, 0x45	; 69
    377a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	8f 83       	std	Y+7, r24	; 0x07
    3784:	98 87       	std	Y+8, r25	; 0x08
    3786:	a9 87       	std	Y+9, r26	; 0x09
    3788:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    378a:	6f 81       	ldd	r22, Y+7	; 0x07
    378c:	78 85       	ldd	r23, Y+8	; 0x08
    378e:	89 85       	ldd	r24, Y+9	; 0x09
    3790:	9a 85       	ldd	r25, Y+10	; 0x0a
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e8       	ldi	r20, 0x80	; 128
    3798:	5f e3       	ldi	r21, 0x3F	; 63
    379a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    379e:	88 23       	and	r24, r24
    37a0:	2c f4       	brge	.+10     	; 0x37ac <LCD_ClearScreen+0x6c>
		__ticks = 1;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	9e 83       	std	Y+6, r25	; 0x06
    37a8:	8d 83       	std	Y+5, r24	; 0x05
    37aa:	3f c0       	rjmp	.+126    	; 0x382a <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    37ac:	6f 81       	ldd	r22, Y+7	; 0x07
    37ae:	78 85       	ldd	r23, Y+8	; 0x08
    37b0:	89 85       	ldd	r24, Y+9	; 0x09
    37b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	3f ef       	ldi	r19, 0xFF	; 255
    37b8:	4f e7       	ldi	r20, 0x7F	; 127
    37ba:	57 e4       	ldi	r21, 0x47	; 71
    37bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c0:	18 16       	cp	r1, r24
    37c2:	4c f5       	brge	.+82     	; 0x3816 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e2       	ldi	r20, 0x20	; 32
    37d2:	51 e4       	ldi	r21, 0x41	; 65
    37d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	bc 01       	movw	r22, r24
    37de:	cd 01       	movw	r24, r26
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	8d 83       	std	Y+5, r24	; 0x05
    37ec:	0f c0       	rjmp	.+30     	; 0x380c <LCD_ClearScreen+0xcc>
    37ee:	80 e9       	ldi	r24, 0x90	; 144
    37f0:	91 e0       	ldi	r25, 0x01	; 1
    37f2:	9c 83       	std	Y+4, r25	; 0x04
    37f4:	8b 83       	std	Y+3, r24	; 0x03
    37f6:	8b 81       	ldd	r24, Y+3	; 0x03
    37f8:	9c 81       	ldd	r25, Y+4	; 0x04
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <LCD_ClearScreen+0xba>
    37fe:	9c 83       	std	Y+4, r25	; 0x04
    3800:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3802:	8d 81       	ldd	r24, Y+5	; 0x05
    3804:	9e 81       	ldd	r25, Y+6	; 0x06
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	9e 83       	std	Y+6, r25	; 0x06
    380a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380c:	8d 81       	ldd	r24, Y+5	; 0x05
    380e:	9e 81       	ldd	r25, Y+6	; 0x06
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	69 f7       	brne	.-38     	; 0x37ee <LCD_ClearScreen+0xae>
    3814:	14 c0       	rjmp	.+40     	; 0x383e <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3816:	6f 81       	ldd	r22, Y+7	; 0x07
    3818:	78 85       	ldd	r23, Y+8	; 0x08
    381a:	89 85       	ldd	r24, Y+9	; 0x09
    381c:	9a 85       	ldd	r25, Y+10	; 0x0a
    381e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9e 83       	std	Y+6, r25	; 0x06
    3828:	8d 83       	std	Y+5, r24	; 0x05
    382a:	8d 81       	ldd	r24, Y+5	; 0x05
    382c:	9e 81       	ldd	r25, Y+6	; 0x06
    382e:	9a 83       	std	Y+2, r25	; 0x02
    3830:	89 83       	std	Y+1, r24	; 0x01
    3832:	89 81       	ldd	r24, Y+1	; 0x01
    3834:	9a 81       	ldd	r25, Y+2	; 0x02
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	f1 f7       	brne	.-4      	; 0x3836 <LCD_ClearScreen+0xf6>
    383a:	9a 83       	std	Y+2, r25	; 0x02
    383c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    383e:	2e 96       	adiw	r28, 0x0e	; 14
    3840:	0f b6       	in	r0, 0x3f	; 63
    3842:	f8 94       	cli
    3844:	de bf       	out	0x3e, r29	; 62
    3846:	0f be       	out	0x3f, r0	; 63
    3848:	cd bf       	out	0x3d, r28	; 61
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	08 95       	ret

00003850 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3850:	df 93       	push	r29
    3852:	cf 93       	push	r28
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	2e 97       	sbiw	r28, 0x0e	; 14
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	de bf       	out	0x3e, r29	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3864:	88 e1       	ldi	r24, 0x18	; 24
    3866:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	a0 ea       	ldi	r26, 0xA0	; 160
    3870:	b1 e4       	ldi	r27, 0x41	; 65
    3872:	8b 87       	std	Y+11, r24	; 0x0b
    3874:	9c 87       	std	Y+12, r25	; 0x0c
    3876:	ad 87       	std	Y+13, r26	; 0x0d
    3878:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    387a:	6b 85       	ldd	r22, Y+11	; 0x0b
    387c:	7c 85       	ldd	r23, Y+12	; 0x0c
    387e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3880:	9e 85       	ldd	r25, Y+14	; 0x0e
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	4a e7       	ldi	r20, 0x7A	; 122
    3888:	55 e4       	ldi	r21, 0x45	; 69
    388a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	8f 83       	std	Y+7, r24	; 0x07
    3894:	98 87       	std	Y+8, r25	; 0x08
    3896:	a9 87       	std	Y+9, r26	; 0x09
    3898:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    389a:	6f 81       	ldd	r22, Y+7	; 0x07
    389c:	78 85       	ldd	r23, Y+8	; 0x08
    389e:	89 85       	ldd	r24, Y+9	; 0x09
    38a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	40 e8       	ldi	r20, 0x80	; 128
    38a8:	5f e3       	ldi	r21, 0x3F	; 63
    38aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ae:	88 23       	and	r24, r24
    38b0:	2c f4       	brge	.+10     	; 0x38bc <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	9e 83       	std	Y+6, r25	; 0x06
    38b8:	8d 83       	std	Y+5, r24	; 0x05
    38ba:	3f c0       	rjmp	.+126    	; 0x393a <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    38bc:	6f 81       	ldd	r22, Y+7	; 0x07
    38be:	78 85       	ldd	r23, Y+8	; 0x08
    38c0:	89 85       	ldd	r24, Y+9	; 0x09
    38c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	3f ef       	ldi	r19, 0xFF	; 255
    38c8:	4f e7       	ldi	r20, 0x7F	; 127
    38ca:	57 e4       	ldi	r21, 0x47	; 71
    38cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38d0:	18 16       	cp	r1, r24
    38d2:	4c f5       	brge	.+82     	; 0x3926 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38da:	9e 85       	ldd	r25, Y+14	; 0x0e
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e2       	ldi	r20, 0x20	; 32
    38e2:	51 e4       	ldi	r21, 0x41	; 65
    38e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	bc 01       	movw	r22, r24
    38ee:	cd 01       	movw	r24, r26
    38f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	9e 83       	std	Y+6, r25	; 0x06
    38fa:	8d 83       	std	Y+5, r24	; 0x05
    38fc:	0f c0       	rjmp	.+30     	; 0x391c <LCD_ShiftingLeft+0xcc>
    38fe:	80 e9       	ldi	r24, 0x90	; 144
    3900:	91 e0       	ldi	r25, 0x01	; 1
    3902:	9c 83       	std	Y+4, r25	; 0x04
    3904:	8b 83       	std	Y+3, r24	; 0x03
    3906:	8b 81       	ldd	r24, Y+3	; 0x03
    3908:	9c 81       	ldd	r25, Y+4	; 0x04
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	f1 f7       	brne	.-4      	; 0x390a <LCD_ShiftingLeft+0xba>
    390e:	9c 83       	std	Y+4, r25	; 0x04
    3910:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	9e 83       	std	Y+6, r25	; 0x06
    391a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    391c:	8d 81       	ldd	r24, Y+5	; 0x05
    391e:	9e 81       	ldd	r25, Y+6	; 0x06
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	69 f7       	brne	.-38     	; 0x38fe <LCD_ShiftingLeft+0xae>
    3924:	14 c0       	rjmp	.+40     	; 0x394e <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3926:	6f 81       	ldd	r22, Y+7	; 0x07
    3928:	78 85       	ldd	r23, Y+8	; 0x08
    392a:	89 85       	ldd	r24, Y+9	; 0x09
    392c:	9a 85       	ldd	r25, Y+10	; 0x0a
    392e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9e 83       	std	Y+6, r25	; 0x06
    3938:	8d 83       	std	Y+5, r24	; 0x05
    393a:	8d 81       	ldd	r24, Y+5	; 0x05
    393c:	9e 81       	ldd	r25, Y+6	; 0x06
    393e:	9a 83       	std	Y+2, r25	; 0x02
    3940:	89 83       	std	Y+1, r24	; 0x01
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	9a 81       	ldd	r25, Y+2	; 0x02
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	f1 f7       	brne	.-4      	; 0x3946 <LCD_ShiftingLeft+0xf6>
    394a:	9a 83       	std	Y+2, r25	; 0x02
    394c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    394e:	2e 96       	adiw	r28, 0x0e	; 14
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	2e 97       	sbiw	r28, 0x0e	; 14
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	f8 94       	cli
    396e:	de bf       	out	0x3e, r29	; 62
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3974:	8c e1       	ldi	r24, 0x1C	; 28
    3976:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	a0 ea       	ldi	r26, 0xA0	; 160
    3980:	b1 e4       	ldi	r27, 0x41	; 65
    3982:	8b 87       	std	Y+11, r24	; 0x0b
    3984:	9c 87       	std	Y+12, r25	; 0x0c
    3986:	ad 87       	std	Y+13, r26	; 0x0d
    3988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398a:	6b 85       	ldd	r22, Y+11	; 0x0b
    398c:	7c 85       	ldd	r23, Y+12	; 0x0c
    398e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3990:	9e 85       	ldd	r25, Y+14	; 0x0e
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	4a e7       	ldi	r20, 0x7A	; 122
    3998:	55 e4       	ldi	r21, 0x45	; 69
    399a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	8f 83       	std	Y+7, r24	; 0x07
    39a4:	98 87       	std	Y+8, r25	; 0x08
    39a6:	a9 87       	std	Y+9, r26	; 0x09
    39a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39aa:	6f 81       	ldd	r22, Y+7	; 0x07
    39ac:	78 85       	ldd	r23, Y+8	; 0x08
    39ae:	89 85       	ldd	r24, Y+9	; 0x09
    39b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e8       	ldi	r20, 0x80	; 128
    39b8:	5f e3       	ldi	r21, 0x3F	; 63
    39ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39be:	88 23       	and	r24, r24
    39c0:	2c f4       	brge	.+10     	; 0x39cc <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	8d 83       	std	Y+5, r24	; 0x05
    39ca:	3f c0       	rjmp	.+126    	; 0x3a4a <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    39cc:	6f 81       	ldd	r22, Y+7	; 0x07
    39ce:	78 85       	ldd	r23, Y+8	; 0x08
    39d0:	89 85       	ldd	r24, Y+9	; 0x09
    39d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	3f ef       	ldi	r19, 0xFF	; 255
    39d8:	4f e7       	ldi	r20, 0x7F	; 127
    39da:	57 e4       	ldi	r21, 0x47	; 71
    39dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39e0:	18 16       	cp	r1, r24
    39e2:	4c f5       	brge	.+82     	; 0x3a36 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e2       	ldi	r20, 0x20	; 32
    39f2:	51 e4       	ldi	r21, 0x41	; 65
    39f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	bc 01       	movw	r22, r24
    39fe:	cd 01       	movw	r24, r26
    3a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	9e 83       	std	Y+6, r25	; 0x06
    3a0a:	8d 83       	std	Y+5, r24	; 0x05
    3a0c:	0f c0       	rjmp	.+30     	; 0x3a2c <LCD_ShiftingRight+0xcc>
    3a0e:	80 e9       	ldi	r24, 0x90	; 144
    3a10:	91 e0       	ldi	r25, 0x01	; 1
    3a12:	9c 83       	std	Y+4, r25	; 0x04
    3a14:	8b 83       	std	Y+3, r24	; 0x03
    3a16:	8b 81       	ldd	r24, Y+3	; 0x03
    3a18:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	f1 f7       	brne	.-4      	; 0x3a1a <LCD_ShiftingRight+0xba>
    3a1e:	9c 83       	std	Y+4, r25	; 0x04
    3a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a22:	8d 81       	ldd	r24, Y+5	; 0x05
    3a24:	9e 81       	ldd	r25, Y+6	; 0x06
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	9e 83       	std	Y+6, r25	; 0x06
    3a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	69 f7       	brne	.-38     	; 0x3a0e <LCD_ShiftingRight+0xae>
    3a34:	14 c0       	rjmp	.+40     	; 0x3a5e <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a36:	6f 81       	ldd	r22, Y+7	; 0x07
    3a38:	78 85       	ldd	r23, Y+8	; 0x08
    3a3a:	89 85       	ldd	r24, Y+9	; 0x09
    3a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	9e 83       	std	Y+6, r25	; 0x06
    3a48:	8d 83       	std	Y+5, r24	; 0x05
    3a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4e:	9a 83       	std	Y+2, r25	; 0x02
    3a50:	89 83       	std	Y+1, r24	; 0x01
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	9a 81       	ldd	r25, Y+2	; 0x02
    3a56:	01 97       	sbiw	r24, 0x01	; 1
    3a58:	f1 f7       	brne	.-4      	; 0x3a56 <LCD_ShiftingRight+0xf6>
    3a5a:	9a 83       	std	Y+2, r25	; 0x02
    3a5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3a5e:	2e 96       	adiw	r28, 0x0e	; 14
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
    3a6a:	cf 91       	pop	r28
    3a6c:	df 91       	pop	r29
    3a6e:	08 95       	ret

00003a70 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3a70:	0f 93       	push	r16
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	28 97       	sbiw	r28, 0x08	; 8
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	8b 83       	std	Y+3, r24	; 0x03
    3a88:	7d 83       	std	Y+5, r23	; 0x05
    3a8a:	6c 83       	std	Y+4, r22	; 0x04
    3a8c:	4e 83       	std	Y+6, r20	; 0x06
    3a8e:	2f 83       	std	Y+7, r18	; 0x07
    3a90:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3a92:	88 85       	ldd	r24, Y+8	; 0x08
    3a94:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3a98:	1a 82       	std	Y+2, r1	; 0x02
    3a9a:	19 82       	std	Y+1, r1	; 0x01
    3a9c:	0f c0       	rjmp	.+30     	; 0x3abc <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3a9e:	29 81       	ldd	r18, Y+1	; 0x01
    3aa0:	3a 81       	ldd	r19, Y+2	; 0x02
    3aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa6:	fc 01       	movw	r30, r24
    3aa8:	e2 0f       	add	r30, r18
    3aaa:	f3 1f       	adc	r31, r19
    3aac:	80 81       	ld	r24, Z
    3aae:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab6:	01 96       	adiw	r24, 0x01	; 1
    3ab8:	9a 83       	std	Y+2, r25	; 0x02
    3aba:	89 83       	std	Y+1, r24	; 0x01
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac0:	88 30       	cpi	r24, 0x08	; 8
    3ac2:	91 05       	cpc	r25, r1
    3ac4:	64 f3       	brlt	.-40     	; 0x3a9e <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aca:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    3ace:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad0:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    3ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ad6:	80 31       	cpi	r24, 0x10	; 16
    3ad8:	48 f0       	brcs	.+18     	; 0x3aec <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3ada:	0e 94 a0 1b 	call	0x3740	; 0x3740 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	60 e0       	ldi	r22, 0x00	; 0
    3ae2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae8:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_displayCharacter>
	}
}
    3aec:	28 96       	adiw	r28, 0x08	; 8
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	0f 91       	pop	r16
    3afe:	08 95       	ret

00003b00 <Keypad_GetPressedKey>:
#include "Keypad.h";

u8 Keypad_GetPressedKey(){
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	00 d0       	rcall	.+0      	; 0x3b06 <Keypad_GetPressedKey+0x6>
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    3b0a:	1a 82       	std	Y+2, r1	; 0x02
    3b0c:	4d c0       	rjmp	.+154    	; 0x3ba8 <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    3b0e:	ea e3       	ldi	r30, 0x3A	; 58
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	28 2f       	mov	r18, r24
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	80 e1       	ldi	r24, 0x10	; 16
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <Keypad_GetPressedKey+0x22>
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	2a 95       	dec	r18
    3b24:	e2 f7       	brpl	.-8      	; 0x3b1e <Keypad_GetPressedKey+0x1e>
    3b26:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    3b28:	eb e3       	ldi	r30, 0x3B	; 59
    3b2a:	f0 e0       	ldi	r31, 0x00	; 0
    3b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2e:	28 2f       	mov	r18, r24
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	80 e1       	ldi	r24, 0x10	; 16
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	02 2e       	mov	r0, r18
    3b38:	02 c0       	rjmp	.+4      	; 0x3b3e <Keypad_GetPressedKey+0x3e>
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	0a 94       	dec	r0
    3b40:	e2 f7       	brpl	.-8      	; 0x3b3a <Keypad_GetPressedKey+0x3a>
    3b42:	80 95       	com	r24
    3b44:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    3b46:	19 82       	std	Y+1, r1	; 0x01
    3b48:	29 c0       	rjmp	.+82     	; 0x3b9c <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    3b4a:	e9 e3       	ldi	r30, 0x39	; 57
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	28 2f       	mov	r18, r24
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	88 2f       	mov	r24, r24
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	a9 01       	movw	r20, r18
    3b5c:	02 c0       	rjmp	.+4      	; 0x3b62 <Keypad_GetPressedKey+0x62>
    3b5e:	55 95       	asr	r21
    3b60:	47 95       	ror	r20
    3b62:	8a 95       	dec	r24
    3b64:	e2 f7       	brpl	.-8      	; 0x3b5e <Keypad_GetPressedKey+0x5e>
    3b66:	ca 01       	movw	r24, r20
    3b68:	81 70       	andi	r24, 0x01	; 1
    3b6a:	90 70       	andi	r25, 0x00	; 0
    3b6c:	00 97       	sbiw	r24, 0x00	; 0
    3b6e:	99 f4       	brne	.+38     	; 0x3b96 <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	28 2f       	mov	r18, r24
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	c9 01       	movw	r24, r18
    3b78:	88 0f       	add	r24, r24
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	82 0f       	add	r24, r18
    3b7e:	93 1f       	adc	r25, r19
    3b80:	98 2f       	mov	r25, r24
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
    3b84:	89 0f       	add	r24, r25
    3b86:	8f 5f       	subi	r24, 0xFF	; 255
    3b88:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <Keypad_4x3>
				}
			}
		}
	}
}
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	8f 5f       	subi	r24, 0xFF	; 255
    3b9a:	89 83       	std	Y+1, r24	; 0x01
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	84 30       	cpi	r24, 0x04	; 4
    3ba0:	a0 f2       	brcs	.-88     	; 0x3b4a <Keypad_GetPressedKey+0x4a>

u8 Keypad_GetPressedKey(){
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    3ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba4:	8f 5f       	subi	r24, 0xFF	; 255
    3ba6:	8a 83       	std	Y+2, r24	; 0x02
    3ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    3baa:	83 30       	cpi	r24, 0x03	; 3
    3bac:	08 f4       	brcc	.+2      	; 0x3bb0 <Keypad_GetPressedKey+0xb0>
    3bae:	af cf       	rjmp	.-162    	; 0x3b0e <Keypad_GetPressedKey+0xe>
    3bb0:	ac cf       	rjmp	.-168    	; 0x3b0a <Keypad_GetPressedKey+0xa>

00003bb2 <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    3bb2:	df 93       	push	r29
    3bb4:	cf 93       	push	r28
    3bb6:	00 d0       	rcall	.+0      	; 0x3bb8 <Keypad_4x3+0x6>
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <Keypad_4x3+0x8>
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    3bc0:	89 81       	ldd	r24, Y+1	; 0x01
    3bc2:	28 2f       	mov	r18, r24
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	3c 83       	std	Y+4, r19	; 0x04
    3bc8:	2b 83       	std	Y+3, r18	; 0x03
    3bca:	8b 81       	ldd	r24, Y+3	; 0x03
    3bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bce:	8a 30       	cpi	r24, 0x0A	; 10
    3bd0:	91 05       	cpc	r25, r1
    3bd2:	81 f0       	breq	.+32     	; 0x3bf4 <Keypad_4x3+0x42>
    3bd4:	2b 81       	ldd	r18, Y+3	; 0x03
    3bd6:	3c 81       	ldd	r19, Y+4	; 0x04
    3bd8:	2a 30       	cpi	r18, 0x0A	; 10
    3bda:	31 05       	cpc	r19, r1
    3bdc:	9c f0       	brlt	.+38     	; 0x3c04 <Keypad_4x3+0x52>
    3bde:	8b 81       	ldd	r24, Y+3	; 0x03
    3be0:	9c 81       	ldd	r25, Y+4	; 0x04
    3be2:	8b 30       	cpi	r24, 0x0B	; 11
    3be4:	91 05       	cpc	r25, r1
    3be6:	49 f0       	breq	.+18     	; 0x3bfa <Keypad_4x3+0x48>
    3be8:	2b 81       	ldd	r18, Y+3	; 0x03
    3bea:	3c 81       	ldd	r19, Y+4	; 0x04
    3bec:	2c 30       	cpi	r18, 0x0C	; 12
    3bee:	31 05       	cpc	r19, r1
    3bf0:	31 f0       	breq	.+12     	; 0x3bfe <Keypad_4x3+0x4c>
    3bf2:	08 c0       	rjmp	.+16     	; 0x3c04 <Keypad_4x3+0x52>
	case 10:
		return '*';
    3bf4:	3a e2       	ldi	r19, 0x2A	; 42
    3bf6:	3a 83       	std	Y+2, r19	; 0x02
    3bf8:	07 c0       	rjmp	.+14     	; 0x3c08 <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    3bfa:	1a 82       	std	Y+2, r1	; 0x02
    3bfc:	05 c0       	rjmp	.+10     	; 0x3c08 <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    3bfe:	83 e2       	ldi	r24, 0x23	; 35
    3c00:	8a 83       	std	Y+2, r24	; 0x02
    3c02:	02 c0       	rjmp	.+4      	; 0x3c08 <Keypad_4x3+0x56>
	default:
		return Num;
    3c04:	99 81       	ldd	r25, Y+1	; 0x01
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	08 95       	ret

00003c18 <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    3c18:	df 93       	push	r29
    3c1a:	cf 93       	push	r28
    3c1c:	00 d0       	rcall	.+0      	; 0x3c1e <DC_Motor_Init+0x6>
    3c1e:	0f 92       	push	r0
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	8a 83       	std	Y+2, r24	; 0x02
    3c26:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	81 30       	cpi	r24, 0x01	; 1
    3c30:	81 f4       	brne	.+32     	; 0x3c52 <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	63 e0       	ldi	r22, 0x03	; 3
    3c36:	41 e0       	ldi	r20, 0x01	; 1
    3c38:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	65 e0       	ldi	r22, 0x05	; 5
    3c40:	41 e0       	ldi	r20, 0x01	; 1
    3c42:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	64 e0       	ldi	r22, 0x04	; 4
    3c4a:	41 e0       	ldi	r20, 0x01	; 1
    3c4c:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
    3c50:	14 c0       	rjmp	.+40     	; 0x3c7a <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    3c52:	8b 81       	ldd	r24, Y+3	; 0x03
    3c54:	81 30       	cpi	r24, 0x01	; 1
    3c56:	81 f4       	brne	.+32     	; 0x3c78 <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	62 e0       	ldi	r22, 0x02	; 2
    3c5c:	41 e0       	ldi	r20, 0x01	; 1
    3c5e:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	61 e0       	ldi	r22, 0x01	; 1
    3c66:	41 e0       	ldi	r20, 0x01	; 1
    3c68:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	60 e0       	ldi	r22, 0x00	; 0
    3c70:	41 e0       	ldi	r20, 0x01	; 1
    3c72:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3c78:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	cf 91       	pop	r28
    3c84:	df 91       	pop	r29
    3c86:	08 95       	ret

00003c88 <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    3c88:	df 93       	push	r29
    3c8a:	cf 93       	push	r28
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	29 97       	sbiw	r28, 0x09	; 9
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	8a 83       	std	Y+2, r24	; 0x02
    3c9e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    3ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca6:	28 2f       	mov	r18, r24
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	39 87       	std	Y+9, r19	; 0x09
    3cac:	28 87       	std	Y+8, r18	; 0x08
    3cae:	88 85       	ldd	r24, Y+8	; 0x08
    3cb0:	99 85       	ldd	r25, Y+9	; 0x09
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	31 f0       	breq	.+12     	; 0x3cc2 <DC_Motor_Rotate+0x3a>
    3cb6:	28 85       	ldd	r18, Y+8	; 0x08
    3cb8:	39 85       	ldd	r19, Y+9	; 0x09
    3cba:	21 30       	cpi	r18, 0x01	; 1
    3cbc:	31 05       	cpc	r19, r1
    3cbe:	89 f1       	breq	.+98     	; 0x3d22 <DC_Motor_Rotate+0x9a>
    3cc0:	60 c0       	rjmp	.+192    	; 0x3d82 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	28 2f       	mov	r18, r24
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	3f 83       	std	Y+7, r19	; 0x07
    3cca:	2e 83       	std	Y+6, r18	; 0x06
    3ccc:	8e 81       	ldd	r24, Y+6	; 0x06
    3cce:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd0:	00 97       	sbiw	r24, 0x00	; 0
    3cd2:	a9 f0       	breq	.+42     	; 0x3cfe <DC_Motor_Rotate+0x76>
    3cd4:	2e 81       	ldd	r18, Y+6	; 0x06
    3cd6:	3f 81       	ldd	r19, Y+7	; 0x07
    3cd8:	21 30       	cpi	r18, 0x01	; 1
    3cda:	31 05       	cpc	r19, r1
    3cdc:	01 f5       	brne	.+64     	; 0x3d1e <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	63 e0       	ldi	r22, 0x03	; 3
    3ce2:	41 e0       	ldi	r20, 0x01	; 1
    3ce4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	65 e0       	ldi	r22, 0x05	; 5
    3cec:	41 e0       	ldi	r20, 0x01	; 1
    3cee:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	64 e0       	ldi	r22, 0x04	; 4
    3cf6:	40 e0       	ldi	r20, 0x00	; 0
    3cf8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3cfc:	43 c0       	rjmp	.+134    	; 0x3d84 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3cfe:	81 e0       	ldi	r24, 0x01	; 1
    3d00:	63 e0       	ldi	r22, 0x03	; 3
    3d02:	41 e0       	ldi	r20, 0x01	; 1
    3d04:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	65 e0       	ldi	r22, 0x05	; 5
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	64 e0       	ldi	r22, 0x04	; 4
    3d16:	41 e0       	ldi	r20, 0x01	; 1
    3d18:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3d1c:	33 c0       	rjmp	.+102    	; 0x3d84 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    3d1e:	19 82       	std	Y+1, r1	; 0x01
    3d20:	31 c0       	rjmp	.+98     	; 0x3d84 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    3d22:	8b 81       	ldd	r24, Y+3	; 0x03
    3d24:	28 2f       	mov	r18, r24
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	3d 83       	std	Y+5, r19	; 0x05
    3d2a:	2c 83       	std	Y+4, r18	; 0x04
    3d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	a9 f0       	breq	.+42     	; 0x3d5e <DC_Motor_Rotate+0xd6>
    3d34:	2c 81       	ldd	r18, Y+4	; 0x04
    3d36:	3d 81       	ldd	r19, Y+5	; 0x05
    3d38:	21 30       	cpi	r18, 0x01	; 1
    3d3a:	31 05       	cpc	r19, r1
    3d3c:	01 f5       	brne	.+64     	; 0x3d7e <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	62 e0       	ldi	r22, 0x02	; 2
    3d42:	41 e0       	ldi	r20, 0x01	; 1
    3d44:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	61 e0       	ldi	r22, 0x01	; 1
    3d4c:	41 e0       	ldi	r20, 0x01	; 1
    3d4e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	60 e0       	ldi	r22, 0x00	; 0
    3d56:	40 e0       	ldi	r20, 0x00	; 0
    3d58:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3d5c:	13 c0       	rjmp	.+38     	; 0x3d84 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	62 e0       	ldi	r22, 0x02	; 2
    3d62:	41 e0       	ldi	r20, 0x01	; 1
    3d64:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    3d68:	81 e0       	ldi	r24, 0x01	; 1
    3d6a:	61 e0       	ldi	r22, 0x01	; 1
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	41 e0       	ldi	r20, 0x01	; 1
    3d78:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3d7c:	03 c0       	rjmp	.+6      	; 0x3d84 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    3d7e:	19 82       	std	Y+1, r1	; 0x01
    3d80:	01 c0       	rjmp	.+2      	; 0x3d84 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    3d82:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    3d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d86:	29 96       	adiw	r28, 0x09	; 9
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	de bf       	out	0x3e, r29	; 62
    3d8e:	0f be       	out	0x3f, r0	; 63
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	08 95       	ret

00003d98 <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    3d98:	df 93       	push	r29
    3d9a:	cf 93       	push	r28
    3d9c:	00 d0       	rcall	.+0      	; 0x3d9e <DC_Motor_Stop+0x6>
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
    3da2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    3da8:	8a 81       	ldd	r24, Y+2	; 0x02
    3daa:	88 23       	and	r24, r24
    3dac:	31 f4       	brne	.+12     	; 0x3dba <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	63 e0       	ldi	r22, 0x03	; 3
    3db2:	40 e0       	ldi	r20, 0x00	; 0
    3db4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3db8:	0a c0       	rjmp	.+20     	; 0x3dce <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    3dba:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbc:	81 30       	cpi	r24, 0x01	; 1
    3dbe:	31 f4       	brne	.+12     	; 0x3dcc <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	62 e0       	ldi	r22, 0x02	; 2
    3dc4:	40 e0       	ldi	r20, 0x00	; 0
    3dc6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_u8SetPinValue>
    3dca:	01 c0       	rjmp	.+2      	; 0x3dce <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3dcc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	cf 91       	pop	r28
    3dd6:	df 91       	pop	r29
    3dd8:	08 95       	ret

00003dda <main>:
#define F_CPU 16000000UL

void App_voidADCCallBack(u16 Copy_u16ADCValue);
static u16 App_u16DigitalValue;

int main(void){
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	28 97       	sbiw	r28, 0x08	; 8
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDirection(0, 4, 0);
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	64 e0       	ldi	r22, 0x04	; 4
    3df2:	40 e0       	ldi	r20, 0x00	; 0
    3df4:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinDirection>
	DIO_u8SetPortDirection(2, 1);
    3df8:	82 e0       	ldi	r24, 0x02	; 2
    3dfa:	61 e0       	ldi	r22, 0x01	; 1
    3dfc:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(3, 1);
    3e00:	83 e0       	ldi	r24, 0x03	; 3
    3e02:	61 e0       	ldi	r22, 0x01	; 1
    3e04:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <DIO_u8SetPortDirection>
	LCD_init();
    3e08:	0e 94 3c 1a 	call	0x3478	; 0x3478 <LCD_init>
	ADC_void_Init();
    3e0c:	0e 94 c6 13 	call	0x278c	; 0x278c <ADC_void_Init>

	u16 DigitalValue, AnalogValue;
	u32 Res;

	LCD_GoToXY(0, 0);
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_GoToXY>
	LCD_displayString("Volt: ");
    3e18:	84 e6       	ldi	r24, 0x64	; 100
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <LCD_displayString>

	LCD_GoToXY(1, 0);
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_GoToXY>
	LCD_displayString("Res: ");
    3e28:	8b e6       	ldi	r24, 0x6B	; 107
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <LCD_displayString>
	while(1){
		/********************** Asynch App   *******************************/
		//ADC_u8_Get_Digital_ValueAsynch(4, &App_voidADCCallBack);
		//AnalogValue = (App_u16DigitalValue * 5000UL) / 1024;
		/*******************************************************************/
		ADC_u8_Get_Digital_ValueSynchNonBlocking(4, &DigitalValue);
    3e30:	9e 01       	movw	r18, r28
    3e32:	29 5f       	subi	r18, 0xF9	; 249
    3e34:	3f 4f       	sbci	r19, 0xFF	; 255
    3e36:	84 e0       	ldi	r24, 0x04	; 4
    3e38:	b9 01       	movw	r22, r18
    3e3a:	0e 94 05 14 	call	0x280a	; 0x280a <ADC_u8_Get_Digital_ValueSynchNonBlocking>
		AnalogValue = (DigitalValue * 5000UL) / 1024;
    3e3e:	8f 81       	ldd	r24, Y+7	; 0x07
    3e40:	98 85       	ldd	r25, Y+8	; 0x08
    3e42:	cc 01       	movw	r24, r24
    3e44:	a0 e0       	ldi	r26, 0x00	; 0
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	28 e8       	ldi	r18, 0x88	; 136
    3e4a:	33 e1       	ldi	r19, 0x13	; 19
    3e4c:	40 e0       	ldi	r20, 0x00	; 0
    3e4e:	50 e0       	ldi	r21, 0x00	; 0
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__mulsi3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	07 2e       	mov	r0, r23
    3e5e:	7a e0       	ldi	r23, 0x0A	; 10
    3e60:	b6 95       	lsr	r27
    3e62:	a7 95       	ror	r26
    3e64:	97 95       	ror	r25
    3e66:	87 95       	ror	r24
    3e68:	7a 95       	dec	r23
    3e6a:	d1 f7       	brne	.-12     	; 0x3e60 <main+0x86>
    3e6c:	70 2d       	mov	r23, r0
    3e6e:	9e 83       	std	Y+6, r25	; 0x06
    3e70:	8d 83       	std	Y+5, r24	; 0x05
		Res = ((10000*1024UL)/DigitalValue) - 10000;;
    3e72:	8f 81       	ldd	r24, Y+7	; 0x07
    3e74:	98 85       	ldd	r25, Y+8	; 0x08
    3e76:	9c 01       	movw	r18, r24
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e4       	ldi	r25, 0x40	; 64
    3e80:	ac e9       	ldi	r26, 0x9C	; 156
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	bc 01       	movw	r22, r24
    3e86:	cd 01       	movw	r24, r26
    3e88:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <__udivmodsi4>
    3e8c:	da 01       	movw	r26, r20
    3e8e:	c9 01       	movw	r24, r18
    3e90:	80 51       	subi	r24, 0x10	; 16
    3e92:	97 42       	sbci	r25, 0x27	; 39
    3e94:	a0 40       	sbci	r26, 0x00	; 0
    3e96:	b0 40       	sbci	r27, 0x00	; 0
    3e98:	89 83       	std	Y+1, r24	; 0x01
    3e9a:	9a 83       	std	Y+2, r25	; 0x02
    3e9c:	ab 83       	std	Y+3, r26	; 0x03
    3e9e:	bc 83       	std	Y+4, r27	; 0x04
		LCD_GoToXY(0, 5);
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	65 e0       	ldi	r22, 0x05	; 5
    3ea4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_GoToXY>
		LCD_display_32bit(AnalogValue);
    3ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    3eac:	cc 01       	movw	r24, r24
    3eae:	a0 e0       	ldi	r26, 0x00	; 0
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	bc 01       	movw	r22, r24
    3eb4:	cd 01       	movw	r24, r26
    3eb6:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <LCD_display_32bit>

		LCD_GoToXY(1, 5);
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	65 e0       	ldi	r22, 0x05	; 5
    3ebe:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_GoToXY>
		LCD_display_32bit(Res);
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec6:	ab 81       	ldd	r26, Y+3	; 0x03
    3ec8:	bc 81       	ldd	r27, Y+4	; 0x04
    3eca:	bc 01       	movw	r22, r24
    3ecc:	cd 01       	movw	r24, r26
    3ece:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <LCD_display_32bit>
    3ed2:	ae cf       	rjmp	.-164    	; 0x3e30 <main+0x56>

00003ed4 <App_voidADCCallBack>:

	}
	return 0;
}

void App_voidADCCallBack(u16 Copy_u16ADCValue){
    3ed4:	df 93       	push	r29
    3ed6:	cf 93       	push	r28
    3ed8:	00 d0       	rcall	.+0      	; 0x3eda <App_voidADCCallBack+0x6>
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	9a 83       	std	Y+2, r25	; 0x02
    3ee0:	89 83       	std	Y+1, r24	; 0x01
	App_u16DigitalValue = Copy_u16ADCValue;
    3ee2:	89 81       	ldd	r24, Y+1	; 0x01
    3ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ee6:	90 93 86 00 	sts	0x0086, r25
    3eea:	80 93 85 00 	sts	0x0085, r24
}
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	cf 91       	pop	r28
    3ef4:	df 91       	pop	r29
    3ef6:	08 95       	ret

00003ef8 <__mulsi3>:
    3ef8:	62 9f       	mul	r22, r18
    3efa:	d0 01       	movw	r26, r0
    3efc:	73 9f       	mul	r23, r19
    3efe:	f0 01       	movw	r30, r0
    3f00:	82 9f       	mul	r24, r18
    3f02:	e0 0d       	add	r30, r0
    3f04:	f1 1d       	adc	r31, r1
    3f06:	64 9f       	mul	r22, r20
    3f08:	e0 0d       	add	r30, r0
    3f0a:	f1 1d       	adc	r31, r1
    3f0c:	92 9f       	mul	r25, r18
    3f0e:	f0 0d       	add	r31, r0
    3f10:	83 9f       	mul	r24, r19
    3f12:	f0 0d       	add	r31, r0
    3f14:	74 9f       	mul	r23, r20
    3f16:	f0 0d       	add	r31, r0
    3f18:	65 9f       	mul	r22, r21
    3f1a:	f0 0d       	add	r31, r0
    3f1c:	99 27       	eor	r25, r25
    3f1e:	72 9f       	mul	r23, r18
    3f20:	b0 0d       	add	r27, r0
    3f22:	e1 1d       	adc	r30, r1
    3f24:	f9 1f       	adc	r31, r25
    3f26:	63 9f       	mul	r22, r19
    3f28:	b0 0d       	add	r27, r0
    3f2a:	e1 1d       	adc	r30, r1
    3f2c:	f9 1f       	adc	r31, r25
    3f2e:	bd 01       	movw	r22, r26
    3f30:	cf 01       	movw	r24, r30
    3f32:	11 24       	eor	r1, r1
    3f34:	08 95       	ret

00003f36 <__udivmodsi4>:
    3f36:	a1 e2       	ldi	r26, 0x21	; 33
    3f38:	1a 2e       	mov	r1, r26
    3f3a:	aa 1b       	sub	r26, r26
    3f3c:	bb 1b       	sub	r27, r27
    3f3e:	fd 01       	movw	r30, r26
    3f40:	0d c0       	rjmp	.+26     	; 0x3f5c <__udivmodsi4_ep>

00003f42 <__udivmodsi4_loop>:
    3f42:	aa 1f       	adc	r26, r26
    3f44:	bb 1f       	adc	r27, r27
    3f46:	ee 1f       	adc	r30, r30
    3f48:	ff 1f       	adc	r31, r31
    3f4a:	a2 17       	cp	r26, r18
    3f4c:	b3 07       	cpc	r27, r19
    3f4e:	e4 07       	cpc	r30, r20
    3f50:	f5 07       	cpc	r31, r21
    3f52:	20 f0       	brcs	.+8      	; 0x3f5c <__udivmodsi4_ep>
    3f54:	a2 1b       	sub	r26, r18
    3f56:	b3 0b       	sbc	r27, r19
    3f58:	e4 0b       	sbc	r30, r20
    3f5a:	f5 0b       	sbc	r31, r21

00003f5c <__udivmodsi4_ep>:
    3f5c:	66 1f       	adc	r22, r22
    3f5e:	77 1f       	adc	r23, r23
    3f60:	88 1f       	adc	r24, r24
    3f62:	99 1f       	adc	r25, r25
    3f64:	1a 94       	dec	r1
    3f66:	69 f7       	brne	.-38     	; 0x3f42 <__udivmodsi4_loop>
    3f68:	60 95       	com	r22
    3f6a:	70 95       	com	r23
    3f6c:	80 95       	com	r24
    3f6e:	90 95       	com	r25
    3f70:	9b 01       	movw	r18, r22
    3f72:	ac 01       	movw	r20, r24
    3f74:	bd 01       	movw	r22, r26
    3f76:	cf 01       	movw	r24, r30
    3f78:	08 95       	ret

00003f7a <__prologue_saves__>:
    3f7a:	2f 92       	push	r2
    3f7c:	3f 92       	push	r3
    3f7e:	4f 92       	push	r4
    3f80:	5f 92       	push	r5
    3f82:	6f 92       	push	r6
    3f84:	7f 92       	push	r7
    3f86:	8f 92       	push	r8
    3f88:	9f 92       	push	r9
    3f8a:	af 92       	push	r10
    3f8c:	bf 92       	push	r11
    3f8e:	cf 92       	push	r12
    3f90:	df 92       	push	r13
    3f92:	ef 92       	push	r14
    3f94:	ff 92       	push	r15
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	ca 1b       	sub	r28, r26
    3fa4:	db 0b       	sbc	r29, r27
    3fa6:	0f b6       	in	r0, 0x3f	; 63
    3fa8:	f8 94       	cli
    3faa:	de bf       	out	0x3e, r29	; 62
    3fac:	0f be       	out	0x3f, r0	; 63
    3fae:	cd bf       	out	0x3d, r28	; 61
    3fb0:	09 94       	ijmp

00003fb2 <__epilogue_restores__>:
    3fb2:	2a 88       	ldd	r2, Y+18	; 0x12
    3fb4:	39 88       	ldd	r3, Y+17	; 0x11
    3fb6:	48 88       	ldd	r4, Y+16	; 0x10
    3fb8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fba:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fbc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fbe:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fc0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fc2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fc4:	b9 84       	ldd	r11, Y+9	; 0x09
    3fc6:	c8 84       	ldd	r12, Y+8	; 0x08
    3fc8:	df 80       	ldd	r13, Y+7	; 0x07
    3fca:	ee 80       	ldd	r14, Y+6	; 0x06
    3fcc:	fd 80       	ldd	r15, Y+5	; 0x05
    3fce:	0c 81       	ldd	r16, Y+4	; 0x04
    3fd0:	1b 81       	ldd	r17, Y+3	; 0x03
    3fd2:	aa 81       	ldd	r26, Y+2	; 0x02
    3fd4:	b9 81       	ldd	r27, Y+1	; 0x01
    3fd6:	ce 0f       	add	r28, r30
    3fd8:	d1 1d       	adc	r29, r1
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	f8 94       	cli
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	ed 01       	movw	r28, r26
    3fe6:	08 95       	ret

00003fe8 <strlen>:
    3fe8:	fc 01       	movw	r30, r24
    3fea:	01 90       	ld	r0, Z+
    3fec:	00 20       	and	r0, r0
    3fee:	e9 f7       	brne	.-6      	; 0x3fea <strlen+0x2>
    3ff0:	80 95       	com	r24
    3ff2:	90 95       	com	r25
    3ff4:	8e 0f       	add	r24, r30
    3ff6:	9f 1f       	adc	r25, r31
    3ff8:	08 95       	ret

00003ffa <sprintf>:
    3ffa:	ae e0       	ldi	r26, 0x0E	; 14
    3ffc:	b0 e0       	ldi	r27, 0x00	; 0
    3ffe:	e3 e0       	ldi	r30, 0x03	; 3
    4000:	f0 e2       	ldi	r31, 0x20	; 32
    4002:	0c 94 cb 1f 	jmp	0x3f96	; 0x3f96 <__prologue_saves__+0x1c>
    4006:	0d 89       	ldd	r16, Y+21	; 0x15
    4008:	1e 89       	ldd	r17, Y+22	; 0x16
    400a:	86 e0       	ldi	r24, 0x06	; 6
    400c:	8c 83       	std	Y+4, r24	; 0x04
    400e:	1a 83       	std	Y+2, r17	; 0x02
    4010:	09 83       	std	Y+1, r16	; 0x01
    4012:	8f ef       	ldi	r24, 0xFF	; 255
    4014:	9f e7       	ldi	r25, 0x7F	; 127
    4016:	9e 83       	std	Y+6, r25	; 0x06
    4018:	8d 83       	std	Y+5, r24	; 0x05
    401a:	9e 01       	movw	r18, r28
    401c:	27 5e       	subi	r18, 0xE7	; 231
    401e:	3f 4f       	sbci	r19, 0xFF	; 255
    4020:	ce 01       	movw	r24, r28
    4022:	01 96       	adiw	r24, 0x01	; 1
    4024:	6f 89       	ldd	r22, Y+23	; 0x17
    4026:	78 8d       	ldd	r23, Y+24	; 0x18
    4028:	a9 01       	movw	r20, r18
    402a:	0e 94 21 20 	call	0x4042	; 0x4042 <vfprintf>
    402e:	2f 81       	ldd	r18, Y+7	; 0x07
    4030:	38 85       	ldd	r19, Y+8	; 0x08
    4032:	02 0f       	add	r16, r18
    4034:	13 1f       	adc	r17, r19
    4036:	f8 01       	movw	r30, r16
    4038:	10 82       	st	Z, r1
    403a:	2e 96       	adiw	r28, 0x0e	; 14
    403c:	e4 e0       	ldi	r30, 0x04	; 4
    403e:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__epilogue_restores__+0x1c>

00004042 <vfprintf>:
    4042:	ab e0       	ldi	r26, 0x0B	; 11
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	e7 e2       	ldi	r30, 0x27	; 39
    4048:	f0 e2       	ldi	r31, 0x20	; 32
    404a:	0c 94 bd 1f 	jmp	0x3f7a	; 0x3f7a <__prologue_saves__>
    404e:	3c 01       	movw	r6, r24
    4050:	2b 01       	movw	r4, r22
    4052:	5a 01       	movw	r10, r20
    4054:	fc 01       	movw	r30, r24
    4056:	17 82       	std	Z+7, r1	; 0x07
    4058:	16 82       	std	Z+6, r1	; 0x06
    405a:	83 81       	ldd	r24, Z+3	; 0x03
    405c:	81 fd       	sbrc	r24, 1
    405e:	03 c0       	rjmp	.+6      	; 0x4066 <vfprintf+0x24>
    4060:	6f ef       	ldi	r22, 0xFF	; 255
    4062:	7f ef       	ldi	r23, 0xFF	; 255
    4064:	c6 c1       	rjmp	.+908    	; 0x43f2 <vfprintf+0x3b0>
    4066:	9a e0       	ldi	r25, 0x0A	; 10
    4068:	89 2e       	mov	r8, r25
    406a:	1e 01       	movw	r2, r28
    406c:	08 94       	sec
    406e:	21 1c       	adc	r2, r1
    4070:	31 1c       	adc	r3, r1
    4072:	f3 01       	movw	r30, r6
    4074:	23 81       	ldd	r18, Z+3	; 0x03
    4076:	f2 01       	movw	r30, r4
    4078:	23 fd       	sbrc	r18, 3
    407a:	85 91       	lpm	r24, Z+
    407c:	23 ff       	sbrs	r18, 3
    407e:	81 91       	ld	r24, Z+
    4080:	2f 01       	movw	r4, r30
    4082:	88 23       	and	r24, r24
    4084:	09 f4       	brne	.+2      	; 0x4088 <vfprintf+0x46>
    4086:	b2 c1       	rjmp	.+868    	; 0x43ec <vfprintf+0x3aa>
    4088:	85 32       	cpi	r24, 0x25	; 37
    408a:	39 f4       	brne	.+14     	; 0x409a <vfprintf+0x58>
    408c:	23 fd       	sbrc	r18, 3
    408e:	85 91       	lpm	r24, Z+
    4090:	23 ff       	sbrs	r18, 3
    4092:	81 91       	ld	r24, Z+
    4094:	2f 01       	movw	r4, r30
    4096:	85 32       	cpi	r24, 0x25	; 37
    4098:	29 f4       	brne	.+10     	; 0x40a4 <vfprintf+0x62>
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	b3 01       	movw	r22, r6
    409e:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    40a2:	e7 cf       	rjmp	.-50     	; 0x4072 <vfprintf+0x30>
    40a4:	98 2f       	mov	r25, r24
    40a6:	ff 24       	eor	r15, r15
    40a8:	ee 24       	eor	r14, r14
    40aa:	99 24       	eor	r9, r9
    40ac:	ff e1       	ldi	r31, 0x1F	; 31
    40ae:	ff 15       	cp	r31, r15
    40b0:	d0 f0       	brcs	.+52     	; 0x40e6 <vfprintf+0xa4>
    40b2:	9b 32       	cpi	r25, 0x2B	; 43
    40b4:	69 f0       	breq	.+26     	; 0x40d0 <vfprintf+0x8e>
    40b6:	9c 32       	cpi	r25, 0x2C	; 44
    40b8:	28 f4       	brcc	.+10     	; 0x40c4 <vfprintf+0x82>
    40ba:	90 32       	cpi	r25, 0x20	; 32
    40bc:	59 f0       	breq	.+22     	; 0x40d4 <vfprintf+0x92>
    40be:	93 32       	cpi	r25, 0x23	; 35
    40c0:	91 f4       	brne	.+36     	; 0x40e6 <vfprintf+0xa4>
    40c2:	0e c0       	rjmp	.+28     	; 0x40e0 <vfprintf+0x9e>
    40c4:	9d 32       	cpi	r25, 0x2D	; 45
    40c6:	49 f0       	breq	.+18     	; 0x40da <vfprintf+0x98>
    40c8:	90 33       	cpi	r25, 0x30	; 48
    40ca:	69 f4       	brne	.+26     	; 0x40e6 <vfprintf+0xa4>
    40cc:	41 e0       	ldi	r20, 0x01	; 1
    40ce:	24 c0       	rjmp	.+72     	; 0x4118 <vfprintf+0xd6>
    40d0:	52 e0       	ldi	r21, 0x02	; 2
    40d2:	f5 2a       	or	r15, r21
    40d4:	84 e0       	ldi	r24, 0x04	; 4
    40d6:	f8 2a       	or	r15, r24
    40d8:	28 c0       	rjmp	.+80     	; 0x412a <vfprintf+0xe8>
    40da:	98 e0       	ldi	r25, 0x08	; 8
    40dc:	f9 2a       	or	r15, r25
    40de:	25 c0       	rjmp	.+74     	; 0x412a <vfprintf+0xe8>
    40e0:	e0 e1       	ldi	r30, 0x10	; 16
    40e2:	fe 2a       	or	r15, r30
    40e4:	22 c0       	rjmp	.+68     	; 0x412a <vfprintf+0xe8>
    40e6:	f7 fc       	sbrc	r15, 7
    40e8:	29 c0       	rjmp	.+82     	; 0x413c <vfprintf+0xfa>
    40ea:	89 2f       	mov	r24, r25
    40ec:	80 53       	subi	r24, 0x30	; 48
    40ee:	8a 30       	cpi	r24, 0x0A	; 10
    40f0:	70 f4       	brcc	.+28     	; 0x410e <vfprintf+0xcc>
    40f2:	f6 fe       	sbrs	r15, 6
    40f4:	05 c0       	rjmp	.+10     	; 0x4100 <vfprintf+0xbe>
    40f6:	98 9c       	mul	r9, r8
    40f8:	90 2c       	mov	r9, r0
    40fa:	11 24       	eor	r1, r1
    40fc:	98 0e       	add	r9, r24
    40fe:	15 c0       	rjmp	.+42     	; 0x412a <vfprintf+0xe8>
    4100:	e8 9c       	mul	r14, r8
    4102:	e0 2c       	mov	r14, r0
    4104:	11 24       	eor	r1, r1
    4106:	e8 0e       	add	r14, r24
    4108:	f0 e2       	ldi	r31, 0x20	; 32
    410a:	ff 2a       	or	r15, r31
    410c:	0e c0       	rjmp	.+28     	; 0x412a <vfprintf+0xe8>
    410e:	9e 32       	cpi	r25, 0x2E	; 46
    4110:	29 f4       	brne	.+10     	; 0x411c <vfprintf+0xda>
    4112:	f6 fc       	sbrc	r15, 6
    4114:	6b c1       	rjmp	.+726    	; 0x43ec <vfprintf+0x3aa>
    4116:	40 e4       	ldi	r20, 0x40	; 64
    4118:	f4 2a       	or	r15, r20
    411a:	07 c0       	rjmp	.+14     	; 0x412a <vfprintf+0xe8>
    411c:	9c 36       	cpi	r25, 0x6C	; 108
    411e:	19 f4       	brne	.+6      	; 0x4126 <vfprintf+0xe4>
    4120:	50 e8       	ldi	r21, 0x80	; 128
    4122:	f5 2a       	or	r15, r21
    4124:	02 c0       	rjmp	.+4      	; 0x412a <vfprintf+0xe8>
    4126:	98 36       	cpi	r25, 0x68	; 104
    4128:	49 f4       	brne	.+18     	; 0x413c <vfprintf+0xfa>
    412a:	f2 01       	movw	r30, r4
    412c:	23 fd       	sbrc	r18, 3
    412e:	95 91       	lpm	r25, Z+
    4130:	23 ff       	sbrs	r18, 3
    4132:	91 91       	ld	r25, Z+
    4134:	2f 01       	movw	r4, r30
    4136:	99 23       	and	r25, r25
    4138:	09 f0       	breq	.+2      	; 0x413c <vfprintf+0xfa>
    413a:	b8 cf       	rjmp	.-144    	; 0x40ac <vfprintf+0x6a>
    413c:	89 2f       	mov	r24, r25
    413e:	85 54       	subi	r24, 0x45	; 69
    4140:	83 30       	cpi	r24, 0x03	; 3
    4142:	18 f0       	brcs	.+6      	; 0x414a <vfprintf+0x108>
    4144:	80 52       	subi	r24, 0x20	; 32
    4146:	83 30       	cpi	r24, 0x03	; 3
    4148:	38 f4       	brcc	.+14     	; 0x4158 <vfprintf+0x116>
    414a:	44 e0       	ldi	r20, 0x04	; 4
    414c:	50 e0       	ldi	r21, 0x00	; 0
    414e:	a4 0e       	add	r10, r20
    4150:	b5 1e       	adc	r11, r21
    4152:	5f e3       	ldi	r21, 0x3F	; 63
    4154:	59 83       	std	Y+1, r21	; 0x01
    4156:	0f c0       	rjmp	.+30     	; 0x4176 <vfprintf+0x134>
    4158:	93 36       	cpi	r25, 0x63	; 99
    415a:	31 f0       	breq	.+12     	; 0x4168 <vfprintf+0x126>
    415c:	93 37       	cpi	r25, 0x73	; 115
    415e:	79 f0       	breq	.+30     	; 0x417e <vfprintf+0x13c>
    4160:	93 35       	cpi	r25, 0x53	; 83
    4162:	09 f0       	breq	.+2      	; 0x4166 <vfprintf+0x124>
    4164:	56 c0       	rjmp	.+172    	; 0x4212 <vfprintf+0x1d0>
    4166:	20 c0       	rjmp	.+64     	; 0x41a8 <vfprintf+0x166>
    4168:	f5 01       	movw	r30, r10
    416a:	80 81       	ld	r24, Z
    416c:	89 83       	std	Y+1, r24	; 0x01
    416e:	42 e0       	ldi	r20, 0x02	; 2
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	a4 0e       	add	r10, r20
    4174:	b5 1e       	adc	r11, r21
    4176:	61 01       	movw	r12, r2
    4178:	01 e0       	ldi	r16, 0x01	; 1
    417a:	10 e0       	ldi	r17, 0x00	; 0
    417c:	12 c0       	rjmp	.+36     	; 0x41a2 <vfprintf+0x160>
    417e:	f5 01       	movw	r30, r10
    4180:	c0 80       	ld	r12, Z
    4182:	d1 80       	ldd	r13, Z+1	; 0x01
    4184:	f6 fc       	sbrc	r15, 6
    4186:	03 c0       	rjmp	.+6      	; 0x418e <vfprintf+0x14c>
    4188:	6f ef       	ldi	r22, 0xFF	; 255
    418a:	7f ef       	ldi	r23, 0xFF	; 255
    418c:	02 c0       	rjmp	.+4      	; 0x4192 <vfprintf+0x150>
    418e:	69 2d       	mov	r22, r9
    4190:	70 e0       	ldi	r23, 0x00	; 0
    4192:	42 e0       	ldi	r20, 0x02	; 2
    4194:	50 e0       	ldi	r21, 0x00	; 0
    4196:	a4 0e       	add	r10, r20
    4198:	b5 1e       	adc	r11, r21
    419a:	c6 01       	movw	r24, r12
    419c:	0e 94 09 22 	call	0x4412	; 0x4412 <strnlen>
    41a0:	8c 01       	movw	r16, r24
    41a2:	5f e7       	ldi	r21, 0x7F	; 127
    41a4:	f5 22       	and	r15, r21
    41a6:	14 c0       	rjmp	.+40     	; 0x41d0 <vfprintf+0x18e>
    41a8:	f5 01       	movw	r30, r10
    41aa:	c0 80       	ld	r12, Z
    41ac:	d1 80       	ldd	r13, Z+1	; 0x01
    41ae:	f6 fc       	sbrc	r15, 6
    41b0:	03 c0       	rjmp	.+6      	; 0x41b8 <vfprintf+0x176>
    41b2:	6f ef       	ldi	r22, 0xFF	; 255
    41b4:	7f ef       	ldi	r23, 0xFF	; 255
    41b6:	02 c0       	rjmp	.+4      	; 0x41bc <vfprintf+0x17a>
    41b8:	69 2d       	mov	r22, r9
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	42 e0       	ldi	r20, 0x02	; 2
    41be:	50 e0       	ldi	r21, 0x00	; 0
    41c0:	a4 0e       	add	r10, r20
    41c2:	b5 1e       	adc	r11, r21
    41c4:	c6 01       	movw	r24, r12
    41c6:	0e 94 fe 21 	call	0x43fc	; 0x43fc <strnlen_P>
    41ca:	8c 01       	movw	r16, r24
    41cc:	50 e8       	ldi	r21, 0x80	; 128
    41ce:	f5 2a       	or	r15, r21
    41d0:	f3 fe       	sbrs	r15, 3
    41d2:	07 c0       	rjmp	.+14     	; 0x41e2 <vfprintf+0x1a0>
    41d4:	1a c0       	rjmp	.+52     	; 0x420a <vfprintf+0x1c8>
    41d6:	80 e2       	ldi	r24, 0x20	; 32
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	b3 01       	movw	r22, r6
    41dc:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    41e0:	ea 94       	dec	r14
    41e2:	8e 2d       	mov	r24, r14
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	08 17       	cp	r16, r24
    41e8:	19 07       	cpc	r17, r25
    41ea:	a8 f3       	brcs	.-22     	; 0x41d6 <vfprintf+0x194>
    41ec:	0e c0       	rjmp	.+28     	; 0x420a <vfprintf+0x1c8>
    41ee:	f6 01       	movw	r30, r12
    41f0:	f7 fc       	sbrc	r15, 7
    41f2:	85 91       	lpm	r24, Z+
    41f4:	f7 fe       	sbrs	r15, 7
    41f6:	81 91       	ld	r24, Z+
    41f8:	6f 01       	movw	r12, r30
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	b3 01       	movw	r22, r6
    41fe:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    4202:	e1 10       	cpse	r14, r1
    4204:	ea 94       	dec	r14
    4206:	01 50       	subi	r16, 0x01	; 1
    4208:	10 40       	sbci	r17, 0x00	; 0
    420a:	01 15       	cp	r16, r1
    420c:	11 05       	cpc	r17, r1
    420e:	79 f7       	brne	.-34     	; 0x41ee <vfprintf+0x1ac>
    4210:	ea c0       	rjmp	.+468    	; 0x43e6 <vfprintf+0x3a4>
    4212:	94 36       	cpi	r25, 0x64	; 100
    4214:	11 f0       	breq	.+4      	; 0x421a <vfprintf+0x1d8>
    4216:	99 36       	cpi	r25, 0x69	; 105
    4218:	69 f5       	brne	.+90     	; 0x4274 <vfprintf+0x232>
    421a:	f7 fe       	sbrs	r15, 7
    421c:	08 c0       	rjmp	.+16     	; 0x422e <vfprintf+0x1ec>
    421e:	f5 01       	movw	r30, r10
    4220:	20 81       	ld	r18, Z
    4222:	31 81       	ldd	r19, Z+1	; 0x01
    4224:	42 81       	ldd	r20, Z+2	; 0x02
    4226:	53 81       	ldd	r21, Z+3	; 0x03
    4228:	84 e0       	ldi	r24, 0x04	; 4
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0a c0       	rjmp	.+20     	; 0x4242 <vfprintf+0x200>
    422e:	f5 01       	movw	r30, r10
    4230:	80 81       	ld	r24, Z
    4232:	91 81       	ldd	r25, Z+1	; 0x01
    4234:	9c 01       	movw	r18, r24
    4236:	44 27       	eor	r20, r20
    4238:	37 fd       	sbrc	r19, 7
    423a:	40 95       	com	r20
    423c:	54 2f       	mov	r21, r20
    423e:	82 e0       	ldi	r24, 0x02	; 2
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	a8 0e       	add	r10, r24
    4244:	b9 1e       	adc	r11, r25
    4246:	9f e6       	ldi	r25, 0x6F	; 111
    4248:	f9 22       	and	r15, r25
    424a:	57 ff       	sbrs	r21, 7
    424c:	09 c0       	rjmp	.+18     	; 0x4260 <vfprintf+0x21e>
    424e:	50 95       	com	r21
    4250:	40 95       	com	r20
    4252:	30 95       	com	r19
    4254:	21 95       	neg	r18
    4256:	3f 4f       	sbci	r19, 0xFF	; 255
    4258:	4f 4f       	sbci	r20, 0xFF	; 255
    425a:	5f 4f       	sbci	r21, 0xFF	; 255
    425c:	e0 e8       	ldi	r30, 0x80	; 128
    425e:	fe 2a       	or	r15, r30
    4260:	ca 01       	movw	r24, r20
    4262:	b9 01       	movw	r22, r18
    4264:	a1 01       	movw	r20, r2
    4266:	2a e0       	ldi	r18, 0x0A	; 10
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	0e 94 40 22 	call	0x4480	; 0x4480 <__ultoa_invert>
    426e:	d8 2e       	mov	r13, r24
    4270:	d2 18       	sub	r13, r2
    4272:	40 c0       	rjmp	.+128    	; 0x42f4 <vfprintf+0x2b2>
    4274:	95 37       	cpi	r25, 0x75	; 117
    4276:	29 f4       	brne	.+10     	; 0x4282 <vfprintf+0x240>
    4278:	1f 2d       	mov	r17, r15
    427a:	1f 7e       	andi	r17, 0xEF	; 239
    427c:	2a e0       	ldi	r18, 0x0A	; 10
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	1d c0       	rjmp	.+58     	; 0x42bc <vfprintf+0x27a>
    4282:	1f 2d       	mov	r17, r15
    4284:	19 7f       	andi	r17, 0xF9	; 249
    4286:	9f 36       	cpi	r25, 0x6F	; 111
    4288:	61 f0       	breq	.+24     	; 0x42a2 <vfprintf+0x260>
    428a:	90 37       	cpi	r25, 0x70	; 112
    428c:	20 f4       	brcc	.+8      	; 0x4296 <vfprintf+0x254>
    428e:	98 35       	cpi	r25, 0x58	; 88
    4290:	09 f0       	breq	.+2      	; 0x4294 <vfprintf+0x252>
    4292:	ac c0       	rjmp	.+344    	; 0x43ec <vfprintf+0x3aa>
    4294:	0f c0       	rjmp	.+30     	; 0x42b4 <vfprintf+0x272>
    4296:	90 37       	cpi	r25, 0x70	; 112
    4298:	39 f0       	breq	.+14     	; 0x42a8 <vfprintf+0x266>
    429a:	98 37       	cpi	r25, 0x78	; 120
    429c:	09 f0       	breq	.+2      	; 0x42a0 <vfprintf+0x25e>
    429e:	a6 c0       	rjmp	.+332    	; 0x43ec <vfprintf+0x3aa>
    42a0:	04 c0       	rjmp	.+8      	; 0x42aa <vfprintf+0x268>
    42a2:	28 e0       	ldi	r18, 0x08	; 8
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	0a c0       	rjmp	.+20     	; 0x42bc <vfprintf+0x27a>
    42a8:	10 61       	ori	r17, 0x10	; 16
    42aa:	14 fd       	sbrc	r17, 4
    42ac:	14 60       	ori	r17, 0x04	; 4
    42ae:	20 e1       	ldi	r18, 0x10	; 16
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	04 c0       	rjmp	.+8      	; 0x42bc <vfprintf+0x27a>
    42b4:	14 fd       	sbrc	r17, 4
    42b6:	16 60       	ori	r17, 0x06	; 6
    42b8:	20 e1       	ldi	r18, 0x10	; 16
    42ba:	32 e0       	ldi	r19, 0x02	; 2
    42bc:	17 ff       	sbrs	r17, 7
    42be:	08 c0       	rjmp	.+16     	; 0x42d0 <vfprintf+0x28e>
    42c0:	f5 01       	movw	r30, r10
    42c2:	60 81       	ld	r22, Z
    42c4:	71 81       	ldd	r23, Z+1	; 0x01
    42c6:	82 81       	ldd	r24, Z+2	; 0x02
    42c8:	93 81       	ldd	r25, Z+3	; 0x03
    42ca:	44 e0       	ldi	r20, 0x04	; 4
    42cc:	50 e0       	ldi	r21, 0x00	; 0
    42ce:	08 c0       	rjmp	.+16     	; 0x42e0 <vfprintf+0x29e>
    42d0:	f5 01       	movw	r30, r10
    42d2:	80 81       	ld	r24, Z
    42d4:	91 81       	ldd	r25, Z+1	; 0x01
    42d6:	bc 01       	movw	r22, r24
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	42 e0       	ldi	r20, 0x02	; 2
    42de:	50 e0       	ldi	r21, 0x00	; 0
    42e0:	a4 0e       	add	r10, r20
    42e2:	b5 1e       	adc	r11, r21
    42e4:	a1 01       	movw	r20, r2
    42e6:	0e 94 40 22 	call	0x4480	; 0x4480 <__ultoa_invert>
    42ea:	d8 2e       	mov	r13, r24
    42ec:	d2 18       	sub	r13, r2
    42ee:	8f e7       	ldi	r24, 0x7F	; 127
    42f0:	f8 2e       	mov	r15, r24
    42f2:	f1 22       	and	r15, r17
    42f4:	f6 fe       	sbrs	r15, 6
    42f6:	0b c0       	rjmp	.+22     	; 0x430e <vfprintf+0x2cc>
    42f8:	5e ef       	ldi	r21, 0xFE	; 254
    42fa:	f5 22       	and	r15, r21
    42fc:	d9 14       	cp	r13, r9
    42fe:	38 f4       	brcc	.+14     	; 0x430e <vfprintf+0x2cc>
    4300:	f4 fe       	sbrs	r15, 4
    4302:	07 c0       	rjmp	.+14     	; 0x4312 <vfprintf+0x2d0>
    4304:	f2 fc       	sbrc	r15, 2
    4306:	05 c0       	rjmp	.+10     	; 0x4312 <vfprintf+0x2d0>
    4308:	8f ee       	ldi	r24, 0xEF	; 239
    430a:	f8 22       	and	r15, r24
    430c:	02 c0       	rjmp	.+4      	; 0x4312 <vfprintf+0x2d0>
    430e:	1d 2d       	mov	r17, r13
    4310:	01 c0       	rjmp	.+2      	; 0x4314 <vfprintf+0x2d2>
    4312:	19 2d       	mov	r17, r9
    4314:	f4 fe       	sbrs	r15, 4
    4316:	0d c0       	rjmp	.+26     	; 0x4332 <vfprintf+0x2f0>
    4318:	fe 01       	movw	r30, r28
    431a:	ed 0d       	add	r30, r13
    431c:	f1 1d       	adc	r31, r1
    431e:	80 81       	ld	r24, Z
    4320:	80 33       	cpi	r24, 0x30	; 48
    4322:	19 f4       	brne	.+6      	; 0x432a <vfprintf+0x2e8>
    4324:	99 ee       	ldi	r25, 0xE9	; 233
    4326:	f9 22       	and	r15, r25
    4328:	08 c0       	rjmp	.+16     	; 0x433a <vfprintf+0x2f8>
    432a:	1f 5f       	subi	r17, 0xFF	; 255
    432c:	f2 fe       	sbrs	r15, 2
    432e:	05 c0       	rjmp	.+10     	; 0x433a <vfprintf+0x2f8>
    4330:	03 c0       	rjmp	.+6      	; 0x4338 <vfprintf+0x2f6>
    4332:	8f 2d       	mov	r24, r15
    4334:	86 78       	andi	r24, 0x86	; 134
    4336:	09 f0       	breq	.+2      	; 0x433a <vfprintf+0x2f8>
    4338:	1f 5f       	subi	r17, 0xFF	; 255
    433a:	0f 2d       	mov	r16, r15
    433c:	f3 fc       	sbrc	r15, 3
    433e:	14 c0       	rjmp	.+40     	; 0x4368 <vfprintf+0x326>
    4340:	f0 fe       	sbrs	r15, 0
    4342:	0f c0       	rjmp	.+30     	; 0x4362 <vfprintf+0x320>
    4344:	1e 15       	cp	r17, r14
    4346:	10 f0       	brcs	.+4      	; 0x434c <vfprintf+0x30a>
    4348:	9d 2c       	mov	r9, r13
    434a:	0b c0       	rjmp	.+22     	; 0x4362 <vfprintf+0x320>
    434c:	9d 2c       	mov	r9, r13
    434e:	9e 0c       	add	r9, r14
    4350:	91 1a       	sub	r9, r17
    4352:	1e 2d       	mov	r17, r14
    4354:	06 c0       	rjmp	.+12     	; 0x4362 <vfprintf+0x320>
    4356:	80 e2       	ldi	r24, 0x20	; 32
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	b3 01       	movw	r22, r6
    435c:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    4360:	1f 5f       	subi	r17, 0xFF	; 255
    4362:	1e 15       	cp	r17, r14
    4364:	c0 f3       	brcs	.-16     	; 0x4356 <vfprintf+0x314>
    4366:	04 c0       	rjmp	.+8      	; 0x4370 <vfprintf+0x32e>
    4368:	1e 15       	cp	r17, r14
    436a:	10 f4       	brcc	.+4      	; 0x4370 <vfprintf+0x32e>
    436c:	e1 1a       	sub	r14, r17
    436e:	01 c0       	rjmp	.+2      	; 0x4372 <vfprintf+0x330>
    4370:	ee 24       	eor	r14, r14
    4372:	04 ff       	sbrs	r16, 4
    4374:	0f c0       	rjmp	.+30     	; 0x4394 <vfprintf+0x352>
    4376:	80 e3       	ldi	r24, 0x30	; 48
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	b3 01       	movw	r22, r6
    437c:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    4380:	02 ff       	sbrs	r16, 2
    4382:	1d c0       	rjmp	.+58     	; 0x43be <vfprintf+0x37c>
    4384:	01 fd       	sbrc	r16, 1
    4386:	03 c0       	rjmp	.+6      	; 0x438e <vfprintf+0x34c>
    4388:	88 e7       	ldi	r24, 0x78	; 120
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	0e c0       	rjmp	.+28     	; 0x43aa <vfprintf+0x368>
    438e:	88 e5       	ldi	r24, 0x58	; 88
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	0b c0       	rjmp	.+22     	; 0x43aa <vfprintf+0x368>
    4394:	80 2f       	mov	r24, r16
    4396:	86 78       	andi	r24, 0x86	; 134
    4398:	91 f0       	breq	.+36     	; 0x43be <vfprintf+0x37c>
    439a:	01 ff       	sbrs	r16, 1
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <vfprintf+0x360>
    439e:	8b e2       	ldi	r24, 0x2B	; 43
    43a0:	01 c0       	rjmp	.+2      	; 0x43a4 <vfprintf+0x362>
    43a2:	80 e2       	ldi	r24, 0x20	; 32
    43a4:	f7 fc       	sbrc	r15, 7
    43a6:	8d e2       	ldi	r24, 0x2D	; 45
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	b3 01       	movw	r22, r6
    43ac:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    43b0:	06 c0       	rjmp	.+12     	; 0x43be <vfprintf+0x37c>
    43b2:	80 e3       	ldi	r24, 0x30	; 48
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	b3 01       	movw	r22, r6
    43b8:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    43bc:	9a 94       	dec	r9
    43be:	d9 14       	cp	r13, r9
    43c0:	c0 f3       	brcs	.-16     	; 0x43b2 <vfprintf+0x370>
    43c2:	da 94       	dec	r13
    43c4:	f1 01       	movw	r30, r2
    43c6:	ed 0d       	add	r30, r13
    43c8:	f1 1d       	adc	r31, r1
    43ca:	80 81       	ld	r24, Z
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	b3 01       	movw	r22, r6
    43d0:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    43d4:	dd 20       	and	r13, r13
    43d6:	a9 f7       	brne	.-22     	; 0x43c2 <vfprintf+0x380>
    43d8:	06 c0       	rjmp	.+12     	; 0x43e6 <vfprintf+0x3a4>
    43da:	80 e2       	ldi	r24, 0x20	; 32
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	b3 01       	movw	r22, r6
    43e0:	0e 94 14 22 	call	0x4428	; 0x4428 <fputc>
    43e4:	ea 94       	dec	r14
    43e6:	ee 20       	and	r14, r14
    43e8:	c1 f7       	brne	.-16     	; 0x43da <vfprintf+0x398>
    43ea:	43 ce       	rjmp	.-890    	; 0x4072 <vfprintf+0x30>
    43ec:	f3 01       	movw	r30, r6
    43ee:	66 81       	ldd	r22, Z+6	; 0x06
    43f0:	77 81       	ldd	r23, Z+7	; 0x07
    43f2:	cb 01       	movw	r24, r22
    43f4:	2b 96       	adiw	r28, 0x0b	; 11
    43f6:	e2 e1       	ldi	r30, 0x12	; 18
    43f8:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__epilogue_restores__>

000043fc <strnlen_P>:
    43fc:	fc 01       	movw	r30, r24
    43fe:	05 90       	lpm	r0, Z+
    4400:	61 50       	subi	r22, 0x01	; 1
    4402:	70 40       	sbci	r23, 0x00	; 0
    4404:	01 10       	cpse	r0, r1
    4406:	d8 f7       	brcc	.-10     	; 0x43fe <strnlen_P+0x2>
    4408:	80 95       	com	r24
    440a:	90 95       	com	r25
    440c:	8e 0f       	add	r24, r30
    440e:	9f 1f       	adc	r25, r31
    4410:	08 95       	ret

00004412 <strnlen>:
    4412:	fc 01       	movw	r30, r24
    4414:	61 50       	subi	r22, 0x01	; 1
    4416:	70 40       	sbci	r23, 0x00	; 0
    4418:	01 90       	ld	r0, Z+
    441a:	01 10       	cpse	r0, r1
    441c:	d8 f7       	brcc	.-10     	; 0x4414 <strnlen+0x2>
    441e:	80 95       	com	r24
    4420:	90 95       	com	r25
    4422:	8e 0f       	add	r24, r30
    4424:	9f 1f       	adc	r25, r31
    4426:	08 95       	ret

00004428 <fputc>:
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	cf 93       	push	r28
    442e:	df 93       	push	r29
    4430:	8c 01       	movw	r16, r24
    4432:	eb 01       	movw	r28, r22
    4434:	8b 81       	ldd	r24, Y+3	; 0x03
    4436:	81 ff       	sbrs	r24, 1
    4438:	1b c0       	rjmp	.+54     	; 0x4470 <fputc+0x48>
    443a:	82 ff       	sbrs	r24, 2
    443c:	0d c0       	rjmp	.+26     	; 0x4458 <fputc+0x30>
    443e:	2e 81       	ldd	r18, Y+6	; 0x06
    4440:	3f 81       	ldd	r19, Y+7	; 0x07
    4442:	8c 81       	ldd	r24, Y+4	; 0x04
    4444:	9d 81       	ldd	r25, Y+5	; 0x05
    4446:	28 17       	cp	r18, r24
    4448:	39 07       	cpc	r19, r25
    444a:	64 f4       	brge	.+24     	; 0x4464 <fputc+0x3c>
    444c:	e8 81       	ld	r30, Y
    444e:	f9 81       	ldd	r31, Y+1	; 0x01
    4450:	01 93       	st	Z+, r16
    4452:	f9 83       	std	Y+1, r31	; 0x01
    4454:	e8 83       	st	Y, r30
    4456:	06 c0       	rjmp	.+12     	; 0x4464 <fputc+0x3c>
    4458:	e8 85       	ldd	r30, Y+8	; 0x08
    445a:	f9 85       	ldd	r31, Y+9	; 0x09
    445c:	80 2f       	mov	r24, r16
    445e:	09 95       	icall
    4460:	89 2b       	or	r24, r25
    4462:	31 f4       	brne	.+12     	; 0x4470 <fputc+0x48>
    4464:	8e 81       	ldd	r24, Y+6	; 0x06
    4466:	9f 81       	ldd	r25, Y+7	; 0x07
    4468:	01 96       	adiw	r24, 0x01	; 1
    446a:	9f 83       	std	Y+7, r25	; 0x07
    446c:	8e 83       	std	Y+6, r24	; 0x06
    446e:	02 c0       	rjmp	.+4      	; 0x4474 <fputc+0x4c>
    4470:	0f ef       	ldi	r16, 0xFF	; 255
    4472:	1f ef       	ldi	r17, 0xFF	; 255
    4474:	c8 01       	movw	r24, r16
    4476:	df 91       	pop	r29
    4478:	cf 91       	pop	r28
    447a:	1f 91       	pop	r17
    447c:	0f 91       	pop	r16
    447e:	08 95       	ret

00004480 <__ultoa_invert>:
    4480:	fa 01       	movw	r30, r20
    4482:	aa 27       	eor	r26, r26
    4484:	28 30       	cpi	r18, 0x08	; 8
    4486:	51 f1       	breq	.+84     	; 0x44dc <__ultoa_invert+0x5c>
    4488:	20 31       	cpi	r18, 0x10	; 16
    448a:	81 f1       	breq	.+96     	; 0x44ec <__ultoa_invert+0x6c>
    448c:	e8 94       	clt
    448e:	6f 93       	push	r22
    4490:	6e 7f       	andi	r22, 0xFE	; 254
    4492:	6e 5f       	subi	r22, 0xFE	; 254
    4494:	7f 4f       	sbci	r23, 0xFF	; 255
    4496:	8f 4f       	sbci	r24, 0xFF	; 255
    4498:	9f 4f       	sbci	r25, 0xFF	; 255
    449a:	af 4f       	sbci	r26, 0xFF	; 255
    449c:	b1 e0       	ldi	r27, 0x01	; 1
    449e:	3e d0       	rcall	.+124    	; 0x451c <__ultoa_invert+0x9c>
    44a0:	b4 e0       	ldi	r27, 0x04	; 4
    44a2:	3c d0       	rcall	.+120    	; 0x451c <__ultoa_invert+0x9c>
    44a4:	67 0f       	add	r22, r23
    44a6:	78 1f       	adc	r23, r24
    44a8:	89 1f       	adc	r24, r25
    44aa:	9a 1f       	adc	r25, r26
    44ac:	a1 1d       	adc	r26, r1
    44ae:	68 0f       	add	r22, r24
    44b0:	79 1f       	adc	r23, r25
    44b2:	8a 1f       	adc	r24, r26
    44b4:	91 1d       	adc	r25, r1
    44b6:	a1 1d       	adc	r26, r1
    44b8:	6a 0f       	add	r22, r26
    44ba:	71 1d       	adc	r23, r1
    44bc:	81 1d       	adc	r24, r1
    44be:	91 1d       	adc	r25, r1
    44c0:	a1 1d       	adc	r26, r1
    44c2:	20 d0       	rcall	.+64     	; 0x4504 <__ultoa_invert+0x84>
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <__ultoa_invert+0x48>
    44c6:	68 94       	set
    44c8:	3f 91       	pop	r19
    44ca:	2a e0       	ldi	r18, 0x0A	; 10
    44cc:	26 9f       	mul	r18, r22
    44ce:	11 24       	eor	r1, r1
    44d0:	30 19       	sub	r19, r0
    44d2:	30 5d       	subi	r19, 0xD0	; 208
    44d4:	31 93       	st	Z+, r19
    44d6:	de f6       	brtc	.-74     	; 0x448e <__ultoa_invert+0xe>
    44d8:	cf 01       	movw	r24, r30
    44da:	08 95       	ret
    44dc:	46 2f       	mov	r20, r22
    44de:	47 70       	andi	r20, 0x07	; 7
    44e0:	40 5d       	subi	r20, 0xD0	; 208
    44e2:	41 93       	st	Z+, r20
    44e4:	b3 e0       	ldi	r27, 0x03	; 3
    44e6:	0f d0       	rcall	.+30     	; 0x4506 <__ultoa_invert+0x86>
    44e8:	c9 f7       	brne	.-14     	; 0x44dc <__ultoa_invert+0x5c>
    44ea:	f6 cf       	rjmp	.-20     	; 0x44d8 <__ultoa_invert+0x58>
    44ec:	46 2f       	mov	r20, r22
    44ee:	4f 70       	andi	r20, 0x0F	; 15
    44f0:	40 5d       	subi	r20, 0xD0	; 208
    44f2:	4a 33       	cpi	r20, 0x3A	; 58
    44f4:	18 f0       	brcs	.+6      	; 0x44fc <__ultoa_invert+0x7c>
    44f6:	49 5d       	subi	r20, 0xD9	; 217
    44f8:	31 fd       	sbrc	r19, 1
    44fa:	40 52       	subi	r20, 0x20	; 32
    44fc:	41 93       	st	Z+, r20
    44fe:	02 d0       	rcall	.+4      	; 0x4504 <__ultoa_invert+0x84>
    4500:	a9 f7       	brne	.-22     	; 0x44ec <__ultoa_invert+0x6c>
    4502:	ea cf       	rjmp	.-44     	; 0x44d8 <__ultoa_invert+0x58>
    4504:	b4 e0       	ldi	r27, 0x04	; 4
    4506:	a6 95       	lsr	r26
    4508:	97 95       	ror	r25
    450a:	87 95       	ror	r24
    450c:	77 95       	ror	r23
    450e:	67 95       	ror	r22
    4510:	ba 95       	dec	r27
    4512:	c9 f7       	brne	.-14     	; 0x4506 <__ultoa_invert+0x86>
    4514:	00 97       	sbiw	r24, 0x00	; 0
    4516:	61 05       	cpc	r22, r1
    4518:	71 05       	cpc	r23, r1
    451a:	08 95       	ret
    451c:	9b 01       	movw	r18, r22
    451e:	ac 01       	movw	r20, r24
    4520:	0a 2e       	mov	r0, r26
    4522:	06 94       	lsr	r0
    4524:	57 95       	ror	r21
    4526:	47 95       	ror	r20
    4528:	37 95       	ror	r19
    452a:	27 95       	ror	r18
    452c:	ba 95       	dec	r27
    452e:	c9 f7       	brne	.-14     	; 0x4522 <__ultoa_invert+0xa2>
    4530:	62 0f       	add	r22, r18
    4532:	73 1f       	adc	r23, r19
    4534:	84 1f       	adc	r24, r20
    4536:	95 1f       	adc	r25, r21
    4538:	a0 1d       	adc	r26, r0
    453a:	08 95       	ret

0000453c <_exit>:
    453c:	f8 94       	cli

0000453e <__stop_program>:
    453e:	ff cf       	rjmp	.-2      	; 0x453e <__stop_program>
